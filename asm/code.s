	.INCLUDE "macro.inc"

	.SYNTAX UNIFIED

	THUMB_FUNC_START sub_80895B4
sub_80895B4: @ 0x080895B4
	push {lr}
	adds r2, r0, #0
	movs r0, #1
	ands r0, r2
	ldr r3, _080895DC  @ gUnknown_08A07C58
	cmp r0, #0
	beq _080895C4
	ldr r3, _080895E0  @ gUnknown_08A07AD8
_080895C4:
	movs r0, #0x80
	ands r0, r2
	cmp r0, #0
	bne _0808960A
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	beq _080895E4
	movs r0, #0xa0
	lsls r0, r0, #1
	adds r3, r3, r0
	b _0808960A
	.align 2, 0
_080895DC: .4byte gUnknown_08A07C58
_080895E0: .4byte gUnknown_08A07AD8
_080895E4:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	bne _0808960A
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _080895F6
	adds r3, #0x40
_080895F6:
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	beq _08089600
	adds r3, #0x80
_08089600:
	movs r0, #4
	ands r0, r2
	cmp r0, #0
	beq _0808960A
	adds r3, #0x80
_0808960A:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _08089614
	adds r3, #0x20
_08089614:
	lsls r1, r1, #5
	adds r0, r3, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8089624
sub_8089624: @ 0x08089624
	push {r4, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	movs r0, #0x84
	lsls r0, r0, #1
	cmp r3, r0
	bls _08089634
	movs r3, #0x54
_08089634:
	ldr r2, _08089660  @ gUnknown_0203E78C
	ldr r0, _08089664  @ 0x000003FF
	adds r1, r0, #0
	adds r0, r4, #0
	ands r0, r1
	strh r0, [r2, #2]
	ldr r1, _08089668  @ chap_title_data
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	lsls r1, r4, #5
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	bl CopyDataWithPossibleUncomp
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08089660: .4byte gUnknown_0203E78C
_08089664: .4byte 0x000003FF
_08089668: .4byte chap_title_data

	THUMB_FUNC_START sub_808966C
sub_808966C: @ 0x0808966C
	push {lr}
	bl sub_8089624
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8089678
sub_8089678: @ 0x08089678
	push {lr}
	adds r1, r0, #0
	ldr r3, _0808969C  @ gUnknown_0203E78C
	ldr r0, _080896A0  @ 0x000003FF
	adds r2, r0, #0
	adds r0, r1, #0
	ands r0, r2
	strh r0, [r3]
	ldr r0, _080896A4  @ gUnknown_08A09E4C
	lsls r1, r1, #5
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	bl CopyDataWithPossibleUncomp
	pop {r0}
	bx r0
	.align 2, 0
_0808969C: .4byte gUnknown_0203E78C
_080896A0: .4byte 0x000003FF
_080896A4: .4byte gUnknown_08A09E4C

	THUMB_FUNC_START sub_80896A8
sub_80896A8: @ 0x080896A8
	push {lr}
	adds r1, r0, #0
	ldr r3, _080896CC  @ gUnknown_0203E78C
	ldr r0, _080896D0  @ 0x000003FF
	adds r2, r0, #0
	adds r0, r1, #0
	ands r0, r2
	strh r0, [r3]
	ldr r0, _080896D4  @ gUnknown_08A0A4E8
	lsls r1, r1, #5
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	bl CopyDataWithPossibleUncomp
	pop {r0}
	bx r0
	.align 2, 0
_080896CC: .4byte gUnknown_0203E78C
_080896D0: .4byte 0x000003FF
_080896D4: .4byte gUnknown_08A0A4E8

	THUMB_FUNC_START sub_80896D8
sub_80896D8: @ 0x080896D8
	push {lr}
	adds r2, r0, #0
	ldr r0, _080896F8  @ gUnknown_0203E78C
	lsls r1, r1, #0xc
	ldrh r0, [r0, #2]
	adds r1, r1, r0
	movs r0, #0x3f
_080896E6:
	strh r1, [r2]
	adds r1, #1
	adds r2, #2
	subs r0, #1
	cmp r0, #0
	bge _080896E6
	pop {r0}
	bx r0
	.align 2, 0
_080896F8: .4byte gUnknown_0203E78C

	THUMB_FUNC_START sub_80896FC
sub_80896FC: @ 0x080896FC
	push {lr}
	adds r2, r0, #0
	ldr r0, _0808971C  @ gUnknown_0203E78C
	lsls r1, r1, #0xc
	ldrh r0, [r0, #2]
	adds r1, r1, r0
	movs r0, #0x3f
_0808970A:
	strh r1, [r2]
	adds r1, #1
	adds r2, #2
	subs r0, #1
	cmp r0, #0
	bge _0808970A
	pop {r0}
	bx r0
	.align 2, 0
_0808971C: .4byte gUnknown_0203E78C

	THUMB_FUNC_START sub_8089720
sub_8089720: @ 0x08089720
	push {lr}
	adds r2, r0, #0
	ldr r0, _08089740  @ gUnknown_0203E78C
	lsls r1, r1, #0xc
	ldrh r0, [r0]
	adds r1, r1, r0
	movs r0, #0x7f
_0808972E:
	strh r1, [r2]
	adds r1, #1
	adds r2, #2
	subs r0, #1
	cmp r0, #0
	bge _0808972E
	pop {r0}
	bx r0
	.align 2, 0
_08089740: .4byte gUnknown_0203E78C

	THUMB_FUNC_START sub_8089744
sub_8089744: @ 0x08089744
	push {lr}
	adds r2, r1, #0
	ldr r1, _08089760  @ gUnknown_08A0A9F8
	ldr r3, _08089764  @ gUnknown_0203E78C
	lsls r2, r2, #0xc
	ldrh r3, [r3]
	adds r2, r2, r3
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl CallARM_FillTileRect
	pop {r0}
	bx r0
	.align 2, 0
_08089760: .4byte gUnknown_08A0A9F8
_08089764: .4byte gUnknown_0203E78C

	THUMB_FUNC_START sub_8089768
sub_8089768: @ 0x08089768
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _08089774
	movs r0, #0x54
	b _08089798
_08089774:
	ldrb r2, [r1, #0x14]
	movs r0, #4
	ands r0, r2
	cmp r0, #0
	beq _08089782
	movs r0, #0x57
	b _08089798
_08089782:
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	bne _08089796
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	bl GetROMChapterStruct
	ldrb r0, [r0, #0xe]
	b _08089798
_08089796:
	movs r0, #0x55
_08089798:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808979C
sub_808979C: @ 0x0808979C
	push {r4, r5, lr}
	adds r4, r0, #0
	cmp r4, #0
	bne _080897AE
	movs r0, #0x54
	b _080897F2
_080897A8:
	adds r0, r1, #0
	adds r0, #0x46
	b _080897F2
_080897AE:
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl sub_80BCFDC
	adds r5, r0, #0
	ldrb r1, [r4, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _080897CC
	ldr r0, _080897F8  @ gUnknown_03005280
	bl sub_80BD014
	cmp r0, r5
	beq _080897E8
_080897CC:
	movs r1, #0
	ldr r0, _080897FC  @ gUnknown_08206951
	ldrb r0, [r0]
	cmp r1, r0
	bge _080897E8
	ldr r3, _08089800  @ gUnknown_08206948
	adds r2, r0, #0
_080897DA:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r5, r0
	beq _080897A8
	adds r1, #1
	cmp r1, r2
	blt _080897DA
_080897E8:
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetROMChapterStruct
	ldrb r0, [r0, #0xe]
_080897F2:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080897F8: .4byte gUnknown_03005280
_080897FC: .4byte gUnknown_08206951
_08089800: .4byte gUnknown_08206948

	THUMB_FUNC_START LoadDialogueBoxGfx
LoadDialogueBoxGfx: @ 0x08089804
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	cmp r5, #0
	bne _08089810
	ldr r5, _080898A4  @ 0x06013000
_08089810:
	cmp r6, #0
	bge _08089816
	movs r6, #5
_08089816:
	movs r4, #0xf
	adds r0, r4, #0
	ands r0, r6
	adds r6, r0, #0
	adds r6, #0x10
	ldr r0, _080898A8  @ gUnknown_08A0285C
	movs r2, #0xd8
	lsls r2, r2, #2
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _080898AC  @ gUnknown_08A02884
	movs r2, #0xec
	lsls r2, r2, #3
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _080898B0  @ gUnknown_08A028AC
	movs r2, #0xb6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _080898B4  @ gUnknown_08A02914
	movs r2, #0xf6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _080898B8  @ gUnknown_08A02980
	movs r2, #0x9b
	lsls r2, r2, #5
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r7, _080898BC  @ gUnknown_0203E794
	adds r0, r7, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl InitSomeOtherGraphicsRelatedStruct
	adds r0, r7, #0
	adds r0, #0x18
	bl Text_Init3
	adds r0, r7, #0
	adds r0, #0x20
	bl Text_Init3
	adds r0, r7, #0
	adds r0, #0x28
	bl Text_Init3
	movs r0, #0
	bl SetFont
	ldr r0, _080898C0  @ gUnknown_0859EF40
	lsls r1, r6, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	lsls r0, r5, #0x11
	lsrs r0, r0, #0x16
	ands r6, r4
	lsls r1, r6, #0xc
	adds r0, r0, r1
	strh r0, [r7, #0x30]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080898A4: .4byte 0x06013000
_080898A8: .4byte gUnknown_08A0285C
_080898AC: .4byte gUnknown_08A02884
_080898B0: .4byte gUnknown_08A028AC
_080898B4: .4byte gUnknown_08A02914
_080898B8: .4byte gUnknown_08A02980
_080898BC: .4byte gUnknown_0203E794
_080898C0: .4byte gUnknown_0859EF40

	THUMB_FUNC_START sub_80898C4
sub_80898C4: @ 0x080898C4
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	cmp r5, #0
	bne _080898D0
	ldr r5, _08089960  @ 0x06013000
_080898D0:
	cmp r6, #0
	bge _080898D6
	movs r6, #5
_080898D6:
	movs r4, #0xf
	adds r0, r4, #0
	ands r0, r6
	adds r6, r0, #0
	adds r6, #0x10
	ldr r0, _08089964  @ gUnknown_08A0285C
	movs r2, #0xd8
	lsls r2, r2, #2
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _08089968  @ gUnknown_08A02884
	movs r2, #0xec
	lsls r2, r2, #3
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808996C  @ gUnknown_08A028AC
	movs r2, #0xb6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _08089970  @ gUnknown_08A02914
	movs r2, #0xf6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _08089974  @ gUnknown_08A02980
	movs r2, #0x9b
	lsls r2, r2, #5
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r7, _08089978  @ gUnknown_0203E794
	adds r0, r7, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl InitSomeOtherGraphicsRelatedStruct
	adds r0, r7, #0
	adds r0, #0x18
	bl Text_Init3
	adds r0, r7, #0
	adds r0, #0x20
	bl Text_Init3
	adds r1, r7, #0
	adds r1, #0x2c
	movs r0, #0
	strb r0, [r1]
	bl SetFont
	ldr r0, _0808997C  @ gUnknown_0859EF40
	lsls r1, r6, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	lsls r0, r5, #0x11
	lsrs r0, r0, #0x16
	ands r6, r4
	lsls r1, r6, #0xc
	adds r0, r0, r1
	strh r0, [r7, #0x30]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089960: .4byte 0x06013000
_08089964: .4byte gUnknown_08A0285C
_08089968: .4byte gUnknown_08A02884
_0808996C: .4byte gUnknown_08A028AC
_08089970: .4byte gUnknown_08A02914
_08089974: .4byte gUnknown_08A02980
_08089978: .4byte gUnknown_0203E794
_0808997C: .4byte gUnknown_0859EF40

	THUMB_FUNC_START sub_8089980
sub_8089980: @ 0x08089980
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x2c
	mov sl, r0
	str r1, [sp, #4]
	adds r7, r2, #0
	mov r9, r3
	adds r0, r7, #7
	movs r1, #0x10
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r0, #0xf
	adds r1, r7, #0
	ands r1, r0
	cmp r7, #0x1f
	bgt _080899AA
	movs r7, #0x20
_080899AA:
	cmp r7, #0xc0
	ble _080899B0
	movs r7, #0xc0
_080899B0:
	mov r0, r9
	cmp r0, #0xf
	bgt _080899BA
	movs r0, #0x10
	mov r9, r0
_080899BA:
	mov r0, r9
	cmp r0, #0x30
	ble _080899C4
	movs r0, #0x30
	mov r9, r0
_080899C4:
	adds r0, r7, #0
	adds r0, #0x1f
	cmp r0, #0
	bge _080899CE
	adds r0, #0x1f
_080899CE:
	asrs r2, r0, #5
	mov r0, r9
	adds r0, #0xf
	cmp r0, #0
	bge _080899DA
	adds r0, #0xf
_080899DA:
	asrs r0, r0, #4
	str r0, [sp, #8]
	lsls r0, r3, #0x18
	lsrs r3, r0, #0x18
	mov r8, r3
	subs r5, r2, #1
	str r0, [sp, #0x1c]
	str r5, [sp, #0x14]
	ldr r0, [sp, #4]
	subs r0, #8
	str r0, [sp, #0x10]
	ldr r3, [sp, #4]
	add r3, r9
	str r3, [sp, #0x28]
	mov r0, sl
	subs r0, #8
	str r0, [sp, #0xc]
	mov r3, sl
	adds r3, r3, r7
	str r3, [sp, #0x24]
	lsls r1, r1, #0x18
	str r1, [sp, #0x20]
	cmp r5, #0
	blt _08089A92
_08089A0A:
	ldr r4, [sp, #8]
	subs r0, r5, #1
	str r0, [sp, #0x18]
	cmp r4, #0
	blt _08089A88
	lsls r6, r4, #6
	mov r1, r8
	lsls r0, r1, #0x18
	asrs r0, r0, #0x18
	mov r8, r0
_08089A1E:
	adds r0, r4, #1
	lsls r2, r0, #4
	cmp r2, r9
	ble _08089A28
	mov r2, r9
_08089A28:
	subs r2, #0x10
	adds r0, r5, #1
	lsls r0, r0, #5
	mov r3, r8
	cmp r3, #0
	beq _08089A5C
	subs r0, #0x20
	mov r3, sl
	adds r1, r3, r0
	ldr r0, [sp, #4]
	adds r2, r0, r2
	ldr r3, _08089A54  @ gUnknown_0203E794
	lsls r0, r5, #2
	ldrh r3, [r3, #0x30]
	adds r0, r0, r3
	adds r0, r0, r6
	str r0, [sp]
	movs r0, #0
	ldr r3, _08089A58  @ gUnknown_08590F4C
	bl RegisterObjectAttributes_SafeMaybe
	b _08089A80
	.align 2, 0
_08089A54: .4byte gUnknown_0203E794
_08089A58: .4byte gUnknown_08590F4C
_08089A5C:
	cmp r0, r7
	ble _08089A62
	adds r0, r7, #0
_08089A62:
	subs r0, #0x20
	mov r3, sl
	adds r1, r3, r0
	ldr r0, [sp, #4]
	adds r2, r0, r2
	ldr r3, _08089ADC  @ gUnknown_0203E794
	lsls r0, r5, #2
	ldrh r3, [r3, #0x30]
	adds r0, r0, r3
	adds r0, r0, r6
	str r0, [sp]
	movs r0, #0
	ldr r3, _08089AE0  @ gUnknown_08590F8C
	bl RegisterObjectAttributes_SafeMaybe
_08089A80:
	subs r6, #0x40
	subs r4, #1
	cmp r4, #0
	bge _08089A1E
_08089A88:
	movs r1, #0
	mov r8, r1
	ldr r5, [sp, #0x18]
	cmp r5, #0
	bge _08089A0A
_08089A92:
	ldr r3, [sp, #0x1c]
	lsrs r3, r3, #0x18
	mov r8, r3
	ldr r5, [sp, #0x14]
	cmp r5, #0
	blt _08089B1E
	ldr r6, _08089ADC  @ gUnknown_0203E794
_08089AA0:
	adds r0, r5, #1
	lsls r0, r0, #5
	mov r1, r8
	cmp r1, #0
	beq _08089AE8
	subs r0, #0x20
	mov r3, sl
	adds r4, r3, r0
	ldrh r0, [r6, #0x30]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x10]
	ldr r3, _08089AE4  @ gUnknown_08590F7C
	bl RegisterObjectAttributes_SafeMaybe
	ldrh r0, [r6, #0x30]
	adds r0, #0x3b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x28]
	ldr r3, _08089AE4  @ gUnknown_08590F7C
	bl RegisterObjectAttributes_SafeMaybe
	movs r0, #0
	mov r8, r0
	b _08089B18
	.align 2, 0
_08089ADC: .4byte gUnknown_0203E794
_08089AE0: .4byte gUnknown_08590F8C
_08089AE4: .4byte gUnknown_08590F7C
_08089AE8:
	cmp r0, r7
	ble _08089AEE
	adds r0, r7, #0
_08089AEE:
	subs r0, #0x20
	mov r1, sl
	adds r4, r1, r0
	ldrh r0, [r6, #0x30]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x10]
	ldr r3, _08089C28  @ gUnknown_08590F9C
	bl RegisterObjectAttributes_SafeMaybe
	ldrh r0, [r6, #0x30]
	adds r0, #0x3b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x28]
	ldr r3, _08089C28  @ gUnknown_08590F9C
	bl RegisterObjectAttributes_SafeMaybe
_08089B18:
	subs r5, #1
	cmp r5, #0
	bge _08089AA0
_08089B1E:
	ldr r4, [sp, #8]
	cmp r4, #0
	blt _08089B7C
_08089B24:
	adds r0, r4, #1
	lsls r2, r0, #4
	cmp r2, r9
	ble _08089B2E
	mov r2, r9
_08089B2E:
	subs r2, #0x10
	ldr r3, [sp, #4]
	adds r5, r3, r2
	ldr r7, _08089C2C  @ gUnknown_08590F64
	ldr r6, _08089C30  @ gUnknown_0203E794
	ldrh r0, [r6, #0x30]
	adds r0, #0x5f
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0xc]
	adds r2, r5, #0
	adds r3, r7, #0
	bl RegisterObjectAttributes_SafeMaybe
	ldrh r0, [r6, #0x30]
	adds r0, #0x1f
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x24]
	adds r2, r5, #0
	adds r3, r7, #0
	bl RegisterObjectAttributes_SafeMaybe
	ldr r0, [sp, #0x20]
	cmp r0, #0
	beq _08089B76
	ldrh r0, [r6, #0x30]
	adds r0, #0x1a
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x24]
	subs r1, #8
	adds r2, r5, #0
	adds r3, r7, #0
	bl RegisterObjectAttributes_SafeMaybe
_08089B76:
	subs r4, #1
	cmp r4, #0
	bge _08089B24
_08089B7C:
	ldr r6, _08089C34  @ gUnknown_08590F44
	ldr r5, _08089C30  @ gUnknown_0203E794
	ldrh r0, [r5, #0x30]
	adds r0, #0x5b
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0xc]
	ldr r2, [sp, #0x10]
	adds r3, r6, #0
	bl RegisterObjectAttributes_SafeMaybe
	ldrh r0, [r5, #0x30]
	adds r0, #0x5c
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x24]
	ldr r2, [sp, #0x10]
	adds r3, r6, #0
	bl RegisterObjectAttributes_SafeMaybe
	ldrh r0, [r5, #0x30]
	adds r0, #0x5d
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0xc]
	ldr r2, [sp, #0x28]
	adds r3, r6, #0
	bl RegisterObjectAttributes_SafeMaybe
	ldrh r0, [r5, #0x30]
	adds r0, #0x5e
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x24]
	ldr r2, [sp, #0x28]
	adds r3, r6, #0
	bl RegisterObjectAttributes_SafeMaybe
	ldr r1, [sp, #0x20]
	cmp r1, #0
	beq _08089BF6
	ldr r4, [sp, #0x24]
	subs r4, #8
	ldrh r0, [r5, #0x30]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x10]
	adds r3, r6, #0
	bl RegisterObjectAttributes_SafeMaybe
	ldrh r0, [r5, #0x30]
	adds r0, #0x3b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x28]
	adds r3, r6, #0
	bl RegisterObjectAttributes_SafeMaybe
_08089BF6:
	ldr r0, [sp, #0x4c]
	cmp r0, #0
	bne _08089C16
	ldr r2, [sp, #4]
	subs r2, #0xb
	ldr r3, _08089C38  @ gUnknown_08590F8C
	ldr r0, _08089C30  @ gUnknown_0203E794
	ldrh r1, [r0, #0x30]
	ldr r0, _08089C3C  @ 0x000003FF
	ands r0, r1
	adds r0, #0x7b
	str r0, [sp]
	movs r0, #0
	mov r1, sl
	bl RegisterObjectAttributes_SafeMaybe
_08089C16:
	add sp, #0x2c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089C28: .4byte gUnknown_08590F9C
_08089C2C: .4byte gUnknown_08590F64
_08089C30: .4byte gUnknown_0203E794
_08089C34: .4byte gUnknown_08590F44
_08089C38: .4byte gUnknown_08590F8C
_08089C3C: .4byte 0x000003FF

	THUMB_FUNC_START sub_8089C40
sub_8089C40: @ 0x08089C40
	push {r4, lr}
	ldr r4, _08089CC0  @ gUnknown_0203E7AC
	bl GetItemType
	bl GetWeaponTypeDisplayString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertString
	movs r0, #0xa0
	lsls r0, r0, #3
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x2f
	movs r2, #8
	bl Text_InsertString
	ldr r0, _08089CC4  @ 0x00000502
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x61
	movs r2, #8
	bl Text_InsertString
	adds r4, #8
	ldr r0, _08089CC8  @ 0x00000503
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertString
	ldr r0, _08089CCC  @ 0x000004F4
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x2f
	movs r2, #8
	bl Text_InsertString
	ldr r0, _08089CD0  @ 0x00000501
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x61
	movs r2, #8
	bl Text_InsertString
	movs r0, #2
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08089CC0: .4byte gUnknown_0203E7AC
_08089CC4: .4byte 0x00000502
_08089CC8: .4byte 0x00000503
_08089CCC: .4byte 0x000004F4
_08089CD0: .4byte 0x00000501

	THUMB_FUNC_START sub_8089CD4
sub_8089CD4: @ 0x08089CD4
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08089D4C  @ gUnknown_0203E7AC
	bl GetItemDisplayRankString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x20
	movs r2, #7
	bl Text_InsertString
	adds r0, r5, #0
	bl GetItemDisplayRangeString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x43
	movs r2, #7
	bl Text_InsertString
	adds r0, r5, #0
	bl GetItemWeight
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x81
	movs r2, #7
	bl Text_InsertNumberOr2Dashes
	adds r4, #8
	adds r0, r5, #0
	bl GetItemMight
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x20
	movs r2, #7
	bl Text_InsertNumberOr2Dashes
	adds r0, r5, #0
	bl GetItemHit
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x51
	movs r2, #7
	bl Text_InsertNumberOr2Dashes
	adds r0, r5, #0
	bl GetItemCrit
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x81
	movs r2, #7
	bl Text_InsertNumberOr2Dashes
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08089D4C: .4byte gUnknown_0203E7AC

	THUMB_FUNC_START sub_8089D50
sub_8089D50: @ 0x08089D50
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08089DA8  @ gUnknown_0203E7AC
	ldr r0, _08089DAC  @ 0x00000509
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertString
	adds r0, r5, #0
	bl GetItemDisplayRankString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x1e
	movs r2, #7
	bl Text_InsertString
	movs r0, #0xa0
	lsls r0, r0, #3
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x30
	movs r2, #8
	bl Text_InsertString
	adds r0, r5, #0
	bl GetItemDisplayRangeString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x46
	movs r2, #7
	bl Text_InsertString
	movs r0, #1
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08089DA8: .4byte gUnknown_0203E7AC
_08089DAC: .4byte 0x00000509

	THUMB_FUNC_START sub_8089DB0
sub_8089DB0: @ 0x08089DB0
	push {r4, lr}
	ldr r4, _08089DE0  @ gUnknown_0203E7AC
	ldr r0, _08089DE4  @ 0x00000147
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertString
	movs r0, #0xa4
	lsls r0, r0, #1
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x5a
	movs r2, #8
	bl Text_InsertString
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08089DE0: .4byte gUnknown_0203E7AC
_08089DE4: .4byte 0x00000147

	THUMB_FUNC_START sub_8089DE8
sub_8089DE8: @ 0x08089DE8
	push {r4, lr}
	bl sub_80AA768
	adds r3, r0, #0
	cmp r3, #0
	beq _08089E04
	ldr r0, _08089E00  @ gUnknown_0203E7AC
	movs r1, #0x1a
	movs r2, #7
	bl Text_InsertString
	b _08089E1A
	.align 2, 0
_08089E00: .4byte gUnknown_0203E7AC
_08089E04:
	ldr r4, _08089E30  @ gUnknown_0203E7AC
	movs r0, #0xa7
	lsls r0, r0, #3
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x1a
	movs r2, #7
	bl Text_InsertString
_08089E1A:
	bl sub_80AA744
	adds r3, r0, #0
	cmp r3, #0
	blt _08089E34
	ldr r0, _08089E30  @ gUnknown_0203E7AC
	movs r1, #0x74
	movs r2, #7
	bl Text_InsertNumberOr2Dashes
	b _08089E48
	.align 2, 0
_08089E30: .4byte gUnknown_0203E7AC
_08089E34:
	ldr r4, _08089E50  @ gUnknown_0203E7AC
	ldr r0, _08089E54  @ 0x00000535
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x6c
	movs r2, #7
	bl Text_InsertString
_08089E48:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08089E50: .4byte gUnknown_0203E7AC
_08089E54: .4byte 0x00000535

	THUMB_FUNC_START sub_8089E58
sub_8089E58: @ 0x08089E58
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x5e
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt _08089EE6
	adds r0, r4, #0
	adds r0, #0x60
	ldrh r0, [r0]
	strh r0, [r1]
	ldr r0, [r4, #0x30]
	bl SetFont
	movs r6, #0
	adds r0, r4, #0
	adds r0, #0x62
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r7, r0, #0
	cmp r6, r1
	bge _08089EE0
	adds r5, r4, #0
	adds r5, #0x5c
_08089E8E:
	ldr r0, [r4, #0x2c]
	ldrb r2, [r0]
	adds r3, r0, #0
	cmp r2, #1
	beq _08089EB0
	cmp r2, #1
	bgt _08089EA2
	cmp r2, #0
	beq _08089EA8
	b _08089EC0
_08089EA2:
	cmp r2, #4
	beq _08089EBC
	b _08089EC0
_08089EA8:
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _08089EE0
_08089EB0:
	adds r0, r3, #1
	str r0, [r4, #0x2c]
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	b _08089ED6
_08089EBC:
	adds r0, r3, #1
	b _08089ED4
_08089EC0:
	movs r0, #0
	ldrsh r1, [r5, r0]
	lsls r1, r1, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r3, #0
	bl Text_AppendChar
_08089ED4:
	str r0, [r4, #0x2c]
_08089ED6:
	adds r6, #1
	movs r1, #0
	ldrsh r0, [r7, r1]
	cmp r6, r0
	blt _08089E8E
_08089EE0:
	movs r0, #0
	bl SetFont
_08089EE6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8089EEC
sub_8089EEC: @ 0x08089EEC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	bl SetFont
	movs r6, #0
_08089EF8:
	lsls r1, r6, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r5, [r0]
	ldrb r0, [r5, #4]
	lsls r0, r0, #3
	ldr r1, [r4, #0x2c]
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_SetXCursor
_08089F14:
	ldr r0, [r4, #0x2c]
	ldrb r1, [r0]
	cmp r1, #1
	beq _08089F34
	cmp r1, #1
	bgt _08089F26
	cmp r1, #0
	beq _08089F4C
	b _08089F40
_08089F26:
	cmp r1, #5
	bgt _08089F40
	cmp r1, #4
	blt _08089F40
	adds r0, #1
	str r0, [r4, #0x2c]
	b _08089F14
_08089F34:
	adds r0, #1
	str r0, [r4, #0x2c]
	adds r6, #1
	cmp r6, #5
	ble _08089EF8
	b _08089F4C
_08089F40:
	ldr r1, [r4, #0x2c]
	adds r0, r5, #0
	bl Text_AppendChar
	str r0, [r4, #0x2c]
	b _08089F14
_08089F4C:
	ldr r0, [r4, #0x30]
	bl SetFont
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8089F58
sub_8089F58: @ 0x08089F58
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x58]
	ldr r0, _08089F80  @ gUnknown_0203E794
	bl SetFont
	movs r0, #0
	bl SetFontGlyphSet
	adds r0, r4, #0
	bl GetHelpBoxItemInfoKind
	adds r1, r0, #0
	cmp r1, #1
	beq _08089F96
	cmp r1, #1
	bgt _08089F84
	cmp r1, #0
	beq _08089F8E
	b _08089FB8
	.align 2, 0
_08089F80: .4byte gUnknown_0203E794
_08089F84:
	cmp r1, #2
	beq _08089FA4
	cmp r1, #3
	beq _08089FAC
	b _08089FB8
_08089F8E:
	adds r0, r5, #0
	adds r0, #0x64
	strh r1, [r0]
	b _08089FB8
_08089F96:
	adds r0, r4, #0
	bl sub_8089C40
	adds r1, r5, #0
	adds r1, #0x64
	movs r0, #2
	b _08089FB6
_08089FA4:
	adds r0, r4, #0
	bl sub_8089D50
	b _08089FB0
_08089FAC:
	bl sub_8089DB0
_08089FB0:
	adds r1, r5, #0
	adds r1, #0x64
	movs r0, #1
_08089FB6:
	strh r0, [r1]
_08089FB8:
	movs r0, #0
	bl SetFont
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8089FCC
sub_8089FCC: @ 0x08089FCC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x58]
	ldr r0, _08089FE8  @ gUnknown_0203E794
	bl SetFont
	adds r0, r4, #0
	bl GetHelpBoxItemInfoKind
	cmp r0, #1
	beq _08089FEC
	cmp r0, #3
	beq _08089FF4
	b _08089FF8
	.align 2, 0
_08089FE8: .4byte gUnknown_0203E794
_08089FEC:
	adds r0, r4, #0
	bl sub_8089CD4
	b _08089FF8
_08089FF4:
	bl sub_8089DE8
_08089FF8:
	movs r0, #0
	bl SetFont
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A00C
sub_808A00C: @ 0x0808A00C
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, r9
	mov r4, r8
	push {r4, r5, r6}
	mov sl, r0
	ldr r5, _0808A0B4  @ gUnknown_0203E794
	adds r0, r5, #0
	bl SetFont
	movs r0, #1
	bl SetFontGlyphSet
	movs r0, #0x18
	adds r0, r0, r5
	mov r9, r0
	movs r1, #6
	bl Text_SetColorId
	movs r1, #0x20
	adds r1, r1, r5
	mov r8, r1
	mov r0, r8
	movs r1, #6
	bl Text_SetColorId
	adds r6, r5, #0
	adds r6, #0x28
	adds r0, r6, #0
	movs r1, #6
	bl Text_SetColorId
	movs r0, #0
	bl SetFont
	ldr r4, _0808A0B8  @ gUnknown_08A01628
	adds r0, r4, #0
	bl Proc_DeleteAllWithScript
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Create
	adds r4, r0, #0
	str r5, [r4, #0x30]
	mov r0, r9
	str r0, [r4, #0x34]
	mov r1, r8
	str r1, [r4, #0x38]
	str r6, [r4, #0x3c]
	mov r0, sl
	adds r0, #0x64
	ldrh r1, [r0]
	adds r0, r4, #0
	adds r0, #0x5c
	movs r5, #0
	strh r1, [r0]
	mov r1, sl
	ldr r0, [r1, #0x5c]
	bl GetStringFromIndex
	bl sub_800A2A4
	str r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x62
	movs r3, #1
	strh r3, [r1]
	adds r0, r4, #0
	adds r0, #0x5e
	strh r5, [r0]
	ldr r0, _0808A0BC  @ gUnknown_0202BCF0
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r2, r0, #0x1e
	cmp r2, #1
	beq _0808A0D2
	cmp r2, #1
	bgt _0808A0C0
	cmp r2, #0
	beq _0808A0CA
	b _0808A0EE
	.align 2, 0
_0808A0B4: .4byte gUnknown_0203E794
_0808A0B8: .4byte gUnknown_08A01628
_0808A0BC: .4byte gUnknown_0202BCF0
_0808A0C0:
	cmp r2, #2
	beq _0808A0DA
	cmp r2, #3
	beq _0808A0E4
	b _0808A0EE
_0808A0CA:
	adds r1, r4, #0
	adds r1, #0x60
	movs r0, #2
	b _0808A0EC
_0808A0D2:
	adds r0, r4, #0
	adds r0, #0x60
	strh r2, [r0]
	b _0808A0EE
_0808A0DA:
	adds r0, r4, #0
	adds r0, #0x60
	strh r3, [r0]
	strh r2, [r1]
	b _0808A0EE
_0808A0E4:
	adds r0, r4, #0
	adds r0, #0x60
	strh r5, [r0]
	movs r0, #0x7f
_0808A0EC:
	strh r0, [r1]
_0808A0EE:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A0FC
sub_808A0FC: @ 0x0808A0FC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _0808A114  @ gUnknown_08A01650
	movs r1, #3
	bl Proc_Create
	str r4, [r0, #0x58]
	str r5, [r0, #0x5c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808A114: .4byte gUnknown_08A01650

	THUMB_FUNC_START sub_808A118
sub_808A118: @ 0x0808A118
	push {r4, lr}
	ldr r4, _0808A154  @ gUnknown_0203E794
	adds r0, r4, #0
	bl SetFont
	adds r0, r4, #0
	adds r0, #0x18
	bl sub_80045FC
	adds r0, r4, #0
	adds r0, #0x20
	bl sub_80045FC
	adds r4, #0x28
	adds r0, r4, #0
	bl sub_80045FC
	ldr r0, _0808A158  @ gUnknown_08A01628
	bl Proc_DeleteAllWithScript
	ldr r0, _0808A15C  @ gUnknown_08A01650
	bl Proc_DeleteAllWithScript
	movs r0, #0
	bl SetFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808A154: .4byte gUnknown_0203E794
_0808A158: .4byte gUnknown_08A01628
_0808A15C: .4byte gUnknown_08A01650

	THUMB_FUNC_START sub_808A160
sub_808A160: @ 0x0808A160
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r1, #5
	bl UpdateHelpBoxDisplay
	adds r2, r4, #0
	adds r2, #0x48
	adds r4, #0x4a
	ldrh r3, [r2]
	movs r0, #0
	ldrsh r1, [r2, r0]
	movs r5, #0
	ldrsh r0, [r4, r5]
	cmp r1, r0
	bge _0808A182
	adds r0, r3, #1
	strh r0, [r2]
_0808A182:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A188
sub_808A188: @ 0x0808A188
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_808A444
	ldr r0, [r4, #0x2c]
	ldrb r1, [r0, #0x10]
	ldrb r2, [r0, #0x11]
	adds r0, r4, #0
	bl sub_808A43C
	adds r5, r4, #0
	adds r5, #0x4a
	movs r1, #0
	ldrsh r0, [r5, r1]
	movs r1, #3
	bl __divsi3
	strh r0, [r5]
	adds r4, #0x48
	strh r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A1B8
sub_808A1B8: @ 0x0808A1B8
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	bl UpdateHelpBoxDisplay
	adds r1, r4, #0
	adds r1, #0x48
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0808A1D8
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0808A1D8:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A1E0
sub_808A1E0: @ 0x0808A1E0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808A1FC  @ gUnknown_0203E7C8
	movs r3, #0
	strb r4, [r0, #0x10]
	strb r1, [r0, #0x11]
	strh r2, [r0, #0x12]
	str r3, [r0, #0x14]
	str r3, [r0, #0x18]
	bl sub_808A354
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808A1FC: .4byte gUnknown_0203E7C8

	THUMB_FUNC_START sub_808A200
sub_808A200: @ 0x0808A200
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r4, _0808A244  @ gUnknown_08A01678
	adds r0, r4, #0
	bl Proc_Find
	adds r5, r0, #0
	cmp r5, #0
	bne _0808A24C
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Create
	adds r5, r0, #0
	ldr r0, _0808A248  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808A230
	movs r0, #0x70
	bl m4aSongNumStart
_0808A230:
	ldrb r1, [r6, #0x10]
	ldrb r2, [r6, #0x11]
	adds r0, r5, #0
	bl sub_808A43C
	adds r0, r5, #0
	bl sub_808A444
	b _0808A268
	.align 2, 0
_0808A244: .4byte gUnknown_08A01678
_0808A248: .4byte gUnknown_0202BCF0
_0808A24C:
	ldrh r0, [r5, #0x30]
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x32]
	strh r0, [r5, #0x3a]
	adds r0, r5, #0
	adds r0, #0x44
	ldrh r1, [r0]
	subs r0, #4
	strh r1, [r0]
	adds r0, #6
	ldrh r0, [r0]
	adds r1, r5, #0
	adds r1, #0x42
	strh r0, [r1]
_0808A268:
	str r6, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x48
	movs r0, #0
	strh r0, [r1]
	adds r1, #2
	movs r0, #0xc
	strh r0, [r1]
	ldrh r0, [r6, #0x12]
	adds r4, r5, #0
	adds r4, #0x4c
	strh r0, [r4]
	movs r0, #1
	bl SetFontGlyphSet
	ldrh r0, [r4]
	bl GetStringFromIndex
	add r2, sp, #4
	mov r1, sp
	bl sub_8003FAC
	movs r0, #0
	bl SetFontGlyphSet
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r5, #0
	bl sub_808A384
	ldrb r1, [r6, #0x10]
	ldrb r2, [r6, #0x11]
	adds r0, r5, #0
	bl sub_808A3C4
	bl sub_808A118
	adds r0, r5, #0
	adds r0, #0x4e
	ldrh r0, [r0]
	ldrh r1, [r4]
	bl sub_808A0FC
	ldr r0, _0808A2CC  @ gUnknown_0203E7E4
	str r6, [r0]
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808A2CC: .4byte gUnknown_0203E7E4

	THUMB_FUNC_START sub_808A2D0
sub_808A2D0: @ 0x0808A2D0
	push {lr}
	ldr r0, _0808A2F4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808A2E4
	movs r0, #0x71
	bl m4aSongNumStart
_0808A2E4:
	bl sub_808A118
	ldr r0, _0808A2F8  @ gUnknown_08A01678
	bl Proc_ClearNativeCallbackEachWithScript
	pop {r0}
	bx r0
	.align 2, 0
_0808A2F4: .4byte gUnknown_0202BCF0
_0808A2F8: .4byte gUnknown_08A01678

	THUMB_FUNC_START sub_808A2FC
sub_808A2FC: @ 0x0808A2FC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x50
	movs r1, #0
	strh r1, [r0]
	ldr r0, [r4, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _0808A314
	adds r0, r4, #0
	bl _call_via_r1
_0808A314:
	ldr r0, [r4, #0x2c]
	bl sub_808A200
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A320
sub_808A320: @ 0x0808A320
	push {lr}
	adds r2, r0, #0
	ldr r0, _0808A33C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808A338
	adds r0, r2, #0
	bl Proc_ClearNativeCallback
_0808A338:
	pop {r0}
	bx r0
	.align 2, 0
_0808A33C: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_808A340
sub_808A340: @ 0x0808A340
	push {r4, lr}
	adds r4, r0, #0
	bl sub_808A2D0
	adds r0, r4, #0
	bl Proc_Delete
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A354
sub_808A354: @ 0x0808A354
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808A368  @ gUnknown_08A01698
	movs r1, #3
	bl Proc_Create
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808A368: .4byte gUnknown_08A01698

	THUMB_FUNC_START sub_808A36C
sub_808A36C: @ 0x0808A36C
	push {lr}
	ldr r0, _0808A380  @ gUnknown_08A01698
	bl Proc_Find
	cmp r0, #0
	beq _0808A37A
	movs r0, #1
_0808A37A:
	pop {r1}
	bx r1
	.align 2, 0
_0808A380: .4byte gUnknown_08A01698

	THUMB_FUNC_START sub_808A384
sub_808A384: @ 0x0808A384
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r4, #0x1f
	movs r0, #0xe0
	ands r4, r0
	adds r0, r6, #0
	adds r0, #0x4e
	ldrh r0, [r0]
	bl sub_808A454
	cmp r0, #1
	beq _0808A3A6
	cmp r0, #2
	beq _0808A3AC
	b _0808A3B4
_0808A3A6:
	movs r4, #0xa0
	adds r5, #0x20
	b _0808A3B4
_0808A3AC:
	cmp r4, #0x5f
	bgt _0808A3B2
	movs r4, #0x60
_0808A3B2:
	adds r5, #0x10
_0808A3B4:
	adds r0, r6, #0
	adds r0, #0x44
	strh r4, [r0]
	adds r0, #2
	strh r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A3C4
sub_808A3C4: @ 0x0808A3C4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	mov r8, r2
	adds r0, #0x44
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r6, r0, #0
	adds r6, #0x10
	adds r0, r5, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r7, r0, #0
	adds r7, #0x10
	adds r0, r6, #0
	movs r1, #6
	bl __divsi3
	adds r0, #0x10
	subs r4, r4, r0
	strh r4, [r5, #0x3c]
	lsls r4, r4, #0x10
	cmp r4, #0
	bge _0808A3FE
	movs r0, #0
	strh r0, [r5, #0x3c]
_0808A3FE:
	movs r1, #0x3c
	ldrsh r0, [r5, r1]
	adds r0, r0, r6
	cmp r0, #0xf0
	ble _0808A40E
	movs r0, #0xf0
	subs r0, r0, r6
	strh r0, [r5, #0x3c]
_0808A40E:
	mov r0, r8
	adds r0, #0x10
	strh r0, [r5, #0x3e]
	movs r1, #0x3e
	ldrsh r0, [r5, r1]
	adds r0, r0, r7
	cmp r0, #0xa0
	ble _0808A424
	mov r1, r8
	subs r0, r1, r7
	strh r0, [r5, #0x3e]
_0808A424:
	ldrh r0, [r5, #0x3c]
	adds r0, #8
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x3e]
	adds r0, #8
	strh r0, [r5, #0x3e]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A43C
sub_808A43C: @ 0x0808A43C
	strh r1, [r0, #0x38]
	strh r2, [r0, #0x3a]
	bx lr

	THUMB_FUNC_START sub_808A444
sub_808A444: @ 0x0808A444
	adds r2, r0, #0
	adds r2, #0x40
	movs r1, #0x20
	strh r1, [r2]
	adds r0, #0x42
	movs r1, #0x10
	strh r1, [r0]
	bx lr

	THUMB_FUNC_START sub_808A454
sub_808A454: @ 0x0808A454
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808A464  @ 0x0000FFFE
	cmp r4, r0
	bne _0808A468
	movs r0, #3
	b _0808A49E
	.align 2, 0
_0808A464: .4byte 0x0000FFFE
_0808A468:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #0x80
	lsls r1, r1, #3
	ands r1, r0
	cmp r1, #0
	bne _0808A498
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0808A48A
	movs r0, #1
	b _0808A49E
_0808A48A:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	bne _0808A49C
_0808A498:
	movs r0, #0
	b _0808A49E
_0808A49C:
	movs r0, #2
_0808A49E:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808A4A4
sub_808A4A4: @ 0x0808A4A4
	push {lr}
	adds r2, r0, #0
	ldr r0, _0808A4C0  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808A4BC
	adds r0, r2, #0
	bl Proc_ClearNativeCallback
_0808A4BC:
	pop {r0}
	bx r0
	.align 2, 0
_0808A4C0: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_808A4C4
sub_808A4C4: @ 0x0808A4C4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	movs r1, #1
	negs r1, r1
	movs r0, #0
	bl LoadDialogueBoxGfx
	bl GetUiHandPrevDisplayX
	adds r4, r0, #0
	bl GetUiHandPrevDisplayY
	adds r1, r0, #0
	adds r0, r4, #0
	adds r2, r5, #0
	bl sub_808A1E0
	ldr r0, _0808A4F8  @ gUnknown_08A016C8
	adds r1, r6, #0
	bl Proc_CreateBlockingChild
	movs r0, #1
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0808A4F8: .4byte gUnknown_08A016C8

	THUMB_FUNC_START sub_808A4FC
sub_808A4FC: @ 0x0808A4FC
	push {lr}
	ldr r0, _0808A50C  @ gUnknown_08A016E0
	bl Proc_Find
	cmp r0, #0
	bne _0808A510
	movs r0, #0
	b _0808A512
	.align 2, 0
_0808A50C: .4byte gUnknown_08A016E0
_0808A510:
	movs r0, #1
_0808A512:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808A518
sub_808A518: @ 0x0808A518
	ldr r1, _0808A520  @ gUnknown_0203E7E8
	adds r1, #0x42
	strh r0, [r1]
	bx lr
	.align 2, 0
_0808A520: .4byte gUnknown_0203E7E8

	THUMB_FUNC_START sub_808A524
sub_808A524: @ 0x0808A524
	ldr r0, _0808A52C  @ gUnknown_0203E7E8
	adds r0, #0x42
	ldrh r0, [r0]
	bx lr
	.align 2, 0
_0808A52C: .4byte gUnknown_0203E7E8

	THUMB_FUNC_START sub_808A530
sub_808A530: @ 0x0808A530
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r9, r0
	ldr r3, _0808A590  @ gUnknown_0203E7E8
	adds r0, r3, #0
	adds r0, #0x40
	ldrh r2, [r0]
	ldr r0, _0808A594  @ 0x000003FF
	ands r0, r2
	ldrh r3, [r3, #0x18]
	adds r0, r0, r3
	lsls r0, r0, #5
	ldr r2, _0808A598  @ 0x06010000
	adds r5, r0, r2
	movs r7, #0
	lsls r0, r1, #1
	cmp r7, r0
	bge _0808A5C2
	adds r3, r0, #0
_0808A55C:
	adds r4, r5, #0
	movs r2, #0
	adds r0, r7, #1
	mov r8, r0
	cmp r2, r9
	bge _0808A5B6
_0808A568:
	adds r6, r2, #1
	movs r1, #6
_0808A56C:
	ldr r0, [r4, #4]
	stm r4!, {r0}
	subs r1, #1
	cmp r1, #0
	bge _0808A56C
	subs r0, r3, #1
	cmp r7, r0
	bne _0808A5A4
	str r3, [sp]
	bl sub_808A524
	movs r1, #1
	ands r1, r0
	ldr r3, [sp]
	cmp r1, #0
	bne _0808A5A0
	ldr r0, _0808A59C  @ 0x44444444
	b _0808A5AE
	.align 2, 0
_0808A590: .4byte gUnknown_0203E7E8
_0808A594: .4byte 0x000003FF
_0808A598: .4byte 0x06010000
_0808A59C: .4byte 0x44444444
_0808A5A0:
	movs r0, #0
	b _0808A5AE
_0808A5A4:
	adds r0, r2, #0
	adds r0, #0x20
	lsls r0, r0, #5
	adds r0, r0, r5
	ldr r0, [r0]
_0808A5AE:
	stm r4!, {r0}
	adds r2, r6, #0
	cmp r2, r9
	blt _0808A568
_0808A5B6:
	movs r2, #0x80
	lsls r2, r2, #3
	adds r5, r5, r2
	mov r7, r8
	cmp r7, r3
	blt _0808A55C
_0808A5C2:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A5D0
sub_808A5D0: @ 0x0808A5D0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	cmp r5, #0
	bne _0808A5DC
	ldr r5, _0808A634  @ 0x06013000
_0808A5DC:
	cmp r6, #0
	bge _0808A5E2
	movs r6, #5
_0808A5E2:
	movs r0, #0xf
	ands r0, r6
	adds r6, r0, #0
	adds r6, #0x10
	bl sub_808A524
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _0808A64C
	ldr r0, _0808A638  @ gUnknown_08A029A8
	movs r2, #0xd8
	lsls r2, r2, #2
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808A63C  @ gUnknown_08A02A1C
	movs r2, #0xec
	lsls r2, r2, #3
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808A640  @ gUnknown_08A02A94
	movs r2, #0xb6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808A644  @ gUnknown_08A02B3C
	movs r2, #0xf8
	lsls r2, r2, #4
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808A648  @ gUnknown_08A02BAC
	movs r2, #0x9c
	lsls r2, r2, #5
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	b _0808A688
	.align 2, 0
_0808A634: .4byte 0x06013000
_0808A638: .4byte gUnknown_08A029A8
_0808A63C: .4byte gUnknown_08A02A1C
_0808A640: .4byte gUnknown_08A02A94
_0808A644: .4byte gUnknown_08A02B3C
_0808A648: .4byte gUnknown_08A02BAC
_0808A64C:
	ldr r0, _0808A6FC  @ gUnknown_08A0285C
	movs r2, #0xd8
	lsls r2, r2, #2
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808A700  @ gUnknown_08A02884
	movs r2, #0xec
	lsls r2, r2, #3
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808A704  @ gUnknown_08A028AC
	movs r2, #0xb6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808A708  @ gUnknown_08A02914
	movs r2, #0xf6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808A70C  @ gUnknown_08A02980
	movs r2, #0x9b
	lsls r2, r2, #5
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
_0808A688:
	bl sub_8006A98
	bl sub_808A524
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _0808A728
	ldr r4, _0808A710  @ gUnknown_0203E7E8
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl InitSomeOtherGraphicsRelatedStruct
	adds r0, r4, #0
	adds r0, #0x18
	bl Text_Init3
	adds r0, r4, #0
	adds r0, #0x20
	bl Text_Init3
	adds r0, r4, #0
	adds r0, #0x28
	bl Text_Init3
	bl sub_808A524
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _0808A6E4
	bl sub_808A524
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne _0808A6E4
	adds r0, r4, #0
	adds r0, #0x30
	bl Text_Init3
	adds r0, r4, #0
	adds r0, #0x38
	bl Text_Init3
_0808A6E4:
	movs r0, #0
	bl SetFont
	bl sub_808A524
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _0808A718
	ldr r0, _0808A714  @ gUnknown_0859EF80
	b _0808A71A
	.align 2, 0
_0808A6FC: .4byte gUnknown_08A0285C
_0808A700: .4byte gUnknown_08A02884
_0808A704: .4byte gUnknown_08A028AC
_0808A708: .4byte gUnknown_08A02914
_0808A70C: .4byte gUnknown_08A02980
_0808A710: .4byte gUnknown_0203E7E8
_0808A714: .4byte gUnknown_0859EF80
_0808A718:
	ldr r0, _0808A724  @ gUnknown_0859EF60
_0808A71A:
	lsls r1, r6, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	b _0808A764
	.align 2, 0
_0808A724: .4byte gUnknown_0859EF60
_0808A728:
	ldr r0, _0808A738  @ gUnknown_0203E7E8
	adds r1, r5, #0
	adds r2, r6, #0
	bl InitSomeOtherGraphicsRelatedStruct
	movs r4, #0
	lsls r7, r6, #5
	b _0808A748
	.align 2, 0
_0808A738: .4byte gUnknown_0203E7E8
_0808A73C:
	lsls r0, r4, #3
	ldr r1, _0808A79C  @ gUnknown_0203E800
	adds r0, r0, r1
	bl Text_Init3
	adds r4, #1
_0808A748:
	bl sub_808A524
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	cmp r4, r0
	blt _0808A73C
	movs r0, #0
	bl SetFont
	ldr r0, _0808A7A0  @ gUnknown_0859EF00
	adds r1, r7, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
_0808A764:
	ldr r2, _0808A7A4  @ gUnknown_0203E7E8
	lsls r1, r5, #0x11
	lsrs r1, r1, #0x16
	movs r0, #0xf
	ands r0, r6
	lsls r0, r0, #0xc
	adds r1, r1, r0
	adds r2, #0x40
	strh r1, [r2]
	bl sub_808A524
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _0808A794
	ldr r0, _0808A7A8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808A794
	ldr r0, _0808A7AC  @ 0x000002E6
	bl m4aSongNumStart
_0808A794:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808A79C: .4byte gUnknown_0203E800
_0808A7A0: .4byte gUnknown_0859EF00
_0808A7A4: .4byte gUnknown_0203E7E8
_0808A7A8: .4byte gUnknown_0202BCF0
_0808A7AC: .4byte 0x000002E6

	THUMB_FUNC_START sub_808A7B0
sub_808A7B0: @ 0x0808A7B0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r0, #0x10
	mov r8, r0
	adds r1, r4, #0
	adds r1, #0x44
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0xbf
	ble _0808A7D6
	movs r0, #0xc0
	strh r0, [r1]
_0808A7D6:
	movs r2, #0
	ldrsh r0, [r1, r2]
	adds r7, r0, #0
	adds r7, #0x10
	bl sub_808A524
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _0808A828
	strh r5, [r4, #0x3c]
	adds r0, r6, #0
	adds r0, #8
	strh r0, [r4, #0x3e]
	bl sub_808A524
	movs r1, #0x40
	ands r1, r0
	cmp r1, #0
	bne _0808A820
	movs r1, #0x3c
	ldrsh r0, [r4, r1]
	adds r0, r0, r7
	cmp r0, #0xf0
	ble _0808A80E
	movs r0, #0xf0
	subs r0, r0, r7
	strh r0, [r4, #0x3c]
_0808A80E:
	movs r2, #0x3e
	ldrsh r0, [r4, r2]
	add r0, r8
	cmp r0, #0xa0
	ble _0808A820
	movs r0, #0x98
	mov r1, r8
	subs r0, r0, r1
	strh r0, [r4, #0x3e]
_0808A820:
	ldrh r0, [r4, #0x3c]
	adds r0, #8
	strh r0, [r4, #0x3c]
	b _0808A82C
_0808A828:
	strh r5, [r4, #0x3c]
	strh r6, [r4, #0x3e]
_0808A82C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A838
sub_808A838: @ 0x0808A838
	movs r3, #0xf8
	ands r3, r1
	adds r1, r0, #0
	adds r1, #0x44
	strh r3, [r1]
	adds r0, #0x46
	strh r2, [r0]
	bx lr

	THUMB_FUNC_START sub_808A848
sub_808A848: @ 0x0808A848
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x40
	ldrb r0, [r1]
	cmp r0, #0xff
	bne _0808A862
	movs r1, #1
	negs r1, r1
	movs r0, #0
	bl sub_808A5D0
	b _0808A86A
_0808A862:
	ldr r0, [r4, #0x3c]
	ldrb r1, [r1]
	bl sub_808A5D0
_0808A86A:
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	ldr r2, [r4, #0x34]
	bl sub_808AC0C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A87C
sub_808A87C: @ 0x0808A87C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_808A524
	movs r1, #0x82
	ands r1, r0
	cmp r1, #0
	bne _0808A8A2
	ldr r0, _0808A8A8  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xa
	ands r0, r1
	cmp r0, #0
	beq _0808A8A2
	adds r0, r4, #0
	movs r1, #2
	bl Proc_GotoLabel
_0808A8A2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808A8A8: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_808A8AC
sub_808A8AC: @ 0x0808A8AC
	push {lr}
	bl sub_808A524
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _0808A8CC
	ldr r0, _0808A8DC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808A8CC
	ldr r0, _0808A8E0  @ 0x000002E7
	bl m4aSongNumStart
_0808A8CC:
	movs r0, #0
	bl SetFontGlyphSet
	bl sub_808A9F0
	pop {r0}
	bx r0
	.align 2, 0
_0808A8DC: .4byte gUnknown_0202BCF0
_0808A8E0: .4byte 0x000002E7

	THUMB_FUNC_START sub_808A8E4
sub_808A8E4: @ 0x0808A8E4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r5, r1, #0
	movs r1, #0x3c
	ldrsh r0, [r7, r1]
	mov r8, r0
	movs r3, #0x3e
	ldrsh r2, [r7, r3]
	mov r9, r2
	adds r0, r7, #0
	adds r0, #0x40
	movs r4, #0
	ldrsh r1, [r0, r4]
	adds r0, #4
	movs r6, #0
	ldrsh r2, [r0, r6]
	adds r4, r7, #0
	adds r4, #0x48
	movs r3, #0
	ldrsh r0, [r4, r3]
	mov ip, r0
	movs r6, #0x4a
	adds r6, r6, r7
	mov sl, r6
	movs r3, #0
	ldrsh r0, [r6, r3]
	str r0, [sp]
	adds r0, r5, #0
	mov r3, ip
	bl sub_8012DCC
	str r0, [sp, #4]
	adds r0, r7, #0
	adds r0, #0x42
	movs r6, #0
	ldrsh r1, [r0, r6]
	adds r0, #4
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r6, #0
	ldrsh r3, [r4, r6]
	mov r4, sl
	movs r6, #0
	ldrsh r0, [r4, r6]
	str r0, [sp]
	adds r0, r5, #0
	bl sub_8012DCC
	adds r3, r0, #0
	mov r0, r8
	strh r0, [r7, #0x30]
	mov r1, r9
	strh r1, [r7, #0x32]
	mov r0, r8
	mov r1, r9
	ldr r2, [sp, #4]
	bl sub_808ACFC
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A974
sub_808A974: @ 0x0808A974
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r1, #5
	bl sub_808A8E4
	adds r2, r4, #0
	adds r2, #0x48
	adds r4, #0x4a
	ldrh r3, [r2]
	movs r0, #0
	ldrsh r1, [r2, r0]
	movs r5, #0
	ldrsh r0, [r4, r5]
	cmp r1, r0
	bge _0808A996
	adds r0, r3, #1
	strh r0, [r2]
_0808A996:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A99C
sub_808A99C: @ 0x0808A99C
	push {r4, r5, lr}
	adds r4, r0, #0
	bl ResetHelpBoxInitSize
	adds r5, r4, #0
	adds r5, #0x4a
	movs r1, #0
	ldrsh r0, [r5, r1]
	movs r1, #3
	bl __divsi3
	strh r0, [r5]
	adds r4, #0x48
	strh r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808A9C0
sub_808A9C0: @ 0x0808A9C0
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	bl sub_808A8E4
	adds r1, r4, #0
	adds r1, #0x48
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0808A9E6
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	ldr r0, _0808A9EC  @ gUnknown_08A01818
	bl Proc_DeleteAllWithScript
_0808A9E6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808A9EC: .4byte gUnknown_08A01818

	THUMB_FUNC_START sub_808A9F0
sub_808A9F0: @ 0x0808A9F0
	push {lr}
	bl sub_808BAA4
	ldr r0, _0808AA00  @ gUnknown_08A01740
	bl Proc_ClearNativeCallbackEachWithScript
	pop {r0}
	bx r0
	.align 2, 0
_0808AA00: .4byte gUnknown_08A01740

	THUMB_FUNC_START sub_808AA04
sub_808AA04: @ 0x0808AA04
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	adds r5, r3, #0
	ldr r4, _0808AA30  @ gUnknown_08A016E0
	adds r0, r4, #0
	bl Proc_DeleteAllWithScript
	movs r0, #0
	bl sub_808A518
	cmp r5, #0
	bne _0808AA34
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Create
	b _0808AA3C
	.align 2, 0
_0808AA30: .4byte gUnknown_08A016E0
_0808AA34:
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_CreateBlockingChild
_0808AA3C:
	adds r2, r0, #0
	str r6, [r2, #0x2c]
	str r7, [r2, #0x30]
	mov r0, r8
	str r0, [r2, #0x34]
	adds r1, r2, #0
	adds r1, #0x40
	movs r0, #0xff
	strb r0, [r1]
	subs r1, #8
	movs r0, #1
	strb r0, [r1]
	ldr r0, _0808AA68  @ gUnknown_08A01818
	movs r1, #0
	bl Proc_Create
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808AA68: .4byte gUnknown_08A01818

	THUMB_FUNC_START sub_808AA6C
sub_808AA6C: @ 0x0808AA6C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	mov r9, r3
	ldr r5, [sp, #0x20]
	ldr r4, _0808AA9C  @ gUnknown_08A016E0
	adds r0, r4, #0
	bl Proc_DeleteAllWithScript
	movs r0, #0
	bl sub_808A518
	cmp r5, #0
	bne _0808AAA0
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Create
	b _0808AAA8
	.align 2, 0
_0808AA9C: .4byte gUnknown_08A016E0
_0808AAA0:
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_CreateBlockingChild
_0808AAA8:
	adds r2, r0, #0
	str r6, [r2, #0x2c]
	str r7, [r2, #0x30]
	mov r0, r8
	str r0, [r2, #0x34]
	adds r1, r2, #0
	adds r1, #0x40
	ldr r0, [sp, #0x1c]
	strb r0, [r1]
	mov r0, r9
	str r0, [r2, #0x3c]
	subs r1, #8
	movs r0, #1
	strb r0, [r1]
	ldr r0, _0808AAD8  @ gUnknown_08A01818
	movs r1, #0
	bl Proc_Create
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808AAD8: .4byte gUnknown_08A01818

	THUMB_FUNC_START sub_808AADC
sub_808AADC: @ 0x0808AADC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r3, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	movs r7, #0
	movs r6, #0x10
	str r7, [r4]
	str r7, [r5]
_0808AAEE:
	ldrb r0, [r3]
	cmp r0, #7
	bgt _0808AB10
	cmp r0, #4
	bge _0808AB38
	cmp r0, #1
	beq _0808AB2C
	cmp r0, #1
	bgt _0808AB06
	cmp r0, #0
	beq _0808AB6E
	b _0808AB80
_0808AB06:
	cmp r0, #2
	beq _0808AB3C
	cmp r0, #3
	beq _0808AB52
	b _0808AB80
_0808AB10:
	cmp r0, #0x19
	ble _0808AB1A
	cmp r0, #0x80
	beq _0808AB28
	b _0808AB80
_0808AB1A:
	cmp r0, #0x18
	bge _0808AB36
	cmp r0, #0x14
	bgt _0808AB80
	cmp r0, #0x12
	blt _0808AB80
	b _0808AB6E
_0808AB28:
	adds r3, #2
	b _0808AAEE
_0808AB2C:
	adds r6, #0x10
	ldr r0, [r4]
	cmp r0, r7
	bge _0808AB36
	str r7, [r4]
_0808AB36:
	movs r7, #0
_0808AB38:
	adds r3, #1
	b _0808AAEE
_0808AB3C:
	adds r3, #1
	ldr r0, [r5]
	cmp r0, r6
	bge _0808AB46
	str r6, [r5]
_0808AB46:
	movs r6, #0
	ldr r0, [r4]
	cmp r0, r7
	bge _0808AB6A
	str r7, [r4]
	b _0808AB6A
_0808AB52:
	adds r3, #1
	ldr r0, [r5]
	cmp r0, r6
	bge _0808AB5C
	str r6, [r5]
_0808AB5C:
	movs r6, #0
	adds r1, r7, #0
	adds r1, #8
	ldr r0, [r4]
	cmp r0, r1
	bge _0808AB6A
	str r1, [r4]
_0808AB6A:
	movs r7, #0
	b _0808AAEE
_0808AB6E:
	ldr r0, [r4]
	cmp r0, r7
	bge _0808AB76
	str r7, [r4]
_0808AB76:
	ldr r0, [r5]
	cmp r0, r6
	bge _0808AB90
	str r6, [r5]
	b _0808AB90
_0808AB80:
	adds r0, r3, #0
	mov r1, sp
	bl GetCharTextWidth
	adds r3, r0, #0
	ldr r0, [sp]
	adds r7, r7, r0
	b _0808AAEE
_0808AB90:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808AB98
sub_808AB98: @ 0x0808AB98
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r1, #0
	movs r5, #0
	adds r4, r0, #0
	strb r5, [r6]
	movs r0, #1
	bl SetFontGlyphSet
_0808ABAA:
	ldrb r0, [r4]
	cmp r0, #7
	bgt _0808ABCC
	cmp r0, #4
	bge _0808ABE2
	cmp r0, #1
	beq _0808ABE6
	cmp r0, #1
	bgt _0808ABC2
	cmp r0, #0
	beq _0808AC00
	b _0808ABF0
_0808ABC2:
	cmp r0, #2
	beq _0808ABE2
	cmp r0, #3
	beq _0808AC00
	b _0808ABF0
_0808ABCC:
	cmp r0, #0x19
	ble _0808ABD6
	cmp r0, #0x80
	beq _0808ABEC
	b _0808ABF0
_0808ABD6:
	cmp r0, #0x18
	bge _0808ABE6
	cmp r0, #0x14
	bgt _0808ABF0
	cmp r0, #0x12
	blt _0808ABF0
_0808ABE2:
	adds r4, #1
	b _0808ABAA
_0808ABE6:
	adds r4, #1
	movs r5, #0
	b _0808ABAA
_0808ABEC:
	adds r4, #2
	b _0808ABAA
_0808ABF0:
	adds r0, r4, #0
	mov r1, sp
	bl GetCharTextWidth
	adds r4, r0, #0
	ldr r0, [sp]
	adds r5, r5, r0
	b _0808ABAA
_0808AC00:
	adds r0, r5, #2
	strb r0, [r6]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808AC0C
sub_808AC0C: @ 0x0808AC0C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	movs r5, #0
	str r5, [sp]
	str r5, [sp, #4]
	ldr r4, _0808AC5C  @ gUnknown_08A01740
	adds r0, r4, #0
	bl Proc_DeleteAllWithScript
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Create
	adds r4, r0, #0
	adds r1, r6, #0
	adds r2, r7, #0
	bl SetHelpBoxInitPosition
	adds r0, r4, #0
	bl ResetHelpBoxInitSize
	str r5, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x48
	strh r5, [r0]
	bl sub_808A524
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0808AC60
	adds r0, r4, #0
	adds r0, #0x4a
	strh r5, [r0]
	b _0808AC68
	.align 2, 0
_0808AC5C: .4byte gUnknown_08A01740
_0808AC60:
	adds r1, r4, #0
	adds r1, #0x4a
	movs r0, #0xc
	strh r0, [r1]
_0808AC68:
	adds r1, r4, #0
	adds r1, #0x4e
	movs r0, #0
	strh r0, [r1]
	adds r5, r4, #0
	adds r5, #0x4c
	mov r0, r8
	strh r0, [r5]
	movs r0, #1
	bl SetFontGlyphSet
	ldrh r0, [r5]
	bl GetStringFromIndex
	bl sub_800A2A4
	add r2, sp, #4
	mov r1, sp
	bl sub_808AADC
	movs r0, #0
	bl SetFontGlyphSet
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r4, #0
	bl sub_808A838
	bl sub_808A524
	movs r1, #0x80
	lsls r1, r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0808ACD6
	adds r0, r4, #0
	adds r0, #0x44
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r0, #0xd8
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	adds r6, r6, r0
	adds r0, r4, #0
	adds r0, #0x46
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r0, #0x90
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	adds r7, r7, r0
_0808ACD6:
	adds r0, r4, #0
	adds r1, r6, #0
	adds r2, r7, #0
	bl sub_808A7B0
	bl sub_808BAA4
	ldrh r0, [r5]
	ldr r1, [sp]
	ldr r2, [sp, #4]
	bl sub_808BA60
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808ACFC
sub_808ACFC: @ 0x0808ACFC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x28
	str r0, [sp, #4]
	str r1, [sp, #8]
	adds r4, r2, #0
	mov r8, r3
	mov r0, r8
	asrs r0, r0, #5
	str r0, [sp, #0x14]
	cmp r4, #0x1f
	bgt _0808AD1C
	movs r4, #0x20
_0808AD1C:
	cmp r4, #0xc0
	ble _0808AD22
	movs r4, #0xc0
_0808AD22:
	mov r1, r8
	cmp r1, #0xf
	bgt _0808AD2C
	movs r2, #0x10
	mov r8, r2
_0808AD2C:
	mov r3, r8
	cmp r3, #0x50
	ble _0808AD36
	movs r0, #0x50
	mov r8, r0
_0808AD36:
	bl sub_808A524
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0808AD44
	b _0808B020
_0808AD44:
	mov r0, r8
	adds r0, #0xf
	cmp r0, #0
	bge _0808AD4E
	adds r0, #0xf
_0808AD4E:
	asrs r0, r0, #4
	str r0, [sp, #0x10]
	adds r0, r4, #7
	cmp r0, #0
	bge _0808AD5A
	adds r0, #7
_0808AD5A:
	asrs r0, r0, #3
	adds r1, r0, #1
	str r1, [sp, #0xc]
	movs r7, #0
	subs r0, #3
	ldr r2, [sp, #8]
	subs r2, #8
	str r2, [sp, #0x24]
	ldr r3, [sp, #8]
	add r3, r8
	str r3, [sp, #0x1c]
	ldr r1, [sp, #4]
	subs r1, #8
	str r1, [sp, #0x20]
	cmp r7, r0
	bge _0808ADBE
	mov sl, r0
_0808AD7C:
	lsls r6, r7, #3
	ldr r5, [sp, #0x10]
	adds r4, r7, #4
	cmp r5, #0
	blt _0808ADB8
	ldr r2, _0808AE04  @ gUnknown_0203E828
	mov r9, r2
_0808AD8A:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _0808AD94
	mov r0, r8
_0808AD94:
	subs r0, #0x10
	ldr r3, [sp, #8]
	adds r2, r3, r0
	mov r1, r9
	ldrh r0, [r1]
	adds r0, r0, r7
	lsls r1, r5, #6
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #2
	ldr r3, [sp, #4]
	adds r1, r3, r6
	ldr r3, _0808AE08  @ gUnknown_08590F8C
	bl RegisterObjectAttributes_SafeMaybe
	subs r5, #1
	cmp r5, #0
	bge _0808AD8A
_0808ADB8:
	adds r7, r4, #0
	cmp r7, sl
	blt _0808AD7C
_0808ADBE:
	ldr r0, [sp, #0xc]
	cmp r7, r0
	bge _0808AE40
	subs r0, #2
	mov sl, r0
_0808ADC8:
	lsls r6, r7, #3
	ldr r5, [sp, #0x10]
	cmp r5, #0
	blt _0808AE32
	ldr r1, _0808AE04  @ gUnknown_0203E828
	mov r9, r1
	lsls r4, r5, #6
_0808ADD6:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _0808ADE0
	mov r0, r8
_0808ADE0:
	subs r0, #0x10
	cmp r7, sl
	bge _0808AE10
	ldr r3, [sp, #8]
	adds r2, r3, r0
	mov r1, r9
	ldrh r0, [r1]
	adds r0, r0, r7
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #2
	ldr r3, [sp, #4]
	adds r1, r3, r6
	ldr r3, _0808AE0C  @ gUnknown_08590F4C
	bl RegisterObjectAttributes_SafeMaybe
	b _0808AE2A
	.align 2, 0
_0808AE04: .4byte gUnknown_0203E828
_0808AE08: .4byte gUnknown_08590F8C
_0808AE0C: .4byte gUnknown_08590F4C
_0808AE10:
	ldr r1, [sp, #8]
	adds r2, r1, r0
	mov r3, r9
	ldrh r0, [r3]
	adds r0, r0, r7
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #2
	ldr r3, [sp, #4]
	adds r1, r3, r6
	ldr r3, _0808AEAC  @ gUnknown_08590F64
	bl RegisterObjectAttributes_SafeMaybe
_0808AE2A:
	subs r4, #0x40
	subs r5, #1
	cmp r5, #0
	bge _0808ADD6
_0808AE32:
	cmp r7, sl
	bge _0808AE38
	adds r7, #1
_0808AE38:
	adds r7, #1
	ldr r0, [sp, #0xc]
	cmp r7, r0
	blt _0808ADC8
_0808AE40:
	movs r7, #0
	ldr r1, [sp, #0xc]
	cmp r7, r1
	bge _0808AEEC
	ldr r2, _0808AEB0  @ gUnknown_0203E7E8
	str r2, [sp, #0x18]
_0808AE4C:
	lsls r6, r7, #3
	ldr r0, [sp, #0xc]
	subs r0, #2
	cmp r7, r0
	bge _0808AEB8
	ldr r3, [sp, #4]
	adds r3, r3, r6
	mov r9, r3
	ldr r0, [sp, #0x18]
	adds r0, #0x40
	mov sl, r0
	ldrh r5, [r0]
	adds r6, r5, #0
	adds r6, #0x1b
	adds r4, r7, #6
	adds r0, r4, #0
	movs r1, #0xa
	bl __modsi3
	cmp r0, #0
	bne _0808AE78
	adds r6, #2
_0808AE78:
	str r6, [sp]
	movs r0, #2
	mov r1, r9
	ldr r2, [sp, #0x24]
	ldr r3, _0808AEB4  @ gUnknown_08590F7C
	bl RegisterObjectAttributes_SafeMaybe
	mov r2, sl
	ldrh r1, [r2]
	adds r2, r1, #0
	adds r2, #0x3b
	movs r0, #7
	ands r4, r0
	cmp r4, #0
	bne _0808AE98
	adds r2, #2
_0808AE98:
	str r2, [sp]
	movs r0, #2
	mov r1, r9
	ldr r2, [sp, #0x1c]
	ldr r3, _0808AEB4  @ gUnknown_08590F7C
	bl RegisterObjectAttributes_SafeMaybe
	adds r7, #1
	b _0808AEE4
	.align 2, 0
_0808AEAC: .4byte gUnknown_08590F64
_0808AEB0: .4byte gUnknown_0203E7E8
_0808AEB4: .4byte gUnknown_08590F7C
_0808AEB8:
	ldr r3, [sp, #4]
	adds r4, r3, r6
	ldr r1, _0808AF60  @ gUnknown_0203E828
	ldrh r0, [r1]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #2
	adds r1, r4, #0
	ldr r2, [sp, #0x24]
	ldr r3, _0808AF64  @ gUnknown_08590F44
	bl RegisterObjectAttributes_SafeMaybe
	ldr r2, _0808AF60  @ gUnknown_0203E828
	ldrh r0, [r2]
	adds r0, #0x3b
	str r0, [sp]
	movs r0, #2
	adds r1, r4, #0
	ldr r2, [sp, #0x1c]
	ldr r3, _0808AF64  @ gUnknown_08590F44
	bl RegisterObjectAttributes_SafeMaybe
_0808AEE4:
	adds r7, #1
	ldr r3, [sp, #0xc]
	cmp r7, r3
	blt _0808AE4C
_0808AEEC:
	bl sub_808A524
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _0808AF70
	ldr r5, [sp, #0x10]
	lsls r7, r7, #3
	mov r9, r7
	cmp r5, #0
	blt _0808AFBA
_0808AF02:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _0808AF0C
	mov r0, r8
_0808AF0C:
	subs r0, #0x10
	ldr r1, [sp, #8]
	adds r4, r1, r0
	ldr r6, _0808AF68  @ gUnknown_08590F64
	ldr r0, _0808AF6C  @ gUnknown_0203E7E8
	adds r7, r0, #0
	adds r7, #0x40
	ldrh r2, [r7]
	movs r0, #1
	ands r0, r5
	adds r1, r2, #0
	adds r1, #0x5f
	cmp r0, #0
	beq _0808AF2A
	adds r1, #0x20
_0808AF2A:
	str r1, [sp]
	movs r0, #2
	ldr r1, [sp, #0x20]
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes_SafeMaybe
	ldr r1, [sp, #4]
	add r1, r9
	ldrh r0, [r7]
	adds r2, r0, #0
	adds r2, #0x1f
	ldr r3, [sp, #0x14]
	cmp r5, r3
	bne _0808AF4A
	adds r2, #0x5f
_0808AF4A:
	str r2, [sp]
	movs r0, #2
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes_SafeMaybe
	subs r5, #1
	cmp r5, #0
	bge _0808AF02
	b _0808AFBA
	.align 2, 0
_0808AF60: .4byte gUnknown_0203E828
_0808AF64: .4byte gUnknown_08590F44
_0808AF68: .4byte gUnknown_08590F64
_0808AF6C: .4byte gUnknown_0203E7E8
_0808AF70:
	ldr r5, [sp, #0x10]
	lsls r7, r7, #3
	mov r9, r7
	cmp r5, #0
	blt _0808AFBA
	ldr r6, _0808B010  @ gUnknown_08590F64
	ldr r7, _0808B014  @ gUnknown_0203E828
_0808AF7E:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _0808AF88
	mov r0, r8
_0808AF88:
	subs r0, #0x10
	ldr r1, [sp, #8]
	adds r4, r1, r0
	ldrh r0, [r7]
	adds r0, #0x5f
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0x20]
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes_SafeMaybe
	ldrh r0, [r7]
	adds r0, #0x1f
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #4]
	add r1, r9
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes_SafeMaybe
	subs r5, #1
	cmp r5, #0
	bge _0808AF7E
_0808AFBA:
	ldr r5, _0808B018  @ gUnknown_08590F44
	ldr r4, _0808B01C  @ gUnknown_0203E7E8
	adds r4, #0x40
	ldrh r0, [r4]
	adds r0, #0x5b
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0x20]
	ldr r2, [sp, #0x24]
	adds r3, r5, #0
	bl RegisterObjectAttributes_SafeMaybe
	ldr r6, [sp, #4]
	add r6, r9
	ldrh r0, [r4]
	adds r0, #0x5c
	str r0, [sp]
	movs r0, #2
	adds r1, r6, #0
	ldr r2, [sp, #0x24]
	adds r3, r5, #0
	bl RegisterObjectAttributes_SafeMaybe
	ldrh r0, [r4]
	adds r0, #0x5d
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0x20]
	ldr r2, [sp, #0x1c]
	adds r3, r5, #0
	bl RegisterObjectAttributes_SafeMaybe
	ldrh r0, [r4]
	adds r0, #0x5e
	str r0, [sp]
	movs r0, #2
	adds r1, r6, #0
	ldr r2, [sp, #0x1c]
	adds r3, r5, #0
	bl RegisterObjectAttributes_SafeMaybe
	b _0808B082
	.align 2, 0
_0808B010: .4byte gUnknown_08590F64
_0808B014: .4byte gUnknown_0203E828
_0808B018: .4byte gUnknown_08590F44
_0808B01C: .4byte gUnknown_0203E7E8
_0808B020:
	adds r0, r4, #0
	adds r0, #0x1f
	cmp r0, #0
	bge _0808B02A
	adds r0, #0x1f
_0808B02A:
	asrs r0, r0, #5
	str r0, [sp, #0xc]
	bl sub_808A524
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	subs r0, #1
	str r0, [sp, #0x10]
	ldr r7, [sp, #0xc]
	subs r7, #1
	cmp r7, #0
	blt _0808B082
_0808B042:
	ldr r5, [sp, #0x10]
	subs r2, r7, #1
	mov r8, r2
	cmp r5, #0
	blt _0808B07C
	lsls r6, r7, #5
	ldr r3, _0808B094  @ gUnknown_0203E828
	mov r9, r3
	lsls r0, r5, #4
	ldr r1, [sp, #8]
	adds r4, r0, r1
_0808B058:
	lsls r0, r7, #2
	mov r2, r9
	ldrh r2, [r2]
	adds r0, r0, r2
	lsls r1, r5, #6
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #2
	ldr r3, [sp, #4]
	adds r1, r3, r6
	adds r2, r4, #0
	ldr r3, _0808B098  @ gUnknown_08590F8C
	bl RegisterObjectAttributes_SafeMaybe
	subs r4, #0x10
	subs r5, #1
	cmp r5, #0
	bge _0808B058
_0808B07C:
	mov r7, r8
	cmp r7, #0
	bge _0808B042
_0808B082:
	add sp, #0x28
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B094: .4byte gUnknown_0203E828
_0808B098: .4byte gUnknown_08590F8C

	THUMB_FUNC_START sub_808B09C
sub_808B09C: @ 0x0808B09C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808B0D0  @ gUnknown_08A01740
	bl Proc_Find
	adds r2, r4, #0
	adds r2, #0x59
	movs r1, #0
	strb r1, [r2]
	ldrh r1, [r0, #0x30]
	subs r1, #8
	subs r2, #9
	strb r1, [r2]
	ldrh r0, [r0, #0x32]
	subs r0, #8
	adds r1, r4, #0
	adds r1, #0x51
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	adds r1, #1
	bl sub_808AB98
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808B0D0: .4byte gUnknown_08A01740

	THUMB_FUNC_START sub_808B0D4
sub_808B0D4: @ 0x0808B0D4
	push {lr}
	bl sub_808A524
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	beq _0808B0F4
	movs r0, #0
	bl sub_80057A8
	movs r1, #0x11
	negs r1, r1
	ands r1, r0
	movs r0, #0
	bl sub_800578C
_0808B0F4:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808B0F8
sub_808B0F8: @ 0x0808B0F8
	push {lr}
	bl sub_808A524
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	beq _0808B116
	movs r0, #0
	bl sub_80057A8
	movs r1, #0x10
	orrs r1, r0
	movs r0, #0
	bl sub_800578C
_0808B116:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808B11C
sub_808B11C: @ 0x0808B11C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _0808B174  @ gUnknown_0203E800
	adds r0, r4, #0
	bl sub_80045FC
	adds r0, r4, #0
	adds r0, #8
	bl sub_80045FC
	adds r0, r4, #0
	adds r0, #0x10
	bl sub_80045FC
	bl sub_808A524
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _0808B160
	bl sub_808A524
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne _0808B160
	adds r0, r4, #0
	adds r0, #0x18
	bl sub_80045FC
	adds r0, r4, #0
	adds r0, #0x20
	bl sub_80045FC
_0808B160:
	adds r0, r5, #0
	adds r0, #0x58
	movs r1, #0
	strb r1, [r0]
	subs r0, #0x10
	strh r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808B174: .4byte gUnknown_0203E800

	THUMB_FUNC_START sub_808B178
sub_808B178: @ 0x0808B178
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	adds r6, r0, #0
	adds r0, #0x4e
	movs r2, #0
	ldrsh r1, [r0, r2]
	mov r8, r1
	ldr r0, _0808B1AC  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xf3
	ands r0, r1
	cmp r0, #0
	beq _0808B200
	bl sub_808A524
	movs r1, #8
	ands r1, r0
	cmp r1, #0
	bne _0808B200
	movs r3, #0x80
	mov r8, r3
	b _0808B21A
	.align 2, 0
_0808B1AC: .4byte gKeyStatusPtr
_0808B1B0:
	bl sub_808B0D4
	ldr r0, _0808B1D0  @ gUnknown_08A016E0
	bl Proc_Find
	movs r1, #1
	bl Proc_GotoLabel
	adds r0, r6, #0
	movs r1, #1
	bl Proc_GotoLabel
	ldr r0, _0808B1D4  @ gUnknown_08A01818
	bl Proc_DeleteAllWithScript
	b _0808B4C0
	.align 2, 0
_0808B1D0: .4byte gUnknown_08A016E0
_0808B1D4: .4byte gUnknown_08A01818
_0808B1D8:
	adds r0, r1, #1
	str r0, [r6, #0x2c]
	b _0808B772
_0808B1DE:
	adds r1, r6, #0
	adds r1, #0x58
	movs r0, #0
	strb r0, [r1]
	adds r0, r6, #0
	movs r1, #4
	bl Proc_GotoLabel
	b _0808B772
_0808B1F0:
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	b _0808B772
_0808B1F8:
	adds r0, r6, #0
	bl sub_808B11C
	b _0808B772
_0808B200:
	adds r1, r6, #0
	adds r1, #0x4a
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	ble _0808B212
	b _0808B778
_0808B212:
	adds r0, r6, #0
	adds r0, #0x4c
	ldrh r0, [r0]
	strh r0, [r1]
_0808B21A:
	bl sub_808B0F8
	ldr r0, [r6, #0x30]
	bl SetFont
	movs r7, #0
	cmp r7, r8
	blt _0808B22C
	b _0808B772
_0808B22C:
	ldr r0, [r6, #0x2c]
	ldrb r1, [r0]
	adds r2, r0, #0
	cmp r1, #0x80
	bls _0808B238
	b _0808B6A8
_0808B238:
	lsls r0, r1, #2
	ldr r1, _0808B244  @ _0808B248
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808B244: .4byte _0808B248
_0808B248: @ jump table
	.4byte _0808B56C @ case 0
	.4byte _0808B572 @ case 1
	.4byte _0808B5EA @ case 2
	.4byte _0808B664 @ case 3
	.4byte _0808B59A @ case 4
	.4byte _0808B5AE @ case 5
	.4byte _0808B5C2 @ case 6
	.4byte _0808B5D6 @ case 7
	.4byte _0808B6A8 @ case 8
	.4byte _0808B6A8 @ case 9
	.4byte _0808B6A8 @ case 10
	.4byte _0808B6A8 @ case 11
	.4byte _0808B6A8 @ case 12
	.4byte _0808B6A8 @ case 13
	.4byte _0808B6A8 @ case 14
	.4byte _0808B6A8 @ case 15
	.4byte _0808B6A8 @ case 16
	.4byte _0808B6A8 @ case 17
	.4byte _0808B4FE @ case 18
	.4byte _0808B4FE @ case 19
	.4byte _0808B4FE @ case 20
	.4byte _0808B6A8 @ case 21
	.4byte _0808B6A8 @ case 22
	.4byte _0808B6A8 @ case 23
	.4byte _0808B44C @ case 24
	.4byte _0808B488 @ case 25
	.4byte _0808B6A8 @ case 26
	.4byte _0808B6A8 @ case 27
	.4byte _0808B6A8 @ case 28
	.4byte _0808B6A8 @ case 29
	.4byte _0808B6A8 @ case 30
	.4byte _0808B6A8 @ case 31
	.4byte _0808B6A8 @ case 32
	.4byte _0808B6A8 @ case 33
	.4byte _0808B6A8 @ case 34
	.4byte _0808B6A8 @ case 35
	.4byte _0808B6A8 @ case 36
	.4byte _0808B6A8 @ case 37
	.4byte _0808B6A8 @ case 38
	.4byte _0808B6A8 @ case 39
	.4byte _0808B6A8 @ case 40
	.4byte _0808B6A8 @ case 41
	.4byte _0808B6A8 @ case 42
	.4byte _0808B6A8 @ case 43
	.4byte _0808B6A8 @ case 44
	.4byte _0808B6A8 @ case 45
	.4byte _0808B6A8 @ case 46
	.4byte _0808B6A8 @ case 47
	.4byte _0808B6A8 @ case 48
	.4byte _0808B6A8 @ case 49
	.4byte _0808B6A8 @ case 50
	.4byte _0808B6A8 @ case 51
	.4byte _0808B6A8 @ case 52
	.4byte _0808B6A8 @ case 53
	.4byte _0808B6A8 @ case 54
	.4byte _0808B6A8 @ case 55
	.4byte _0808B6A8 @ case 56
	.4byte _0808B6A8 @ case 57
	.4byte _0808B6A8 @ case 58
	.4byte _0808B6A8 @ case 59
	.4byte _0808B6A8 @ case 60
	.4byte _0808B6A8 @ case 61
	.4byte _0808B6A8 @ case 62
	.4byte _0808B6A8 @ case 63
	.4byte _0808B6A8 @ case 64
	.4byte _0808B6A8 @ case 65
	.4byte _0808B6A8 @ case 66
	.4byte _0808B6A8 @ case 67
	.4byte _0808B6A8 @ case 68
	.4byte _0808B6A8 @ case 69
	.4byte _0808B6A8 @ case 70
	.4byte _0808B6A8 @ case 71
	.4byte _0808B6A8 @ case 72
	.4byte _0808B6A8 @ case 73
	.4byte _0808B6A8 @ case 74
	.4byte _0808B6A8 @ case 75
	.4byte _0808B6A8 @ case 76
	.4byte _0808B6A8 @ case 77
	.4byte _0808B6A8 @ case 78
	.4byte _0808B6A8 @ case 79
	.4byte _0808B6A8 @ case 80
	.4byte _0808B6A8 @ case 81
	.4byte _0808B6A8 @ case 82
	.4byte _0808B6A8 @ case 83
	.4byte _0808B6A8 @ case 84
	.4byte _0808B6A8 @ case 85
	.4byte _0808B6A8 @ case 86
	.4byte _0808B6A8 @ case 87
	.4byte _0808B6A8 @ case 88
	.4byte _0808B6A8 @ case 89
	.4byte _0808B6A8 @ case 90
	.4byte _0808B6A8 @ case 91
	.4byte _0808B6A8 @ case 92
	.4byte _0808B6A8 @ case 93
	.4byte _0808B6A8 @ case 94
	.4byte _0808B6A8 @ case 95
	.4byte _0808B6A8 @ case 96
	.4byte _0808B6A8 @ case 97
	.4byte _0808B6A8 @ case 98
	.4byte _0808B6A8 @ case 99
	.4byte _0808B6A8 @ case 100
	.4byte _0808B6A8 @ case 101
	.4byte _0808B6A8 @ case 102
	.4byte _0808B6A8 @ case 103
	.4byte _0808B6A8 @ case 104
	.4byte _0808B6A8 @ case 105
	.4byte _0808B6A8 @ case 106
	.4byte _0808B6A8 @ case 107
	.4byte _0808B6A8 @ case 108
	.4byte _0808B6A8 @ case 109
	.4byte _0808B6A8 @ case 110
	.4byte _0808B6A8 @ case 111
	.4byte _0808B6A8 @ case 112
	.4byte _0808B6A8 @ case 113
	.4byte _0808B6A8 @ case 114
	.4byte _0808B6A8 @ case 115
	.4byte _0808B6A8 @ case 116
	.4byte _0808B6A8 @ case 117
	.4byte _0808B6A8 @ case 118
	.4byte _0808B6A8 @ case 119
	.4byte _0808B6A8 @ case 120
	.4byte _0808B6A8 @ case 121
	.4byte _0808B6A8 @ case 122
	.4byte _0808B6A8 @ case 123
	.4byte _0808B6A8 @ case 124
	.4byte _0808B6A8 @ case 125
	.4byte _0808B6A8 @ case 126
	.4byte _0808B6A8 @ case 127
	.4byte _0808B4D0 @ case 128
_0808B44C:
	bl sub_808B0D4
	ldr r0, _0808B480  @ gUnknown_08A01740
	bl Proc_Find
	adds r3, r0, #0
	ldr r0, _0808B484  @ gUnknown_08A016D8
	adds r1, r6, #0
	adds r1, #0x48
	movs r5, #0
	ldrsh r4, [r1, r5]
	lsls r2, r4, #2
	subs r1, #0x14
	adds r1, r1, r2
	ldr r1, [r1]
	movs r5, #0x3c
	ldrsh r2, [r3, r5]
	movs r5, #0x3e
	ldrsh r3, [r3, r5]
	lsls r4, r4, #4
	adds r3, r3, r4
	movs r4, #6
	str r4, [sp]
	movs r4, #1
	b _0808B4B8
	.align 2, 0
_0808B480: .4byte gUnknown_08A01740
_0808B484: .4byte gUnknown_08A016D8
_0808B488:
	bl sub_808B0D4
	ldr r0, _0808B4C8  @ gUnknown_08A01740
	bl Proc_Find
	adds r3, r0, #0
	ldr r0, _0808B4CC  @ gUnknown_08A016D8
	adds r1, r6, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r4, [r1, r2]
	lsls r2, r4, #2
	subs r1, #0x14
	adds r1, r1, r2
	ldr r1, [r1]
	movs r5, #0x3c
	ldrsh r2, [r3, r5]
	movs r5, #0x3e
	ldrsh r3, [r3, r5]
	lsls r4, r4, #4
	adds r3, r3, r4
	movs r4, #6
	str r4, [sp]
	movs r4, #2
_0808B4B8:
	str r4, [sp, #4]
	str r6, [sp, #8]
	bl sub_80900EC
_0808B4C0:
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	b _0808B772
	.align 2, 0
_0808B4C8: .4byte gUnknown_08A01740
_0808B4CC: .4byte gUnknown_08A016D8
_0808B4D0:
	adds r1, r2, #1
	str r1, [r6, #0x2c]
	ldrb r0, [r2, #1]
	cmp r0, #0x21
	bne _0808B4F2
	adds r2, r6, #0
	adds r2, #0x59
	ldrb r0, [r2]
	adds r0, #1
	movs r1, #1
	ands r0, r1
	strb r0, [r2]
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	subs r7, #1
	b _0808B76A
_0808B4F2:
	cmp r0, #4
	bne _0808B4F8
	b _0808B1B0
_0808B4F8:
	cmp r0, #0x25
	bne _0808B4FE
	b _0808B1D8
_0808B4FE:
	ldr r0, _0808B568  @ gUnknown_08A01740
	bl Proc_Find
	adds r4, r0, #0
	bl sub_808B0D4
	ldr r0, [r6, #0x2c]
	adds r1, r0, #1
	str r1, [r6, #0x2c]
	ldrb r0, [r0, #1]
	cmp r0, #1
	bne _0808B51A
	adds r0, r1, #1
	str r0, [r6, #0x2c]
_0808B51A:
	cmp r4, #0
	bne _0808B520
	b _0808B772
_0808B520:
	adds r0, r6, #0
	bl sub_808B11C
	ldr r0, [r6, #0x2c]
	add r2, sp, #0x10
	add r1, sp, #0xc
	bl sub_808AADC
	ldr r0, [sp, #0xc]
	adds r1, r6, #0
	adds r1, #0x56
	movs r2, #0
	strb r0, [r1]
	ldr r0, [sp, #0x10]
	adds r1, #1
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x44
	ldrh r1, [r0]
	adds r0, r6, #0
	adds r0, #0x54
	strb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x46
	ldrh r0, [r0]
	adds r1, r6, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x58
	strb r2, [r0]
	adds r0, r6, #0
	movs r1, #6
	bl Proc_GotoLabel
	b _0808B772
	.align 2, 0
_0808B568: .4byte gUnknown_08A01740
_0808B56C:
	bl sub_808B0D4
	b _0808B606
_0808B572:
	bl sub_808B0D4
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r0, r6, #0
	adds r0, #0x55
	ldrb r1, [r0]
	adds r2, r6, #0
	adds r2, #0x48
	movs r3, #0
	ldrsh r0, [r2, r3]
	adds r0, #1
	cmp r1, r0
	bne _0808B592
	b _0808B1DE
_0808B592:
	ldrh r0, [r2]
	adds r0, #1
	strh r0, [r2]
	b _0808B76A
_0808B59A:
	bl sub_808B0D4
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x4a
	movs r0, #8
	strh r0, [r1]
	b _0808B772
_0808B5AE:
	bl sub_808B0D4
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x4a
	movs r0, #0x10
	strh r0, [r1]
	b _0808B772
_0808B5C2:
	bl sub_808B0D4
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x4a
	movs r0, #0x20
	strh r0, [r1]
	b _0808B772
_0808B5D6:
	bl sub_808B0D4
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x4a
	movs r0, #0x40
	strh r0, [r1]
	b _0808B772
_0808B5EA:
	bl sub_808B0D4
	ldr r0, [r6, #0x2c]
	adds r1, r0, #1
	str r1, [r6, #0x2c]
	ldrb r0, [r0, #1]
	cmp r0, #1
	bne _0808B5FE
	adds r0, r1, #1
	str r0, [r6, #0x2c]
_0808B5FE:
	ldr r0, [r6, #0x2c]
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808B638
_0808B606:
	bl sub_808A524
	movs r1, #2
	ands r1, r0
	cmp r1, #0
	bne _0808B614
	b _0808B1F0
_0808B614:
	ldr r0, _0808B630  @ gUnknown_08A016E0
	bl Proc_Find
	movs r1, #1
	bl Proc_GotoLabel
	adds r0, r6, #0
	movs r1, #1
	bl Proc_GotoLabel
	ldr r0, _0808B634  @ gUnknown_08A01818
	bl Proc_DeleteAllWithScript
	b _0808B772
	.align 2, 0
_0808B630: .4byte gUnknown_08A016E0
_0808B634: .4byte gUnknown_08A01818
_0808B638:
	bl sub_808A524
	movs r1, #0x10
	ands r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmp r1, #0
	beq _0808B64A
	b _0808B1F8
_0808B64A:
	ldr r0, [r6, #0x2c]
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808B654
	b _0808B772
_0808B654:
	adds r0, r6, #0
	adds r0, #0x58
	strb r1, [r0]
	adds r0, r6, #0
	movs r1, #5
	bl Proc_GotoLabel
	b _0808B772
_0808B664:
	bl sub_808B0D4
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	ldr r0, _0808B6A4  @ gUnknown_08A01740
	bl Proc_Find
	adds r4, r6, #0
	adds r4, #0x52
	movs r5, #0x3c
	ldrsh r1, [r0, r5]
	ldrb r2, [r4]
	adds r1, r1, r2
	movs r3, #0x3e
	ldrsh r2, [r0, r3]
	adds r0, r6, #0
	adds r0, #0x48
	movs r5, #0
	ldrsh r0, [r0, r5]
	lsls r0, r0, #4
	adds r2, r2, r0
	adds r2, #8
	adds r0, r6, #0
	bl sub_8007CD8
	ldr r0, [r6, #0x2c]
	adds r1, r4, #0
	bl sub_808AB98
	b _0808B772
	.align 2, 0
_0808B6A4: .4byte gUnknown_08A01740
_0808B6A8:
	bl sub_808A524
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0808B6CE
	adds r5, r6, #0
	adds r5, #0x48
	movs r1, #0
	ldrsh r0, [r5, r1]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #1
	bl Text_SetColorId
	b _0808B70A
_0808B6CE:
	adds r0, r6, #0
	adds r0, #0x59
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808B6F2
	adds r5, r6, #0
	adds r5, #0x48
	movs r2, #0
	ldrsh r0, [r5, r2]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0xa
	bl Text_SetColorId
	b _0808B70A
_0808B6F2:
	adds r5, r6, #0
	adds r5, #0x48
	movs r3, #0
	ldrsh r0, [r5, r3]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #6
	bl Text_SetColorId
_0808B70A:
	movs r1, #0
	ldrsh r0, [r5, r1]
	lsls r0, r0, #2
	adds r0, r4, r0
	ldr r0, [r0]
	ldr r1, [r6, #0x2c]
	bl Text_AppendChar
	str r0, [r6, #0x2c]
	bl GetTextDisplaySpeed
	adds r4, r0, #0
	cmp r4, #1
	bne _0808B730
	bl GetGameClock
	ands r0, r4
	cmp r0, #0
	beq _0808B76A
_0808B730:
	bl sub_808A524
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _0808B758
	ldr r0, _0808B750  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808B76A
	ldr r0, _0808B754  @ 0x000002E5
	bl m4aSongNumStart
	b _0808B76A
	.align 2, 0
_0808B750: .4byte gUnknown_0202BCF0
_0808B754: .4byte 0x000002E5
_0808B758:
	ldr r0, _0808B784  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808B76A
	movs r0, #0x6e
	bl m4aSongNumStart
_0808B76A:
	adds r7, #1
	cmp r7, r8
	bge _0808B772
	b _0808B22C
_0808B772:
	movs r0, #0
	bl SetFont
_0808B778:
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B784: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_808B788
sub_808B788: @ 0x0808B788
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808B7B0  @ gUnknown_08A01818
	bl Proc_Find
	cmp r0, #0
	beq _0808B7AA
	ldr r0, _0808B7B4  @ gUnknown_08A016E0
	bl Proc_Find
	movs r1, #0
	bl Proc_GotoLabel
	adds r0, r4, #0
	movs r1, #0
	bl Proc_GotoLabel
_0808B7AA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808B7B0: .4byte gUnknown_08A01818
_0808B7B4: .4byte gUnknown_08A016E0

	THUMB_FUNC_START sub_808B7B8
sub_808B7B8: @ 0x0808B7B8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x54
	ldrb r0, [r0]
	adds r0, #1
	adds r1, r4, #0
	adds r1, #0x55
	ldrb r1, [r1]
	bl sub_808A530
	adds r1, r4, #0
	adds r1, #0x58
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x10
	bne _0808B7F8
	adds r0, r4, #0
	adds r0, #0x48
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #3
	ldr r1, _0808B800  @ gUnknown_0203E800
	adds r0, r0, r1
	movs r1, #0
	bl Text_SetXCursor
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0808B7F8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808B800: .4byte gUnknown_0203E800

	THUMB_FUNC_START sub_808B804
sub_808B804: @ 0x0808B804
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x48
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0808B81A
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _0808B822
_0808B81A:
	adds r0, r4, #0
	movs r1, #5
	bl Proc_GotoLabel
_0808B822:
	adds r1, r4, #0
	adds r1, #0x48
	ldrh r2, [r1]
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0
	beq _0808B834
	subs r0, r2, #1
	strh r0, [r1]
_0808B834:
	adds r1, r4, #0
	adds r1, #0x58
	movs r0, #0
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808B844
sub_808B844: @ 0x0808B844
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808B86C  @ gUnknown_08A016E0
	bl Proc_Find
	movs r1, #3
	bl Proc_GotoLabel
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	movs r0, #0
	bl SetFont
	movs r0, #0
	bl SetFontGlyphSet
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808B86C: .4byte gUnknown_08A016E0

	THUMB_FUNC_START sub_808B870
sub_808B870: @ 0x0808B870
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _0808B900  @ gUnknown_08A01740
	bl Proc_Find
	adds r6, r0, #0
	adds r5, r4, #0
	adds r5, #0x58
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	cmp r6, #0
	beq _0808B8C8
	adds r0, r4, #0
	adds r0, #0x54
	ldrb r0, [r0]
	ldrb r3, [r5]
	movs r2, #2
	subs r2, r2, r3
	adds r1, r0, #0
	muls r1, r2, r1
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	muls r0, r3, r0
	adds r1, r1, r0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	adds r0, #0x55
	ldrb r0, [r0]
	muls r2, r0, r2
	adds r0, r4, #0
	adds r0, #0x57
	ldrb r0, [r0]
	muls r0, r3, r0
	adds r2, r2, r0
	lsrs r0, r2, #0x1f
	adds r2, r2, r0
	asrs r2, r2, #1
	adds r0, r6, #0
	bl sub_808A838
_0808B8C8:
	ldrb r0, [r5]
	cmp r0, #2
	bne _0808B8F8
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	lsrs r0, r0, #3
	adds r1, r4, #0
	adds r1, #0x54
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x57
	ldrb r0, [r0]
	lsrs r0, r0, #4
	adds r1, r0, #0
	cmp r0, #5
	bls _0808B8EC
	movs r1, #5
_0808B8EC:
	adds r0, r4, #0
	adds r0, #0x55
	strb r1, [r0]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0808B8F8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808B900: .4byte gUnknown_08A01740

	THUMB_FUNC_START sub_808B904
sub_808B904: @ 0x0808B904
	push {lr}
	ldr r0, _0808B91C  @ gUnknown_08A016E0
	bl Proc_Find
	cmp r0, #0
	beq _0808B920
	adds r0, #0x38
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808B920
	movs r0, #0
	b _0808B922
	.align 2, 0
_0808B91C: .4byte gUnknown_08A016E0
_0808B920:
	movs r0, #1
_0808B922:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808B928
sub_808B928: @ 0x0808B928
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _0808B998  @ gUnknown_0203E7E8
	adds r0, r4, #0
	bl SetFont
	movs r0, #0
	bl SetFontGlyphSet
	movs r0, #1
	bl SetFontGlyphSet
	bl sub_808A524
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _0808B99C
	adds r0, r4, #0
	adds r0, #0x18
	movs r1, #6
	bl Text_SetColorId
	adds r0, r4, #0
	adds r0, #0x20
	movs r1, #6
	bl Text_SetColorId
	adds r0, r4, #0
	adds r0, #0x28
	movs r1, #6
	bl Text_SetColorId
	bl sub_808A524
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _0808B9BA
	bl sub_808A524
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne _0808B9BA
	adds r0, r4, #0
	adds r0, #0x30
	movs r1, #6
	bl Text_SetColorId
	adds r0, r4, #0
	adds r0, #0x38
	movs r1, #6
	bl Text_SetColorId
	b _0808B9BA
	.align 2, 0
_0808B998: .4byte gUnknown_0203E7E8
_0808B99C:
	movs r4, #0
	b _0808B9AE
_0808B9A0:
	lsls r0, r4, #3
	ldr r1, _0808BA38  @ gUnknown_0203E800
	adds r0, r0, r1
	movs r1, #0
	bl Text_SetColorId
	adds r4, #1
_0808B9AE:
	bl sub_808A524
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	cmp r4, r0
	blt _0808B9A0
_0808B9BA:
	movs r0, #0
	bl SetFont
	ldr r4, _0808BA3C  @ gUnknown_08A01760
	adds r0, r4, #0
	bl Proc_DeleteAllWithScript
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Create
	adds r4, r0, #0
	ldr r1, _0808BA40  @ gUnknown_0203E7E8
	str r1, [r4, #0x30]
	adds r0, r1, #0
	adds r0, #0x18
	str r0, [r4, #0x34]
	adds r0, #8
	str r0, [r4, #0x38]
	adds r0, #8
	str r0, [r4, #0x3c]
	adds r0, #8
	str r0, [r4, #0x40]
	adds r0, #8
	str r0, [r4, #0x44]
	adds r1, r4, #0
	adds r1, #0x48
	movs r0, #0
	strh r0, [r1]
	ldr r0, [r5, #0x5c]
	bl GetStringFromIndex
	bl sub_800A2A4
	str r0, [r4, #0x2c]
	ldr r1, [r5, #0x2c]
	adds r0, r4, #0
	adds r0, #0x54
	strb r1, [r0]
	ldr r0, [r5, #0x30]
	adds r1, r4, #0
	adds r1, #0x55
	strb r0, [r1]
	bl sub_808B904
	lsls r0, r0, #0x18
	asrs r1, r0, #0x18
	cmp r1, #0
	beq _0808BA44
	bl GetTextDisplaySpeed
	adds r1, r4, #0
	adds r1, #0x4c
	strh r0, [r1]
	lsls r0, r0, #0x10
	movs r1, #0x80
	cmp r0, #0
	beq _0808BA30
	movs r1, #1
_0808BA30:
	adds r0, r4, #0
	adds r0, #0x4e
	strh r1, [r0]
	b _0808BA52
	.align 2, 0
_0808BA38: .4byte gUnknown_0203E800
_0808BA3C: .4byte gUnknown_08A01760
_0808BA40: .4byte gUnknown_0203E7E8
_0808BA44:
	adds r0, r4, #0
	adds r0, #0x4c
	strh r1, [r0]
	adds r1, r4, #0
	adds r1, #0x4e
	movs r0, #0x80
	strh r0, [r1]
_0808BA52:
	adds r1, r4, #0
	adds r1, #0x4a
	movs r0, #0
	strh r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808BA60
sub_808BA60: @ 0x0808BA60
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r0, _0808BA94  @ gUnknown_08A01800
	movs r1, #3
	bl Proc_Create
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	cmp r5, #0
	bge _0808BA7A
	adds r5, #7
_0808BA7A:
	asrs r0, r5, #3
	str r0, [r1, #0x2c]
	adds r0, r6, #0
	cmp r6, #0
	bge _0808BA86
	adds r0, #0xf
_0808BA86:
	asrs r0, r0, #4
	cmp r0, #5
	bgt _0808BA98
	cmp r0, #0
	bge _0808BA9A
	movs r0, #0
	b _0808BA9A
	.align 2, 0
_0808BA94: .4byte gUnknown_08A01800
_0808BA98:
	movs r0, #5
_0808BA9A:
	str r0, [r1, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808BAA4
sub_808BAA4: @ 0x0808BAA4
	push {r4, lr}
	ldr r4, _0808BAFC  @ gUnknown_0203E7E8
	adds r0, r4, #0
	bl SetFont
	bl sub_808A524
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _0808BB00
	adds r0, r4, #0
	adds r0, #0x18
	bl sub_80045FC
	adds r0, r4, #0
	adds r0, #0x20
	bl sub_80045FC
	adds r0, r4, #0
	adds r0, #0x28
	bl sub_80045FC
	bl sub_808A524
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _0808BB1E
	bl sub_808A524
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne _0808BB1E
	adds r0, r4, #0
	adds r0, #0x30
	bl sub_80045FC
	adds r0, r4, #0
	adds r0, #0x38
	bl sub_80045FC
	b _0808BB1E
	.align 2, 0
_0808BAFC: .4byte gUnknown_0203E7E8
_0808BB00:
	movs r4, #0
	b _0808BB12
_0808BB04:
	lsls r0, r4, #3
	ldr r1, _0808BB38  @ gUnknown_0203E800
	adds r0, r0, r1
	movs r1, #0
	bl Text_80046B4
	adds r4, #1
_0808BB12:
	bl sub_808A524
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	cmp r4, r0
	blt _0808BB04
_0808BB1E:
	ldr r0, _0808BB3C  @ gUnknown_08A01760
	bl Proc_DeleteAllWithScript
	ldr r0, _0808BB40  @ gUnknown_08A01800
	bl Proc_DeleteAllWithScript
	movs r0, #0
	bl SetFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808BB38: .4byte gUnknown_0203E800
_0808BB3C: .4byte gUnknown_08A01760
_0808BB40: .4byte gUnknown_08A01800

	THUMB_FUNC_START sub_808BB44
sub_808BB44: @ 0x0808BB44
	push {lr}
	ldr r0, _0808BB54  @ gUnknown_08A01818
	movs r1, #0
	bl Proc_Create
	pop {r0}
	bx r0
	.align 2, 0
_0808BB54: .4byte gUnknown_08A01818

	THUMB_FUNC_START sub_808BB58
sub_808BB58: @ 0x0808BB58
	push {lr}
	ldr r0, _0808BB68  @ gUnknown_08A01818
	bl Proc_Find
	cmp r0, #0
	bne _0808BB6C
	movs r0, #0
	b _0808BB6E
	.align 2, 0
_0808BB68: .4byte gUnknown_08A01818
_0808BB6C:
	movs r0, #1
_0808BB6E:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808BB74
sub_808BB74: @ 0x0808BB74
	push {lr}
	ldr r0, _0808BB98  @ gUnknown_08A016E0
	bl Proc_DeleteAllWithScript
	ldr r0, _0808BB9C  @ gUnknown_08A01818
	bl Proc_DeleteAllWithScript
	ldr r0, _0808BBA0  @ gUnknown_08A01740
	bl Proc_DeleteAllWithScript
	ldr r0, _0808BBA4  @ gUnknown_08A01760
	bl Proc_DeleteAllWithScript
	ldr r0, _0808BBA8  @ gUnknown_08A01800
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_0808BB98: .4byte gUnknown_08A016E0
_0808BB9C: .4byte gUnknown_08A01818
_0808BBA0: .4byte gUnknown_08A01740
_0808BBA4: .4byte gUnknown_08A01760
_0808BBA8: .4byte gUnknown_08A01800

	THUMB_FUNC_START sub_808BBAC
sub_808BBAC: @ 0x0808BBAC
	push {lr}
	cmp r0, #0
	bge _0808BBBE
	cmp r1, #0
	bge _0808BBBA
	movs r0, #0
	b _0808BBC8
_0808BBBA:
	movs r0, #1
	b _0808BBC8
_0808BBBE:
	cmp r1, #0
	blt _0808BBC6
	movs r0, #3
	b _0808BBC8
_0808BBC6:
	movs r0, #2
_0808BBC8:
	pop {r1}
	bx r1

	THUMB_FUNC_START GetCameraMovementSpeedMaybe
GetCameraMovementSpeedMaybe: @ 0x0808BBCC
	push {r4, lr}
	ldr r2, _0808BBF8  @ gUnknown_0202BCB0
	movs r0, #0x14
	ldrsh r3, [r2, r0]
	lsls r3, r3, #4
	movs r1, #0xc
	ldrsh r0, [r2, r1]
	subs r0, #8
	subs r3, r3, r0
	movs r4, #0x16
	ldrsh r1, [r2, r4]
	lsls r1, r1, #4
	movs r4, #0xe
	ldrsh r0, [r2, r4]
	subs r0, #8
	subs r1, r1, r0
	cmp r3, #0x78
	bgt _0808BBFC
	cmp r1, #0x50
	bgt _0808BC04
	movs r0, #0
	b _0808BC0A
	.align 2, 0
_0808BBF8: .4byte gUnknown_0202BCB0
_0808BBFC:
	cmp r1, #0x50
	bgt _0808BC08
	movs r0, #1
	b _0808BC0A
_0808BC04:
	movs r0, #2
	b _0808BC0A
_0808BC08:
	movs r0, #3
_0808BC0A:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808BC10
sub_808BC10: @ 0x0808BC10
	push {lr}
	adds r3, r0, #0
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #5
	ble _0808BC20
	movs r0, #5
_0808BC20:
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r2
	strh r0, [r3]
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808BC2C
sub_808BC2C: @ 0x0808BC2C
	push {r4, r5, lr}
	adds r3, r0, #0
	lsls r1, r1, #0x10
	asrs r4, r1, #0x13
	movs r0, #0xe0
	lsls r0, r0, #0xb
	ands r0, r1
	asrs r0, r0, #0x10
	movs r1, #0
	adds r5, r2, #0
	adds r5, #0xe
	adds r2, #6
	adds r0, r2, r0
_0808BC46:
	cmp r1, r4
	bge _0808BC4E
	strh r5, [r3]
	b _0808BC58
_0808BC4E:
	cmp r1, r4
	bne _0808BC56
	strh r0, [r3]
	b _0808BC58
_0808BC56:
	strh r2, [r3]
_0808BC58:
	adds r3, #2
	adds r1, #1
	cmp r1, #4
	ble _0808BC46
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808BC68
sub_808BC68: @ 0x0808BC68
	push {r4, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #4
	ble _0808BC78
	movs r3, #5
_0808BC78:
	lsls r0, r3, #0x10
	cmp r0, #0
	bge _0808BC80
	movs r3, #0
_0808BC80:
	adds r1, r2, #0
	adds r1, #0xf
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808BC94
sub_808BC94: @ 0x0808BC94
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	adds r0, r6, #0
	bl GetUnitCurrentHp
	movs r1, #0x32
	adds r4, r0, #0
	muls r4, r1, r4
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r6, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	mov r2, r8
	bl sub_808BC10
	adds r0, r5, #2
	subs r1, r4, #5
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	mov r2, r8
	bl sub_808BC2C
	adds r5, #0xc
	subs r4, #0x2d
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	mov r2, r8
	bl sub_808BC68
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START Loop6CUI1_DisplayTransition
Loop6CUI1_DisplayTransition: @ 0x0808BCF8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r1, _0808BD44  @ gUnknown_08A01828
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r1, r0, r1
	movs r0, #3
	ldrsb r0, [r1, r0]
	movs r4, #0
	cmp r0, #0
	blt _0808BD1A
	movs r4, #0xe
_0808BD1A:
	movs r0, #2
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _0808BD50
	lsls r5, r4, #5
	lsls r4, r4, #6
	ldr r0, _0808BD48  @ gBG0TilemapBuffer
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _0808BD4C  @ gBG1TilemapBuffer
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	b _0808BD70
	.align 2, 0
_0808BD44: .4byte gUnknown_08A01828
_0808BD48: .4byte gBG0TilemapBuffer
_0808BD4C: .4byte gBG1TilemapBuffer
_0808BD50:
	lsls r5, r4, #5
	lsls r4, r4, #6
	ldr r0, _0808BDC8  @ gUnknown_02022CCA
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _0808BDCC  @ gUnknown_020234CA
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
_0808BD70:
	mov r8, r5
	adds r6, r4, #0
	movs r0, #3
	bl BG_EnableSyncByMask
	ldr r1, _0808BDD0  @ gUnknown_08A0189C
	ldr r0, [r7, #0x58]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	ldr r1, _0808BDD4  @ gUnknown_08A01828
	adds r0, r7, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0808BDE8
	movs r4, #0xd
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _0808BDD8  @ gBmFrameTmap0
	adds r0, r4, r0
	ldr r1, _0808BDDC  @ gBG0TilemapBuffer
	adds r1, r6, r1
	adds r2, r5, #0
	movs r3, #6
	bl TileMap_CopyRect
	ldr r0, _0808BDE0  @ gUnknown_0200422C
	adds r4, r4, r0
	ldr r1, _0808BDE4  @ gBG1TilemapBuffer
	adds r1, r6, r1
	adds r0, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TileMap_CopyRect
	b _0808BE0E
	.align 2, 0
_0808BDC8: .4byte gUnknown_02022CCA
_0808BDCC: .4byte gUnknown_020234CA
_0808BDD0: .4byte gUnknown_08A0189C
_0808BDD4: .4byte gUnknown_08A01828
_0808BDD8: .4byte gBmFrameTmap0
_0808BDDC: .4byte gBG0TilemapBuffer
_0808BDE0: .4byte gUnknown_0200422C
_0808BDE4: .4byte gBG1TilemapBuffer
_0808BDE8:
	ldr r0, _0808BE58  @ gBmFrameTmap0
	mov r4, r8
	adds r4, #0x1e
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r1, _0808BE5C  @ gBG0TilemapBuffer
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #6
	bl TileMap_CopyRect
	ldr r0, _0808BE60  @ gUnknown_0200422C
	ldr r1, _0808BE64  @ gBG1TilemapBuffer
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TileMap_CopyRect
_0808BE0E:
	ldr r0, [r7, #0x58]
	adds r0, #1
	str r0, [r7, #0x58]
	cmp r0, #4
	bne _0808BE4C
	adds r1, r7, #0
	adds r1, #0x55
	movs r0, #0
	strb r0, [r1]
	str r0, [r7, #0x58]
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	ldr r2, _0808BE68  @ gUnknown_0202BCB0
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, _0808BE6C  @ gBmMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r7, #0
	bl DrawMinimugBoxMaybe
_0808BE4C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808BE58: .4byte gBmFrameTmap0
_0808BE5C: .4byte gBG0TilemapBuffer
_0808BE60: .4byte gUnknown_0200422C
_0808BE64: .4byte gBG1TilemapBuffer
_0808BE68: .4byte gUnknown_0202BCB0
_0808BE6C: .4byte gBmMapUnit

	THUMB_FUNC_START Loop6CUI1_HideTransition
Loop6CUI1_HideTransition: @ 0x0808BE70
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r3, _0808BED0  @ gUnknown_08A01828
	adds r2, r6, #0
	adds r2, #0x50
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrb r0, [r0, #3]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r4, #0
	cmp r0, #0
	blt _0808BE94
	movs r4, #0xe
_0808BE94:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0808BEDC
	lsls r5, r4, #5
	lsls r4, r4, #6
	ldr r0, _0808BED4  @ gBG0TilemapBuffer
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _0808BED8  @ gBG1TilemapBuffer
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	b _0808BEFC
	.align 2, 0
_0808BED0: .4byte gUnknown_08A01828
_0808BED4: .4byte gBG0TilemapBuffer
_0808BED8: .4byte gBG1TilemapBuffer
_0808BEDC:
	lsls r5, r4, #5
	lsls r4, r4, #6
	ldr r0, _0808BF54  @ gUnknown_02022CCA
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _0808BF58  @ gUnknown_020234CA
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
_0808BEFC:
	mov r8, r5
	adds r7, r4, #0
	movs r0, #3
	bl BG_EnableSyncByMask
	ldr r1, _0808BF5C  @ gUnknown_08A018A0
	ldr r0, [r6, #0x58]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	ldr r1, _0808BF60  @ gUnknown_08A01828
	adds r0, r6, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0808BF74
	movs r4, #0xd
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _0808BF64  @ gBmFrameTmap0
	adds r0, r4, r0
	ldr r1, _0808BF68  @ gBG0TilemapBuffer
	adds r1, r7, r1
	adds r2, r5, #0
	movs r3, #6
	bl TileMap_CopyRect
	ldr r0, _0808BF6C  @ gUnknown_0200422C
	adds r4, r4, r0
	ldr r1, _0808BF70  @ gBG1TilemapBuffer
	adds r1, r7, r1
	adds r0, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TileMap_CopyRect
	b _0808BF9A
	.align 2, 0
_0808BF54: .4byte gUnknown_02022CCA
_0808BF58: .4byte gUnknown_020234CA
_0808BF5C: .4byte gUnknown_08A018A0
_0808BF60: .4byte gUnknown_08A01828
_0808BF64: .4byte gBmFrameTmap0
_0808BF68: .4byte gBG0TilemapBuffer
_0808BF6C: .4byte gUnknown_0200422C
_0808BF70: .4byte gBG1TilemapBuffer
_0808BF74:
	ldr r0, _0808BFC4  @ gBmFrameTmap0
	mov r4, r8
	adds r4, #0x1e
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r1, _0808BFC8  @ gBG0TilemapBuffer
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #6
	bl TileMap_CopyRect
	ldr r0, _0808BFCC  @ gUnknown_0200422C
	ldr r1, _0808BFD0  @ gBG1TilemapBuffer
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TileMap_CopyRect
_0808BF9A:
	ldr r0, [r6, #0x58]
	adds r0, #1
	str r0, [r6, #0x58]
	cmp r0, #3
	bne _0808BFBA
	adds r1, r6, #0
	adds r1, #0x56
	movs r0, #0
	strb r0, [r1]
	str r0, [r6, #0x58]
	adds r1, #1
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
_0808BFBA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808BFC4: .4byte gBmFrameTmap0
_0808BFC8: .4byte gBG0TilemapBuffer
_0808BFCC: .4byte gUnknown_0200422C
_0808BFD0: .4byte gBG1TilemapBuffer

	THUMB_FUNC_START sub_808BFD4
sub_808BFD4: @ 0x0808BFD4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, _0808C00C  @ gUnknown_08A01828
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0808C018
	ldr r0, _0808C010  @ gUnknown_02022FE8
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _0808C014  @ gUnknown_020237E8
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TileMap_FillRect
	b _0808C030
	.align 2, 0
_0808C00C: .4byte gUnknown_08A01828
_0808C010: .4byte gUnknown_02022FE8
_0808C014: .4byte gUnknown_020237E8
_0808C018:
	ldr r0, _0808C084  @ gUnknown_02023016
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _0808C088  @ gUnknown_02023816
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TileMap_FillRect
_0808C030:
	movs r0, #3
	bl BG_EnableSyncByMask
	ldr r1, _0808C08C  @ gUnknown_08A018A3
	ldr r0, [r6, #0x58]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r5, r0, #1
	ldr r1, _0808C090  @ gUnknown_08A01828
	adds r0, r6, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0808C0A8
	ldr r4, _0808C094  @ 0x00000147
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _0808C098  @ gBmFrameTmap0
	adds r0, r4, r0
	ldr r1, _0808C09C  @ gUnknown_02022FE8
	adds r2, r5, #0
	movs r3, #7
	bl TileMap_CopyRect
	ldr r0, _0808C0A0  @ gUnknown_0200422C
	adds r4, r4, r0
	ldr r1, _0808C0A4  @ gUnknown_020237E8
	adds r0, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TileMap_CopyRect
	b _0808C0CE
	.align 2, 0
_0808C084: .4byte gUnknown_02023016
_0808C088: .4byte gUnknown_02023816
_0808C08C: .4byte gUnknown_08A018A3
_0808C090: .4byte gUnknown_08A01828
_0808C094: .4byte 0x00000147
_0808C098: .4byte gBmFrameTmap0
_0808C09C: .4byte gUnknown_02022FE8
_0808C0A0: .4byte gUnknown_0200422C
_0808C0A4: .4byte gUnknown_020237E8
_0808C0A8:
	ldr r0, _0808C0F0  @ gUnknown_02003FAC
	movs r4, #0xdf
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r1, _0808C0F4  @ gBG0TilemapBuffer
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #7
	bl TileMap_CopyRect
	ldr r0, _0808C0F8  @ gUnknown_020044AC
	ldr r1, _0808C0FC  @ gBG1TilemapBuffer
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TileMap_CopyRect
_0808C0CE:
	ldr r0, [r6, #0x58]
	adds r0, #1
	str r0, [r6, #0x58]
	cmp r0, #3
	bne _0808C0E8
	movs r0, #0
	str r0, [r6, #0x58]
	adds r1, r6, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
_0808C0E8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808C0F0: .4byte gUnknown_02003FAC
_0808C0F4: .4byte gBG0TilemapBuffer
_0808C0F8: .4byte gUnknown_020044AC
_0808C0FC: .4byte gBG1TilemapBuffer

	THUMB_FUNC_START sub_808C100
sub_808C100: @ 0x0808C100
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	ldr r1, _0808C140  @ gUnknown_08A01828
	adds r0, r6, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0808C14C
	ldr r0, _0808C144  @ gUnknown_02022FE8
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _0808C148  @ gUnknown_020237E8
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TileMap_FillRect
	b _0808C164
	.align 2, 0
_0808C140: .4byte gUnknown_08A01828
_0808C144: .4byte gUnknown_02022FE8
_0808C148: .4byte gUnknown_020237E8
_0808C14C:
	ldr r0, _0808C1B8  @ gUnknown_02023016
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _0808C1BC  @ gUnknown_02023816
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TileMap_FillRect
_0808C164:
	movs r0, #3
	bl BG_EnableSyncByMask
	ldr r1, _0808C1C0  @ gUnknown_08A018A6
	ldr r0, [r6, #0x58]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	ldr r1, _0808C1C4  @ gUnknown_08A01828
	adds r0, r6, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0808C1D8
	movs r4, #0xa3
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _0808C1C8  @ gBmFrameTmap0
	adds r0, r4, r0
	ldr r1, _0808C1CC  @ gUnknown_02022FE8
	adds r2, r5, #0
	movs r3, #7
	bl TileMap_CopyRect
	ldr r0, _0808C1D0  @ gUnknown_0200422C
	adds r4, r4, r0
	ldr r1, _0808C1D4  @ gUnknown_020237E8
	adds r0, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TileMap_CopyRect
	b _0808C1FE
	.align 2, 0
_0808C1B8: .4byte gUnknown_02023016
_0808C1BC: .4byte gUnknown_02023816
_0808C1C0: .4byte gUnknown_08A018A6
_0808C1C4: .4byte gUnknown_08A01828
_0808C1C8: .4byte gBmFrameTmap0
_0808C1CC: .4byte gUnknown_02022FE8
_0808C1D0: .4byte gUnknown_0200422C
_0808C1D4: .4byte gUnknown_020237E8
_0808C1D8:
	ldr r0, _0808C224  @ gUnknown_02003FAC
	movs r4, #0xdf
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r1, _0808C228  @ gBG0TilemapBuffer
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #7
	bl TileMap_CopyRect
	ldr r0, _0808C22C  @ gUnknown_020044AC
	ldr r1, _0808C230  @ gBG1TilemapBuffer
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TileMap_CopyRect
_0808C1FE:
	ldr r0, [r6, #0x58]
	adds r0, #1
	str r0, [r6, #0x58]
	cmp r0, #3
	bne _0808C21C
	movs r0, #0
	str r0, [r6, #0x58]
	adds r1, r6, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
_0808C21C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808C224: .4byte gUnknown_02003FAC
_0808C228: .4byte gBG0TilemapBuffer
_0808C22C: .4byte gUnknown_020044AC
_0808C230: .4byte gBG1TilemapBuffer

	THUMB_FUNC_START sub_808C234
sub_808C234: @ 0x0808C234
	push {lr}
	ldr r1, _0808C27C  @ gUnknown_08A01828
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r1, r0, r1
	movs r0, #2
	ldrsb r0, [r1, r0]
	movs r2, #0x12
	cmp r0, #0
	bge _0808C250
	movs r2, #0
_0808C250:
	movs r0, #3
	ldrsb r0, [r1, r0]
	movs r1, #0xe
	cmp r0, #0
	bge _0808C25C
	movs r1, #0
_0808C25C:
	ldr r0, _0808C280  @ gBmFrameTmap0
	lsls r1, r1, #5
	adds r1, r1, r2
	lsls r1, r1, #1
	ldr r2, _0808C284  @ gBG0TilemapBuffer
	adds r1, r1, r2
	movs r2, #0xd
	movs r3, #6
	bl TileMap_CopyRect
	movs r0, #3
	bl BG_EnableSyncByMask
	pop {r0}
	bx r0
	.align 2, 0
_0808C27C: .4byte gUnknown_08A01828
_0808C280: .4byte gBmFrameTmap0
_0808C284: .4byte gBG0TilemapBuffer

	THUMB_FUNC_START sub_808C288
sub_808C288: @ 0x0808C288
	push {lr}
	ldr r1, _0808C2C0  @ gUnknown_08A01828
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0x17
	cmp r0, #0
	bge _0808C2A6
	movs r1, #0
_0808C2A6:
	ldr r0, _0808C2C4  @ gUnknown_02003FAC
	lsls r1, r1, #1
	ldr r2, _0808C2C8  @ gUnknown_02022FE8
	adds r1, r1, r2
	movs r2, #7
	movs r3, #7
	bl TileMap_CopyRect
	movs r0, #3
	bl BG_EnableSyncByMask
	pop {r0}
	bx r0
	.align 2, 0
_0808C2C0: .4byte gUnknown_08A01828
_0808C2C4: .4byte gUnknown_02003FAC
_0808C2C8: .4byte gUnknown_02022FE8

	THUMB_FUNC_START sub_808C2CC
sub_808C2CC: @ 0x0808C2CC
	push {r4, r5, lr}
	adds r5, r1, #0
	movs r4, #0
	cmp r0, #0x40
	beq _0808C2F8
	cmp r0, #0x40
	bgt _0808C2E0
	cmp r0, #0
	beq _0808C2E6
	b _0808C300
_0808C2E0:
	cmp r0, #0x80
	beq _0808C2F0
	b _0808C300
_0808C2E6:
	ldr r4, _0808C2EC  @ gUnknown_08A1738C
	b _0808C304
	.align 2, 0
_0808C2EC: .4byte gUnknown_08A1738C
_0808C2F0:
	ldr r4, _0808C2F4  @ gUnknown_08A173AC
	b _0808C304
	.align 2, 0
_0808C2F4: .4byte gUnknown_08A173AC
_0808C2F8:
	ldr r4, _0808C2FC  @ gUnknown_08A173CC
	b _0808C304
	.align 2, 0
_0808C2FC: .4byte gUnknown_08A173CC
_0808C300:
	bl nullsub_8
_0808C304:
	lsls r1, r5, #5
	adds r0, r4, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808C314
sub_808C314: @ 0x0808C314
	push {lr}
	ldr r0, _0808C330  @ gUnknown_0202BCB0
	movs r2, #0x14
	ldrsh r1, [r0, r2]
	lsls r1, r1, #4
	movs r2, #0xc
	ldrsh r0, [r0, r2]
	subs r1, r1, r0
	cmp r1, #0x6f
	ble _0808C334
	movs r0, #1
	negs r0, r0
	b _0808C336
	.align 2, 0
_0808C330: .4byte gUnknown_0202BCB0
_0808C334:
	movs r0, #1
_0808C336:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808C33C
sub_808C33C: @ 0x0808C33C
	push {lr}
	ldr r0, _0808C354  @ gUnknown_0202BCB0
	movs r2, #0x14
	ldrsh r1, [r0, r2]
	lsls r1, r1, #4
	movs r2, #0xc
	ldrsh r0, [r0, r2]
	subs r1, r1, r0
	cmp r1, #0x70
	bgt _0808C358
	movs r0, #1
	b _0808C35C
	.align 2, 0
_0808C354: .4byte gUnknown_0202BCB0
_0808C358:
	movs r0, #1
	negs r0, r0
_0808C35C:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808C360
sub_808C360: @ 0x0808C360
	ldr r2, _0808C380  @ 0x00002120
	adds r0, r2, #0
	strh r0, [r1]
	ldr r3, _0808C384  @ 0x00002121
	adds r0, r3, #0
	strh r0, [r1, #2]
	movs r2, #0
	strh r2, [r1, #4]
	strh r2, [r1, #6]
	adds r3, #0x1d
	adds r0, r3, #0
	strh r0, [r1, #8]
	strh r2, [r1, #0xa]
	strh r2, [r1, #0xc]
	bx lr
	.align 2, 0
_0808C380: .4byte 0x00002120
_0808C384: .4byte 0x00002121

	THUMB_FUNC_START sub_808C388
sub_808C388: @ 0x0808C388
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r4, _0808C3AC  @ 0x0000016F
	cmp r1, #0
	beq _0808C448
	adds r1, #0x30
	ldrb r0, [r1]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r6, r1, #0
	cmp r0, #0xd
	bhi _0808C41C
	lsls r0, r0, #2
	ldr r1, _0808C3B0  @ _0808C3B4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808C3AC: .4byte 0x0000016F
_0808C3B0: .4byte _0808C3B4
_0808C3B4: @ jump table
	.4byte _0808C448 @ case 0
	.4byte _0808C3EC @ case 1
	.4byte _0808C3F0 @ case 2
	.4byte _0808C3F4 @ case 3
	.4byte _0808C3FA @ case 4
	.4byte _0808C400 @ case 5
	.4byte _0808C406 @ case 6
	.4byte _0808C40C @ case 7
	.4byte _0808C412 @ case 8
	.4byte _0808C448 @ case 9
	.4byte _0808C448 @ case 10
	.4byte _0808C418 @ case 11
	.4byte _0808C41C @ case 12
	.4byte _0808C418 @ case 13
_0808C3EC:
	movs r2, #0
	b _0808C41C
_0808C3F0:
	movs r2, #0xa0
	b _0808C41C
_0808C3F4:
	movs r2, #0xa0
	lsls r2, r2, #1
	b _0808C41C
_0808C3FA:
	movs r2, #0xf0
	lsls r2, r2, #1
	b _0808C41C
_0808C400:
	movs r2, #0xa0
	lsls r2, r2, #2
	b _0808C41C
_0808C406:
	movs r2, #0xc8
	lsls r2, r2, #2
	b _0808C41C
_0808C40C:
	movs r2, #0xf0
	lsls r2, r2, #2
	b _0808C41C
_0808C412:
	movs r2, #0x8c
	lsls r2, r2, #3
	b _0808C41C
_0808C418:
	movs r2, #0xa0
	lsls r2, r2, #3
_0808C41C:
	ldr r0, _0808C450  @ gUnknown_08A16DEC
	adds r0, r2, r0
	ldr r1, _0808C454  @ 0x06002DE0
	movs r2, #0x28
	bl CpuFastSet
	strh r4, [r5]
	adds r4, #1
	strh r4, [r5, #2]
	adds r4, #1
	strh r4, [r5, #4]
	adds r4, #1
	strh r4, [r5, #6]
	adds r4, #1
	strh r4, [r5, #8]
	movs r0, #0
	strh r0, [r5, #0xa]
	ldrb r0, [r6]
	lsrs r0, r0, #4
	ldr r1, _0808C458  @ 0x00001128
	adds r0, r0, r1
	strh r0, [r5, #0xc]
_0808C448:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808C450: .4byte gUnknown_08A16DEC
_0808C454: .4byte 0x06002DE0
_0808C458: .4byte 0x00001128

	THUMB_FUNC_START DrawMinimugBoxMaybe
DrawMinimugBoxMaybe: @ 0x0808C45C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r0, #0x44
	ldrh r2, [r0]
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0xa
	bne _0808C47A
	movs r2, #0
_0808C47A:
	lsls r1, r2, #0x10
	asrs r2, r1, #0x10
	movs r0, #0x3f
	ands r0, r2
	adds r6, r1, #0
	cmp r0, #0
	bne _0808C518
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	beq _0808C4A0
	ldr r0, [r4, #0x40]
	adds r1, r5, #0
	bl sub_808C388
	movs r0, #1
	bl BG_EnableSyncByMask
	b _0808C518
_0808C4A0:
	adds r0, r5, #0
	bl GetUnitCurrentHp
	cmp r0, #0x63
	ble _0808C4B2
	movs r0, #0xff
	bl StoreNumberStringOrDashesToSmallBuffer
	b _0808C4BC
_0808C4B2:
	adds r0, r5, #0
	bl GetUnitCurrentHp
	bl StoreNumberStringOrDashesToSmallBuffer
_0808C4BC:
	ldr r1, _0808C4E4  @ gUnknown_02028E44
	ldrb r0, [r1, #6]
	subs r0, #0x30
	adds r2, r4, #0
	adds r2, #0x51
	strb r0, [r2]
	ldrb r0, [r1, #7]
	subs r0, #0x30
	adds r1, r4, #0
	adds r1, #0x52
	strb r0, [r1]
	adds r0, r5, #0
	bl GetUnitMaxHp
	cmp r0, #0x63
	ble _0808C4E8
	movs r0, #0xff
	bl StoreNumberStringOrDashesToSmallBuffer
	b _0808C4F2
	.align 2, 0
_0808C4E4: .4byte gUnknown_02028E44
_0808C4E8:
	adds r0, r5, #0
	bl GetUnitMaxHp
	bl StoreNumberStringOrDashesToSmallBuffer
_0808C4F2:
	ldr r1, _0808C5C4  @ gUnknown_02028E44
	ldrb r0, [r1, #6]
	subs r0, #0x30
	adds r2, r4, #0
	adds r2, #0x53
	strb r0, [r2]
	ldrb r0, [r1, #7]
	subs r0, #0x30
	adds r1, r4, #0
	adds r1, #0x54
	strb r0, [r1]
	ldr r1, [r4, #0x40]
	adds r0, r4, #0
	adds r2, r5, #0
	bl sub_808C360
	movs r0, #1
	bl BG_EnableSyncByMask
_0808C518:
	adds r0, r4, #0
	adds r0, #0x55
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0808C5BA
	asrs r0, r6, #0x10
	movs r1, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0808C53E
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0808C5BA
_0808C53E:
	adds r0, r4, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r5, r0, #3
	adds r7, r5, #0
	adds r7, #0x11
	adds r0, r4, #0
	adds r0, #0x48
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r6, r0, #3
	adds r1, r4, #0
	adds r1, #0x51
	ldrb r0, [r1]
	cmp r0, #0xf0
	beq _0808C570
	ldr r2, _0808C5C8  @ gUnknown_08590F44
	adds r3, r0, #0
	ldr r0, _0808C5CC  @ 0x000082E0
	adds r3, r3, r0
	adds r0, r7, #0
	adds r1, r6, #0
	bl CallARM_PushToSecondaryOAM
_0808C570:
	adds r0, r5, #0
	adds r0, #0x18
	ldr r7, _0808C5C8  @ gUnknown_08590F44
	adds r1, r4, #0
	adds r1, #0x52
	ldrb r3, [r1]
	ldr r1, _0808C5CC  @ 0x000082E0
	mov r8, r1
	add r3, r8
	adds r1, r6, #0
	adds r2, r7, #0
	bl CallARM_PushToSecondaryOAM
	adds r1, r4, #0
	adds r1, #0x53
	ldrb r0, [r1]
	cmp r0, #0xf0
	beq _0808C5A6
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r3, [r1]
	ldr r1, _0808C5CC  @ 0x000082E0
	adds r3, r3, r1
	adds r1, r6, #0
	adds r2, r7, #0
	bl CallARM_PushToSecondaryOAM
_0808C5A6:
	adds r0, r5, #0
	adds r0, #0x30
	adds r1, r4, #0
	adds r1, #0x54
	ldrb r3, [r1]
	add r3, r8
	adds r1, r6, #0
	adds r2, r7, #0
	bl CallARM_PushToSecondaryOAM
_0808C5BA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808C5C4: .4byte gUnknown_02028E44
_0808C5C8: .4byte gUnknown_08590F44
_0808C5CC: .4byte 0x000082E0

	THUMB_FUNC_START InitMinimugBoxMaybe
InitMinimugBoxMaybe: @ 0x0808C5D0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	mov r8, r1
	movs r0, #0
	mov sl, r0
	str r0, [sp, #4]
	ldr r1, _0808C688  @ gBmFrameTmap0
	mov r9, r1
	ldr r2, _0808C68C  @ 0x01000060
	add r0, sp, #4
	bl CpuFastSet
	mov r1, r8
	ldr r0, [r1]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r6, r0, #0
	movs r0, #0x38
	adds r1, r6, #0
	bl GetStringTextCenteredPos
	adds r5, r0, #0
	adds r4, r7, #0
	adds r4, #0x2c
	adds r0, r4, #0
	bl Text_Clear
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #5
	bl Text_SetParameters
	adds r0, r4, #0
	adds r1, r6, #0
	bl Text_AppendString
	mov r1, r9
	adds r1, #0x4a
	adds r0, r4, #0
	bl Text_Draw
	mov r0, r8
	bl GetUnitMiniPortraitId
	adds r2, r0, #0
	mov r1, r8
	ldr r0, [r1, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0808C646
	adds r2, #1
_0808C646:
	mov r1, r9
	adds r1, #0x42
	mov r0, sl
	str r0, [sp]
	adds r0, r2, #0
	movs r2, #0xf0
	movs r3, #4
	bl sub_8005988
	mov r0, r9
	adds r0, #0xca
	str r0, [r7, #0x40]
	adds r0, r7, #0
	adds r0, #0x44
	mov r1, sl
	strh r1, [r0]
	ldr r2, _0808C690  @ gUnknown_08A01828
	adds r1, r7, #0
	adds r1, #0x50
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0808C694
	adds r2, r7, #0
	adds r2, #0x46
	movs r0, #5
	b _0808C69A
	.align 2, 0
_0808C688: .4byte gBmFrameTmap0
_0808C68C: .4byte 0x01000060
_0808C690: .4byte gUnknown_08A01828
_0808C694:
	adds r2, r7, #0
	adds r2, #0x46
	movs r0, #0x17
_0808C69A:
	strh r0, [r2]
	ldr r0, _0808C6B8  @ gUnknown_08A01828
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #3
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _0808C6BC
	adds r1, r7, #0
	adds r1, #0x48
	movs r0, #3
	b _0808C6C2
	.align 2, 0
_0808C6B8: .4byte gUnknown_08A01828
_0808C6BC:
	adds r1, r7, #0
	adds r1, #0x48
	movs r0, #0x11
_0808C6C2:
	strh r0, [r1]
	adds r0, r7, #0
	mov r1, r8
	bl DrawMinimugBoxMaybe
	ldr r0, _0808C704  @ gUnknown_02003E36
	movs r2, #0x8a
	lsls r2, r2, #5
	mov r1, r8
	bl sub_808BC94
	ldr r0, _0808C708  @ gUnknown_0200422C
	ldr r1, _0808C70C  @ gUnknown_08A17484
	movs r2, #0xc0
	lsls r2, r2, #6
	bl CallARM_FillTileRect
	mov r1, r8
	movs r0, #0xb
	ldrsb r0, [r1, r0]
	movs r1, #0xc0
	ands r0, r1
	movs r1, #3
	bl sub_808C2CC
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808C704: .4byte gUnknown_02003E36
_0808C708: .4byte gUnknown_0200422C
_0808C70C: .4byte gUnknown_08A17484

	THUMB_FUNC_START sub_808C710
sub_808C710: @ 0x0808C710
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	bl GetCameraMovementSpeedMaybe
	adds r1, r0, #0
	movs r2, #1
	cmp r4, #5
	ble _0808C734
	cmp r4, #0xb
	bgt _0808C736
	ldr r0, _0808C74C  @ gUnknown_08A01828
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #5
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _0808C736
_0808C734:
	movs r2, #4
_0808C736:
	cmp r5, #1
	bgt _0808C73C
	subs r2, #1
_0808C73C:
	cmp r5, #0x16
	ble _0808C742
	adds r2, #1
_0808C742:
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0808C74C: .4byte gUnknown_08A01828

	THUMB_FUNC_START sub_808C750
sub_808C750: @ 0x0808C750
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	str r1, [sp]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	ldr r2, _0808C8C4  @ gUnknown_0202BCB0
	movs r3, #0xc
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	cmp r0, #0
	bge _0808C774
	adds r0, #7
_0808C774:
	asrs r0, r0, #3
	mov sl, r0
	ldr r1, [sp]
	movs r0, #0x11
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	movs r3, #0xe
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	cmp r0, #0
	bge _0808C78C
	adds r0, #7
_0808C78C:
	asrs r4, r0, #3
	mov r0, sl
	adds r1, r4, #0
	bl sub_808C710
	mov r8, r0
	ldr r0, _0808C8C8  @ gUnknown_08A01860
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	add sl, r0
	ldr r0, _0808C8CC  @ gUnknown_08A01866
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r4, r4, r0
	adds r0, r7, #0
	adds r0, #0x3c
	mov r1, sl
	strb r1, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r1, r7, #0
	adds r1, #0x3e
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #5
	strb r0, [r1]
	ldr r2, [sp]
	ldr r0, [r2]
	ldrh r0, [r0]
	bl GetStringFromIndex
	mov r9, r0
	movs r0, #0x38
	mov r1, r9
	bl GetStringTextCenteredPos
	adds r6, r0, #0
	adds r5, r7, #0
	adds r5, #0x2c
	adds r0, r5, #0
	bl Text_Clear
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #5
	bl Text_SetParameters
	adds r0, r5, #0
	mov r1, r9
	bl Text_AppendString
	ldr r0, _0808C8D0  @ gUnknown_08A0184E
	add r0, r8
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r1, r4, r1
	lsls r1, r1, #5
	ldr r0, _0808C8D4  @ gUnknown_08A01848
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	add r0, sl
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r6, _0808C8D8  @ gBG0TilemapBuffer
	adds r1, r1, r6
	adds r0, r5, #0
	bl Text_Draw
	adds r1, r4, #3
	lsls r0, r1, #5
	adds r0, #1
	add r0, sl
	lsls r0, r0, #1
	adds r0, r0, r6
	str r0, [r7, #0x40]
	adds r0, r7, #0
	adds r0, #0x44
	movs r3, #0
	strh r3, [r0]
	mov r0, sl
	adds r0, #1
	adds r2, r7, #0
	adds r2, #0x46
	strh r0, [r2]
	adds r0, r7, #0
	adds r0, #0x48
	strh r1, [r0]
	adds r0, r7, #0
	ldr r1, [sp]
	bl DrawMinimugBoxMaybe
	lsls r0, r4, #5
	add r0, sl
	lsls r0, r0, #1
	ldr r5, _0808C8DC  @ gBG1TilemapBuffer
	adds r0, r0, r5
	ldr r1, _0808C8E0  @ gUnknown_08A0186C
	mov r2, r8
	lsls r2, r2, #2
	mov r8, r2
	add r1, r8
	ldr r1, [r1]
	movs r6, #0xc4
	lsls r6, r6, #6
	adds r2, r6, #0
	bl CallARM_FillTileRect
	adds r0, r4, #1
	lsls r0, r0, #5
	add r0, sl
	lsls r0, r0, #1
	adds r0, r0, r5
	ldr r1, _0808C8E4  @ gUnknown_08A17604
	adds r2, r6, #0
	bl CallARM_FillTileRect
	adds r4, #4
	lsls r4, r4, #5
	add r4, sl
	lsls r4, r4, #1
	adds r4, r4, r5
	ldr r0, _0808C8E8  @ gUnknown_08A01884
	add r8, r0
	mov r3, r8
	ldr r1, [r3]
	adds r0, r4, #0
	adds r2, r6, #0
	bl CallARM_FillTileRect
	movs r0, #3
	bl BG_EnableSyncByMask
	ldr r1, [sp]
	movs r0, #0xb
	ldrsb r0, [r1, r0]
	movs r1, #0xc0
	ands r0, r1
	movs r1, #3
	bl sub_808C2CC
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808C8C4: .4byte gUnknown_0202BCB0
_0808C8C8: .4byte gUnknown_08A01860
_0808C8CC: .4byte gUnknown_08A01866
_0808C8D0: .4byte gUnknown_08A0184E
_0808C8D4: .4byte gUnknown_08A01848
_0808C8D8: .4byte gBG0TilemapBuffer
_0808C8DC: .4byte gBG1TilemapBuffer
_0808C8E0: .4byte gUnknown_08A0186C
_0808C8E4: .4byte gUnknown_08A17604
_0808C8E8: .4byte gUnknown_08A01884

	THUMB_FUNC_START sub_808C8EC
sub_808C8EC: @ 0x0808C8EC
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	ldrh r1, [r2, #0x3e]
	movs r0, #0xa1
	lsls r0, r0, #3
	cmp r1, r0
	bne _0808C956
	adds r7, r2, #0
	adds r7, #0x3d
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsls r0, r0, #5
	adds r5, r2, #0
	adds r5, #0x3c
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _0808C95C  @ gBG0TilemapBuffer
	adds r0, r0, r1
	adds r6, r2, #0
	adds r6, #0x3e
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r4, r2, #0
	adds r4, #0x3f
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsls r0, r0, #5
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _0808C960  @ gBG1TilemapBuffer
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r6, r1]
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #3
	bl BG_EnableSyncByMask
	movs r0, #0
	strb r0, [r6]
	strb r0, [r4]
_0808C956:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808C95C: .4byte gBG0TilemapBuffer
_0808C960: .4byte gBG1TilemapBuffer

	THUMB_FUNC_START sub_808C964
sub_808C964: @ 0x0808C964
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	ldr r0, _0808CA48  @ gUnknown_0202BCB0
	mov r9, r0
	movs r1, #0x16
	ldrsh r0, [r0, r1]
	ldr r1, _0808CA4C  @ gBmMapTerrain
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	mov r2, r9
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r7, [r0]
	ldr r0, _0808CA50  @ gUnknown_02003FAC
	mov r8, r0
	movs r1, #0xe
	movs r2, #7
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _0808CA54  @ gUnknown_020044AC
	movs r1, #0xe
	movs r2, #7
	movs r3, #0
	bl TileMap_FillRect
	adds r0, r7, #0
	bl GetTerrainName
	adds r5, r0, #0
	movs r0, #0x28
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r6, r0, #0
	adds r4, #0x2c
	adds r0, r4, #0
	bl Text_Clear
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #0
	bl Text_SetParameters
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_AppendString
	mov r1, r8
	adds r1, #0x82
	adds r0, r4, #0
	bl Text_Draw
	movs r6, #0x81
	lsls r6, r6, #1
	add r6, r8
	ldr r1, _0808CA58  @ gUnknown_08A1768C
	movs r2, #0x84
	lsls r2, r2, #6
	adds r0, r6, #0
	bl CallARM_FillTileRect
	ldr r0, _0808CA5C  @ gUnknown_0880B90C
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _0808CA3A
	ldr r0, _0808CA60  @ gUnknown_0880C4BA
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl StoreNumberStringToSmallBuffer
	movs r0, #0x85
	lsls r0, r0, #1
	add r0, r8
	ldr r4, _0808CA64  @ gUnknown_02028E44+7
	ldr r5, _0808CA68  @ 0x00002128
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #2
	bl sub_8013138
	ldr r0, _0808CA6C  @ gUnknown_0880C479
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl StoreNumberStringToSmallBuffer
	movs r0, #0xa5
	lsls r0, r0, #1
	add r0, r8
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #2
	bl sub_8013138
_0808CA3A:
	cmp r7, #0x29
	bgt _0808CA70
	cmp r7, #0x27
	bge _0808CAD8
	cmp r7, #0x1b
	beq _0808CA74
	b _0808CB06
	.align 2, 0
_0808CA48: .4byte gUnknown_0202BCB0
_0808CA4C: .4byte gBmMapTerrain
_0808CA50: .4byte gUnknown_02003FAC
_0808CA54: .4byte gUnknown_020044AC
_0808CA58: .4byte gUnknown_08A1768C
_0808CA5C: .4byte gUnknown_0880B90C
_0808CA60: .4byte gUnknown_0880C4BA
_0808CA64: .4byte gUnknown_02028E44+7
_0808CA68: .4byte 0x00002128
_0808CA6C: .4byte gUnknown_0880C479
_0808CA70:
	cmp r7, #0x33
	bne _0808CB06
_0808CA74:
	ldr r4, _0808CAA8  @ gUnknown_020040AE
	ldr r1, _0808CAAC  @ gUnknown_08A176A4
	movs r2, #0x84
	lsls r2, r2, #6
	adds r0, r4, #0
	bl CallARM_FillTileRect
	ldr r1, _0808CAB0  @ gUnknown_0202BCB0
	movs r2, #0x14
	ldrsh r0, [r1, r2]
	movs r3, #0x16
	ldrsh r1, [r1, r3]
	bl GetObstacleHpAt
	adds r6, r0, #0
	cmp r6, #0x64
	bne _0808CAB8
	adds r0, r4, #0
	adds r0, #0x46
	ldr r1, _0808CAB4  @ gUnknown_08A176B4
	movs r2, #0x80
	lsls r2, r2, #1
	bl CallARM_FillTileRect
	b _0808CB06
	.align 2, 0
_0808CAA8: .4byte gUnknown_020040AE
_0808CAAC: .4byte gUnknown_08A176A4
_0808CAB0: .4byte gUnknown_0202BCB0
_0808CAB4: .4byte gUnknown_08A176B4
_0808CAB8:
	adds r0, r6, #0
	bl StoreNumberStringToSmallBuffer
	adds r0, r4, #0
	adds r0, #0x48
	ldr r1, _0808CAD0  @ gUnknown_02028E44+7
	ldr r2, _0808CAD4  @ 0x00002128
	movs r3, #2
	bl sub_8013138
	b _0808CB06
	.align 2, 0
_0808CAD0: .4byte gUnknown_02028E44+7
_0808CAD4: .4byte 0x00002128
_0808CAD8:
	ldr r1, _0808CB20  @ gUnknown_08A1769C
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r6, #0
	bl CallARM_FillTileRect
	mov r1, r9
	movs r2, #0x14
	ldrsh r0, [r1, r2]
	movs r3, #0x16
	ldrsh r1, [r1, r3]
	bl GetObstacleHpAt
	bl StoreNumberStringToSmallBuffer
	movs r0, #0x85
	lsls r0, r0, #1
	add r0, r8
	ldr r1, _0808CB24  @ gUnknown_02028E44+7
	ldr r2, _0808CB28  @ 0x00002128
	movs r3, #2
	bl sub_8013138
_0808CB06:
	ldr r0, _0808CB2C  @ gUnknown_020044EC
	ldr r1, _0808CB30  @ gUnknown_08A1742C
	movs r2, #0x80
	lsls r2, r2, #5
	bl CallARM_FillTileRect
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808CB20: .4byte gUnknown_08A1769C
_0808CB24: .4byte gUnknown_02028E44+7
_0808CB28: .4byte 0x00002128
_0808CB2C: .4byte gUnknown_020044EC
_0808CB30: .4byte gUnknown_08A1742C

	THUMB_FUNC_START sub_808CB34
sub_808CB34: @ 0x0808CB34
	push {lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	subs r1, #1
	movs r0, #0
	strb r0, [r1]
	str r0, [r2, #0x58]
	subs r1, #6
	movs r0, #1
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2c
	movs r1, #5
	bl Text_Allocate
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808CB5C
sub_808CB5C: @ 0x0808CB5C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	bl GetCameraMovementSpeedMaybe
	adds r1, r5, #0
	adds r1, #0x50
	strb r0, [r1]
	ldr r0, _0808CBF0  @ gUnknown_08A01828
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #0
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_808BBAC
	adds r6, r0, #0
	ldr r0, _0808CBF4  @ gUnknown_08A0190C
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _0808CBAA
	adds r1, r4, #0
	adds r1, #0x57
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt _0808CBAA
	cmp r0, r6
	beq _0808CBE8
_0808CBAA:
	ldr r0, _0808CBF8  @ gUnknown_08A019E4
	bl Proc_Find
	cmp r4, #0
	beq _0808CBC4
	adds r1, r0, #0
	adds r1, #0x57
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt _0808CBC4
	cmp r0, r6
	beq _0808CBE8
_0808CBC4:
	adds r0, r5, #0
	adds r0, #0x57
	strb r6, [r0]
	adds r0, r5, #0
	bl sub_808C964
	ldr r0, _0808CBFC  @ gUnknown_0202BCB0
	ldrh r1, [r0, #0x14]
	adds r2, r5, #0
	adds r2, #0x4e
	strb r1, [r2]
	ldrh r0, [r0, #0x16]
	adds r1, r5, #0
	adds r1, #0x4f
	strb r0, [r1]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_0808CBE8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808CBF0: .4byte gUnknown_08A01828
_0808CBF4: .4byte gUnknown_08A0190C
_0808CBF8: .4byte gUnknown_08A019E4
_0808CBFC: .4byte gUnknown_0202BCB0

	THUMB_FUNC_START sub_808CC00
sub_808CC00: @ 0x0808CC00
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r3, r4, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4c
	strb r0, [r2]
	movs r0, #0x4f
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	ldr r1, _0808CC80  @ gUnknown_0202BCB0
	ldrh r0, [r1, #0x14]
	strb r0, [r3]
	ldrh r0, [r1, #0x16]
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3]
	ldrh r2, [r2]
	cmp r0, r2
	beq _0808CC9A
	ldr r0, _0808CC84  @ gUnknown_0859A548
	bl Proc_Find
	cmp r0, #0
	bne _0808CC8C
	bl GetCameraMovementSpeedMaybe
	adds r2, r0, #0
	adds r0, r4, #0
	adds r0, #0x50
	movs r3, #0
	ldrsb r3, [r0, r3]
	cmp r2, r3
	beq _0808CC70
	ldr r1, _0808CC88  @ gUnknown_08A01828
	lsls r0, r2, #3
	adds r5, r0, r1
	lsls r0, r3, #3
	adds r2, r0, r1
	movs r1, #0
	ldrsb r1, [r5, r1]
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne _0808CC8C
	movs r1, #1
	ldrsb r1, [r5, r1]
	movs r0, #1
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne _0808CC8C
_0808CC70:
	adds r0, r4, #0
	bl sub_808C964
	adds r0, r4, #0
	bl sub_808C288
	b _0808CC9A
	.align 2, 0
_0808CC80: .4byte gUnknown_0202BCB0
_0808CC84: .4byte gUnknown_0859A548
_0808CC88: .4byte gUnknown_08A01828
_0808CC8C:
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0808CC9A:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808CCA0
sub_808CCA0: @ 0x0808CCA0
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2c
	movs r1, #7
	bl Text_Allocate
	movs r1, #0
	str r1, [r4, #0x58]
	adds r0, r4, #0
	adds r0, #0x56
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START Loop6CUI1_Hidden
Loop6CUI1_Hidden: @ 0x0808CCC8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r2, _0808CD64  @ gUnknown_0202BCB0
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, _0808CD68  @ gBmMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r6, r0, #0
	cmp r6, #0
	beq _0808CD5C
	adds r1, r4, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	bl GetCameraMovementSpeedMaybe
	adds r1, r4, #0
	adds r1, #0x50
	strb r0, [r1]
	ldr r0, _0808CD6C  @ gUnknown_08A01828
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #2
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #3]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_808BBAC
	adds r5, r0, #0
	ldr r0, _0808CD70  @ gUnknown_08A018AC
	bl Proc_Find
	cmp r0, #0
	beq _0808CD36
	adds r1, r0, #0
	adds r1, #0x57
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt _0808CD36
	cmp r0, r5
	beq _0808CD5C
_0808CD36:
	adds r0, r4, #0
	adds r0, #0x57
	strb r5, [r0]
	ldr r0, _0808CD64  @ gUnknown_0202BCB0
	ldrh r1, [r0, #0x14]
	adds r2, r4, #0
	adds r2, #0x4e
	strb r1, [r2]
	ldrh r0, [r0, #0x16]
	adds r1, r4, #0
	adds r1, #0x4f
	strb r0, [r1]
	adds r0, r4, #0
	adds r1, r6, #0
	bl InitMinimugBoxMaybe
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0808CD5C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808CD64: .4byte gUnknown_0202BCB0
_0808CD68: .4byte gBmMapUnit
_0808CD6C: .4byte gUnknown_08A01828
_0808CD70: .4byte gUnknown_08A018AC

	THUMB_FUNC_START Loop6CUI1_Displayed
Loop6CUI1_Displayed: @ 0x0808CD74
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r6, _0808CE2C  @ gUnknown_0202BCB0
	movs r1, #0x16
	ldrsh r0, [r6, r1]
	ldr r1, _0808CE30  @ gBmMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0x14
	ldrsh r1, [r6, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r7, r0, #0
	adds r4, r5, #0
	adds r4, #0x44
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	adds r0, r5, #0
	adds r1, r7, #0
	bl DrawMinimugBoxMaybe
	ldrh r1, [r4]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _0808CDB8
	adds r0, r5, #0
	bl sub_808C234
_0808CDB8:
	adds r3, r5, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r1, r5, #0
	adds r1, #0x4c
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x4f
	ldrb r0, [r4]
	adds r2, r5, #0
	adds r2, #0x4d
	strb r0, [r2]
	ldrh r0, [r6, #0x14]
	strb r0, [r3]
	ldrh r0, [r6, #0x16]
	strb r0, [r4]
	ldrh r0, [r3]
	ldrh r1, [r1]
	cmp r0, r1
	beq _0808CE4A
	cmp r7, #0
	beq _0808CE3C
	ldr r0, _0808CE34  @ gUnknown_0859A548
	bl Proc_Find
	cmp r0, #0
	bne _0808CE3C
	bl GetCameraMovementSpeedMaybe
	adds r2, r0, #0
	adds r0, r5, #0
	adds r0, #0x50
	movs r3, #0
	ldrsb r3, [r0, r3]
	cmp r2, r3
	beq _0808CE22
	ldr r1, _0808CE38  @ gUnknown_08A01828
	lsls r0, r2, #3
	adds r4, r0, r1
	lsls r0, r3, #3
	adds r2, r0, r1
	movs r1, #2
	ldrsb r1, [r4, r1]
	movs r0, #2
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne _0808CE3C
	movs r1, #3
	ldrsb r1, [r4, r1]
	movs r0, #3
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne _0808CE3C
_0808CE22:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_GotoLabel
	b _0808CE4A
	.align 2, 0
_0808CE2C: .4byte gUnknown_0202BCB0
_0808CE30: .4byte gBmMapUnit
_0808CE34: .4byte gUnknown_0859A548
_0808CE38: .4byte gUnknown_08A01828
_0808CE3C:
	adds r1, r5, #0
	adds r1, #0x56
	movs r0, #1
	strb r0, [r1]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_0808CE4A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808CE50
sub_808CE50: @ 0x0808CE50
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _0808CE80  @ gUnknown_0202BCB0
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, _0808CE84  @ gBmMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	bne _0808CE88
	adds r0, r4, #0
	movs r1, #3
	bl Proc_GotoLabel
	b _0808CE94
	.align 2, 0
_0808CE80: .4byte gUnknown_0202BCB0
_0808CE84: .4byte gBmMapUnit
_0808CE88:
	adds r0, r4, #0
	bl InitMinimugBoxMaybe
	adds r0, r4, #0
	bl sub_808C234
_0808CE94:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START Init6CUI2
Init6CUI2: @ 0x0808CE9C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	movs r1, #7
	bl Text_Allocate
	adds r0, r4, #0
	adds r0, #0x4b
	movs r1, #0
	strb r1, [r0]
	adds r0, #0xa
	strb r1, [r0]
	str r1, [r4, #0x58]
	subs r0, #0x17
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #0x17
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START Loop6CUI2
Loop6CUI2: @ 0x0808CEC8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x4b
	ldrb r0, [r5]
	adds r3, r4, #0
	adds r3, #0x4a
	strb r0, [r3]
	ldr r2, _0808CF0C  @ gUnknown_0202BCB0
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, _0808CF10  @ gBmMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r6, #0x14
	ldrsh r1, [r2, r6]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r5]
	ldrb r1, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	beq _0808CF14
	cmp r1, #0
	beq _0808CF14
	adds r0, r4, #0
	bl sub_808C8EC
	movs r0, #0
	str r0, [r4, #0x58]
	b _0808CFBC
	.align 2, 0
_0808CF0C: .4byte gUnknown_0202BCB0
_0808CF10: .4byte gBmMapUnit
_0808CF14:
	adds r0, r4, #0
	adds r0, #0x4b
	ldrb r1, [r0]
	adds r6, r0, #0
	cmp r1, #0
	beq _0808CFBC
	ldr r0, _0808CF64  @ gUnknown_0859A548
	bl Proc_Find
	cmp r0, #0
	bne _0808CFBC
	ldr r0, _0808CF68  @ gUnknown_08A018AC
	bl Proc_Find
	adds r5, r0, #0
	cmp r5, #0
	beq _0808CF42
	adds r0, #0x55
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0808CF58
_0808CF42:
	ldr r0, _0808CF6C  @ gUnknown_08A019E4
	bl Proc_Find
	cmp r0, #0
	beq _0808CF70
	adds r0, #0x55
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0808CF70
_0808CF58:
	ldr r0, [r4, #0x58]
	cmp r0, #3
	bgt _0808CFBC
	adds r0, #1
	str r0, [r4, #0x58]
	b _0808CFBC
	.align 2, 0
_0808CF64: .4byte gUnknown_0859A548
_0808CF68: .4byte gUnknown_08A018AC
_0808CF6C: .4byte gUnknown_08A019E4
_0808CF70:
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	cmp r0, #7
	ble _0808CFBC
	cmp r0, #8
	bne _0808CF8E
	ldrb r0, [r6]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_808C750
	b _0808CFBC
_0808CF8E:
	adds r1, r4, #0
	adds r1, #0x44
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	cmp r5, #0
	beq _0808CFA6
	adds r0, r5, #0
	adds r0, #0x55
	ldrb r0, [r0]
	adds r1, #0x11
	b _0808CFAC
_0808CFA6:
	adds r1, r4, #0
	adds r1, #0x55
	movs r0, #0
_0808CFAC:
	strb r0, [r1]
	ldrb r0, [r6]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r4, #0
	bl DrawMinimugBoxMaybe
_0808CFBC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START InitPlayerPhaseInterfaceMaybe
InitPlayerPhaseInterfaceMaybe: @ 0x0808CFC4
	push {r4, lr}
	sub sp, #4
	ldr r2, _0808D0A8  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r2, #0x36
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0xd
	movs r2, #3
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #0
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #0
	bl sub_8001F48
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	ldr r0, _0808D0AC  @ gUnknown_08A167C8
	ldr r1, _0808D0B0  @ 0x06002000
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808D0B4  @ gUnknown_08A16D6C
	ldr r1, _0808D0B8  @ 0x06015C00
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808D0BC  @ 0x06002EA0
	ldr r1, _0808D0C0  @ 0x06015D40
	movs r2, #8
	bl CpuFastSet
	ldr r0, _0808D0C4  @ gPaletteBuffer
	movs r1, #0xc0
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r0, #1
	movs r1, #2
	bl LoadIconPalette
	bl sub_8003D20
	ldr r4, _0808D0C8  @ gUnknown_0202BCF0
	adds r0, r4, #0
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808D092
	ldr r0, _0808D0CC  @ gUnknown_08A018AC
	movs r1, #3
	bl Proc_Create
_0808D092:
	ldr r0, _0808D0D0  @ gUnknown_0202BCB0
	ldrb r1, [r0, #4]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0808D0D8
	ldr r0, _0808D0D4  @ gUnknown_08A01A44
	movs r1, #3
	bl Proc_Create
	b _0808D0F8
	.align 2, 0
_0808D0A8: .4byte gLCDControlBuffer
_0808D0AC: .4byte gUnknown_08A167C8
_0808D0B0: .4byte 0x06002000
_0808D0B4: .4byte gUnknown_08A16D6C
_0808D0B8: .4byte 0x06015C00
_0808D0BC: .4byte 0x06002EA0
_0808D0C0: .4byte 0x06015D40
_0808D0C4: .4byte gPaletteBuffer
_0808D0C8: .4byte gUnknown_0202BCF0
_0808D0CC: .4byte gUnknown_08A018AC
_0808D0D0: .4byte gUnknown_0202BCB0
_0808D0D4: .4byte gUnknown_08A01A44
_0808D0D8:
	adds r0, r4, #0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	bne _0808D0F8
	movs r0, #0x66
	bl CheckEventId
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808D0F8
	ldr r0, _0808D12C  @ gUnknown_08A019E4
	movs r1, #3
	bl Proc_Create
_0808D0F8:
	ldr r0, _0808D130  @ gUnknown_0202BCF0
	adds r4, r0, #0
	adds r4, #0x40
	ldrb r0, [r4]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1e
	cmp r0, #0
	bne _0808D110
	ldr r0, _0808D134  @ gUnknown_08A0190C
	movs r1, #3
	bl Proc_Create
_0808D110:
	ldrb r0, [r4]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1e
	cmp r0, #1
	bne _0808D122
	ldr r0, _0808D138  @ gUnknown_08A01994
	movs r1, #3
	bl Proc_Create
_0808D122:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808D12C: .4byte gUnknown_08A019E4
_0808D130: .4byte gUnknown_0202BCF0
_0808D134: .4byte gUnknown_08A0190C
_0808D138: .4byte gUnknown_08A01994

	THUMB_FUNC_START New6CPPInterfaceConstructor
New6CPPInterfaceConstructor: @ 0x0808D13C
	push {lr}
	ldr r0, _0808D14C  @ gUnknown_08A019C4
	movs r1, #3
	bl Proc_Create
	pop {r0}
	bx r0
	.align 2, 0
_0808D14C: .4byte gUnknown_08A019C4

	THUMB_FUNC_START DeletePlayerPhaseInterface6Cs
DeletePlayerPhaseInterface6Cs: @ 0x0808D150
	push {lr}
	ldr r0, _0808D17C  @ gUnknown_08A0190C
	bl Proc_DeleteAllWithScript
	ldr r0, _0808D180  @ gUnknown_08A01994
	bl Proc_DeleteAllWithScript
	ldr r0, _0808D184  @ gUnknown_08A018AC
	bl Proc_DeleteAllWithScript
	ldr r0, _0808D188  @ gUnknown_08A019E4
	bl Proc_DeleteAllWithScript
	ldr r0, _0808D18C  @ gUnknown_08A01A44
	bl Proc_DeleteAllWithScript
	bl SetDefaultColorEffects
	bl ClearBg0Bg1
	pop {r0}
	bx r0
	.align 2, 0
_0808D17C: .4byte gUnknown_08A0190C
_0808D180: .4byte gUnknown_08A01994
_0808D184: .4byte gUnknown_08A018AC
_0808D188: .4byte gUnknown_08A019E4
_0808D18C: .4byte gUnknown_08A01A44

	THUMB_FUNC_START sub_808D190
sub_808D190: @ 0x0808D190
	push {lr}
	ldr r0, _0808D1A8  @ gUnknown_0202BCB0
	movs r2, #0x16
	ldrsh r1, [r0, r2]
	lsls r1, r1, #4
	movs r2, #0xe
	ldrsh r0, [r0, r2]
	subs r1, r1, r0
	cmp r1, #0x40
	bgt _0808D1AC
	movs r0, #0
	b _0808D1AE
	.align 2, 0
_0808D1A8: .4byte gUnknown_0202BCB0
_0808D1AC:
	movs r0, #1
_0808D1AE:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808D1B4
sub_808D1B4: @ 0x0808D1B4
	push {lr}
	bl sub_808D190
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808D1DC
	bl sub_808C314
	movs r1, #1
	negs r1, r1
	cmp r0, r1
	bne _0808D1D0
	movs r0, #2
	b _0808D1FA
_0808D1D0:
	bl sub_808C314
	cmp r0, #1
	bne _0808D1F8
	movs r0, #1
	b _0808D1FA
_0808D1DC:
	bl sub_808C33C
	movs r1, #1
	negs r1, r1
	cmp r0, r1
	bne _0808D1EC
	movs r0, #4
	b _0808D1FA
_0808D1EC:
	bl sub_808C33C
	cmp r0, #1
	bne _0808D1F8
	movs r0, #3
	b _0808D1FA
_0808D1F8:
	movs r0, #0
_0808D1FA:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808D200
sub_808D200: @ 0x0808D200
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r7, _0808D278  @ gUnknown_020044D4
	adds r0, r7, #0
	movs r1, #0xb
	movs r2, #9
	movs r3, #0
	bl TileMap_FillRect
	ldr r6, _0808D27C  @ gUnknown_02004054
	adds r0, r6, #0
	movs r1, #0xb
	movs r2, #9
	movs r3, #0
	bl TileMap_FillRect
	adds r5, r4, #0
	adds r5, #0x44
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #0
	bne _0808D244
	ldr r1, _0808D280  @ gUnknown_08A17744
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r7, #0
	bl CallARM_FillTileRect
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r6, #0
	adds r1, #0x42
	bl Text_Draw
_0808D244:
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #1
	bne _0808D270
	ldr r1, _0808D284  @ gUnknown_08A176BC
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r7, #0
	bl CallARM_FillTileRect
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r6, #0
	adds r1, #0x42
	bl Text_Draw
	adds r0, r4, #0
	adds r0, #0x34
	adds r1, r6, #0
	adds r1, #0xc2
	bl Text_Draw
_0808D270:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808D278: .4byte gUnknown_020044D4
_0808D27C: .4byte gUnknown_02004054
_0808D280: .4byte gUnknown_08A17744
_0808D284: .4byte gUnknown_08A176BC

	THUMB_FUNC_START Init6CPI
Init6CPI: @ 0x0808D288
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r1, #0
	str r1, [r6, #0x58]
	adds r0, #0x56
	strb r1, [r0]
	subs r0, #6
	strb r1, [r0]
	adds r1, r6, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	adds r5, r6, #0
	adds r5, #0x2c
	adds r0, r5, #0
	movs r1, #8
	bl Text_Init
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, #0
	movs r1, #8
	bl Text_Init
	adds r0, r6, #0
	bl NewGreenTextColorManager
	adds r0, r5, #0
	bl Text_Clear
	adds r0, r4, #0
	bl Text_Clear
	bl GetChapterThing
	cmp r0, #2
	beq _0808D2E8
	ldr r0, _0808D2E4  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x8a
	ldrh r0, [r0]
	b _0808D2EC
	.align 2, 0
_0808D2E4: .4byte gUnknown_0202BCF0
_0808D2E8:
	movs r0, #0xcf
	lsls r0, r0, #1
_0808D2EC:
	bl GetStringFromIndex
	adds r5, r0, #0
	adds r4, r6, #0
	adds r4, #0x2c
	movs r0, #0x40
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertString
	bl GetChapterThing
	cmp r0, #2
	beq _0808D328
	ldr r0, _0808D324  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x8c
	ldrb r0, [r0]
	b _0808D32A
	.align 2, 0
_0808D324: .4byte gUnknown_0202BCF0
_0808D328:
	movs r0, #1
_0808D32A:
	cmp r0, #4
	bls _0808D330
	b _0808D476
_0808D330:
	lsls r0, r0, #2
	ldr r1, _0808D33C  @ _0808D340
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808D33C: .4byte _0808D340
_0808D340: @ jump table
	.4byte _0808D354 @ case 0
	.4byte _0808D35C @ case 1
	.4byte _0808D3B0 @ case 2
	.4byte _0808D354 @ case 3
	.4byte _0808D354 @ case 4
_0808D354:
	adds r1, r6, #0
	adds r1, #0x44
	movs r0, #0
	b _0808D474
_0808D35C:
	adds r4, r6, #0
	adds r4, #0x34
	ldr r0, _0808D390  @ 0x000001C1
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x10
	movs r2, #0
	bl Text_InsertString
	ldr r0, _0808D394  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xd]
	cmp r0, #0
	beq _0808D39C
	ldr r0, _0808D398  @ 0x00000535
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x28
	movs r2, #1
	bl Text_InsertString
	b _0808D46E
	.align 2, 0
_0808D390: .4byte 0x000001C1
_0808D394: .4byte gUnknown_0202BCF0
_0808D398: .4byte 0x00000535
_0808D39C:
	movs r0, #0x80
	bl sub_808DDF8
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x30
	movs r2, #2
	bl Text_InsertNumberOr2Dashes
	b _0808D46E
_0808D3B0:
	ldr r4, _0808D3D0  @ gUnknown_0202BCF0
	ldrh r5, [r4, #0x10]
	bl GetChapterThing
	cmp r0, #2
	beq _0808D3D4
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetROMChapterStruct
	adds r0, #0x8d
	ldrb r0, [r0]
	subs r0, #1
	cmp r5, r0
	bge _0808D3DC
	b _0808D404
	.align 2, 0
_0808D3D0: .4byte gUnknown_0202BCF0
_0808D3D4:
	movs r0, #1
	negs r0, r0
	cmp r5, r0
	blt _0808D404
_0808D3DC:
	ldr r0, _0808D400  @ 0x000001C3
	bl GetStringFromIndex
	adds r5, r0, #0
	adds r4, r6, #0
	adds r4, #0x34
	movs r0, #0x40
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #4
	adds r3, r5, #0
	bl Text_InsertString
	b _0808D46E
	.align 2, 0
_0808D400: .4byte 0x000001C3
_0808D404:
	adds r4, r6, #0
	adds r4, #0x34
	ldr r7, _0808D444  @ gUnknown_0202BCF0
	ldrh r3, [r7, #0x10]
	adds r0, r4, #0
	movs r1, #0xa
	movs r2, #2
	bl Text_InsertNumberOr2Dashes
	ldr r0, _0808D448  @ 0x00000539
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x12
	movs r2, #0
	bl Text_InsertString
	bl GetChapterThing
	adds r5, r4, #0
	cmp r0, #2
	beq _0808D44C
	movs r0, #0xe
	ldrsb r0, [r7, r0]
	bl GetROMChapterStruct
	adds r0, #0x8d
	ldrb r0, [r0]
	subs r3, r0, #1
	b _0808D450
	.align 2, 0
_0808D444: .4byte gUnknown_0202BCF0
_0808D448: .4byte 0x00000539
_0808D44C:
	movs r3, #1
	negs r3, r3
_0808D450:
	adds r0, r4, #0
	movs r1, #0x22
	movs r2, #2
	bl Text_InsertNumberOr2Dashes
	movs r0, #0xe1
	lsls r0, r0, #1
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x2a
	movs r2, #0
	bl Text_InsertString
_0808D46E:
	adds r1, r6, #0
	adds r1, #0x44
	movs r0, #1
_0808D474:
	strh r0, [r1]
_0808D476:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START Loop16CPI
Loop16CPI: @ 0x0808D47C
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0
	str r0, [r4, #0x58]
	adds r1, r4, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	bl GetCameraMovementSpeedMaybe
	adds r1, r4, #0
	adds r1, #0x50
	strb r0, [r1]
	ldr r0, _0808D508  @ gUnknown_08A01828
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #4
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #5]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_808BBAC
	adds r5, r0, #0
	ldr r0, _0808D50C  @ gUnknown_08A018AC
	bl Proc_Find
	cmp r0, #0
	beq _0808D4CC
	adds r1, r0, #0
	adds r1, #0x57
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt _0808D4CC
	cmp r0, r5
	beq _0808D500
_0808D4CC:
	adds r0, r4, #0
	adds r0, #0x57
	strb r5, [r0]
	adds r0, r4, #0
	bl sub_808D200
	ldr r1, _0808D510  @ gUnknown_0202BCB0
	ldrh r0, [r1, #0x14]
	adds r2, r4, #0
	adds r2, #0x4e
	strb r0, [r2]
	ldrh r0, [r1, #0x16]
	adds r3, r4, #0
	adds r3, #0x4f
	strb r0, [r3]
	ldrb r1, [r2]
	adds r0, r4, #0
	adds r0, #0x4c
	strb r1, [r0]
	ldrb r0, [r3]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0808D500:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808D508: .4byte gUnknown_08A01828
_0808D50C: .4byte gUnknown_08A018AC
_0808D510: .4byte gUnknown_0202BCB0

	THUMB_FUNC_START sub_808D514
sub_808D514: @ 0x0808D514
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r1, #0
	mov sl, r2
	ldr r1, _0808D69C  @ gUnknown_08A01828
	lsls r0, r0, #3
	adds r0, r0, r1
	movs r1, #4
	ldrsb r1, [r0, r1]
	mov r8, r1
	ldrb r0, [r0, #5]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r9, r0
	cmp r1, #0
	bge _0808D582
	cmp r0, #0
	bge _0808D582
	ldr r4, _0808D6A0  @ gBG1TilemapBuffer
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r5, _0808D6A4  @ gBG0TilemapBuffer
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #0x10
	subs r0, r0, r7
	lsls r0, r0, #6
	ldr r1, _0808D6A8  @ gUnknown_02004254
	adds r0, r0, r1
	adds r1, r4, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TileMap_CopyRect
	movs r0, #0x12
	subs r0, r0, r7
	lsls r0, r0, #6
	ldr r1, _0808D6AC  @ gUnknown_02003D54
	adds r0, r0, r1
	adds r1, r5, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TileMap_CopyRect
_0808D582:
	mov r0, r8
	cmp r0, #0
	ble _0808D5D2
	mov r1, r9
	cmp r1, #0
	bge _0808D5D2
	ldr r4, _0808D6B0  @ gUnknown_020234CE
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r5, _0808D6B4  @ gUnknown_02022CCE
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #0x10
	subs r0, r0, r7
	lsls r0, r0, #6
	ldr r1, _0808D6A8  @ gUnknown_02004254
	adds r0, r0, r1
	adds r1, r4, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TileMap_CopyRect
	movs r0, #0x12
	subs r0, r0, r7
	lsls r0, r0, #6
	ldr r1, _0808D6AC  @ gUnknown_02003D54
	adds r0, r0, r1
	adds r1, r5, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TileMap_CopyRect
_0808D5D2:
	mov r0, r8
	cmp r0, #0
	bge _0808D62C
	mov r1, r9
	cmp r1, #0
	ble _0808D62C
	ldr r5, _0808D6B8  @ gUnknown_02023828
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r6, _0808D6BC  @ gUnknown_02023028
	adds r0, r6, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _0808D6C0  @ gUnknown_020044D4
	movs r4, #1
	mov r1, sl
	subs r4, r4, r1
	lsls r4, r4, #1
	adds r4, #0x14
	subs r4, r4, r7
	lsls r4, r4, #6
	ldr r1, _0808D6C4  @ 0xFFFFFC80
	adds r5, r5, r1
	adds r5, r4, r5
	adds r1, r5, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TileMap_CopyRect
	ldr r0, _0808D6C8  @ gUnknown_02004054
	ldr r1, _0808D6C4  @ 0xFFFFFC80
	adds r6, r6, r1
	adds r4, r4, r6
	adds r1, r4, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TileMap_CopyRect
_0808D62C:
	mov r0, r8
	cmp r0, #0
	ble _0808D686
	mov r1, r9
	cmp r1, #0
	ble _0808D686
	ldr r5, _0808D6CC  @ gUnknown_0202384E
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r6, _0808D6D0  @ gUnknown_0202304E
	adds r0, r6, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _0808D6C0  @ gUnknown_020044D4
	movs r4, #1
	mov r1, sl
	subs r4, r4, r1
	lsls r4, r4, #1
	adds r4, #0x14
	subs r4, r4, r7
	lsls r4, r4, #6
	ldr r1, _0808D6C4  @ 0xFFFFFC80
	adds r5, r5, r1
	adds r5, r4, r5
	adds r1, r5, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TileMap_CopyRect
	ldr r0, _0808D6C8  @ gUnknown_02004054
	ldr r1, _0808D6C4  @ 0xFFFFFC80
	adds r6, r6, r1
	adds r4, r4, r6
	adds r1, r4, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TileMap_CopyRect
_0808D686:
	movs r0, #3
	bl BG_EnableSyncByMask
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808D69C: .4byte gUnknown_08A01828
_0808D6A0: .4byte gBG1TilemapBuffer
_0808D6A4: .4byte gBG0TilemapBuffer
_0808D6A8: .4byte gUnknown_02004254
_0808D6AC: .4byte gUnknown_02003D54
_0808D6B0: .4byte gUnknown_020234CE
_0808D6B4: .4byte gUnknown_02022CCE
_0808D6B8: .4byte gUnknown_02023828
_0808D6BC: .4byte gUnknown_02023028
_0808D6C0: .4byte gUnknown_020044D4
_0808D6C4: .4byte 0xFFFFFC80
_0808D6C8: .4byte gUnknown_02004054
_0808D6CC: .4byte gUnknown_0202384E
_0808D6D0: .4byte gUnknown_0202304E

	THUMB_FUNC_START Loop26CPI
Loop26CPI: @ 0x0808D6D4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0808D718  @ gUnknown_08A019DC
	ldr r0, [r4, #0x58]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r4, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	bl sub_808D514
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	cmp r0, #5
	bne _0808D712
	movs r0, #0
	str r0, [r4, #0x58]
	adds r1, r4, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0808D712:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808D718: .4byte gUnknown_08A019DC

	THUMB_FUNC_START Loop46CPI
Loop46CPI: @ 0x0808D71C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x55
	movs r5, #0
	movs r0, #1
	strb r0, [r6]
	ldr r1, _0808D774  @ gUnknown_08A019E1
	ldr r0, [r4, #0x58]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r4, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	bl sub_808D514
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	cmp r0, #3
	bne _0808D76C
	str r5, [r4, #0x58]
	strb r5, [r6]
	adds r0, r4, #0
	adds r0, #0x56
	strb r5, [r0]
	adds r1, r4, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0808D76C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808D774: .4byte gUnknown_08A019E1

	THUMB_FUNC_START sub_808D778
sub_808D778: @ 0x0808D778
	bx lr

	THUMB_FUNC_START __malloc_unlock_0
__malloc_unlock_0: @ 0x0808D77C
	bx lr

	THUMB_FUNC_START sub_808D780
sub_808D780: @ 0x0808D780
	bx lr

	THUMB_FUNC_START Loop36CPI
Loop36CPI: @ 0x0808D784
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r3, r4, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4c
	strb r0, [r2]
	movs r0, #0x4f
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	ldr r1, _0808D808  @ gUnknown_0202BCB0
	ldrh r0, [r1, #0x14]
	strb r0, [r3]
	ldrh r0, [r1, #0x16]
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3]
	ldrh r2, [r2]
	cmp r0, r2
	beq _0808D802
	ldr r0, _0808D80C  @ gUnknown_0859A548
	bl Proc_Find
	cmp r0, #0
	bne _0808D7F4
	bl GetCameraMovementSpeedMaybe
	adds r2, r0, #0
	adds r0, r4, #0
	adds r0, #0x50
	movs r3, #0
	ldrsb r3, [r0, r3]
	cmp r2, r3
	beq _0808D802
	ldr r1, _0808D810  @ gUnknown_08A01828
	lsls r0, r2, #3
	adds r5, r0, r1
	lsls r0, r3, #3
	adds r2, r0, r1
	movs r1, #4
	ldrsb r1, [r5, r1]
	movs r0, #4
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne _0808D7F4
	movs r1, #5
	ldrsb r1, [r5, r1]
	movs r0, #5
	ldrsb r0, [r2, r0]
	cmp r1, r0
	beq _0808D802
_0808D7F4:
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0808D802:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808D808: .4byte gUnknown_0202BCB0
_0808D80C: .4byte gUnknown_0859A548
_0808D810: .4byte gUnknown_08A01828

	THUMB_FUNC_START sub_808D814
sub_808D814: @ 0x0808D814
	push {lr}
	ldr r0, _0808D85C  @ gUnknown_08A0190C
	bl Proc_Find
	cmp r0, #0
	beq _0808D82C
	adds r0, #0x56
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0808D858
_0808D82C:
	ldr r0, _0808D860  @ gUnknown_08A018AC
	bl Proc_Find
	cmp r0, #0
	beq _0808D842
	adds r0, #0x56
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0808D858
_0808D842:
	ldr r0, _0808D864  @ gUnknown_08A019E4
	bl Proc_Find
	cmp r0, #0
	beq _0808D868
	adds r0, #0x56
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0808D868
_0808D858:
	movs r0, #1
	b _0808D86A
	.align 2, 0
_0808D85C: .4byte gUnknown_08A0190C
_0808D860: .4byte gUnknown_08A018AC
_0808D864: .4byte gUnknown_08A019E4
_0808D868:
	movs r0, #0
_0808D86A:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808D870
sub_808D870: @ 0x0808D870
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808D898  @ gUnknown_08A199C8
	ldr r1, _0808D89C  @ 0x06015000
	bl CopyDataWithPossibleUncomp
	adds r1, r4, #0
	adds r1, #0x46
	movs r2, #0
	movs r0, #0x88
	strh r0, [r1]
	adds r1, #2
	movs r0, #0x8c
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x56
	strb r2, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808D898: .4byte gUnknown_08A199C8
_0808D89C: .4byte 0x06015000

	THUMB_FUNC_START sub_808D8A0
sub_808D8A0: @ 0x0808D8A0
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r5, r2, #0
	ldr r0, _0808D920  @ gUnknown_08A01828
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r2, #4
	ldrsb r2, [r1, r2]
	movs r4, #5
	ldrsb r4, [r1, r4]
	cmp r2, #0
	bge _0808D8CE
	cmp r4, #0
	bge _0808D8CE
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #8
	strh r0, [r1]
	adds r1, r5, #0
	subs r1, #0x14
	adds r0, r3, #0
	adds r0, #0x48
	strh r1, [r0]
_0808D8CE:
	cmp r2, #0
	ble _0808D8E8
	cmp r4, #0
	bge _0808D8E8
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0xac
	strh r0, [r1]
	adds r1, r5, #0
	subs r1, #0x14
	adds r0, r3, #0
	adds r0, #0x48
	strh r1, [r0]
_0808D8E8:
	cmp r2, #0
	bge _0808D900
	cmp r4, #0
	ble _0808D900
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #8
	strh r0, [r1]
	movs r0, #0xa4
	subs r0, r0, r5
	adds r1, #2
	strh r0, [r1]
_0808D900:
	cmp r2, #0
	ble _0808D918
	cmp r4, #0
	ble _0808D918
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0xac
	strh r0, [r1]
	movs r0, #0xa4
	subs r0, r0, r5
	adds r1, #2
	strh r0, [r1]
_0808D918:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808D920: .4byte gUnknown_08A01828

	THUMB_FUNC_START sub_808D924
sub_808D924: @ 0x0808D924
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r6, _0808D970  @ 0x000001FF
	adds r1, r4, #0
	ands r1, r6
	movs r0, #0xff
	ands r5, r0
	ldr r0, _0808D974  @ gUnknown_08590F8C
	mov r8, r0
	movs r0, #0x8a
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	adds r2, r5, #0
	mov r3, r8
	bl RegisterObjectAttributes_SafeMaybe
	adds r4, #0x20
	ands r4, r6
	ldr r0, _0808D978  @ 0x00002284
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	adds r2, r5, #0
	mov r3, r8
	bl RegisterObjectAttributes_SafeMaybe
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808D970: .4byte 0x000001FF
_0808D974: .4byte gUnknown_08590F8C
_0808D978: .4byte 0x00002284

	THUMB_FUNC_START sub_808D97C
sub_808D97C: @ 0x0808D97C
	push {r4, r5, lr}
	adds r4, r0, #0
	bl GetCameraMovementSpeedMaybe
	adds r1, r4, #0
	adds r1, #0x50
	movs r5, #0
	strb r0, [r1]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldr r2, [r4, #0x58]
	adds r0, r4, #0
	bl sub_808D8A0
	str r5, [r4, #0x58]
	ldr r1, _0808D9B4  @ gUnknown_0202BCB0
	ldrh r0, [r1, #0x14]
	adds r2, r4, #0
	adds r2, #0x4e
	strb r0, [r2]
	ldrh r0, [r1, #0x16]
	adds r4, #0x4f
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808D9B4: .4byte gUnknown_0202BCB0

	THUMB_FUNC_START sub_808D9B8
sub_808D9B8: @ 0x0808D9B8
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x58]
	adds r2, #4
	str r2, [r4, #0x58]
	adds r0, #0x50
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	bl sub_808D8A0
	adds r0, r4, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r4, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r1, [r1, r2]
	bl sub_808D924
	ldr r0, [r4, #0x58]
	cmp r0, #0x18
	bne _0808D9F6
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #0
	strb r0, [r1]
_0808D9F6:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808D9FC
sub_808D9FC: @ 0x0808D9FC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r4, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r1, [r1, r2]
	bl sub_808D924
	adds r3, r4, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4c
	strb r0, [r2]
	movs r0, #0x4f
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	ldr r1, _0808DA94  @ gUnknown_0202BCB0
	ldrh r0, [r1, #0x14]
	strb r0, [r3]
	ldrh r0, [r1, #0x16]
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3]
	ldrh r2, [r2]
	cmp r0, r2
	beq _0808DA8C
	ldr r0, _0808DA98  @ gUnknown_0859A548
	bl Proc_Find
	cmp r0, #0
	bne _0808DA7E
	bl GetCameraMovementSpeedMaybe
	adds r2, r0, #0
	adds r0, r4, #0
	adds r0, #0x50
	movs r3, #0
	ldrsb r3, [r0, r3]
	cmp r2, r3
	beq _0808DA8C
	ldr r1, _0808DA9C  @ gUnknown_08A01828
	lsls r0, r2, #3
	adds r5, r0, r1
	lsls r0, r3, #3
	adds r2, r0, r1
	movs r1, #4
	ldrsb r1, [r5, r1]
	movs r0, #4
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne _0808DA7E
	movs r1, #5
	ldrsb r1, [r5, r1]
	movs r0, #5
	ldrsb r0, [r2, r0]
	cmp r1, r0
	beq _0808DA8C
_0808DA7E:
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0808DA8C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808DA94: .4byte gUnknown_0202BCB0
_0808DA98: .4byte gUnknown_0859A548
_0808DA9C: .4byte gUnknown_08A01828

	THUMB_FUNC_START sub_808DAA0
sub_808DAA0: @ 0x0808DAA0
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x58]
	subs r2, #4
	str r2, [r4, #0x58]
	adds r0, #0x50
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	bl sub_808D8A0
	adds r0, r4, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r4, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r1, [r1, r2]
	bl sub_808D924
	ldr r1, [r4, #0x58]
	cmp r1, #0
	bne _0808DADC
	adds r0, r4, #0
	adds r0, #0x56
	strb r1, [r0]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0808DADC:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START MinimalVBlankHandler
MinimalVBlankHandler: @ 0x0808DAE4
	push {lr}
	ldr r1, _0808DB04  @ gUnknown_03007FF8
	movs r0, #1
	strh r0, [r1]
	bl FlushLCDControl
	bl FlushBackgrounds
	bl FlushTiles
	bl m4aSoundVSync
	bl m4aSoundMain
	pop {r0}
	bx r0
	.align 2, 0
_0808DB04: .4byte gUnknown_03007FF8

	THUMB_FUNC_START sub_808DB08
sub_808DB08: @ 0x0808DB08
	push {r4, lr}
	ldr r4, _0808DB30  @ gKeyStatusPtr
	ldr r0, [r4]
	bl UpdateKeyStatus
	ldr r0, [r4]
	ldrh r1, [r0, #8]
	movs r0, #9
	ands r0, r1
	cmp r0, #0
	beq _0808DB24
	movs r0, #0xff
	bl SoftReset
_0808DB24:
	bl VBlankIntrWait
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808DB30: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_808DB34
sub_808DB34: @ 0x0808DB34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x7c
	add r5, sp, #0x18
	bl Font_InitForUIDefault
	bl Font_LoadForDialogue
	add r7, sp, #8
	add r0, sp, #0x10
	mov r8, r0
	mov r4, sp
	movs r6, #2
_0808DB50:
	adds r0, r4, #0
	movs r1, #0x16
	bl Text_Init
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColorId
	adds r4, #8
	subs r6, #1
	cmp r6, #0
	bge _0808DB50
	movs r1, #0
	str r1, [r5, #0x30]
	mov r0, sp
	str r0, [r5, #0x34]
	str r7, [r5, #0x38]
	mov r0, r8
	str r0, [r5, #0x3c]
	adds r0, r5, #0
	adds r0, #0x5c
	strh r1, [r0]
	ldr r0, _0808DBC0  @ 0x0000088E
	bl GetStringFromIndex
	str r0, [r5, #0x2c]
	adds r0, r5, #0
	bl sub_8089EEC
	ldr r4, _0808DBC4  @ gUnknown_02022E30
	mov r0, sp
	adds r1, r4, #0
	bl Text_Draw
	adds r1, r4, #0
	adds r1, #0xc0
	adds r0, r7, #0
	bl Text_Draw
	movs r0, #0xa0
	lsls r0, r0, #1
	adds r4, r4, r0
	mov r0, r8
	adds r1, r4, #0
	bl Text_Draw
	movs r0, #1
	bl BG_EnableSyncByMask
	add sp, #0x7c
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808DBC0: .4byte 0x0000088E
_0808DBC4: .4byte gUnknown_02022E30

	THUMB_FUNC_START sub_808DBC8
sub_808DBC8: @ 0x0808DBC8
	push {r4, r5, lr}
	sub sp, #8
	movs r0, #0
	bl SetupBackgrounds
	bl m4aSoundInit
	bl Proc_Initialize
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r4, _0808DC60  @ gLCDControlBuffer
	ldrb r0, [r4, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	subs r1, #0x10
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	bl SetDefaultColorEffects
	movs r0, #0
	bl SetPrimaryHBlankHandler
	movs r0, #0
	strh r0, [r4, #0x38]
	bl FlushLCDControl
	movs r4, #0
	str r4, [sp]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	ldr r5, _0808DC64  @ 0x01000008
	mov r0, sp
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _0808DC68  @ 0x06008000
	adds r2, r5, #0
	bl CpuFastSet
	bl sub_808DB34
	ldr r0, _0808DC6C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808DC52
	movs r0, #0x7b
	bl m4aSongNumStart
_0808DC52:
	ldr r0, _0808DC70  @ sub_808DB08
	bl SetMainUpdateRoutine
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808DC60: .4byte gLCDControlBuffer
_0808DC64: .4byte 0x01000008
_0808DC68: .4byte 0x06008000
_0808DC6C: .4byte gUnknown_0202BCF0
_0808DC70: .4byte sub_808DB08

	THUMB_FUNC_START sub_808DC74
sub_808DC74: @ 0x0808DC74
	push {lr}
	ldr r1, _0808DC9C  @ 0x04000004
	movs r0, #8
	strh r0, [r1]
	ldr r1, _0808DCA0  @ 0x04000208
	movs r0, #1
	strh r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #0x13
	movs r0, #0
	strh r0, [r1]
	ldr r0, _0808DCA4  @ MinimalVBlankHandler
	bl SetInterrupt_LCDVBlank
	ldr r0, _0808DCA8  @ sub_808DBC8
	bl SetMainUpdateRoutine
	pop {r0}
	bx r0
	.align 2, 0
_0808DC9C: .4byte 0x04000004
_0808DCA0: .4byte 0x04000208
_0808DCA4: .4byte MinimalVBlankHandler
_0808DCA8: .4byte sub_808DBC8

	THUMB_FUNC_START sub_808DCAC
sub_808DCAC: @ 0x0808DCAC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808DCC8  @ 0x06015000
	movs r1, #6
	bl LoadDialogueBoxGfx
	ldr r0, _0808DCCC  @ gUnknown_08A01D18
	adds r1, r4, #0
	bl StartMovingHelpBox
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808DCC8: .4byte 0x06015000
_0808DCCC: .4byte gUnknown_08A01D18

	THUMB_FUNC_START sub_808DCD0
sub_808DCD0: @ 0x0808DCD0
	push {r4, lr}
	movs r4, #1
_0808DCD4:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0808DCEA
	ldr r0, [r1]
	cmp r0, #0
	beq _0808DCEA
	adds r0, r1, #0
	b _0808DCF2
_0808DCEA:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808DCD4
	movs r0, #0
_0808DCF2:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808DCF8
sub_808DCF8: @ 0x0808DCF8
	push {r4, lr}
	movs r2, #0
	ldr r0, _0808DD14  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xe]
	subs r0, #0xd
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x14
	bhi _0808DD84
	lsls r0, r0, #2
	ldr r1, _0808DD18  @ _0808DD1C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808DD14: .4byte gUnknown_0202BCF0
_0808DD18: .4byte _0808DD1C
_0808DD1C: @ jump table
	.4byte _0808DD70 @ case 0
	.4byte _0808DD84 @ case 1
	.4byte _0808DD74 @ case 2
	.4byte _0808DD84 @ case 3
	.4byte _0808DD84 @ case 4
	.4byte _0808DD84 @ case 5
	.4byte _0808DD84 @ case 6
	.4byte _0808DD7C @ case 7
	.4byte _0808DD84 @ case 8
	.4byte _0808DD84 @ case 9
	.4byte _0808DD84 @ case 10
	.4byte _0808DD84 @ case 11
	.4byte _0808DD84 @ case 12
	.4byte _0808DD84 @ case 13
	.4byte _0808DD84 @ case 14
	.4byte _0808DD78 @ case 15
	.4byte _0808DD84 @ case 16
	.4byte _0808DD84 @ case 17
	.4byte _0808DD84 @ case 18
	.4byte _0808DD84 @ case 19
	.4byte _0808DD7C @ case 20
_0808DD70:
	movs r0, #0x51
	b _0808DD7E
_0808DD74:
	movs r0, #0x43
	b _0808DD7E
_0808DD78:
	movs r0, #0x53
	b _0808DD7E
_0808DD7C:
	movs r0, #0x41
_0808DD7E:
	bl GetUnitFromCharId
	adds r2, r0, #0
_0808DD84:
	cmp r2, #0
	beq _0808DD8C
_0808DD88:
	adds r0, r2, #0
	b _0808DDBA
_0808DD8C:
	movs r4, #0x81
_0808DD8E:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0808DDB2
	ldr r1, [r2]
	cmp r1, #0
	beq _0808DDB2
	ldr r0, [r2, #4]
	ldr r1, [r1, #0x28]
	ldr r0, [r0, #0x28]
	orrs r1, r0
	movs r0, #0x80
	lsls r0, r0, #8
	ands r1, r0
	cmp r1, #0
	bne _0808DD88
_0808DDB2:
	adds r4, #1
	cmp r4, #0xbf
	ble _0808DD8E
	movs r0, #0
_0808DDBA:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808DDC0
sub_808DDC0: @ 0x0808DDC0
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #0x81
_0808DDC6:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0808DDEA
	ldr r1, [r0]
	cmp r1, #0
	beq _0808DDEA
	ldr r0, [r0, #4]
	ldr r1, [r1, #0x28]
	ldr r0, [r0, #0x28]
	orrs r1, r0
	movs r0, #0x80
	lsls r0, r0, #8
	ands r1, r0
	cmp r1, #0
	beq _0808DDEA
	adds r5, #1
_0808DDEA:
	adds r4, #1
	cmp r4, #0xbf
	ble _0808DDC6
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808DDF8
sub_808DDF8: @ 0x0808DDF8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	adds r4, r5, #1
	b _0808DE24
_0808DE02:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0808DE20
	ldr r0, [r1]
	cmp r0, #0
	beq _0808DE20
	ldr r0, [r1, #0xc]
	ldr r1, _0808DE34  @ 0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _0808DE20
	adds r6, #1
_0808DE20:
	adds r4, #1
	adds r0, r5, #0
_0808DE24:
	adds r0, #0x40
	cmp r4, r0
	blt _0808DE02
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0808DE34: .4byte 0x0001000C

	THUMB_FUNC_START sub_808DE38
sub_808DE38: @ 0x0808DE38
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	ldr r0, _0808DEB4  @ gUnknown_08A2E8F0
	adds r0, #0x5e
	ldrh r5, [r0]
	ldr r6, _0808DEB8  @ gUnknown_02022BA4
	adds r3, r2, #0
	adds r3, #0x40
	ldrb r0, [r3]
	lsrs r4, r0, #1
	movs r1, #0x1f
	ands r4, r1
	adds r0, #1
	strb r0, [r3]
	cmp r4, #0x10
	ble _0808DE60
	movs r0, #0xf
	ands r0, r4
	movs r1, #0x10
	subs r4, r1, r0
_0808DE60:
	adds r1, r2, #0
	adds r1, #0x2e
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r1, [r1]
	ldrb r2, [r0]
	cmp r1, r2
	beq _0808DE76
	strb r1, [r0]
	movs r0, #0
	strb r0, [r3]
_0808DE76:
	movs r3, #0x1f
	movs r0, #0x1f
	ands r0, r5
	movs r2, #0x10
	subs r2, r2, r4
	adds r1, r0, #0
	muls r1, r2, r1
	asrs r1, r1, #4
	ands r1, r3
	movs r3, #0xf8
	lsls r3, r3, #2
	adds r0, r5, #0
	ands r0, r3
	muls r0, r2, r0
	asrs r0, r0, #4
	ands r0, r3
	adds r1, r1, r0
	movs r3, #0xf8
	lsls r3, r3, #7
	ands r5, r3
	adds r0, r5, #0
	muls r0, r2, r0
	asrs r0, r0, #4
	ands r0, r3
	adds r1, r1, r0
	strh r1, [r6]
	bl EnablePaletteSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808DEB4: .4byte gUnknown_08A2E8F0
_0808DEB8: .4byte gUnknown_02022BA4

	THUMB_FUNC_START sub_808DEBC
sub_808DEBC: @ 0x0808DEBC
	push {lr}
	sub sp, #4
	adds r1, r0, #0
	cmp r1, #0
	beq _0808DEDA
	ldrb r0, [r1]
	cmp r0, #0
	beq _0808DEDA
_0808DECC:
	ldrb r0, [r1]
	cmp r0, #0
	beq _0808DEDA
	cmp r0, #1
	bne _0808DEDE
	adds r0, r1, #1
	b _0808DEEA
_0808DEDA:
	movs r0, #0
	b _0808DEEA
_0808DEDE:
	adds r0, r1, #0
	mov r1, sp
	bl GetCharTextWidth
	adds r1, r0, #0
	b _0808DECC
_0808DEEA:
	add sp, #4
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808DEF0
sub_808DEF0: @ 0x0808DEF0
	push {lr}
	sub sp, #4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808DF18
	movs r0, #0
	str r0, [sp]
	ldr r1, _0808DF10  @ gUnknown_02022C48
	ldr r2, _0808DF14  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	bl EnablePaletteSync
	b _0808DF1C
	.align 2, 0
_0808DF10: .4byte gUnknown_02022C48
_0808DF14: .4byte 0x01000008
_0808DF18:
	bl SetupMapSpritesPalettes
_0808DF1C:
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808DF24
sub_808DF24: @ 0x0808DF24
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	movs r0, #0
	bl SetupBackgrounds
	ldr r4, _0808E060  @ gLCDControlBuffer
	ldrb r0, [r4, #0xc]
	mov r9, r0
	movs r5, #4
	negs r5, r5
	ldrb r0, [r4, #0x10]
	adds r2, r5, #0
	ands r2, r0
	movs r6, #1
	mov r8, r6
	mov r0, r8
	orrs r2, r0
	ldrb r0, [r4, #0x14]
	adds r1, r5, #0
	ands r1, r0
	movs r6, #2
	mov ip, r6
	mov r0, ip
	orrs r1, r0
	ldrb r3, [r4, #0x18]
	movs r0, #3
	orrs r3, r0
	adds r0, r5, #0
	mov r6, r9
	ands r0, r6
	strb r0, [r4, #0xc]
	ands r2, r5
	mov r0, r8
	orrs r2, r0
	strb r2, [r4, #0x10]
	ands r1, r5
	mov r6, ip
	orrs r1, r6
	strb r1, [r4, #0x14]
	ands r3, r5
	orrs r3, r6
	strb r3, [r4, #0x18]
	bl Font_InitForUIDefault
	bl LoadUiFrameGraphics
	movs r5, #0
	movs r0, #0
	strh r0, [r7, #0x3c]
	adds r0, r7, #0
	adds r0, #0x3e
	strb r5, [r0]
	subs r0, #0x14
	strb r5, [r0]
	ldr r4, _0808E064  @ 0x0000FFFE
	ldr r2, _0808E068  @ 0x0000FFFC
	movs r0, #0
	adds r1, r4, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	adds r2, r4, #0
	bl BG_SetPosition
	ldr r2, _0808E06C  @ 0x0000FFDC
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	bl ClearBg0Bg1
	ldr r0, _0808E070  @ gUiFramePaletteA
	movs r1, #0x40
	movs r2, #0x60
	bl CopyToPaletteBuffer
	ldr r0, _0808E074  @ gUnknown_08A2E5EC
	ldr r1, _0808E078  @ 0x06005800
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808E07C  @ gUnknown_08A2E4C4
	ldr r4, _0808E080  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808E084  @ gBG2TilemapBuffer
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl CallARM_FillTileRect
	ldr r0, _0808E088  @ gUnknown_08A2D32C
	ldr r1, _0808E08C  @ 0x06013000
	bl CopyDataWithPossibleUncomp
	ldr r0, _0808E090  @ gUnknown_08A2E1B8
	movs r1, #0xc0
	lsls r1, r1, #2
	movs r2, #0x40
	bl CopyToPaletteBuffer
	ldr r0, _0808E094  @ gUnknown_08A2E1F8
	ldr r1, _0808E098  @ 0x06013300
	bl CopyDataWithPossibleUncomp
	bl SetDefaultColorEffects
	movs r0, #0xf
	bl BG_EnableSyncByMask
	adds r0, r7, #0
	adds r0, #0x2d
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #0x12
	strb r5, [r0]
	bl GetPlayerLeaderUnitId
	bl GetUnitFromCharId
	str r0, [r7, #0x34]
	movs r0, #0
	bl sub_808DDF8
	adds r1, r7, #0
	adds r1, #0x30
	strb r0, [r1]
	bl sub_80A4BB0
	adds r1, r7, #0
	adds r1, #0x2b
	strb r0, [r1]
	ldr r2, [r7, #0x34]
	ldr r1, [r2, #0xc]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0808E09C
	movs r0, #3
	negs r0, r0
	ands r1, r0
	str r1, [r2, #0xc]
	adds r1, r7, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	b _0808E0A2
	.align 2, 0
_0808E060: .4byte gLCDControlBuffer
_0808E064: .4byte 0x0000FFFE
_0808E068: .4byte 0x0000FFFC
_0808E06C: .4byte 0x0000FFDC
_0808E070: .4byte gUiFramePaletteA
_0808E074: .4byte gUnknown_08A2E5EC
_0808E078: .4byte 0x06005800
_0808E07C: .4byte gUnknown_08A2E4C4
_0808E080: .4byte gUnknown_02020188
_0808E084: .4byte gBG2TilemapBuffer
_0808E088: .4byte gUnknown_08A2D32C
_0808E08C: .4byte 0x06013000
_0808E090: .4byte gUnknown_08A2E1B8
_0808E094: .4byte gUnknown_08A2E1F8
_0808E098: .4byte 0x06013300
_0808E09C:
	adds r0, r7, #0
	adds r0, #0x29
	strb r5, [r0]
_0808E0A2:
	bl sub_808DDC0
	cmp r0, #0
	beq _0808E0AE
	bl sub_808DCF8
_0808E0AE:
	str r0, [r7, #0x38]
	movs r0, #0x80
	bl sub_808DDF8
	adds r1, r7, #0
	adds r1, #0x31
	strb r0, [r1]
	bl SetupMapSpritesPalettes
	adds r4, r7, #0
	adds r4, #0x34
	movs r5, #1
_0808E0C6:
	ldr r0, [r4]
	cmp r0, #0
	beq _0808E0D4
	bl GetUnitSMSId
	bl SMS_RegisterUsage
_0808E0D4:
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge _0808E0C6
	bl SMS_FlushIndirect
	ldr r6, _0808E190  @ gLCDControlBuffer
	ldrb r0, [r6, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r6, #1]
	adds r1, r6, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x48
	strb r0, [r1]
	adds r3, r6, #0
	adds r3, #0x34
	ldrb r0, [r3]
	movs r5, #1
	orrs r0, r5
	movs r1, #2
	orrs r0, r1
	movs r4, #4
	orrs r0, r4
	movs r2, #8
	orrs r0, r2
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3]
	adds r3, #2
	ldrb r0, [r3]
	orrs r0, r5
	movs r5, #3
	negs r5, r5
	ands r0, r5
	orrs r0, r4
	orrs r0, r2
	orrs r0, r1
	strb r0, [r3]
	adds r0, r7, #0
	movs r1, #0
	movs r2, #0xe
	bl sub_8086BB8
	ldr r0, _0808E194  @ gUnknown_08B1754C
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x40
	bl CopyToPaletteBuffer
	movs r0, #0xc8
	movs r1, #0x12
	movs r2, #2
	adds r3, r7, #0
	bl StartHelpPromptSprite
	ldr r0, _0808E198  @ gUnknown_08A01CA4
	adds r1, r7, #0
	bl Proc_Create
	ldrb r1, [r6, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	ands r0, r5
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r6, #1]
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E190: .4byte gLCDControlBuffer
_0808E194: .4byte gUnknown_08B1754C
_0808E198: .4byte gUnknown_08A01CA4

	THUMB_FUNC_START sub_808E19C
sub_808E19C: @ 0x0808E19C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, _0808E22C  @ gUnknown_02004BBC
	ldr r0, _0808E230  @ gUnknown_02022F1A
	movs r1, #3
	movs r2, #3
	movs r3, #0
	bl TileMap_FillRect
	adds r0, r5, #0
	adds r0, #8
	bl SetFont
	movs r0, #0
	bl SetFontGlyphSet
	adds r0, r5, #0
	movs r1, #0
	bl Text_80046B4
	cmp r6, #0
	bne _0808E1CC
	b _0808E318
_0808E1CC:
	ldr r0, [r6, #0xc]
	movs r1, #0xa0
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	beq _0808E238
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColorId
	adds r0, r5, #0
	movs r1, #0x82
	bl Text_SetXCursor
	ldr r4, _0808E234  @ 0x00000535
	adds r0, r4, #0
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendString
	adds r0, r5, #0
	movs r1, #0xa2
	bl Text_SetXCursor
	adds r0, r4, #0
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendString
	adds r0, r5, #0
	movs r1, #0xba
	bl Text_SetXCursor
	adds r0, r4, #0
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendString
	movs r0, #1
	bl sub_808DEF0
	b _0808E364
	.align 2, 0
_0808E22C: .4byte gUnknown_02004BBC
_0808E230: .4byte gUnknown_02022F1A
_0808E234: .4byte 0x00000535
_0808E238:
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColorId
	ldr r0, [r6]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r4, r0, #0
	movs r0, #0x30
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_SetXCursor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_AppendString
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColorId
	adds r0, r5, #0
	movs r1, #0x8a
	bl Text_SetXCursor
	movs r1, #8
	ldrsb r1, [r6, r1]
	adds r0, r5, #0
	bl Text_AppendNumberOr2Dashes
	adds r0, r6, #0
	bl GetUnitCurrentHp
	cmp r0, #0x63
	ble _0808E2A4
	adds r0, r5, #0
	movs r1, #0xa2
	bl Text_SetXCursor
	ldr r0, _0808E2A0  @ 0x00000535
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendString
	b _0808E2BA
	.align 2, 0
_0808E2A0: .4byte 0x00000535
_0808E2A4:
	adds r0, r5, #0
	movs r1, #0xaa
	bl Text_SetXCursor
	adds r0, r6, #0
	bl GetUnitCurrentHp
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendNumberOr2Dashes
_0808E2BA:
	adds r0, r6, #0
	bl GetUnitMaxHp
	cmp r0, #0x63
	ble _0808E2E0
	adds r0, r5, #0
	movs r1, #0xba
	bl Text_SetXCursor
	ldr r0, _0808E2DC  @ 0x00000535
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendString
	b _0808E2F6
	.align 2, 0
_0808E2DC: .4byte 0x00000535
_0808E2E0:
	adds r0, r5, #0
	movs r1, #0xc2
	bl Text_SetXCursor
	adds r0, r6, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendNumberOr2Dashes
_0808E2F6:
	adds r0, r6, #0
	bl GetUnitMiniPortraitId
	ldr r1, _0808E314  @ gUnknown_02022F1A
	movs r2, #0xa0
	lsls r2, r2, #2
	movs r3, #0
	str r3, [sp]
	movs r3, #4
	bl sub_8005988
	movs r0, #0
	bl sub_808DEF0
	b _0808E364
	.align 2, 0
_0808E314: .4byte gUnknown_02022F1A
_0808E318:
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColorId
	adds r0, r5, #0
	movs r1, #0x82
	bl Text_SetXCursor
	ldr r4, _0808E3CC  @ 0x00000535
	adds r0, r4, #0
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendString
	adds r0, r5, #0
	movs r1, #0xa2
	bl Text_SetXCursor
	adds r0, r4, #0
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendString
	adds r0, r5, #0
	movs r1, #0xba
	bl Text_SetXCursor
	adds r0, r4, #0
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendString
_0808E364:
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColorId
	adds r0, r5, #0
	movs r1, #0xb3
	bl Text_SetXCursor
	ldr r0, _0808E3D0  @ 0x00000539
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendString
	movs r0, #0
	bl SetFont
	movs r0, #1
	bl BG_EnableSyncByMask
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	movs r0, #1
	movs r1, #0xd
	movs r2, #3
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808E3CC: .4byte 0x00000535
_0808E3D0: .4byte 0x00000539

	THUMB_FUNC_START sub_808E3D4
sub_808E3D4: @ 0x0808E3D4
	ldr r2, _0808E3F0  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_0808E3F0: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_808E3F4
sub_808E3F4: @ 0x0808E3F4
	push {r4, lr}
	ldr r0, _0808E430  @ gUnknown_0859EF00
	movs r1, #0xd0
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r4, _0808E434  @ gUnknown_02004BC4
	ldr r1, _0808E438  @ 0x06017800
	adds r0, r4, #0
	movs r2, #0x1a
	bl InitSomeOtherGraphicsRelatedStruct
	adds r0, r4, #0
	bl SetFont
	movs r0, #0
	bl SetFontGlyphSet
	subs r4, #8
	adds r0, r4, #0
	bl Text_Init3
	movs r0, #0
	bl SetFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808E430: .4byte gUnknown_0859EF00
_0808E434: .4byte gUnknown_02004BC4
_0808E438: .4byte 0x06017800

	THUMB_FUNC_START sub_808E43C
sub_808E43C: @ 0x0808E43C
	push {r4, r5, lr}
	ldr r5, _0808E4A0  @ gUnknown_02023028
	adds r0, r5, #0
	movs r1, #0xf
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	adds r0, r5, #0
	adds r0, #0x18
	ldr r1, _0808E4A4  @ gUnknown_0202BCF0
	ldrh r2, [r1, #0x10]
	movs r1, #2
	bl sub_8004B88
	adds r4, r5, #0
	adds r4, #0x96
	bl GetPartyGoldAmount
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl sub_8004B88
	adds r0, r5, #0
	adds r0, #0x98
	movs r1, #3
	movs r2, #0x1e
	bl sub_8004B0C
	ldr r1, _0808E4A8  @ 0xFFFFFEE2
	adds r0, r5, r1
	movs r1, #3
	movs r2, #0x24
	movs r3, #0x25
	bl sub_8004D5C
	adds r0, r5, #0
	subs r0, #0x9e
	movs r1, #3
	movs r2, #0x22
	movs r3, #0x23
	bl sub_8004D5C
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808E4A0: .4byte gUnknown_02023028
_0808E4A4: .4byte gUnknown_0202BCF0
_0808E4A8: .4byte 0xFFFFFEE2

	THUMB_FUNC_START sub_808E4AC
sub_808E4AC: @ 0x0808E4AC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r0, _0808E504  @ gUnknown_08A01B3C
	bl InitTextBatch
	adds r0, r6, #0
	bl sub_808E3F4
	adds r0, r6, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	lsls r1, r1, #2
	adds r0, #6
	adds r0, r0, r1
	ldr r0, [r0]
	bl sub_808E19C
	ldr r4, _0808E508  @ gUnknown_020235F0
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r2, [r0]
	adds r0, r4, #0
	movs r1, #2
	bl sub_8004B88
	ldr r0, _0808E50C  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xd]
	cmp r0, #0
	beq _0808E510
	adds r0, r4, #0
	adds r0, #0xe
	movs r1, #2
	movs r2, #0x14
	bl sub_8004B0C
	adds r0, r4, #0
	adds r0, #0x10
	movs r1, #2
	movs r2, #0x14
	bl sub_8004B0C
	b _0808E520
	.align 2, 0
_0808E504: .4byte gUnknown_08A01B3C
_0808E508: .4byte gUnknown_020235F0
_0808E50C: .4byte gUnknown_0202BCF0
_0808E510:
	adds r0, r4, #0
	adds r0, #0xe
	adds r1, r6, #0
	adds r1, #0x31
	ldrb r2, [r1]
	movs r1, #2
	bl sub_8004B88
_0808E520:
	adds r4, r6, #0
	adds r4, #0x2c
	movs r0, #1
	strb r0, [r4]
	bl GetChapterThing
	mov r8, r4
	cmp r0, #2
	beq _0808E548
	ldr r0, _0808E544  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x88
	ldrh r0, [r0]
	b _0808E54C
	.align 2, 0
_0808E544: .4byte gUnknown_0202BCF0
_0808E548:
	movs r0, #0xe0
	lsls r0, r0, #1
_0808E54C:
	bl GetStringFromIndex
	adds r5, r0, #0
	ldr r7, _0808E5B4  @ gUnknown_02004BAC
	movs r0, #0x60
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r7, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertString
	adds r0, r5, #0
	bl sub_808DEBC
	adds r5, r0, #0
	cmp r5, #0
	beq _0808E592
	adds r4, r7, #0
	adds r4, #8
	movs r0, #0x60
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertString
	movs r0, #2
	mov r1, r8
	strb r0, [r1]
_0808E592:
	mov r1, r8
	ldrb r0, [r1]
	cmp r0, #2
	bne _0808E5BC
	ldr r4, _0808E5B8  @ gUnknown_02022F2A
	adds r0, r7, #0
	adds r1, r4, #0
	bl Text_Draw
	adds r0, r7, #0
	adds r0, #8
	adds r4, #0x80
	adds r1, r4, #0
	bl Text_Draw
	b _0808E5C4
	.align 2, 0
_0808E5B4: .4byte gUnknown_02004BAC
_0808E5B8: .4byte gUnknown_02022F2A
_0808E5BC:
	ldr r1, _0808E5FC  @ gUnknown_02022F6A
	adds r0, r7, #0
	bl Text_Draw
_0808E5C4:
	adds r4, r6, #0
	adds r4, #0x2b
	ldrb r0, [r4]
	cmp r0, #0
	beq _0808E5E6
	ldr r0, _0808E600  @ gUnknown_0202BCF0
	ldrb r1, [r0, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _0808E5E6
	ldr r0, _0808E604  @ gUnknown_02022CDC
	ldrb r2, [r4]
	adds r2, #1
	movs r1, #0
	bl DrawDecNumber
_0808E5E6:
	bl sub_808E43C
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E5FC: .4byte gUnknown_02022F6A
_0808E600: .4byte gUnknown_0202BCF0
_0808E604: .4byte gUnknown_02022CDC

	THUMB_FUNC_START sub_808E608
sub_808E608: @ 0x0808E608
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r3, r5, #0
	adds r3, #0x2e
	ldrb r7, [r3]
	adds r4, r5, #0
	adds r4, #0x3e
	movs r0, #0
	strb r0, [r4]
	ldr r1, _0808E638  @ gKeyStatusPtr
	ldr r6, [r1]
	ldrh r2, [r6, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	mov ip, r1
	cmp r0, #0
	beq _0808E63C
	movs r0, #1
	strb r0, [r4]
	adds r0, r5, #0
	bl sub_808DCAC
	b _0808E710
	.align 2, 0
_0808E638: .4byte gKeyStatusPtr
_0808E63C:
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _0808E690
	ldrb r1, [r3]
	lsls r1, r1, #2
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r2, [r0]
	cmp r2, #0
	beq _0808E670
	ldr r0, [r2, #0xc]
	movs r1, #0xa0
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	bne _0808E670
	movs r0, #0xb
	ldrsb r0, [r2, r0]
	bl SetLastStatScreenUid
	adds r1, r5, #0
	adds r1, #0x2a
	movs r0, #1
	strb r0, [r1]
_0808E670:
	ldr r0, _0808E68C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808E682
	movs r0, #0x6a
	bl m4aSongNumStart
_0808E682:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_GotoLabel
	b _0808E710
	.align 2, 0
_0808E68C: .4byte gUnknown_0202BCF0
_0808E690:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _0808E6B8
	adds r0, r5, #0
	movs r1, #1
	bl Proc_GotoLabel
	ldr r0, _0808E6B4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808E710
	movs r0, #0x6b
	bl m4aSongNumStart
	b _0808E710
	.align 2, 0
_0808E6B4: .4byte gUnknown_0202BCF0
_0808E6B8:
	ldrh r1, [r6, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0808E6CC
	ldrb r0, [r3]
	cmp r0, #0
	beq _0808E6CC
	subs r0, #1
	strb r0, [r3]
_0808E6CC:
	mov r1, ip
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r0, #0x10
	ands r0, r1
	adds r4, r5, #0
	adds r4, #0x2e
	cmp r0, #0
	beq _0808E6E8
	ldrb r0, [r4]
	cmp r0, #0
	bne _0808E6E8
	adds r0, #1
	strb r0, [r4]
_0808E6E8:
	ldrb r0, [r4]
	cmp r0, r7
	beq _0808E710
	ldr r0, _0808E718  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808E700
	movs r0, #0x66
	bl m4aSongNumStart
_0808E700:
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r1, r5, #0
	adds r1, #0x34
	adds r1, r1, r0
	ldr r0, [r1]
	bl sub_808E19C
_0808E710:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E718: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_808E71C
sub_808E71C: @ 0x0808E71C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808E744  @ gUnknown_08A01CA4
	bl Proc_DeleteAllWithScript
	bl EndHelpPromptSprite
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808E73E
	ldr r0, [r4, #0x34]
	ldr r1, [r0, #0xc]
	movs r2, #2
	orrs r1, r2
	str r1, [r0, #0xc]
_0808E73E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808E744: .4byte gUnknown_08A01CA4

	THUMB_FUNC_START sub_808E748
sub_808E748: @ 0x0808E748
	push {lr}
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808E75A
	ldr r0, _0808E760  @ gUnknown_0859AE18
	bl Proc_CreateBlockingChild
_0808E75A:
	pop {r0}
	bx r0
	.align 2, 0
_0808E760: .4byte gUnknown_0859AE18

	THUMB_FUNC_START NewChapterStatusScreen
NewChapterStatusScreen: @ 0x0808E764
	push {r4, lr}
	adds r4, r0, #0
	cmp r4, #0
	beq _0808E784
	ldr r0, _0808E780  @ gUnknown_08A01B54
	adds r1, r4, #0
	bl Proc_CreateBlockingChild
	adds r1, r0, #0
	adds r1, #0x3f
	movs r0, #0
	strb r0, [r1]
	b _0808E790
	.align 2, 0
_0808E780: .4byte gUnknown_08A01B54
_0808E784:
	ldr r0, _0808E798  @ gUnknown_08A01B54
	movs r1, #3
	bl Proc_Create
	adds r0, #0x3f
	strb r4, [r0]
_0808E790:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808E798: .4byte gUnknown_08A01B54

	THUMB_FUNC_START sub_808E79C
sub_808E79C: @ 0x0808E79C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808E7B0  @ gUnknown_08A01C04
	bl Proc_CreateBlockingChild
	adds r0, #0x3f
	movs r1, #1
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0808E7B0: .4byte gUnknown_08A01C04

	THUMB_FUNC_START sub_808E7B4
sub_808E7B4: @ 0x0808E7B4
	push {r4, lr}
	adds r4, r0, #0
	bl LoadObjUIGfx
	ldr r0, _0808E804  @ gUnknown_08A2E4A4
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _0808E808  @ gUnknown_08A2E8F0
	movs r1, #0xb8
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _0808E80C  @ gUnknown_08A2E214
	ldr r1, _0808E810  @ 0x06016800
	bl CopyDataWithPossibleUncomp
	adds r4, #0x64
	movs r0, #0
	strh r0, [r4]
	movs r0, #0x80
	movs r1, #0x13
	bl sub_80895B4
	movs r4, #0xb8
	lsls r4, r4, #4
	ldr r0, _0808E814  @ gUnknown_0202BCF0
	bl sub_808979C
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_8089624
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808E804: .4byte gUnknown_08A2E4A4
_0808E808: .4byte gUnknown_08A2E8F0
_0808E80C: .4byte gUnknown_08A2E214
_0808E810: .4byte 0x06016800
_0808E814: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_808E818
sub_808E818: @ 0x0808E818
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r7, [r0, #0x14]
	ldr r3, _0808E990  @ gUnknown_08A01B18
	ldr r0, _0808E994  @ 0x00008580
	str r0, [sp]
	movs r0, #4
	movs r1, #4
	movs r2, #3
	bl RegisterObjectAttributes_SafeMaybe
	ldr r3, _0808E998  @ gUnknown_08A01B2C
	ldr r0, _0808E99C  @ 0x00009580
	str r0, [sp]
	movs r0, #4
	movs r1, #0x96
	movs r2, #0x7c
	bl RegisterObjectAttributes_SafeMaybe
	adds r0, r7, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808E862
	ldr r3, _0808E9A0  @ gUnknown_08A01C7C
	movs r0, #0xde
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #4
	movs r2, #0xb
	bl RegisterObjectAttributes_SafeMaybe
_0808E862:
	adds r5, r7, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	ldr r3, _0808E9A4  @ gUnknown_08A01AE6
	movs r0, #0xeb
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	movs r2, #0x2c
	bl RegisterObjectAttributes_SafeMaybe
	ldr r3, _0808E9A8  @ gUnknown_08A01AAC
	movs r4, #0
	str r4, [sp]
	movs r0, #4
	movs r1, #8
	movs r2, #0x25
	bl RegisterObjectAttributes_SafeMaybe
	ldr r3, _0808E9AC  @ gUnknown_08A01ABA
	str r4, [sp]
	movs r0, #4
	movs r1, #0x40
	movs r2, #0x25
	bl RegisterObjectAttributes_SafeMaybe
	ldr r3, _0808E9B0  @ gUnknown_08A01AD6
	str r4, [sp]
	movs r0, #4
	movs r1, #0x12
	movs r2, #0x73
	bl RegisterObjectAttributes_SafeMaybe
	ldr r3, _0808E9B4  @ gUnknown_08A01ADE
	str r4, [sp]
	movs r0, #4
	movs r1, #0x12
	movs r2, #0x83
	bl RegisterObjectAttributes_SafeMaybe
	ldr r3, _0808E9B8  @ gUnknown_08A01AC8
	str r4, [sp]
	movs r0, #4
	movs r1, #0x1c
	movs r2, #0x43
	bl RegisterObjectAttributes_SafeMaybe
	mov r8, r5
	movs r0, #0x34
	adds r0, r0, r7
	mov r9, r0
	movs r1, #0x2b
	adds r1, r1, r7
	mov sl, r1
	ldr r6, _0808E9BC  @ 0x0000A3C0
	movs r5, #0xa0
	movs r4, #1
_0808E8DA:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x3c
	ldr r3, _0808E9C0  @ gUnknown_08590F8C
	bl RegisterObjectAttributes_SafeMaybe
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _0808E8DA
	ldr r3, _0808E9C0  @ gUnknown_08590F8C
	ldr r0, _0808E9C4  @ 0x0000A3D0
	str r0, [sp]
	movs r0, #4
	movs r1, #0xb4
	movs r2, #0x4b
	bl RegisterObjectAttributes_SafeMaybe
	ldr r6, _0808E9C8  @ 0x0000A3D4
	movs r5, #0x9c
	movs r4, #1
_0808E908:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x5b
	ldr r3, _0808E9C0  @ gUnknown_08590F8C
	bl RegisterObjectAttributes_SafeMaybe
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _0808E908
	ldr r4, _0808E9CC  @ gUnknown_020230CE
	bl GetGameClock
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	movs r3, #0
	bl sub_8004C68
	movs r0, #1
	bl BG_EnableSyncByMask
	mov r1, r8
	ldrb r0, [r1]
	lsls r0, r0, #2
	add r0, r9
	ldr r3, [r0]
	cmp r3, #0
	beq _0808E950
	movs r0, #4
	movs r1, #0x88
	movs r2, #0x3d
	bl sub_8027B60
_0808E950:
	bl SMS_FlushDirect
	mov r1, sl
	ldrb r0, [r1]
	cmp r0, #0
	beq _0808E97A
	ldr r0, _0808E9D0  @ gUnknown_0202BCF0
	ldrb r1, [r0, #0x14]
	movs r0, #4
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _0808E97A
	ldr r3, _0808E9D4  @ gUnknown_08A01AA4
	str r0, [sp]
	movs r0, #4
	movs r1, #0xdb
	movs r2, #3
	bl RegisterObjectAttributes_SafeMaybe
_0808E97A:
	adds r0, r7, #0
	bl sub_808DE38
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E990: .4byte gUnknown_08A01B18
_0808E994: .4byte 0x00008580
_0808E998: .4byte gUnknown_08A01B2C
_0808E99C: .4byte 0x00009580
_0808E9A0: .4byte gUnknown_08A01C7C
_0808E9A4: .4byte gUnknown_08A01AE6
_0808E9A8: .4byte gUnknown_08A01AAC
_0808E9AC: .4byte gUnknown_08A01ABA
_0808E9B0: .4byte gUnknown_08A01AD6
_0808E9B4: .4byte gUnknown_08A01ADE
_0808E9B8: .4byte gUnknown_08A01AC8
_0808E9BC: .4byte 0x0000A3C0
_0808E9C0: .4byte gUnknown_08590F8C
_0808E9C4: .4byte 0x0000A3D0
_0808E9C8: .4byte 0x0000A3D4
_0808E9CC: .4byte gUnknown_020230CE
_0808E9D0: .4byte gUnknown_0202BCF0
_0808E9D4: .4byte gUnknown_08A01AA4

	THUMB_FUNC_START sub_808E9D8
sub_808E9D8: @ 0x0808E9D8
	ldr r3, _0808E9E8  @ gUnknown_0203E82C
	lsls r0, r0, #0xa
	ldr r1, [r3, #0x48]
	ldr r2, _0808E9EC  @ 0x000003FF
	ands r1, r2
	orrs r1, r0
	str r1, [r3, #0x48]
	bx lr
	.align 2, 0
_0808E9E8: .4byte gUnknown_0203E82C
_0808E9EC: .4byte 0x000003FF

	THUMB_FUNC_START sub_808E9F0
sub_808E9F0: @ 0x0808E9F0
	push {r4, lr}
	ldr r4, _0808EA10  @ gUnknown_0203E82C
	ldr r3, [r4, #0x48]
	lsrs r2, r3, #0xa
	ldr r1, _0808EA14  @ 0x003FFFFF
	ands r1, r0
	orrs r2, r1
	lsls r2, r2, #0xa
	ldr r0, _0808EA18  @ 0x000003FF
	ands r0, r3
	orrs r0, r2
	str r0, [r4, #0x48]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808EA10: .4byte gUnknown_0203E82C
_0808EA14: .4byte 0x003FFFFF
_0808EA18: .4byte 0x000003FF

	THUMB_FUNC_START sub_808EA1C
sub_808EA1C: @ 0x0808EA1C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_808EA3C
	adds r1, r0, #0
	ldr r0, _0808EA38  @ 0x003FFFFF
	eors r0, r4
	ands r0, r1
	bl sub_808E9D8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808EA38: .4byte 0x003FFFFF

	THUMB_FUNC_START sub_808EA3C
sub_808EA3C: @ 0x0808EA3C
	ldr r0, _0808EA44  @ gUnknown_0203E82C
	ldr r0, [r0, #0x48]
	lsrs r0, r0, #0xa
	bx lr
	.align 2, 0
_0808EA44: .4byte gUnknown_0203E82C

	THUMB_FUNC_START sub_808EA48
sub_808EA48: @ 0x0808EA48
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r2, #0x20
	orrs r1, r2
	ldr r2, _0808EA64  @ gUnknown_0203E82C
	lsls r1, r1, #8
	adds r1, #0x40
	adds r0, r0, r1
	adds r2, #0x4c
	strh r0, [r2]
	bx lr
	.align 2, 0
_0808EA64: .4byte gUnknown_0203E82C

	THUMB_FUNC_START sub_808EA68
sub_808EA68: @ 0x0808EA68
	ldr r0, _0808EA70  @ gUnknown_0203E82C
	adds r0, #0x4c
	ldrh r0, [r0]
	bx lr
	.align 2, 0
_0808EA70: .4byte gUnknown_0203E82C

	THUMB_FUNC_START sub_808EA74
sub_808EA74: @ 0x0808EA74
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r1, #0x10
	ldr r2, _0808EA88  @ gUnknown_0203E82C
	lsrs r1, r1, #8
	adds r0, r0, r1
	adds r2, #0x4e
	strh r0, [r2]
	bx lr
	.align 2, 0
_0808EA88: .4byte gUnknown_0203E82C

	THUMB_FUNC_START sub_808EA8C
sub_808EA8C: @ 0x0808EA8C
	ldr r0, _0808EA94  @ gUnknown_0203E82C
	adds r0, #0x4e
	ldrh r0, [r0]
	bx lr
	.align 2, 0
_0808EA94: .4byte gUnknown_0203E82C

	THUMB_FUNC_START sub_808EA98
sub_808EA98: @ 0x0808EA98
	push {r4, r5, lr}
	ldr r0, _0808EAF8  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0xa0
	bls _0808EAAA
	movs r4, #0
_0808EAAA:
	ldr r0, _0808EAFC  @ gUnknown_0203E82C
	adds r5, r0, #0
	adds r5, #0x48
	ldrb r0, [r5]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x18
	subs r0, #0x20
	cmp r4, r0
	bne _0808EACC
	bl sub_808EA68
	ldr r1, _0808EB00  @ 0x04000050
	strh r0, [r1]
	bl sub_808EA8C
	ldr r1, _0808EB04  @ 0x04000052
	strh r0, [r1]
_0808EACC:
	cmp r4, #0
	beq _0808EADE
	ldrh r0, [r5]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1b
	lsls r0, r0, #3
	adds r0, #4
	cmp r4, r0
	bne _0808EAF2
_0808EADE:
	ldr r1, _0808EB00  @ 0x04000050
	ldr r2, _0808EB08  @ gUnknown_030030BC
	ldrh r0, [r2]
	strh r0, [r1]
	ldr r3, _0808EB04  @ 0x04000052
	ldrb r1, [r2, #8]
	ldrb r0, [r2, #9]
	lsls r0, r0, #8
	adds r1, r1, r0
	strh r1, [r3]
_0808EAF2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808EAF8: .4byte 0x04000006
_0808EAFC: .4byte gUnknown_0203E82C
_0808EB00: .4byte 0x04000050
_0808EB04: .4byte 0x04000052
_0808EB08: .4byte gUnknown_030030BC

	THUMB_FUNC_START sub_808EB0C
sub_808EB0C: @ 0x0808EB0C
	push {r4, r5, lr}
	sub sp, #0x40
	adds r3, r0, #0
	add r2, sp, #0x18
	ldr r1, [r3, #0x2c]
	ldrb r0, [r1]
	adds r5, r2, #0
	cmp r0, #0x80
	bne _0808EBB6
	ldrb r0, [r1, #1]
	cmp r0, #0x23
	bne _0808EBB6
	adds r0, r1, #2
	str r0, [r3, #0x2c]
	ldrb r0, [r1, #2]
	add r4, sp, #0x38
	cmp r0, #1
	beq _0808EB46
_0808EB30:
	ldr r1, [r3, #0x2c]
	ldrb r0, [r1]
	strb r0, [r2]
	ldrb r0, [r1, #1]
	strb r0, [r2, #1]
	adds r0, r1, #2
	str r0, [r3, #0x2c]
	adds r2, #2
	ldrb r0, [r1, #2]
	cmp r0, #1
	bne _0808EB30
_0808EB46:
	ldr r0, [r3, #0x2c]
	adds r0, #1
	str r0, [r3, #0x2c]
	movs r0, #0
	strb r0, [r2]
	movs r0, #0x80
	lsls r0, r0, #9
	bl sub_808E9F0
	ldr r1, _0808EBC0  @ 0x06017800
	mov r0, sp
	movs r2, #0x12
	bl InitSomeOtherGraphicsRelatedStruct
	mov r0, sp
	bl SetFont
	adds r0, r4, #0
	bl Text_Init3
	adds r0, r4, #0
	movs r1, #0
	bl Text_80046B4
	movs r0, #0
	bl SetFontGlyphSet
	movs r0, #0x30
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertString
	movs r0, #0
	bl SetFont
	ldr r0, _0808EBC4  @ gUnknown_0859EF00
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _0808EBC8  @ gUnknown_085A643C
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _0808EBCC  @ gUnknown_085A638C
	ldr r1, _0808EBD0  @ 0x06017900
	bl CopyDataWithPossibleUncomp
_0808EBB6:
	add sp, #0x40
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808EBC0: .4byte 0x06017800
_0808EBC4: .4byte gUnknown_0859EF00
_0808EBC8: .4byte gUnknown_085A643C
_0808EBCC: .4byte gUnknown_085A638C
_0808EBD0: .4byte 0x06017900

	THUMB_FUNC_START sub_808EBD4
sub_808EBD4: @ 0x0808EBD4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r6, r0, #0
	movs r0, #0
	str r0, [sp, #4]
	str r0, [sp, #8]
	adds r1, r6, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	bl sub_808EA3C
	lsrs r0, r0, #0xb
	movs r1, #7
	ands r0, r1
	cmp r0, #0
	beq _0808EC0E
	bl sub_808EA3C
	lsrs r0, r0, #0xb
	movs r1, #7
	ands r0, r1
	subs r0, #1
	b _0808EC12
_0808EC0E:
	bl GetTextDisplaySpeed
_0808EC12:
	adds r1, r6, #0
	adds r1, #0x52
	strb r0, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	movs r2, #0x7f
	cmp r0, #0
	beq _0808EC24
	movs r2, #1
_0808EC24:
	adds r0, r6, #0
	adds r0, #0x53
	movs r1, #0
	strb r2, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #0xa
	strb r1, [r0]
	adds r0, r6, #0
	bl sub_808EB0C
	adds r0, r6, #0
	adds r0, #0x5b
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r7, r0, #0
	movs r0, #0x5c
	adds r0, r0, r6
	mov r9, r0
	cmp r1, #0
	blt _0808EC58
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0808EC8A
_0808EC58:
	movs r0, #1
	bl SetFontGlyphSet
	ldr r0, [r6, #0x2c]
	add r2, sp, #8
	add r1, sp, #4
	bl sub_808F428
	movs r0, #0
	bl SetFontGlyphSet
	ldr r1, [sp, #4]
	adds r0, r1, #7
	cmp r0, #0
	bge _0808EC78
	adds r0, #7
_0808EC78:
	asrs r0, r0, #3
	strb r0, [r7]
	ldr r0, [sp, #8]
	cmp r0, #0
	bge _0808EC84
	adds r0, #7
_0808EC84:
	asrs r0, r0, #3
	mov r1, r9
	strb r0, [r1]
_0808EC8A:
	bl sub_808EA3C
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0808EC98
	b _0808EDE6
_0808EC98:
	movs r2, #0x58
	adds r2, r2, r6
	mov r8, r2
	mov r3, r9
	movs r0, #0
	ldrsb r0, [r3, r0]
	mvns r0, r0
	ldrb r1, [r2]
	adds r0, r0, r1
	str r0, [sp, #0x10]
	bl sub_808EA3C
	movs r1, #2
	ands r1, r0
	cmp r1, #0
	beq _0808ED38
	adds r5, r6, #0
	adds r5, #0x57
	ldrb r0, [r5]
	movs r1, #0
	ldrsb r1, [r7, r1]
	subs r0, r0, r1
	subs r0, #2
	str r0, [sp, #0xc]
	bl sub_808EA3C
	movs r2, #0xc0
	lsls r2, r2, #8
	mov sl, r2
	ands r0, r2
	lsrs r0, r0, #0xe
	ldrb r1, [r5]
	movs r3, #0
	ldrsb r3, [r7, r3]
	subs r1, r1, r3
	subs r1, #2
	mov ip, r1
	mov r7, r9
	movs r4, #0
	ldrsb r4, [r7, r4]
	mvns r2, r4
	mov r1, r8
	ldrb r1, [r1]
	adds r2, r2, r1
	adds r3, #2
	adds r4, #2
	str r4, [sp]
	mov r1, ip
	bl sub_8008668
	bl sub_808EA3C
	movs r1, #0x80
	lsls r1, r1, #3
	ands r1, r0
	cmp r1, #0
	bne _0808EDAA
	bl sub_808EA3C
	movs r1, #0x80
	lsls r1, r1, #0xb
	ands r1, r0
	movs r4, #3
	cmp r1, #0
	beq _0808ED1C
	movs r4, #5
_0808ED1C:
	bl sub_808EA3C
	mov r2, sl
	ands r0, r2
	lsrs r0, r0, #0xe
	ldrb r1, [r5]
	subs r1, #1
	mov r3, r8
	ldrb r2, [r3]
	subs r2, #2
	adds r3, r4, #0
	bl sub_80084E0
	b _0808EDAA
_0808ED38:
	adds r5, r6, #0
	adds r5, #0x57
	ldrb r0, [r5]
	adds r0, #1
	str r0, [sp, #0xc]
	bl sub_808EA3C
	movs r1, #0xc0
	lsls r1, r1, #8
	mov sl, r1
	ands r0, r1
	lsrs r0, r0, #0xe
	ldrb r1, [r5]
	adds r1, #1
	mov ip, r1
	mov r2, r9
	movs r4, #0
	ldrsb r4, [r2, r4]
	mvns r2, r4
	mov r3, r8
	ldrb r3, [r3]
	adds r2, r2, r3
	movs r3, #0
	ldrsb r3, [r7, r3]
	adds r3, #2
	adds r4, #2
	str r4, [sp]
	bl sub_8008668
	bl sub_808EA3C
	movs r1, #0x80
	lsls r1, r1, #3
	ands r1, r0
	cmp r1, #0
	bne _0808EDAA
	bl sub_808EA3C
	movs r1, #0x80
	lsls r1, r1, #0xb
	ands r1, r0
	movs r4, #2
	cmp r1, #0
	beq _0808ED92
	movs r4, #5
_0808ED92:
	bl sub_808EA3C
	mov r7, sl
	ands r0, r7
	lsrs r0, r0, #0xe
	ldrb r1, [r5]
	mov r3, r8
	ldrb r2, [r3]
	subs r2, #2
	adds r3, r4, #0
	bl sub_80084E0
_0808EDAA:
	bl sub_808EA3C
	movs r1, #0x80
	lsls r1, r1, #9
	ands r1, r0
	cmp r1, #0
	beq _0808EDE0
	bl sub_808EA3C
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r0, r1
	lsrs r0, r0, #0xe
	bl BG_GetMapBuffer
	ldr r7, [sp, #0x10]
	lsls r1, r7, #6
	adds r0, r0, r1
	ldr r2, [sp, #0xc]
	lsls r1, r2, #1
	adds r0, r0, r1
	movs r1, #6
	movs r2, #0
	movs r3, #0
	bl TileMap_FillRect
_0808EDE0:
	movs r0, #0xf
	bl BG_EnableSyncByMask
_0808EDE6:
	adds r0, r6, #0
	bl sub_808F3D8
	ldr r0, _0808EE5C  @ sub_808F5C8
	adds r1, r6, #0
	bl Get6CDifferedLoop6C
	ldr r0, [r6, #0x30]
	bl SetFont
	movs r0, #1
	bl SetFontGlyphSet
	mov r3, r9
	movs r0, #0
	ldrsb r0, [r3, r0]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	movs r5, #0
	cmp r0, #0
	blt _0808EE38
_0808EE10:
	lsls r0, r5, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r4, r4, r0
	ldr r0, [r4]
	bl Text_Init3
	ldr r0, [r4]
	movs r1, #0xb
	bl Text_SetColorId
	adds r5, #1
	mov r7, r9
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r5, r0
	ble _0808EE10
_0808EE38:
	adds r0, r6, #0
	bl sub_808F2BC
	movs r0, #0
	bl SetFont
	bl sub_808EA3C
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0808EE60
	adds r0, r6, #0
	movs r1, #3
	bl Proc_GotoLabel
	b _0808EF30
	.align 2, 0
_0808EE5C: .4byte sub_808F5C8
_0808EE60:
	bl sub_808EA3C
	movs r1, #0x80
	ands r1, r0
	cmp r1, #0
	beq _0808EE7E
	movs r0, #0x10
	movs r1, #1
	bl sub_808EA74
	adds r0, r6, #0
	movs r1, #3
	bl Proc_GotoLabel
	b _0808EE86
_0808EE7E:
	movs r0, #0
	movs r1, #0x10
	bl sub_808EA74
_0808EE86:
	bl sub_808EA3C
	movs r1, #0x80
	lsls r1, r1, #9
	ands r1, r0
	cmp r1, #0
	beq _0808EEA4
	ldr r5, _0808EEA0  @ gUnknown_0203E82C
	adds r4, r6, #0
	adds r4, #0x58
	ldrb r1, [r4]
	subs r1, #5
	b _0808EEAE
	.align 2, 0
_0808EEA0: .4byte gUnknown_0203E82C
_0808EEA4:
	ldr r5, _0808EF58  @ gUnknown_0203E82C
	adds r4, r6, #0
	adds r4, #0x58
	ldrb r1, [r4]
	subs r1, #1
_0808EEAE:
	adds r3, r5, #0
	adds r3, #0x48
	movs r0, #0x1f
	ands r1, r0
	ldrb r2, [r3]
	movs r0, #0x20
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3]
	mov r0, r9
	movs r1, #0
	ldrsb r1, [r0, r1]
	ldrb r4, [r4]
	adds r1, r1, r4
	adds r1, #1
	adds r3, r5, #0
	adds r3, #0x48
	movs r2, #0x1f
	mov r8, r2
	mov r7, r8
	ands r1, r7
	lsls r1, r1, #5
	ldrh r2, [r3]
	ldr r0, _0808EF5C  @ 0xFFFFFC1F
	ands r0, r2
	orrs r0, r1
	strh r0, [r3]
	bl sub_808EA3C
	movs r6, #0xc0
	lsls r6, r6, #8
	ands r0, r6
	lsrs r0, r0, #0xe
	movs r4, #1
	adds r5, r4, #0
	lsls r5, r0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	bl sub_808EA3C
	ands r0, r6
	lsrs r0, r0, #0xe
	lsls r4, r0
	mov r0, r8
	eors r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_808EA48
	bl sub_808EA3C
	movs r1, #0x80
	lsls r1, r1, #0xc
	ands r1, r0
	cmp r1, #0
	bne _0808EF30
	movs r0, #0
	bl SetSecondaryHBlankHandler
	ldr r0, _0808EF60  @ sub_808EA98
	bl SetSecondaryHBlankHandler
_0808EF30:
	bl sub_808EA3C
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r0, r1
	lsrs r0, r0, #0xe
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808EF58: .4byte gUnknown_0203E82C
_0808EF5C: .4byte 0xFFFFFC1F
_0808EF60: .4byte sub_808EA98

	THUMB_FUNC_START sub_808EF64
sub_808EF64: @ 0x0808EF64
	adds r0, #0x56
	movs r1, #0
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START sub_808EF6C
sub_808EF6C: @ 0x0808EF6C
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x56
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r2, [r1]
	cmp r2, #0x10
	beq _0808EF8A
	movs r0, #0x10
	subs r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	b _0808EF8C
_0808EF8A:
	movs r1, #1
_0808EF8C:
	adds r0, r2, #0
	bl sub_808EA74
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	cmp r0, #0x10
	bne _0808EFA2
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0808EFA2:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808EFA8
sub_808EFA8: @ 0x0808EFA8
	push {r4, lr}
	adds r4, r0, #0
	bl sub_808F2BC
	movs r0, #0
	bl sub_80057A8
	movs r1, #0x11
	negs r1, r1
	ands r1, r0
	movs r0, #0
	bl sub_800578C
	bl sub_808FFE8
	bl sub_808EA3C
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0808EFDC
	adds r0, r4, #0
	movs r1, #5
	bl Proc_GotoLabel
	b _0808EFE4
_0808EFDC:
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #0x10
	strb r0, [r1]
_0808EFE4:
	bl sub_808EA3C
	movs r1, #0x80
	lsls r1, r1, #0xa
	ands r1, r0
	cmp r1, #0
	beq _0808EFFC
	ldr r0, _0808F004  @ gUnknown_08591154
	bl Proc_Find
	bl sub_8005F38
_0808EFFC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808F004: .4byte gUnknown_08591154

	THUMB_FUNC_START sub_808F008
sub_808F008: @ 0x0808F008
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x56
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	ldrb r2, [r1]
	cmp r2, #0x10
	beq _0808F026
	movs r0, #0x10
	subs r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	b _0808F028
_0808F026:
	movs r1, #1
_0808F028:
	adds r0, r2, #0
	bl sub_808EA74
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808F046
	movs r0, #0x80
	lsls r0, r0, #9
	bl sub_808EA1C
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0808F046:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808F04C
sub_808F04C: @ 0x0808F04C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808F080  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xa
	ands r0, r1
	cmp r0, #0
	beq _0808F07A
	bl sub_808EA3C
	movs r1, #0x40
	ands r1, r0
	cmp r1, #0
	bne _0808F07A
	bl sub_800D3E4
	bl sub_808FFE8
	adds r0, r4, #0
	movs r1, #0
	bl Proc_GotoLabel
_0808F07A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808F080: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_808F084
sub_808F084: @ 0x0808F084
	push {r4, lr}
	adds r4, r0, #0
	bl sub_808EA3C
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r0, r1
	lsrs r0, r0, #0xe
	bl BG_GetMapBuffer
	adds r1, r4, #0
	adds r1, #0x58
	ldrb r1, [r1]
	subs r1, #1
	lsls r1, r1, #6
	adds r0, r0, r1
	adds r4, #0x5c
	movs r2, #0
	ldrsb r2, [r4, r2]
	adds r2, #1
	movs r1, #0x1f
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #0xf
	bl BG_EnableSyncByMask
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808F0C4
sub_808F0C4: @ 0x0808F0C4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl sub_80057A8
	movs r1, #0x11
	negs r1, r1
	ands r1, r0
	movs r0, #0
	bl sub_800578C
	adds r0, r4, #0
	bl sub_808F084
	movs r0, #0
	bl SetSecondaryHBlankHandler
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808F0EC
sub_808F0EC: @ 0x0808F0EC
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_808F2BC
	adds r0, r5, #0
	adds r0, #0x54
	movs r4, #0
	strb r4, [r0]
	movs r0, #1
	bl SetFontGlyphSet
	adds r1, r5, #0
	adds r1, #0x59
	strb r4, [r1]
	adds r2, r5, #0
	adds r2, #0x5a
	strb r4, [r2]
	ldr r0, [r5, #0x2c]
	bl sub_808F358
	movs r0, #0
	bl SetFontGlyphSet
	adds r0, r5, #0
	bl sub_808FFC4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808F128
sub_808F128: @ 0x0808F128
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov sl, r0
	str r1, [sp]
	str r2, [sp, #4]
	str r3, [sp, #8]
	ldr r7, [sp, #0x30]
	ldr r5, [sp, #0x34]
	ldr r6, _0808F17C  @ gUnknown_08A01DBC
	adds r0, r6, #0
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _0808F18A
	ldr r0, [sp, #0x2c]
	bl GetStringFromIndex
	str r0, [r4, #0x2c]
	bl sub_808F5A0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808F166
	bl sub_800A2A4
	str r0, [r4, #0x2c]
_0808F166:
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	cmp r0, #0x10
	bne _0808F180
	adds r0, r4, #0
	movs r1, #3
	bl Proc_GotoLabel
	b _0808F254
	.align 2, 0
_0808F17C: .4byte gUnknown_08A01DBC
_0808F180:
	adds r0, r4, #0
	movs r1, #2
	bl Proc_GotoLabel
	b _0808F254
_0808F18A:
	ldr r0, [sp, #0x38]
	cmp r0, #0
	beq _0808F19A
	adds r0, r6, #0
	ldr r1, [sp, #0x38]
	bl Proc_CreateBlockingChild
	b _0808F1A2
_0808F19A:
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Create
_0808F1A2:
	adds r4, r0, #0
	movs r0, #0x80
	lsls r0, r0, #7
	bl sub_808E9D8
	bl sub_8006A98
	ldr r0, _0808F264  @ gUnknown_0203E82C
	str r0, [r4, #0x30]
	adds r3, r4, #0
	adds r3, #0x57
	adds r6, r4, #0
	adds r6, #0x58
	movs r1, #0x5b
	adds r1, r1, r4
	mov ip, r1
	movs r1, #0x5c
	adds r1, r1, r4
	mov r8, r1
	movs r1, #0x50
	adds r1, r1, r4
	mov r9, r1
	adds r2, r4, #0
	adds r2, #0x34
	adds r0, #0x40
	adds r1, r4, #0
	adds r1, #0x48
_0808F1D8:
	str r0, [r1]
	subs r0, #8
	subs r1, #4
	cmp r1, r2
	bge _0808F1D8
	mov r0, sl
	strb r0, [r3]
	mov r1, sp
	ldrb r1, [r1]
	strb r1, [r6]
	mov r0, sp
	ldrb r1, [r0, #4]
	mov r0, ip
	strb r1, [r0]
	mov r0, sp
	ldrb r1, [r0, #8]
	mov r0, r8
	strb r1, [r0]
	str r7, [r4, #0x4c]
	cmp r5, #0
	bge _0808F204
	movs r5, #5
_0808F204:
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r5
	adds r5, r0, #0
	adds r5, #0x10
	cmp r7, #0
	bne _0808F214
	ldr r7, _0808F268  @ 0x06013000
_0808F214:
	ldr r0, [r4, #0x30]
	adds r1, r7, #0
	adds r2, r5, #0
	bl InitSomeOtherGraphicsRelatedStruct
	movs r0, #0
	bl SetFont
	ldr r0, _0808F26C  @ gUnknown_0859EF60
	lsls r1, r5, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	lsls r0, r7, #0x11
	lsrs r0, r0, #0x16
	ands r5, r6
	lsls r1, r5, #0xc
	adds r0, r0, r1
	mov r1, r9
	strh r0, [r1]
	ldr r0, [sp, #0x2c]
	bl GetStringFromIndex
	str r0, [r4, #0x2c]
	bl sub_808F5A0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808F254
	bl sub_800A2A4
	str r0, [r4, #0x2c]
_0808F254:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808F264: .4byte gUnknown_0203E82C
_0808F268: .4byte 0x06013000
_0808F26C: .4byte gUnknown_0859EF60

	THUMB_FUNC_START sub_808F270
sub_808F270: @ 0x0808F270
	push {lr}
	ldr r0, _0808F280  @ gUnknown_08A01DBC
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_0808F280: .4byte gUnknown_08A01DBC

	THUMB_FUNC_START sub_808F284
sub_808F284: @ 0x0808F284
	push {lr}
	ldr r0, _0808F294  @ gUnknown_08A01DBC
	bl Proc_Find
	cmp r0, #0
	bne _0808F298
	movs r0, #0
	b _0808F29A
	.align 2, 0
_0808F294: .4byte gUnknown_08A01DBC
_0808F298:
	movs r0, #1
_0808F29A:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808F2A0
sub_808F2A0: @ 0x0808F2A0
	push {lr}
	ldr r0, _0808F2B8  @ gUnknown_08A01DBC
	bl Proc_Find
	cmp r0, #0
	beq _0808F2B2
	movs r1, #0
	bl Proc_GotoLabel
_0808F2B2:
	pop {r0}
	bx r0
	.align 2, 0
_0808F2B8: .4byte gUnknown_08A01DBC

	THUMB_FUNC_START sub_808F2BC
sub_808F2BC: @ 0x0808F2BC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x30]
	bl SetFont
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	movs r4, #0
	cmp r0, #0
	blt _0808F300
_0808F2DA:
	lsls r1, r4, #2
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #0
	bl Text_80046B4
	adds r4, #1
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r4, r0
	ble _0808F2DA
_0808F300:
	movs r0, #0
	bl SetFont
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808F30C
sub_808F30C: @ 0x0808F30C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x30]
	bl SetFont
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	movs r4, #0
	cmp r0, #0
	blt _0808F350
_0808F32A:
	lsls r1, r4, #2
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #0
	bl Text_SetXCursor
	adds r4, #1
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r4, r0
	ble _0808F32A
_0808F350:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808F358
sub_808F358: @ 0x0808F358
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	mov r8, r1
	adds r7, r2, #0
	movs r6, #0
	ldrb r5, [r7]
	movs r0, #1
	bl SetFontGlyphSet
_0808F370:
	ldrb r0, [r4]
	cmp r0, #7
	bgt _0808F392
	cmp r0, #4
	bge _0808F3A4
	cmp r0, #1
	beq _0808F3A8
	cmp r0, #1
	bgt _0808F388
	cmp r0, #0
	beq _0808F3C4
	b _0808F3B4
_0808F388:
	cmp r0, #2
	beq _0808F3A4
	cmp r0, #3
	beq _0808F3C4
	b _0808F3B4
_0808F392:
	cmp r0, #0x19
	ble _0808F39C
	cmp r0, #0x80
	beq _0808F3B0
	b _0808F3B4
_0808F39C:
	cmp r0, #0x18
	bge _0808F3C4
	cmp r0, #0x16
	blt _0808F3B4
_0808F3A4:
	adds r4, #1
	b _0808F370
_0808F3A8:
	adds r4, #1
	adds r5, #0x10
	movs r6, #0
	b _0808F370
_0808F3B0:
	adds r4, #2
	b _0808F370
_0808F3B4:
	adds r0, r4, #0
	mov r1, sp
	bl GetCharTextWidth
	adds r4, r0, #0
	ldr r0, [sp]
	adds r6, r6, r0
	b _0808F370
_0808F3C4:
	mov r0, r8
	strb r6, [r0]
	strb r5, [r7]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808F3D8
sub_808F3D8: @ 0x0808F3D8
	push {r4, lr}
	adds r4, r0, #0
	bl sub_808EA3C
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne _0808F420
	bl sub_808EA3C
	movs r1, #2
	ands r1, r0
	cmp r1, #0
	beq _0808F406
	adds r1, r4, #0
	adds r1, #0x57
	adds r0, r4, #0
	adds r0, #0x5b
	ldrb r0, [r0]
	mvns r0, r0
	ldrb r2, [r1]
	adds r0, r0, r2
	b _0808F40E
_0808F406:
	adds r1, r4, #0
	adds r1, #0x57
	ldrb r0, [r1]
	adds r0, #2
_0808F40E:
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x58
	adds r1, r4, #0
	adds r1, #0x5c
	ldrb r0, [r2]
	ldrb r1, [r1]
	subs r0, r0, r1
	strb r0, [r2]
_0808F420:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808F428
sub_808F428: @ 0x0808F428
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	mov r8, r1
	adds r7, r2, #0
	movs r5, #0
	movs r6, #0x10
	str r5, [r1]
	str r5, [r7]
	movs r0, #1
	bl SetFontGlyphSet
_0808F444:
	ldrb r2, [r4]
	cmp r2, #0x19
	bhi _0808F4D0
	lsls r0, r2, #2
	ldr r1, _0808F454  @ _0808F458
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808F454: .4byte _0808F458
_0808F458: @ jump table
	.4byte _0808F4C2 @ case 0
	.4byte _0808F4C2 @ case 1
	.4byte _0808F4C2 @ case 2
	.4byte _0808F4C0 @ case 3
	.4byte _0808F4D0 @ case 4
	.4byte _0808F4D0 @ case 5
	.4byte _0808F4D0 @ case 6
	.4byte _0808F4D0 @ case 7
	.4byte _0808F4D0 @ case 8
	.4byte _0808F4D0 @ case 9
	.4byte _0808F4D0 @ case 10
	.4byte _0808F4D0 @ case 11
	.4byte _0808F4D0 @ case 12
	.4byte _0808F4D0 @ case 13
	.4byte _0808F4D0 @ case 14
	.4byte _0808F4D0 @ case 15
	.4byte _0808F4D0 @ case 16
	.4byte _0808F4D0 @ case 17
	.4byte _0808F4D0 @ case 18
	.4byte _0808F4D0 @ case 19
	.4byte _0808F4D0 @ case 20
	.4byte _0808F4D0 @ case 21
	.4byte _0808F4D0 @ case 22
	.4byte _0808F4D0 @ case 23
	.4byte _0808F4C2 @ case 24
	.4byte _0808F4C2 @ case 25
_0808F4C0:
	adds r5, #8
_0808F4C2:
	mov r1, r8
	ldr r0, [r1]
	cmp r0, r5
	bge _0808F4CC
	str r5, [r1]
_0808F4CC:
	movs r5, #0
	ldrb r2, [r4]
_0808F4D0:
	cmp r2, #0x19
	bhi _0808F55C
	lsls r0, r2, #2
	ldr r1, _0808F4E0  @ _0808F4E4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808F4E0: .4byte _0808F4E4
_0808F4E4: @ jump table
	.4byte _0808F550 @ case 0
	.4byte _0808F54C @ case 1
	.4byte _0808F550 @ case 2
	.4byte _0808F55C @ case 3
	.4byte _0808F55C @ case 4
	.4byte _0808F55C @ case 5
	.4byte _0808F55C @ case 6
	.4byte _0808F55C @ case 7
	.4byte _0808F55C @ case 8
	.4byte _0808F55C @ case 9
	.4byte _0808F55C @ case 10
	.4byte _0808F55C @ case 11
	.4byte _0808F55C @ case 12
	.4byte _0808F55C @ case 13
	.4byte _0808F55C @ case 14
	.4byte _0808F55C @ case 15
	.4byte _0808F55C @ case 16
	.4byte _0808F55C @ case 17
	.4byte _0808F55C @ case 18
	.4byte _0808F55C @ case 19
	.4byte _0808F55C @ case 20
	.4byte _0808F55C @ case 21
	.4byte _0808F55C @ case 22
	.4byte _0808F55C @ case 23
	.4byte _0808F54C @ case 24
	.4byte _0808F54C @ case 25
_0808F54C:
	adds r6, #0x10
	b _0808F55C
_0808F550:
	ldr r0, [r7]
	cmp r0, r6
	bge _0808F558
	str r6, [r7]
_0808F558:
	movs r6, #0
	ldrb r2, [r4]
_0808F55C:
	adds r0, r2, #0
	cmp r0, #7
	bgt _0808F56C
	cmp r0, #1
	bge _0808F57A
	cmp r0, #0
	beq _0808F592
	b _0808F582
_0808F56C:
	cmp r2, #0x16
	blt _0808F582
	cmp r2, #0x19
	ble _0808F57A
	cmp r2, #0x80
	beq _0808F57E
	b _0808F582
_0808F57A:
	adds r4, #1
	b _0808F444
_0808F57E:
	adds r4, #2
	b _0808F444
_0808F582:
	adds r0, r4, #0
	mov r1, sp
	bl GetCharTextWidth
	adds r4, r0, #0
	ldr r0, [sp]
	adds r5, r5, r0
	b _0808F444
_0808F592:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808F5A0
sub_808F5A0: @ 0x0808F5A0
	push {lr}
	adds r1, r0, #0
_0808F5A4:
	ldrb r0, [r1]
	cmp r0, #0
	beq _0808F5B0
	cmp r0, #0x80
	beq _0808F5B4
	b _0808F5C0
_0808F5B0:
	movs r0, #0
	b _0808F5C4
_0808F5B4:
	adds r1, #1
	ldrb r0, [r1]
	cmp r0, #0x20
	bne _0808F5C0
	movs r0, #1
	b _0808F5C4
_0808F5C0:
	adds r1, #1
	b _0808F5A4
_0808F5C4:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808F5C8
sub_808F5C8: @ 0x0808F5C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	mov r8, r0
	adds r0, #0x57
	ldrb r0, [r0]
	lsls r6, r0, #3
	mov r0, r8
	adds r0, #0x58
	ldrb r0, [r0]
	lsls r7, r0, #3
	movs r0, #0
	mov r9, r0
	bl sub_808EA3C
	movs r1, #0x80
	lsls r1, r1, #1
	ands r1, r0
	negs r1, r1
	asrs r1, r1, #0x1f
	movs r0, #0x80
	lsls r0, r0, #3
	ands r1, r0
	str r1, [sp, #4]
	bl sub_808EA3C
	adds r1, r0, #0
	movs r2, #0xc0
	lsls r2, r2, #8
	ands r1, r2
	movs r0, #0x80
	lsls r0, r0, #7
	cmp r1, r0
	beq _0808F638
	cmp r1, r0
	bhi _0808F61C
	cmp r1, #0
	beq _0808F62A
	b _0808F662
_0808F61C:
	movs r0, #0x80
	lsls r0, r0, #8
	cmp r1, r0
	beq _0808F648
	cmp r1, r2
	beq _0808F658
	b _0808F662
_0808F62A:
	ldr r0, _0808F634  @ gLCDControlBuffer
	ldrh r1, [r0, #0x1c]
	subs r6, r6, r1
	ldrh r0, [r0, #0x1e]
	b _0808F660
	.align 2, 0
_0808F634: .4byte gLCDControlBuffer
_0808F638:
	ldr r0, _0808F644  @ gLCDControlBuffer
	ldrh r1, [r0, #0x20]
	subs r6, r6, r1
	ldrh r0, [r0, #0x22]
	b _0808F660
	.align 2, 0
_0808F644: .4byte gLCDControlBuffer
_0808F648:
	ldr r0, _0808F654  @ gLCDControlBuffer
	ldrh r1, [r0, #0x24]
	subs r6, r6, r1
	ldrh r0, [r0, #0x26]
	b _0808F660
	.align 2, 0
_0808F654: .4byte gLCDControlBuffer
_0808F658:
	ldr r0, _0808F6D0  @ gLCDControlBuffer
	ldrh r1, [r0, #0x28]
	subs r6, r6, r1
	ldrh r0, [r0, #0x2a]
_0808F660:
	subs r7, r7, r0
_0808F662:
	bl sub_808EA3C
	movs r1, #0x80
	lsls r1, r1, #9
	ands r1, r0
	cmp r1, #0
	beq _0808F6A6
	adds r1, r6, #0
	subs r1, #0x10
	ldr r5, _0808F6D4  @ 0x000001FF
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x18
	movs r4, #0xff
	ands r2, r4
	ldr r3, _0808F6D8  @ gUnknown_08A01D88
	ldr r0, _0808F6DC  @ 0x000013C8
	str r0, [sp]
	movs r0, #0
	bl RegisterObjectAttributes
	adds r1, r6, #0
	subs r1, #8
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x14
	ands r2, r4
	ldr r3, _0808F6E0  @ gUnknown_08A01DAE
	movs r0, #0x8f
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0
	bl RegisterObjectAttributes
_0808F6A6:
	movs r4, #0
	mov r0, r8
	adds r0, #0x5c
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsrs r2, r1, #0x1f
	adds r1, r1, r2
	asrs r1, r1, #1
	str r0, [sp, #0xc]
	movs r2, #0x50
	add r2, r8
	mov sl, r2
	movs r3, #0x5b
	add r8, r3
	cmp r4, r1
	bge _0808F73A
_0808F6C6:
	movs r5, #0
	mov r9, r5
	adds r0, r4, #1
	str r0, [sp, #0x10]
	b _0808F716
	.align 2, 0
_0808F6D0: .4byte gLCDControlBuffer
_0808F6D4: .4byte 0x000001FF
_0808F6D8: .4byte gUnknown_08A01D88
_0808F6DC: .4byte 0x000013C8
_0808F6E0: .4byte gUnknown_08A01DAE
_0808F6E4:
	mov r2, r9
	lsls r1, r2, #5
	adds r1, r6, r1
	ldr r0, _0808F768  @ 0x000001FF
	ands r1, r0
	lsls r2, r4, #4
	adds r2, r7, r2
	movs r0, #0xff
	ands r2, r0
	mov r3, r9
	lsls r0, r3, #2
	mov r5, sl
	ldrh r5, [r5]
	adds r0, r0, r5
	lsls r3, r4, #6
	adds r0, r0, r3
	ldr r3, [sp, #4]
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #2
	ldr r3, _0808F76C  @ gUnknown_08590F8C
	bl RegisterObjectAttributes
	movs r5, #1
	add r9, r5
_0808F716:
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _0808F722
	adds r0, #3
_0808F722:
	asrs r0, r0, #2
	cmp r9, r0
	blt _0808F6E4
	ldr r4, [sp, #0x10]
	ldr r2, [sp, #0xc]
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r4, r0
	blt _0808F6C6
_0808F73A:
	mov r3, r8
	ldrb r0, [r3]
	movs r1, #3
	ands r0, r1
	cmp r0, #0
	beq _0808F7DA
	movs r1, #0
	ldrsb r1, [r3, r1]
	adds r0, r1, #0
	cmp r1, #0
	bge _0808F752
	adds r0, r1, #3
_0808F752:
	asrs r0, r0, #2
	lsls r4, r0, #2
	str r4, [sp, #8]
	lsls r0, r0, #5
	adds r6, r6, r0
	movs r4, #0
	ldr r5, [sp, #0xc]
	movs r0, #0
	ldrsb r0, [r5, r0]
	b _0808F7D0
	.align 2, 0
_0808F768: .4byte 0x000001FF
_0808F76C: .4byte gUnknown_08590F8C
_0808F770:
	movs r0, #0
	mov r9, r0
	adds r1, r4, #1
	str r1, [sp, #0x10]
	b _0808F7AC
_0808F77A:
	mov r2, r9
	lsls r1, r2, #3
	adds r1, r6, r1
	ldr r0, _0808F818  @ 0x000001FF
	ands r1, r0
	lsls r2, r4, #4
	adds r2, r7, r2
	movs r0, #0xff
	ands r2, r0
	mov r3, sl
	ldrh r0, [r3]
	ldr r5, [sp, #8]
	adds r0, r0, r5
	add r0, r9
	lsls r3, r4, #6
	adds r0, r0, r3
	ldr r3, [sp, #4]
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #2
	ldr r3, _0808F81C  @ gUnknown_08590F64
	bl RegisterObjectAttributes
	movs r5, #1
	add r9, r5
_0808F7AC:
	mov r0, r8
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	cmp r1, #0
	bge _0808F7BA
	adds r0, r1, #3
_0808F7BA:
	asrs r0, r0, #2
	lsls r0, r0, #2
	subs r0, r1, r0
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r9, r0
	blt _0808F77A
	ldr r4, [sp, #0x10]
	ldr r1, [sp, #0xc]
	movs r0, #0
	ldrsb r0, [r1, r0]
_0808F7D0:
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r4, r0
	blt _0808F770
_0808F7DA:
	mov r2, r9
	lsls r1, r2, #5
	adds r1, r6, r1
	ldr r0, _0808F818  @ 0x000001FF
	ands r1, r0
	lsls r2, r4, #4
	adds r2, r7, r2
	movs r0, #0xff
	ands r2, r0
	ldr r3, _0808F820  @ gUnknown_08590F8C
	mov r5, r9
	lsls r0, r5, #2
	mov r6, sl
	ldrh r6, [r6]
	adds r0, r0, r6
	lsls r4, r4, #6
	adds r0, r0, r4
	ldr r4, [sp, #4]
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #2
	bl RegisterObjectAttributes
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808F818: .4byte 0x000001FF
_0808F81C: .4byte gUnknown_08590F64
_0808F820: .4byte gUnknown_08590F8C

	THUMB_FUNC_START sub_808F824
sub_808F824: @ 0x0808F824
	push {lr}
	subs r0, #0x16
	cmp r0, #9
	bhi _0808F8AC
	lsls r0, r0, #2
	ldr r1, _0808F838  @ _0808F83C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808F838: .4byte _0808F83C
_0808F83C: @ jump table
	.4byte _0808F864 @ case 0
	.4byte _0808F86A @ case 1
	.4byte _0808F870 @ case 2
	.4byte _0808F876 @ case 3
	.4byte _0808F87C @ case 4
	.4byte _0808F882 @ case 5
	.4byte _0808F88E @ case 6
	.4byte _0808F894 @ case 7
	.4byte _0808F89A @ case 8
	.4byte _0808F8A0 @ case 9
_0808F864:
	movs r0, #0
	movs r1, #0
	b _0808F886
_0808F86A:
	movs r0, #0
	movs r1, #1
	b _0808F886
_0808F870:
	movs r0, #0
	movs r1, #3
	b _0808F886
_0808F876:
	movs r0, #0
	movs r1, #2
	b _0808F886
_0808F87C:
	movs r0, #0
	movs r1, #4
	b _0808F886
_0808F882:
	movs r0, #0
	movs r1, #5
_0808F886:
	bl sub_8006458
	movs r0, #1
	b _0808F8AE
_0808F88E:
	movs r0, #0
	movs r1, #0
	b _0808F8A4
_0808F894:
	movs r0, #0
	movs r1, #2
	b _0808F8A4
_0808F89A:
	movs r0, #0
	movs r1, #3
	b _0808F8A4
_0808F8A0:
	movs r0, #0
	movs r1, #4
_0808F8A4:
	bl sub_80064DC
	movs r0, #1
	b _0808F8AE
_0808F8AC:
	movs r0, #0
_0808F8AE:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_808F8B4
sub_808F8B4: @ 0x0808F8B4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov r8, r0
	ldr r6, [r0, #0x14]
	adds r0, r6, #0
	adds r0, #0x53
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov sl, r0
	ldr r0, _0808F8F0  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xf3
	ands r0, r1
	cmp r0, #0
	beq _0808F8F4
	bl sub_808EA3C
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne _0808F8F4
	movs r0, #0x7f
	mov sl, r0
	b _0808F90E
	.align 2, 0
_0808F8F0: .4byte gKeyStatusPtr
_0808F8F4:
	adds r1, r6, #0
	adds r1, #0x55
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	ble _0808F906
	b _0808FE94
_0808F906:
	adds r0, r6, #0
	adds r0, #0x52
	ldrb r0, [r0]
	strb r0, [r1]
_0808F90E:
	ldr r0, [r6, #0x30]
	bl SetFont
	ldr r0, _0808F940  @ gUnknown_03005398
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808F944
	cmp r0, #1
	beq _0808F95E
	movs r0, #0
	bl sub_80057A8
	movs r1, #0x10
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	movs r0, #0
	movs r1, #3
	bl sub_8006458
	movs r0, #1
	movs r1, #1
	bl sub_8006458
	b _0808F990
	.align 2, 0
_0808F940: .4byte gUnknown_03005398
_0808F944:
	movs r0, #0
	bl sub_80057A8
	movs r1, #0x10
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	movs r0, #0
	movs r1, #3
	bl sub_8006458
	movs r0, #1
	b _0808F976
_0808F95E:
	movs r0, #1
	bl sub_80057A8
	movs r1, #0x10
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	movs r0, #1
	movs r1, #3
	bl sub_8006458
	movs r0, #0
_0808F976:
	movs r1, #1
	bl sub_8006458
	b _0808F990
_0808F97E:
	adds r1, r6, #0
	adds r1, #0x5f
	movs r0, #1
	strb r0, [r1]
	mov r0, r8
	movs r1, #1
	bl Proc_GotoLabel
	b _0808FE68
_0808F990:
	movs r0, #0
	mov r9, r0
	cmp r9, sl
	blt _0808F99A
	b _0808FE68
_0808F99A:
	ldr r0, [r6, #0x2c]
	ldrb r1, [r0]
	adds r2, r0, #0
	cmp r1, #0x80
	bls _0808F9A6
	b _0808FDEA
_0808F9A6:
	lsls r0, r1, #2
	ldr r1, _0808F9B0  @ _0808F9B4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808F9B0: .4byte _0808F9B4
_0808F9B4: @ jump table
	.4byte _0808FC64 @ case 0
	.4byte _0808FC92 @ case 1
	.4byte _0808FD02 @ case 2
	.4byte _0808FD48 @ case 3
	.4byte _0808FCBE @ case 4
	.4byte _0808FCC8 @ case 5
	.4byte _0808FCD2 @ case 6
	.4byte _0808FCDC @ case 7
	.4byte _0808FDEA @ case 8
	.4byte _0808FDEA @ case 9
	.4byte _0808FDEA @ case 10
	.4byte _0808FDEA @ case 11
	.4byte _0808FDEA @ case 12
	.4byte _0808FDEA @ case 13
	.4byte _0808FDEA @ case 14
	.4byte _0808FDEA @ case 15
	.4byte _0808FDEA @ case 16
	.4byte _0808FDEA @ case 17
	.4byte _0808FDEA @ case 18
	.4byte _0808FDEA @ case 19
	.4byte _0808FDEA @ case 20
	.4byte _0808FDEA @ case 21
	.4byte _0808FCE6 @ case 22
	.4byte _0808FCF4 @ case 23
	.4byte _0808FBB8 @ case 24
	.4byte _0808FC18 @ case 25
	.4byte _0808FDEA @ case 26
	.4byte _0808FDEA @ case 27
	.4byte _0808FDEA @ case 28
	.4byte _0808FDEA @ case 29
	.4byte _0808FDEA @ case 30
	.4byte _0808FDEA @ case 31
	.4byte _0808FDEA @ case 32
	.4byte _0808FDEA @ case 33
	.4byte _0808FDEA @ case 34
	.4byte _0808FDEA @ case 35
	.4byte _0808FDEA @ case 36
	.4byte _0808FDEA @ case 37
	.4byte _0808FDEA @ case 38
	.4byte _0808FDEA @ case 39
	.4byte _0808FDEA @ case 40
	.4byte _0808FDEA @ case 41
	.4byte _0808FDEA @ case 42
	.4byte _0808FDEA @ case 43
	.4byte _0808FDEA @ case 44
	.4byte _0808FDEA @ case 45
	.4byte _0808FDEA @ case 46
	.4byte _0808FDEA @ case 47
	.4byte _0808FDEA @ case 48
	.4byte _0808FDEA @ case 49
	.4byte _0808FDEA @ case 50
	.4byte _0808FDEA @ case 51
	.4byte _0808FDEA @ case 52
	.4byte _0808FDEA @ case 53
	.4byte _0808FDEA @ case 54
	.4byte _0808FDEA @ case 55
	.4byte _0808FDEA @ case 56
	.4byte _0808FDEA @ case 57
	.4byte _0808FDEA @ case 58
	.4byte _0808FDEA @ case 59
	.4byte _0808FDEA @ case 60
	.4byte _0808FDEA @ case 61
	.4byte _0808FDEA @ case 62
	.4byte _0808FDEA @ case 63
	.4byte _0808FDEA @ case 64
	.4byte _0808FDEA @ case 65
	.4byte _0808FDEA @ case 66
	.4byte _0808FDEA @ case 67
	.4byte _0808FDEA @ case 68
	.4byte _0808FDEA @ case 69
	.4byte _0808FDEA @ case 70
	.4byte _0808FDEA @ case 71
	.4byte _0808FDEA @ case 72
	.4byte _0808FDEA @ case 73
	.4byte _0808FDEA @ case 74
	.4byte _0808FDEA @ case 75
	.4byte _0808FDEA @ case 76
	.4byte _0808FDEA @ case 77
	.4byte _0808FDEA @ case 78
	.4byte _0808FDEA @ case 79
	.4byte _0808FDEA @ case 80
	.4byte _0808FDEA @ case 81
	.4byte _0808FDEA @ case 82
	.4byte _0808FDEA @ case 83
	.4byte _0808FDEA @ case 84
	.4byte _0808FDEA @ case 85
	.4byte _0808FDEA @ case 86
	.4byte _0808FDEA @ case 87
	.4byte _0808FDEA @ case 88
	.4byte _0808FDEA @ case 89
	.4byte _0808FDEA @ case 90
	.4byte _0808FDEA @ case 91
	.4byte _0808FDEA @ case 92
	.4byte _0808FDEA @ case 93
	.4byte _0808FDEA @ case 94
	.4byte _0808FDEA @ case 95
	.4byte _0808FDEA @ case 96
	.4byte _0808FDEA @ case 97
	.4byte _0808FDEA @ case 98
	.4byte _0808FDEA @ case 99
	.4byte _0808FDEA @ case 100
	.4byte _0808FDEA @ case 101
	.4byte _0808FDEA @ case 102
	.4byte _0808FDEA @ case 103
	.4byte _0808FDEA @ case 104
	.4byte _0808FDEA @ case 105
	.4byte _0808FDEA @ case 106
	.4byte _0808FDEA @ case 107
	.4byte _0808FDEA @ case 108
	.4byte _0808FDEA @ case 109
	.4byte _0808FDEA @ case 110
	.4byte _0808FDEA @ case 111
	.4byte _0808FDEA @ case 112
	.4byte _0808FDEA @ case 113
	.4byte _0808FDEA @ case 114
	.4byte _0808FDEA @ case 115
	.4byte _0808FDEA @ case 116
	.4byte _0808FDEA @ case 117
	.4byte _0808FDEA @ case 118
	.4byte _0808FDEA @ case 119
	.4byte _0808FDEA @ case 120
	.4byte _0808FDEA @ case 121
	.4byte _0808FDEA @ case 122
	.4byte _0808FDEA @ case 123
	.4byte _0808FDEA @ case 124
	.4byte _0808FDEA @ case 125
	.4byte _0808FDEA @ case 126
	.4byte _0808FDEA @ case 127
	.4byte _0808FDCA @ case 128
_0808FBB8:
	adds r4, r6, #0
	adds r4, #0x54
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	bl sub_808EA3C
	movs r1, #0x80
	lsls r1, r1, #2
	ands r1, r0
	ldr r5, _0808FC10  @ gUnknown_08A01E5C
	cmp r1, #0
	beq _0808FBD4
	ldr r5, _0808FC14  @ gUnknown_08A01E54
_0808FBD4:
	movs r3, #0
	ldrsb r3, [r4, r3]
	lsls r1, r3, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r6, #0
	adds r0, #0x57
	ldrb r2, [r0]
	lsls r2, r2, #3
	adds r0, #1
	lsls r3, r3, #1
	ldrb r0, [r0]
	adds r3, r3, r0
	lsls r3, r3, #3
	movs r0, #0xb
	str r0, [sp]
	movs r0, #1
_0808FBFA:
	str r0, [sp, #4]
	mov r0, r8
	str r0, [sp, #8]
	adds r0, r5, #0
	bl sub_80900EC
_0808FC06:
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	b _0808FD3C
	.align 2, 0
_0808FC10: .4byte gUnknown_08A01E5C
_0808FC14: .4byte gUnknown_08A01E54
_0808FC18:
	adds r4, r6, #0
	adds r4, #0x54
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	bl sub_808EA3C
	movs r1, #0x80
	lsls r1, r1, #2
	ands r1, r0
	ldr r5, _0808FC5C  @ gUnknown_08A01E5C
	cmp r1, #0
	beq _0808FC34
	ldr r5, _0808FC60  @ gUnknown_08A01E54
_0808FC34:
	movs r3, #0
	ldrsb r3, [r4, r3]
	lsls r1, r3, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r6, #0
	adds r0, #0x57
	ldrb r2, [r0]
	lsls r2, r2, #3
	adds r0, #1
	lsls r3, r3, #1
	ldrb r0, [r0]
	adds r3, r3, r0
	lsls r3, r3, #3
	movs r0, #0xb
	str r0, [sp]
	movs r0, #2
	b _0808FBFA
	.align 2, 0
_0808FC5C: .4byte gUnknown_08A01E5C
_0808FC60: .4byte gUnknown_08A01E54
_0808FC64:
	bl sub_808EA3C
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	beq _0808FC80
	movs r0, #4
	bl sub_808EA1C
	adds r0, r6, #0
	movs r1, #4
	bl Proc_GotoLabel
	b _0808FC88
_0808FC80:
	adds r0, r6, #0
	movs r1, #0
	bl Proc_GotoLabel
_0808FC88:
	mov r0, r8
	movs r1, #0x63
	bl Proc_GotoLabel
	b _0808FD3C
_0808FC92:
	adds r0, r2, #1
	str r0, [r6, #0x2c]
	adds r3, r6, #0
	adds r3, #0x54
	movs r2, #0
	ldrsb r2, [r3, r2]
	adds r2, #1
	adds r0, r6, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r2, r0
	blt _0808FCB6
	b _0808F97E
_0808FCB6:
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	b _0808FE5E
_0808FCBE:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #8
	strb r0, [r1]
	b _0808FC06
_0808FCC8:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #0x10
	strb r0, [r1]
	b _0808FC06
_0808FCD2:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #0x20
	strb r0, [r1]
	b _0808FC06
_0808FCDC:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #0x80
	strb r0, [r1]
	b _0808FC06
_0808FCE6:
	adds r0, r2, #1
	str r0, [r6, #0x2c]
	ldr r0, _0808FCF0  @ 0x0000FFF7
	ands r7, r0
	b _0808FE5E
	.align 2, 0
_0808FCF0: .4byte 0x0000FFF7
_0808FCF4:
	adds r0, r2, #1
	str r0, [r6, #0x2c]
	movs r0, #8
	orrs r7, r0
	lsls r0, r7, #0x10
	lsrs r7, r0, #0x10
	b _0808FE5E
_0808FD02:
	adds r1, r2, #1
	str r1, [r6, #0x2c]
	ldrb r0, [r2, #1]
	cmp r0, #1
	bne _0808FD10
	adds r0, r1, #1
	str r0, [r6, #0x2c]
_0808FD10:
	bl sub_808EA3C
	movs r1, #8
	ands r1, r0
	cmp r1, #0
	beq _0808FD26
	mov r0, r8
	movs r1, #2
	bl Proc_GotoLabel
	b _0808FD3C
_0808FD26:
	adds r0, r6, #0
	adds r0, #0x54
	ldrb r0, [r0]
	adds r0, #1
	adds r1, r6, #0
	adds r1, #0x5f
	strb r0, [r1]
	mov r0, r8
	movs r1, #1
	bl Proc_GotoLabel
_0808FD3C:
	ldr r0, _0808FD44  @ 0x0000FFEF
	ands r7, r0
	b _0808FE68
	.align 2, 0
_0808FD44: .4byte 0x0000FFEF
_0808FD48:
	ldr r0, _0808FD90  @ 0x0000FFEF
	ands r7, r0
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	bl sub_808EA3C
	movs r1, #0x80
	lsls r1, r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0808FD94
	adds r0, r6, #0
	adds r0, #0x57
	ldrb r1, [r0]
	adds r5, r6, #0
	adds r5, #0x59
	lsls r1, r1, #3
	ldrb r0, [r5]
	adds r1, r1, r0
	adds r1, #4
	adds r0, r6, #0
	adds r0, #0x58
	ldrb r2, [r0]
	adds r4, r6, #0
	adds r4, #0x5a
	lsls r2, r2, #3
	ldrb r0, [r4]
	adds r2, r2, r0
	adds r2, #8
	movs r3, #0x80
	lsls r3, r3, #3
	mov r0, r8
	bl sub_8007D04
	b _0808FDBE
	.align 2, 0
_0808FD90: .4byte 0x0000FFEF
_0808FD94:
	adds r0, r6, #0
	adds r0, #0x57
	ldrb r1, [r0]
	adds r5, r6, #0
	adds r5, #0x59
	lsls r1, r1, #3
	ldrb r0, [r5]
	adds r1, r1, r0
	adds r1, #4
	adds r0, r6, #0
	adds r0, #0x58
	ldrb r2, [r0]
	adds r4, r6, #0
	adds r4, #0x5a
	lsls r2, r2, #3
	ldrb r0, [r4]
	adds r2, r2, r0
	adds r2, #8
	mov r0, r8
	bl sub_8007CD8
_0808FDBE:
	adds r1, r5, #0
	adds r2, r4, #0
	ldr r0, [r6, #0x2c]
	bl sub_808F358
	b _0808FE68
_0808FDCA:
	ldr r0, [r6, #0x2c]
	adds r1, r0, #1
	str r1, [r6, #0x2c]
	ldrb r0, [r0, #1]
	cmp r0, #0x21
	bne _0808FDE2
	adds r2, r6, #0
	adds r2, #0x5e
	ldrb r1, [r2]
	movs r0, #1
	subs r0, r0, r1
	strb r0, [r2]
_0808FDE2:
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	b _0808FE5E
_0808FDEA:
	adds r0, r6, #0
	adds r0, #0x5e
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808FE0E
	adds r5, r6, #0
	adds r5, #0x54
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0xc
	bl Text_SetColorId
	b _0808FE26
_0808FE0E:
	adds r5, r6, #0
	adds r5, #0x54
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0xb
	bl Text_SetColorId
_0808FE26:
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #2
	adds r0, r4, r0
	ldr r0, [r0]
	ldr r1, [r6, #0x2c]
	bl Text_AppendChar
	str r0, [r6, #0x2c]
	bl GetTextDisplaySpeed
	cmp r0, #1
	beq _0808FE5E
	bl sub_808EA3C
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	bne _0808FE5E
	ldr r0, _0808FE80  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808FE5E
	movs r0, #0x6e
	bl m4aSongNumStart
_0808FE5E:
	movs r0, #1
	add r9, r0
	cmp r9, sl
	bge _0808FE68
	b _0808F99A
_0808FE68:
	movs r0, #0
	bl SetFont
	ldr r0, _0808FE84  @ gUnknown_03005398
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808FE88
	cmp r0, #1
	beq _0808FE8C
	movs r0, #0
	b _0808FE8E
	.align 2, 0
_0808FE80: .4byte gUnknown_0202BCF0
_0808FE84: .4byte gUnknown_03005398
_0808FE88:
	movs r0, #0
	b _0808FE8E
_0808FE8C:
	movs r0, #1
_0808FE8E:
	adds r1, r7, #0
	bl sub_800578C
_0808FE94:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808FEA4
sub_808FEA4: @ 0x0808FEA4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r1
	mov ip, r2
	adds r4, r0, #0
	movs r6, #0
	cmp r6, ip
	bge _0808FF00
_0808FEBA:
	adds r1, r4, #0
	movs r2, #0
	adds r0, r6, #1
	mov r9, r0
	cmp r2, r8
	bge _0808FEF4
	mov r7, ip
	subs r7, #1
	mov sl, r2
_0808FECC:
	adds r5, r2, #1
	movs r3, #6
_0808FED0:
	ldr r0, [r1, #4]
	stm r1!, {r0}
	subs r3, #1
	cmp r3, #0
	bge _0808FED0
	cmp r6, r7
	bne _0808FEE2
	mov r0, sl
	b _0808FEEC
_0808FEE2:
	adds r0, r2, #0
	adds r0, #0x20
	lsls r0, r0, #5
	adds r0, r0, r4
	ldr r0, [r0]
_0808FEEC:
	stm r1!, {r0}
	adds r2, r5, #0
	cmp r2, r8
	blt _0808FECC
_0808FEF4:
	movs r0, #0x80
	lsls r0, r0, #3
	adds r4, r4, r0
	mov r6, r9
	cmp r6, ip
	blt _0808FEBA
_0808FF00:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808FF10
sub_808FF10: @ 0x0808FF10
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bx lr

	THUMB_FUNC_START sub_808FF18
sub_808FF18: @ 0x0808FF18
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r5, [r7, #0x14]
	adds r6, r5, #0
	adds r6, #0x54
	movs r2, #0
	ldrsb r2, [r6, r2]
	adds r2, #1
	lsls r2, r2, #1
	ldr r0, [r5, #0x4c]
	adds r1, r5, #0
	adds r1, #0x5b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_808FEA4
	adds r1, r7, #0
	adds r1, #0x4c
	ldrh r0, [r1]
	adds r0, #1
	movs r2, #0
	mov r8, r2
	strh r0, [r1]
	movs r0, #0
	ldrsh r1, [r1, r0]
	adds r4, r5, #0
	adds r4, #0x5f
	ldrb r0, [r4]
	lsls r0, r0, #4
	cmp r1, r0
	bne _0808FF92
	adds r0, r5, #0
	bl sub_808F30C
	ldrb r1, [r4]
	subs r1, #1
	ldrb r0, [r6]
	subs r0, r0, r1
	strb r0, [r6]
	adds r1, r5, #0
	adds r1, #0x59
	mov r2, r8
	strb r2, [r1]
	subs r4, #5
	strb r2, [r4]
	ldr r0, [r5, #0x2c]
	adds r2, r4, #0
	bl sub_808F358
	movs r0, #0
	ldrsb r0, [r6, r0]
	lsls r0, r0, #4
	ldrb r1, [r4]
	adds r0, r0, r1
	strb r0, [r4]
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
_0808FF92:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808FF9C
sub_808FF9C: @ 0x0808FF9C
	push {r4, lr}
	ldr r4, [r0, #0x14]
	adds r0, r4, #0
	bl sub_808F2BC
	adds r1, r4, #0
	adds r1, #0x54
	movs r0, #0
	strb r0, [r1]
	adds r1, #5
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x5a
	strb r0, [r2]
	ldr r0, [r4, #0x2c]
	bl sub_808F358
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_808FFC4
sub_808FFC4: @ 0x0808FFC4
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _0808FFE4  @ gUnknown_08A01E64
	adds r0, r4, #0
	bl Proc_Find
	bl Proc_Delete
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_Create
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808FFE4: .4byte gUnknown_08A01E64

	THUMB_FUNC_START sub_808FFE8
sub_808FFE8: @ 0x0808FFE8
	push {lr}
	ldr r0, _0808FFF8  @ gUnknown_08A01E64
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_0808FFF8: .4byte gUnknown_08A01E64

	THUMB_FUNC_START sub_808FFFC
sub_808FFFC: @ 0x0808FFFC
	push {lr}
	bl sub_808EA3C
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	bne _0809000E
	movs r0, #0
	b _08090010
_0809000E:
	movs r0, #1
_08090010:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8090014
sub_8090014: @ 0x08090014
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r1, _08090040  @ gKeyStatusPtr
	ldr r0, [r1]
	ldrh r2, [r0, #8]
	movs r0, #2
	ands r0, r2
	adds r5, r1, #0
	cmp r0, #0
	beq _08090048
	ldr r0, _08090044  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809003A
	movs r0, #0x6b
	bl m4aSongNumStart
_0809003A:
	movs r0, #0
	b _08090068
	.align 2, 0
_08090040: .4byte gKeyStatusPtr
_08090044: .4byte gUnknown_0202BCF0
_08090048:
	movs r6, #1
	adds r0, r6, #0
	ands r0, r2
	cmp r0, #0
	beq _08090078
	ldr r0, _08090074  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08090064
	movs r0, #0x6a
	bl m4aSongNumStart
_08090064:
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
_08090068:
	bl sub_8008A0C
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080900E2
	.align 2, 0
_08090074: .4byte gUnknown_0202BCF0
_08090078:
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _0809009C
	movs r2, #0x2a
	ldrsh r0, [r4, r2]
	cmp r0, #2
	bne _0809009C
	ldr r0, _080900E8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809009A
	movs r0, #0x67
	bl m4aSongNumStart
_0809009A:
	strh r6, [r4, #0x2a]
_0809009C:
	ldr r0, [r5]
	ldrh r1, [r0, #8]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080900C6
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	cmp r0, #1
	bne _080900C6
	ldr r0, _080900E8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080900C2
	movs r0, #0x67
	bl m4aSongNumStart
_080900C2:
	movs r0, #2
	strh r0, [r4, #0x2a]
_080900C6:
	movs r2, #0x2c
	ldrsh r0, [r4, r2]
	movs r1, #0x2a
	ldrsh r2, [r4, r1]
	subs r2, #1
	lsls r1, r2, #2
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r0, r0, r1
	subs r0, #4
	movs r2, #0x2e
	ldrsh r1, [r4, r2]
	bl DisplayUiHand
_080900E2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080900E8: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80900EC
sub_80900EC: @ 0x080900EC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	mov r8, r1
	adds r4, r2, #0
	mov r9, r3
	ldr r6, [sp, #0x1c]
	ldr r7, [sp, #0x24]
	ldr r0, [r5]
	bl GetStringFromIndex
	adds r3, r0, #0
	mov r0, r8
	movs r1, #0x10
	adds r2, r6, #0
	bl Text_InsertString
	ldr r0, [r5, #4]
	bl GetStringFromIndex
	adds r3, r0, #0
	mov r0, r8
	movs r1, #0x38
	adds r2, r6, #0
	bl Text_InsertString
	ldr r0, _08090148  @ gUnknown_08A01EC4
	adds r1, r7, #0
	bl Proc_CreateBlockingChild
	mov r1, sp
	ldrh r1, [r1, #0x20]
	strh r1, [r0, #0x2a]
	adds r4, #0x10
	strh r4, [r0, #0x2c]
	mov r2, r9
	strh r2, [r0, #0x2e]
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090148: .4byte gUnknown_08A01EC4

	THUMB_FUNC_START sub_809014C
sub_809014C: @ 0x0809014C
	push {r4, r5, lr}
	ldr r0, _080901B8  @ gUnknown_0200E158
	bl InitUnitStack
	movs r5, #1
_08090156:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0809017A
	ldr r0, [r4]
	cmp r0, #0
	beq _0809017A
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809017A
	adds r0, r4, #0
	bl PushUnit
_0809017A:
	adds r5, #1
	cmp r5, #0x3f
	ble _08090156
	movs r5, #1
_08090182:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _080901A6
	ldr r0, [r4]
	cmp r0, #0
	beq _080901A6
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080901A6
	adds r0, r4, #0
	bl PushUnit
_080901A6:
	adds r5, #1
	cmp r5, #0x3f
	ble _08090182
	bl LoadPlayerUnitsFromUnitStack
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080901B8: .4byte gUnknown_0200E158

	THUMB_FUNC_START sub_80901BC
sub_80901BC: @ 0x080901BC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r6, r2, #0x18
	ldr r0, _08090234  @ gUnknown_08A17B58
	ldr r3, [r0]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	mov r1, r8
	adds r2, r7, #0
	bl RegisterObjectAttributes
	movs r5, #0
	subs r0, r6, #1
	cmp r5, r0
	bge _08090210
	mov r4, r8
	adds r4, #8
_080901F2:
	ldr r0, _08090234  @ gUnknown_08A17B58
	ldr r3, [r0, #4]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r1, r4, #0
	adds r2, r7, #0
	bl RegisterObjectAttributes
	adds r4, #0x10
	adds r5, #1
	subs r0, r6, #1
	cmp r5, r0
	blt _080901F2
_08090210:
	lsls r1, r5, #4
	add r1, r8
	adds r1, #8
	ldr r0, _08090234  @ gUnknown_08A17B58
	ldr r3, [r0, #8]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r2, r7, #0
	bl RegisterObjectAttributes
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090234: .4byte gUnknown_08A17B58

	THUMB_FUNC_START sub_8090238
sub_8090238: @ 0x08090238
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp]
	ldr r5, _080902C0  @ gUnknown_02023D12
	adds r0, r5, #0
	movs r1, #4
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	ldr r4, _080902C4  @ gUnknown_0200E150
	adds r0, r4, #0
	bl Text_Clear
	movs r7, #0
	mov r8, r4
	mov sl, r5
_08090266:
	movs r6, #0
	lsls r0, r7, #3
	adds r1, r7, #1
	mov r9, r1
	adds r0, r0, r7
	lsls r5, r0, #4
	ldr r2, _080902C8  @ gUnknown_08A17C48
	adds r1, r5, r2
_08090276:
	ldrb r0, [r1]
	ldr r2, [sp]
	cmp r0, r2
	bne _080902FC
	ldr r4, _080902C4  @ gUnknown_0200E150
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetXCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColorId
	ldr r0, _080902CC  @ 0x000004FD
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_AppendString
	cmp r7, #5
	bne _080902D0
	cmp r6, #0
	beq _080902D0
	adds r0, r4, #0
	mov r1, sl
	bl Text_Draw
	adds r1, r6, #0
	adds r1, #0x6f
	mov r0, sl
	adds r0, #8
	movs r2, #0xa0
	lsls r2, r2, #7
	bl DrawIcon
	b _08090306
	.align 2, 0
_080902C0: .4byte gUnknown_02023D12
_080902C4: .4byte gUnknown_0200E150
_080902C8: .4byte gUnknown_08A17C48
_080902CC: .4byte 0x000004FD
_080902D0:
	mov r0, r8
	movs r1, #4
	bl Text_Advance
	ldr r1, _080902F4  @ gUnknown_08A17C4C
	adds r0, r5, r1
	ldr r0, [r0]
	bl GetStringFromIndex
	adds r1, r0, #0
	mov r0, r8
	bl Text_AppendString
	mov r0, r8
	ldr r1, _080902F8  @ gUnknown_02023D12
	bl Text_Draw
	b _08090306
	.align 2, 0
_080902F4: .4byte gUnknown_08A17C4C
_080902F8: .4byte gUnknown_02023D12
_080902FC:
	adds r5, #0x10
	adds r1, #0x10
	adds r6, #1
	cmp r6, #8
	ble _08090276
_08090306:
	mov r7, r9
	cmp r7, #9
	ble _08090266
	movs r0, #4
	bl BG_EnableSyncByMask
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8090324
sub_8090324: @ 0x08090324
	push {lr}
	adds r3, r0, #0
	movs r2, #0
	ldr r1, _08090348  @ gUnknown_0200F15C
_0809032C:
	ldr r0, [r1]
	cmp r0, r3
	beq _08090354
	adds r1, #4
	adds r2, #1
	cmp r2, #7
	ble _0809032C
	movs r2, #0
	ldr r1, _08090348  @ gUnknown_0200F15C
_0809033E:
	ldr r0, [r1]
	cmp r0, #0xff
	bne _0809034C
	str r3, [r1]
	b _08090354
	.align 2, 0
_08090348: .4byte gUnknown_0200F15C
_0809034C:
	adds r1, #4
	adds r2, #1
	cmp r2, #7
	ble _0809033E
_08090354:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8090358
sub_8090358: @ 0x08090358
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x28
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x14
	ldr r3, _0809040C  @ gUnknown_0200F158
	movs r2, #0xff
	add r1, sp, #0x1c
_0809036A:
	str r2, [r1]
	subs r1, #4
	cmp r1, sp
	bge _0809036A
	cmp r0, #0
	ble _08090378
	subs r0, #1
_08090378:
	movs r6, #0
	ldrb r3, [r3]
	cmp r0, r3
	bge _080903BE
	ldr r1, _08090410  @ gUnknown_0200D6E0
	adds r5, r0, #0
	mov r7, sp
	lsls r0, r5, #2
	adds r4, r0, r1
_0809038A:
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080903AA
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIconId
	str r0, [r7]
_080903AA:
	adds r5, #1
	adds r7, #4
	adds r4, #4
	adds r6, #1
	cmp r6, #7
	bgt _080903BE
	ldr r0, _0809040C  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r5, r0
	blt _0809038A
_080903BE:
	movs r6, #0
	ldr r7, _08090414  @ gUnknown_0200F15C
	mov r8, r7
_080903C4:
	lsls r1, r6, #2
	mov r2, r8
	adds r0, r1, r2
	ldr r0, [r0]
	adds r4, r1, #0
	adds r6, #1
	cmp r0, #0xff
	beq _080903FC
	movs r5, #0
	adds r1, r0, #0
	mov r2, sp
	movs r3, #7
_080903DC:
	ldr r0, [r2]
	cmp r0, r1
	bne _080903E4
	movs r5, #1
_080903E4:
	adds r2, #4
	subs r3, #1
	cmp r3, #0
	bge _080903DC
	cmp r5, #0
	bne _080903FC
	adds r4, r4, r7
	ldr r0, [r4]
	bl ClearIconGfx
	movs r0, #0xff
	str r0, [r4]
_080903FC:
	cmp r6, #7
	ble _080903C4
	add sp, #0x28
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809040C: .4byte gUnknown_0200F158
_08090410: .4byte gUnknown_0200D6E0
_08090414: .4byte gUnknown_0200F15C

	THUMB_FUNC_START sub_8090418
sub_8090418: @ 0x08090418
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	cmp r1, #0
	beq _0809045A
	bl sub_8095394
	b _0809045E
_08090430:
	adds r0, r4, #0
	adds r0, #0x2c
	strb r3, [r0]
	strh r3, [r4, #0x3e]
	b _08090508
_0809043A:
	adds r0, r4, #0
	adds r0, #0x2c
	strb r3, [r0]
	strh r1, [r4, #0x3e]
	b _08090508
_08090444:
	subs r1, r3, r1
	adds r0, r4, #0
	adds r0, #0x2c
	strb r1, [r0]
	b _08090508
_0809044E:
	adds r1, r4, #0
	adds r1, #0x2c
	movs r0, #1
	strb r0, [r1]
	strh r7, [r4, #0x3e]
	b _08090508
_0809045A:
	bl GetLastStatScreenUid
_0809045E:
	adds r1, r0, #0
	movs r3, #0
	ldr r0, _08090498  @ gUnknown_0200F158
	ldrb r6, [r0]
	mov r9, r0
	cmp r3, r6
	bge _08090508
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	mov r8, r0
	movs r0, #0x2c
	adds r0, r0, r4
	mov ip, r0
	movs r5, #0x40
	negs r5, r5
	movs r7, #0x10
	negs r7, r7
	ldr r2, _0809049C  @ gUnknown_0200D6E0
_08090482:
	mov r0, r8
	cmp r0, #0
	beq _080904A0
	ldr r0, [r2]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, r1
	beq _080904AE
	b _080904FC
	.align 2, 0
_08090498: .4byte gUnknown_0200F158
_0809049C: .4byte gUnknown_0200D6E0
_080904A0:
	ldr r0, [r2]
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r1
	bne _080904FC
_080904AE:
	adds r0, r4, #0
	adds r0, #0x30
	movs r1, #0
	strb r3, [r0]
	cmp r3, #0
	beq _08090430
	mov r0, r9
	ldrb r2, [r0]
	subs r0, r2, #1
	cmp r3, r0
	bne _080904DA
	cmp r2, #6
	bls _0809043A
	movs r0, #5
	mov r1, ip
	strb r0, [r1]
	mov r1, r9
	ldrb r0, [r1]
	subs r0, #6
	lsls r0, r0, #4
	strh r0, [r4, #0x3e]
	b _08090508
_080904DA:
	ldrh r2, [r4, #0x3e]
	lsrs r1, r2, #4
	adds r0, r1, #0
	cmp r3, r0
	ble _080904EA
	adds r0, #5
	cmp r3, r0
	blt _08090444
_080904EA:
	cmp r2, r7
	bgt _0809044E
	cmp r2, r5
	bge _08090508
	movs r0, #4
	mov r1, ip
	strb r0, [r1]
	strh r5, [r4, #0x3e]
	b _08090508
_080904FC:
	adds r5, #0x10
	adds r7, #0x10
	adds r2, #4
	adds r3, #1
	cmp r3, r6
	blt _08090482
_08090508:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8090514
sub_8090514: @ 0x08090514
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq _080905B4
	ldr r0, _080905B0  @ gLCDControlBuffer
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2d
	movs r2, #0
	strb r2, [r0]
	adds r1, #0x31
	movs r0, #0x3a
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2c
	movs r3, #0xf0
	strb r3, [r0]
	subs r1, #1
	movs r0, #0x98
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #4
	strb r2, [r0]
	subs r0, #5
	strb r3, [r0]
	adds r1, #2
	movs r0, #0x20
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r5, #2
	orrs r0, r5
	movs r4, #4
	orrs r0, r4
	movs r3, #8
	orrs r0, r3
	movs r6, #0x10
	orrs r0, r6
	strb r0, [r2]
	mov r7, ip
	adds r7, #0x35
	ldrb r2, [r7]
	movs r1, #2
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	orrs r0, r6
	strb r0, [r7]
	mov r2, ip
	adds r2, #0x36
	ldrb r0, [r2]
	ands r1, r0
	orrs r1, r5
	orrs r1, r4
	orrs r1, r3
	movs r0, #0x11
	negs r0, r0
	ands r1, r0
	strb r1, [r2]
	b _08090614
	.align 2, 0
_080905B0: .4byte gLCDControlBuffer
_080905B4:
	ldr r0, _0809061C  @ gLCDControlBuffer
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2d
	strb r2, [r0]
	adds r1, #0x31
	movs r0, #0x3a
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r6, #2
	orrs r0, r6
	movs r5, #4
	orrs r0, r5
	movs r4, #8
	orrs r0, r4
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r2]
	adds r2, #2
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	orrs r0, r6
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	strb r0, [r2]
_08090614:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809061C: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_8090620
sub_8090620: @ 0x08090620
	push {r4, lr}
	adds r4, r0, #0
	bl MU_EndAll
	ldr r0, [r4, #0x40]
	bl Proc_Delete
	ldr r0, [r4, #0x44]
	bl Proc_Delete
	bl EndGreenTextColorManager
	ldr r2, _08090660  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _08090664
	movs r0, #0x11
	bl SetStatScreenConfig
	b _0809066A
	.align 2, 0
_08090660: .4byte gLCDControlBuffer
_08090664:
	movs r0, #0x1f
	bl SetStatScreenConfig
_0809066A:
	ldr r1, _080906A4  @ gUnknown_0200D6E0
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	adds r1, r4, #0
	bl StartStatScreen
	ldr r1, _080906A8  @ gUnknown_0202BCF0
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r0, [r0]
	adds r2, r4, #0
	adds r2, #0x32
	lsls r0, r0, #7
	ldrb r2, [r2]
	adds r0, r0, r2
	strb r0, [r1, #0x1a]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #4
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080906A4: .4byte gUnknown_0200D6E0
_080906A8: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80906AC
sub_80906AC: @ 0x080906AC
	push {lr}
	bl sub_8090D80
	ldr r2, _080906D4  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
_080906D4: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80906D8
sub_80906D8: @ 0x080906D8
	ldr r2, _080906F4  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_080906F4: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80906F8
sub_80906F8: @ 0x080906F8
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x14]
	str r0, [r5, #0x2c]
	adds r0, r5, #0
	adds r0, #0x3b
	movs r4, #0
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, [r5, #0x2c]
	ldrh r0, [r0, #0x3e]
	movs r1, #0
	strh r0, [r5, #0x38]
	adds r0, r5, #0
	adds r0, #0x3a
	strb r1, [r0]
	adds r0, r5, #0
	bl Make6CMenuScroll
	str r0, [r5, #0x34]
	movs r0, #0xe0
	movs r1, #0x40
	bl sub_80976AC
	ldr r0, [r5, #0x2c]
	ldrh r1, [r0, #0x3e]
	ldr r0, _08090778  @ gUnknown_0200F158
	ldrb r2, [r0]
	movs r0, #0xa
	movs r3, #6
	bl sub_80976CC
	movs r0, #0xe4
	lsls r0, r0, #7
	movs r1, #1
	bl sub_8097700
	bl SMS_FlushIndirect
	movs r0, #7
	strh r0, [r5, #0x3e]
	adds r1, r5, #0
	adds r1, #0x40
	movs r0, #0xe1
	strh r0, [r1]
	adds r0, r5, #0
	adds r0, #0x44
	strh r4, [r0]
	subs r0, #2
	strh r4, [r0]
	adds r0, #6
	movs r1, #4
	strh r1, [r0]
	subs r0, #2
	strh r1, [r0]
	ldr r0, _0809077C  @ gUnknown_08A1C7D8
	ldr r1, _08090780  @ 0x06010280
	bl CopyDataWithPossibleUncomp
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08090778: .4byte gUnknown_0200F158
_0809077C: .4byte gUnknown_08A1C7D8
_08090780: .4byte 0x06010280

	THUMB_FUNC_START sub_8090784
sub_8090784: @ 0x08090784
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x2c
	adds r6, r0, #0
	add r1, sp, #4
	ldr r0, _08090834  @ gUnknown_08205B84
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, [r6, #0x2c]
	adds r0, #0x34
	ldrb r0, [r0]
	ldr r5, _08090838  @ 0x000020E2
	cmp r0, #0
	bne _080907AC
	movs r5, #0xe2
_080907AC:
	adds r4, r6, #0
	adds r4, #0x3b
	ldrb r0, [r4]
	lsrs r0, r0, #3
	movs r1, #3
	ands r0, r1
	lsls r0, r0, #2
	add r0, sp
	adds r0, #4
	ldr r2, [r0]
	adds r2, #7
	ldr r3, _0809083C  @ gUnknown_08A17B64
	movs r7, #0x90
	lsls r7, r7, #8
	str r7, [sp]
	movs r0, #0xb
	adds r1, r5, #0
	bl RegisterObjectAttributes
	ldr r1, _08090840  @ gUnknown_08A17C20
	ldr r0, [r6, #0x2c]
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	str r7, [sp]
	movs r0, #0xd
	movs r1, #0x10
	movs r2, #8
	bl RegisterObjectAttributes
	ldr r0, [r6, #0x2c]
	ldrh r1, [r0, #0x3e]
	ldr r0, _08090844  @ gUnknown_0200F158
	ldrb r2, [r0]
	movs r0, #0xa
	movs r3, #6
	bl sub_80976CC
	ldr r5, [r6, #0x2c]
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r0, [r0]
	str r4, [sp, #0x14]
	cmp r0, #2
	bls _0809084C
	ldr r2, _08090848  @ gUnknown_08A17C48
	adds r3, r5, #0
	adds r3, #0x2d
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	adds r0, r0, r1
	ldrb r3, [r3]
	adds r0, r0, r3
	lsls r0, r0, #4
	adds r0, r0, r2
	ldrb r0, [r0, #8]
	adds r1, r5, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	lsls r1, r1, #4
	adds r1, #0x28
	bl DisplayUiHand
	b _08090862
	.align 2, 0
_08090834: .4byte gUnknown_08205B84
_08090838: .4byte 0x000020E2
_0809083C: .4byte gUnknown_08A17B64
_08090840: .4byte gUnknown_08A17C20
_08090844: .4byte gUnknown_0200F158
_08090848: .4byte gUnknown_08A17C48
_0809084C:
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	lsls r2, r2, #4
	adds r2, #0x40
	ldr r3, _080908B4  @ gUnknown_08A17B6C
	str r7, [sp]
	movs r0, #0xd
	movs r1, #4
	bl RegisterObjectAttributes
_08090862:
	ldr r1, [r6, #0x2c]
	ldrh r0, [r6, #0x38]
	ldrh r2, [r1, #0x3e]
	cmp r0, r2
	bne _08090876
	ldrh r0, [r1, #0x3e]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	beq _080908C0
_08090876:
	ldr r0, _080908B8  @ gPaletteBuffer
	ldr r1, _080908BC  @ gUnknown_02013460
	ldrh r1, [r1, #0x10]
	movs r3, #0xcf
	lsls r3, r3, #2
	adds r0, r0, r3
	strh r1, [r0]
	bl EnablePaletteSync
	adds r2, r6, #0
	adds r2, #0x3c
	movs r0, #0x20
	strb r0, [r2]
	ldr r0, [r6, #0x2c]
	ldrh r0, [r0, #0x3e]
	strh r0, [r6, #0x38]
	adds r0, r6, #0
	adds r0, #0x3a
	ldrb r1, [r0]
	str r2, [sp, #0x18]
	mov r9, r0
	cmp r1, #0
	bne _080908FC
	movs r0, #1
	bl sub_8090514
	movs r0, #1
	mov r4, r9
	strb r0, [r4]
	b _080908FC
	.align 2, 0
_080908B4: .4byte gUnknown_08A17B6C
_080908B8: .4byte gPaletteBuffer
_080908BC: .4byte gUnknown_02013460
_080908C0:
	ldr r2, _08090B20  @ gPaletteBuffer
	ldr r3, _08090B24  @ gUnknown_02013460
	adds r4, r6, #0
	adds r4, #0x3c
	ldrb r0, [r4]
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	movs r1, #0xcf
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePaletteSync
	adds r0, r6, #0
	adds r0, #0x3a
	ldrb r1, [r0]
	str r4, [sp, #0x18]
	mov r9, r0
	cmp r1, #1
	bne _080908FC
	movs r0, #0
	bl sub_8090514
	movs r0, #0
	mov r2, r9
	strb r0, [r2]
_080908FC:
	bl SMS_FlushIndirect
	ldrh r0, [r6, #0x38]
	lsrs r7, r0, #4
	movs r1, #0xf
	ands r0, r1
	negs r0, r0
	mov r8, r0
	movs r5, #0
	ldr r0, _08090B28  @ gUnknown_0200F158
	adds r3, r6, #0
	adds r3, #0x46
	str r3, [sp, #0x24]
	adds r4, r6, #0
	adds r4, #0x48
	str r4, [sp, #0x28]
	adds r1, r6, #0
	adds r1, #0x42
	str r1, [sp, #0x1c]
	adds r2, r6, #0
	adds r2, #0x44
	str r2, [sp, #0x20]
	ldrb r0, [r0]
	cmp r7, r0
	bge _08090964
	ldr r1, _08090B2C  @ gUnknown_0200D6E0
	adds r4, r7, #0
	lsls r0, r7, #2
	adds r0, r0, r1
	mov sl, r0
_08090938:
	lsls r2, r5, #4
	mov r0, r8
	adds r0, #0x38
	adds r2, r2, r0
	mov r3, sl
	adds r3, #4
	mov sl, r3
	subs r3, #4
	ldm r3!, {r0}
	ldr r3, [r0]
	movs r0, #4
	movs r1, #8
	bl sub_8027B60
	adds r4, #1
	adds r5, #1
	cmp r5, #5
	bgt _08090964
	ldr r0, _08090B28  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	blt _08090938
_08090964:
	mov r4, r9
	ldrb r0, [r4]
	cmp r0, #0
	beq _08090990
	adds r3, r5, r7
	ldr r0, _08090B28  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r3, r0
	bge _08090990
	lsls r2, r5, #4
	mov r0, r8
	adds r0, #0x38
	adds r2, r2, r0
	ldr r1, _08090B2C  @ gUnknown_0200D6E0
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r3, [r0]
	movs r0, #4
	movs r1, #8
	bl sub_8027B60
_08090990:
	ldr r2, _08090B30  @ gKeyStatusPtr
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080909A8
	movs r0, #0x1f
	ldr r1, [sp, #0x24]
	strh r0, [r1]
	movs r0, #1
	strh r0, [r6, #0x3e]
_080909A8:
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080909C2
	movs r0, #0x1f
	ldr r2, [sp, #0x28]
	strh r0, [r2]
	adds r1, r6, #0
	adds r1, #0x40
	movs r0, #0xe7
	strh r0, [r1]
_080909C2:
	ldr r3, [sp, #0x24]
	ldrh r0, [r3]
	ldr r4, [sp, #0x1c]
	ldrh r4, [r4]
	adds r0, r0, r4
	ldr r1, [sp, #0x1c]
	strh r0, [r1]
	ldr r2, [sp, #0x28]
	ldrh r0, [r2]
	ldr r3, [sp, #0x20]
	ldrh r3, [r3]
	adds r0, r0, r3
	ldr r4, [sp, #0x20]
	strh r0, [r4]
	ldr r0, [sp, #0x24]
	ldrh r1, [r0]
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #4
	ble _080909F0
	subs r0, r1, #1
	ldr r3, [sp, #0x24]
	strh r0, [r3]
_080909F0:
	ldr r4, [sp, #0x28]
	ldrh r1, [r4]
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, #4
	ble _08090A00
	subs r0, r1, #1
	strh r0, [r4]
_08090A00:
	bl GetGameClock
	movs r1, #3
	ands r1, r0
	cmp r1, #0
	bne _08090A2C
	ldrh r1, [r6, #0x3e]
	movs r3, #0x3e
	ldrsh r0, [r6, r3]
	cmp r0, #6
	bgt _08090A1A
	adds r0, r1, #1
	strh r0, [r6, #0x3e]
_08090A1A:
	adds r1, r6, #0
	adds r1, #0x40
	ldrh r2, [r1]
	movs r4, #0
	ldrsh r0, [r1, r4]
	cmp r0, #0xe1
	ble _08090A2C
	subs r0, r2, #1
	strh r0, [r1]
_08090A2C:
	ldr r1, [r6, #0x2c]
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bls _08090A90
	adds r0, r1, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	beq _08090A90
	movs r0, #0x3e
	ldrsh r4, [r6, r0]
	ldr r5, _08090B34  @ gUnknown_08590F44
	ldr r1, [sp, #0x1c]
	ldrh r0, [r1]
	lsrs r0, r0, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _08090B38  @ 0x00001414
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0x28
	adds r3, r5, #0
	bl RegisterObjectAttributes_SafeMaybe
	movs r3, #0x3e
	ldrsh r4, [r6, r3]
	ldr r1, [sp, #0x1c]
	ldrh r0, [r1]
	lsrs r0, r0, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _08090B3C  @ 0x0000141A
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0x30
	adds r3, r5, #0
	bl RegisterObjectAttributes_SafeMaybe
_08090A90:
	ldr r1, [r6, #0x2c]
	adds r0, r1, #0
	adds r0, #0x2f
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r0]
	ldrb r2, [r2]
	cmp r0, r2
	bcs _08090AFE
	adds r0, r1, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	beq _08090AFE
	adds r4, r6, #0
	adds r4, #0x40
	movs r3, #0
	ldrsh r5, [r4, r3]
	ldr r6, _08090B40  @ gUnknown_08590FBC
	ldr r1, [sp, #0x20]
	ldrh r0, [r1]
	lsrs r0, r0, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _08090B38  @ 0x00001414
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	adds r1, r5, #0
	movs r2, #0x28
	adds r3, r6, #0
	bl RegisterObjectAttributes_SafeMaybe
	movs r3, #0
	ldrsh r4, [r4, r3]
	ldr r1, [sp, #0x20]
	ldrh r0, [r1]
	lsrs r0, r0, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _08090B3C  @ 0x0000141A
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0x30
	adds r3, r6, #0
	bl RegisterObjectAttributes_SafeMaybe
_08090AFE:
	ldr r3, [sp, #0x14]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	ldr r4, [sp, #0x18]
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	add sp, #0x2c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090B20: .4byte gPaletteBuffer
_08090B24: .4byte gUnknown_02013460
_08090B28: .4byte gUnknown_0200F158
_08090B2C: .4byte gUnknown_0200D6E0
_08090B30: .4byte gKeyStatusPtr
_08090B34: .4byte gUnknown_08590F44
_08090B38: .4byte 0x00001414
_08090B3C: .4byte 0x0000141A
_08090B40: .4byte gUnknown_08590FBC

	THUMB_FUNC_START nullsub_63
nullsub_63: @ 0x08090B44
	bx lr

	THUMB_FUNC_START sub_8090B48
sub_8090B48: @ 0x08090B48
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	mov r8, r1
	ldr r0, [r7, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _08090B66
	mov r1, r8
	adds r1, #0x3b
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_08090B66:
	ldr r5, _08090C48  @ gUnknown_0200D3E0
	ldr r4, _08090C4C  @ gUnknown_0200F158
	ldrb r1, [r4]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r5
	str r7, [r0]
	movs r1, #1
	negs r1, r1
	adds r0, r7, #0
	bl BattleGenerateUiStats
	ldrb r0, [r4]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r5
	ldr r3, _08090C50  @ gBattleActor
	adds r0, r3, #0
	adds r0, #0x5a
	ldrh r0, [r0]
	adds r0, #1
	movs r2, #0xff
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #4]
	ldrb r0, [r4]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r5
	adds r0, r3, #0
	adds r0, #0x60
	ldrh r0, [r0]
	adds r0, #1
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #6]
	ldrb r0, [r4]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r5
	adds r0, r3, #0
	adds r0, #0x62
	ldrh r0, [r0]
	adds r0, #1
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #8]
	adds r0, r7, #0
	bl GetUnitSupporterCount
	adds r5, r0, #0
	movs r6, #0
	movs r4, #0
	cmp r6, r5
	bge _08090BF2
_08090BDC:
	adds r0, r7, #0
	adds r1, r4, #0
	bl CanUnitSupportNow
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08090BEC
	adds r6, #1
_08090BEC:
	adds r4, #1
	cmp r4, r5
	blt _08090BDC
_08090BF2:
	cmp r6, #3
	ble _08090C0C
	mov r5, r8
	adds r5, #0x2e
	ldrb r4, [r5]
	subs r0, r6, #1
	movs r1, #3
	bl __divsi3
	adds r0, #6
	cmp r4, r0
	bge _08090C0C
	strb r0, [r5]
_08090C0C:
	ldr r4, _08090C48  @ gUnknown_0200D3E0
	ldr r3, _08090C4C  @ gUnknown_0200F158
	ldrb r1, [r3]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r4
	strb r6, [r0, #0xa]
	ldr r0, _08090C54  @ gUnknown_0200D6E0
	ldrb r1, [r3]
	lsls r2, r1, #2
	adds r2, r2, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r4
	str r0, [r2]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	adds r0, r7, #0
	bl GetUnitSMSId
	bl SMS_RegisterUsage
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08090C48: .4byte gUnknown_0200D3E0
_08090C4C: .4byte gUnknown_0200F158
_08090C50: .4byte gBattleActor
_08090C54: .4byte gUnknown_0200D6E0

	THUMB_FUNC_START sub_8090C58
sub_8090C58: @ 0x08090C58
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _08090CAC  @ gUnknown_0200F158
	movs r1, #0
	strb r1, [r0]
	adds r0, r6, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _08090CB4
	ldr r0, _08090CB0  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xf]
	adds r5, r0, #1
	adds r0, #0x40
	cmp r5, r0
	bge _08090CF0
_08090C78:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _08090C9E
	ldr r0, [r4]
	cmp r0, #0
	beq _08090C9E
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08090C9E
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_8090B48
_08090C9E:
	adds r5, #1
	ldr r0, _08090CB0  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xf]
	adds r0, #0x40
	cmp r5, r0
	blt _08090C78
	b _08090CF0
	.align 2, 0
_08090CAC: .4byte gUnknown_0200F158
_08090CB0: .4byte gUnknown_0202BCF0
_08090CB4:
	ldr r0, _08090CBC  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xf]
	adds r4, r0, #1
	b _08090CEA
	.align 2, 0
_08090CBC: .4byte gUnknown_0202BCF0
_08090CC0:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _08090CE4
	ldr r0, [r2]
	cmp r0, #0
	beq _08090CE4
	ldr r0, [r2, #0xc]
	ldr r1, _08090CF8  @ 0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _08090CE4
	adds r0, r2, #0
	adds r1, r6, #0
	bl sub_8090B48
_08090CE4:
	adds r4, #1
	ldr r0, _08090CFC  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xf]
_08090CEA:
	adds r0, #0x40
	cmp r4, r0
	blt _08090CC0
_08090CF0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08090CF8: .4byte 0x0001000C
_08090CFC: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_8090D00
sub_8090D00: @ 0x08090D00
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _08090D44  @ gUnknown_0200F158
	movs r1, #0
	strb r1, [r0]
	adds r0, r6, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _08090D48
	movs r5, #1
_08090D16:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _08090D3C
	ldr r0, [r4]
	cmp r0, #0
	beq _08090D3C
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08090D3C
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_8090B48
_08090D3C:
	adds r5, #1
	cmp r5, #0x3f
	ble _08090D16
	b _08090D74
	.align 2, 0
_08090D44: .4byte gUnknown_0200F158
_08090D48:
	movs r4, #1
_08090D4A:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _08090D6E
	ldr r0, [r2]
	cmp r0, #0
	beq _08090D6E
	ldr r0, [r2, #0xc]
	ldr r1, _08090D7C  @ 0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _08090D6E
	adds r0, r2, #0
	adds r1, r6, #0
	bl sub_8090B48
_08090D6E:
	adds r4, #1
	cmp r4, #0x3f
	ble _08090D4A
_08090D74:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08090D7C: .4byte 0x0001000C

	THUMB_FUNC_START sub_8090D80
sub_8090D80: @ 0x08090D80
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	mov r8, r0
	ldr r2, _08090E60  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r6, #1
	orrs r0, r6
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	bl SetInterrupt_LCDVCountMatch
	movs r0, #0
	bl SetupBackgrounds
	bl Font_InitForUIDefault
	bl sub_8003D20
	bl ResetIconGraphics
	bl SetupMapSpritesPalettes
	movs r4, #0
	str r4, [sp, #4]
	ldr r1, _08090E64  @ gUnknown_02022C08
	ldr r2, _08090E68  @ 0x01000008
	add r0, sp, #4
	bl CpuFastSet
	bl LoadObjUIGfx
	mov r0, r8
	bl NewGreenTextColorManager
	mov r0, r8
	adds r0, #0x3b
	strb r4, [r0]
	subs r0, #0xd
	movs r5, #6
	strb r5, [r0]
	mov r0, r8
	bl sub_8090D00
	mov r0, r8
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _08090E14
	mov r0, r8
	adds r0, #0x2a
	ldrb r0, [r0]
	mov r1, r8
	adds r1, #0x32
	str r1, [sp, #0x14]
	mov r2, r8
	adds r2, #0x29
	str r2, [sp, #8]
	movs r1, #0x2f
	add r1, r8
	mov sl, r1
	cmp r0, #1
	bne _08090E88
_08090E14:
	ldr r4, _08090E6C  @ gUnknown_0202BCF0
	ldrb r1, [r4, #0x1a]
	mov r3, r8
	adds r3, #0x34
	mov r2, r8
	adds r2, #0x32
	str r2, [sp, #0x14]
	cmp r1, #0
	beq _08090E38
	lsrs r0, r1, #7
	ands r0, r6
	adds r2, #1
	strb r0, [r2]
	strb r0, [r3]
	movs r0, #0x7f
	ands r1, r0
	ldr r0, [sp, #0x14]
	strb r1, [r0]
_08090E38:
	mov r0, r8
	adds r0, #0x29
	ldrb r1, [r0]
	str r0, [sp, #8]
	movs r2, #0x2f
	add r2, r8
	mov sl, r2
	cmp r1, #4
	beq _08090E7E
	ldrb r0, [r2]
	cmp r0, #0
	beq _08090E7E
	ldrb r0, [r4, #0x19]
	lsrs r1, r0, #4
	cmp r1, #0
	beq _08090E7E
	cmp r1, #6
	bls _08090E70
	strb r5, [r2]
	b _08090E74
	.align 2, 0
_08090E60: .4byte gLCDControlBuffer
_08090E64: .4byte gUnknown_02022C08
_08090E68: .4byte 0x01000008
_08090E6C: .4byte gUnknown_0202BCF0
_08090E70:
	mov r0, sl
	strb r1, [r0]
_08090E74:
	mov r1, sl
	ldrb r0, [r1]
	mov r1, r8
	adds r1, #0x36
	strb r0, [r1]
_08090E7E:
	ldr r2, [sp, #0x14]
	ldrb r0, [r2]
	ldrb r1, [r3]
	bl sub_8092BF0
_08090E88:
	ldr r0, _08090F70  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r4, _08090F74  @ gBG1TilemapBuffer
	adds r0, r4, #0
	movs r1, #0
	bl BG_Fill
	ldr r0, _08090F78  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	bl ResetIconGraphics_
	movs r0, #4
	bl LoadIconPalettes
	bl LoadUiFrameGraphics
	ldr r0, _08090F7C  @ gUnknown_08A1CD68
	ldr r1, _08090F80  @ 0x06014800
	bl CopyDataWithPossibleUncomp
	mov r1, sl
	ldrb r0, [r1]
	ldr r2, _08090F84  @ gUnknown_08A1D288
	cmp r0, #0
	beq _08090EC4
	ldr r2, _08090F88  @ gUnknown_08A1CDC4
_08090EC4:
	ldr r1, _08090F8C  @ 0x06015800
	adds r0, r2, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _08090F90  @ gUnknown_08A1B154
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x40
	bl CopyToPaletteBuffer
	bl sub_8097FDC
	ldr r1, _08090F94  @ gUnknown_08A1C8B4
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r4, #0
	bl CallARM_FillTileRect
	movs r4, #0
	mov r2, r8
	adds r2, #0x2e
	str r2, [sp, #0x10]
	mov r0, r8
	adds r0, #0x2b
	str r0, [sp, #0xc]
	ldr r6, _08090F98  @ gUnknown_0200E098
	movs r1, #0x10
	adds r1, r1, r6
	mov r9, r1
	adds r5, r6, #0
	movs r7, #0
_08090F02:
	lsls r0, r4, #3
	ldr r1, _08090F9C  @ gUnknown_0200E060
	adds r0, r0, r1
	movs r1, #5
	bl Text_Init
	adds r0, r5, #0
	movs r1, #8
	bl Text_Allocate
	adds r0, r6, #0
	adds r0, #8
	adds r0, r7, r0
	movs r1, #7
	bl Text_Init
	mov r0, r9
	movs r1, #5
	bl Text_Init
	movs r2, #0x18
	add r9, r2
	adds r5, #0x18
	adds r7, #0x18
	adds r4, #1
	cmp r4, #6
	ble _08090F02
	ldr r0, _08090FA0  @ gUnknown_0200E140
	movs r1, #4
	bl Text_Init
	ldr r0, _08090FA4  @ gUnknown_0200E148
	movs r1, #0x14
	bl Text_Init
	ldr r0, _08090FA8  @ gUnknown_0200E150
	movs r1, #8
	bl Text_Init
	ldr r1, [sp, #0x14]
	ldrb r0, [r1]
	bl sub_8090238
	ldr r2, [sp, #8]
	ldrb r0, [r2]
	cmp r0, #4
	bne _08090FAC
	mov r0, r8
	movs r1, #0
	bl sub_8090418
	movs r0, #0
	ldr r1, [sp, #8]
	strb r0, [r1]
	b _08090FBE
	.align 2, 0
_08090F70: .4byte gBG0TilemapBuffer
_08090F74: .4byte gBG1TilemapBuffer
_08090F78: .4byte gBG2TilemapBuffer
_08090F7C: .4byte gUnknown_08A1CD68
_08090F80: .4byte 0x06014800
_08090F84: .4byte gUnknown_08A1D288
_08090F88: .4byte gUnknown_08A1CDC4
_08090F8C: .4byte 0x06015800
_08090F90: .4byte gUnknown_08A1B154
_08090F94: .4byte gUnknown_08A1C8B4
_08090F98: .4byte gUnknown_0200E098
_08090F9C: .4byte gUnknown_0200E060
_08090FA0: .4byte gUnknown_0200E140
_08090FA4: .4byte gUnknown_0200E148
_08090FA8: .4byte gUnknown_0200E150
_08090FAC:
	mov r0, r8
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _08090FBE
	mov r0, r8
	movs r1, #1
	bl sub_8090418
_08090FBE:
	movs r1, #0
	movs r0, #0
	mov r2, r8
	strh r0, [r2, #0x3c]
	ldr r0, [sp, #0xc]
	strb r1, [r0]
	ldr r4, _08091014  @ gUnknown_0200E140
	adds r0, r4, #0
	bl Text_Clear
	adds r0, r4, #0
	movs r1, #4
	bl Text_SetXCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColorId
	ldr r0, _08091018  @ 0x000004E5
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_AppendString
	ldr r1, _0809101C  @ gUnknown_02023DEE
	adds r0, r4, #0
	bl Text_Draw
	ldr r1, _08091020  @ gUnknown_0200F15C
	movs r2, #0xff
	adds r0, r1, #0
	adds r0, #0x4c
_08091000:
	str r2, [r0]
	subs r0, #4
	cmp r0, r1
	bge _08091000
	mov r1, r8
	ldrh r0, [r1, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	b _08091042
	.align 2, 0
_08091014: .4byte gUnknown_0200E140
_08091018: .4byte 0x000004E5
_0809101C: .4byte gUnknown_02023DEE
_08091020: .4byte gUnknown_0200F15C
_08091024:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	mov r2, sl
	ldrb r3, [r2]
	movs r0, #1
	str r0, [sp]
	mov r0, r8
	ldr r2, _08091164  @ gBG0TilemapBuffer
	bl sub_80922F0
	adds r4, #1
	mov r1, r8
	ldrh r0, [r1, #0x3e]
	lsrs r0, r0, #4
	adds r0, #6
_08091042:
	cmp r4, r0
	bge _0809104E
	ldr r0, _08091168  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	blt _08091024
_0809104E:
	ldr r2, [sp, #0x10]
	ldrb r0, [r2]
	mov r2, sl
	ldrb r1, [r2]
	movs r2, #1
	bl sub_8092298
	ldr r7, _0809116C  @ gLCDControlBuffer
	ldrb r0, [r7, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r1, r7, #0
	adds r1, #0x2d
	movs r5, #0x10
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x3a
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	adds r1, #4
	ldrb r0, [r1]
	movs r6, #1
	orrs r0, r6
	movs r4, #2
	orrs r0, r4
	movs r3, #4
	orrs r0, r3
	movs r2, #8
	orrs r0, r2
	orrs r0, r5
	strb r0, [r1]
	movs r0, #0x36
	adds r0, r0, r7
	mov r9, r0
	ldrb r1, [r0]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	orrs r0, r4
	orrs r0, r3
	orrs r0, r2
	orrs r0, r5
	mov r1, r9
	strb r0, [r1]
	movs r0, #0xf
	bl BG_EnableSyncByMask
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	mov r0, r8
	ldrh r2, [r0, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl BG_SetPosition
	ldrb r2, [r7, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r7, #0xc]
	ldrb r2, [r7, #0x10]
	adds r0, r1, #0
	ands r0, r2
	orrs r0, r4
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	orrs r1, r6
	strb r1, [r7, #0x14]
	ldrb r0, [r7, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r7, #0x18]
	ldr r0, _08091170  @ gUnknown_08A1C7D8
	ldr r1, _08091174  @ gUnknown_020239A8
	bl CopyDataWithPossibleUncomp
	ldr r0, _08091178  @ gUnknown_08A1A084
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _0809117C  @ gUnknown_08A17B08
	mov r1, r8
	bl Proc_Create
	mov r1, r8
	str r0, [r1, #0x40]
	movs r0, #0
	movs r1, #0
	movs r2, #0xa
	bl sub_8086BB8
	mov r2, r8
	str r0, [r2, #0x44]
	movs r1, #1
	negs r1, r1
	movs r0, #0
	bl LoadDialogueBoxGfx
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08091164: .4byte gBG0TilemapBuffer
_08091168: .4byte gUnknown_0200F158
_0809116C: .4byte gLCDControlBuffer
_08091170: .4byte gUnknown_08A1C7D8
_08091174: .4byte gUnknown_020239A8
_08091178: .4byte gUnknown_08A1A084
_0809117C: .4byte gUnknown_08A17B08

	THUMB_FUNC_START sub_8091180
sub_8091180: @ 0x08091180
	push {lr}
	adds r3, r0, #0
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	adds r0, #8
	movs r2, #1
	strb r2, [r0]
	subs r0, #5
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #3
	strb r1, [r0]
	adds r0, #9
	ldrb r0, [r0]
	cmp r0, #3
	bne _080911AC
	adds r0, r3, #0
	adds r0, #0x2f
	strb r1, [r0]
	b _080911B2
_080911AC:
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
_080911B2:
	ldrb r0, [r0]
	adds r2, r3, #0
	adds r2, #0x36
	movs r1, #0
	strb r0, [r2]
	movs r2, #0
	strh r1, [r3, #0x3e]
	adds r1, r3, #0
	adds r1, #0x32
	movs r0, #1
	strb r0, [r1]
	subs r1, #8
	strb r2, [r1]
	adds r1, #9
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x34
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, r3, #0
	bl sub_8090D80
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80911E4
sub_80911E4: @ 0x080911E4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r2, r0, #0
	adds r5, r1, #0
	adds r0, r5, #0
	adds r0, #0x3a
	adds r6, r5, #0
	adds r6, #0x3b
	ldrb r0, [r0]
	ldrb r1, [r6]
	cmp r0, r1
	bls _08091268
	ldr r0, [r2, #0xc]
	movs r1, #0xb
	negs r1, r1
	ands r0, r1
	str r0, [r2, #0xc]
	ldr r0, [r2]
	ldrb r0, [r0, #4]
	bl sub_80952EC
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	b _08091234
_08091216:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	ldr r2, _0809125C  @ gBG0TilemapBuffer
	bl sub_80922F0
	adds r4, #1
	ldrh r0, [r5, #0x3e]
	lsrs r0, r0, #4
	adds r0, #6
_08091234:
	cmp r4, r0
	bge _08091240
	ldr r0, _08091260  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	blt _08091216
_08091240:
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	ldr r0, _08091264  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809127A
	movs r0, #0x6a
	bl m4aSongNumStart
	b _0809127A
	.align 2, 0
_0809125C: .4byte gBG0TilemapBuffer
_08091260: .4byte gUnknown_0200F158
_08091264: .4byte gUnknown_0202BCF0
_08091268:
	ldr r0, _08091284  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809127A
	movs r0, #0x6c
	bl m4aSongNumStart
_0809127A:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08091284: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_8091288
sub_8091288: @ 0x08091288
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809130C
	ldr r0, [r4, #0xc]
	movs r1, #0xa
	orrs r0, r1
	str r0, [r4, #0xc]
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl sub_8095314
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	adds r6, r5, #0
	adds r6, #0x3b
	b _080912D8
_080912BA:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	ldr r2, _08091300  @ gBG0TilemapBuffer
	bl sub_80922F0
	adds r4, #1
	ldrh r0, [r5, #0x3e]
	lsrs r0, r0, #4
	adds r0, #6
_080912D8:
	cmp r4, r0
	bge _080912E4
	ldr r0, _08091304  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	blt _080912BA
_080912E4:
	ldrb r0, [r6]
	subs r0, #1
	strb r0, [r6]
	ldr r0, _08091308  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809131E
	movs r0, #0x6b
	bl m4aSongNumStart
	b _0809131E
	.align 2, 0
_08091300: .4byte gBG0TilemapBuffer
_08091304: .4byte gUnknown_0200F158
_08091308: .4byte gUnknown_0202BCF0
_0809130C:
	ldr r0, _08091328  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809131E
	movs r0, #0x6c
	bl m4aSongNumStart
_0809131E:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08091328: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_809132C
sub_809132C: @ 0x0809132C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x30
	ldrb r0, [r0]
	ldr r1, _08091358  @ gUnknown_0200D6E0
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r5, [r0]
	ldr r1, [r5, #0xc]
	movs r0, #0x80
	lsls r0, r0, #0x12
	ands r0, r1
	cmp r0, #0
	beq _08091360
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x38
	ldr r2, _0809135C  @ 0x00000C52
	b _080913B2
	.align 2, 0
_08091358: .4byte gUnknown_0200D6E0
_0809135C: .4byte 0x00000C52
_08091360:
	movs r0, #8
	ands r1, r0
	cmp r1, #0
	beq _080913CA
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08091390
	adds r0, r5, #0
	bl sub_8097E74
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08091390
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x38
	ldr r2, _0809138C  @ 0x0000088A
	b _080913B2
	.align 2, 0
_0809138C: .4byte 0x0000088A
_08091390:
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080913C0
	adds r0, r5, #0
	bl sub_8097E38
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080913C0
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x38
	ldr r2, _080913BC  @ 0x00000889
_080913B2:
	movs r0, #0
	adds r3, r4, #0
	bl sub_8097DA8
	b _080913D2
	.align 2, 0
_080913BC: .4byte 0x00000889
_080913C0:
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80911E4
	b _080913D2
_080913CA:
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_8091288
_080913D2:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80913D8
sub_80913D8: @ 0x080913D8
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r2, r1, #0
	ldr r0, [r5]
	ldr r1, [r5, #4]
	ldr r0, [r0, #0x28]
	ldr r1, [r1, #0x28]
	orrs r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	beq _0809140C
	ldr r0, _08091408  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809143C
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0809143C
	.align 2, 0
_08091408: .4byte gUnknown_0202BCF0
_0809140C:
	ldr r4, [r5, #0xc]
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r0, r4
	lsrs r1, r0, #0xe
	adds r0, r1, r2
	adds r0, #3
	movs r1, #3
	bl __modsi3
	lsls r1, r0, #0xe
	ldr r0, _08091444  @ 0xFFFF3FFF
	ands r4, r0
	orrs r4, r1
	str r4, [r5, #0xc]
	ldr r0, _08091448  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809143C
	movs r0, #0x6a
	bl m4aSongNumStart
_0809143C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08091444: .4byte 0xFFFF3FFF
_08091448: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_809144C
sub_809144C: @ 0x0809144C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r2, _08091474  @ gKeyStatusPtr
	ldr r0, [r2]
	ldrh r1, [r0, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	mov ip, r2
	cmp r0, #0
	beq _08091478
	adds r1, r5, #0
	adds r1, #0x31
	movs r0, #2
	b _0809147E
	.align 2, 0
_08091474: .4byte gKeyStatusPtr
_08091478:
	adds r1, r5, #0
	adds r1, #0x31
	movs r0, #1
_0809147E:
	strb r0, [r1]
	mov r8, r1
	mov r0, ip
	ldr r3, [r0]
	ldrh r4, [r3, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r4
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	cmp r7, #0
	beq _080914A0
	adds r0, r5, #0
	movs r1, #3
	bl Proc_GotoLabel
	b _080917CA
_080914A0:
	movs r1, #1
	mov r9, r1
	mov r6, r9
	ands r6, r4
	cmp r6, #0
	beq _0809150C
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	beq _080914C8
	cmp r0, #1
	bgt _080914C0
	cmp r0, #0
	beq _080914D0
	b _080917CA
_080914C0:
	cmp r0, #3
	bne _080914C6
	b _080915BE
_080914C6:
	b _080917CA
_080914C8:
	adds r0, r5, #0
	bl sub_809132C
	b _080917CA
_080914D0:
	ldr r1, _08091504  @ gUnknown_0200D6E0
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl SetLastStatScreenUid
	ldr r0, _08091508  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080914FC
	movs r0, #0x6a
	bl m4aSongNumStart
_080914FC:
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080917CA
	.align 2, 0
_08091504: .4byte gUnknown_0200D6E0
_08091508: .4byte gUnknown_0202BCF0
_0809150C:
	ldrh r1, [r3, #6]
	movs r2, #0x20
	adds r0, r2, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	cmp r7, #0
	beq _080915A0
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	bne _08091560
	adds r0, r2, #0
	ands r0, r4
	cmp r0, #0
	bne _08091530
	b _080917CA
_08091530:
	ldr r1, _08091558  @ gUnknown_0200D6E0
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	movs r1, #1
	negs r1, r1
	bl sub_80913D8
	ldrb r1, [r4]
	ldr r2, _0809155C  @ gBG0TilemapBuffer
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	str r6, [sp]
	b _080915E0
	.align 2, 0
_08091558: .4byte gUnknown_0200D6E0
_0809155C: .4byte gBG0TilemapBuffer
_08091560:
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bhi _0809156C
	b _080917CA
_0809156C:
	adds r1, r5, #0
	adds r1, #0x36
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	adds r0, r5, #0
	movs r1, #2
	bl Proc_GotoLabel
	adds r0, r5, #0
	adds r0, #0x2d
	strb r6, [r0]
	ldr r0, _0809159C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _08091592
	b _080917CA
_08091592:
	movs r0, #0x6f
	bl m4aSongNumStart
	b _080917CA
	.align 2, 0
_0809159C: .4byte gUnknown_0202BCF0
_080915A0:
	movs r6, #0x10
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08091634
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	bne _080915F0
	adds r0, r6, #0
	ands r0, r4
	cmp r0, #0
	bne _080915BE
	b _080917CA
_080915BE:
	ldr r1, _080915E8  @ gUnknown_0200D6E0
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	movs r1, #1
	bl sub_80913D8
	ldrb r1, [r4]
	ldr r2, _080915EC  @ gBG0TilemapBuffer
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	str r7, [sp]
_080915E0:
	adds r0, r5, #0
	bl sub_80922F0
	b _080917CA
	.align 2, 0
_080915E8: .4byte gUnknown_0200D6E0
_080915EC: .4byte gBG0TilemapBuffer
_080915F0:
	adds r0, r5, #0
	adds r0, #0x2f
	adds r1, r5, #0
	adds r1, #0x2e
	ldrb r0, [r0]
	ldrb r1, [r1]
	cmp r0, r1
	bcc _08091602
	b _080917CA
_08091602:
	adds r1, r5, #0
	adds r1, #0x36
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2d
	strb r7, [r0]
	ldr r0, _08091630  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08091624
	movs r0, #0x6f
	bl m4aSongNumStart
_08091624:
	adds r0, r5, #0
	movs r1, #2
	bl Proc_GotoLabel
	b _080917CA
	.align 2, 0
_08091630: .4byte gUnknown_0202BCF0
_08091634:
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	bne _08091654
	ldrh r1, [r3, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08091716
	ldrh r1, [r3, #0x10]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _08091716
_08091654:
	adds r6, r5, #0
	adds r6, #0x30
	ldrb r0, [r6]
	cmp r0, #0
	bne _08091688
	adds r0, r7, #0
	ands r0, r4
	cmp r0, #0
	bne _08091668
	b _080917CA
_08091668:
	ldr r0, _08091684  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809167A
	movs r0, #0x66
	bl m4aSongNumStart
_0809167A:
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #3
	strb r0, [r1]
	b _080917CA
	.align 2, 0
_08091684: .4byte gUnknown_0202BCF0
_08091688:
	subs r0, #1
	strb r0, [r6]
	ldr r0, _08091708  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809169E
	movs r0, #0x66
	bl m4aSongNumStart
_0809169E:
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #1
	bhi _08091710
	ldrh r0, [r5, #0x3e]
	lsrs r0, r0, #4
	cmp r0, #0
	beq _08091710
	cmp r1, #0
	bne _080916C0
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	movs r0, #1
	strb r0, [r4]
_080916C0:
	ldrh r1, [r5, #0x3e]
	lsrs r1, r1, #4
	subs r1, #1
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r2, _0809170C  @ gBG0TilemapBuffer
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	mov r0, r9
	str r0, [sp]
	adds r0, r5, #0
	bl sub_80922F0
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #2
	strb r0, [r1]
	mov r1, r8
	ldrb r0, [r1]
	lsls r0, r0, #2
	ldrh r2, [r5, #0x3e]
	subs r2, r2, r0
	strh r2, [r5, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl BG_SetPosition
	ldrb r0, [r4]
	cmp r0, #0
	bne _080917CA
	b _080917C6
	.align 2, 0
_08091708: .4byte gUnknown_0202BCF0
_0809170C: .4byte gBG0TilemapBuffer
_08091710:
	ldrb r0, [r4]
	subs r0, #1
	b _080917C8
_08091716:
	mov r0, ip
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r3, #0x80
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne _0809173C
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080917CA
	ldrh r1, [r2, #0x10]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _080917CA
_0809173C:
	adds r6, r5, #0
	adds r6, #0x30
	ldrb r1, [r6]
	ldr r7, _080917B8  @ gUnknown_0200F158
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	bge _080917CA
	adds r0, r1, #1
	strb r0, [r6]
	ldr r0, _080917BC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08091762
	movs r0, #0x66
	bl m4aSongNumStart
_08091762:
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #4
	bne _080917C4
	ldrb r1, [r6]
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	beq _080917C4
	ldrh r1, [r5, #0x3e]
	lsrs r1, r1, #4
	adds r1, #6
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r2, _080917C0  @ gBG0TilemapBuffer
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	movs r4, #1
	str r4, [sp]
	adds r0, r5, #0
	bl sub_80922F0
	adds r0, r5, #0
	adds r0, #0x29
	strb r4, [r0]
	mov r1, r8
	ldrb r2, [r1]
	lsls r2, r2, #2
	ldrh r0, [r5, #0x3e]
	adds r2, r2, r0
	strh r2, [r5, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl BG_SetPosition
	b _080917CA
	.align 2, 0
_080917B8: .4byte gUnknown_0200F158
_080917BC: .4byte gUnknown_0202BCF0
_080917C0: .4byte gBG0TilemapBuffer
_080917C4:
	ldrb r0, [r4]
_080917C6:
	adds r0, #1
_080917C8:
	strb r0, [r4]
_080917CA:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80917D8
sub_80917D8: @ 0x080917D8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	adds r4, r7, #0
	adds r4, #0x2b
	ldrb r0, [r4]
	ldr r2, _0809180C  @ gKeyStatusPtr
	cmp r0, #0
	beq _08091810
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08091810
	bl CloseHelpBox
	movs r0, #0
	strb r0, [r4]
	b _08091AA0
	.align 2, 0
_0809180C: .4byte gKeyStatusPtr
_08091810:
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080918F8
	adds r0, r7, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	bne _080918F8
	adds r1, r7, #0
	adds r1, #0x32
	ldrb r0, [r1]
	str r0, [sp, #4]
	adds r2, r7, #0
	adds r2, #0x2a
	movs r0, #1
	strb r0, [r2]
	ldr r0, _08091898  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	mov r8, r1
	cmp r0, #0
	blt _0809184A
	movs r0, #0x6a
	bl m4aSongNumStart
_0809184A:
	ldr r2, _0809189C  @ gUnknown_08A17C48
	adds r5, r7, #0
	adds r5, #0x2d
	adds r6, r7, #0
	adds r6, #0x2f
	ldrb r1, [r6]
	lsls r0, r1, #3
	adds r0, r0, r1
	ldrb r1, [r5]
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	ldrb r0, [r0]
	mov r1, r8
	strb r0, [r1]
	adds r4, r7, #0
	adds r4, #0x33
	ldrb r0, [r4]
	adds r0, #1
	movs r1, #1
	ands r0, r1
	strb r0, [r4]
	mov r1, r8
	ldrb r0, [r1]
	ldrb r1, [r4]
	bl sub_8092BF0
	lsls r0, r0, #0x18
	mov r9, r4
	movs r1, #0x34
	adds r1, r1, r7
	mov sl, r1
	adds r1, r7, #0
	adds r1, #0x35
	str r1, [sp, #8]
	cmp r0, #0
	beq _080918CC
	movs r4, #0
	b _080918B8
	.align 2, 0
_08091898: .4byte gUnknown_0202BCF0
_0809189C: .4byte gUnknown_08A17C48
_080918A0:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	ldrb r3, [r6]
	movs r0, #1
	str r0, [sp]
	adds r0, r7, #0
	ldr r2, _080918F0  @ gBG0TilemapBuffer
	bl sub_80922F0
	adds r4, #1
	cmp r4, #5
	bgt _080918C0
_080918B8:
	ldr r0, _080918F4  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	blt _080918A0
_080918C0:
	ldrh r0, [r7, #0x3e]
	bl sub_8090358
	movs r0, #1
	bl BG_EnableSyncByMask
_080918CC:
	mov r1, r9
	ldrb r0, [r1]
	mov r1, sl
	strb r0, [r1]
	ldrb r0, [r5]
	ldr r1, [sp, #8]
	strb r0, [r1]
	mov r1, r8
	ldrb r0, [r1]
	ldr r1, [sp, #4]
	cmp r0, r1
	bne _080918E6
	b _08091AA0
_080918E6:
	mov r1, r8
	ldrb r0, [r1]
	bl sub_8090238
	b _08091AA0
	.align 2, 0
_080918F0: .4byte gBG0TilemapBuffer
_080918F4: .4byte gUnknown_0200F158
_080918F8:
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08091934
	adds r0, r7, #0
	adds r0, #0x2b
	ldrb r4, [r0]
	cmp r4, #0
	bne _08091934
	ldr r0, _08091930  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08091920
	movs r0, #0x66
	bl m4aSongNumStart
_08091920:
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #1
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x29
	strb r4, [r0]
	b _08091AA0
	.align 2, 0
_08091930: .4byte gUnknown_0202BCF0
_08091934:
	ldr r2, [r2]
	ldrh r1, [r2, #6]
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _080919CA
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #1
	strb r0, [r1]
	subs r1, #6
	ldrb r0, [r1]
	adds r5, r1, #0
	cmp r0, #0
	bne _080919C4
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bhi _08091962
	b _08091AA0
_08091962:
	adds r0, r7, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	bne _0809196E
	b _08091AA0
_0809196E:
	ldr r0, _080919BC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08091980
	movs r0, #0x6f
	bl m4aSongNumStart
_08091980:
	adds r1, r7, #0
	adds r1, #0x36
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	movs r4, #8
	ldr r2, _080919C0  @ gUnknown_08A17C48
	ldrb r1, [r1]
	lsls r0, r1, #3
	adds r0, r0, r1
	lsls r1, r0, #4
	adds r0, r1, #0
	adds r0, #0x80
	adds r0, r0, r2
	ldrb r0, [r0, #8]
	cmp r0, #0
	bne _080919B6
	adds r0, r1, r2
	adds r1, r0, #0
	adds r1, #0x80
_080919A8:
	subs r1, #0x10
	subs r4, #1
	cmp r4, #0
	ble _080919B6
	ldrb r0, [r1, #8]
	cmp r0, #0
	beq _080919A8
_080919B6:
	strb r4, [r5]
	b _08091A32
	.align 2, 0
_080919BC: .4byte gUnknown_0202BCF0
_080919C0: .4byte gUnknown_08A17C48
_080919C4:
	subs r0, #1
	strb r0, [r1]
	b _08091A46
_080919CA:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08091A60
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #1
	strb r0, [r1]
	adds r3, r7, #0
	adds r3, #0x2d
	ldrb r0, [r3]
	adds r6, r7, #0
	adds r6, #0x2f
	cmp r0, #8
	beq _080919FE
	ldr r2, _08091A3C  @ gUnknown_08A17C48
	adds r4, r0, #1
	ldrb r1, [r6]
	lsls r0, r1, #3
	adds r0, r0, r1
	adds r0, r0, r4
	lsls r0, r0, #4
	adds r0, r0, r2
	ldrb r0, [r0, #8]
	cmp r0, #0
	bne _08091A44
_080919FE:
	adds r1, r7, #0
	adds r1, #0x2e
	ldrb r0, [r6]
	ldrb r1, [r1]
	cmp r0, r1
	bcs _08091AA0
	adds r0, r7, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	beq _08091AA0
	strb r5, [r3]
	ldr r0, _08091A40  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08091A28
	movs r0, #0x6f
	bl m4aSongNumStart
_08091A28:
	adds r1, r7, #0
	adds r1, #0x36
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_08091A32:
	adds r0, r7, #0
	movs r1, #2
	bl Proc_GotoLabel
	b _08091AA0
	.align 2, 0
_08091A3C: .4byte gUnknown_08A17C48
_08091A40: .4byte gUnknown_0202BCF0
_08091A44:
	strb r4, [r3]
_08091A46:
	ldr r0, _08091A5C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08091AA0
	movs r0, #0x67
	bl m4aSongNumStart
	b _08091AA0
	.align 2, 0
_08091A5C: .4byte gUnknown_0202BCF0
_08091A60:
	ldrh r1, [r2, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08091AA0
	adds r1, r7, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	cmp r0, #0
	bne _08091AA0
	movs r0, #1
	strb r0, [r1]
	ldr r2, _08091AB0  @ gUnknown_08A17C48
	adds r3, r7, #0
	adds r3, #0x2d
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r1, r0, #3
	adds r1, r1, r0
	ldrb r3, [r3]
	adds r1, r1, r3
	lsls r1, r1, #4
	adds r0, r1, r2
	ldrb r0, [r0, #8]
	adds r2, #0xc
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x28
	bl StartHelpBox
_08091AA0:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08091AB0: .4byte gUnknown_08A17C48

	THUMB_FUNC_START sub_8091AB4
sub_8091AB4: @ 0x08091AB4
	push {r4, lr}
	sub sp, #4
	movs r0, #1
	movs r1, #0xe
	movs r2, #3
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8091AEC
sub_8091AEC: @ 0x08091AEC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r0, #0x2d
	ldrb r6, [r0]
	ldr r0, _08091B2C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08091B34
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	bne _08091B34
	ldr r0, _08091B30  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08091B1E
	movs r0, #0x6b
	bl m4aSongNumStart
_08091B1E:
	movs r0, #0
	bl SetLastStatScreenUid
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _08091BF6
	.align 2, 0
_08091B2C: .4byte gKeyStatusPtr
_08091B30: .4byte gUnknown_0202BCF0
_08091B34:
	adds r5, r4, #0
	adds r5, #0x29
	ldrb r0, [r5]
	cmp r0, #1
	beq _08091B62
	cmp r0, #1
	bgt _08091B48
	cmp r0, #0
	beq _08091B52
	b _08091BC4
_08091B48:
	cmp r0, #2
	beq _08091B94
	cmp r0, #3
	beq _08091B5A
	b _08091BC4
_08091B52:
	adds r0, r4, #0
	bl sub_809144C
	b _08091BC4
_08091B5A:
	adds r0, r4, #0
	bl sub_80917D8
	b _08091BC4
_08091B62:
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r2, [r0]
	lsls r2, r2, #2
	ldrh r0, [r4, #0x3e]
	adds r2, r2, r0
	strh r2, [r4, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl BG_SetPosition
	ldrh r0, [r4, #0x3e]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	bne _08091BC4
	movs r0, #0
	strb r0, [r5]
	ldrh r0, [r4, #0x3e]
	bl sub_8090358
	b _08091BC4
_08091B94:
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r0, r0, #2
	ldrh r2, [r4, #0x3e]
	subs r2, r2, r0
	strh r2, [r4, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl BG_SetPosition
	ldrh r0, [r4, #0x3e]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	bne _08091BC4
	movs r0, #0
	strb r0, [r5]
	ldrh r0, [r4, #0x3e]
	bl sub_8090358
_08091BC4:
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	beq _08091BF6
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r3, [r0]
	cmp r6, r3
	beq _08091BF6
	ldr r2, _08091BFC  @ gUnknown_08A17C48
	adds r0, #9
	ldrb r0, [r0]
	lsls r1, r0, #3
	adds r1, r1, r0
	adds r1, r1, r3
	lsls r1, r1, #4
	adds r0, r1, r2
	ldrb r0, [r0, #8]
	adds r2, #0xc
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x28
	bl StartHelpBox
_08091BF6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08091BFC: .4byte gUnknown_08A17C48

	THUMB_FUNC_START sub_8091C00
sub_8091C00: @ 0x08091C00
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _08091C28
	ldr r1, _08091CA8  @ gUnknown_0200D6E0
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_80953C0
	bl sub_809014C
_08091C28:
	ldr r3, _08091CAC  @ gUnknown_0202BCF0
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x32
	lsls r0, r0, #7
	ldrb r1, [r1]
	adds r0, r0, r1
	strb r0, [r3, #0x1a]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	cmp r2, #0
	beq _08091C52
	lsls r2, r2, #4
	ldrb r1, [r3, #0x19]
	movs r0, #0xf
	ands r0, r1
	orrs r0, r2
	strb r0, [r3, #0x19]
_08091C52:
	ldr r0, [r4, #0x40]
	bl Proc_Delete
	ldr r0, [r4, #0x44]
	cmp r0, #0
	beq _08091C62
	bl Proc_Delete
_08091C62:
	bl EndGreenTextColorManager
	ldr r0, _08091CB0  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _08091CB4  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _08091CB8  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0xf
	bl BG_EnableSyncByMask
	ldr r2, _08091CBC  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	bl sub_8003D20
	bl ResetIconGraphics
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08091CA8: .4byte gUnknown_0200D6E0
_08091CAC: .4byte gUnknown_0202BCF0
_08091CB0: .4byte gBG0TilemapBuffer
_08091CB4: .4byte gBG1TilemapBuffer
_08091CB8: .4byte gBG2TilemapBuffer
_08091CBC: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_8091CC0
sub_8091CC0: @ 0x08091CC0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _08091CE4  @ gUnknown_0200D7E0
	movs r1, #0x1f
	movs r2, #0x1f
	movs r3, #0
	bl TileMap_FillRect
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	cmp r4, r0
	bge _08091D12
	ldr r0, _08091CE8  @ gUnknown_0200F158
	adds r6, r5, #0
	adds r6, #0x2f
	b _08091D0C
	.align 2, 0
_08091CE4: .4byte gUnknown_0200D7E0
_08091CE8: .4byte gUnknown_0200F158
_08091CEC:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	ldrb r3, [r6]
	movs r0, #0
	str r0, [sp]
	adds r0, r5, #0
	ldr r2, _08091D48  @ gUnknown_0200D7E0
	bl sub_80922F0
	adds r4, #1
	ldrh r0, [r5, #0x3e]
	lsrs r0, r0, #4
	adds r0, #6
	cmp r4, r0
	bge _08091D12
	ldr r0, _08091D4C  @ gUnknown_0200F158
_08091D0C:
	ldrb r0, [r0]
	cmp r4, r0
	blt _08091CEC
_08091D12:
	ldr r4, _08091D50  @ gUnknown_0200DFE0
	adds r0, r4, #0
	movs r1, #0x1f
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	adds r6, r5, #0
	adds r6, #0x2f
	ldrb r1, [r6]
	adds r0, r4, #0
	bl sub_80921CC
	movs r1, #0
	movs r0, #0
	strh r0, [r5, #0x3c]
	ldrb r0, [r6]
	adds r2, r5, #0
	adds r2, #0x37
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x38
	strb r1, [r0]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08091D48: .4byte gUnknown_0200D7E0
_08091D4C: .4byte gUnknown_0200F158
_08091D50: .4byte gUnknown_0200DFE0

	THUMB_FUNC_START sub_8091D54
sub_8091D54: @ 0x08091D54
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r5, r0, #0
	adds r2, r5, #0
	adds r2, #0x38
	ldr r1, _08091DB4  @ gUnknown_08A17B30
	ldrh r0, [r5, #0x3c]
	adds r0, r0, r1
	ldrb r0, [r0]
	ldrb r1, [r2]
	adds r0, r0, r1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x14
	bls _08091D80
	movs r0, #0x14
	strb r0, [r2]
_08091D80:
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	movs r3, #0
	str r2, [sp, #0xc]
	adds r2, r5, #0
	adds r2, #0x36
	str r2, [sp, #8]
	movs r0, #0x2f
	adds r0, r0, r5
	mov sl, r0
	ldr r1, [sp, #0xc]
	str r1, [sp, #4]
_08091D9A:
	ldr r2, [sp, #8]
	ldrb r0, [r2]
	mov r1, sl
	ldrb r1, [r1]
	cmp r0, r1
	bls _08091DB8
	ldr r2, [sp, #4]
	ldrb r0, [r2]
	adds r0, r3, r0
	cmp r0, #0x14
	bgt _08091DC0
	b _08091DC6
	.align 2, 0
_08091DB4: .4byte gUnknown_08A17B30
_08091DB8:
	ldr r1, [sp, #4]
	ldrb r0, [r1]
	cmp r3, r0
	bge _08091DC4
_08091DC0:
	movs r1, #0
	b _08091DCC
_08091DC4:
	subs r0, r3, r0
_08091DC6:
	adds r0, #8
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
_08091DCC:
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #3
	adds r0, r4, #0
	adds r0, #0xc
	lsls r6, r1, #1
	adds r2, r3, #1
	mov r9, r2
	cmp r4, r0
	bge _08091E10
	movs r0, #0x1f
	mov r8, r0
	ldr r1, _08091E8C  @ gBG0TilemapBuffer
	mov ip, r1
	ldr r7, _08091E90  @ gUnknown_0200D7E0
	adds r2, r6, #0
_08091DEA:
	adds r0, r4, #0
	mov r1, r8
	ands r0, r1
	lsls r1, r0, #5
	adds r1, #8
	adds r1, r1, r3
	lsls r1, r1, #1
	add r1, ip
	lsls r0, r0, #6
	adds r0, r2, r0
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r1]
	adds r4, #1
	ldrh r0, [r5, #0x3e]
	lsrs r0, r0, #3
	adds r0, #0xc
	cmp r4, r0
	blt _08091DEA
_08091E10:
	ldr r0, _08091E94  @ gBG2TilemapBuffer
	ldr r1, _08091E98  @ gUnknown_0200DFE0
	adds r2, r6, r1
	adds r1, r3, #0
	adds r1, #0xa8
	movs r4, #1
	lsls r1, r1, #1
	adds r1, r1, r0
_08091E20:
	ldrh r0, [r2]
	strh r0, [r1]
	adds r2, #0x40
	adds r1, #0x40
	subs r4, #1
	cmp r4, #0
	bge _08091E20
	mov r3, r9
	cmp r3, #0x13
	ble _08091D9A
	movs r0, #5
	bl BG_EnableSyncByMask
	ldr r2, [sp, #0xc]
	ldrb r0, [r2]
	cmp r0, #0x13
	bls _08091EF4
	ldr r1, [sp, #8]
	ldrb r0, [r1]
	mov r2, sl
	strb r0, [r2]
	ldr r0, _08091E9C  @ gUnknown_02023DF8
	movs r1, #0x16
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _08091EA0  @ gUnknown_02022CB8
	movs r1, #0x16
	movs r2, #0x1f
	movs r3, #0
	bl TileMap_FillRect
	adds r4, r5, #0
	adds r4, #0x32
	adds r6, r5, #0
	adds r6, #0x2e
	ldr r1, _08091EA4  @ gUnknown_0200F15C
	movs r2, #0xff
	adds r0, r1, #0
	adds r0, #0x4c
_08091E72:
	str r2, [r0]
	subs r0, #4
	cmp r0, r1
	bge _08091E72
	bl ResetIconGraphics
	ldrb r0, [r4]
	bl sub_8090238
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	b _08091EC4
	.align 2, 0
_08091E8C: .4byte gBG0TilemapBuffer
_08091E90: .4byte gUnknown_0200D7E0
_08091E94: .4byte gBG2TilemapBuffer
_08091E98: .4byte gUnknown_0200DFE0
_08091E9C: .4byte gUnknown_02023DF8
_08091EA0: .4byte gUnknown_02022CB8
_08091EA4: .4byte gUnknown_0200F15C
_08091EA8:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	mov r0, sl
	ldrb r3, [r0]
	movs r0, #0
	str r0, [sp]
	adds r0, r5, #0
	ldr r2, _08091F04  @ gUnknown_0200D7E0
	bl sub_80922F0
	adds r4, #1
	ldrh r0, [r5, #0x3e]
	lsrs r0, r0, #4
	adds r0, #6
_08091EC4:
	cmp r4, r0
	bge _08091ED0
	ldr r0, _08091F08  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	blt _08091EA8
_08091ED0:
	ldr r0, _08091F0C  @ gUnknown_0200DFE0
	mov r2, sl
	ldrb r1, [r2]
	bl sub_80921CC
	ldrb r0, [r6]
	mov r2, sl
	ldrb r1, [r2]
	movs r2, #0
	bl sub_8092298
	movs r0, #0
	ldr r1, [sp, #0xc]
	strb r0, [r1]
	strh r0, [r5, #0x3c]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_08091EF4:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08091F04: .4byte gUnknown_0200D7E0
_08091F08: .4byte gUnknown_0200F158
_08091F0C: .4byte gUnknown_0200DFE0

	THUMB_FUNC_START sub_8091F10
sub_8091F10: @ 0x08091F10
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	mov r2, r8
	adds r2, #0x38
	ldr r1, _08091FEC  @ gUnknown_08A17B36
	mov r3, r8
	ldrh r0, [r3, #0x3c]
	adds r0, r0, r1
	ldrb r0, [r0]
	ldrb r1, [r2]
	adds r0, r0, r1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x14
	bls _08091F3E
	movs r0, #0x14
	strb r0, [r2]
_08091F3E:
	mov r3, r8
	ldrh r0, [r3, #0x3c]
	adds r0, #1
	strh r0, [r3, #0x3c]
	mov r0, r8
	adds r0, #0x36
	mov r1, r8
	adds r1, #0x37
	ldrb r0, [r0]
	ldrb r1, [r1]
	cmp r0, r1
	bls _08092000
	movs r5, #0
	str r2, [sp]
	ldrb r0, [r2]
	cmp r5, r0
	blt _08091F62
	b _0809208E
_08091F62:
	adds r7, r2, #0
_08091F64:
	mov r1, r8
	ldrh r0, [r1, #0x3e]
	lsrs r4, r0, #3
	adds r0, r4, #0
	adds r0, #0xc
	adds r6, r5, #0
	adds r6, #0x1c
	movs r3, #8
	adds r3, r3, r5
	mov ip, r3
	adds r5, #1
	mov sl, r5
	cmp r4, r0
	bge _08091FB6
	adds r5, r6, #0
	lsls r2, r3, #1
	movs r0, #0x1f
	mov r9, r0
_08091F88:
	adds r3, r4, #0
	mov r1, r9
	ands r3, r1
	lsls r1, r3, #5
	ldrb r0, [r7]
	subs r0, r5, r0
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r0, _08091FF0  @ gBG0TilemapBuffer
	adds r1, r1, r0
	lsls r0, r3, #6
	adds r0, r2, r0
	ldr r3, _08091FF4  @ gUnknown_0200D7E0
	adds r0, r0, r3
	ldrh r0, [r0]
	strh r0, [r1]
	adds r4, #1
	mov r1, r8
	ldrh r0, [r1, #0x3e]
	lsrs r0, r0, #3
	adds r0, #0xc
	cmp r4, r0
	blt _08091F88
_08091FB6:
	ldr r3, _08091FF8  @ gBG2TilemapBuffer
	mov r9, r3
	adds r5, r6, #0
	mov r1, ip
	lsls r0, r1, #1
	ldr r3, _08091FFC  @ gUnknown_0200DFE0
	adds r2, r0, r3
	movs r3, #0xa0
	movs r4, #1
_08091FC8:
	ldrb r0, [r7]
	subs r0, r5, r0
	adds r0, r3, r0
	lsls r0, r0, #1
	add r0, r9
	ldrh r1, [r2]
	strh r1, [r0]
	adds r2, #0x40
	adds r3, #0x20
	subs r4, #1
	cmp r4, #0
	bge _08091FC8
	mov r5, sl
	ldrb r0, [r7]
	cmp r5, r0
	blt _08091F64
	b _0809208E
	.align 2, 0
_08091FEC: .4byte gUnknown_08A17B36
_08091FF0: .4byte gBG0TilemapBuffer
_08091FF4: .4byte gUnknown_0200D7E0
_08091FF8: .4byte gBG2TilemapBuffer
_08091FFC: .4byte gUnknown_0200DFE0
_08092000:
	movs r5, #0
	str r2, [sp]
	ldrb r1, [r2]
	cmp r5, r1
	bge _0809208E
	adds r7, r2, #0
_0809200C:
	mov r3, r8
	ldrh r0, [r3, #0x3e]
	lsrs r4, r0, #3
	adds r0, r4, #0
	adds r0, #0xc
	adds r6, r5, #0
	adds r6, #0x1c
	adds r1, r5, #1
	mov sl, r1
	cmp r4, r0
	bge _0809205C
	mov ip, r6
	movs r3, #0x1f
	mov r9, r3
_08092028:
	adds r3, r4, #0
	mov r0, r9
	ands r3, r0
	lsls r2, r3, #5
	adds r2, #8
	adds r2, r2, r5
	lsls r2, r2, #1
	ldr r1, _080920B4  @ gBG0TilemapBuffer
	adds r2, r2, r1
	ldrb r0, [r7]
	mov r1, ip
	subs r0, r1, r0
	lsls r0, r0, #1
	lsls r1, r3, #6
	adds r0, r0, r1
	ldr r3, _080920B8  @ gUnknown_0200D7E0
	adds r0, r0, r3
	ldrh r0, [r0]
	strh r0, [r2]
	adds r4, #1
	mov r1, r8
	ldrh r0, [r1, #0x3e]
	lsrs r0, r0, #3
	adds r0, #0xc
	cmp r4, r0
	blt _08092028
_0809205C:
	movs r4, #0
	ldr r3, _080920BC  @ gUnknown_0200DFE0
	mov ip, r3
	adds r3, r6, #0
	adds r0, r5, #0
	adds r0, #0xa8
	lsls r0, r0, #1
	ldr r1, _080920C0  @ gBG2TilemapBuffer
	adds r2, r0, r1
_0809206E:
	ldrb r0, [r7]
	subs r0, r3, r0
	lsls r0, r0, #1
	lsls r1, r4, #6
	adds r0, r0, r1
	add r0, ip
	ldrh r0, [r0]
	strh r0, [r2]
	adds r2, #0x40
	adds r4, #1
	cmp r4, #1
	ble _0809206E
	mov r5, sl
	ldrb r3, [r7]
	cmp r5, r3
	blt _0809200C
_0809208E:
	movs r0, #5
	bl BG_EnableSyncByMask
	ldr r1, [sp]
	ldrb r0, [r1]
	cmp r0, #0x13
	bls _080920A2
	mov r0, r8
	bl Proc_ClearNativeCallback
_080920A2:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080920B4: .4byte gBG0TilemapBuffer
_080920B8: .4byte gUnknown_0200D7E0
_080920BC: .4byte gUnknown_0200DFE0
_080920C0: .4byte gBG2TilemapBuffer

	THUMB_FUNC_START sub_80920C4
sub_80920C4: @ 0x080920C4
	push {lr}
	ldr r0, _080920D8  @ gUnknown_08A177A0
	movs r1, #3
	bl Proc_Create
	adds r0, #0x39
	movs r1, #0
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080920D8: .4byte gUnknown_08A177A0

	THUMB_FUNC_START sub_80920DC
sub_80920DC: @ 0x080920DC
	push {r4, lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _080920F4
	ldr r0, _080920F0  @ gUnknown_08A178C0
	movs r1, #3
	bl Proc_Create
	b _080920FA
	.align 2, 0
_080920F0: .4byte gUnknown_08A178C0
_080920F4:
	ldr r0, _08092118  @ gUnknown_08A178C0
	bl Proc_CreateBlockingChild
_080920FA:
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x39
	movs r0, #1
	strb r0, [r1]
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0809211C
	adds r1, r4, #0
	adds r1, #0x3a
	movs r0, #5
	b _08092124
	.align 2, 0
_08092118: .4byte gUnknown_08A178C0
_0809211C:
	bl GetChapterAllyUnitCount
	adds r1, r4, #0
	adds r1, #0x3a
_08092124:
	strb r0, [r1]
	adds r1, r4, #0
	adds r1, #0x3b
	movs r0, #0
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8092134
sub_8092134: @ 0x08092134
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _0809214C
	ldr r0, _08092148  @ gUnknown_08A17990
	movs r1, #3
	bl Proc_Create
	b _08092152
	.align 2, 0
_08092148: .4byte gUnknown_08A17990
_0809214C:
	ldr r0, _08092160  @ gUnknown_08A17990
	bl Proc_CreateBlockingChild
_08092152:
	adds r1, r0, #0
	adds r1, #0x39
	movs r0, #3
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08092160: .4byte gUnknown_08A17990

	THUMB_FUNC_START sub_8092164
sub_8092164: @ 0x08092164
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _0809217C
	ldr r0, _08092178  @ gUnknown_08A178C0
	movs r1, #3
	bl Proc_Create
	b _08092182
	.align 2, 0
_08092178: .4byte gUnknown_08A178C0
_0809217C:
	ldr r0, _08092190  @ gUnknown_08A178C0
	bl Proc_CreateBlockingChild
_08092182:
	adds r1, r0, #0
	adds r1, #0x39
	movs r0, #4
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08092190: .4byte gUnknown_08A178C0

	THUMB_FUNC_START sub_8092194
sub_8092194: @ 0x08092194
	push {r4, lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _080921AC
	ldr r0, _080921A8  @ gUnknown_08A17A30
	movs r1, #3
	bl Proc_Create
	b _080921B2
	.align 2, 0
_080921A8: .4byte gUnknown_08A17A30
_080921AC:
	ldr r0, _080921C8  @ gUnknown_08A17A30
	bl Proc_CreateBlockingChild
_080921B2:
	adds r4, r0, #0
	bl SMS_ClearUsageTable
	adds r1, r4, #0
	adds r1, #0x39
	movs r0, #5
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080921C8: .4byte gUnknown_08A17A30

	THUMB_FUNC_START sub_80921CC
sub_80921CC: @ 0x080921CC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	adds r6, r7, #0
	adds r6, #0x12
	adds r0, r6, #0
	movs r1, #0x13
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _08092214  @ gUnknown_0200E148
	mov r8, r0
	bl Text_Clear
	cmp r4, #5
	bne _08092218
	movs r5, #0
	adds r4, r6, #0
_080921FA:
	adds r1, r5, #0
	adds r1, #0x70
	adds r0, r4, #0
	movs r2, #0xa0
	lsls r2, r2, #7
	bl DrawIcon
	adds r4, #4
	adds r5, #1
	cmp r5, #7
	ble _080921FA
	b _0809227C
	.align 2, 0
_08092214: .4byte gUnknown_0200E148
_08092218:
	movs r5, #1
	ldr r3, _08092290  @ gUnknown_08A17C48
	lsls r0, r4, #3
	adds r0, r0, r4
	lsls r1, r0, #4
	adds r2, r1, #0
	adds r2, #0x10
	adds r0, r2, r3
	ldrb r0, [r0, #8]
	adds r7, #0x10
	mov r9, r7
	cmp r0, #0
	beq _08092274
	mov r7, r8
	mov r8, r3
	adds r0, r1, r3
	adds r4, r0, #0
	adds r4, #0x10
	adds r6, r2, #0
_0809223E:
	ldrb r1, [r4, #8]
	subs r1, #0x40
	adds r0, r7, #0
	bl Text_SetXCursor
	adds r0, r7, #0
	movs r1, #0
	bl Text_SetColorId
	mov r0, r8
	adds r0, #4
	adds r0, r6, r0
	ldr r0, [r0]
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r7, #0
	bl Text_AppendString
	adds r4, #0x10
	adds r6, #0x10
	adds r5, #1
	cmp r5, #8
	bgt _08092274
	ldrb r0, [r4, #8]
	cmp r0, #0
	bne _0809223E
_08092274:
	ldr r0, _08092294  @ gUnknown_0200E148
	mov r1, r9
	bl Text_Draw
_0809227C:
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092290: .4byte gUnknown_08A17C48
_08092294: .4byte gUnknown_0200E148

	THUMB_FUNC_START sub_8092298
sub_8092298: @ 0x08092298
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r3, r1, #0x18
	adds r7, r3, #0
	lsls r2, r2, #0x18
	lsrs r5, r2, #0x18
	cmp r3, #0
	beq _080922CE
	ldr r4, _080922E8  @ gUnknown_02023D9C
	adds r0, r4, #0
	movs r1, #2
	adds r2, r3, #0
	bl sub_8004B88
	adds r0, r4, #2
	movs r1, #0
	movs r2, #0x16
	bl sub_8004B0C
	adds r4, #4
	adds r0, r4, #0
	movs r1, #2
	adds r2, r6, #0
	bl sub_8004B88
_080922CE:
	cmp r5, #0
	beq _080922DA
	ldr r0, _080922EC  @ gUnknown_02023DE8
	adds r1, r7, #0
	bl sub_80921CC
_080922DA:
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080922E8: .4byte gUnknown_02023D9C
_080922EC: .4byte gUnknown_02023DE8

	THUMB_FUNC_START sub_80922F0
sub_80922F0: @ 0x080922F0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x58
	str r0, [sp, #0x24]
	mov sl, r2
	ldr r4, [sp, #0x78]
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	str r3, [sp, #0x28]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	adds r0, r7, #0
	movs r1, #7
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x2c]
	lsls r0, r7, #1
	str r0, [sp, #0x30]
	movs r0, #0x1f
	ldr r1, [sp, #0x30]
	ands r1, r0
	str r1, [sp, #0x30]
	ldr r1, _0809238C  @ gUnknown_0200D6E0
	lsls r0, r7, #2
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	ldr r0, [r0, #0xc]
	movs r1, #8
	ands r0, r1
	negs r0, r0
	lsrs r0, r0, #0x1f
	mov r9, r0
	cmp r4, #0
	beq _080923CA
	ldr r2, [sp, #0x2c]
	lsls r4, r2, #3
	ldr r0, _08092390  @ gUnknown_0200E060
	adds r5, r4, r0
	adds r0, r5, #0
	bl Text_Clear
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetXCursor
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	mov r8, r4
	cmp r0, #0
	bne _08092394
	ldr r0, [sp, #0x24]
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _08092394
	ldr r0, [r6]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08092394
	adds r0, r5, #0
	movs r1, #4
	bl Text_SetColorId
	b _0809239E
	.align 2, 0
_0809238C: .4byte gUnknown_0200D6E0
_08092390: .4byte gUnknown_0200E060
_08092394:
	ldr r0, _08092414  @ gUnknown_0200E060
	add r0, r8
	mov r1, r9
	bl Text_SetColorId
_0809239E:
	ldr r4, _08092414  @ gUnknown_0200E060
	add r4, r8
	ldr r1, _08092418  @ gUnknown_0200D6E0
	lsls r0, r7, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_AppendString
	ldr r3, [sp, #0x30]
	lsls r1, r3, #6
	add r1, sl
	adds r1, #6
	adds r0, r4, #0
	bl Text_Draw
_080923CA:
	ldr r4, [sp, #0x2c]
	lsls r5, r4, #1
	adds r0, r5, r4
	lsls r0, r0, #3
	mov r8, r0
	ldr r6, _0809241C  @ gUnknown_0200E098
	adds r0, r0, r6
	bl Text_Clear
	adds r0, r6, #0
	adds r0, #8
	add r0, r8
	bl Text_Clear
	ldr r0, [sp, #0x30]
	lsls r4, r0, #6
	mov r1, sl
	adds r1, r1, r4
	str r1, [sp, #0x34]
	adds r0, r1, #0
	adds r0, #0x10
	movs r1, #0x18
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	str r4, [sp, #0x54]
	str r5, [sp, #0x50]
	ldr r2, [sp, #0x28]
	cmp r2, #5
	bls _0809240A
	b _08092A48
_0809240A:
	lsls r0, r2, #2
	ldr r1, _08092420  @ _08092424
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08092414: .4byte gUnknown_0200E060
_08092418: .4byte gUnknown_0200D6E0
_0809241C: .4byte gUnknown_0200E098
_08092420: .4byte _08092424
_08092424: @ jump table
	.4byte _0809243C @ case 0
	.4byte _080925A0 @ case 1
	.4byte _08092664 @ case 2
	.4byte _0809279A @ case 3
	.4byte _080928B0 @ case 4
	.4byte _080929E8 @ case 5
_0809243C:
	ldr r0, _080924B0  @ gUnknown_0200D6E0
	lsls r6, r7, #2
	adds r0, r0, r6
	mov r8, r0
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r2, r0, #0
	ldr r3, [sp, #0x50]
	ldr r4, [sp, #0x2c]
	adds r5, r3, r4
	lsls r5, r5, #3
	ldr r4, _080924B4  @ gUnknown_0200E098
	adds r0, r5, r4
	ldr r7, [sp, #0x54]
	add r7, sl
	adds r1, r7, #0
	adds r1, #0x10
	movs r3, #0
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #0
	bl DrawTextInline
	adds r4, #8
	adds r5, r5, r4
	mov r4, r9
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_SetColorId
	mov r1, r8
	ldr r0, [r1]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	str r6, [sp, #0x4c]
	cmp r0, #0
	bne _080924BC
	ldr r0, _080924B8  @ 0x00000537
	bl GetStringFromIndex
	adds r1, r7, #0
	adds r1, #0x22
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r4, #0
	movs r3, #0
	bl DrawTextInline
	b _0809251A
	.align 2, 0
_080924B0: .4byte gUnknown_0200D6E0
_080924B4: .4byte gUnknown_0200E098
_080924B8: .4byte 0x00000537
_080924BC:
	mov r3, r8
	ldr r0, [r3]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemName
	adds r1, r7, #0
	adds r1, #0x22
	movs r6, #0
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r4, #0
	movs r3, #0
	bl DrawTextInline
	adds r4, r7, #0
	adds r4, #0x1e
	mov r1, r8
	ldr r0, [r1]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIconId
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl DrawIcon
	mov r2, r8
	ldr r0, [r2]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIconId
	bl sub_8090324
_0809251A:
	ldr r3, [sp, #0x50]
	ldr r4, [sp, #0x2c]
	adds r0, r3, r4
	lsls r0, r0, #3
	ldr r1, _08092550  @ gUnknown_0200E0A8
	adds r5, r0, r1
	adds r0, r5, #0
	bl Text_Clear
	ldr r0, _08092554  @ gUnknown_0200D6E0
	ldr r6, [sp, #0x4c]
	adds r0, r6, r0
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r4, [r0, #0xc]
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r4, r0
	movs r0, #0x80
	lsls r0, r0, #7
	cmp r4, r0
	beq _08092562
	cmp r4, r0
	bhi _08092558
	cmp r4, #0
	beq _08092584
	b _08092BC6
	.align 2, 0
_08092550: .4byte gUnknown_0200E0A8
_08092554: .4byte gUnknown_0200D6E0
_08092558:
	movs r0, #0x80
	lsls r0, r0, #8
	cmp r4, r0
	beq _08092566
	b _08092BC6
_08092562:
	movs r0, #0xbf
	b _08092568
_08092566:
	movs r0, #0xc0
_08092568:
	bl GetStringFromIndex
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x30
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r2, #4
	movs r3, #8
	bl DrawTextInline
	b _08092BC6
_08092584:
	movs r0, #0xbe
	bl GetStringFromIndex
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x30
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r2, #1
	movs r3, #4
	bl DrawTextInline
	b _08092BC6
_080925A0:
	ldr r1, _0809265C  @ gUnknown_0200D6E0
	lsls r0, r7, #2
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r3, r0, #0
	ldr r1, [sp, #0x50]
	ldr r2, [sp, #0x2c]
	adds r0, r1, r2
	lsls r0, r0, #3
	ldr r1, _08092660  @ gUnknown_0200E098
	adds r0, r0, r1
	ldr r7, [sp, #0x54]
	add r7, sl
	adds r1, r7, #0
	adds r1, #0x10
	mov r8, r9
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	mov r2, r8
	movs r3, #4
	bl DrawTextInline
	adds r3, r7, #0
	adds r3, #0x22
	movs r1, #2
	mov r4, r9
	cmp r4, #0
	beq _080925E6
	movs r1, #1
_080925E6:
	ldr r0, [r6]
	ldr r0, [r0]
	movs r2, #8
	ldrsb r2, [r0, r2]
	adds r0, r3, #0
	bl DrawDecNumber
	adds r3, r7, #0
	adds r3, #0x28
	movs r1, #2
	mov r0, r9
	cmp r0, #0
	beq _08092602
	movs r1, #1
_08092602:
	ldr r0, [r6]
	ldr r0, [r0]
	ldrb r2, [r0, #9]
	adds r0, r3, #0
	bl DrawDecNumber
	adds r5, r7, #0
	adds r5, #0x2e
	movs r4, #2
	mov r1, r9
	cmp r1, #0
	beq _0809261C
	movs r4, #1
_0809261C:
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl DrawDecNumber
	adds r0, r7, #0
	adds r0, #0x30
	mov r1, r8
	movs r2, #0x16
	bl sub_8004B0C
	adds r4, r7, #0
	adds r4, #0x34
	movs r5, #2
	mov r2, r9
	cmp r2, #0
	beq _08092648
	movs r5, #1
_08092648:
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitMaxHp
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl DrawDecNumber
	b _08092BC6
	.align 2, 0
_0809265C: .4byte gUnknown_0200D6E0
_08092660: .4byte gUnknown_0200E098
_08092664:
	ldr r5, [sp, #0x54]
	add r5, sl
	movs r3, #0x12
	adds r3, r3, r5
	mov r8, r3
	ldr r1, _08092788  @ gUnknown_0200D6E0
	lsls r0, r7, #2
	adds r4, r0, r1
	ldr r0, [r4]
	ldr r2, [r0]
	ldr r0, [r2, #4]
	movs r1, #0x14
	ldrsb r1, [r0, r1]
	movs r0, #0x14
	ldrsb r0, [r2, r0]
	movs r6, #2
	cmp r1, r0
	bne _0809268A
	movs r6, #4
_0809268A:
	adds r0, r2, #0
	bl GetUnitPower
	adds r2, r0, #0
	mov r0, r8
	adds r1, r6, #0
	bl DrawDecNumber
	adds r7, r5, #0
	adds r7, #0x18
	ldr r0, [r4]
	ldr r2, [r0]
	ldr r0, [r2, #4]
	movs r1, #0x15
	ldrsb r1, [r0, r1]
	movs r0, #0x15
	ldrsb r0, [r2, r0]
	movs r6, #2
	cmp r1, r0
	bne _080926B4
	movs r6, #4
_080926B4:
	adds r0, r2, #0
	bl GetUnitSkill
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl DrawDecNumber
	adds r7, r5, #0
	adds r7, #0x1e
	ldr r0, [r4]
	ldr r2, [r0]
	ldr r0, [r2, #4]
	movs r1, #0x16
	ldrsb r1, [r0, r1]
	movs r0, #0x16
	ldrsb r0, [r2, r0]
	movs r6, #2
	cmp r1, r0
	bne _080926DE
	movs r6, #4
_080926DE:
	adds r0, r2, #0
	bl GetUnitSpeed
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl DrawDecNumber
	adds r7, r5, #0
	adds r7, #0x24
	ldr r0, [r4]
	ldr r1, [r0]
	movs r0, #0x19
	ldrsb r0, [r1, r0]
	movs r6, #2
	cmp r0, #0x1e
	bne _08092702
	movs r6, #4
_08092702:
	adds r0, r1, #0
	bl GetUnitLuck
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl DrawDecNumber
	adds r7, r5, #0
	adds r7, #0x2a
	ldr r0, [r4]
	ldr r2, [r0]
	ldr r0, [r2, #4]
	movs r1, #0x17
	ldrsb r1, [r0, r1]
	movs r0, #0x17
	ldrsb r0, [r2, r0]
	movs r6, #2
	cmp r1, r0
	bne _0809272C
	movs r6, #4
_0809272C:
	adds r0, r2, #0
	bl GetUnitDefense
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl DrawDecNumber
	adds r7, r5, #0
	adds r7, #0x30
	ldr r0, [r4]
	ldr r2, [r0]
	ldr r0, [r2, #4]
	movs r1, #0x18
	ldrsb r1, [r0, r1]
	movs r0, #0x18
	ldrsb r0, [r2, r0]
	movs r6, #2
	cmp r1, r0
	bne _08092756
	movs r6, #4
_08092756:
	adds r0, r2, #0
	bl GetUnitResistance
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl DrawDecNumber
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	adds r1, r0, #0
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	bne _0809278C
	adds r0, r5, #0
	adds r0, #0x34
	movs r1, #2
	movs r2, #0x14
	bl sub_8004B0C
	b _08092BC6
	.align 2, 0
_08092788: .4byte gUnknown_0200D6E0
_0809278C:
	adds r0, r5, #0
	adds r0, #0x34
	movs r2, #0xa0
	lsls r2, r2, #7
	bl DrawIcon
	b _08092BC6
_0809279A:
	ldr r0, _080927DC  @ gUnknown_0200D6E0
	lsls r4, r7, #2
	adds r7, r4, r0
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	str r4, [sp, #0x4c]
	cmp r5, #0
	bne _080927E8
	ldr r0, _080927E0  @ 0x00000537
	bl GetStringFromIndex
	adds r3, r0, #0
	ldr r4, [sp, #0x50]
	ldr r6, [sp, #0x2c]
	adds r0, r4, r6
	lsls r0, r0, #3
	ldr r1, _080927E4  @ gUnknown_0200E098
	adds r0, r0, r1
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x14
	mov r2, r9
	str r5, [sp]
	str r3, [sp, #4]
	movs r3, #0
	bl DrawTextInline
	b _0809284C
	.align 2, 0
_080927DC: .4byte gUnknown_0200D6E0
_080927E0: .4byte 0x00000537
_080927E4: .4byte gUnknown_0200E098
_080927E8:
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemName
	adds r5, r0, #0
	ldr r1, [sp, #0x50]
	ldr r2, [sp, #0x2c]
	adds r0, r1, r2
	lsls r0, r0, #3
	ldr r1, _080928A8  @ gUnknown_0200E098
	adds r0, r0, r1
	ldr r4, [sp, #0x54]
	add r4, sl
	adds r1, r4, #0
	adds r1, #0x14
	mov r2, r9
	movs r3, #0
	str r3, [sp]
	str r5, [sp, #4]
	bl DrawTextInline
	adds r4, #0x10
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIconId
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl DrawIcon
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIconId
	bl sub_8090324
_0809284C:
	ldr r5, [sp, #0x54]
	add r5, sl
	adds r3, r5, #0
	adds r3, #0x24
	movs r1, #2
	mov r4, r9
	cmp r4, #0
	beq _0809285E
	movs r1, #1
_0809285E:
	ldr r0, _080928AC  @ gUnknown_0200D6E0
	ldr r6, [sp, #0x4c]
	adds r4, r6, r0
	ldr r0, [r4]
	movs r6, #4
	ldrsh r2, [r0, r6]
	adds r0, r3, #0
	bl DrawDecNumber
	adds r3, r5, #0
	adds r3, #0x2c
	movs r1, #2
	mov r0, r9
	cmp r0, #0
	beq _0809287E
	movs r1, #1
_0809287E:
	ldr r0, [r4]
	movs r6, #6
	ldrsh r2, [r0, r6]
	adds r0, r3, #0
	bl DrawDecNumber
	adds r1, r5, #0
	adds r1, #0x34
	movs r3, #2
	mov r0, r9
	cmp r0, #0
	beq _08092898
	movs r3, #1
_08092898:
	ldr r0, [r4]
	movs r4, #8
	ldrsh r2, [r0, r4]
	adds r0, r1, #0
	adds r1, r3, #0
	bl DrawDecNumber
	b _08092BC6
	.align 2, 0
_080928A8: .4byte gUnknown_0200E098
_080928AC: .4byte gUnknown_0200D6E0
_080928B0:
	ldr r0, _080928F4  @ gUnknown_0200D6E0
	lsls r1, r7, #2
	adds r0, r1, r0
	ldr r0, [r0]
	ldr r2, [r0]
	ldr r5, [r2, #0xc]
	movs r0, #0x10
	ands r5, r0
	str r1, [sp, #0x4c]
	cmp r5, #0
	beq _080928FC
	adds r0, r2, #0
	bl GetUnitRescueName
	adds r5, r0, #0
	ldr r6, [sp, #0x50]
	ldr r1, [sp, #0x2c]
	adds r0, r6, r1
	lsls r0, r0, #3
	ldr r1, _080928F8  @ gUnknown_0200E0A0
	adds r0, r0, r1
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x22
	mov r2, r9
	negs r4, r2
	movs r3, #0
	str r3, [sp]
	str r5, [sp, #4]
	movs r3, #2
	bl DrawTextInline
	b _08092924
	.align 2, 0
_080928F4: .4byte gUnknown_0200D6E0
_080928F8: .4byte gUnknown_0200E0A0
_080928FC:
	ldr r0, _080929D8  @ 0x00000536
	bl GetStringFromIndex
	adds r3, r0, #0
	ldr r4, [sp, #0x50]
	ldr r6, [sp, #0x2c]
	adds r0, r4, r6
	lsls r0, r0, #3
	ldr r1, _080929DC  @ gUnknown_0200E0A0
	adds r0, r0, r1
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x22
	mov r2, r9
	negs r4, r2
	str r5, [sp]
	str r3, [sp, #4]
	movs r3, #2
	bl DrawTextInline
_08092924:
	mov r8, r4
	ldr r7, [sp, #0x54]
	add r7, sl
	adds r3, r7, #0
	adds r3, #0x14
	movs r1, #2
	mov r4, r9
	cmp r4, #0
	beq _08092938
	movs r1, #1
_08092938:
	ldr r0, _080929E0  @ gUnknown_0200D6E0
	ldr r6, [sp, #0x4c]
	adds r4, r6, r0
	ldr r0, [r4]
	ldr r0, [r0]
	movs r2, #0x1d
	ldrsb r2, [r0, r2]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	adds r0, r3, #0
	bl DrawDecNumber
	adds r3, r7, #0
	adds r3, #0x1a
	movs r5, #2
	mov r0, r9
	cmp r0, #0
	beq _08092964
	movs r5, #1
_08092964:
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r2, #0x11
	ldrsb r2, [r0, r2]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	movs r0, #0x1a
	ldrsb r0, [r1, r0]
	adds r2, r2, r0
	adds r0, r3, #0
	adds r1, r5, #0
	bl DrawDecNumber
	adds r5, r7, #0
	adds r5, #0x20
	movs r6, #2
	mov r1, r9
	cmp r1, #0
	beq _08092994
	movs r6, #1
_08092994:
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitAid
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r6, #0
	bl DrawDecNumber
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitStatusName
	adds r4, r0, #0
	ldr r2, [sp, #0x50]
	ldr r3, [sp, #0x2c]
	adds r0, r2, r3
	lsls r0, r0, #3
	ldr r1, _080929E4  @ gUnknown_0200E098
	adds r0, r0, r1
	adds r1, r7, #0
	adds r1, #0x2e
	mov r6, r8
	mov r2, r9
	orrs r6, r2
	lsrs r2, r6, #0x1f
	movs r3, #0
	str r3, [sp]
	str r4, [sp, #4]
	movs r3, #2
	bl DrawTextInline
	b _08092BC6
	.align 2, 0
_080929D8: .4byte 0x00000536
_080929DC: .4byte gUnknown_0200E0A0
_080929E0: .4byte gUnknown_0200D6E0
_080929E4: .4byte gUnknown_0200E098
_080929E8:
	movs r6, #0
	lsls r3, r7, #2
	ldr r0, _08092A40  @ gUnknown_0200D6E0
	adds r7, r3, r0
	ldr r5, [sp, #0x54]
	add r5, sl
_080929F4:
	add r1, sp, #8
	ldr r0, _08092A44  @ gUnknown_08205B94
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, [r7]
	ldr r0, [r0]
	adds r0, #0x28
	adds r0, r0, r6
	ldrb r0, [r0]
	bl GetWeaponLevelFromExp
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	lsls r0, r6, #2
	adds r0, #0x14
	adds r3, r5, r0
	movs r1, #2
	cmp r4, #6
	bne _08092A24
	movs r1, #4
_08092A24:
	lsls r0, r4, #2
	add r0, sp
	adds r0, #8
	ldr r2, [r0]
	adds r0, r3, #0
	bl sub_8004B0C
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #7
	bls _080929F4
	b _08092BC6
	.align 2, 0
_08092A40: .4byte gUnknown_0200D6E0
_08092A44: .4byte gUnknown_08205B94
_08092A48:
	ldr r1, [sp, #0x28]
	subs r1, #6
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x38]
	movs r4, #0
	str r4, [sp, #0x3c]
	ldr r1, _08092B10  @ gUnknown_0200D6E0
	lsls r0, r7, #2
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSupporterCount
	str r0, [sp, #0x40]
	adds r0, r6, #0
	adds r0, #0x10
	add r0, r8
	bl Text_Clear
	movs r6, #0
	ldr r0, [sp, #0x40]
	cmp r4, r0
	blt _08092A7E
	b _08092B7E
_08092A7E:
	adds r7, r5, #0
	mov r1, r8
	str r1, [sp, #0x44]
	ldr r2, [sp, #0x34]
	str r2, [sp, #0x48]
	mov r3, r9
	negs r3, r3
	mov r0, r9
	orrs r3, r0
	mov r8, r3
_08092A92:
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl CanUnitSupportNow
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08092B72
	ldr r1, [sp, #0x3c]
	ldr r2, [sp, #0x38]
	cmp r1, r2
	bcc _08092B68
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl GetUnitSupporterUnit
	cmp r0, #0
	beq _08092B72
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl GetUnitSupporterUnit
	ldr r0, [r0, #0xc]
	movs r1, #8
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	bne _08092B18
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl GetUnitSupporterCharacter
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl GetCharacterData
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r2, r0, #0
	lsls r0, r4, #3
	ldr r1, _08092B14  @ gUnknown_0200E098
	adds r0, r0, r1
	ldr r3, [sp, #0x44]
	adds r0, r3, r0
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, #0x12
	ldr r3, [sp, #0x48]
	adds r1, r3, r1
	str r5, [sp]
	str r2, [sp, #4]
	mov r3, r8
	lsrs r2, r3, #0x1f
	movs r3, #0
	bl DrawTextInline
	b _08092B56
	.align 2, 0
_08092B10: .4byte gUnknown_0200D6E0
_08092B14: .4byte gUnknown_0200E098
_08092B18:
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl GetUnitSupporterCharacter
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl GetCharacterData
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r3, r0, #0
	lsls r0, r4, #3
	ldr r1, _08092B64  @ gUnknown_0200E098
	adds r0, r0, r1
	ldr r1, [sp, #0x44]
	adds r0, r1, r0
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, #0x12
	ldr r2, [sp, #0x48]
	adds r1, r2, r1
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #1
	movs r3, #0
	bl DrawTextInline
_08092B56:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	beq _08092B7E
	b _08092B72
	.align 2, 0
_08092B64: .4byte gUnknown_0200E098
_08092B68:
	ldr r0, [sp, #0x3c]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x3c]
_08092B72:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r3, [sp, #0x40]
	cmp r6, r3
	blt _08092A92
_08092B7E:
	cmp r4, #2
	bhi _08092BC6
	ldr r6, [sp, #0x50]
	ldr r1, [sp, #0x2c]
	adds r0, r6, r1
	lsls r5, r0, #3
	ldr r7, [sp, #0x54]
	add r7, sl
	mov r2, r9
	negs r6, r2
	orrs r6, r2
_08092B94:
	ldr r0, _08092BDC  @ 0x00000536
	bl GetStringFromIndex
	adds r3, r0, #0
	lsls r0, r4, #3
	ldr r1, _08092BE0  @ gUnknown_0200E098
	adds r0, r0, r1
	adds r0, r5, r0
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, #0x12
	adds r1, r7, r1
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	lsrs r2, r6, #0x1f
	movs r3, #0
	bl DrawTextInline
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _08092B94
_08092BC6:
	movs r0, #1
	bl BG_EnableSyncByMask
	add sp, #0x58
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092BDC: .4byte 0x00000536
_08092BE0: .4byte gUnknown_0200E098

	THUMB_FUNC_START sub_8092BE4
sub_8092BE4: @ 0x08092BE4
	ldr r0, [r0, #0xc]
	movs r1, #0xc0
	lsls r1, r1, #8
	ands r0, r1
	bx lr

	THUMB_FUNC_START sub_8092BF0
sub_8092BF0: @ 0x08092BF0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x60
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r2, r1, #0x18
	movs r1, #1
	ands r2, r1
	subs r0, #1
	cmp r0, #0x1f
	bls _08092C12
	bl _08094FE0
_08092C12:
	lsls r0, r0, #2
	ldr r1, _08092C1C  @ _08092C20
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08092C1C: .4byte _08092C20
_08092C20: @ jump table
	.4byte _08092CA0 @ case 0
	.4byte _08092F90 @ case 1
	.4byte _08092E84 @ case 2
	.4byte _08093094 @ case 3
	.4byte _08093190 @ case 4
	.4byte _0809329C @ case 5
	.4byte _080933A8 @ case 6
	.4byte _080934B4 @ case 7
	.4byte _080935C0 @ case 8
	.4byte _080936CC @ case 9
	.4byte _080937D8 @ case 10
	.4byte _080938E4 @ case 11
	.4byte _08093C58 @ case 12
	.4byte _08093D64 @ case 13
	.4byte _08093F68 @ case 14
	.4byte _0809405C @ case 15
	.4byte _08094150 @ case 16
	.4byte _08094244 @ case 17
	.4byte _080939F0 @ case 18
	.4byte _08093B4C @ case 19
	.4byte _08094374 @ case 20
	.4byte _08094480 @ case 21
	.4byte _08094608 @ case 22
	.4byte _0809470C @ case 23
	.4byte _08094808 @ case 24
	.4byte _08094904 @ case 25
	.4byte _08094A00 @ case 26
	.4byte _08094AFC @ case 27
	.4byte _08094BF8 @ case 28
	.4byte _08094CF4 @ case 29
	.4byte _08094DF0 @ case 30
	.4byte _08094EDC @ case 31
_08092CA0:
	cmp r2, #0
	bne _08092D94
	movs r0, #0
	str r0, [sp, #0x40]
	movs r1, #0
	ldr r3, _08092D8C  @ gUnknown_0200F158
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _08092D16
	adds r7, r3, #0
	mov sl, r7
_08092CBA:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge _08092D06
	ldr r7, _08092D90  @ gUnknown_0200D6E0
	mov r9, r7
_08092CCE:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	ldr r2, [r0]
	lsls r0, r3, #2
	adds r4, r0, r1
	ldr r3, [r4]
	ldr r0, [r3]
	ldr r1, [r0]
	ldrb r0, [r2, #0xa]
	ldrb r1, [r1, #0xa]
	cmp r0, r1
	bcs _08092CF6
	str r5, [r4]
	str r3, [r6]
	movs r2, #1
	str r2, [sp, #0x40]
_08092CF6:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt _08092CCE
_08092D06:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08092CBA
_08092D16:
	movs r1, #0
	ldr r7, _08092D8C  @ gUnknown_0200F158
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	bge _08092D86
	mov sl, r7
_08092D24:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge _08092D76
	ldr r7, _08092D90  @ gUnknown_0200D6E0
	mov r9, r7
	movs r7, #2
	mov ip, r8
_08092D3C:
	adds r6, r3, #1
	lsls r0, r6, #2
	mov r1, r9
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0, #0xc]
	ands r1, r7
	lsls r0, r3, #2
	mov r2, r9
	adds r3, r0, r2
	ldr r2, [r3]
	ldr r0, [r2]
	ldr r0, [r0, #0xc]
	ands r0, r7
	cmp r1, r0
	bcs _08092D66
	str r4, [r3]
	str r2, [r5]
	movs r3, #1
	str r3, [sp, #0x40]
_08092D66:
	lsls r0, r6, #0x18
	lsrs r3, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r2, ip
	subs r0, r0, r2
	cmp r3, r0
	blt _08092D3C
_08092D76:
	mov r3, r8
	lsls r0, r3, #0x18
	lsrs r1, r0, #0x18
	ldr r7, _08092D8C  @ gUnknown_0200F158
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _08092D24
_08092D86:
	ldr r0, [sp, #0x40]
	bl _080945F2
	.align 2, 0
_08092D8C: .4byte gUnknown_0200F158
_08092D90: .4byte gUnknown_0200D6E0
_08092D94:
	movs r1, #0
	str r1, [sp, #0x44]
	ldr r2, _08092E7C  @ gUnknown_0200F158
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	adds r3, r1, #0
	cmp r3, r0
	bge _08092E06
	adds r7, r2, #0
	mov sl, r7
_08092DAA:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge _08092DF6
	ldr r7, _08092E80  @ gUnknown_0200D6E0
	mov r9, r7
_08092DBE:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	ldr r2, [r0]
	lsls r0, r3, #2
	adds r4, r0, r1
	ldr r3, [r4]
	ldr r0, [r3]
	ldr r1, [r0]
	ldrb r0, [r2, #0xa]
	ldrb r1, [r1, #0xa]
	cmp r0, r1
	bls _08092DE6
	str r5, [r4]
	str r3, [r6]
	movs r2, #1
	str r2, [sp, #0x44]
_08092DE6:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt _08092DBE
_08092DF6:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08092DAA
_08092E06:
	movs r1, #0
	ldr r7, _08092E7C  @ gUnknown_0200F158
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	bge _08092E76
	mov sl, r7
_08092E14:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge _08092E66
	ldr r7, _08092E80  @ gUnknown_0200D6E0
	mov r9, r7
	movs r7, #2
	mov ip, r8
_08092E2C:
	adds r6, r3, #1
	lsls r0, r6, #2
	mov r1, r9
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0, #0xc]
	ands r1, r7
	lsls r0, r3, #2
	mov r2, r9
	adds r3, r0, r2
	ldr r2, [r3]
	ldr r0, [r2]
	ldr r0, [r0, #0xc]
	ands r0, r7
	cmp r1, r0
	bls _08092E56
	str r4, [r3]
	str r2, [r5]
	movs r3, #1
	str r3, [sp, #0x44]
_08092E56:
	lsls r0, r6, #0x18
	lsrs r3, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r2, ip
	subs r0, r0, r2
	cmp r3, r0
	blt _08092E2C
_08092E66:
	mov r3, r8
	lsls r0, r3, #0x18
	lsrs r1, r0, #0x18
	ldr r7, _08092E7C  @ gUnknown_0200F158
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _08092E14
_08092E76:
	ldr r0, [sp, #0x44]
	bl _080945F2
	.align 2, 0
_08092E7C: .4byte gUnknown_0200F158
_08092E80: .4byte gUnknown_0200D6E0
_08092E84:
	cmp r2, #0
	bne _08092F0C
	movs r1, #0
	mov sl, r1
	ldr r3, _08092F04  @ gUnknown_0200F158
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08092E9C
	bl _08094EC8
_08092E9C:
	adds r7, r3, #0
	mov r9, r7
_08092EA0:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08092EF0
	ldr r0, _08092F08  @ gUnknown_0200D6E0
	mov r8, r0
_08092EB4:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldrb r1, [r1, #8]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldrb r0, [r0, #8]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	ble _08092EE2
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08092EE2:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _08092EB4
_08092EF0:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08092EA0
	bl _08094EC8
	.align 2, 0
_08092F04: .4byte gUnknown_0200F158
_08092F08: .4byte gUnknown_0200D6E0
_08092F0C:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08092F88  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt _08092F22
	bl _08094EC8
_08092F22:
	ldr r2, _08092F88  @ gUnknown_0200F158
	mov r9, r2
_08092F26:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08092F76
	ldr r0, _08092F8C  @ gUnknown_0200D6E0
	mov r8, r0
_08092F3A:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldrb r1, [r1, #8]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldrb r0, [r0, #8]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	bge _08092F68
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08092F68:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _08092F3A
_08092F76:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08092F26
	bl _08094EC8
	.align 2, 0
_08092F88: .4byte gUnknown_0200F158
_08092F8C: .4byte gUnknown_0200D6E0
_08092F90:
	cmp r2, #0
	bne _08093014
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r3, _0809300C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08092FA8
	bl _0809435C
_08092FA8:
	adds r7, r3, #0
	mov sl, r7
_08092FAC:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge _08092FF8
	ldr r7, _08093010  @ gUnknown_0200D6E0
	mov r9, r7
_08092FC0:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	ldr r2, [r0, #4]
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r0, [r4]
	ldr r1, [r0, #4]
	ldrb r0, [r2, #0xa]
	ldrb r1, [r1, #0xa]
	cmp r0, r1
	bcs _08092FE8
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
_08092FE8:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt _08092FC0
_08092FF8:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0809300C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08092FAC
	bl _0809435C
	.align 2, 0
_0809300C: .4byte gUnknown_0200F158
_08093010: .4byte gUnknown_0200D6E0
_08093014:
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r2, _0809308C  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	blt _08093028
	bl _0809435C
_08093028:
	adds r3, r2, #0
	mov sl, r3
_0809302C:
	movs r3, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge _08093078
	ldr r0, _08093090  @ gUnknown_0200D6E0
	mov r9, r0
_08093040:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	ldr r2, [r0, #4]
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r0, [r4]
	ldr r1, [r0, #4]
	ldrb r0, [r2, #0xa]
	ldrb r1, [r1, #0xa]
	cmp r0, r1
	bls _08093068
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
_08093068:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt _08093040
_08093078:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0809308C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0809302C
	bl _0809435C
	.align 2, 0
_0809308C: .4byte gUnknown_0200F158
_08093090: .4byte gUnknown_0200D6E0
_08093094:
	cmp r2, #0
	bne _08093114
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r3, _0809310C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _080930AC
	bl _0809435C
_080930AC:
	adds r7, r3, #0
	mov sl, r7
_080930B0:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge _080930F8
	ldr r7, _08093110  @ gUnknown_0200D6E0
	mov r9, r7
_080930C4:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r2, [r5]
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r1, [r4]
	ldrb r0, [r2, #9]
	ldrb r1, [r1, #9]
	cmp r0, r1
	bls _080930E8
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
_080930E8:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt _080930C4
_080930F8:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0809310C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _080930B0
	bl _0809435C
	.align 2, 0
_0809310C: .4byte gUnknown_0200F158
_08093110: .4byte gUnknown_0200D6E0
_08093114:
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r2, _08093188  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	blt _08093128
	bl _0809435C
_08093128:
	adds r3, r2, #0
	mov sl, r3
_0809312C:
	movs r3, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge _08093174
	ldr r0, _0809318C  @ gUnknown_0200D6E0
	mov r9, r0
_08093140:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r2, [r5]
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r1, [r4]
	ldrb r0, [r2, #9]
	ldrb r1, [r1, #9]
	cmp r0, r1
	bcs _08093164
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
_08093164:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt _08093140
_08093174:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08093188  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0809312C
	bl _0809435C
	.align 2, 0
_08093188: .4byte gUnknown_0200F158
_0809318C: .4byte gUnknown_0200D6E0
_08093190:
	cmp r2, #0
	bne _08093218
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, _08093210  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _080931A8
	bl _08094EC8
_080931A8:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _080931FA
	ldr r1, _08093214  @ gUnknown_0200D6E0
	mov r9, r1
_080931BA:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, r9
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, r9
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	cmp r4, r0
	ble _080931EA
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r0, #1
	mov sl, r0
_080931EA:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08093210  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r1, r8
	subs r0, r0, r1
	cmp r5, r0
	blt _080931BA
_080931FA:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08093210  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _080931A8
	bl _08094EC8
	.align 2, 0
_08093210: .4byte gUnknown_0200F158
_08093214: .4byte gUnknown_0200D6E0
_08093218:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r2, _08093294  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0809322C
	bl _08094FCE
_0809322C:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _0809327E
	ldr r0, _08093298  @ gUnknown_0200D6E0
	mov r9, r0
_0809323E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	cmp r4, r0
	bge _0809326E
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0809326E:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08093294  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _0809323E
_0809327E:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08093294  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0809322C
	bl _08094FCE
	.align 2, 0
_08093294: .4byte gUnknown_0200F158
_08093298: .4byte gUnknown_0200D6E0
_0809329C:
	cmp r2, #0
	bne _08093324
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, _0809331C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _080932B4
	bl _08094FCE
_080932B4:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _08093306
	ldr r7, _08093320  @ gUnknown_0200D6E0
	mov r9, r7
_080932C6:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitMaxHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitMaxHp
	cmp r4, r0
	ble _080932F6
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_080932F6:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0809331C  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _080932C6
_08093306:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0809331C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _080932B4
	bl _08094FCE
	.align 2, 0
_0809331C: .4byte gUnknown_0200F158
_08093320: .4byte gUnknown_0200D6E0
_08093324:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, _080933A0  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08093338
	bl _08094FCE
_08093338:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _0809338A
	ldr r7, _080933A4  @ gUnknown_0200D6E0
	mov r9, r7
_0809334A:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitMaxHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitMaxHp
	cmp r4, r0
	bge _0809337A
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0809337A:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _080933A0  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _0809334A
_0809338A:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _080933A0  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08093338
	bl _08094FCE
	.align 2, 0
_080933A0: .4byte gUnknown_0200F158
_080933A4: .4byte gUnknown_0200D6E0
_080933A8:
	cmp r2, #0
	bne _08093430
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, _08093428  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _080933C0
	bl _08094FCE
_080933C0:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _08093412
	ldr r7, _0809342C  @ gUnknown_0200D6E0
	mov r9, r7
_080933D2:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitPower
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitPower
	cmp r4, r0
	ble _08093402
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08093402:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08093428  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _080933D2
_08093412:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08093428  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _080933C0
	bl _08094FCE
	.align 2, 0
_08093428: .4byte gUnknown_0200F158
_0809342C: .4byte gUnknown_0200D6E0
_08093430:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, _080934AC  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08093444
	bl _08094FCE
_08093444:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _08093496
	ldr r7, _080934B0  @ gUnknown_0200D6E0
	mov r9, r7
_08093456:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitPower
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitPower
	cmp r4, r0
	bge _08093486
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08093486:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _080934AC  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _08093456
_08093496:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _080934AC  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08093444
	bl _08094FCE
	.align 2, 0
_080934AC: .4byte gUnknown_0200F158
_080934B0: .4byte gUnknown_0200D6E0
_080934B4:
	cmp r2, #0
	bne _0809353C
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, _08093534  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _080934CC
	bl _08094FCE
_080934CC:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _0809351E
	ldr r7, _08093538  @ gUnknown_0200D6E0
	mov r9, r7
_080934DE:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSkill
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSkill
	cmp r4, r0
	ble _0809350E
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0809350E:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08093534  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _080934DE
_0809351E:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08093534  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _080934CC
	bl _08094FCE
	.align 2, 0
_08093534: .4byte gUnknown_0200F158
_08093538: .4byte gUnknown_0200D6E0
_0809353C:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, _080935B8  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08093550
	bl _08094FCE
_08093550:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _080935A2
	ldr r7, _080935BC  @ gUnknown_0200D6E0
	mov r9, r7
_08093562:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSkill
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSkill
	cmp r4, r0
	bge _08093592
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08093592:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _080935B8  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _08093562
_080935A2:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _080935B8  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08093550
	bl _08094FCE
	.align 2, 0
_080935B8: .4byte gUnknown_0200F158
_080935BC: .4byte gUnknown_0200D6E0
_080935C0:
	cmp r2, #0
	bne _08093648
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, _08093640  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _080935D8
	bl _08094FCE
_080935D8:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _0809362A
	ldr r7, _08093644  @ gUnknown_0200D6E0
	mov r9, r7
_080935EA:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSpeed
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSpeed
	cmp r4, r0
	ble _0809361A
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0809361A:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08093640  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _080935EA
_0809362A:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08093640  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _080935D8
	bl _08094FCE
	.align 2, 0
_08093640: .4byte gUnknown_0200F158
_08093644: .4byte gUnknown_0200D6E0
_08093648:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, _080936C4  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0809365C
	bl _08094FCE
_0809365C:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _080936AE
	ldr r7, _080936C8  @ gUnknown_0200D6E0
	mov r9, r7
_0809366E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSpeed
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSpeed
	cmp r4, r0
	bge _0809369E
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0809369E:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _080936C4  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _0809366E
_080936AE:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _080936C4  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0809365C
	bl _08094FCE
	.align 2, 0
_080936C4: .4byte gUnknown_0200F158
_080936C8: .4byte gUnknown_0200D6E0
_080936CC:
	cmp r2, #0
	bne _08093754
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, _0809374C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _080936E4
	bl _08094FCE
_080936E4:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _08093736
	ldr r7, _08093750  @ gUnknown_0200D6E0
	mov r9, r7
_080936F6:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitLuck
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitLuck
	cmp r4, r0
	ble _08093726
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08093726:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0809374C  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _080936F6
_08093736:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0809374C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _080936E4
	bl _08094FCE
	.align 2, 0
_0809374C: .4byte gUnknown_0200F158
_08093750: .4byte gUnknown_0200D6E0
_08093754:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, _080937D0  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08093768
	bl _08094FCE
_08093768:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _080937BA
	ldr r7, _080937D4  @ gUnknown_0200D6E0
	mov r9, r7
_0809377A:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitLuck
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitLuck
	cmp r4, r0
	bge _080937AA
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_080937AA:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _080937D0  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _0809377A
_080937BA:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _080937D0  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08093768
	bl _08094FCE
	.align 2, 0
_080937D0: .4byte gUnknown_0200F158
_080937D4: .4byte gUnknown_0200D6E0
_080937D8:
	cmp r2, #0
	bne _08093860
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, _08093858  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _080937F0
	bl _08094FCE
_080937F0:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _08093842
	ldr r7, _0809385C  @ gUnknown_0200D6E0
	mov r9, r7
_08093802:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitDefense
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitDefense
	cmp r4, r0
	ble _08093832
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08093832:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08093858  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _08093802
_08093842:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08093858  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _080937F0
	bl _08094FCE
	.align 2, 0
_08093858: .4byte gUnknown_0200F158
_0809385C: .4byte gUnknown_0200D6E0
_08093860:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, _080938DC  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08093874
	bl _08094FCE
_08093874:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _080938C6
	ldr r7, _080938E0  @ gUnknown_0200D6E0
	mov r9, r7
_08093886:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitDefense
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitDefense
	cmp r4, r0
	bge _080938B6
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_080938B6:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _080938DC  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _08093886
_080938C6:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _080938DC  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08093874
	bl _08094FCE
	.align 2, 0
_080938DC: .4byte gUnknown_0200F158
_080938E0: .4byte gUnknown_0200D6E0
_080938E4:
	cmp r2, #0
	bne _0809396C
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, _08093964  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _080938FC
	bl _08094FCE
_080938FC:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _0809394E
	ldr r7, _08093968  @ gUnknown_0200D6E0
	mov r9, r7
_0809390E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitResistance
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitResistance
	cmp r4, r0
	ble _0809393E
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0809393E:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08093964  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _0809390E
_0809394E:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08093964  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _080938FC
	bl _08094FCE
	.align 2, 0
_08093964: .4byte gUnknown_0200F158
_08093968: .4byte gUnknown_0200D6E0
_0809396C:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, _080939E8  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08093980
	bl _08094FCE
_08093980:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _080939D2
	ldr r7, _080939EC  @ gUnknown_0200D6E0
	mov r9, r7
_08093992:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitResistance
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitResistance
	cmp r4, r0
	bge _080939C2
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_080939C2:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _080939E8  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _08093992
_080939D2:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _080939E8  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08093980
	bl _08094FCE
	.align 2, 0
_080939E8: .4byte gUnknown_0200F158
_080939EC: .4byte gUnknown_0200D6E0
_080939F0:
	cmp r2, #0
	bne _08093AA0
	movs r3, #0
	str r3, [sp, #0x48]
	movs r1, #0
	ldr r7, _08093A98  @ gUnknown_0200F158
	ldrb r0, [r7]
	subs r0, #1
	cmp r2, r0
	bge _08093A90
	adds r0, r7, #0
	mov sl, r0
_08093A08:
	movs r2, #0
	mov r3, sl
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge _08093A80
	ldr r7, _08093A9C  @ gUnknown_0200D6E0
	mov ip, r7
_08093A1C:
	adds r0, r2, #1
	mov r8, r0
	lsls r0, r0, #2
	mov r1, ip
	adds r7, r0, r1
	ldr r6, [r7]
	ldr r1, [r6]
	ldr r0, [r1, #4]
	movs r3, #0x11
	ldrsb r3, [r0, r3]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r3, r3, r0
	movs r0, #0x1a
	ldrsb r0, [r1, r0]
	adds r3, r3, r0
	lsls r0, r2, #2
	mov r2, ip
	adds r4, r0, r2
	ldr r5, [r4]
	ldr r2, [r5]
	ldr r0, [r2, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r2]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	movs r1, #0x1a
	ldrsb r1, [r2, r1]
	adds r0, r0, r1
	cmp r3, r0
	ble _08093A6E
	str r6, [r4]
	str r5, [r7]
	movs r3, #1
	str r3, [sp, #0x48]
_08093A6E:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r9
	subs r0, r0, r3
	cmp r2, r0
	blt _08093A1C
_08093A80:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08093A98  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08093A08
_08093A90:
	ldr r3, [sp, #0x48]
	bl _08094ECA
	.align 2, 0
_08093A98: .4byte gUnknown_0200F158
_08093A9C: .4byte gUnknown_0200D6E0
_08093AA0:
	movs r7, #0
	str r7, [sp, #0x4c]
	movs r1, #0
	ldr r2, _08093B44  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r7, r0
	bge _08093B3C
	adds r3, r2, #0
	mov sl, r3
_08093AB4:
	movs r2, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge _08093B2C
	ldr r0, _08093B48  @ gUnknown_0200D6E0
	mov ip, r0
_08093AC8:
	adds r1, r2, #1
	mov r8, r1
	lsls r0, r1, #2
	mov r3, ip
	adds r7, r0, r3
	ldr r6, [r7]
	ldr r1, [r6]
	ldr r0, [r1, #4]
	movs r3, #0x11
	ldrsb r3, [r0, r3]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r3, r3, r0
	movs r0, #0x1a
	ldrsb r0, [r1, r0]
	adds r3, r3, r0
	lsls r0, r2, #2
	mov r1, ip
	adds r4, r0, r1
	ldr r5, [r4]
	ldr r2, [r5]
	ldr r0, [r2, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r2]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	movs r1, #0x1a
	ldrsb r1, [r2, r1]
	adds r0, r0, r1
	cmp r3, r0
	bge _08093B1A
	str r6, [r4]
	str r5, [r7]
	movs r2, #1
	str r2, [sp, #0x4c]
_08093B1A:
	mov r3, r8
	lsls r0, r3, #0x18
	lsrs r2, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r9
	subs r0, r0, r1
	cmp r2, r0
	blt _08093AC8
_08093B2C:
	mov r2, r9
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08093B44  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08093AB4
_08093B3C:
	ldr r7, [sp, #0x4c]
	bl _0809435E
	.align 2, 0
_08093B44: .4byte gUnknown_0200F158
_08093B48: .4byte gUnknown_0200D6E0
_08093B4C:
	cmp r2, #0
	bne _08093BD4
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, _08093BCC  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08093B64
	bl _08094EC8
_08093B64:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _08093BB6
	ldr r1, _08093BD0  @ gUnknown_0200D6E0
	mov r9, r1
_08093B76:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, r9
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAid
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, r9
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAid
	cmp r4, r0
	ble _08093BA6
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r0, #1
	mov sl, r0
_08093BA6:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08093BCC  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r1, r8
	subs r0, r0, r1
	cmp r5, r0
	blt _08093B76
_08093BB6:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08093BCC  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08093B64
	bl _08094EC8
	.align 2, 0
_08093BCC: .4byte gUnknown_0200F158
_08093BD0: .4byte gUnknown_0200D6E0
_08093BD4:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r2, _08093C50  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08093BE8
	bl _08094FCE
_08093BE8:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _08093C3A
	ldr r0, _08093C54  @ gUnknown_0200D6E0
	mov r9, r0
_08093BFA:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAid
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAid
	cmp r4, r0
	bge _08093C2A
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08093C2A:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08093C50  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _08093BFA
_08093C3A:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08093C50  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08093BE8
	bl _08094FCE
	.align 2, 0
_08093C50: .4byte gUnknown_0200F158
_08093C54: .4byte gUnknown_0200D6E0
_08093C58:
	cmp r2, #0
	bne _08093CE0
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, _08093CD8  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08093C70
	bl _08094FCE
_08093C70:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _08093CC2
	ldr r7, _08093CDC  @ gUnknown_0200D6E0
	mov r9, r7
_08093C82:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	cmp r4, r0
	bge _08093CB2
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08093CB2:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08093CD8  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _08093C82
_08093CC2:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08093CD8  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08093C70
	bl _08094FCE
	.align 2, 0
_08093CD8: .4byte gUnknown_0200F158
_08093CDC: .4byte gUnknown_0200D6E0
_08093CE0:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, _08093D5C  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08093CF4
	bl _08094FCE
_08093CF4:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _08093D46
	ldr r7, _08093D60  @ gUnknown_0200D6E0
	mov r9, r7
_08093D06:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	cmp r4, r0
	ble _08093D36
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08093D36:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08093D5C  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _08093D06
_08093D46:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08093D5C  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08093CF4
	bl _08094FCE
	.align 2, 0
_08093D5C: .4byte gUnknown_0200F158
_08093D60: .4byte gUnknown_0200D6E0
_08093D64:
	cmp r2, #0
	beq _08093D6A
	b _08093E6C
_08093D6A:
	movs r3, #0
	str r3, [sp, #0x50]
	movs r4, #0
	ldr r0, _08093DA8  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r2, r0
	bcs _08093DA2
	ldr r5, _08093DAC  @ gUnknown_0200D6E0
_08093D7A:
	lsls r0, r4, #2
	adds r0, r0, r5
	ldr r0, [r0]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIndex
	mov r7, sp
	adds r1, r7, r4
	strb r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, _08093DA8  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	bcc _08093D7A
_08093DA2:
	movs r4, #0
	b _08093E56
	.align 2, 0
_08093DA8: .4byte gUnknown_0200F158
_08093DAC: .4byte gUnknown_0200D6E0
_08093DB0:
	movs r6, #0
	ldrb r0, [r1]
	adds r1, r4, #1
	subs r0, r0, r1
	str r1, [sp, #0x58]
	cmp r6, r0
	bge _08093E50
	ldr r0, _08093DF8  @ gUnknown_0200D6E0
	mov sl, r0
_08093DC2:
	adds r0, r6, #1
	mov r1, sp
	adds r1, r1, r0
	mov r8, r1
	mov r2, sp
	adds r5, r2, r6
	ldrb r4, [r1]
	adds r3, r4, #0
	ldrb r2, [r5]
	mov r9, r0
	cmp r3, r2
	bls _08093DFC
	adds r1, r2, #0
	strb r4, [r5]
	mov r3, r8
	strb r1, [r3]
	lsls r2, r6, #2
	add r2, sl
	ldr r3, [r2]
	lsls r1, r0, #2
	add r1, sl
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	movs r7, #1
	str r7, [sp, #0x50]
	b _08093E3E
	.align 2, 0
_08093DF8: .4byte gUnknown_0200D6E0
_08093DFC:
	cmp r3, r2
	bne _08093E3E
	mov r1, r9
	lsls r0, r1, #2
	mov r2, sl
	adds r7, r0, r2
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	adds r4, r0, #0
	lsls r0, r6, #2
	mov r3, sl
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r4, r4, #0x10
	lsls r0, r0, #0x10
	cmp r4, r0
	bls _08093E3E
	ldrb r1, [r5]
	mov r2, r8
	ldrb r0, [r2]
	strb r0, [r5]
	strb r1, [r2]
	ldr r3, [r6]
	ldr r0, [r7]
	str r0, [r6]
	str r3, [r7]
	movs r3, #1
	str r3, [sp, #0x50]
_08093E3E:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r6, r0, #0x18
	ldr r0, _08093E68  @ gUnknown_0200F158
	ldrb r0, [r0]
	ldr r1, [sp, #0x58]
	subs r0, r0, r1
	cmp r6, r0
	blt _08093DC2
_08093E50:
	ldr r2, [sp, #0x58]
	lsls r0, r2, #0x18
	lsrs r4, r0, #0x18
_08093E56:
	ldr r1, _08093E68  @ gUnknown_0200F158
	ldrb r0, [r1]
	subs r0, #1
	cmp r4, r0
	blt _08093DB0
	ldr r3, [sp, #0x50]
	bl _08094ECA
	.align 2, 0
_08093E68: .4byte gUnknown_0200F158
_08093E6C:
	movs r7, #0
	str r7, [sp, #0x54]
	movs r4, #0
	ldr r0, _08093EA8  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r7, r0
	bcs _08093EA4
	ldr r5, _08093EAC  @ gUnknown_0200D6E0
_08093E7C:
	lsls r0, r4, #2
	adds r0, r0, r5
	ldr r0, [r0]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIndex
	mov r2, sp
	adds r1, r2, r4
	strb r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, _08093EA8  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	bcc _08093E7C
_08093EA4:
	movs r4, #0
	b _08093F56
	.align 2, 0
_08093EA8: .4byte gUnknown_0200F158
_08093EAC: .4byte gUnknown_0200D6E0
_08093EB0:
	movs r6, #0
	ldrb r0, [r1]
	adds r1, r4, #1
	subs r0, r0, r1
	str r1, [sp, #0x5c]
	cmp r6, r0
	bge _08093F50
	ldr r3, _08093EF8  @ gUnknown_0200D6E0
	mov sl, r3
_08093EC2:
	adds r0, r6, #1
	mov r7, sp
	adds r7, r7, r0
	mov r8, r7
	mov r1, sp
	adds r5, r1, r6
	ldrb r4, [r7]
	adds r3, r4, #0
	ldrb r2, [r5]
	mov r9, r0
	cmp r3, r2
	bcs _08093EFC
	adds r1, r2, #0
	strb r4, [r5]
	strb r1, [r7]
	lsls r2, r6, #2
	add r2, sl
	ldr r3, [r2]
	lsls r1, r0, #2
	add r1, sl
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	movs r2, #1
	str r2, [sp, #0x54]
	b _08093F3E
	.align 2, 0
_08093EF8: .4byte gUnknown_0200D6E0
_08093EFC:
	cmp r3, r2
	bne _08093F3E
	mov r3, r9
	lsls r0, r3, #2
	mov r1, sl
	adds r7, r0, r1
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	adds r4, r0, #0
	lsls r0, r6, #2
	mov r2, sl
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r4, r4, #0x10
	lsls r0, r0, #0x10
	cmp r4, r0
	bcs _08093F3E
	ldrb r1, [r5]
	mov r3, r8
	ldrb r0, [r3]
	strb r0, [r5]
	strb r1, [r3]
	ldr r3, [r6]
	ldr r0, [r7]
	str r0, [r6]
	str r3, [r7]
	movs r7, #1
	str r7, [sp, #0x54]
_08093F3E:
	mov r1, r9
	lsls r0, r1, #0x18
	lsrs r6, r0, #0x18
	ldr r0, _08093F64  @ gUnknown_0200F158
	ldrb r0, [r0]
	ldr r2, [sp, #0x5c]
	subs r0, r0, r2
	cmp r6, r0
	blt _08093EC2
_08093F50:
	ldr r3, [sp, #0x5c]
	lsls r0, r3, #0x18
	lsrs r4, r0, #0x18
_08093F56:
	ldr r1, _08093F64  @ gUnknown_0200F158
	ldrb r0, [r1]
	subs r0, #1
	cmp r4, r0
	blt _08093EB0
	ldr r7, [sp, #0x54]
	b _0809435E
	.align 2, 0
_08093F64: .4byte gUnknown_0200F158
_08093F68:
	cmp r2, #0
	bne _08093FE4
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r3, _08093FDC  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _08093FD6
	adds r7, r3, #0
	mov sl, r7
_08093F80:
	movs r2, #0
	mov r3, sl
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge _08093FC6
	mov r8, r9
_08093F92:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, _08093FE0  @ gUnknown_0200D6E0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #4
	ldrsh r1, [r4, r0]
	movs r7, #4
	ldrsh r0, [r3, r7]
	cmp r1, r0
	ble _08093FB6
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_08093FB6:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r8
	subs r0, r0, r3
	cmp r2, r0
	blt _08093F92
_08093FC6:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08093FDC  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08093F80
_08093FD6:
	mov r3, ip
	bl _08094ECA
	.align 2, 0
_08093FDC: .4byte gUnknown_0200F158
_08093FE0: .4byte gUnknown_0200D6E0
_08093FE4:
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r2, _08094054  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge _0809404E
	adds r3, r2, #0
	mov sl, r3
_08093FF8:
	movs r2, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge _0809403E
	mov r8, r9
_0809400A:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r1, _08094058  @ gUnknown_0200D6E0
	adds r5, r0, r1
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r1
	ldr r3, [r2]
	movs r7, #4
	ldrsh r1, [r4, r7]
	movs r7, #4
	ldrsh r0, [r3, r7]
	cmp r1, r0
	bge _0809402E
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_0809402E:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r8
	subs r0, r0, r3
	cmp r2, r0
	blt _0809400A
_0809403E:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08094054  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08093FF8
_0809404E:
	mov r3, ip
	bl _08094ECA
	.align 2, 0
_08094054: .4byte gUnknown_0200F158
_08094058: .4byte gUnknown_0200D6E0
_0809405C:
	cmp r2, #0
	bne _080940D8
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r3, _080940D0  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _080940CA
	adds r7, r3, #0
	mov sl, r7
_08094074:
	movs r2, #0
	mov r3, sl
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge _080940BA
	mov r8, r9
_08094086:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, _080940D4  @ gUnknown_0200D6E0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #6
	ldrsh r1, [r4, r0]
	movs r7, #6
	ldrsh r0, [r3, r7]
	cmp r1, r0
	ble _080940AA
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_080940AA:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r8
	subs r0, r0, r3
	cmp r2, r0
	blt _08094086
_080940BA:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _080940D0  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094074
_080940CA:
	mov r3, ip
	bl _08094ECA
	.align 2, 0
_080940D0: .4byte gUnknown_0200F158
_080940D4: .4byte gUnknown_0200D6E0
_080940D8:
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r2, _08094148  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge _08094142
	adds r3, r2, #0
	mov sl, r3
_080940EC:
	movs r2, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge _08094132
	mov r8, r9
_080940FE:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r1, _0809414C  @ gUnknown_0200D6E0
	adds r5, r0, r1
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r1
	ldr r3, [r2]
	movs r7, #6
	ldrsh r1, [r4, r7]
	movs r7, #6
	ldrsh r0, [r3, r7]
	cmp r1, r0
	bge _08094122
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_08094122:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r8
	subs r0, r0, r3
	cmp r2, r0
	blt _080940FE
_08094132:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08094148  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080940EC
_08094142:
	mov r3, ip
	bl _08094ECA
	.align 2, 0
_08094148: .4byte gUnknown_0200F158
_0809414C: .4byte gUnknown_0200D6E0
_08094150:
	cmp r2, #0
	bne _080941CC
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r3, _080941C4  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _080941BE
	adds r7, r3, #0
	mov sl, r7
_08094168:
	movs r2, #0
	mov r3, sl
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge _080941AE
	mov r8, r9
_0809417A:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, _080941C8  @ gUnknown_0200D6E0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #8
	ldrsh r1, [r4, r0]
	movs r7, #8
	ldrsh r0, [r3, r7]
	cmp r1, r0
	ble _0809419E
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_0809419E:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r8
	subs r0, r0, r3
	cmp r2, r0
	blt _0809417A
_080941AE:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _080941C4  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094168
_080941BE:
	mov r3, ip
	bl _08094ECA
	.align 2, 0
_080941C4: .4byte gUnknown_0200F158
_080941C8: .4byte gUnknown_0200D6E0
_080941CC:
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r2, _0809423C  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge _08094236
	adds r3, r2, #0
	mov sl, r3
_080941E0:
	movs r2, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge _08094226
	mov r8, r9
_080941F2:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r1, _08094240  @ gUnknown_0200D6E0
	adds r5, r0, r1
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r1
	ldr r3, [r2]
	movs r7, #8
	ldrsh r1, [r4, r7]
	movs r7, #8
	ldrsh r0, [r3, r7]
	cmp r1, r0
	bge _08094216
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_08094216:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r8
	subs r0, r0, r3
	cmp r2, r0
	blt _080941F2
_08094226:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0809423C  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080941E0
_08094236:
	mov r3, ip
	bl _08094ECA
	.align 2, 0
_0809423C: .4byte gUnknown_0200F158
_08094240: .4byte gUnknown_0200D6E0
_08094244:
	cmp r2, #0
	bne _080942D8
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r3, _080942D0  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0809425A
	b _0809435C
_0809425A:
	adds r7, r3, #0
	mov sl, r7
_0809425E:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge _080942BE
	ldr r7, _080942D4  @ gUnknown_0200D6E0
	mov r9, r7
_08094272:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	movs r2, #0x1d
	ldrsb r2, [r0, r2]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r0, [r4]
	movs r1, #0x1d
	ldrsb r1, [r0, r1]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	cmp r2, r1
	ble _080942AE
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
_080942AE:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt _08094272
_080942BE:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _080942D0  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0809425E
	b _0809435C
	.align 2, 0
_080942D0: .4byte gUnknown_0200F158
_080942D4: .4byte gUnknown_0200D6E0
_080942D8:
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r2, _0809436C  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge _0809435C
	adds r3, r2, #0
	mov sl, r3
_080942EC:
	movs r3, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge _0809434C
	ldr r0, _08094370  @ gUnknown_0200D6E0
	mov r9, r0
_08094300:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	movs r2, #0x1d
	ldrsb r2, [r0, r2]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r0, [r4]
	movs r1, #0x1d
	ldrsb r1, [r0, r1]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	cmp r2, r1
	bge _0809433C
_08094334:
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
_0809433C:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt _08094300
_0809434C:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0809436C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _080942EC
_0809435C:
	mov r7, ip
_0809435E:
	cmp r7, #0
	bne _08094366
	bl _08094FE0
_08094366:
	movs r0, #1
	bl _08094FE2
	.align 2, 0
_0809436C: .4byte gUnknown_0200F158
_08094370: .4byte gUnknown_0200D6E0
_08094374:
	cmp r2, #0
	bne _080943FC
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, _080943F4  @ gUnknown_0200F158
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0809438E
	bl _08094EC8
_0809438E:
	adds r7, r3, #0
	mov r9, r7
_08094392:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _080943E2
	ldr r0, _080943F8  @ gUnknown_0200D6E0
	mov r8, r0
_080943A6:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	adds r0, #0x30
	ldrb r1, [r0]
	lsls r1, r1, #0x1c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	cmp r1, r0
	bls _080943D4
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_080943D4:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _080943A6
_080943E2:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094392
	bl _08094EC8
	.align 2, 0
_080943F4: .4byte gUnknown_0200F158
_080943F8: .4byte gUnknown_0200D6E0
_080943FC:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094478  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt _08094412
	bl _08094EC8
_08094412:
	ldr r2, _08094478  @ gUnknown_0200F158
	mov r9, r2
_08094416:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08094466
	ldr r0, _0809447C  @ gUnknown_0200D6E0
	mov r8, r0
_0809442A:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	adds r0, #0x30
	ldrb r1, [r0]
	lsls r1, r1, #0x1c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	cmp r1, r0
	bcs _08094458
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094458:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _0809442A
_08094466:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094416
	bl _08094EC8
	.align 2, 0
_08094478: .4byte gUnknown_0200F158
_0809447C: .4byte gUnknown_0200D6E0
_08094480:
	cmp r2, #0
	bne _08094540
	movs r7, #0
	mov r9, r7
	movs r1, #0
	ldr r0, _080944B0  @ gUnknown_0200F158
	ldrb r3, [r0]
	cmp r2, r3
	bcs _080944C8
	ldr r6, _080944B4  @ gUnknown_0200D6E0
	movs r5, #0x10
	movs r4, #1
_08094498:
	lsls r0, r1, #2
	adds r0, r0, r6
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r2, [r0, #0xc]
	ands r2, r5
	cmp r2, #0
	beq _080944B8
	mov r2, sp
	adds r0, r2, r1
	strb r4, [r0]
	b _080944BE
	.align 2, 0
_080944B0: .4byte gUnknown_0200F158
_080944B4: .4byte gUnknown_0200D6E0
_080944B8:
	mov r7, sp
	adds r0, r7, r1
	strb r2, [r0]
_080944BE:
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, r3
	bcc _08094498
_080944C8:
	movs r1, #0
	ldr r2, _08094538  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080944D6
	b _080945F0
_080944D6:
	mov r8, r2
	ldr r3, _0809453C  @ gUnknown_0200D6E0
	mov ip, r3
	mov sl, r8
_080944DE:
	movs r2, #0
	mov r7, r8
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	adds r6, r1, #0
	cmp r2, r0
	bge _08094528
	mov r7, ip
_080944F0:
	adds r5, r2, #1
	mov r0, sp
	adds r4, r0, r5
	adds r1, r0, r2
	ldrb r3, [r4]
	ldrb r0, [r1]
	cmp r3, r0
	bls _0809451A
	ldrb r0, [r1]
	strb r3, [r1]
	strb r0, [r4]
	lsls r2, r2, #2
	adds r2, r2, r7
	ldr r3, [r2]
	lsls r1, r5, #2
	adds r1, r1, r7
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	movs r1, #1
	mov r9, r1
_0809451A:
	lsls r0, r5, #0x18
	lsrs r2, r0, #0x18
	mov r3, r8
	ldrb r0, [r3]
	subs r0, r0, r6
	cmp r2, r0
	blt _080944F0
_08094528:
	lsls r0, r6, #0x18
	lsrs r1, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _080944DE
	b _080945F0
	.align 2, 0
_08094538: .4byte gUnknown_0200F158
_0809453C: .4byte gUnknown_0200D6E0
_08094540:
	movs r1, #0
	mov r9, r1
	ldr r0, _0809456C  @ gUnknown_0200F158
	ldrb r2, [r0]
	cmp r9, r2
	bcs _08094584
	ldr r6, _08094570  @ gUnknown_0200D6E0
	adds r3, r2, #0
	movs r5, #0x10
	movs r4, #1
_08094554:
	lsls r0, r1, #2
	adds r0, r0, r6
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r2, [r0, #0xc]
	ands r2, r5
	cmp r2, #0
	beq _08094574
	mov r2, sp
	adds r0, r2, r1
	strb r4, [r0]
	b _0809457A
	.align 2, 0
_0809456C: .4byte gUnknown_0200F158
_08094570: .4byte gUnknown_0200D6E0
_08094574:
	mov r7, sp
	adds r0, r7, r1
	strb r2, [r0]
_0809457A:
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, r3
	bcc _08094554
_08094584:
	movs r1, #0
	ldr r2, _08094600  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	bge _080945F0
	mov r8, r2
	ldr r3, _08094604  @ gUnknown_0200D6E0
	mov ip, r3
	mov sl, r8
_08094598:
	movs r2, #0
	mov r7, r8
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	adds r6, r1, #0
	cmp r2, r0
	bge _080945E2
	mov r7, ip
_080945AA:
	adds r5, r2, #1
	mov r0, sp
	adds r4, r0, r5
	adds r1, r0, r2
	ldrb r3, [r4]
	ldrb r0, [r1]
	cmp r3, r0
	bcs _080945D4
	ldrb r0, [r1]
	strb r3, [r1]
	strb r0, [r4]
	lsls r2, r2, #2
	adds r2, r2, r7
	ldr r3, [r2]
	lsls r1, r5, #2
_080945C8:
	adds r1, r1, r7
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	movs r1, #1
	mov r9, r1
_080945D4:
	lsls r0, r5, #0x18
	lsrs r2, r0, #0x18
	mov r3, r8
	ldrb r0, [r3]
	subs r0, r0, r6
	cmp r2, r0
	blt _080945AA
_080945E2:
	lsls r0, r6, #0x18
	lsrs r1, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _08094598
_080945F0:
	mov r0, r9
_080945F2:
	cmp r0, #0
	bne _080945FA
	bl _08094FE0
_080945FA:
	movs r0, #1
	bl _08094FE2
	.align 2, 0
_08094600: .4byte gUnknown_0200F158
_08094604: .4byte gUnknown_0200D6E0
_08094608:
	cmp r2, #0
	bne _0809468C
	movs r1, #0
	mov sl, r1
	ldr r3, _08094684  @ gUnknown_0200F158
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08094620
	bl _08094EC8
_08094620:
	adds r7, r3, #0
	mov r9, r7
_08094624:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08094670
	ldr r0, _08094688  @ gUnknown_0200D6E0
	mov r8, r0
_08094638:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x28
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x28
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _08094662
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094662:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _08094638
_08094670:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094624
	bl _08094EC8
	.align 2, 0
_08094684: .4byte gUnknown_0200F158
_08094688: .4byte gUnknown_0200D6E0
_0809468C:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094704  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt _080946A2
	bl _08094EC8
_080946A2:
	ldr r2, _08094704  @ gUnknown_0200F158
	mov r9, r2
_080946A6:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _080946F2
	ldr r0, _08094708  @ gUnknown_0200D6E0
	mov r8, r0
_080946BA:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x28
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x28
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs _080946E4
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_080946E4:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _080946BA
_080946F2:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080946A6
	bl _08094EC8
	.align 2, 0
_08094704: .4byte gUnknown_0200F158
_08094708: .4byte gUnknown_0200D6E0
_0809470C:
	cmp r2, #0
	bne _0809478C
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094784  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt _08094724
	b _08094EC8
_08094724:
	ldr r2, _08094784  @ gUnknown_0200F158
	mov r9, r2
_08094728:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08094774
	ldr r0, _08094788  @ gUnknown_0200D6E0
	mov r8, r0
_0809473C:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x29
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x29
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _08094766
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094766:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _0809473C
_08094774:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094728
	b _08094EC8
	.align 2, 0
_08094784: .4byte gUnknown_0200F158
_08094788: .4byte gUnknown_0200D6E0
_0809478C:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094800  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt _080947A0
	b _08094EC8
_080947A0:
	ldr r2, _08094800  @ gUnknown_0200F158
	mov r9, r2
_080947A4:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _080947F0
	ldr r0, _08094804  @ gUnknown_0200D6E0
	mov r8, r0
_080947B8:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x29
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x29
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs _080947E2
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_080947E2:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _080947B8
_080947F0:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080947A4
	b _08094EC8
	.align 2, 0
_08094800: .4byte gUnknown_0200F158
_08094804: .4byte gUnknown_0200D6E0
_08094808:
	cmp r2, #0
	bne _08094888
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094880  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt _08094820
	b _08094EC8
_08094820:
	ldr r2, _08094880  @ gUnknown_0200F158
	mov r9, r2
_08094824:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08094870
	ldr r0, _08094884  @ gUnknown_0200D6E0
	mov r8, r0
_08094838:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2a
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2a
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _08094862
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094862:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _08094838
_08094870:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094824
	b _08094EC8
	.align 2, 0
_08094880: .4byte gUnknown_0200F158
_08094884: .4byte gUnknown_0200D6E0
_08094888:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _080948FC  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt _0809489C
	b _08094EC8
_0809489C:
	ldr r2, _080948FC  @ gUnknown_0200F158
	mov r9, r2
_080948A0:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _080948EC
	ldr r0, _08094900  @ gUnknown_0200D6E0
	mov r8, r0
_080948B4:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2a
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2a
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs _080948DE
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_080948DE:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _080948B4
_080948EC:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080948A0
	b _08094EC8
	.align 2, 0
_080948FC: .4byte gUnknown_0200F158
_08094900: .4byte gUnknown_0200D6E0
_08094904:
	cmp r2, #0
	bne _08094984
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _0809497C  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt _0809491C
	b _08094EC8
_0809491C:
	ldr r2, _0809497C  @ gUnknown_0200F158
	mov r9, r2
_08094920:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _0809496C
	ldr r0, _08094980  @ gUnknown_0200D6E0
	mov r8, r0
_08094934:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2b
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2b
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _0809495E
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_0809495E:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _08094934
_0809496C:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094920
	b _08094EC8
	.align 2, 0
_0809497C: .4byte gUnknown_0200F158
_08094980: .4byte gUnknown_0200D6E0
_08094984:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _080949F8  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt _08094998
	b _08094EC8
_08094998:
	ldr r2, _080949F8  @ gUnknown_0200F158
	mov r9, r2
_0809499C:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _080949E8
	ldr r0, _080949FC  @ gUnknown_0200D6E0
	mov r8, r0
_080949B0:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2b
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2b
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs _080949DA
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_080949DA:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _080949B0
_080949E8:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0809499C
	b _08094EC8
	.align 2, 0
_080949F8: .4byte gUnknown_0200F158
_080949FC: .4byte gUnknown_0200D6E0
_08094A00:
	cmp r2, #0
	bne _08094A80
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094A78  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt _08094A18
	b _08094EC8
_08094A18:
	ldr r2, _08094A78  @ gUnknown_0200F158
	mov r9, r2
_08094A1C:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08094A68
	ldr r0, _08094A7C  @ gUnknown_0200D6E0
	mov r8, r0
_08094A30:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2c
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _08094A5A
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094A5A:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _08094A30
_08094A68:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094A1C
	b _08094EC8
	.align 2, 0
_08094A78: .4byte gUnknown_0200F158
_08094A7C: .4byte gUnknown_0200D6E0
_08094A80:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094AF4  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt _08094A94
	b _08094EC8
_08094A94:
	ldr r2, _08094AF4  @ gUnknown_0200F158
	mov r9, r2
_08094A98:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08094AE4
	ldr r0, _08094AF8  @ gUnknown_0200D6E0
	mov r8, r0
_08094AAC:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2c
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs _08094AD6
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094AD6:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _08094AAC
_08094AE4:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094A98
	b _08094EC8
	.align 2, 0
_08094AF4: .4byte gUnknown_0200F158
_08094AF8: .4byte gUnknown_0200D6E0
_08094AFC:
	cmp r2, #0
	bne _08094B7C
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094B74  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt _08094B14
	b _08094EC8
_08094B14:
	ldr r2, _08094B74  @ gUnknown_0200F158
	mov r9, r2
_08094B18:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08094B64
	ldr r0, _08094B78  @ gUnknown_0200D6E0
	mov r8, r0
_08094B2C:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2d
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2d
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _08094B56
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094B56:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _08094B2C
_08094B64:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094B18
	b _08094EC8
	.align 2, 0
_08094B74: .4byte gUnknown_0200F158
_08094B78: .4byte gUnknown_0200D6E0
_08094B7C:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094BF0  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt _08094B90
	b _08094EC8
_08094B90:
	ldr r2, _08094BF0  @ gUnknown_0200F158
	mov r9, r2
_08094B94:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08094BE0
	ldr r0, _08094BF4  @ gUnknown_0200D6E0
	mov r8, r0
_08094BA8:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2d
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2d
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs _08094BD2
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094BD2:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _08094BA8
_08094BE0:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094B94
	b _08094EC8
	.align 2, 0
_08094BF0: .4byte gUnknown_0200F158
_08094BF4: .4byte gUnknown_0200D6E0
_08094BF8:
	cmp r2, #0
	bne _08094C78
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094C70  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt _08094C10
	b _08094EC8
_08094C10:
	ldr r2, _08094C70  @ gUnknown_0200F158
	mov r9, r2
_08094C14:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08094C60
	ldr r0, _08094C74  @ gUnknown_0200D6E0
	mov r8, r0
_08094C28:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2e
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2e
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _08094C52
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094C52:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _08094C28
_08094C60:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094C14
	b _08094EC8
	.align 2, 0
_08094C70: .4byte gUnknown_0200F158
_08094C74: .4byte gUnknown_0200D6E0
_08094C78:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094CEC  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt _08094C8C
	b _08094EC8
_08094C8C:
	ldr r2, _08094CEC  @ gUnknown_0200F158
	mov r9, r2
_08094C90:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08094CDC
	ldr r0, _08094CF0  @ gUnknown_0200D6E0
	mov r8, r0
_08094CA4:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2e
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2e
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs _08094CCE
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094CCE:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _08094CA4
_08094CDC:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094C90
	b _08094EC8
	.align 2, 0
_08094CEC: .4byte gUnknown_0200F158
_08094CF0: .4byte gUnknown_0200D6E0
_08094CF4:
	cmp r2, #0
	bne _08094D74
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094D6C  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt _08094D0C
	b _08094EC8
_08094D0C:
	ldr r2, _08094D6C  @ gUnknown_0200F158
	mov r9, r2
_08094D10:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08094D5C
	ldr r0, _08094D70  @ gUnknown_0200D6E0
	mov r8, r0
_08094D24:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2f
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2f
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _08094D4E
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094D4E:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _08094D24
_08094D5C:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094D10
	b _08094EC8
	.align 2, 0
_08094D6C: .4byte gUnknown_0200F158
_08094D70: .4byte gUnknown_0200D6E0
_08094D74:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094DE8  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt _08094D88
	b _08094EC8
_08094D88:
	ldr r2, _08094DE8  @ gUnknown_0200F158
	mov r9, r2
_08094D8C:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge _08094DD8
	ldr r0, _08094DEC  @ gUnknown_0200D6E0
	mov r8, r0
_08094DA0:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2f
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2f
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs _08094DCA
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094DCA:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt _08094DA0
_08094DD8:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094D8C
	b _08094EC8
	.align 2, 0
_08094DE8: .4byte gUnknown_0200F158
_08094DEC: .4byte gUnknown_0200D6E0
_08094DF0:
	cmp r2, #0
	bne _08094E64
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094E5C  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	bge _08094EC8
	ldr r2, _08094E5C  @ gUnknown_0200F158
	mov r9, r2
_08094E0A:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r2, r0
	bge _08094E48
_08094E1A:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, _08094E60  @ gUnknown_0200D6E0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	ldrb r0, [r4, #0xa]
	ldrb r7, [r3, #0xa]
	cmp r0, r7
	bls _08094E3A
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094E3A:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r3, r9
	ldrb r0, [r3]
	subs r0, r0, r1
	cmp r2, r0
	blt _08094E1A
_08094E48:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094E0A
	b _08094EC8
	.align 2, 0
_08094E5C: .4byte gUnknown_0200F158
_08094E60: .4byte gUnknown_0200D6E0
_08094E64:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, _08094ED4  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	bge _08094EC8
	ldr r2, _08094ED4  @ gUnknown_0200F158
	mov r9, r2
_08094E7A:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r2, r0
	bge _08094EB8
_08094E8A:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, _08094ED8  @ gUnknown_0200D6E0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	ldrb r0, [r4, #0xa]
	ldrb r7, [r3, #0xa]
	cmp r0, r7
	bcs _08094EAA
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
_08094EAA:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r3, r9
	ldrb r0, [r3]
	subs r0, r0, r1
	cmp r2, r0
	blt _08094E8A
_08094EB8:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094E7A
_08094EC8:
	mov r3, sl
_08094ECA:
	cmp r3, #0
	bne _08094ED0
	b _08094FE0
_08094ED0:
	movs r0, #1
	b _08094FE2
	.align 2, 0
_08094ED4: .4byte gUnknown_0200F158
_08094ED8: .4byte gUnknown_0200D6E0
_08094EDC:
	cmp r2, #0
	bne _08094F5C
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r2, _08094F54  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	bge _08094FCE
_08094EF0:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _08094F42
	ldr r0, _08094F58  @ gUnknown_0200D6E0
	mov r9, r0
_08094F02:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl sub_8092BE4
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl sub_8092BE4
	cmp r4, r0
	ble _08094F32
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08094F32:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08094F54  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _08094F02
_08094F42:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08094F54  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094EF0
	b _08094FCE
	.align 2, 0
_08094F54: .4byte gUnknown_0200F158
_08094F58: .4byte gUnknown_0200D6E0
_08094F5C:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, _08094FD8  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	bge _08094FCE
_08094F6C:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge _08094FBE
	ldr r7, _08094FDC  @ gUnknown_0200D6E0
	mov r9, r7
_08094F7E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl sub_8092BE4
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl sub_8092BE4
	cmp r4, r0
	bge _08094FAE
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08094FAE:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08094FD8  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _08094F7E
_08094FBE:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08094FD8  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08094F6C
_08094FCE:
	mov r2, sl
	cmp r2, #0
	beq _08094FE0
	movs r0, #1
	b _08094FE2
	.align 2, 0
_08094FD8: .4byte gUnknown_0200F158
_08094FDC: .4byte gUnknown_0200D6E0
_08094FE0:
	movs r0, #0
_08094FE2:
	add sp, #0x60
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8094FF4
sub_8094FF4: @ 0x08094FF4
	push {lr}
	ldr r0, _08095014  @ gUnknown_0202BCF0
	movs r2, #0xe
	ldrsb r2, [r0, r2]
	ldr r0, _08095018  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0809501C
	adds r0, r2, #0
	subs r0, #0x24
	cmp r0, #0x13
	bhi _0809501C
	movs r0, #0
	b _0809501E
	.align 2, 0
_08095014: .4byte gUnknown_0202BCF0
_08095018: .4byte gUnknown_03005280
_0809501C:
	movs r0, #1
_0809501E:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8095024
sub_8095024: @ 0x08095024
	push {r4, lr}
	bl sub_809710C
	adds r4, r0, #0
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08095048
	ldr r0, _08095044  @ gUnknown_08A18200
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r0, #8
	b _08095086
	.align 2, 0
_08095044: .4byte gUnknown_08A18200
_08095048:
	cmp r4, #4
	bne _08095064
	movs r0, #2
	bl sub_80A095C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809507C
	ldr r0, _08095060  @ gUnknown_08A18200
	ldr r0, [r0, #0x30]
	b _0809508A
	.align 2, 0
_08095060: .4byte gUnknown_08A18200
_08095064:
	cmp r4, #2
	bne _0809507C
	bl sub_8094FF4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809507C
	ldr r0, _08095078  @ gUnknown_08A18200
	ldr r0, [r0, #0x18]
	b _0809508A
	.align 2, 0
_08095078: .4byte gUnknown_08A18200
_0809507C:
	ldr r0, _08095090  @ gUnknown_08A18200
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r0, #4
_08095086:
	adds r1, r1, r0
	ldr r0, [r1]
_0809508A:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08095090: .4byte gUnknown_08A18200

	THUMB_FUNC_START sub_8095094
sub_8095094: @ 0x08095094
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r3, #0
	movs r2, #0
	movs r5, #1
_0809509E:
	adds r0, r1, #0
	asrs r0, r2
	ands r0, r5
	cmp r0, #0
	beq _080950B2
	cmp r4, r3
	bne _080950B0
	adds r0, r2, #0
	b _080950BC
_080950B0:
	adds r3, #1
_080950B2:
	adds r2, #1
	cmp r2, #3
	ble _0809509E
	movs r0, #1
	negs r0, r0
_080950BC:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80950C4
sub_80950C4: @ 0x080950C4
	push {r4, lr}
	adds r3, r0, #0
	movs r2, #0
	movs r1, #0
	movs r4, #1
_080950CE:
	adds r0, r3, #0
	asrs r0, r1
	ands r0, r4
	cmp r0, #0
	beq _080950DA
	adds r2, #1
_080950DA:
	adds r1, #1
	cmp r1, #3
	ble _080950CE
	adds r0, r2, #0
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80950E8
sub_80950E8: @ 0x080950E8
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r2, r0, #0
	adds r4, r1, #0
	mov r1, sp
	ldr r0, _0809512C  @ gUnknown_08205BB0
	ldm r0!, {r3, r5, r6}
	stm r1!, {r3, r5, r6}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, _08095130  @ gUnknown_08A1D8D0
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r2, r2, r1
	adds r1, r2, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _08095134  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r1, [r0]
	movs r0, #0xc
	ands r0, r1
	add r0, sp
	ldr r0, [r0]
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809512C: .4byte gUnknown_08205BB0
_08095130: .4byte gUnknown_08A1D8D0
_08095134: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_8095138
sub_8095138: @ 0x08095138
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	adds r7, r1, #0
	mov r9, r2
	mov sl, r3
	ldr r1, _080951AC  @ gUnknown_08A1A41C
	lsls r0, r2, #0xf
	lsrs r0, r0, #0x14
	movs r3, #0x80
	lsls r3, r3, #5
	adds r2, r3, #0
	adds r0, r0, r2
	lsls r6, r0, #0x10
	lsrs r2, r6, #0x10
	mov r0, r8
	bl CallARM_FillTileRect
	movs r5, #0
	cmp r5, r7
	bge _08095182
	mov r4, r8
	adds r4, #0x40
	adds r5, r7, #0
_0809516E:
	adds r0, r4, #0
	ldr r1, _080951B0  @ gUnknown_08A1A434
	lsrs r2, r6, #0x10
	bl CallARM_FillTileRect
	adds r4, #0x80
	subs r5, #1
	cmp r5, #0
	bne _0809516E
	adds r5, r7, #0
_08095182:
	lsls r0, r5, #7
	add r0, r8
	adds r0, #0x40
	ldr r1, _080951B4  @ gUnknown_08A1A474
	mov r4, sl
	lsls r2, r4, #0xc
	mov r4, r9
	lsls r3, r4, #0xf
	lsrs r3, r3, #0x14
	adds r2, r2, r3
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl CallARM_FillTileRect
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080951AC: .4byte gUnknown_08A1A41C
_080951B0: .4byte gUnknown_08A1A434
_080951B4: .4byte gUnknown_08A1A474

	THUMB_FUNC_START sub_80951B8
sub_80951B8: @ 0x080951B8
	push {lr}
	adds r2, r0, #0
	adds r2, #0x33
	movs r1, #1
	strb r1, [r2]
	movs r1, #0xa
	bl Proc_GotoLabel
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80951CC
sub_80951CC: @ 0x080951CC
	push {lr}
	adds r2, r0, #0
	adds r2, #0x33
	movs r1, #2
	strb r1, [r2]
	movs r1, #0xa
	bl Proc_GotoLabel
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80951E0
sub_80951E0: @ 0x080951E0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x33
	movs r1, #0
	movs r0, #4
	strb r0, [r2]
	movs r2, #0x80
	lsls r2, r2, #1
	str r1, [sp]
	movs r0, #0x37
	adds r1, r2, #0
	movs r3, #0x20
	bl sub_80029E8
	adds r0, r4, #0
	movs r1, #0xa
	bl Proc_GotoLabel
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095210
sub_8095210: @ 0x08095210
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809523C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08095226
	movs r0, #0x6a
	bl m4aSongNumStart
_08095226:
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #3
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #8
	bl Proc_GotoLabel
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809523C: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_8095240
sub_8095240: @ 0x08095240
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809525C
	bl sub_8096BC4
	adds r0, r4, #0
	movs r1, #0xb
	bl Proc_GotoLabel
	movs r0, #1
	b _0809525E
_0809525C:
	movs r0, #0
_0809525E:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8095264
sub_8095264: @ 0x08095264
	push {lr}
	ldr r0, _08095278  @ gUnknown_08A1829C
	bl Proc_Find
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809527C
	movs r0, #1
	b _0809527E
	.align 2, 0
_08095278: .4byte gUnknown_08A1829C
_0809527C:
	movs r0, #0
_0809527E:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8095284
sub_8095284: @ 0x08095284
	push {lr}
	movs r1, #5
	bl Proc_GotoLabel
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095290
sub_8095290: @ 0x08095290
	push {r4, lr}
	adds r4, r0, #0
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080952AC
	bl sub_8095504
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080952B8
	bl sub_8096BE0
_080952AC:
	adds r0, r4, #0
	movs r1, #5
	bl Proc_GotoLabel
	movs r0, #1
	b _080952BA
_080952B8:
	movs r0, #0
_080952BA:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80952C0
sub_80952C0: @ 0x080952C0
	push {lr}
	movs r1, #5
	bl Proc_GotoLabel
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80952CC
sub_80952CC: @ 0x080952CC
	bx lr

	THUMB_FUNC_START __malloc_unlock_1
__malloc_unlock_1: @ 0x080952D0
	bx lr

	THUMB_FUNC_START sub_80952D4
sub_80952D4: @ 0x080952D4
	push {lr}
	ldr r1, _080952E8  @ gUnknown_0203E87C
	movs r2, #0
	adds r0, r1, #4
_080952DC:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _080952DC
	pop {r0}
	bx r0
	.align 2, 0
_080952E8: .4byte gUnknown_0203E87C

	THUMB_FUNC_START sub_80952EC
sub_80952EC: @ 0x080952EC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r2, #0
	ldr r4, _08095304  @ gUnknown_0203E87C
_080952F6:
	adds r1, r2, r4
	ldrb r0, [r1]
	cmp r0, #0
	bne _08095308
	strb r3, [r1]
	b _0809530E
	.align 2, 0
_08095304: .4byte gUnknown_0203E87C
_08095308:
	adds r2, #1
	cmp r2, #4
	ble _080952F6
_0809530E:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095314
sub_8095314: @ 0x08095314
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	movs r1, #0
	ldr r3, _08095344  @ gUnknown_0203E87C
	adds r4, r3, #0
_08095320:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r0, r2
	bne _08095348
	adds r2, r1, #0
	cmp r1, #3
	bgt _0809533C
	adds r1, r1, r4
_08095330:
	ldrb r0, [r1, #1]
	strb r0, [r1]
	adds r1, #1
	adds r2, #1
	cmp r2, #3
	ble _08095330
_0809533C:
	movs r0, #0
	strb r0, [r3, #4]
	b _0809534E
	.align 2, 0
_08095344: .4byte gUnknown_0203E87C
_08095348:
	adds r1, #1
	cmp r1, #4
	ble _08095320
_0809534E:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095354
sub_8095354: @ 0x08095354
	ldr r1, _08095360  @ gUnknown_020121CC
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
_08095360: .4byte gUnknown_020121CC

	THUMB_FUNC_START sub_8095364
sub_8095364: @ 0x08095364
	ldr r2, _08095370  @ gUnknown_020121CC
	lsls r0, r0, #2
	adds r0, r0, r2
	str r1, [r0]
	bx lr
	.align 2, 0
_08095370: .4byte gUnknown_020121CC

	THUMB_FUNC_START sub_8095374
sub_8095374: @ 0x08095374
	ldr r0, _08095380  @ gUnknown_020121CC
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
_08095380: .4byte gUnknown_020121CC

	THUMB_FUNC_START sub_8095384
sub_8095384: @ 0x08095384
	ldr r1, _08095390  @ gUnknown_020121CC
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r1, r2
	str r0, [r1]
	bx lr
	.align 2, 0
_08095390: .4byte gUnknown_020121CC

	THUMB_FUNC_START sub_8095394
sub_8095394: @ 0x08095394
	push {lr}
	ldr r0, _080953A8  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080953AC
	bl sub_80C4088
	b _080953B6
	.align 2, 0
_080953A8: .4byte gUnknown_03005280
_080953AC:
	ldr r0, _080953BC  @ gUnknown_020121CC
	movs r1, #0x82
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r0, [r0]
_080953B6:
	pop {r1}
	bx r1
	.align 2, 0
_080953BC: .4byte gUnknown_020121CC

	THUMB_FUNC_START sub_80953C0
sub_80953C0: @ 0x080953C0
	push {lr}
	adds r2, r0, #0
	ldr r0, _080953D8  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080953DC
	adds r0, r2, #0
	bl sub_80C409C
	b _080953E6
	.align 2, 0
_080953D8: .4byte gUnknown_03005280
_080953DC:
	ldr r0, _080953EC  @ gUnknown_020121CC
	movs r1, #0x82
	lsls r1, r1, #1
	adds r0, r0, r1
	str r2, [r0]
_080953E6:
	pop {r0}
	bx r0
	.align 2, 0
_080953EC: .4byte gUnknown_020121CC

	THUMB_FUNC_START IsCharacterForceDeployed
IsCharacterForceDeployed: @ 0x080953F0
	push {r4, lr}
	adds r4, r0, #0
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08095414
	bl GetChapterThing
	cmp r0, #0
	bne _08095414
	lsls r0, r4, #0x10
	lsrs r0, r0, #0x10
	bl IsCharacterForceDeployed_
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _08095416
_08095414:
	movs r0, #0
_08095416:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_809541C
sub_809541C: @ 0x0809541C
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_08095422:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0809544A
	ldr r2, [r0]
	cmp r2, #0
	beq _0809544A
	ldr r0, [r0, #0xc]
	ldr r1, _08095458  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne _0809544A
	ldrb r0, [r2, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809544A
	adds r5, #1
_0809544A:
	adds r4, #1
	cmp r4, #0x3f
	ble _08095422
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08095458: .4byte 0x00010004

	THUMB_FUNC_START SomeLeftoverFunctionThatReturns0
SomeLeftoverFunctionThatReturns0: @ 0x0809545C
	movs r0, #0
	bx lr

	THUMB_FUNC_START IsUnitInCurrentRoster
IsUnitInCurrentRoster: @ 0x08095460
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0xc]
	ldr r1, _08095488  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne _08095490
	ldr r0, [r2]
	ldr r1, [r2, #4]
	ldr r0, [r0, #0x28]
	ldr r1, [r1, #0x28]
	orrs r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	bne _0809548C
	movs r0, #1
	b _08095492
	.align 2, 0
_08095488: .4byte 0x00010004
_0809548C:
	movs r0, #8
	str r0, [r2, #0xc]
_08095490:
	movs r0, #0
_08095492:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8095498
sub_8095498: @ 0x08095498
	push {r4, r5, r6, lr}
	sub sp, #4
	movs r6, #0
	adds r2, r0, #0
	adds r2, #0x2f
	strb r6, [r2]
	ldr r0, _080954F8  @ gUnknown_0202BCF0
	ldrb r1, [r0, #0x14]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _080954EE
	movs r4, #0
	adds r5, r2, #0
_080954B4:
	adds r0, r4, #0
	bl sub_80A095C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080954CA
	movs r0, #1
	lsls r0, r4
	ldrb r1, [r5]
	orrs r0, r1
	strb r0, [r5]
_080954CA:
	adds r4, #1
	cmp r4, #3
	ble _080954B4
	movs r0, #2
	bl sub_80A095C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080954DE
	movs r6, #1
_080954DE:
	ldr r1, _080954FC  @ sub_80951E0
	ldr r3, _08095500  @ 0x00000577
	movs r0, #0
	str r0, [sp]
	movs r0, #4
	adds r2, r6, #0
	bl sub_8097024
_080954EE:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080954F8: .4byte gUnknown_0202BCF0
_080954FC: .4byte sub_80951E0
_08095500: .4byte 0x00000577

	THUMB_FUNC_START sub_8095504
sub_8095504: @ 0x08095504
	push {lr}
	ldr r0, _08095518  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x7d
	beq _0809551C
	movs r0, #1
	b _0809551E
	.align 2, 0
_08095518: .4byte gUnknown_0202BCF0
_0809551C:
	movs r0, #0
_0809551E:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8095524
sub_8095524: @ 0x08095524
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	bl sub_8096FAC
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #0
	bne _080955CC
	ldr r1, _0809557C  @ sub_80951B8
	ldr r3, _08095580  @ 0x00000574
	str r4, [sp]
	movs r0, #0
	movs r2, #0
	bl sub_8097024
	ldr r1, _08095584  @ sub_80951CC
	ldr r3, _08095588  @ 0x00000576
	str r4, [sp]
	movs r0, #1
	movs r2, #0
	bl sub_8097024
	adds r0, r5, #0
	bl sub_8095498
	bl sub_8095504
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08095590
	ldr r1, _0809558C  @ sub_80952C0
	movs r3, #0xaf
	lsls r3, r3, #3
	str r4, [sp]
	movs r0, #7
	movs r2, #0
	bl sub_8097024
	b _080955A0
	.align 2, 0
_0809557C: .4byte sub_80951B8
_08095580: .4byte 0x00000574
_08095584: .4byte sub_80951CC
_08095588: .4byte 0x00000576
_0809558C: .4byte sub_80952C0
_08095590:
	ldr r1, _080955C0  @ sub_80952C0
	movs r3, #0xaf
	lsls r3, r3, #3
	str r0, [sp]
	movs r0, #7
	movs r2, #1
	bl sub_8097024
_080955A0:
	movs r4, #0
	bl sub_8094FF4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080955AE
	movs r4, #1
_080955AE:
	ldr r1, _080955C4  @ sub_8095210
	ldr r3, _080955C8  @ 0x00000579
	movs r0, #0
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	bl sub_8097024
	b _080955F8
	.align 2, 0
_080955C0: .4byte sub_80952C0
_080955C4: .4byte sub_8095210
_080955C8: .4byte 0x00000579
_080955CC:
	ldr r1, _08095630  @ sub_80951B8
	ldr r3, _08095634  @ 0x00000574
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r2, #0
	bl sub_8097024
	ldr r1, _08095638  @ sub_80951CC
	ldr r3, _0809563C  @ 0x00000576
	str r4, [sp]
	movs r0, #1
	movs r2, #0
	bl sub_8097024
	ldr r1, _08095640  @ sub_8095284
	ldr r3, _08095644  @ 0x0000075C
	str r4, [sp]
	movs r0, #3
	movs r2, #0
	bl sub_8097024
_080955F8:
	ldr r0, _08095648  @ sub_8095290
	bl sub_8096FD0
	ldr r0, _0809564C  @ sub_8095240
	bl sub_8096FEC
	ldr r0, _08095650  @ gBG0TilemapBuffer
	movs r1, #0xc
	movs r2, #0x13
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _08095654  @ gBG1TilemapBuffer
	movs r1, #0xc
	movs r2, #0x13
	movs r3, #0
	bl TileMap_FillRect
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08095658
	movs r0, #1
	movs r1, #5
	bl sub_8097200
	b _08095660
	.align 2, 0
_08095630: .4byte sub_80951B8
_08095634: .4byte 0x00000574
_08095638: .4byte sub_80951CC
_0809563C: .4byte 0x00000576
_08095640: .4byte sub_8095284
_08095644: .4byte 0x0000075C
_08095648: .4byte sub_8095290
_0809564C: .4byte sub_8095240
_08095650: .4byte gBG0TilemapBuffer
_08095654: .4byte gBG1TilemapBuffer
_08095658:
	movs r0, #1
	movs r1, #6
	bl sub_8097200
_08095660:
	adds r0, r5, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	bl sub_80970CC
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095674
sub_8095674: @ 0x08095674
	push {r4, r5, lr}
	movs r5, #0
	b _08095696
_0809567A:
	bl GetLastStatScreenUid
	adds r4, r0, #0
	adds r0, r5, #0
	bl sub_8095354
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r4, r0
	bne _08095694
	adds r0, r5, #0
	b _080956A0
_08095694:
	adds r5, #1
_08095696:
	bl sub_8095374
	cmp r5, r0
	blt _0809567A
	movs r0, #0
_080956A0:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80956A8
sub_80956A8: @ 0x080956A8
	push {r4, r5, lr}
	movs r5, #0
	b _080956C6
_080956AE:
	adds r0, r5, #0
	bl sub_8095354
	ldr r0, [r0]
	ldrb r4, [r0, #4]
	bl sub_8095394
	cmp r4, r0
	bne _080956C4
	adds r0, r5, #0
	b _080956D0
_080956C4:
	adds r5, #1
_080956C6:
	bl sub_8095374
	cmp r5, r0
	blt _080956AE
	movs r0, #0
_080956D0:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80956D8
sub_80956D8: @ 0x080956D8
	push {r4, lr}
	ldr r0, _08095740  @ gUnknown_020111CC
	bl InitUnitStack
	movs r4, #1
_080956E2:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _08095704
	ldr r0, [r2]
	cmp r0, #0
	beq _08095704
	ldr r0, [r2, #0xc]
	ldr r1, _08095744  @ 0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _08095704
	adds r0, r2, #0
	bl PushUnit
_08095704:
	adds r4, #1
	cmp r4, #0x3f
	ble _080956E2
	movs r4, #1
_0809570C:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0809572E
	ldr r0, [r2]
	cmp r0, #0
	beq _0809572E
	ldr r0, [r2, #0xc]
	ldr r1, _08095744  @ 0x0001000C
	ands r0, r1
	cmp r0, #0
	beq _0809572E
	adds r0, r2, #0
	bl PushUnit
_0809572E:
	adds r4, #1
	cmp r4, #0x3f
	ble _0809570C
	bl LoadPlayerUnitsFromUnitStack
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08095740: .4byte gUnknown_020111CC
_08095744: .4byte 0x0001000C

	THUMB_FUNC_START SortPlayerUnitsForPrepScreen
SortPlayerUnitsForPrepScreen: @ 0x08095748
	push {r4, r5, r6, r7, lr}
	bl GetChapterAllyUnitCount
	adds r7, r0, #0
	movs r6, #0
	ldr r0, _0809580C  @ gUnknown_020111CC
	bl InitUnitStack
	movs r5, #1
_0809575A:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _08095794
	ldr r0, [r4]
	cmp r0, #0
	beq _08095794
	ldr r0, [r4, #0xc]
	ldr r1, _08095810  @ 0xFDFFFFFF
	ands r0, r1
	str r0, [r4, #0xc]
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08095794
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08095794
	adds r0, r4, #0
	bl PushUnit
_08095794:
	adds r5, #1
	cmp r5, #0x3f
	ble _0809575A
	movs r5, #1
_0809579C:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _080957CE
	ldr r0, [r4]
	cmp r0, #0
	beq _080957CE
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080957C8
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080957CE
_080957C8:
	adds r0, r4, #0
	bl PushUnit
_080957CE:
	adds r5, #1
	cmp r5, #0x3f
	ble _0809579C
	bl LoadPlayerUnitsFromUnitStack
	movs r5, #1
_080957DA:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _08095832
	ldr r0, [r4]
	cmp r0, #0
	beq _08095832
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08095832
	adds r0, r4, #0
	bl SomeLeftoverFunctionThatReturns0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08095818
	ldr r0, [r4, #0xc]
	ldr r1, _08095814  @ gUnknown_02000008
	b _0809582E
	.align 2, 0
_0809580C: .4byte gUnknown_020111CC
_08095810: .4byte 0xFDFFFFFF
_08095814: .4byte gUnknown_02000008
_08095818:
	cmp r7, r6
	ble _0809582A
	ldr r0, [r4, #0xc]
	movs r1, #9
	negs r1, r1
	ands r0, r1
	str r0, [r4, #0xc]
	adds r6, #1
	b _08095832
_0809582A:
	ldr r0, [r4, #0xc]
	movs r1, #8
_0809582E:
	orrs r0, r1
	str r0, [r4, #0xc]
_08095832:
	adds r5, #1
	cmp r5, #0x3f
	ble _080957DA
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095840
sub_8095840: @ 0x08095840
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	movs r4, #1
_08095848:
	adds r0, r4, #0
	bl GetUnit
	adds r5, r0, #0
	adds r4, #1
	mov r8, r4
	cmp r5, #0
	beq _080958AC
	ldr r0, [r5]
	cmp r0, #0
	beq _080958AC
	movs r7, #0
	ldr r0, [r5, #0xc]
	movs r1, #8
	orrs r0, r1
	str r0, [r5, #0xc]
	adds r0, r5, #0
	bl GetUnitItemCount
	cmp r7, r0
	bge _080958A2
	adds r4, r5, #0
	adds r4, #0x1e
	adds r6, r0, #0
_08095878:
	ldrh r0, [r4]
	bl GetItemIndex
	cmp r0, #0xb7
	beq _08095894
	cmp r0, #0xb7
	bgt _08095890
	cmp r0, #0x84
	bgt _0809589A
	cmp r0, #0x81
	blt _0809589A
	b _08095894
_08095890:
	cmp r0, #0xcc
	bne _0809589A
_08095894:
	movs r0, #0
	strh r0, [r4]
	movs r7, #1
_0809589A:
	adds r4, #2
	subs r6, #1
	cmp r6, #0
	bne _08095878
_080958A2:
	cmp r7, #0
	beq _080958AC
	adds r0, r5, #0
	bl UnitRemoveInvalidItems
_080958AC:
	mov r4, r8
	cmp r4, #0x3f
	ble _08095848
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80958BC
sub_80958BC: @ 0x080958BC
	push {r4, r5, r6, lr}
	movs r6, #0
	movs r5, #1
_080958C2:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _080958EA
	ldr r0, [r4]
	cmp r0, #0
	beq _080958EA
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080958EA
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_8095364
	adds r6, #1
_080958EA:
	adds r5, #1
	cmp r5, #0x3f
	ble _080958C2
	adds r0, r6, #0
	bl sub_8095384
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80958FC
sub_80958FC: @ 0x080958FC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	b _08095918
_08095904:
	adds r0, r4, #0
	bl sub_8095354
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, r5
	bne _08095916
	adds r0, r4, #0
	b _08095922
_08095916:
	adds r4, #1
_08095918:
	bl sub_8095374
	cmp r4, r0
	blt _08095904
	movs r0, #0
_08095922:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8095928
sub_8095928: @ 0x08095928
	push {r4, lr}
	bl SMS_ClearUsageTable
	movs r4, #0
	b _0809595E
_08095932:
	adds r0, r4, #0
	bl sub_8095354
	adds r2, r0, #0
	ldr r1, [r2, #0xc]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	bne _0809594C
	movs r0, #3
	negs r0, r0
	ands r1, r0
	b _08095950
_0809594C:
	movs r0, #0xa
	orrs r1, r0
_08095950:
	str r1, [r2, #0xc]
	adds r0, r2, #0
	bl GetUnitSMSId
	bl SMS_RegisterUsage
	adds r4, #1
_0809595E:
	bl sub_8095374
	cmp r4, r0
	blt _08095932
	bl SMS_FlushIndirect
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095970
sub_8095970: @ 0x08095970
	push {r4, r5, r6, lr}
	movs r5, #0
	bl GetChapterAllyUnitCount
	adds r6, r0, #0
	movs r4, #0
	b _080959A0
_0809597E:
	adds r0, r4, #0
	bl sub_8095354
	adds r2, r0, #0
	ldr r1, [r2, #0xc]
	movs r3, #8
	adds r0, r1, #0
	ands r0, r3
	cmp r0, #0
	bne _0809599E
	cmp r5, r6
	blt _0809599C
	orrs r1, r3
	str r1, [r2, #0xc]
	b _0809599E
_0809599C:
	adds r5, #1
_0809599E:
	adds r4, #1
_080959A0:
	bl sub_8095374
	cmp r4, r0
	blt _0809597E
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80959B4
sub_80959B4: @ 0x080959B4
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2b
	movs r0, #0
	strb r0, [r1]
	subs r1, #2
	strb r0, [r1]
	movs r6, #0
	adds r7, r1, #0
	b _080959FC
_080959CA:
	adds r0, r6, #0
	bl sub_8095354
	adds r3, r0, #0
	ldr r0, [r3, #0xc]
	movs r5, #8
	ands r0, r5
	cmp r0, #0
	bne _080959F4
	adds r2, r4, #0
	adds r2, #0x2b
	adds r1, r4, #0
	adds r1, #0x2a
	ldrb r0, [r2]
	ldrb r1, [r1]
	cmp r0, r1
	bcc _080959F0
	str r5, [r3, #0xc]
	b _080959F4
_080959F0:
	adds r0, #1
	strb r0, [r2]
_080959F4:
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	adds r6, #1
_080959FC:
	bl sub_8095374
	cmp r6, r0
	blt _080959CA
	adds r2, r4, #0
	adds r2, #0x29
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r2, [r2]
	ldrb r1, [r0]
	cmp r2, r1
	bcs _08095A16
	strb r2, [r0]
_08095A16:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095A1C
sub_8095A1C: @ 0x08095A1C
	push {lr}
	ldr r0, _08095A34  @ gUnknown_08A006E4
	bl Proc_DeleteAllWithScript
	movs r0, #0
	movs r1, #0
	movs r2, #0xa
	bl sub_8086BB8
	pop {r0}
	bx r0
	.align 2, 0
_08095A34: .4byte gUnknown_08A006E4

	THUMB_FUNC_START EndBG3Slider_
EndBG3Slider_: @ 0x08095A38
	push {lr}
	bl EndBG3Slider
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095A44
sub_8095A44: @ 0x08095A44
	push {r4, r5, lr}
	sub sp, #0x20
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, _08095AA0  @ 0x06010000
	adds r2, r2, r0
	mov r0, sp
	adds r1, r2, #0
	adds r2, r4, #0
	bl InitSomeOtherGraphicsRelatedStruct
	ldr r0, _08095AA4  @ gUnknown_0859EF00
	adds r4, #0x10
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	add r4, sp, #0x18
	adds r0, r4, #0
	bl Text_Init3
	mov r0, sp
	bl SetFont
	movs r0, #0
	bl SetFontGlyphSet
	adds r0, r4, #0
	movs r1, #0
	bl Text_80046B4
	bl GetChapterThing
	adds r5, r4, #0
	cmp r0, #2
	beq _08095AAC
	ldr r0, _08095AA8  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x8a
	ldrh r0, [r0]
	b _08095AB0
	.align 2, 0
_08095AA0: .4byte 0x06010000
_08095AA4: .4byte gUnknown_0859EF00
_08095AA8: .4byte gUnknown_0202BCF0
_08095AAC:
	movs r0, #0xcf
	lsls r0, r0, #1
_08095AB0:
	bl GetStringFromIndex
	adds r4, r0, #0
	movs r0, #0x60
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #0
	adds r3, r4, #0
	bl Text_InsertString
	movs r0, #0
	bl SetFont
	add sp, #0x20
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095AD8
sub_8095AD8: @ 0x08095AD8
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl sub_80953C0
	movs r0, #0
	str r0, [r4, #0x40]
	strh r0, [r4, #0x3c]
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08095AFA
	adds r1, r4, #0
	adds r1, #0x2a
	movs r0, #5
	b _08095B02
_08095AFA:
	bl GetChapterAllyUnitCount
	adds r1, r4, #0
	adds r1, #0x2a
_08095B02:
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x30
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	subs r0, #9
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095B30
sub_8095B30: @ 0x08095B30
	push {r4, r5, lr}
	ldr r5, _08095B5C  @ gUnknown_020111A4
	movs r4, #4
_08095B36:
	adds r0, r5, #0
	bl Text_Clear
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08095B36
	ldr r0, _08095B60  @ gUnknown_02023E42
	movs r1, #0xf
	movs r2, #0xa
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08095B5C: .4byte gUnknown_020111A4
_08095B60: .4byte gUnknown_02023E42

	THUMB_FUNC_START sub_8095B64
sub_8095B64: @ 0x08095B64
	push {r4, lr}
	ldr r4, _08095B80  @ gUnknown_020111A4
	bl GetStringFromIndex
_08095B6C:
	adds r1, r0, #0
_08095B6E:
	ldrb r0, [r1]
	cmp r0, #0
	beq _08095B8C
	cmp r0, #1
	bne _08095B84
	adds r4, #8
	adds r1, #1
	b _08095B6E
	.align 2, 0
_08095B80: .4byte gUnknown_020111A4
_08095B84:
	adds r0, r4, #0
	bl Text_AppendChar
	b _08095B6C
_08095B8C:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095B94
sub_8095B94: @ 0x08095B94
	push {r4, r5, lr}
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	negs r1, r0
	orrs r1, r0
	lsrs r1, r1, #0x1f
	movs r5, #0
	negs r1, r1
	adds r4, r1, #7
_08095BAA:
	lsls r0, r5, #3
	ldr r1, _08095BD0  @ gUnknown_020111A4
	adds r0, r0, r1
	lsls r1, r4, #6
	ldr r2, _08095BD4  @ gUnknown_02023CC2
	adds r1, r1, r2
	bl Text_Draw
	adds r4, #2
	adds r5, #1
	cmp r5, #4
	ble _08095BAA
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08095BD0: .4byte gUnknown_020111A4
_08095BD4: .4byte gUnknown_02023CC2

	THUMB_FUNC_START sub_8095BD8
sub_8095BD8: @ 0x08095BD8
	push {lr}
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bl sub_8095B30
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095BE8
sub_8095BE8: @ 0x08095BE8
	push {lr}
	ldr r0, [r0, #0x58]
	bl sub_8095B64
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095BF4
sub_8095BF4: @ 0x08095BF4
	push {lr}
	bl sub_8095B94
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095C00
sub_8095C00: @ 0x08095C00
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r5, _08095C28  @ gUnknown_08A1826C
	adds r0, r5, #0
	bl Proc_Find
	cmp r0, #0
	beq _08095C16
	bl Proc_Delete
_08095C16:
	adds r0, r5, #0
	adds r1, r4, #0
	bl Proc_Create
	str r6, [r0, #0x58]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08095C28: .4byte gUnknown_08A1826C

	THUMB_FUNC_START sub_8095C2C
sub_8095C2C: @ 0x08095C2C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80AD2D4
	bl sub_8096C20
	bl EndBG3Slider_
	bl sub_809710C
	adds r4, #0x2d
	strb r0, [r4]
	bl sub_80972B0
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095C50
sub_8095C50: @ 0x08095C50
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, _08095C78  @ gUnknown_08A1AC88
	ldr r1, _08095C7C  @ 0x06010000
	adds r2, r2, r1
	adds r1, r2, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _08095C80  @ gUnknown_08A1B174
	adds r4, #0x10
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08095C78: .4byte gUnknown_08A1AC88
_08095C7C: .4byte 0x06010000
_08095C80: .4byte gUnknown_08A1B174

	THUMB_FUNC_START sub_8095C84
sub_8095C84: @ 0x08095C84
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r0, _08095E00  @ gUnknown_08A181E8
	bl SetupBackgrounds
	bl Font_InitForUIDefault
	bl LoadUiFrameGraphics
	movs r0, #0
	movs r1, #0xe
	bl LoadDialogueBoxGfx
	ldr r2, _08095E04  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bl LoadObjUIGfx
	bl SMS_ClearUsageTable
	bl sub_80958BC
	adds r0, r7, #0
	bl sub_80959B4
	bl sub_80956D8
	ldr r0, _08095E08  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _08095E0C  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _08095E10  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r5, _08095E14  @ gUnknown_020111A4
	movs r4, #4
_08095CF2:
	adds r0, r5, #0
	movs r1, #0xe
	bl Text_Init
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08095CF2
	movs r0, #0x35
	adds r0, r0, r7
	mov r8, r0
	ldr r5, _08095E18  @ gUnknown_02011184
	movs r4, #3
_08095D0C:
	adds r0, r5, #0
	movs r1, #8
	bl Text_Init
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08095D0C
	ldr r0, _08095E1C  @ gUnknown_0201117C
	movs r1, #0xa
	bl Text_Init
	ldr r0, _08095E20  @ gUnknown_08A1A4C8
	ldr r1, _08095E24  @ 0x06014800
	bl CopyDataWithPossibleUncomp
	ldr r0, _08095E28  @ gUnknown_08A1D510
	ldr r1, _08095E2C  @ 0x06016000
	bl CopyDataWithPossibleUncomp
	ldr r0, _08095E30  @ gUnknown_08A1B154
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x40
	bl CopyToPaletteBuffer
	movs r0, #0xe0
	lsls r0, r0, #7
	movs r1, #6
	bl sub_8095C50
	ldr r0, _08095E34  @ gUnknown_08A1D4C8
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	bl EnablePaletteSync
	ldr r3, _08095E04  @ gLCDControlBuffer
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	ldrb r1, [r3, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	adds r0, r7, #0
	bl sub_8095524
	movs r0, #0xf
	bl BG_EnableSyncByMask
	bl SetDefaultColorEffects
	adds r0, r7, #0
	bl sub_8096BFC
	bl sub_8095A1C
	ldr r0, _08095E38  @ gUiFramePaletteB
	movs r1, #0x40
	movs r2, #0x60
	bl CopyToPaletteBuffer
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08095E48
	ldr r0, _08095E3C  @ gUnknown_08A1B698
	ldr r4, _08095E40  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _08095E44  @ gUnknown_020235EA
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl CallARM_FillTileRect
	b _08095E76
	.align 2, 0
_08095E00: .4byte gUnknown_08A181E8
_08095E04: .4byte gLCDControlBuffer
_08095E08: .4byte gBG0TilemapBuffer
_08095E0C: .4byte gBG1TilemapBuffer
_08095E10: .4byte gBG2TilemapBuffer
_08095E14: .4byte gUnknown_020111A4
_08095E18: .4byte gUnknown_02011184
_08095E1C: .4byte gUnknown_0201117C
_08095E20: .4byte gUnknown_08A1A4C8
_08095E24: .4byte 0x06014800
_08095E28: .4byte gUnknown_08A1D510
_08095E2C: .4byte 0x06016000
_08095E30: .4byte gUnknown_08A1B154
_08095E34: .4byte gUnknown_08A1D4C8
_08095E38: .4byte gUiFramePaletteB
_08095E3C: .4byte gUnknown_08A1B698
_08095E40: .4byte gUnknown_02020188
_08095E44: .4byte gUnknown_020235EA
_08095E48:
	ldr r0, _08095EAC  @ gUnknown_08A1B658
	ldr r5, _08095EB0  @ gUnknown_02020188
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	ldr r4, _08095EB4  @ gUnknown_02023548
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl CallARM_FillTileRect
	ldr r0, _08095EB8  @ gUnknown_08A1B698
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	adds r4, #0xe2
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl CallARM_FillTileRect
_08095E76:
	movs r0, #0xb0
	lsls r0, r0, #7
	movs r1, #0xb
	bl sub_8095A44
	adds r0, r7, #0
	bl sub_80AD1AC
	movs r0, #0xd0
	lsls r0, r0, #7
	bl sub_80AD1D0
	bl sub_809710C
	mov r1, r8
	strb r0, [r1]
	bl sub_8095024
	bl sub_8095B64
	bl sub_8095B94
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095EAC: .4byte gUnknown_08A1B658
_08095EB0: .4byte gUnknown_02020188
_08095EB4: .4byte gUnknown_02023548
_08095EB8: .4byte gUnknown_08A1B698

	THUMB_FUNC_START sub_8095EBC
sub_8095EBC: @ 0x08095EBC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
	ldr r2, _08095F28  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r4, #1
_08095EE2:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _08095F06
	ldr r0, [r1]
	cmp r0, #0
	beq _08095F06
	adds r0, r1, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08095F06
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08095F06:
	adds r4, #1
	cmp r4, #0x3f
	ble _08095EE2
	cmp r5, #0
	bne _08095F20
	adds r1, r6, #0
	adds r1, #0x36
	movs r0, #1
	strb r0, [r1]
	adds r0, r6, #0
	movs r1, #6
	bl Proc_GotoLabel
_08095F20:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08095F28: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_8095F2C
sub_8095F2C: @ 0x08095F2C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_809710C
	adds r6, r0, #0
	adds r4, r5, #0
	adds r4, #0x35
	ldrb r0, [r4]
	cmp r0, r6
	beq _08095F4C
	bl sub_8095024
	adds r1, r5, #0
	bl sub_8095C00
	strb r6, [r4]
_08095F4C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8095F54
sub_8095F54: @ 0x08095F54
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	ldr r5, _08095FCC  @ gUnknown_02011184
	adds r0, #0x2f
	ldrb r0, [r0]
	bl sub_80950C4
	adds r3, r0, #0
	lsls r3, r3, #1
	adds r3, #2
	movs r0, #1
	str r0, [sp]
	movs r0, #3
	movs r1, #5
	movs r2, #9
	bl DrawUiFrame2
	movs r4, #0
	movs r6, #0xc0
	lsls r6, r6, #1
_08095F7E:
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	asrs r0, r4
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _08095FB6
	adds r0, r5, #0
	bl Text_Clear
	ldr r1, _08095FD0  @ gUnknown_08A196BC
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bl GetStringFromIndex
	ldr r1, _08095FD4  @ gUnknown_02022CB0
	adds r1, r6, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r3, #0
	bl DrawTextInline
	adds r5, #8
	adds r6, #0x80
_08095FB6:
	adds r4, #1
	cmp r4, #3
	ble _08095F7E
	movs r0, #3
	bl BG_EnableSyncByMask
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095FCC: .4byte gUnknown_02011184
_08095FD0: .4byte gUnknown_08A196BC
_08095FD4: .4byte gUnknown_02022CB0

	THUMB_FUNC_START sub_8095FD8
sub_8095FD8: @ 0x08095FD8
	push {lr}
	ldr r0, _08095FFC  @ gUnknown_02022DEE
	movs r1, #8
	movs r2, #9
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _08096000  @ gUnknown_020235EE
	movs r1, #8
	movs r2, #9
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #3
	bl BG_EnableSyncByMask
	pop {r0}
	bx r0
	.align 2, 0
_08095FFC: .4byte gUnknown_02022DEE
_08096000: .4byte gUnknown_020235EE

	THUMB_FUNC_START sub_8096004
sub_8096004: @ 0x08096004
	push {r4, lr}
	adds r4, r0, #0
	bl sub_809735C
	adds r0, r4, #0
	bl sub_8095F54
	adds r4, #0x2e
	ldrb r1, [r4]
	lsls r1, r1, #4
	adds r1, #0x30
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x1c
	movs r2, #7
	bl sub_80AD51C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809602C
sub_809602C: @ 0x0809602C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r7, r0, #0
	add r1, sp, #4
	ldr r0, _08096080  @ gUnknown_08205BC0
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	adds r5, r7, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	mov r9, r0
	movs r1, #0x1c
	mov sl, r1
	lsls r0, r0, #4
	adds r6, r0, #0
	adds r6, #0x30
	adds r4, r7, #0
	adds r4, #0x34
	ldrb r2, [r4]
	mov r8, r2
	cmp r2, #0
	beq _08096088
	ldr r0, _08096084  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	bne _08096076
	b _08096184
_08096076:
	bl CloseHelpBox
	movs r0, #0
	strb r0, [r4]
	b _08096246
	.align 2, 0
_08096080: .4byte gUnknown_08205BC0
_08096084: .4byte gKeyStatusPtr
_08096088:
	ldr r0, _080960DC  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080960E4
	ldr r0, _080960E0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080960A8
	movs r0, #0x6a
	bl m4aSongNumStart
_080960A8:
	ldrb r0, [r5]
	adds r1, r7, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	bl sub_8095094
	cmp r0, #2
	bne _080960CA
	movs r2, #0x80
	lsls r2, r2, #1
	mov r3, r8
	str r3, [sp]
	movs r0, #0x37
	adds r1, r2, #0
	movs r3, #0x20
	bl sub_80029E8
_080960CA:
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #4
	strb r0, [r1]
	adds r0, r7, #0
	movs r1, #8
	bl Proc_GotoLabel
	b _08096246
	.align 2, 0
_080960DC: .4byte gKeyStatusPtr
_080960E0: .4byte gUnknown_0202BCF0
_080960E4:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08096110
	movs r0, #1
	strb r0, [r4]
	ldrb r0, [r5]
	adds r1, r7, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	bl sub_8095094
	lsls r0, r0, #2
	add r0, sp
	adds r0, #4
	ldr r2, [r0]
	movs r0, #0x1c
	adds r1, r6, #0
	bl StartHelpBox
	b _08096246
_08096110:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08096184
	adds r0, r7, #0
	bl sub_8095FD8
	ldr r0, _08096170  @ gUnknown_08A1B658
	ldr r5, _08096174  @ gUnknown_02020188
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	ldr r4, _08096178  @ gUnknown_02023548
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl CallARM_FillTileRect
	ldr r0, _0809617C  @ gUnknown_08A1B698
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	adds r4, #0xe2
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl CallARM_FillTileRect
	movs r0, #1
	movs r1, #6
	bl sub_8097200
	ldr r0, _08096180  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08096166
	movs r0, #0x6b
	bl m4aSongNumStart
_08096166:
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	b _08096246
	.align 2, 0
_08096170: .4byte gUnknown_08A1B658
_08096174: .4byte gUnknown_02020188
_08096178: .4byte gUnknown_02023548
_0809617C: .4byte gUnknown_08A1B698
_08096180: .4byte gUnknown_0202BCF0
_08096184:
	ldr r0, _080961E0  @ gKeyStatusPtr
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r3, #0x40
	adds r0, r3, #0
	ands r0, r1
	adds r5, r7, #0
	adds r5, #0x2e
	cmp r0, #0
	beq _080961B6
	ldrb r0, [r5]
	cmp r0, #0
	bne _080961B2
	ldrh r1, [r2, #8]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _080961B6
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	bl sub_80950C4
_080961B2:
	subs r0, #1
	strb r0, [r5]
_080961B6:
	ldr r6, _080961E0  @ gKeyStatusPtr
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r4, #0x80
	mov r8, r4
	mov r0, r8
	ands r0, r1
	cmp r0, #0
	beq _080961F4
	ldrb r4, [r5]
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	bl sub_80950C4
	subs r0, #1
	cmp r4, r0
	bge _080961E4
	ldrb r0, [r5]
	adds r0, #1
	b _080961F2
	.align 2, 0
_080961E0: .4byte gKeyStatusPtr
_080961E4:
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	mov r0, r8
	ands r0, r1
	cmp r0, #0
	beq _080961F4
	movs r0, #0
_080961F2:
	strb r0, [r5]
_080961F4:
	ldrb r2, [r5]
	cmp r9, r2
	beq _08096246
	lsls r0, r2, #4
	adds r6, r0, #0
	adds r6, #0x30
	adds r0, r7, #0
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r0, #0
	beq _08096226
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	adds r0, r2, #0
	bl sub_8095094
	lsls r0, r0, #2
	add r0, sp
	adds r0, #4
	ldr r2, [r0]
	mov r0, sl
	adds r1, r6, #0
	bl StartHelpBox
_08096226:
	movs r3, #0x80
	lsls r3, r3, #3
	mov r0, sl
	adds r1, r6, #0
	movs r2, #7
	bl sub_80AD51C
	ldr r0, _08096258  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08096246
	movs r0, #0x66
	bl m4aSongNumStart
_08096246:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096258: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_809625C
sub_809625C: @ 0x0809625C
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #1
_08096262:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0809627C
	ldr r0, [r2]
	cmp r0, #0
	beq _0809627C
	ldr r0, [r2, #0xc]
	ldr r1, _08096290  @ 0xFDFFFFFF
	ands r0, r1
	str r0, [r2, #0xc]
_0809627C:
	adds r4, #1
	cmp r4, #0x3f
	ble _08096262
	adds r1, r5, #0
	adds r1, #0x36
	movs r0, #1
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08096290: .4byte 0xFDFFFFFF

	THUMB_FUNC_START sub_8096294
sub_8096294: @ 0x08096294
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl EndBG3Slider_
	bl sub_8096C20
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	movs r0, #1
	bl sub_8001F48
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	beq _080962D8
	adds r0, r4, #0
	bl nullsub_20
_080962D8:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80962E0
sub_80962E0: @ 0x080962E0
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80956D8
	adds r4, #0x36
	ldrb r0, [r4]
	cmp r0, #0
	beq _080962F6
	bl sub_8034278
	b _08096304
_080962F6:
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08096304
	bl sub_8042EA8
_08096304:
	bl sub_801240C
	bl SMS_ClearUsageTable
	bl RefreshEntityBmMaps
	bl SMS_UpdateFromGameData
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809631C
sub_809631C: @ 0x0809631C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8095C2C
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #4
	bhi _08096384
	lsls r0, r0, #2
	ldr r1, _0809633C  @ _08096340
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0809633C: .4byte _08096340
_08096340: @ jump table
	.4byte _08096364 @ case 0
	.4byte _0809635C @ case 1
	.4byte _0809637E @ case 2
	.4byte _08096374 @ case 3
	.4byte _08096354 @ case 4
_08096354:
	adds r0, r4, #0
	bl sub_808E79C
	b _08096384
_0809635C:
	adds r0, r4, #0
	bl sub_8099F68
	b _08096384
_08096364:
	ldr r0, _08096370  @ gUnknown_08A18E8C
	adds r1, r4, #0
	bl Proc_CreateBlockingChild
	b _08096384
	.align 2, 0
_08096370: .4byte gUnknown_08A18E8C
_08096374:
	movs r0, #2
	adds r1, r4, #0
	bl sub_80A0944
	b _08096384
_0809637E:
	adds r0, r4, #0
	bl sub_803410C
_08096384:
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8096390
sub_8096390: @ 0x08096390
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x33
	ldrb r0, [r5]
	cmp r0, #3
	bne _080963AC
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x80
	movs r2, #0x20
	movs r3, #0
	bl ISuspectThisToBeMusicRelated_8002730
_080963AC:
	ldrb r0, [r5]
	subs r0, #1
	cmp r0, #4
	bhi _080963F4
	lsls r0, r0, #2
	ldr r1, _080963C0  @ _080963C4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080963C0: .4byte _080963C4
_080963C4: @ jump table
	.4byte _080963EC @ case 0
	.4byte _080963EC @ case 1
	.4byte _080963E2 @ case 2
	.4byte _080963D8 @ case 3
	.4byte _080963EC @ case 4
_080963D8:
	adds r0, r4, #0
	movs r1, #9
	bl Proc_GotoLabel
	b _080963F4
_080963E2:
	adds r0, r4, #0
	movs r1, #7
	bl Proc_GotoLabel
	b _080963F4
_080963EC:
	adds r0, r4, #0
	movs r1, #9
	bl Proc_GotoLabel
_080963F4:
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #0
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8096404
sub_8096404: @ 0x08096404
	ldr r2, _08096420  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_08096420: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_8096424
sub_8096424: @ 0x08096424
	push {lr}
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08096438
	bl AddSkipThread2
	bl BMapDispSuspend
_08096438:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809643C
sub_809643C: @ 0x0809643C
	push {lr}
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08096450
	bl BMapDispResume
	bl SubSkipThread2
_08096450:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8096454
sub_8096454: @ 0x08096454
	push {lr}
	ldr r0, _08096464  @ gUnknown_08A1829C
	movs r1, #3
	bl Proc_Create
	pop {r0}
	bx r0
	.align 2, 0
_08096464: .4byte gUnknown_08A1829C

	THUMB_FUNC_START sub_8096468
sub_8096468: @ 0x08096468
	push {lr}
	ldr r0, _08096480  @ gUnknown_08A1829C
	movs r1, #3
	bl Proc_Create
	bl sub_8095840
	bl sub_80952D4
	pop {r0}
	bx r0
	.align 2, 0
_08096480: .4byte gUnknown_08A1829C

	THUMB_FUNC_START sub_8096484
sub_8096484: @ 0x08096484
	push {lr}
	bl HasConvoyAccess
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8096494
sub_8096494: @ 0x08096494
	push {lr}
	sub sp, #4
	bl sub_808F270
	bl sub_8010E50
	bl APProc_DeleteAll
	ldr r3, _080964F0  @ gLCDControlBuffer
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080964F0: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80964F4
sub_80964F4: @ 0x080964F4
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0x80
	lsls r0, r0, #1
	bl GetUnitFromCharId
	adds r5, r0, #0
	cmp r5, #0
	bne _0809650E
	adds r0, r4, #0
	bl Proc_Delete
	b _08096556
_0809650E:
	bl GetThread2SkipStack
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x4c
	movs r4, #0
	strh r0, [r1]
	ldr r2, _0809655C  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	subs r1, #0x80
	adds r0, r5, #0
	movs r2, #0
	bl sub_802F598
	ldr r1, _08096560  @ gBattleStats
	movs r0, #0x88
	lsls r0, r0, #1
	strh r0, [r1]
	ldr r0, _08096564  @ gBattleActor
	adds r0, #0x4a
	strh r4, [r0]
	ldr r0, _08096568  @ gBattleTarget
	adds r0, #0x4a
	strh r4, [r0]
	bl BeginBattleAnimations
_08096556:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809655C: .4byte gLCDControlBuffer
_08096560: .4byte gBattleStats
_08096564: .4byte gBattleActor
_08096568: .4byte gBattleTarget

	THUMB_FUNC_START sub_809656C
sub_809656C: @ 0x0809656C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r4, [r0, r1]
	bl GetThread2SkipStack
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r4, r0
	bne _08096588
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_08096588:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8096590
sub_8096590: @ 0x08096590
	push {r4, lr}
	sub sp, #4
	movs r4, #0x80
	lsls r4, r4, #1
	adds r0, r4, #0
	bl GetUnitFromCharId
	adds r1, r0, #0
	cmp r1, #0
	beq _080965A8
	movs r0, #0xff
	strb r0, [r1, #9]
_080965A8:
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	ldr r2, _080965EC  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	str r0, [sp]
	movs r0, #0x34
	adds r1, r4, #0
	adds r2, r4, #0
	movs r3, #0x20
	bl sub_80029E8
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080965EC: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80965F0
sub_80965F0: @ 0x080965F0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl sub_808F270
	bl sub_8010E50
	bl APProc_DeleteAll
	ldr r3, _08096660  @ gLCDControlBuffer
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	adds r0, r4, #0
	bl sub_80ADDD4
	ldr r0, _08096664  @ gUnknown_08A184B4
	adds r1, r4, #0
	bl Proc_CreateBlockingChild
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08096660: .4byte gLCDControlBuffer
_08096664: .4byte gUnknown_08A184B4

	THUMB_FUNC_START sub_8096668
sub_8096668: @ 0x08096668
	push {lr}
	sub sp, #4
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0
	str r0, [sp]
	movs r2, #0
	movs r3, #0x20
	bl sub_80029E8
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_START NewPrepScreenTraineePromotionManager
NewPrepScreenTraineePromotionManager: @ 0x08096684
	push {lr}
	ldr r0, _08096694  @ gUnknown_08A184F4
	movs r1, #3
	bl Proc_Create
	pop {r0}
	bx r0
	.align 2, 0
_08096694: .4byte gUnknown_08A184F4

	THUMB_FUNC_START PrepScreenTraineePromotionManagerExists
PrepScreenTraineePromotionManagerExists: @ 0x08096698
	push {lr}
	ldr r0, _080966AC  @ gUnknown_08A184F4
	bl Proc_Find
	cmp r0, #0
	beq _080966A6
	movs r0, #1
_080966A6:
	pop {r1}
	bx r1
	.align 2, 0
_080966AC: .4byte gUnknown_08A184F4

	THUMB_FUNC_START sub_80966B0
sub_80966B0: @ 0x080966B0
	push {lr}
	ldr r0, _080966C4  @ gUnknown_08A1829C
	bl Proc_Find
	cmp r0, #0
	beq _080966BE
	movs r0, #1
_080966BE:
	pop {r1}
	bx r1
	.align 2, 0
_080966C4: .4byte gUnknown_08A1829C

	THUMB_FUNC_START sub_80966C8
sub_80966C8: @ 0x080966C8
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldr r3, _080966EC  @ gUnknown_08A1856E
	str r2, [sp]
	movs r0, #4
	adds r1, r4, #0
	adds r2, r5, #0
	bl RegisterObjectAttributes
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080966EC: .4byte gUnknown_08A1856E

	THUMB_FUNC_START sub_80966F0
sub_80966F0: @ 0x080966F0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	mov r9, r1
	adds r4, r2, #0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r8, r3
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	beq _08096724
	subs r6, #4
	adds r1, r6, #0
	adds r1, #0x40
	ldr r0, _08096750  @ gUnknown_08A18614
	ldr r3, [r0, #0x28]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl RegisterObjectAttributes
_08096724:
	ldr r3, _08096754  @ gUnknown_08A18582
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, r9
	bl RegisterObjectAttributes
	asrs r7, r4, #1
	cmp r7, #9
	bgt _08096758
	adds r1, r6, #0
	adds r1, #0x30
	ldr r0, _08096750  @ gUnknown_08A18614
	ldr r3, [r0, #0x2c]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl RegisterObjectAttributes
	b _0809677A
	.align 2, 0
_08096750: .4byte gUnknown_08A18614
_08096754: .4byte gUnknown_08A18582
_08096758:
	adds r5, r6, #0
	adds r5, #0x30
	ldr r4, _080967AC  @ gUnknown_08A18614
	adds r0, r7, #0
	movs r1, #0xa
	bl __divsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r9
	bl RegisterObjectAttributes
_0809677A:
	adds r5, r6, #0
	adds r5, #0x38
	ldr r4, _080967AC  @ gUnknown_08A18614
	adds r0, r7, #0
	movs r1, #0xa
	bl __modsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r9
	bl RegisterObjectAttributes
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080967AC: .4byte gUnknown_08A18614

	THUMB_FUNC_START sub_80967B0
sub_80967B0: @ 0x080967B0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	mov r9, r1
	adds r4, r2, #0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r8, r3
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	beq _080967E4
	subs r6, #4
	adds r1, r6, #0
	adds r1, #0x40
	ldr r0, _08096810  @ gUnknown_08A18614
	ldr r3, [r0, #0x28]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl RegisterObjectAttributes
_080967E4:
	ldr r3, _08096814  @ gUnknown_08A18590
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, r9
	bl RegisterObjectAttributes
	asrs r7, r4, #1
	cmp r7, #9
	bgt _08096818
	adds r1, r6, #0
	adds r1, #0x30
	ldr r0, _08096810  @ gUnknown_08A18614
	ldr r3, [r0, #0x2c]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl RegisterObjectAttributes
	b _0809683A
	.align 2, 0
_08096810: .4byte gUnknown_08A18614
_08096814: .4byte gUnknown_08A18590
_08096818:
	adds r5, r6, #0
	adds r5, #0x30
	ldr r4, _0809686C  @ gUnknown_08A18614
	adds r0, r7, #0
	movs r1, #0xa
	bl __divsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r9
	bl RegisterObjectAttributes
_0809683A:
	adds r5, r6, #0
	adds r5, #0x38
	ldr r4, _0809686C  @ gUnknown_08A18614
	adds r0, r7, #0
	movs r1, #0xa
	bl __modsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r9
	bl RegisterObjectAttributes
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809686C: .4byte gUnknown_08A18614

	THUMB_FUNC_START sub_8096870
sub_8096870: @ 0x08096870
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	mov r9, r1
	adds r4, r2, #0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r8, r3
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	beq _080968A4
	subs r6, #4
	adds r1, r6, #0
	adds r1, #0x3c
	ldr r0, _080968D0  @ gUnknown_08A18614
	ldr r3, [r0, #0x28]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl RegisterObjectAttributes
_080968A4:
	adds r1, r6, #4
	ldr r3, _080968D4  @ gUnknown_08A1859E
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl RegisterObjectAttributes
	asrs r7, r4, #1
	cmp r7, #9
	bgt _080968D8
	adds r1, r6, #0
	adds r1, #0x2c
	ldr r0, _080968D0  @ gUnknown_08A18614
	ldr r3, [r0, #0x2c]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl RegisterObjectAttributes
	b _080968FA
	.align 2, 0
_080968D0: .4byte gUnknown_08A18614
_080968D4: .4byte gUnknown_08A1859E
_080968D8:
	adds r5, r6, #0
	adds r5, #0x2c
	ldr r4, _0809692C  @ gUnknown_08A18614
	adds r0, r7, #0
	movs r1, #0xa
	bl __divsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r9
	bl RegisterObjectAttributes
_080968FA:
	adds r5, r6, #0
	adds r5, #0x34
	ldr r4, _0809692C  @ gUnknown_08A18614
	adds r0, r7, #0
	movs r1, #0xa
	bl __modsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r9
	bl RegisterObjectAttributes
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809692C: .4byte gUnknown_08A18614

	THUMB_FUNC_START sub_8096930
sub_8096930: @ 0x08096930
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldr r3, _08096954  @ gUnknown_08A185AC
	str r2, [sp]
	movs r0, #4
	adds r1, r4, #0
	adds r2, r5, #0
	bl RegisterObjectAttributes
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08096954: .4byte gUnknown_08A185AC

	THUMB_FUNC_START sub_8096958
sub_8096958: @ 0x08096958
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	movs r4, #0xa0
	movs r5, #8
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08096974
	b _08096A80
_08096974:
	adds r0, r7, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #4
	bhi _080969E8
	lsls r0, r0, #2
	ldr r1, _08096988  @ _0809698C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08096988: .4byte _0809698C
_0809698C: @ jump table
	.4byte _080969E8 @ case 0
	.4byte _080969A0 @ case 1
	.4byte _080969B4 @ case 2
	.4byte _080969C8 @ case 3
	.4byte _080969DC @ case 4
_080969A0:
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	movs r3, #0xc7
	lsls r3, r3, #7
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80966F0
	b _080969E8
_080969B4:
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	movs r3, #0xc7
	lsls r3, r3, #7
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80967B0
	b _080969E8
_080969C8:
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	movs r3, #0xc7
	lsls r3, r3, #7
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8096870
	b _080969E8
_080969DC:
	movs r2, #0xc7
	lsls r2, r2, #7
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8096930
_080969E8:
	movs r0, #0x33
	adds r0, r0, r7
	mov r8, r0
	movs r1, #0x34
	adds r1, r1, r7
	mov r9, r1
	ldr r6, _08096A6C  @ 0x0000B6C0
	movs r5, #0x80
	movs r4, #2
_080969FA:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x18
	ldr r3, _08096A70  @ gUnknown_08590F8C
	bl RegisterObjectAttributes
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _080969FA
	mov r1, r8
	ldrb r0, [r1]
	cmp r0, #0
	bne _08096A26
	ldrh r0, [r7, #0x36]
	lsrs r0, r0, #2
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _08096A38
_08096A26:
	ldr r3, _08096A74  @ gUnknown_08A18E4E
	movs r0, #0xc0
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	movs r1, #0x14
	movs r2, #0x8c
	bl RegisterObjectAttributes
_08096A38:
	mov r1, r9
	ldrb r0, [r1]
	cmp r0, #0
	bne _08096A4C
	ldrh r0, [r7, #0x36]
	lsrs r0, r0, #2
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _08096A5E
_08096A4C:
	ldr r3, _08096A78  @ gUnknown_08A18E76
	movs r0, #0xc0
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	movs r1, #0x64
	movs r2, #0x8c
	bl RegisterObjectAttributes
_08096A5E:
	ldr r2, _08096A7C  @ 0x00009380
	movs r0, #0x74
	movs r1, #0x28
	bl sub_80966C8
	b _08096AA4
	.align 2, 0
_08096A6C: .4byte 0x0000B6C0
_08096A70: .4byte gUnknown_08590F8C
_08096A74: .4byte gUnknown_08A18E4E
_08096A78: .4byte gUnknown_08A18E76
_08096A7C: .4byte 0x00009380
_08096A80:
	bl sub_8095264
	cmp r0, #0
	beq _08096A9A
	ldr r3, _08096AB4  @ gUnknown_08A18E62
	movs r0, #0xc0
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	movs r1, #0x14
	movs r2, #0x8c
	bl RegisterObjectAttributes
_08096A9A:
	ldr r2, _08096AB8  @ 0x00009380
	movs r0, #0x74
	movs r1, #0x20
	bl sub_80966C8
_08096AA4:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096AB4: .4byte gUnknown_08A18E62
_08096AB8: .4byte 0x00009380

	THUMB_FUNC_START sub_8096ABC
sub_8096ABC: @ 0x08096ABC
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
	strh r0, [r5, #0x36]
	bl SMS_FlushIndirect
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	asrs r1, r0, #0x18
	cmp r1, #0
	beq _08096AFC
	ldr r0, _08096AF4  @ gUnknown_08A1B194
	ldr r3, _08096AF8  @ 0x00009E40
	movs r1, #1
	str r1, [sp]
	movs r1, #0xd
	str r1, [sp, #4]
	movs r1, #0x3c
	movs r2, #0x10
	bl APProc_Create
	str r0, [r5, #0x38]
	b _08096B86
	.align 2, 0
_08096AF4: .4byte gUnknown_08A1B194
_08096AF8: .4byte 0x00009E40
_08096AFC:
	ldr r0, _08096B28  @ gUnknown_08A1B194
	ldr r3, _08096B2C  @ 0x00009E40
	str r1, [sp]
	movs r1, #0xd
	str r1, [sp, #4]
	movs r1, #0x3c
	movs r2, #0x10
	bl APProc_Create
	str r0, [r5, #0x38]
	ldr r0, _08096B30  @ gUnknown_0202BCF0
	movs r4, #0xe
	ldrsb r4, [r0, r4]
	adds r0, r4, #0
	subs r0, #0x24
	cmp r0, #9
	bhi _08096B34
	adds r1, r5, #0
	adds r1, #0x30
	movs r0, #2
	b _08096B74
	.align 2, 0
_08096B28: .4byte gUnknown_08A1B194
_08096B2C: .4byte 0x00009E40
_08096B30: .4byte gUnknown_0202BCF0
_08096B34:
	adds r0, r4, #0
	subs r0, #0x2e
	cmp r0, #9
	bhi _08096B44
	adds r1, r5, #0
	adds r1, #0x30
	movs r0, #3
	b _08096B74
_08096B44:
	adds r0, r4, #0
	bl sub_80C0960
	cmp r0, #0
	beq _08096B56
	adds r1, r5, #0
	adds r1, #0x30
	movs r0, #4
	b _08096B74
_08096B56:
	adds r0, r4, #0
	subs r0, #0x15
	cmp r0, #1
	bls _08096B66
	cmp r4, #0x22
	beq _08096B66
	cmp r4, #0x23
	bne _08096B6E
_08096B66:
	adds r1, r5, #0
	adds r1, #0x30
	movs r0, #0
	b _08096B74
_08096B6E:
	adds r1, r5, #0
	adds r1, #0x30
	movs r0, #1
_08096B74:
	strb r0, [r1]
	adds r0, r4, #0
	bl GetROMChapterStruct
	adds r0, #0x80
	ldrb r0, [r0]
	adds r1, r5, #0
	adds r1, #0x2f
	strb r0, [r1]
_08096B86:
	adds r1, r5, #0
	adds r1, #0x2b
	movs r0, #0
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x33
	movs r1, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8096BA4
sub_8096BA4: @ 0x08096BA4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8096958
	ldrh r0, [r4, #0x36]
	adds r0, #1
	strh r0, [r4, #0x36]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8096BB8
sub_8096BB8: @ 0x08096BB8
	push {lr}
	ldr r0, [r0, #0x38]
	bl APProc_Delete
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8096BC4
sub_8096BC4: @ 0x08096BC4
	push {lr}
	ldr r0, _08096BDC  @ gUnknown_08A186B4
	bl Proc_Find
	cmp r0, #0
	beq _08096BD8
	adds r1, r0, #0
	adds r1, #0x33
	movs r0, #0
	strb r0, [r1]
_08096BD8:
	pop {r0}
	bx r0
	.align 2, 0
_08096BDC: .4byte gUnknown_08A186B4

	THUMB_FUNC_START sub_8096BE0
sub_8096BE0: @ 0x08096BE0
	push {lr}
	ldr r0, _08096BF8  @ gUnknown_08A186B4
	bl Proc_Find
	cmp r0, #0
	beq _08096BF4
	adds r1, r0, #0
	adds r1, #0x34
	movs r0, #0
	strb r0, [r1]
_08096BF4:
	pop {r0}
	bx r0
	.align 2, 0
_08096BF8: .4byte gUnknown_08A186B4

	THUMB_FUNC_START sub_8096BFC
sub_8096BFC: @ 0x08096BFC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08096C1C  @ gUnknown_08A186B4
	adds r0, r4, #0
	bl Proc_Find
	bl Proc_Delete
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_Create
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08096C1C: .4byte gUnknown_08A186B4

	THUMB_FUNC_START sub_8096C20
sub_8096C20: @ 0x08096C20
	push {lr}
	ldr r0, _08096C30  @ gUnknown_08A186B4
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_08096C30: .4byte gUnknown_08A186B4

	THUMB_FUNC_START sub_8096C34
sub_8096C34: @ 0x08096C34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r2, r0, #0
	adds r3, r2, #0
	subs r3, #0x38
	cmp r3, #0
	bge _08096C4A
	movs r7, #0
	adds r6, r2, #0
	b _08096C60
_08096C4A:
	adds r0, r2, #0
	adds r0, #0x38
	cmp r0, #0xf0
	ble _08096C5A
	movs r7, #0xf
	adds r6, r2, #0
	subs r6, #0x78
	b _08096C60
_08096C5A:
	asrs r7, r3, #3
	lsls r0, r7, #3
	subs r6, r2, r0
_08096C60:
	adds r3, r1, #0
	subs r3, #0x28
	adds r0, r1, #0
	adds r0, #0x30
	cmp r0, #0xa0
	ble _08096C72
	movs r5, #8
	subs r1, #0x40
	b _08096C82
_08096C72:
	adds r0, r3, #0
	cmp r0, #0
	bge _08096C7C
	adds r0, r1, #0
	subs r0, #0x21
_08096C7C:
	asrs r5, r0, #3
	lsls r0, r5, #3
	subs r1, r1, r0
_08096C82:
	mov r8, r1
	ldr r4, _08096CC8  @ gUnknown_02022CB0
	adds r0, r4, #0
	movs r1, #2
	adds r2, r7, #0
	bl DrawDecNumber
	adds r0, r4, #0
	adds r0, #0x80
	movs r1, #2
	adds r2, r5, #0
	bl DrawDecNumber
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #2
	adds r2, r6, #0
	bl DrawDecNumber
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #2
	mov r2, r8
	bl DrawDecNumber
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096CC8: .4byte gUnknown_02022CB0

	THUMB_FUNC_START sub_8096CCC
sub_8096CCC: @ 0x08096CCC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r2, #0
	movs r1, #7
	adds r0, #0x54
_08096CD6:
	str r2, [r0]
	subs r0, #4
	subs r1, #1
	cmp r1, #0
	bge _08096CD6
	movs r4, #0
	adds r0, r5, #0
	adds r0, #0x2a
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, r5, #0
	bl sub_80AD47C
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_80AD4A0
	str r4, [r5, #0x58]
	str r4, [r5, #0x5c]
	str r4, [r5, #0x60]
	adds r0, r5, #0
	adds r0, #0x29
	strb r4, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8096D10
sub_8096D10: @ 0x08096D10
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x2a
	ldrb r0, [r5]
	mov r9, r0
	movs r1, #0x34
	ldrsh r0, [r4, r1]
	adds r0, #1
	lsls r0, r0, #3
	adds r0, #4
	mov r8, r0
	movs r2, #0x36
	ldrsh r0, [r4, r2]
	adds r0, #1
	lsls r0, r0, #3
	mov r2, r9
	lsls r1, r2, #4
	adds r7, r0, r1
	movs r3, #0x80
	lsls r3, r3, #3
	mov r0, r8
	adds r1, r7, #0
	movs r2, #6
	bl sub_80AD51C
	ldrb r1, [r5]
	lsls r1, r1, #2
	adds r0, r4, #0
	adds r0, #0x38
	adds r0, r0, r1
	ldr r5, [r0]
	adds r6, r4, #0
	adds r6, #0x29
	movs r0, #0
	ldrsb r0, [r6, r0]
	cmp r0, #0
	beq _08096D84
	ldr r2, _08096D80  @ gKeyStatusPtr
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	bne _08096D74
	b _08096E8C
_08096D74:
	bl CloseHelpBox
	movs r0, #0
	strb r0, [r6]
	b _08096F34
	.align 2, 0
_08096D80: .4byte gKeyStatusPtr
_08096D84:
	ldr r1, _08096DAC  @ gKeyStatusPtr
	ldr r0, [r1]
	ldrh r3, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	adds r2, r1, #0
	cmp r0, #0
	beq _08096DB0
	ldr r2, [r5, #0x30]
	cmp r2, #0
	bne _08096D9E
	b _08096F34
_08096D9E:
	mov r0, r8
	adds r1, r7, #0
	bl StartHelpBox
	movs r0, #1
	strb r0, [r6]
	b _08096F34
	.align 2, 0
_08096DAC: .4byte gKeyStatusPtr
_08096DB0:
	movs r6, #1
	adds r0, r6, #0
	ands r0, r3
	cmp r0, #0
	beq _08096DF8
	adds r0, r5, #0
	adds r0, #0x38
	ldrb r1, [r0]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _08096E74
	ldr r0, [r5, #0x2c]
	cmp r0, #0
	beq _08096E74
	adds r0, r4, #0
	movs r1, #0
	bl Proc_GotoLabel
	ldr r0, [r4, #0x14]
	ldr r1, [r5, #0x2c]
	bl _call_via_r1
	ldr r0, _08096DF4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _08096DEC
	b _08096F34
_08096DEC:
	movs r0, #0x6a
	bl m4aSongNumStart
	b _08096F34
	.align 2, 0
_08096DF4: .4byte gUnknown_0202BCF0
_08096DF8:
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _08096E38
	ldr r1, [r4, #0x58]
	cmp r1, #0
	bne _08096E08
	b _08096F34
_08096E08:
	ldr r0, [r4, #0x14]
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08096E74
	adds r0, r4, #0
	movs r1, #0
	bl Proc_GotoLabel
	ldr r0, _08096E34  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _08096E2A
	b _08096F34
_08096E2A:
	movs r0, #0x6b
	bl m4aSongNumStart
	b _08096F34
	.align 2, 0
_08096E34: .4byte gUnknown_0202BCF0
_08096E38:
	movs r0, #8
	ands r0, r3
	cmp r0, #0
	beq _08096E8C
	ldr r1, [r4, #0x5c]
	cmp r1, #0
	beq _08096F34
	ldr r0, [r4, #0x14]
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08096E74
	ldr r0, _08096E70  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08096E64
	movs r0, #0x6a
	bl m4aSongNumStart
_08096E64:
	adds r0, r4, #0
	movs r1, #0
	bl Proc_GotoLabel
	b _08096F34
	.align 2, 0
_08096E70: .4byte gUnknown_0202BCF0
_08096E74:
	ldr r0, _08096E88  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08096F34
	movs r0, #0x6c
	bl m4aSongNumStart
	b _08096F34
	.align 2, 0
_08096E88: .4byte gUnknown_0202BCF0
_08096E8C:
	ldr r3, [r2]
	ldrh r1, [r3, #6]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	adds r5, r4, #0
	adds r5, #0x2a
	cmp r0, #0
	beq _08096EB8
	ldrb r0, [r5]
	cmp r0, #0
	bne _08096EB4
	ldrh r1, [r3, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08096EB8
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
_08096EB4:
	subs r0, #1
	strb r0, [r5]
_08096EB8:
	ldr r2, [r2]
	ldrh r1, [r2, #6]
	movs r3, #0x80
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _08096EE6
	ldrb r1, [r5]
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _08096ED8
	adds r0, r1, #1
	b _08096EE4
_08096ED8:
	ldrh r1, [r2, #8]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _08096EE6
	movs r0, #0
_08096EE4:
	strb r0, [r5]
_08096EE6:
	ldrb r0, [r5]
	cmp r9, r0
	beq _08096F34
	ldr r0, _08096F40  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08096EFE
	movs r0, #0x66
	bl m4aSongNumStart
_08096EFE:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08096F34
	movs r1, #0x34
	ldrsh r0, [r4, r1]
	adds r0, #1
	lsls r0, r0, #3
	adds r0, #4
	movs r2, #0x36
	ldrsh r1, [r4, r2]
	adds r1, #1
	lsls r1, r1, #3
	ldrb r3, [r5]
	lsls r2, r3, #4
	adds r1, r1, r2
	lsls r3, r3, #2
	adds r2, r4, #0
	adds r2, #0x38
	adds r2, r2, r3
	ldr r5, [r2]
	ldr r2, [r5, #0x30]
	bl StartHelpBox
_08096F34:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096F40: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_8096F44
sub_8096F44: @ 0x08096F44
	push {lr}
	adds r2, r0, #0
	movs r1, #0x34
	ldrsh r0, [r2, r1]
	adds r0, #1
	lsls r0, r0, #3
	adds r0, #4
	movs r3, #0x36
	ldrsh r1, [r2, r3]
	adds r1, #1
	lsls r1, r1, #3
	adds r2, #0x2a
	ldrb r2, [r2]
	lsls r2, r2, #4
	adds r1, r1, r2
	bl DisplayFrozenUiHand
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8096F6C
sub_8096F6C: @ 0x08096F6C
	push {lr}
	adds r2, r0, #0
	movs r1, #0x34
	ldrsh r0, [r2, r1]
	adds r0, #1
	lsls r0, r0, #3
	adds r0, #4
	movs r3, #0x36
	ldrsh r1, [r2, r3]
	adds r1, #1
	lsls r1, r1, #3
	adds r2, #0x2a
	ldrb r2, [r2]
	lsls r2, r2, #4
	adds r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #3
	movs r2, #6
	bl sub_80AD51C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8096F98
sub_8096F98: @ 0x08096F98
	push {lr}
	ldr r1, [r0, #0x60]
	cmp r1, #0
	beq _08096FA6
	ldr r0, [r0, #0x14]
	bl _call_via_r1
_08096FA6:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8096FAC
sub_8096FAC: @ 0x08096FAC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08096FCC  @ gUnknown_08A186EC
	adds r0, r4, #0
	bl Proc_Find
	bl Proc_Delete
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_Create
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08096FCC: .4byte gUnknown_08A186EC

	THUMB_FUNC_START sub_8096FD0
sub_8096FD0: @ 0x08096FD0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08096FE8  @ gUnknown_08A186EC
	bl Proc_Find
	cmp r0, #0
	beq _08096FE0
	str r4, [r0, #0x58]
_08096FE0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08096FE8: .4byte gUnknown_08A186EC

	THUMB_FUNC_START sub_8096FEC
sub_8096FEC: @ 0x08096FEC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08097004  @ gUnknown_08A186EC
	bl Proc_Find
	cmp r0, #0
	beq _08096FFC
	str r4, [r0, #0x5c]
_08096FFC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097004: .4byte gUnknown_08A186EC

	THUMB_FUNC_START sub_8097008
sub_8097008: @ 0x08097008
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08097020  @ gUnknown_08A186EC
	bl Proc_Find
	cmp r0, #0
	beq _08097018
	str r4, [r0, #0x60]
_08097018:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097020: .4byte gUnknown_08A186EC

	THUMB_FUNC_START sub_8097024
sub_8097024: @ 0x08097024
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	mov r9, r3
	ldr r0, _08097074  @ gUnknown_08A186EC
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080970B8
	movs r4, #0
	movs r0, #0x38
	adds r0, r0, r1
	mov sl, r0
	mov r3, sl
_0809704C:
	ldr r2, [r3]
	cmp r2, #0
	beq _08097078
	adds r0, r2, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, r6
	bne _08097078
	str r7, [r2, #0x2c]
	adds r0, r2, #0
	adds r0, #0x38
	mov r1, r8
	strb r1, [r0]
	ldr r0, [r3]
	mov r2, r9
	str r2, [r0, #0x34]
	ldr r1, [sp, #0x20]
	str r1, [r0, #0x30]
	b _080970B8
	.align 2, 0
_08097074: .4byte gUnknown_08A186EC
_08097078:
	adds r3, #4
	adds r4, #1
	cmp r4, #7
	ble _0809704C
	adds r5, r1, #0
	adds r5, #0x2b
	ldrb r4, [r5]
	ldr r0, _080970C8  @ gUnknown_08A186DC
	bl Proc_Create
	lsls r1, r4, #2
	add r1, sl
	str r0, [r1]
	adds r0, #0x39
	strb r6, [r0]
	ldr r0, [r1]
	str r7, [r0, #0x2c]
	adds r0, #0x38
	mov r2, r8
	strb r2, [r0]
	ldr r0, [r1]
	mov r1, r9
	str r1, [r0, #0x34]
	ldr r2, [sp, #0x20]
	str r2, [r0, #0x30]
	adds r0, #0x3c
	movs r1, #7
	bl Text_Init
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_080970B8:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080970C8: .4byte gUnknown_08A186DC

	THUMB_FUNC_START sub_80970CC
sub_80970CC: @ 0x080970CC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	ldr r0, _080970F8  @ gUnknown_08A186EC
	bl Proc_Find
	cmp r0, #0
	beq _08097106
	movs r2, #0
	adds r3, r0, #0
	adds r3, #0x2a
	adds r1, r0, #0
	adds r1, #0x38
_080970E6:
	ldr r0, [r1]
	cmp r0, #0
	beq _080970FE
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, r5
	bne _080970FC
	strb r4, [r3]
	b _08097106
	.align 2, 0
_080970F8: .4byte gUnknown_08A186EC
_080970FC:
	adds r4, #1
_080970FE:
	adds r1, #4
	adds r2, #1
	cmp r2, #7
	ble _080970E6
_08097106:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809710C
sub_809710C: @ 0x0809710C
	push {r4, r5, lr}
	movs r4, #0
	ldr r0, _0809713C  @ gUnknown_08A186EC
	bl Proc_Find
	cmp r0, #0
	beq _0809714A
	movs r3, #0
	movs r1, #0x2a
	adds r1, r1, r0
	mov ip, r1
	adds r2, r0, #0
	adds r2, #0x38
_08097126:
	ldr r1, [r2]
	cmp r1, #0
	beq _08097142
	mov r5, ip
	ldrb r0, [r5]
	cmp r0, r4
	bne _08097140
	adds r0, r1, #0
	adds r0, #0x39
	ldrb r0, [r0]
	b _0809714C
	.align 2, 0
_0809713C: .4byte gUnknown_08A186EC
_08097140:
	adds r4, #1
_08097142:
	adds r2, #4
	adds r3, #1
	cmp r3, #7
	ble _08097126
_0809714A:
	movs r0, #0
_0809714C:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8097154
sub_8097154: @ 0x08097154
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r0, _080971F8  @ gUnknown_08A186EC
	bl Proc_Find
	mov r8, r0
	cmp r0, #0
	beq _080971EA
	movs r0, #0
	mov r1, r8
	strh r6, [r1, #0x34]
	strh r5, [r1, #0x36]
	mov r4, r8
	adds r4, #0x2b
	ldrb r3, [r4]
	lsls r3, r3, #1
	adds r3, #2
	str r0, [sp]
	adds r0, r6, #0
	adds r1, r5, #0
	movs r2, #0xa
	bl DrawUiFrame2
	ldrb r0, [r4]
	mov r9, r4
	cmp r0, #1
	bls _080971E4
	movs r7, #0
	ldrb r0, [r4]
	cmp r7, r0
	bge _080971E4
	adds r0, r5, #1
	lsls r0, r0, #5
	adds r0, #2
	adds r6, r0, r6
_080971A4:
	lsls r1, r7, #2
	mov r0, r8
	adds r0, #0x38
	adds r0, r0, r1
	ldr r4, [r0]
	adds r5, r4, #0
	adds r5, #0x3c
	adds r0, r5, #0
	bl Text_Clear
	ldr r0, [r4, #0x34]
	bl GetStringFromIndex
	lsls r1, r6, #1
	ldr r2, _080971FC  @ gBG0TilemapBuffer
	adds r1, r1, r2
	adds r4, #0x38
	ldrb r3, [r4]
	movs r2, #1
	ands r2, r3
	movs r3, #0
	str r3, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	bl DrawTextInline
	adds r6, #0x40
	adds r7, #1
	mov r1, r9
	ldrb r1, [r1]
	cmp r7, r1
	blt _080971A4
_080971E4:
	movs r0, #3
	bl BG_EnableSyncByMask
_080971EA:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080971F8: .4byte gUnknown_08A186EC
_080971FC: .4byte gBG0TilemapBuffer

	THUMB_FUNC_START sub_8097200
sub_8097200: @ 0x08097200
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _0809728C  @ gUnknown_08A186EC
	bl Proc_Find
	mov r8, r0
	cmp r0, #0
	beq _0809727E
	strh r5, [r0, #0x34]
	strh r4, [r0, #0x36]
	adds r0, #0x2b
	ldrb r1, [r0]
	mov r9, r0
	cmp r1, #1
	bls _08097278
	movs r7, #0
	ldrb r0, [r0]
	cmp r7, r0
	bge _08097278
	adds r0, r4, #1
	lsls r0, r0, #5
	adds r0, #2
	adds r6, r0, r5
_08097238:
	lsls r1, r7, #2
	mov r0, r8
	adds r0, #0x38
	adds r0, r0, r1
	ldr r4, [r0]
	adds r5, r4, #0
	adds r5, #0x3c
	adds r0, r5, #0
	bl Text_Clear
	ldr r0, [r4, #0x34]
	bl GetStringFromIndex
	lsls r1, r6, #1
	ldr r2, _08097290  @ gBG0TilemapBuffer
	adds r1, r1, r2
	adds r4, #0x38
	ldrb r3, [r4]
	movs r2, #1
	ands r2, r3
	movs r3, #0
	str r3, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	bl DrawTextInline
	adds r6, #0x40
	adds r7, #1
	mov r1, r9
	ldrb r1, [r1]
	cmp r7, r1
	blt _08097238
_08097278:
	movs r0, #1
	bl BG_EnableSyncByMask
_0809727E:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809728C: .4byte gUnknown_08A186EC
_08097290: .4byte gBG0TilemapBuffer

	THUMB_FUNC_START sub_8097294
sub_8097294: @ 0x08097294
	push {lr}
	ldr r0, _080972A4  @ gUnknown_08A186EC
	bl Proc_Find
	cmp r0, #0
	bne _080972A8
	movs r0, #0
	b _080972AC
	.align 2, 0
_080972A4: .4byte gUnknown_08A186EC
_080972A8:
	adds r0, #0x2b
	ldrb r0, [r0]
_080972AC:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80972B0
sub_80972B0: @ 0x080972B0
	push {r4, lr}
	ldr r0, _080972D0  @ gUnknown_08A186EC
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080972CA
	bl sub_80972D4
	adds r0, r4, #0
	movs r1, #0xa
	bl Proc_GotoLabel
_080972CA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080972D0: .4byte gUnknown_08A186EC

	THUMB_FUNC_START sub_80972D4
sub_80972D4: @ 0x080972D4
	push {r4, r5, lr}
	ldr r0, _08097334  @ gUnknown_08A186EC
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _0809732C
	movs r1, #0x36
	ldrsh r0, [r4, r1]
	lsls r0, r0, #5
	movs r2, #0x34
	ldrsh r1, [r4, r2]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _08097338  @ gBG0TilemapBuffer
	adds r0, r0, r1
	adds r5, r4, #0
	adds r5, #0x2b
	ldrb r2, [r5]
	lsls r2, r2, #1
	adds r2, #2
	movs r1, #9
	movs r3, #0
	bl TileMap_FillRect
	movs r1, #0x36
	ldrsh r0, [r4, r1]
	lsls r0, r0, #5
	movs r2, #0x34
	ldrsh r1, [r4, r2]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _0809733C  @ gBG1TilemapBuffer
	adds r0, r0, r1
	ldrb r2, [r5]
	lsls r2, r2, #1
	adds r2, #2
	movs r1, #9
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #3
	bl BG_EnableSyncByMask
_0809732C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08097334: .4byte gUnknown_08A186EC
_08097338: .4byte gBG0TilemapBuffer
_0809733C: .4byte gBG1TilemapBuffer

	THUMB_FUNC_START sub_8097340
sub_8097340: @ 0x08097340
	push {lr}
	ldr r0, _08097350  @ gUnknown_08A186EC
	bl Proc_Find
	cmp r0, #0
	bne _08097354
	movs r0, #0
	b _08097356
	.align 2, 0
_08097350: .4byte gUnknown_08A186EC
_08097354:
	movs r0, #1
_08097356:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_809735C
sub_809735C: @ 0x0809735C
	push {lr}
	ldr r0, _08097374  @ gUnknown_08A186EC
	bl Proc_Find
	cmp r0, #0
	beq _0809736E
	movs r1, #2
	bl Proc_GotoLabel
_0809736E:
	pop {r0}
	bx r0
	.align 2, 0
_08097374: .4byte gUnknown_08A186EC

	THUMB_FUNC_START sub_8097378
sub_8097378: @ 0x08097378
	push {lr}
	ldr r0, _08097390  @ gUnknown_08A186EC
	bl Proc_Find
	cmp r0, #0
	beq _0809738A
	movs r1, #0
	bl Proc_GotoLabel
_0809738A:
	pop {r0}
	bx r0
	.align 2, 0
_08097390: .4byte gUnknown_08A186EC

	THUMB_FUNC_START sub_8097394
sub_8097394: @ 0x08097394
	push {lr}
	ldr r0, _080973AC  @ gUnknown_08A186EC
	bl Proc_Find
	cmp r0, #0
	beq _080973A6
	movs r1, #1
	bl Proc_GotoLabel
_080973A6:
	pop {r0}
	bx r0
	.align 2, 0
_080973AC: .4byte gUnknown_08A186EC

	THUMB_FUNC_START sub_80973B0
sub_80973B0: @ 0x080973B0
	adds r3, r0, #0
	movs r2, #0
	movs r1, #0
	strh r1, [r3, #0x2a]
	adds r0, #0x2c
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	strh r1, [r3, #0x2e]
	strh r1, [r3, #0x32]
	adds r0, #7
	strb r2, [r0]
	ldrh r0, [r3, #0x2e]
	strh r0, [r3, #0x30]
	movs r0, #0xe4
	lsls r0, r0, #2
	strh r0, [r3, #0x36]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r3, #0x38]
	adds r0, r3, #0
	adds r0, #0x3a
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bx lr

	THUMB_FUNC_START sub_80973E4
sub_80973E4: @ 0x080973E4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r4, r0, #0
	ldrh r1, [r4, #0x36]
	ldrh r0, [r4, #0x38]
	adds r1, r1, r0
	mov r9, r1
	adds r1, r4, #0
	adds r1, #0x34
	ldrh r0, [r4, #0x32]
	ldrb r1, [r1]
	cmp r0, r1
	bhi _08097408
	b _0809762A
_08097408:
	movs r6, #0
	adds r0, r4, #0
	adds r0, #0x2d
	mov sl, r0
	adds r0, #0xd
	str r0, [sp, #0x14]
	adds r1, r4, #0
	adds r1, #0x3b
	str r1, [sp, #0x18]
	mov r2, sl
	ldrb r2, [r2]
	cmp r6, r2
	bge _08097448
	movs r5, #1
_08097424:
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	adds r2, r2, r5
	mov r3, r9
	str r3, [sp]
	movs r0, #4
	ldr r3, _08097534  @ gUnknown_08A18744
	bl RegisterObjectAttributes
	adds r5, #8
	adds r6, #1
	mov r0, sl
	ldrb r0, [r0]
	cmp r6, r0
	blt _08097424
_08097448:
	cmp r6, #0
	bne _0809744E
	b _080975D8
_0809744E:
	mov r1, sl
	ldrb r0, [r1]
	lsls r7, r0, #0x13
	ldrh r2, [r4, #0x2e]
	str r2, [sp, #0xc]
	ldrh r5, [r4, #0x32]
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r6, [r0]
	str r0, [sp, #0x10]
	movs r3, #0x2c
	adds r3, r3, r4
	mov r8, r3
	cmp r5, r6
	bhi _0809746E
	b _080975A6
_0809746E:
	adds r0, r7, #0
	adds r1, r5, #0
	bl __udivsi3
	str r0, [sp, #4]
	adds r0, r7, #0
	muls r0, r6, r0
	adds r1, r5, #0
	bl __udivsi3
	str r0, [sp, #8]
	ldr r5, [sp, #0xc]
	cmp r5, #0
	beq _080974AE
	ldrh r1, [r4, #0x2a]
	ldr r6, _08097538  @ 0x00002001
	adds r1, r1, r6
	mov r0, r8
	ldrb r2, [r0]
	subs r2, #8
	ldr r3, _0809753C  @ gUnknown_08A187F0
	ldr r5, [sp, #0x14]
	ldrb r0, [r5]
	lsrs r0, r0, #3
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	mov r6, r9
	str r6, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
_080974AE:
	movs r6, #0
	ldr r0, [sp, #8]
	lsrs r5, r0, #0x13
	cmp r6, r5
	bcs _080974E6
	ldr r1, [sp, #4]
	ldr r2, [sp, #0xc]
	adds r0, r1, #0
	muls r0, r2, r0
	lsrs r0, r0, #0x14
	adds r7, r0, #1
_080974C4:
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	mov r3, r8
	ldrb r2, [r3]
	adds r2, r2, r7
	lsls r0, r6, #3
	adds r2, r2, r0
	ldr r0, _08097540  @ gUnknown_08A1879C
	ldr r3, [r0, #0x20]
	mov r0, r9
	str r0, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
	adds r6, #1
	cmp r6, r5
	bcc _080974C4
_080974E6:
	ldrh r0, [r4, #0x2e]
	lsrs r0, r0, #4
	ldr r1, [sp, #0x10]
	ldrb r1, [r1]
	adds r0, r0, r1
	ldrh r2, [r4, #0x32]
	cmp r0, r2
	bne _08097544
	mov r3, sl
	ldrb r0, [r3]
	lsls r0, r0, #3
	ldr r5, [sp, #4]
	ldr r2, [sp, #0xc]
	adds r1, r5, #0
	muls r1, r2, r1
	lsrs r2, r1, #0x14
	lsls r3, r6, #3
	adds r1, r2, r3
	subs r0, r0, r1
	cmp r0, #0
	beq _080975A6
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	adds r2, #1
	mov r5, r8
	ldrb r5, [r5]
	adds r2, r2, r5
	adds r2, r2, r3
	ldr r3, _08097540  @ gUnknown_08A1879C
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	mov r6, r9
	str r6, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
	b _080975A6
	.align 2, 0
_08097534: .4byte gUnknown_08A18744
_08097538: .4byte 0x00002001
_0809753C: .4byte gUnknown_08A187F0
_08097540: .4byte gUnknown_08A1879C
_08097544:
	ldr r0, [sp, #8]
	lsrs r5, r0, #0x10
	movs r0, #7
	ands r5, r0
	cmp r5, #0
	beq _0809757C
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	ldr r3, [sp, #4]
	ldr r0, [sp, #0xc]
	adds r2, r3, #0
	muls r2, r0, r2
	lsrs r2, r2, #0x14
	adds r2, #1
	mov r3, r8
	ldrb r3, [r3]
	adds r2, r2, r3
	lsls r0, r6, #3
	adds r2, r2, r0
	ldr r3, _0809763C  @ gUnknown_08A1879C
	lsls r0, r5, #2
	adds r0, r0, r3
	ldr r3, [r0]
	mov r5, r9
	str r5, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
_0809757C:
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	mov r6, sl
	ldrb r2, [r6]
	lsls r2, r2, #3
	mov r0, r8
	ldrb r0, [r0]
	adds r2, r2, r0
	adds r2, #2
	ldr r3, _08097640  @ gUnknown_08A187F0
	ldr r5, [sp, #0x18]
	ldrb r0, [r5]
	lsrs r0, r0, #3
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	mov r6, r9
	str r6, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
_080975A6:
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	mov r0, r8
	ldrb r2, [r0]
	subs r2, #7
	ldr r3, _08097644  @ gUnknown_08A1874C
	mov r5, r9
	str r5, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	mov r6, r8
	ldrb r2, [r6]
	mov r3, sl
	ldrb r0, [r3]
	lsls r0, r0, #3
	adds r0, #1
	adds r2, r2, r0
	ldr r3, _08097648  @ gUnknown_08A18754
	str r5, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
_080975D8:
	ldrh r1, [r4, #0x30]
	ldrh r0, [r4, #0x2e]
	cmp r1, r0
	beq _08097600
	cmp r1, r0
	bls _080975EC
	ldr r5, [sp, #0x14]
	ldrb r0, [r5]
	adds r0, #3
	strb r0, [r5]
_080975EC:
	ldrh r0, [r4, #0x30]
	ldrh r6, [r4, #0x2e]
	cmp r0, r6
	bcs _080975FC
	ldr r1, [sp, #0x18]
	ldrb r0, [r1]
	adds r0, #3
	strb r0, [r1]
_080975FC:
	ldrh r0, [r4, #0x2e]
	strh r0, [r4, #0x30]
_08097600:
	ldr r2, [sp, #0x14]
	ldrb r0, [r2]
	adds r0, #1
	movs r2, #0
	ldr r3, [sp, #0x14]
	strb r0, [r3]
	ldr r1, [sp, #0x18]
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r0, [r3]
	lsrs r0, r0, #3
	cmp r0, #5
	bls _0809761E
	strb r2, [r3]
_0809761E:
	ldr r5, [sp, #0x18]
	ldrb r0, [r5]
	lsrs r0, r0, #3
	cmp r0, #5
	bls _0809762A
	strb r2, [r5]
_0809762A:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809763C: .4byte gUnknown_08A1879C
_08097640: .4byte gUnknown_08A187F0
_08097644: .4byte gUnknown_08A1874C
_08097648: .4byte gUnknown_08A18754

	THUMB_FUNC_START sub_809764C
sub_809764C: @ 0x0809764C
	push {lr}
	ldr r0, _08097664  @ gUnknown_08A18808
	bl Proc_Find
	cmp r0, #0
	beq _0809765E
	movs r1, #1
	bl Proc_GotoLabel
_0809765E:
	pop {r0}
	bx r0
	.align 2, 0
_08097664: .4byte gUnknown_08A18808

	THUMB_FUNC_START sub_8097668
sub_8097668: @ 0x08097668
	push {lr}
	ldr r0, _08097680  @ gUnknown_08A18808
	bl Proc_Find
	cmp r0, #0
	beq _0809767A
	movs r1, #0
	bl Proc_GotoLabel
_0809767A:
	pop {r0}
	bx r0
	.align 2, 0
_08097680: .4byte gUnknown_08A18808

	THUMB_FUNC_START Delete6CMenuScroll
Delete6CMenuScroll: @ 0x08097684
	push {lr}
	ldr r0, _08097694  @ gUnknown_08A18808
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_08097694: .4byte gUnknown_08A18808

	THUMB_FUNC_START Make6CMenuScroll
Make6CMenuScroll: @ 0x08097698
	push {lr}
	adds r1, r0, #0
	ldr r0, _080976A8  @ gUnknown_08A18808
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080976A8: .4byte gUnknown_08A18808

	THUMB_FUNC_START sub_80976AC
sub_80976AC: @ 0x080976AC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080976C8  @ gUnknown_08A18808
	bl Proc_Find
	cmp r0, #0
	beq _080976C2
	strh r4, [r0, #0x2a]
	adds r0, #0x2c
	strb r5, [r0]
_080976C2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080976C8: .4byte gUnknown_08A18808

	THUMB_FUNC_START sub_80976CC
sub_80976CC: @ 0x080976CC
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r4, r2, #0x10
	lsls r3, r3, #0x18
	lsrs r5, r3, #0x18
	ldr r0, _080976FC  @ gUnknown_08A18808
	bl Proc_Find
	cmp r0, #0
	beq _080976F6
	adds r1, r0, #0
	adds r1, #0x2d
	strb r7, [r1]
	strh r6, [r0, #0x2e]
	strh r4, [r0, #0x32]
	adds r0, #0x34
	strb r5, [r0]
_080976F6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080976FC: .4byte gUnknown_08A18808

	THUMB_FUNC_START sub_8097700
sub_8097700: @ 0x08097700
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08097738  @ gUnknown_08A19CAC
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _0809773C  @ gUnknown_08A19C0C
	ldr r2, _08097740  @ 0x06010000
	adds r1, r4, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _08097744  @ gUnknown_08A18808
	bl Proc_Find
	adds r2, r0, #0
	cmp r2, #0
	beq _08097730
	asrs r0, r4, #5
	strh r0, [r2, #0x36]
	lsls r0, r5, #0xc
	strh r0, [r2, #0x38]
_08097730:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08097738: .4byte gUnknown_08A19CAC
_0809773C: .4byte gUnknown_08A19C0C
_08097740: .4byte 0x06010000
_08097744: .4byte gUnknown_08A18808

	THUMB_FUNC_START sub_8097748
sub_8097748: @ 0x08097748
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	adds r4, r0, #0
	mov r8, r1
	mov r9, r2
	adds r5, r3, #0
	ldr r6, [sp, #0x18]
	ldr r0, _0809779C  @ gUnknown_08A18808
	adds r1, r4, #0
	bl Proc_Create
	adds r4, r0, #0
	mov r0, r8
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	adds r0, #0x2c
	mov r1, r9
	strb r1, [r0]
	ldr r0, _080977A0  @ gUnknown_08A19CAC
	adds r1, r6, #0
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080977A4  @ gUnknown_08A19C0C
	ldr r2, _080977A8  @ 0x06010000
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
	asrs r5, r5, #5
	strh r5, [r4, #0x36]
	lsls r6, r6, #0xc
	strh r6, [r4, #0x38]
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0809779C: .4byte gUnknown_08A18808
_080977A0: .4byte gUnknown_08A19CAC
_080977A4: .4byte gUnknown_08A19C0C
_080977A8: .4byte 0x06010000

	THUMB_FUNC_START sub_80977AC
sub_80977AC: @ 0x080977AC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	mov r8, r1
	adds r5, r2, #0
	adds r6, r3, #0
	ldr r7, [sp, #0x18]
	bl Text_Clear
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_SetColorId
	adds r0, r4, #0
	adds r1, r6, #0
	bl Text_SetXCursor
	adds r0, r4, #0
	adds r1, r7, #0
	bl Text_AppendString
	adds r0, r4, #0
	mov r1, r8
	bl Text_Draw
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80977EC
sub_80977EC: @ 0x080977EC
	push {r4, r5, lr}
	adds r3, r0, #0
	ldr r5, _08097800  @ gUnknown_02012F56
	ldrh r4, [r5]
	adds r2, r4, #0
	cmp r2, #0
	bne _08097804
	strb r2, [r3]
	strh r2, [r1]
	b _08097838
	.align 2, 0
_08097800: .4byte gUnknown_02012F56
_08097804:
	cmp r2, #7
	bhi _08097816
	ldrb r0, [r3]
	cmp r0, r2
	bcc _08097812
	subs r0, r4, #1
	strb r0, [r3]
_08097812:
	movs r0, #0
	b _08097836
_08097816:
	ldrh r0, [r1]
	lsrs r0, r0, #4
	adds r2, r0, #7
	ldrh r0, [r5]
	cmp r2, r0
	bge _0809782E
	ldrb r0, [r3]
	cmp r0, #6
	bne _08097838
	movs r0, #5
	strb r0, [r3]
	b _08097838
_0809782E:
	cmp r2, r0
	ble _08097838
	subs r0, #7
	lsls r0, r0, #4
_08097836:
	strh r0, [r1]
_08097838:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8097840
sub_8097840: @ 0x08097840
	push {lr}
	ldr r0, _0809785C  @ 0x04000006
	ldrh r0, [r0]
	adds r3, r0, #0
	cmp r3, #0xa0
	bne _08097864
	movs r3, #0
	ldr r0, _08097860  @ gUnknown_02013458
	ldr r2, [r0]
	ldr r1, [r0, #4]
	str r1, [r0]
	str r2, [r0, #4]
	b _0809786C
	.align 2, 0
_0809785C: .4byte 0x04000006
_08097860: .4byte gUnknown_02013458
_08097864:
	ldr r0, _08097884  @ gUnknown_02013458
	cmp r3, #0xa0
	bls _0809786C
	movs r3, #0
_0809786C:
	ldr r2, _08097888  @ 0x04000042
	ldr r1, [r0]
	lsls r0, r3, #2
	adds r0, r0, r1
	ldrb r1, [r0]
	lsls r1, r1, #8
	ldrb r0, [r0, #1]
	orrs r0, r1
	strh r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
_08097884: .4byte gUnknown_02013458
_08097888: .4byte 0x04000042

	THUMB_FUNC_START sub_809788C
sub_809788C: @ 0x0809788C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	ldr r2, _08097908  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov ip, r2
	cmp r0, #0
	bge _08097918
	movs r0, #0x96
	str r0, [r4, #0x2c]
	movs r3, #0
	ldr r0, _0809790C  @ gUnknown_02012F58
	mov r9, r0
	adds r4, #0x29
	mov r8, r4
	ldr r1, _08097910  @ gUnknown_02013458
	mov sl, r1
	mov r7, r9
	movs r4, #0
	movs r2, #0xf0
	movs r6, #0xa0
	lsls r6, r6, #2
	ldr r5, _08097914  @ 0x00000281
_080978DA:
	lsls r0, r3, #2
	adds r0, r0, r7
	strb r4, [r0]
	strb r2, [r0, #1]
	adds r1, r0, r6
	strb r4, [r1]
	adds r0, r0, r5
	strb r2, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0x9f
	bls _080978DA
	mov r1, ip
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	b _08097960
	.align 2, 0
_08097908: .4byte gLCDControlBuffer
_0809790C: .4byte gUnknown_02012F58
_08097910: .4byte gUnknown_02013458
_08097914: .4byte 0x00000281
_08097918:
	movs r0, #0
	str r0, [r4, #0x2c]
	movs r3, #0
	ldr r0, _080979CC  @ gUnknown_02012F58
	mov r9, r0
	adds r4, #0x29
	mov r8, r4
	ldr r1, _080979D0  @ gUnknown_02013458
	mov sl, r1
	mov r6, r9
	movs r2, #0x78
	movs r5, #0xa0
	lsls r5, r5, #2
	ldr r4, _080979D4  @ 0x00000281
_08097934:
	lsls r0, r3, #2
	adds r0, r0, r6
	strb r2, [r0]
	strb r2, [r0, #1]
	adds r1, r0, r5
	strb r2, [r1]
	adds r0, r0, r4
	strb r2, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0x9f
	bls _08097934
	mov r2, ip
	adds r2, #0x2f
	movs r1, #0
	movs r0, #0x78
	strb r0, [r2]
	adds r2, #4
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x2e
_08097960:
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x35
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r2, #1
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
	mov r0, r9
	mov r1, sl
	str r0, [r1]
	movs r0, #0xa0
	lsls r0, r0, #2
	add r0, r9
	str r0, [r1, #4]
	ldr r0, _080979D8  @ sub_8097840
	bl SetPrimaryHBlankHandler
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080979CC: .4byte gUnknown_02012F58
_080979D0: .4byte gUnknown_02013458
_080979D4: .4byte 0x00000281
_080979D8: .4byte sub_8097840

	THUMB_FUNC_START sub_80979DC
sub_80979DC: @ 0x080979DC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	adds r0, #0x2a
	movs r1, #0
	ldrsb r1, [r0, r1]
	ldr r0, [r6, #0x2c]
	adds r0, r0, r1
	str r0, [r6, #0x2c]
	cmp r0, #0x96
	ble _080979FA
	movs r0, #0x96
	str r0, [r6, #0x2c]
_080979FA:
	ldr r0, [r6, #0x2c]
	cmp r0, #0
	bge _08097A04
	movs r0, #0
	str r0, [r6, #0x2c]
_08097A04:
	movs r1, #0
	movs r0, #0x29
	adds r0, r0, r6
	mov r9, r0
	ldr r7, _08097A44  @ gUnknown_02013458
	movs r2, #0x78
	mov r8, r2
_08097A12:
	ldr r0, [r6, #0x2c]
	lsls r5, r1, #0x10
	cmp r0, #0
	ble _08097A32
	adds r4, r0, #0
	muls r4, r0, r4
	adds r0, r4, #0
	asrs r4, r5, #0x10
	adds r1, r4, #0
	subs r1, #0x50
	adds r2, r1, #0
	muls r2, r1, r2
	adds r1, r2, #0
	subs r0, r0, r1
	cmp r0, #0
	bge _08097A48
_08097A32:
	ldr r0, [r7, #4]
	asrs r1, r5, #0xe
	adds r0, r1, r0
	mov r4, r8
	strb r4, [r0]
	ldr r0, [r7, #4]
	adds r1, r1, r0
	strb r4, [r1, #1]
	b _08097A6E
	.align 2, 0
_08097A44: .4byte gUnknown_02013458
_08097A48:
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x78
	ble _08097A58
	movs r3, #0x78
_08097A58:
	ldr r1, [r7, #4]
	lsls r2, r4, #2
	adds r1, r2, r1
	mov r4, r8
	subs r0, r4, r3
	strb r0, [r1]
	ldr r0, [r7, #4]
	adds r2, r2, r0
	adds r0, r3, #0
	adds r0, #0x78
	strb r0, [r2, #1]
_08097A6E:
	movs r1, #0x80
	lsls r1, r1, #9
	adds r0, r5, r1
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x9f
	ble _08097A12
	mov r2, r9
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x28
	bne _08097A92
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
_08097A92:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8097AA0
sub_8097AA0: @ 0x08097AA0
	push {lr}
	movs r0, #0
	bl SetPrimaryHBlankHandler
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8097AAC
sub_8097AAC: @ 0x08097AAC
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _08097AC8  @ gUnknown_08A18840
	adds r1, r2, #0
	bl Proc_CreateBlockingChild
	adds r1, r0, #0
	adds r1, #0x2a
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08097AC8: .4byte gUnknown_08A18840

	THUMB_FUNC_START sub_8097ACC
sub_8097ACC: @ 0x08097ACC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r1, r0, #0
	adds r1, #0x29
	movs r7, #0
	strb r7, [r1]
	ldr r1, _08097B6C  @ gLCDControlBuffer
	mov ip, r1
	ldrb r1, [r1, #1]
	movs r2, #1
	mov r8, r2
	mov r6, r8
	orrs r1, r6
	movs r2, #2
	mov r9, r2
	mov r6, r9
	orrs r1, r6
	movs r5, #4
	orrs r1, r5
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	movs r2, #0x21
	negs r2, r2
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	movs r2, #0x7f
	ands r1, r2
	mov r2, ip
	strb r1, [r2, #1]
	adds r2, #0x35
	ldrb r1, [r2]
	mov r6, r8
	orrs r1, r6
	mov r6, r9
	orrs r1, r6
	orrs r1, r5
	orrs r1, r4
	orrs r1, r3
	strb r1, [r2]
	mov r3, ip
	adds r3, #0x36
	ldrb r2, [r3]
	movs r1, #2
	negs r1, r1
	ands r1, r2
	movs r2, #3
	negs r2, r2
	ands r1, r2
	subs r2, #2
	ands r1, r2
	subs r2, #4
	ands r1, r2
	subs r2, #8
	ands r1, r2
	strb r1, [r3]
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _08097B70
	mov r0, ip
	adds r0, #0x2f
	strb r7, [r0]
	adds r0, #4
	strb r7, [r0]
	mov r1, ip
	adds r1, #0x2e
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	b _08097B8A
	.align 2, 0
_08097B6C: .4byte gLCDControlBuffer
_08097B70:
	mov r1, ip
	adds r1, #0x2f
	movs r0, #0x78
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x33
	movs r1, #0x50
	strb r1, [r2]
	subs r2, #5
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x32
	strb r1, [r0]
_08097B8A:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8097B98
sub_8097B98: @ 0x08097B98
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r4, _08097C18  @ gLCDControlBuffer
	ldrb r1, [r4, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	ldrb r0, [r2]
	movs r1, #0xf
	subs r1, r1, r0
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #7
	muls r0, r1, r0
	movs r1, #0xe1
	bl __divsi3
	movs r1, #0xa0
	lsls r1, r1, #2
	subs r1, r1, r0
	asrs r5, r1, #4
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _08097C1C
	lsls r1, r5, #1
	adds r2, r1, r5
	adds r0, r4, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #4
	strb r1, [r0]
	movs r3, #0x10
	negs r3, r3
	adds r0, r3, #0
	subs r0, r0, r2
	adds r2, r4, #0
	adds r2, #0x2e
	strb r0, [r2]
	movs r2, #0x60
	negs r2, r2
	adds r0, r2, #0
	subs r0, r0, r1
	adds r1, r4, #0
	adds r1, #0x32
	strb r0, [r1]
	b _08097C40
	.align 2, 0
_08097C18: .4byte gLCDControlBuffer
_08097C1C:
	lsls r2, r5, #1
	adds r1, r2, r5
	movs r0, #0x78
	subs r0, r0, r1
	adds r3, r4, #0
	adds r3, #0x2f
	strb r0, [r3]
	movs r0, #0x50
	subs r0, r0, r2
	adds r3, #4
	strb r0, [r3]
	adds r1, #0x78
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	adds r2, #0x50
	adds r0, #4
	strb r2, [r0]
_08097C40:
	adds r2, r4, #0
	adds r2, #0x35
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r2, #1
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r3, #3
	negs r3, r3
	mov sl, r3
	ands r0, r3
	movs r1, #5
	negs r1, r1
	mov r9, r1
	ands r0, r1
	subs r3, #6
	mov r8, r3
	ands r0, r3
	movs r7, #0x11
	negs r7, r7
	ands r0, r7
	strb r0, [r2]
	cmp r5, #0x27
	ble _08097CB4
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _08097CB4
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	mov r1, sl
	ands r0, r1
	mov r2, r9
	ands r0, r2
	mov r3, r8
	ands r0, r3
	ands r0, r7
	strb r0, [r4, #1]
_08097CB4:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8097CC4
sub_8097CC4: @ 0x08097CC4
	movs r0, #0
	bx lr

	THUMB_FUNC_START sub_8097CC8
sub_8097CC8: @ 0x08097CC8
	push {lr}
	bl GetConvoyItemCount
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8097CD8
sub_8097CD8: @ 0x08097CD8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	ldrh r1, [r4, #0x2c]
	cmp r0, r1
	bne _08097D04
	ldr r2, _08097D10  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_08097D04:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097D10: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_8097D14
sub_8097D14: @ 0x08097D14
	push {r4, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, _08097D4C  @ gUnknown_08A18888
	bl Proc_Create
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2a]
	ldr r2, _08097D50  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097D4C: .4byte gUnknown_08A18888
_08097D50: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_8097D54
sub_8097D54: @ 0x08097D54
	push {lr}
	cmp r0, #0
	beq _08097D64
	adds r1, r0, #0
	adds r1, #0x28
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_08097D64:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8097D68
sub_8097D68: @ 0x08097D68
	push {lr}
	cmp r0, #0
	beq _08097D7C
	adds r1, r0, #0
	adds r1, #0x28
	ldrb r0, [r1]
	cmp r0, #0
	beq _08097D7C
	subs r0, #1
	strb r0, [r1]
_08097D7C:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8097D80
sub_8097D80: @ 0x08097D80
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08097DA4  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xf3
	ands r0, r1
	cmp r0, #0
	beq _08097D9C
	bl CloseHelpBox
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_08097D9C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08097DA4: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_8097DA8
sub_8097DA8: @ 0x08097DA8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r2, #0
	adds r6, r3, #0
	cmp r4, #0
	bge _08097DC4
	cmp r1, #0
	bge _08097DC4
	bl GetUiHandPrevDisplayX
	adds r4, r0, #0
	bl GetUiHandPrevDisplayY
	adds r1, r0, #0
_08097DC4:
	adds r0, r4, #0
	adds r2, r5, #0
	bl StartHelpBox
	ldr r0, _08097DDC  @ gUnknown_08A188A8
	adds r1, r6, #0
	bl Proc_CreateBlockingChild
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08097DDC: .4byte gUnknown_08A188A8

	THUMB_FUNC_START sub_8097DE0
sub_8097DE0: @ 0x08097DE0
	push {r4, lr}
	adds r4, r1, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08097E00
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #0x80
	ands r1, r0
	cmp r1, #0
	bne _08097E00
	movs r0, #1
	b _08097E02
_08097E00:
	movs r0, #0
_08097E02:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8097E08
sub_8097E08: @ 0x08097E08
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	movs r4, #0
_08097E10:
	lsls r1, r4, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl sub_8097DE0
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08097E2A
	adds r6, #1
_08097E2A:
	adds r4, #1
	cmp r4, #4
	ble _08097E10
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8097E38
sub_8097E38: @ 0x08097E38
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4]
	ldr r1, [r4, #4]
	ldr r0, [r0, #0x28]
	ldr r1, [r1, #0x28]
	orrs r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	bne _08097E6A
	adds r0, r4, #0
	bl sub_8031F50
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08097E6A
	adds r0, r4, #0
	bl sub_8097E08
	cmp r0, #0
	beq _08097E6A
	movs r0, #1
	b _08097E6C
_08097E6A:
	movs r0, #0
_08097E6C:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8097E74
sub_8097E74: @ 0x08097E74
	push {r4, lr}
	movs r2, #0
	ldr r0, [r0]
	ldrb r3, [r0, #4]
	ldr r1, _08097E8C  @ gUnknown_08205BFC
_08097E7E:
	movs r4, #0
	ldrsh r0, [r1, r4]
	cmp r3, r0
	bne _08097E90
	movs r0, #0
	b _08097E9A
	.align 2, 0
_08097E8C: .4byte gUnknown_08205BFC
_08097E90:
	adds r1, #2
	adds r2, #1
	cmp r2, #0xa
	bls _08097E7E
	movs r0, #1
_08097E9A:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8097EA0
sub_8097EA0: @ 0x08097EA0
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r7, r1, #0
	adds r5, r2, #0
	adds r6, r3, #0
	cmp r4, r5
	beq _08097F3A
	bl CheckSomethingSomewhere
	cmp r0, #0
	beq _08097F3A
	ldr r0, [r4, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _08097EF6
	lsls r1, r7, #1
	adds r0, r4, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl sub_8097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08097EF6
	adds r0, r4, #0
	bl sub_8097E08
	cmp r0, #1
	bgt _08097EF6
	lsls r1, r6, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl sub_8097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08097F36
_08097EF6:
	ldr r0, [r5, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _08097F3A
	lsls r1, r6, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl sub_8097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08097F3A
	adds r0, r5, #0
	bl sub_8097E08
	cmp r0, #1
	bgt _08097F3A
	lsls r1, r7, #1
	adds r0, r4, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl sub_8097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08097F3A
_08097F36:
	movs r0, #0
	b _08097F3C
_08097F3A:
	movs r0, #1
_08097F3C:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8097F44
sub_8097F44: @ 0x08097F44
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	bl CheckSomethingSomewhere
	cmp r0, #0
	beq _08097F90
	ldr r0, [r4, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _08097F90
	lsls r1, r5, #1
	adds r0, r4, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl sub_8097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08097F90
	adds r0, r4, #0
	bl sub_8097E08
	cmp r0, #1
	bne _08097F90
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_8097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08097F90
	movs r0, #0
	b _08097F92
_08097F90:
	movs r0, #1
_08097F92:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8097F98
sub_8097F98: @ 0x08097F98
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	bl CheckSomethingSomewhere
	cmp r0, #0
	beq _08097FD4
	ldr r0, [r4, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _08097FD4
	lsls r1, r5, #1
	adds r0, r4, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl sub_8097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08097FD4
	adds r0, r4, #0
	bl sub_8097E08
	cmp r0, #1
	bne _08097FD4
	movs r0, #0
	b _08097FD6
_08097FD4:
	movs r0, #1
_08097FD6:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8097FDC
sub_8097FDC: @ 0x08097FDC
	push {r4, lr}
	movs r1, #0
	ldr r4, _08098008  @ gUnknown_0202BD31
	ldr r2, _0809800C  @ gUnknown_02013460
	ldr r3, _08098010  @ gUnknown_08A1D448
_08097FE6:
	ldrb r0, [r4]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1e
	lsls r0, r0, #4
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	strh r0, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0xf
	ble _08097FE6
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08098008: .4byte gUnknown_0202BD31
_0809800C: .4byte gUnknown_02013460
_08098010: .4byte gUnknown_08A1D448

	THUMB_FUNC_START sub_8098014
sub_8098014: @ 0x08098014
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
	ldr r4, _08098034  @ gUnknown_08A188C0
_0809801C:
	adds r0, r6, #0
	bl GetItemType
	ldrb r1, [r4]
	cmp r0, r1
	blt _08098038
	ldrb r1, [r4, #1]
	cmp r0, r1
	bgt _08098038
	adds r0, r5, #0
	b _08098042
	.align 2, 0
_08098034: .4byte gUnknown_08A188C0
_08098038:
	adds r4, #4
	adds r5, #1
	cmp r5, #8
	ble _0809801C
	movs r0, #8
_08098042:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8098048
sub_8098048: @ 0x08098048
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r9, r0
	ldr r0, _08098100  @ gUnknown_02012914
	mov r8, r0
	ldr r0, _08098104  @ gUnknown_02012F56
	movs r1, #0
	strh r1, [r0]
	movs r4, #0
	ldr r1, _08098108  @ gUnknown_02012F54
	mov sl, r0
	adds r2, r1, #0
	ldrh r1, [r2]
	cmp r4, r1
	bge _080980B4
	ldr r1, _0809810C  @ gUnknown_08A188C0
	mov r3, r9
	lsls r0, r3, #2
	adds r6, r0, r1
	mov r7, sl
_08098078:
	ldr r1, _08098110  @ gUnknown_020122D4
	lsls r0, r4, #2
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	str r2, [sp]
	bl GetItemType
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r2, [sp]
	ldrb r1, [r6]
	cmp r0, r1
	bcc _080980AA
	ldrb r3, [r6, #1]
	cmp r0, r3
	bhi _080980AA
	ldr r0, [r5]
	mov r1, r8
	adds r1, #4
	mov r8, r1
	subs r1, #4
	stm r1!, {r0}
	ldrh r0, [r7]
	adds r0, #1
	strh r0, [r7]
_080980AA:
	adds r4, #1
	ldr r0, _08098108  @ gUnknown_02012F54
	ldrh r0, [r0]
	cmp r4, r0
	blt _08098078
_080980B4:
	movs r4, #0
	ldrh r2, [r2]
	cmp r4, r2
	bge _080980F6
	ldr r1, _0809810C  @ gUnknown_08A188C0
	mov r2, r9
	lsls r0, r2, #2
	adds r6, r0, r1
_080980C4:
	ldr r1, _08098110  @ gUnknown_020122D4
	lsls r0, r4, #2
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	bl GetItemType
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r3, [r6]
	cmp r0, r3
	bcc _080980E0
	ldrb r1, [r6, #1]
	cmp r0, r1
	bls _080980EC
_080980E0:
	ldr r0, [r5]
	mov r2, r8
	adds r2, #4
	mov r8, r2
	subs r2, #4
	stm r2!, {r0}
_080980EC:
	adds r4, #1
	ldr r0, _08098108  @ gUnknown_02012F54
	ldrh r0, [r0]
	cmp r4, r0
	blt _080980C4
_080980F6:
	movs r2, #1
	ldr r5, _08098100  @ gUnknown_02012914
	ldr r3, _08098104  @ gUnknown_02012F56
	mov sl, r3
	b _0809811A
	.align 2, 0
_08098100: .4byte gUnknown_02012914
_08098104: .4byte gUnknown_02012F56
_08098108: .4byte gUnknown_02012F54
_0809810C: .4byte gUnknown_08A188C0
_08098110: .4byte gUnknown_020122D4
_08098114:
	lsls r0, r2, #1
	adds r0, r0, r2
	adds r2, r0, #1
_0809811A:
	mov r1, sl
	ldrh r0, [r1]
	movs r1, #3
	str r2, [sp]
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, [sp]
	cmp r2, r0
	blt _08098114
	cmp r2, #0
	ble _080981BC
_08098134:
	adds r4, r2, #0
	mov r3, sl
	ldrh r3, [r3]
	cmp r2, r3
	bge _080981AE
	ldr r0, _080981D8  @ gUnknown_02012F56
	mov sl, r0
_08098142:
	subs r7, r4, r2
	adds r4, #1
	mov r9, r4
	cmp r7, #0
	blt _080981A2
	ldr r1, _080981DC  @ gUnknown_02012914
	mov r8, r1
_08098150:
	lsls r0, r7, #2
	mov r3, r8
	adds r6, r0, r3
	ldrh r0, [r6, #2]
	str r2, [sp]
	bl GetItemIndex
	adds r4, r0, #0
	ldr r2, [sp]
	adds r0, r7, r2
	lsls r0, r0, #2
	mov r1, r8
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	bl GetItemIndex
	ldr r2, [sp]
	cmp r4, r0
	bgt _08098194
	ldrh r0, [r6, #2]
	str r2, [sp]
	bl GetItemIndex
	adds r4, r0, #0
	ldrh r0, [r5, #2]
	bl GetItemIndex
	ldr r2, [sp]
	cmp r4, r0
	bne _080981A2
	ldrh r0, [r6, #2]
	ldrh r3, [r5, #2]
	cmp r0, r3
	bls _0809819C
_08098194:
	ldr r1, [r6]
	ldr r0, [r5]
	str r0, [r6]
	str r1, [r5]
_0809819C:
	subs r7, r7, r2
	cmp r7, #0
	bge _08098150
_080981A2:
	mov r4, r9
	ldr r0, _080981D8  @ gUnknown_02012F56
	ldr r5, _080981DC  @ gUnknown_02012914
	ldrh r0, [r0]
	cmp r4, r0
	blt _08098142
_080981AE:
	adds r0, r2, #0
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	cmp r2, #0
	bgt _08098134
_080981BC:
	ldr r1, _080981E0  @ gUnknown_020122D4
	movs r2, #0xc8
	lsls r2, r2, #1
	adds r0, r5, #0
	bl CpuFastSet
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080981D8: .4byte gUnknown_02012F56
_080981DC: .4byte gUnknown_02012914
_080981E0: .4byte gUnknown_020122D4

	THUMB_FUNC_START SomethingPrepListRelated
SomethingPrepListRelated: @ 0x080981E4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	mov sl, r1
	mov r9, r2
	ldr r6, _080982AC  @ gUnknown_020122D4
	ldr r1, _080982B0  @ gUnknown_02012F54
	movs r0, #0
	strh r0, [r1]
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _0809825E
	movs r5, #1
_08098206:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	adds r7, r5, #1
	cmp r4, #0
	beq _08098258
	ldr r0, [r4]
	cmp r0, #0
	beq _08098258
	ldr r0, [r4, #0xc]
	ldr r1, _080982B4  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne _08098258
	cmp r4, r8
	beq _08098258
	adds r0, r4, #0
	bl GetUnitItemCount
	adds r5, r0, #0
	movs r2, #0
	cmp r2, r5
	bge _08098258
	ldr r3, _080982B0  @ gUnknown_02012F54
	adds r1, r4, #0
	adds r1, #0x1e
_0809823C:
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	strb r0, [r6]
	ldrh r0, [r1]
	strh r0, [r6, #2]
	strb r2, [r6, #1]
	adds r6, #4
	ldrh r0, [r3]
	adds r0, #1
	strh r0, [r3]
	adds r1, #2
	adds r2, #1
	cmp r2, r5
	blt _0809823C
_08098258:
	adds r5, r7, #0
	cmp r5, #0x3f
	ble _08098206
_0809825E:
	movs r0, #1
	mov r1, r9
	ands r0, r1
	cmp r0, #0
	beq _08098298
	bl GetConvoyItemArray
	adds r1, r0, #0
	movs r2, #0
	ldrh r0, [r1]
	cmp r0, #0
	beq _08098298
	movs r4, #0
	ldr r3, _080982B0  @ gUnknown_02012F54
_0809827A:
	ldrh r0, [r1]
	strh r0, [r6, #2]
	strb r4, [r6]
	strb r2, [r6, #1]
	adds r6, #4
	ldrh r0, [r3]
	adds r0, #1
	strh r0, [r3]
	adds r1, #2
	adds r2, #1
	cmp r2, #0x63
	bgt _08098298
	ldrh r0, [r1]
	cmp r0, #0
	bne _0809827A
_08098298:
	mov r0, sl
	bl sub_8098048
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080982AC: .4byte gUnknown_020122D4
_080982B0: .4byte gUnknown_02012F54
_080982B4: .4byte 0x00010004

	THUMB_FUNC_START sub_80982B8
sub_80982B8: @ 0x080982B8
	push {r4, r5, lr}
	bl ClearConvoyItems
	movs r4, #0
	ldr r0, _080982F4  @ gUnknown_02012F54
	ldrh r0, [r0]
	cmp r4, r0
	bcs _080982EC
	ldr r5, _080982F8  @ gUnknown_020122D4
_080982CA:
	lsls r0, r4, #2
	adds r1, r0, r5
	ldrb r0, [r1]
	cmp r0, #0
	bne _080982DE
	ldrh r0, [r1, #2]
	cmp r0, #0
	beq _080982DE
	bl AddItemToConvoy
_080982DE:
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r0, _080982F4  @ gUnknown_02012F54
	ldrh r0, [r0]
	cmp r4, r0
	bcc _080982CA
_080982EC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080982F4: .4byte gUnknown_02012F54
_080982F8: .4byte gUnknown_020122D4

	THUMB_FUNC_START sub_80982FC
sub_80982FC: @ 0x080982FC
	push {r4, r5, lr}
	bl ClearConvoyItems
	movs r4, #0
	movs r5, #0x88
_08098306:
	subs r0, r5, r4
	bl AddItemToConvoy
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0x63
	bls _08098306
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809831C
sub_809831C: @ 0x0809831C
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r2, #0
	movs r1, #0
	movs r4, #1
_08098328:
	adds r0, r3, #0
	asrs r0, r1
	ands r0, r4
	cmp r0, #0
	beq _08098334
	adds r2, #1
_08098334:
	adds r1, #1
	cmp r1, #0xf
	ble _08098328
	adds r0, r2, #0
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8098344
sub_8098344: @ 0x08098344
	push {r4, r5, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	movs r3, #0
	movs r2, #0
	movs r1, #1
_08098352:
	adds r0, r4, #0
	asrs r0, r2
	ands r0, r1
	cmp r0, #0
	beq _08098368
	cmp r3, r5
	bne _08098366
	adds r0, r1, #0
	lsls r0, r2
	b _08098370
_08098366:
	adds r3, #1
_08098368:
	adds r2, #1
	cmp r2, #0xf
	ble _08098352
	movs r0, #0
_08098370:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8098378
sub_8098378: @ 0x08098378
	push {lr}
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
	movs r3, #1
_08098382:
	adds r0, r2, #0
	asrs r0, r1
	ands r0, r3
	cmp r0, #0
	beq _08098390
	adds r0, r1, #0
	b _08098398
_08098390:
	adds r1, #1
	cmp r1, #0xf
	ble _08098382
	movs r0, #0
_08098398:
	pop {r1}
	bx r1

	THUMB_FUNC_START CanUnitPrepScreenUse
CanUnitPrepScreenUse: @ 0x0809839C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl GetUnitItemCount
	adds r6, r0, #0
	movs r4, #0
	cmp r4, r6
	bge _080983CA
_080983AC:
	lsls r1, r4, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl CanUnitUseItemPrepScreen
	cmp r0, #0
	beq _080983C4
	movs r0, #1
	b _080983CC
_080983C4:
	adds r4, #1
	cmp r4, r6
	blt _080983AC
_080983CA:
	movs r0, #0
_080983CC:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80983D4
sub_80983D4: @ 0x080983D4
	push {lr}
	ldr r0, _08098400  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls _080983E6
	movs r2, #0
_080983E6:
	cmp r2, #0
	bne _080983F0
	ldr r1, _08098404  @ 0x04000012
	movs r0, #0xf8
	strh r0, [r1]
_080983F0:
	cmp r2, #0x48
	bne _080983FA
	ldr r1, _08098404  @ 0x04000012
	movs r0, #0xfc
	strh r0, [r1]
_080983FA:
	pop {r0}
	bx r0
	.align 2, 0
_08098400: .4byte 0x04000006
_08098404: .4byte 0x04000012

	THUMB_FUNC_START sub_8098408
sub_8098408: @ 0x08098408
	push {r4, lr}
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x2b
	movs r0, #0xff
	strb r0, [r1]
	adds r1, #2
	movs r0, #1
	negs r0, r0
	strb r0, [r1]
	adds r1, #1
	movs r0, #0
	strb r0, [r1]
	strh r0, [r4, #0x34]
	str r0, [r4, #0x48]
	str r0, [r4, #0x44]
	bl sub_8096484
	adds r1, r4, #0
	adds r1, #0x2c
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8098448
sub_8098448: @ 0x08098448
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08098468  @ gUnknown_08A1B1FC
	ldr r1, _0809846C  @ 0x06013000
	bl CopyDataWithPossibleUncomp
	ldr r0, _08098470  @ gUnknown_08A1B638
	ldr r1, [r4, #0x34]
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08098468: .4byte gUnknown_08A1B1FC
_0809846C: .4byte 0x06013000
_08098470: .4byte gUnknown_08A1B638

	THUMB_FUNC_START sub_8098474
sub_8098474: @ 0x08098474
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	cmp r0, #0
	beq _0809849C
	ldr r1, [r4, #0x2c]
	ldr r2, [r4, #0x30]
	ldr r3, _080984A4  @ gUnknown_08A18928
	ldr r0, [r4, #0x34]
	movs r4, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	movs r4, #0xb0
	lsls r4, r4, #3
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
_0809849C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080984A4: .4byte gUnknown_08A18928

	THUMB_FUNC_START sub_80984A8
sub_80984A8: @ 0x080984A8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, _080984C8  @ gUnknown_08A18944
	bl Proc_Create
	movs r1, #0
	str r1, [r0, #0x38]
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x34]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080984C8: .4byte gUnknown_08A18944

	THUMB_FUNC_START sub_80984CC
sub_80984CC: @ 0x080984CC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080984E8  @ gUnknown_08A18944
	bl Proc_Find
	movs r1, #1
	str r1, [r0, #0x38]
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080984E8: .4byte gUnknown_08A18944

	THUMB_FUNC_START sub_80984EC
sub_80984EC: @ 0x080984EC
	push {lr}
	ldr r0, _080984FC  @ gUnknown_08A18944
	bl Proc_Find
	movs r1, #0
	str r1, [r0, #0x38]
	pop {r0}
	bx r0
	.align 2, 0
_080984FC: .4byte gUnknown_08A18944

	THUMB_FUNC_START sub_8098500
sub_8098500: @ 0x08098500
	push {lr}
	ldr r0, _08098510  @ gUnknown_08A18944
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_08098510: .4byte gUnknown_08A18944

	THUMB_FUNC_START sub_8098514
sub_8098514: @ 0x08098514
	push {lr}
	ldr r0, _08098528  @ gUiFramePaletteA
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	pop {r0}
	bx r0
	.align 2, 0
_08098528: .4byte gUiFramePaletteA

	THUMB_FUNC_START sub_809852C
sub_809852C: @ 0x0809852C
	push {lr}
	sub sp, #4
	adds r2, r0, #0
	ldr r0, [r2, #0x34]
	cmp r0, #0
	beq _0809854A
	ldr r1, [r2, #0x2c]
	ldr r2, [r2, #0x30]
	ldr r3, _08098550  @ gUnknown_08A18964
	movs r0, #0x96
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
_0809854A:
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08098550: .4byte gUnknown_08A18964

	THUMB_FUNC_START sub_8098554
sub_8098554: @ 0x08098554
	push {lr}
	adds r1, r0, #0
	ldr r0, _0809856C  @ gUnknown_08A1898C
	bl Proc_Create
	movs r1, #0
	str r1, [r0, #0x34]
	str r1, [r0, #0x2c]
	str r1, [r0, #0x30]
	pop {r0}
	bx r0
	.align 2, 0
_0809856C: .4byte gUnknown_08A1898C

	THUMB_FUNC_START sub_8098570
sub_8098570: @ 0x08098570
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _0809858C  @ gUnknown_08A1898C
	bl Proc_Find
	movs r1, #1
	str r1, [r0, #0x34]
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809858C: .4byte gUnknown_08A1898C

	THUMB_FUNC_START sub_8098590
sub_8098590: @ 0x08098590
	push {lr}
	ldr r0, _080985A0  @ gUnknown_08A1898C
	bl Proc_Find
	movs r1, #0
	str r1, [r0, #0x34]
	pop {r0}
	bx r0
	.align 2, 0
_080985A0: .4byte gUnknown_08A1898C

	THUMB_FUNC_START sub_80985A4
sub_80985A4: @ 0x080985A4
	push {lr}
	ldr r0, _080985B4  @ gUnknown_08A1898C
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_080985B4: .4byte gUnknown_08A1898C

	THUMB_FUNC_START sub_80985B8
sub_80985B8: @ 0x080985B8
	push {r4, r5, lr}
	ldr r0, _080985F8  @ gUnknown_02013588
	ldr r4, _080985FC  @ gUnknown_0202310E
	adds r1, r4, #0
	bl Text_Draw
	adds r5, r4, #0
	adds r5, #0x10
	bl GetPartyGoldAmount
	adds r2, r0, #0
	adds r0, r5, #0
	movs r1, #2
	bl sub_8004B88
	adds r4, #0x12
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x1e
	bl sub_8004B0C
	movs r0, #0xa8
	movs r1, #0x85
	bl sub_80984CC
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080985F8: .4byte gUnknown_02013588
_080985FC: .4byte gUnknown_0202310E

	THUMB_FUNC_START sub_8098600
sub_8098600: @ 0x08098600
	push {lr}
	ldr r0, _0809861C  @ gUnknown_0202310E
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	bl sub_80984EC
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r0}
	bx r0
	.align 2, 0
_0809861C: .4byte gUnknown_0202310E

	THUMB_FUNC_START sub_8098620
sub_8098620: @ 0x08098620
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x28
	adds r7, r0, #0
	add r1, sp, #4
	ldr r0, _08098970  @ gUnknown_08205C14
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	ldr r0, _08098974  @ gUnknown_08A181E8
	bl SetupBackgrounds
	ldr r4, _08098978  @ gLCDControlBuffer
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	add r0, sp, #4
	bl SetupFaceGfxData
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	ldr r0, _0809897C  @ 0x06017800
	movs r1, #0
	bl SetupDebugFontForOBJ
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	bl Font_InitForUIDefault
	bl ResetIconGraphics_
	movs r0, #4
	bl LoadIconPalettes
	bl LoadUiFrameGraphics
	ldr r0, _08098980  @ gUiFramePaletteD
	movs r1, #0x40
	movs r2, #0x20
	bl CopyToPaletteBuffer
	bl LoadObjUIGfx
	bl sub_80958BC
	bl sub_8095394
	bl sub_80958FC
	adds r1, r7, #0
	adds r1, #0x2a
	movs r4, #0
	strb r0, [r1]
	adds r0, r7, #0
	bl sub_80AD47C
	ldr r0, _08098984  @ sub_809A274
	adds r1, r7, #0
	bl Get6CDifferedLoop6C
	adds r0, r7, #0
	bl sub_80AC9C0
	movs r0, #0
	bl SetPrimaryHBlankHandler
	movs r0, #0
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #1
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #2
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _08098988  @ gPaletteBuffer
	strh r4, [r0]
	bl EnablePaletteSync
	add r4, sp, #0x24
	mov sl, r4
	ldr r5, _0809898C  @ gUnknown_02013498
	movs r4, #0xe
_08098726:
	adds r0, r5, #0
	movs r1, #5
	bl Text_Init
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08098726
	movs r0, #0x2b
	adds r0, r0, r7
	mov r8, r0
	ldr r0, _08098990  @ gUnknown_02013510
	adds r6, r0, #0
	adds r6, #0x28
	adds r5, r0, #0
	movs r4, #4
_08098746:
	adds r0, r5, #0
	movs r1, #7
	bl Text_Init
	adds r0, r6, #0
	movs r1, #7
	bl Text_Init
	adds r6, #8
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08098746
	ldr r4, _08098994  @ gUnknown_02013560
	adds r0, r4, #0
	movs r1, #8
	bl Text_Allocate
	adds r0, r4, #0
	adds r0, #8
	movs r1, #8
	bl Text_Allocate
	adds r0, r4, #0
	adds r0, #0x10
	movs r1, #8
	bl Text_Init
	adds r0, r4, #0
	adds r0, #0x28
	movs r1, #7
	bl Text_Init
	adds r0, r4, #0
	adds r0, #0x30
	movs r1, #5
	bl Text_Init
	ldr r0, _08098998  @ 0x06014000
	movs r1, #1
	negs r1, r1
	bl LoadDialogueBoxGfx
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	movs r1, #0
	mov r9, r1
	str r1, [sp]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	mov r2, r9
	str r2, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	ldr r3, _08098978  @ gLCDControlBuffer
	movs r4, #0x36
	adds r4, r4, r3
	mov ip, r4
	ldrb r2, [r4]
	movs r1, #0x20
	orrs r2, r1
	ldrb r0, [r3, #1]
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r0, r3, #0
	adds r0, #0x2d
	mov r1, r9
	strb r1, [r0]
	adds r0, #4
	movs r4, #4
	strb r4, [r0]
	adds r1, r3, #0
	adds r1, #0x2c
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x44
	strb r0, [r1]
	adds r6, r3, #0
	adds r6, #0x34
	ldrb r0, [r6]
	movs r5, #1
	orrs r0, r5
	movs r3, #2
	orrs r0, r3
	orrs r0, r4
	movs r4, #8
	orrs r0, r4
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r6]
	orrs r2, r5
	orrs r2, r3
	movs r0, #5
	negs r0, r0
	ands r2, r0
	orrs r2, r4
	orrs r2, r1
	mov r3, ip
	strb r2, [r3]
	ldr r2, _0809899C  @ 0x0000FFFC
	movs r0, #0
	movs r1, #4
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #4
	bl BG_SetPosition
	ldr r1, _080989A0  @ 0x0000FFD8
	ldrh r2, [r7, #0x34]
	subs r2, #4
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl BG_SetPosition
	movs r0, #7
	bl BG_EnableSyncByMask
	bl SetupMapSpritesPalettes
	mov r4, r9
	str r4, [sp, #0x24]
	ldr r1, _080989A4  @ gUnknown_02022C08
	ldr r2, _080989A8  @ 0x01000008
	mov r0, sl
	bl CpuFastSet
	bl SMS_FlushIndirect
	ldr r0, _080989AC  @ gUnknown_08A1D4E8
	ldr r1, _080989B0  @ 0x06013E00
	bl CopyDataWithPossibleUncomp
	movs r0, #0x3c
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0xd0
	bl sub_80ACA4C
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_80AD4A0
	bl sub_8095A1C
	mov r1, r8
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _080988E2
	adds r5, r0, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	ldrh r0, [r7, #0x34]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl sub_80AC9D4
	mov r2, r8
	ldrb r0, [r2]
	bl sub_8095354
	adds r1, r0, #0
	ldr r0, _080989B4  @ 0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x3c
	movs r3, #0x4c
	bl sub_8099E98
_080988E2:
	movs r3, #0x80
	lsls r3, r3, #2
	movs r4, #4
	str r4, [sp]
	adds r0, r7, #0
	movs r1, #0xe0
	movs r2, #0xb
	bl sub_8097748
	ldrh r4, [r7, #0x34]
	bl sub_8095374
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl sub_80976CC
	bl sub_8097668
	bl sub_8095928
	movs r0, #1
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	mov r0, r9
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	mov r1, r9
	str r1, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	ldr r0, _080989B8  @ sub_80983D4
	bl SetPrimaryHBlankHandler
	movs r0, #0xa8
	movs r1, #0x85
	movs r2, #0xb
	adds r3, r7, #0
	bl sub_80984A8
	adds r0, r7, #0
	bl sub_8098554
	add sp, #0x28
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08098970: .4byte gUnknown_08205C14
_08098974: .4byte gUnknown_08A181E8
_08098978: .4byte gLCDControlBuffer
_0809897C: .4byte 0x06017800
_08098980: .4byte gUiFramePaletteD
_08098984: .4byte sub_809A274
_08098988: .4byte gPaletteBuffer
_0809898C: .4byte gUnknown_02013498
_08098990: .4byte gUnknown_02013510
_08098994: .4byte gUnknown_02013560
_08098998: .4byte 0x06014000
_0809899C: .4byte 0x0000FFFC
_080989A0: .4byte 0x0000FFD8
_080989A4: .4byte gUnknown_02022C08
_080989A8: .4byte 0x01000008
_080989AC: .4byte gUnknown_08A1D4E8
_080989B0: .4byte 0x06013E00
_080989B4: .4byte 0x00000503
_080989B8: .4byte sub_80983D4

	THUMB_FUNC_START sub_80989BC
sub_80989BC: @ 0x080989BC
	push {lr}
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_8095354
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_80953C0
	bl DeleteEach6CDifferedLoop
	bl sub_80AD580
	bl sub_80ACB00
	movs r0, #0
	bl sub_8099F50
	movs r0, #1
	bl sub_8099F50
	bl EndBG3Slider_
	bl EndHelpPromptSprite
	bl Delete6CMenuScroll
	bl sub_8098500
	bl sub_80985A4
	movs r0, #0
	bl SetPrimaryHBlankHandler
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8098A04
sub_8098A04: @ 0x08098A04
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	adds r5, r0, #0
	movs r1, #0xa
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r4, _08098A68  @ gUnknown_02013560
	adds r0, r4, #0
	bl Text_Clear
	movs r0, #8
	adds r0, r0, r4
	mov r8, r0
	bl Text_Clear
	ldr r0, _08098A6C  @ 0x00000583
	bl GetStringFromIndex
	adds r1, r5, #0
	adds r1, #0x42
	movs r6, #0
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	ldr r0, _08098A70  @ 0x00000584
	bl GetStringFromIndex
	adds r5, #0xc2
	str r6, [sp]
	str r0, [sp, #4]
	mov r0, r8
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08098A68: .4byte gUnknown_02013560
_08098A6C: .4byte 0x00000583
_08098A70: .4byte 0x00000584

	THUMB_FUNC_START sub_8098A74
sub_8098A74: @ 0x08098A74
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	movs r1, #0xa
	movs r2, #8
	movs r3, #0
	bl TileMap_FillRect
	ldr r4, _08098AB0  @ gUnknown_02013560
	adds r0, r4, #0
	bl Text_Clear
	adds r0, r4, #0
	adds r0, #8
	bl Text_Clear
	adds r4, #0x10
	adds r0, r4, #0
	bl Text_Clear
	bl sub_80C4070
	cmp r0, #1
	beq _08098AC8
	cmp r0, #1
	bgt _08098AB4
	cmp r0, #0
	beq _08098ABE
	b _08098ADA
	.align 2, 0
_08098AB0: .4byte gUnknown_02013560
_08098AB4:
	cmp r0, #2
	beq _08098AD0
	cmp r0, #3
	beq _08098AD8
	b _08098ADA
_08098ABE:
	ldr r5, _08098AC4  @ 0x00000672
	b _08098ADA
	.align 2, 0
_08098AC4: .4byte 0x00000672
_08098AC8:
	ldr r5, _08098ACC  @ 0x00000673
	b _08098ADA
	.align 2, 0
_08098ACC: .4byte 0x00000673
_08098AD0:
	ldr r5, _08098AD4  @ 0x00000674
	b _08098ADA
	.align 2, 0
_08098AD4: .4byte 0x00000674
_08098AD8:
	ldr r5, _08098B38  @ 0x00000675
_08098ADA:
	adds r0, r5, #0
	bl GetStringFromIndex
	ldr r4, _08098B3C  @ gUnknown_02013560
	adds r1, r6, #0
	adds r1, #0x80
	movs r5, #0
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #4
	bl DrawTextInline
	ldr r0, _08098B40  @ 0x00000583
	bl GetStringFromIndex
	adds r2, r4, #0
	adds r2, #8
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r6, r3
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #0
	movs r3, #4
	bl DrawTextInline
	ldr r0, _08098B44  @ 0x00000584
	bl GetStringFromIndex
	adds r4, #0x10
	movs r2, #0xc0
	lsls r2, r2, #1
	adds r1, r6, r2
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #4
	bl DrawTextInline
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08098B38: .4byte 0x00000675
_08098B3C: .4byte gUnknown_02013560
_08098B40: .4byte 0x00000583
_08098B44: .4byte 0x00000584

	THUMB_FUNC_START sub_8098B48
sub_8098B48: @ 0x08098B48
	push {lr}
	sub sp, #4
	ldr r0, _08098B64  @ 0x0000A440
	str r0, [sp]
	movs r0, #0x88
	movs r1, #0x59
	movs r2, #9
	movs r3, #4
	bl sub_809A31C
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08098B64: .4byte 0x0000A440

	THUMB_FUNC_START sub_8098B68
sub_8098B68: @ 0x08098B68
	push {lr}
	sub sp, #4
	bl sub_80C4070
	cmp r0, #3
	bne _08098B8C
	ldr r0, _08098B88  @ 0x0000A440
	str r0, [sp]
	movs r0, #0x88
	movs r1, #0x51
	movs r2, #9
	movs r3, #6
	bl sub_809A31C
	b _08098B9C
	.align 2, 0
_08098B88: .4byte 0x0000A440
_08098B8C:
	ldr r0, _08098BA4  @ 0x0000A440
	str r0, [sp]
	movs r0, #0x88
	movs r1, #0x51
	movs r2, #9
	movs r3, #6
	bl sub_809A31C
_08098B9C:
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08098BA4: .4byte 0x0000A440

	THUMB_FUNC_START sub_8098BA8
sub_8098BA8: @ 0x08098BA8
	push {lr}
	sub sp, #4
	ldr r0, _08098BC4  @ 0x0000A440
	str r0, [sp]
	movs r0, #8
	movs r1, #0x5c
	movs r2, #0xa
	movs r3, #5
	bl sub_809A31C
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08098BC4: .4byte 0x0000A440

	THUMB_FUNC_START sub_8098BC8
sub_8098BC8: @ 0x08098BC8
	push {lr}
	sub sp, #4
	ldr r0, _08098BE4  @ 0x0000A840
	str r0, [sp]
	movs r0, #0x88
	movs r1, #0x51
	movs r2, #9
	movs r3, #6
	bl sub_809A31C
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08098BE4: .4byte 0x0000A840

	THUMB_FUNC_START sub_8098BE8
sub_8098BE8: @ 0x08098BE8
	push {lr}
	ldr r0, _08098C04  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08098C0C
	ldr r0, _08098C08  @ sub_8098B68
	bl Find6CDifferedLoop
	bl Proc_Delete
	b _08098C16
	.align 2, 0
_08098C04: .4byte gUnknown_03005280
_08098C08: .4byte sub_8098B68
_08098C0C:
	ldr r0, _08098C30  @ sub_8098B48
	bl Find6CDifferedLoop
	bl Proc_Delete
_08098C16:
	ldr r0, _08098C34  @ sub_8098BA8
	bl Find6CDifferedLoop
	bl Proc_Delete
	ldr r0, _08098C38  @ sub_8098BC8
	bl Find6CDifferedLoop
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_08098C30: .4byte sub_8098B48
_08098C34: .4byte sub_8098BA8
_08098C38: .4byte sub_8098BC8

	THUMB_FUNC_START sub_8098C3C
sub_8098C3C: @ 0x08098C3C
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r2, r0, #0
	adds r4, r1, #0
	mov r1, sp
	ldr r0, _08098C80  @ gUnknown_08205C34
	ldm r0!, {r3, r5, r6}
	stm r1!, {r3, r5, r6}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, _08098C84  @ gUnknown_08A1D8D0
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r2, r2, r1
	adds r1, r2, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _08098C88  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r1, [r0]
	movs r0, #0xc
	ands r0, r1
	add r0, sp
	ldr r0, [r0]
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08098C80: .4byte gUnknown_08205C34
_08098C84: .4byte gUnknown_08A1D8D0
_08098C88: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_8098C8C
sub_8098C8C: @ 0x08098C8C
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, _08098CB4  @ gUnknown_08A1D7DC
	ldr r1, _08098CB8  @ 0x06010000
	adds r2, r2, r1
	adds r1, r2, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _08098CBC  @ gUiFramePaletteD
	adds r4, #0x10
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08098CB4: .4byte gUnknown_08A1D7DC
_08098CB8: .4byte 0x06010000
_08098CBC: .4byte gUiFramePaletteD

	THUMB_FUNC_START sub_8098CC0
sub_8098CC0: @ 0x08098CC0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	bl LoadUiFrameGraphics
	movs r0, #1
	movs r1, #0
	movs r2, #4
	bl BG_SetPosition
	adds r0, r6, #0
	bl sub_809A08C
	movs r0, #0
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #1
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #2
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0xc0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_8098C3C
	movs r0, #0x80
	lsls r0, r0, #4
	movs r1, #0xa
	bl sub_8098C8C
	ldr r0, _08098D78  @ gUnknown_08A1B8B8
	ldr r4, _08098D7C  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _08098D80  @ gBG1TilemapBuffer
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl CallARM_FillTileRect
	ldr r0, _08098D84  @ gUiFramePaletteD
	movs r1, #0x40
	movs r2, #0x20
	bl CopyToPaletteBuffer
	adds r5, r6, #0
	adds r5, #0x2a
	ldrb r0, [r5]
	bl sub_8095354
	adds r1, r0, #0
	ldr r0, _08098D88  @ 0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x3c
	movs r3, #0x4c
	bl sub_8099E98
	ldr r4, _08098D8C  @ gUnknown_02013510
	ldr r7, _08098D90  @ gUnknown_02022EEC
	ldrb r0, [r5]
	bl sub_8095354
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r7, #0
	movs r3, #2
	bl sub_8099F7C
	ldr r0, _08098D94  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08098D98
	adds r0, r7, #0
	subs r0, #0x20
	bl sub_8098A74
	b _08098DA0
	.align 2, 0
_08098D78: .4byte gUnknown_08A1B8B8
_08098D7C: .4byte gUnknown_02020188
_08098D80: .4byte gBG1TilemapBuffer
_08098D84: .4byte gUiFramePaletteD
_08098D88: .4byte 0x00000503
_08098D8C: .4byte gUnknown_02013510
_08098D90: .4byte gUnknown_02022EEC
_08098D94: .4byte gUnknown_03005280
_08098D98:
	adds r0, r7, #0
	adds r0, #0x60
	bl sub_8098A04
_08098DA0:
	adds r1, r6, #0
	adds r1, #0x32
	movs r0, #0
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r5, [r0]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x14
	ldrh r0, [r6, #0x34]
	subs r0, #4
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r4, #0
	movs r2, #7
	bl sub_80AD51C
	adds r0, r6, #0
	movs r1, #0
	bl sub_809A504
	bl sub_80ACAE4
	bl sub_80ACAA4
	movs r0, #0x78
	movs r1, #0x8c
	movs r2, #9
	adds r3, r6, #0
	bl StartHelpPromptSprite
	bl sub_8098BE8
	ldr r0, _08098E14  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08098E1C
	ldr r0, _08098E18  @ sub_8098B68
	adds r1, r6, #0
	bl Get6CDifferedLoop6C
	b _08098E24
	.align 2, 0
_08098E14: .4byte gUnknown_03005280
_08098E18: .4byte sub_8098B68
_08098E1C:
	ldr r0, _08098E3C  @ sub_8098B48
	adds r1, r6, #0
	bl Get6CDifferedLoop6C
_08098E24:
	bl sub_80985B8
	bl sub_8098590
	movs r0, #7
	bl BG_EnableSyncByMask
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08098E3C: .4byte sub_8098B48

	THUMB_FUNC_START sub_8098E40
sub_8098E40: @ 0x08098E40
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	mov r3, r8
	adds r3, #0x2a
	ldrb r7, [r3]
	ldr r0, _08098F1C  @ gKeyStatusPtr
	ldr r2, [r0]
	ldrh r5, [r2, #6]
	mov r4, r8
	adds r4, #0x31
	movs r0, #4
	strb r0, [r4]
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08098E6E
	ldrh r5, [r2, #4]
	movs r0, #8
	strb r0, [r4]
_08098E6E:
	movs r0, #0x40
	ands r0, r5
	cmp r0, #0
	beq _08098E80
	ldrb r0, [r3]
	subs r0, #3
	cmp r0, #0
	blt _08098E80
	strb r0, [r3]
_08098E80:
	movs r0, #0x80
	ands r0, r5
	mov r6, r8
	adds r6, #0x2a
	cmp r0, #0
	beq _08098E9E
	ldrb r4, [r6]
	adds r4, #3
	bl sub_8095374
	cmp r4, r0
	bge _08098E9E
	ldrb r0, [r6]
	adds r0, #3
	strb r0, [r6]
_08098E9E:
	movs r0, #0x20
	ands r0, r5
	cmp r0, #0
	beq _08098EBA
	ldrb r4, [r6]
	adds r0, r4, #0
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08098EBA
	subs r0, r4, #1
	strb r0, [r6]
_08098EBA:
	movs r0, #0x10
	ands r5, r0
	cmp r5, #0
	beq _08098EE4
	ldrb r4, [r6]
	adds r0, r4, #0
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08098EE4
	adds r4, #1
	bl sub_8095374
	cmp r4, r0
	bge _08098EE4
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
_08098EE4:
	ldrb r0, [r6]
	cmp r0, r7
	beq _08098FA0
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x14
	bl sub_8095374
	subs r0, #1
	movs r1, #3
	bl __divsi3
	lsls r2, r0, #4
	mov r0, r8
	ldrh r1, [r0, #0x34]
	subs r0, r4, r1
	cmp r0, #0x20
	ble _08098F20
	adds r0, r1, #0
	adds r0, #0x30
	cmp r0, r2
	bge _08098F20
	lsrs r1, r1, #4
	adds r1, #4
	b _08098F34
	.align 2, 0
_08098F1C: .4byte gKeyStatusPtr
_08098F20:
	mov r1, r8
	ldrh r0, [r1, #0x34]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r1, #0xf
	bgt _08098F54
	cmp r7, #0
	beq _08098F54
	lsrs r1, r7, #4
	subs r1, #1
_08098F34:
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r0, r8
	movs r2, #0
	bl sub_809A114
	ldrb r0, [r6]
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x12
	adds r0, #0x18
	bl sub_80AD4E4
	b _08098F84
_08098F54:
	ldrb r5, [r6]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x14
	subs r0, r7, #4
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r4, #0
	movs r2, #7
	bl sub_80AD51C
_08098F84:
	ldr r0, _08098F9C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08098F96
	movs r0, #0x65
	bl m4aSongNumStart
_08098F96:
	movs r0, #1
	b _08098FA2
	.align 2, 0
_08098F9C: .4byte gUnknown_0202BCF0
_08098FA0:
	movs r0, #0
_08098FA2:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_8098FAC
sub_8098FAC: @ 0x08098FAC
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x14
	bl sub_8095374
	subs r0, #1
	movs r1, #3
	bl __divsi3
	lsls r2, r0, #4
	ldrh r1, [r6, #0x34]
	subs r0, r7, r1
	cmp r0, #0x20
	ble _0809904C
	adds r0, r1, #0
	adds r0, #0x30
	cmp r0, r2
	bge _0809904C
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r2, [r0]
	adds r2, r1, r2
	strh r2, [r6, #0x34]
	ldr r1, _080990D0  @ 0x0000FFD8
	subs r2, #4
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl BG_SetPosition
	adds r1, r6, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _0809902C
	adds r5, r0, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	ldrh r0, [r6, #0x34]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl sub_80AC9D4
_0809902C:
	ldrh r4, [r6, #0x34]
	bl sub_8095374
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl sub_80976CC
_0809904C:
	ldrh r1, [r6, #0x34]
	subs r0, r7, r1
	cmp r0, #0xf
	bgt _080990C8
	cmp r1, #0
	beq _080990C8
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r2, [r0]
	subs r2, r1, r2
	strh r2, [r6, #0x34]
	ldr r1, _080990D0  @ 0x0000FFD8
	subs r2, #4
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl BG_SetPosition
	adds r1, r6, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _080990A8
	adds r5, r0, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	ldrh r0, [r6, #0x34]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl sub_80AC9D4
_080990A8:
	ldrh r4, [r6, #0x34]
	bl sub_8095374
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl sub_80976CC
_080990C8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080990D0: .4byte 0x0000FFD8

	THUMB_FUNC_START sub_80990D4
sub_80990D4: @ 0x080990D4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80989BC
	movs r0, #0x31
	bl SetStatScreenConfig
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_8095354
	adds r1, r4, #0
	bl StartStatScreen
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8099100
sub_8099100: @ 0x08099100
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8098620
	bl sub_8095674
	adds r1, r4, #0
	adds r1, #0x2a
	strb r0, [r1]
	adds r0, r4, #0
	bl sub_809A08C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8099120
sub_8099120: @ 0x08099120
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	ldrh r0, [r6, #0x34]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	beq _08099132
	b _0809930E
_08099132:
	ldr r0, _0809914C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08099150
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	b _08099314
	.align 2, 0
_0809914C: .4byte gKeyStatusPtr
_08099150:
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	bne _0809915C
	b _08099288
_0809915C:
	ldr r0, _080991A4  @ gUnknown_03005280
	ldrb r1, [r0]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _08099202
	bl sub_80C4070
	cmp r0, #2
	beq _080991A8
	cmp r0, #3
	bne _080991FC
	adds r4, r6, #0
	adds r4, #0x2a
	ldrb r0, [r4]
	adds r5, r6, #0
	adds r5, #0x2b
	strb r0, [r5]
	ldrb r7, [r4]
	adds r0, r7, #0
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08099230
	bl sub_8095374
	subs r0, #1
	cmp r7, r0
	bge _08099230
	ldrb r0, [r4]
	adds r0, #1
	b _08099234
	.align 2, 0
_080991A4: .4byte gUnknown_03005280
_080991A8:
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_8095354
	movs r1, #0x72
	bl UnitHasItem
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080991E0
	ldr r0, _080991DC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080991D0
	movs r0, #0x6a
	bl m4aSongNumStart
_080991D0:
	adds r0, r6, #0
	movs r1, #0xd
	bl Proc_GotoLabel
	b _08099314
	.align 2, 0
_080991DC: .4byte gUnknown_0202BCF0
_080991E0:
	ldr r0, _080991F8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080991EE
	b _08099314
_080991EE:
	movs r0, #0x6c
	bl m4aSongNumStart
	b _08099314
	.align 2, 0
_080991F8: .4byte gUnknown_0202BCF0
_080991FC:
	adds r0, r6, #0
	movs r1, #0xd
	b _0809926A
_08099202:
	adds r4, r6, #0
	adds r4, #0x2a
	ldrb r0, [r4]
	adds r5, r6, #0
	adds r5, #0x2b
	strb r0, [r5]
	ldrb r7, [r4]
	adds r0, r7, #0
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08099230
	bl sub_8095374
	subs r0, #1
	cmp r7, r0
	bge _08099230
	ldrb r0, [r4]
	adds r0, #1
	b _08099234
_08099230:
	ldrb r0, [r4]
	subs r0, #1
_08099234:
	strb r0, [r4]
	ldrb r5, [r5]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	ldrh r0, [r6, #0x34]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl sub_80AC9D4
	adds r0, r6, #0
	movs r1, #2
_0809926A:
	bl Proc_GotoLabel
	ldr r0, _08099284  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099314
	movs r0, #0x6a
	bl m4aSongNumStart
	b _08099314
	.align 2, 0
_08099284: .4byte gUnknown_0202BCF0
_08099288:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080992CC
	ldr r0, _080992C4  @ gUnknown_03005280
	ldrb r1, [r0]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _080992A8
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
_080992A8:
	adds r0, r6, #0
	movs r1, #0xd
	bl Proc_GotoLabel
	ldr r0, _080992C8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099314
	movs r0, #0x6b
	bl m4aSongNumStart
	b _08099314
	.align 2, 0
_080992C4: .4byte gUnknown_03005280
_080992C8: .4byte gUnknown_0202BCF0
_080992CC:
	adds r0, r6, #0
	bl sub_8098E40
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809930E
	adds r7, r6, #0
	adds r7, #0x2a
	ldrb r0, [r7]
	bl sub_8095354
	adds r1, r0, #0
	ldr r0, _0809931C  @ 0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x3c
	movs r3, #0x4c
	bl sub_8099E98
	ldr r4, _08099320  @ gUnknown_02013510
	ldr r5, _08099324  @ gUnknown_02022EEC
	ldrb r0, [r7]
	bl sub_8095354
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #2
	bl sub_8099F7C
	movs r0, #1
	bl BG_EnableSyncByMask
_0809930E:
	adds r0, r6, #0
	bl sub_8098FAC
_08099314:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809931C: .4byte 0x00000503
_08099320: .4byte gUnknown_02013510
_08099324: .4byte gUnknown_02022EEC

	THUMB_FUNC_START sub_8099328
sub_8099328: @ 0x08099328
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r9, r0
	mov r8, r1
	mov sl, r2
	mov r0, r8
	movs r1, #0xa
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r7, _08099454  @ gUnknown_02013560
	adds r0, r7, #0
	bl Text_Clear
	bl sub_8095374
	movs r4, #0
	cmp r0, #1
	bgt _08099358
	movs r4, #1
_08099358:
	ldr r0, _08099458  @ 0x00000594
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r7, #0
	movs r1, #0
	adds r2, r4, #0
	bl Text_InsertString
	bl sub_8095374
	movs r4, #0
	cmp r0, #1
	bgt _08099376
	movs r4, #1
_08099376:
	ldr r0, _0809945C  @ 0x00000595
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r7, #0
	movs r1, #0x20
	adds r2, r4, #0
	bl Text_InsertString
	mov r1, r8
	adds r1, #0x40
	adds r0, r7, #0
	bl Text_Draw
	adds r5, r7, #0
	adds r5, #8
	adds r0, r5, #0
	bl Text_Clear
	mov r0, sl
	bl CanUnitPrepScreenUse
	movs r4, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080993AC
	movs r4, #1
_080993AC:
	ldr r0, _08099460  @ 0x00000596
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0
	adds r2, r4, #0
	bl Text_InsertString
	movs r6, #0
	mov r4, r9
	adds r4, #0x2c
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _080993CE
	movs r6, #1
_080993CE:
	ldr r0, _08099464  @ 0x0000059A
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x20
	adds r2, r6, #0
	bl Text_InsertString
	mov r1, r8
	adds r1, #0xc0
	adds r0, r5, #0
	bl Text_Draw
	adds r5, r7, #0
	adds r5, #0x10
	adds r0, r5, #0
	bl Text_Clear
	movs r6, #0
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _08099400
	movs r6, #1
_08099400:
	movs r0, #0xb3
	lsls r0, r0, #3
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0
	adds r2, r6, #0
	bl Text_InsertString
	ldr r0, _08099468  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08099470
	adds r6, r5, #0
	movs r5, #0
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	beq _0809943E
	mov r0, sl
	bl GetUnitItemCount
	cmp r0, #0
	ble _0809943E
	bl CheckSomethingSomewhere
	cmp r0, #0
	beq _08099440
_0809943E:
	movs r5, #1
_08099440:
	ldr r0, _0809946C  @ 0x00000597
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r6, #0
	movs r1, #0x20
	adds r2, r5, #0
	bl Text_InsertString
	b _080994A2
	.align 2, 0
_08099454: .4byte gUnknown_02013560
_08099458: .4byte 0x00000594
_0809945C: .4byte 0x00000595
_08099460: .4byte 0x00000596
_08099464: .4byte 0x0000059A
_08099468: .4byte gUnknown_03005280
_0809946C: .4byte 0x00000597
_08099470:
	bl CheckSomethingSomewhere
	cmp r0, #0
	beq _08099490
	ldr r0, _0809948C  @ 0x00000599
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x20
	movs r2, #1
	bl Text_InsertString
	b _080994A2
	.align 2, 0
_0809948C: .4byte 0x00000599
_08099490:
	ldr r0, _080994BC  @ 0x00000599
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x20
	movs r2, #0
	bl Text_InsertString
_080994A2:
	ldr r0, _080994C0  @ gUnknown_02013570
	movs r1, #0xa0
	lsls r1, r1, #1
	add r1, r8
	bl Text_Draw
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080994BC: .4byte 0x00000599
_080994C0: .4byte gUnknown_02013570

	THUMB_FUNC_START sub_80994C4
sub_80994C4: @ 0x080994C4
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r4, r0, #0
	movs r0, #0x2b
	adds r0, r0, r4
	mov r9, r0
	ldrb r0, [r0]
	bl sub_8095354
	adds r6, r0, #0
	adds r4, #0x32
	movs r1, #0
	mov r8, r1
	movs r0, #1
	strb r0, [r4]
	movs r0, #0
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r5, _080995B8  @ gUnknown_02013510
	ldr r7, _080995BC  @ gUnknown_02022EEC
	mov r2, r9
	ldrb r0, [r2]
	bl sub_8095354
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r7, #0
	movs r3, #0
	bl sub_8099F7C
	ldr r0, _080995C0  @ gUnknown_08A1B8B8
	ldr r4, _080995C4  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080995C8  @ gBG1TilemapBuffer
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl CallARM_FillTileRect
	movs r0, #0
	movs r1, #0x1f
	bl sub_8098570
	adds r0, r6, #0
	bl GetUnitPortraitId
	ldr r3, _080995CC  @ 0xFFFFFEC0
	adds r1, r7, r3
	movs r2, #0x9c
	lsls r2, r2, #2
	mov r3, r8
	str r3, [sp]
	movs r3, #3
	bl sub_8005988
	adds r5, #0x80
	adds r0, r5, #0
	bl Text_Clear
	ldr r0, [r6]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r4, r0, #0
	movs r0, #0x28
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	ldr r0, _080995D0  @ 0xFFFFFECC
	adds r1, r7, r0
	mov r2, r8
	str r2, [sp]
	str r4, [sp, #4]
	adds r0, r5, #0
	movs r2, #0
	bl DrawTextInline
	adds r0, r7, #0
	subs r0, #0xb6
	movs r1, #3
	movs r2, #0x24
	movs r3, #0x25
	bl sub_8004D5C
	adds r0, r7, #0
	subs r0, #0xae
	movs r1, #3
	movs r2, #0x1d
	bl sub_8004B0C
	adds r0, r7, #0
	subs r0, #0xb0
	movs r2, #8
	ldrsb r2, [r6, r2]
	movs r1, #2
	bl DrawDecNumber
	adds r0, r7, #0
	subs r0, #0xaa
	ldrb r2, [r6, #9]
	movs r1, #2
	bl DrawDecNumber
	movs r0, #7
	bl BG_EnableSyncByMask
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080995B8: .4byte gUnknown_02013510
_080995BC: .4byte gUnknown_02022EEC
_080995C0: .4byte gUnknown_08A1B8B8
_080995C4: .4byte gUnknown_02020188
_080995C8: .4byte gBG1TilemapBuffer
_080995CC: .4byte 0xFFFFFEC0
_080995D0: .4byte 0xFFFFFECC

	THUMB_FUNC_START sub_80995D4
sub_80995D4: @ 0x080995D4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _0809963C  @ gUnknown_02022F06
	movs r1, #0xc
	movs r2, #0x14
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #0xc0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_8098C3C
	movs r0, #0x80
	lsls r0, r0, #4
	movs r1, #0xa
	bl sub_8098C8C
	adds r0, r6, #0
	bl sub_80994C4
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r5, [r0]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x14
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x14
	ldrh r0, [r6, #0x34]
	subs r0, #4
	subs r1, r1, r0
	adds r0, r4, #0
	bl sub_809A21C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08099640
	bl sub_80ACAC8
	b _08099644
	.align 2, 0
_0809963C: .4byte gUnknown_02022F06
_08099640:
	bl sub_80ACAE4
_08099644:
	bl sub_8098BE8
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8099654
sub_8099654: @ 0x08099654
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _080996A8  @ gUnknown_02022F0E
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8095354
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8099328
	ldr r0, _080996AC  @ sub_8098BC8
	adds r1, r4, #0
	bl Get6CDifferedLoop6C
	movs r0, #0x78
	movs r1, #0x8c
	movs r2, #9
	adds r3, r4, #0
	bl StartHelpPromptSprite
	adds r4, #0x2e
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x90
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	movs r3, #0x80
	lsls r3, r3, #3
	movs r2, #3
	bl sub_80AD51C
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080996A8: .4byte gUnknown_02022F0E
_080996AC: .4byte sub_8098BC8

	THUMB_FUNC_START sub_80996B0
sub_80996B0: @ 0x080996B0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8095354
	adds r5, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl sub_809A504
	ldr r0, _080996E0  @ gUnknown_02013510
	ldr r1, _080996E4  @ gUnknown_02022EEC
	adds r2, r5, #0
	movs r3, #0
	bl sub_8099F7C
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080996E0: .4byte gUnknown_02013510
_080996E4: .4byte gUnknown_02022EEC

	THUMB_FUNC_START sub_80996E8
sub_80996E8: @ 0x080996E8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r6, r5, #0
	adds r6, #0x2e
	ldrb r0, [r6]
	mov r8, r0
	adds r4, r5, #0
	adds r4, #0x2d
	ldrb r0, [r4]
	cmp r0, #0xff
	beq _08099704
	b _08099930
_08099704:
	ldr r0, _08099734  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08099754
	mov r1, r8
	strb r1, [r4]
	ldr r0, _08099738  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0809973C
	ldrb r1, [r6]
	adds r0, r2, #0
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x88
	b _08099A4C
	.align 2, 0
_08099734: .4byte gKeyStatusPtr
_08099738: .4byte gUnknown_03005280
_0809973C:
	ldrb r1, [r6]
	adds r0, r2, #0
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x88
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	ldr r3, _08099750  @ gUnknown_08A188F8
	b _08099A54
	.align 2, 0
_08099750: .4byte gUnknown_08A188F8
_08099754:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0809975E
	b _080998F0
_0809975E:
	mov r0, r8
	cmp r0, #5
	bls _08099766
	b _080998D4
_08099766:
	lsls r0, r0, #2
	ldr r1, _08099770  @ _08099774
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08099770: .4byte _08099774
_08099774: @ jump table
	.4byte _0809978C @ case 0
	.4byte _0809979C @ case 1
	.4byte _080997AC @ case 2
	.4byte _080997C8 @ case 3
	.4byte _08099854 @ case 4
	.4byte _08099868 @ case 5
_0809978C:
	bl sub_8095374
	cmp r0, #1
	bgt _08099796
	b _080998D4
_08099796:
	adds r0, r5, #0
	movs r1, #4
	b _080998B4
_0809979C:
	bl sub_8095374
	cmp r0, #1
	bgt _080997A6
	b _080998D4
_080997A6:
	adds r0, r5, #0
	movs r1, #8
	b _080998B4
_080997AC:
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8095354
	bl CanUnitPrepScreenUse
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080997C2
	b _080998D4
_080997C2:
	adds r0, r5, #0
	movs r1, #9
	b _080998B4
_080997C8:
	bl CheckSomethingSomewhere
	cmp r0, #0
	beq _080997F8
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8095354
	ldr r0, [r0, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _080997F8
	subs r1, #9
	ldr r2, _080997F4  @ 0x0000088B
	adds r0, r1, #0
	adds r3, r5, #0
	bl sub_8097DA8
	b _08099A90
	.align 2, 0
_080997F4: .4byte 0x0000088B
_080997F8:
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080998D4
	adds r6, r5, #0
	adds r6, #0x2b
	ldrb r0, [r6]
	bl sub_8095354
	bl sub_809A538
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080998D4
	ldr r4, _0809984C  @ gUnknown_02022F0E
	ldrb r0, [r6]
	bl sub_8095354
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_8099328
	ldr r5, _08099850  @ gUnknown_02013510
	subs r4, #0x22
	ldrb r0, [r6]
	bl sub_8095354
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	movs r3, #0
	bl sub_8099F7C
	movs r0, #1
	bl BG_EnableSyncByMask
	b _080998B8
	.align 2, 0
_0809984C: .4byte gUnknown_02022F0E
_08099850: .4byte gUnknown_02013510
_08099854:
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080998D4
	adds r0, r5, #0
	movs r1, #0xa
	b _080998B4
_08099868:
	ldr r0, _080998A4  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080998A8
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080998D4
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8095354
	bl GetUnitItemCount
	cmp r0, #0
	ble _080998D4
	bl CheckSomethingSomewhere
	cmp r0, #0
	bne _080998D4
	adds r0, r5, #0
	movs r1, #0xb
	b _080998B4
	.align 2, 0
_080998A4: .4byte gUnknown_03005280
_080998A8:
	bl CheckSomethingSomewhere
	cmp r0, #0
	bne _080998D4
	adds r0, r5, #0
	movs r1, #0xc
_080998B4:
	bl Proc_GotoLabel
_080998B8:
	ldr r0, _080998D0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080998C6
	b _08099A90
_080998C6:
	movs r0, #0x6a
	bl m4aSongNumStart
	b _08099A90
	.align 2, 0
_080998D0: .4byte gUnknown_0202BCF0
_080998D4:
	ldr r0, _080998EC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080998E2
	b _08099A90
_080998E2:
	movs r0, #0x6c
	bl m4aSongNumStart
	b _08099A90
	.align 2, 0
_080998EC: .4byte gUnknown_0202BCF0
_080998F0:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08099948
	adds r2, r5, #0
	adds r2, #0x2b
	ldrb r0, [r2]
	adds r1, r5, #0
	adds r1, #0x2a
	strb r0, [r1]
	movs r0, #0xff
	strb r0, [r2]
	movs r0, #0
	bl sub_80ACA84
	ldr r0, _0809992C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099920
	movs r0, #0x6b
	bl m4aSongNumStart
_08099920:
	adds r0, r5, #0
	movs r1, #0
	bl Proc_GotoLabel
	b _08099A90
	.align 2, 0
_0809992C: .4byte gUnknown_0202BCF0
_08099930:
	ldr r0, _0809996C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08099948
	bl CloseHelpBox
	movs r0, #0xff
	strb r0, [r4]
_08099948:
	ldr r2, _0809996C  @ gKeyStatusPtr
	ldr r6, [r2]
	ldrh r1, [r6, #6]
	movs r7, #0x20
	adds r0, r7, #0
	ands r0, r1
	adds r4, r5, #0
	adds r4, #0x2e
	cmp r0, #0
	beq _0809997E
	ldrb r3, [r4]
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _08099970
	subs r0, r3, #1
	b _0809997C
	.align 2, 0
_0809996C: .4byte gKeyStatusPtr
_08099970:
	ldrh r1, [r6, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0809997E
	adds r0, r3, #1
_0809997C:
	strb r0, [r4]
_0809997E:
	ldr r6, [r2]
	ldrh r1, [r6, #6]
	movs r7, #0x10
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080999A8
	ldrb r3, [r4]
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	bne _0809999A
	adds r0, r3, #1
	b _080999A6
_0809999A:
	ldrh r1, [r6, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080999A8
	subs r0, r3, #1
_080999A6:
	strb r0, [r4]
_080999A8:
	ldr r6, [r2]
	ldrh r1, [r6, #6]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080999CE
	ldrb r3, [r4]
	cmp r3, #1
	bls _080999C0
	subs r0, r3, #2
	b _080999CC
_080999C0:
	ldrh r1, [r6, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080999CE
	adds r0, r3, #4
_080999CC:
	strb r0, [r4]
_080999CE:
	ldr r2, [r2]
	ldrh r1, [r2, #6]
	movs r6, #0x80
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080999F4
	ldrb r3, [r4]
	cmp r3, #3
	bhi _080999E6
	adds r0, r3, #2
	b _080999F2
_080999E6:
	ldrh r1, [r2, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080999F4
	subs r0, r3, #4
_080999F2:
	strb r0, [r4]
_080999F4:
	adds r6, r4, #0
	ldrb r1, [r6]
	cmp r8, r1
	beq _08099A90
	ldr r0, _08099A64  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099A0E
	movs r0, #0x65
	bl m4aSongNumStart
_08099A0E:
	ldrb r1, [r6]
	movs r7, #1
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x90
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	movs r3, #0x80
	lsls r3, r3, #3
	movs r2, #3
	bl sub_80AD51C
	adds r0, r5, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _08099A90
	ldr r0, _08099A68  @ gUnknown_03005280
	ldrb r1, [r0]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _08099A70
	ldrb r1, [r6]
	adds r0, r7, #0
	ands r0, r1
	movs r2, #0x26
	muls r0, r2, r0
	adds r0, #0x90
_08099A4C:
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	ldr r3, _08099A6C  @ gUnknown_08A18910
_08099A54:
	ldrb r2, [r6]
	lsls r2, r2, #2
	adds r2, r2, r3
	ldr r2, [r2]
	bl StartHelpBox
	b _08099A90
	.align 2, 0
_08099A64: .4byte gUnknown_0202BCF0
_08099A68: .4byte gUnknown_03005280
_08099A6C: .4byte gUnknown_08A18910
_08099A70:
	ldrb r1, [r4]
	adds r0, r7, #0
	ands r0, r1
	movs r2, #0x26
	muls r0, r2, r0
	adds r0, #0x90
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	ldr r3, _08099A9C  @ gUnknown_08A188F8
	ldrb r2, [r4]
	lsls r2, r2, #2
	adds r2, r2, r3
	ldr r2, [r2]
	bl StartHelpBox
_08099A90:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08099A9C: .4byte gUnknown_08A188F8

	THUMB_FUNC_START sub_8099AA0
sub_8099AA0: @ 0x08099AA0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r0, #0
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r4, _08099AF0  @ gUnknown_02013510
	ldr r5, _08099AF4  @ gUnknown_02022EEC
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8095354
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl sub_8099F7C
	adds r4, #0x28
	adds r5, #0x1e
	adds r6, #0x2a
	ldrb r0, [r6]
	bl sub_8095354
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl sub_8099F7C
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099AF0: .4byte gUnknown_02013510
_08099AF4: .4byte gUnknown_02022EEC

	THUMB_FUNC_START sub_8099AF8
sub_8099AF8: @ 0x08099AF8
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	mov r8, r0
	movs r0, #1
	movs r1, #0
	movs r2, #4
	bl BG_SetPosition
	movs r0, #1
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #2
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _08099C3C  @ gBG0TilemapBuffer
	movs r1, #0x1f
	movs r2, #8
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #0xc0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_8098C3C
	ldr r0, _08099C40  @ gUnknown_08A1B8B8
	ldr r5, _08099C44  @ gUnknown_02020188
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	ldr r4, _08099C48  @ gBG1TilemapBuffer
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl CallARM_FillTileRect
	ldr r0, _08099C4C  @ gUnknown_08A1B990
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _08099C50  @ 0x0000025E
	adds r4, r4, r0
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl CallARM_FillTileRect
	mov r1, r8
	adds r1, #0x32
	movs r0, #0
	strb r0, [r1]
	mov r6, r8
	adds r6, #0x2a
	ldrb r5, [r6]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x14
	mov r2, r8
	ldrh r0, [r2, #0x34]
	subs r0, #4
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r4, #0
	movs r2, #7
	bl sub_80AD51C
	mov r0, r8
	movs r1, #0
	bl sub_809A504
	movs r0, #7
	bl BG_EnableSyncByMask
	mov r4, r8
	adds r4, #0x2b
	ldrb r0, [r4]
	bl sub_8095354
	adds r1, r0, #0
	ldr r0, _08099C54  @ 0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x3c
	movs r3, #0x4c
	bl sub_8099E98
	ldrb r0, [r6]
	bl sub_8095354
	adds r1, r0, #0
	ldr r0, _08099C58  @ 0x00000502
	str r0, [sp]
	movs r0, #1
	movs r2, #0xb4
	movs r3, #0x4c
	bl sub_8099E98
	ldrb r5, [r4]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	mov r1, r8
	ldrh r0, [r1, #0x34]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl sub_80AC9D4
	ldr r0, _08099C5C  @ sub_8099AA0
	movs r1, #1
	mov r2, r8
	bl sub_80ACE20
	bl sub_80ACAE4
	bl sub_8098590
	bl EndHelpPromptSprite
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099C3C: .4byte gBG0TilemapBuffer
_08099C40: .4byte gUnknown_08A1B8B8
_08099C44: .4byte gUnknown_02020188
_08099C48: .4byte gBG1TilemapBuffer
_08099C4C: .4byte gUnknown_08A1B990
_08099C50: .4byte 0x0000025E
_08099C54: .4byte 0x00000503
_08099C58: .4byte 0x00000502
_08099C5C: .4byte sub_8099AA0

	THUMB_FUNC_START sub_8099C60
sub_8099C60: @ 0x08099C60
	push {lr}
	bl sub_8098BE8
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8099C70
sub_8099C70: @ 0x08099C70
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	ldrh r0, [r6, #0x34]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	beq _08099C82
	b _08099D9C
_08099C82:
	ldr r0, _08099C9C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08099CA0
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	b _08099DA2
	.align 2, 0
_08099C9C: .4byte gKeyStatusPtr
_08099CA0:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08099D10
	adds r5, r6, #0
	adds r5, #0x2a
	ldrb r0, [r5]
	bl sub_8095354
	bl GetUnitItemCount
	adds r7, r0, #0
	adds r4, r6, #0
	adds r4, #0x2b
	ldrb r0, [r4]
	bl sub_8095354
	bl GetUnitItemCount
	adds r1, r0, #0
	ldrb r0, [r5]
	ldrb r4, [r4]
	cmp r0, r4
	beq _08099CF8
	cmp r7, #0
	bgt _08099CD8
	cmp r1, #0
	ble _08099CF8
_08099CD8:
	adds r0, r6, #0
	movs r1, #6
	bl Proc_GotoLabel
	ldr r0, _08099CF4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099DA2
	movs r0, #0x6a
	bl m4aSongNumStart
	b _08099DA2
	.align 2, 0
_08099CF4: .4byte gUnknown_0202BCF0
_08099CF8:
	ldr r0, _08099D0C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099DA2
	movs r0, #0x6c
	bl m4aSongNumStart
	b _08099DA2
	.align 2, 0
_08099D0C: .4byte gUnknown_0202BCF0
_08099D10:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08099D40
	movs r0, #1
	bl sub_8099F50
	adds r0, r6, #0
	movs r1, #2
	bl Proc_GotoLabel
	ldr r0, _08099D3C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08099DA2
	movs r0, #0x6b
	bl m4aSongNumStart
	b _08099DA2
	.align 2, 0
_08099D3C: .4byte gUnknown_0202BCF0
_08099D40:
	adds r0, r6, #0
	bl sub_8098E40
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08099D9C
	adds r7, r6, #0
	adds r7, #0x2a
	ldrb r0, [r7]
	bl sub_8095354
	adds r1, r0, #0
	ldr r0, _08099DAC  @ 0x00000502
	str r0, [sp]
	movs r0, #1
	movs r2, #0xb4
	movs r3, #0x4c
	bl sub_8099E98
	ldr r4, _08099DB0  @ gUnknown_02013538
	ldr r5, _08099DB4  @ gUnknown_02022F0A
	ldrb r0, [r7]
	bl sub_8095354
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #2
	bl sub_8099F7C
	subs r4, #0x28
	subs r5, #0x1e
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8095354
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #1
	bl sub_8099F7C
	movs r0, #1
	bl BG_EnableSyncByMask
_08099D9C:
	adds r0, r6, #0
	bl sub_8098FAC
_08099DA2:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08099DAC: .4byte 0x00000502
_08099DB0: .4byte gUnknown_02013538
_08099DB4: .4byte gUnknown_02022F0A

	THUMB_FUNC_START sub_8099DB8
sub_8099DB8: @ 0x08099DB8
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_80989BC
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8095354
	adds r5, r0, #0
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl sub_8095354
	adds r1, r0, #0
	adds r0, r5, #0
	adds r2, r4, #0
	bl sub_809BE3C
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8099DE8
sub_8099DE8: @ 0x08099DE8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8095354
	adds r1, r4, #0
	bl sub_809CCFC
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8099E00
sub_8099E00: @ 0x08099E00
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8095354
	adds r1, r4, #0
	bl sub_809EAD8
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8099E18
sub_8099E18: @ 0x08099E18
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8095354
	adds r1, r4, #0
	bl sub_80A070C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8099E30
sub_8099E30: @ 0x08099E30
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8095354
	adds r1, r4, #0
	bl sub_809FD88
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8099E48
sub_8099E48: @ 0x08099E48
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8095354
	ldr r1, _08099E64  @ gUnknown_08A188E4
	adds r2, r4, #0
	bl MakeShopArmory
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08099E64: .4byte gUnknown_08A188E4

	THUMB_FUNC_START sub_8099E68
sub_8099E68: @ 0x08099E68
	push {lr}
	adds r2, r0, #0
	ldr r0, _08099E94  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r3, #1
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _08099E8E
	adds r0, r2, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _08099E8E
	movs r0, #0
	bl sub_80C409C
_08099E8E:
	pop {r0}
	bx r0
	.align 2, 0
_08099E94: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_8099E98
sub_8099E98: @ 0x08099E98
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r4, r0, #0
	adds r6, r1, #0
	ldr r0, [sp, #0x20]
	lsls r2, r2, #0x10
	lsrs r7, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r8, r3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r9, r0
	ldr r0, _08099EF8  @ gUnknown_08A189A4
	bl Proc_Find
	adds r5, r0, #0
	lsls r1, r4, #2
	adds r0, #0x44
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, r6
	beq _08099EFC
	cmp r0, #0
	beq _08099ED6
	adds r0, r4, #0
	bl DeleteFaceByIndex
_08099ED6:
	cmp r6, #0
	beq _08099F18
	adds r0, r6, #0
	bl GetUnitPortraitId
	adds r1, r0, #0
	lsls r2, r7, #0x10
	asrs r2, r2, #0x10
	mov r0, r8
	lsls r3, r0, #0x10
	asrs r3, r3, #0x10
	mov r0, r9
	str r0, [sp]
	adds r0, r4, #0
	bl sub_80064F4
	b _08099F18
	.align 2, 0
_08099EF8: .4byte gUnknown_08A189A4
_08099EFC:
	cmp r6, #0
	beq _08099F18
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	mov r0, r8
	lsls r2, r0, #0x10
	asrs r2, r2, #0x10
	adds r0, r4, #0
	bl sub_8006618
	adds r0, r4, #0
	mov r1, r9
	bl sub_800578C
_08099F18:
	lsls r1, r4, #2
	adds r0, r5, #0
	adds r0, #0x44
	adds r0, r0, r1
	str r6, [r0]
	lsls r1, r4, #1
	adds r0, r5, #0
	adds r0, #0x38
	adds r0, r0, r1
	strh r7, [r0]
	adds r0, r5, #0
	adds r0, #0x3c
	adds r0, r0, r1
	mov r2, r8
	strh r2, [r0]
	adds r0, r5, #0
	adds r0, #0x40
	adds r0, r0, r1
	mov r1, r9
	strh r1, [r0]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8099F50
sub_8099F50: @ 0x08099F50
	push {lr}
	sub sp, #4
	movs r1, #0
	str r1, [sp]
	movs r2, #0
	movs r3, #0
	bl sub_8099E98
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_8099F68
sub_8099F68: @ 0x08099F68
	push {lr}
	adds r1, r0, #0
	ldr r0, _08099F78  @ gUnknown_08A189A4
	bl Proc_CreateBlockingChild
	pop {r1}
	bx r1
	.align 2, 0
_08099F78: .4byte gUnknown_08A189A4

	THUMB_FUNC_START sub_8099F7C
sub_8099F7C: @ 0x08099F7C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r6, r0, #0
	adds r4, r1, #0
	mov r8, r2
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	str r3, [sp]
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #0x14
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #2
	ldr r1, [sp]
	ands r0, r1
	cmp r0, #0
	beq _08099FAE
	bl ResetIconGraphics
_08099FAE:
	mov r0, r8
	cmp r0, #0
	beq _0809A07C
	bl GetUnitItemCount
	str r0, [sp, #4]
	movs r1, #0
	mov r9, r1
	cmp r9, r0
	bge _0809A07C
	adds r0, r4, #0
	adds r0, #0x16
	str r0, [sp, #8]
	adds r1, r4, #4
	str r1, [sp, #0xc]
	mov sl, r4
_08099FCE:
	mov r1, r9
	lsls r0, r1, #1
	mov r1, r8
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r5, [r1]
	movs r0, #4
	ldr r1, [sp]
	ands r0, r1
	cmp r0, #0
	beq _08099FEE
	mov r0, r8
	adds r1, r5, #0
	bl CanUnitUseItemPrepScreen
	b _08099FF6
_08099FEE:
	mov r0, r8
	adds r1, r5, #0
	bl IsItemDisplayUsable
_08099FF6:
	movs r7, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809A000
	movs r7, #1
_0809A000:
	movs r0, #1
	ldr r1, [sp]
	ands r0, r1
	cmp r0, #0
	bne _0809A02E
	adds r0, r6, #0
	bl Text_Clear
	adds r0, r6, #0
	adds r1, r7, #0
	bl Text_SetColorId
	adds r0, r6, #0
	movs r1, #0
	bl Text_SetXCursor
	adds r0, r5, #0
	bl GetItemName
	adds r1, r0, #0
	adds r0, r6, #0
	bl Text_AppendString
_0809A02E:
	adds r0, r5, #0
	bl GetItemIconId
	adds r1, r0, #0
	mov r0, sl
	movs r2, #0x80
	lsls r2, r2, #7
	bl DrawIcon
	adds r0, r6, #0
	ldr r1, [sp, #0xc]
	bl Text_Draw
	movs r4, #1
	cmp r7, #0
	bne _0809A050
	movs r4, #2
_0809A050:
	adds r0, r5, #0
	bl GetItemUses
	adds r2, r0, #0
	ldr r0, [sp, #8]
	adds r1, r4, #0
	bl DrawDecNumber
	adds r6, #8
	ldr r0, [sp, #8]
	adds r0, #0x80
	str r0, [sp, #8]
	ldr r1, [sp, #0xc]
	adds r1, #0x80
	str r1, [sp, #0xc]
	movs r0, #0x80
	add sl, r0
	movs r1, #1
	add r9, r1
	ldr r0, [sp, #4]
	cmp r9, r0
	blt _08099FCE
_0809A07C:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809A08C
sub_809A08C: @ 0x0809A08C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x14
	adds r6, r4, #0
	bl sub_8095374
	subs r0, #1
	movs r1, #3
	bl __divsi3
	lsls r1, r0, #4
	ldrh r0, [r5, #0x34]
	subs r0, r4, r0
	cmp r0, #0x20
	ble _0809A0C6
	cmp r4, r1
	bne _0809A0C0
	adds r0, r4, #0
	subs r0, #0x30
	b _0809A0D6
_0809A0C0:
	adds r0, r4, #0
	subs r0, #0x20
	b _0809A0D6
_0809A0C6:
	cmp r0, #0xf
	bgt _0809A0D8
	cmp r4, #0
	bne _0809A0D2
	strh r4, [r5, #0x34]
	b _0809A0D8
_0809A0D2:
	adds r0, r6, #0
	subs r0, #0x10
_0809A0D6:
	strh r0, [r5, #0x34]
_0809A0D8:
	ldr r1, _0809A110  @ 0x0000FFD8
	ldrh r2, [r5, #0x34]
	subs r2, #4
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl BG_SetPosition
	ldrh r4, [r5, #0x34]
	bl sub_8095374
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl sub_80976CC
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809A110: .4byte 0x0000FFD8

	THUMB_FUNC_START sub_809A114
sub_809A114: @ 0x0809A114
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov sl, r1
	lsls r2, r2, #0x18
	lsrs r5, r2, #0x18
	lsls r0, r1, #1
	add r0, sl
	str r0, [sp]
	movs r1, #0xf
	bl __modsi3
	lsls r0, r0, #3
	ldr r1, _0809A1C0  @ gUnknown_02013498
	adds r4, r0, r1
	ldr r0, _0809A1C4  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809A154
	bl sub_80C4070
	movs r1, #1
	str r1, [sp, #4]
	cmp r0, #2
	beq _0809A158
_0809A154:
	movs r0, #0
	str r0, [sp, #4]
_0809A158:
	movs r7, #0
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	mov r9, r0
_0809A160:
	mov r1, r9
	cmp r1, #0
	bne _0809A16C
	adds r0, r4, #0
	bl Text_Clear
_0809A16C:
	ldr r0, [sp]
	adds r5, r0, r7
	bl sub_8095374
	cmp r5, r0
	bge _0809A1FA
	adds r0, r7, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #3
	mov r8, r0
	mov r1, sl
	lsls r6, r1, #1
	movs r0, #0x1f
	ands r6, r0
	mov r0, r9
	cmp r0, #0
	bne _0809A1EA
	adds r0, r5, #0
	bl sub_8095354
	adds r5, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetXCursor
	ldr r1, [sp, #4]
	cmp r1, #0
	beq _0809A1D2
	adds r0, r5, #0
	movs r1, #0x72
	bl UnitHasItem
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809A1C8
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColorId
	b _0809A1DA
	.align 2, 0
_0809A1C0: .4byte gUnknown_02013498
_0809A1C4: .4byte gUnknown_03005280
_0809A1C8:
	adds r0, r4, #0
	movs r1, #1
	bl Text_SetColorId
	b _0809A1DA
_0809A1D2:
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColorId
_0809A1DA:
	ldr r0, [r5]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_AppendString
_0809A1EA:
	lsls r1, r6, #5
	add r1, r8
	lsls r1, r1, #1
	ldr r0, _0809A218  @ gBG2TilemapBuffer
	adds r1, r1, r0
	adds r0, r4, #0
	bl Text_Draw
_0809A1FA:
	adds r4, #8
	adds r7, #1
	cmp r7, #2
	ble _0809A160
	movs r0, #4
	bl BG_EnableSyncByMask
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A218: .4byte gBG2TilemapBuffer

	THUMB_FUNC_START sub_809A21C
sub_809A21C: @ 0x0809A21C
	push {lr}
	cmp r0, #0x60
	bhi _0809A22A
	cmp r1, #0x1f
	ble _0809A22A
	movs r0, #1
	b _0809A22C
_0809A22A:
	movs r0, #0
_0809A22C:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_809A230
sub_809A230: @ 0x0809A230
	push {r4, r5, r6, lr}
	sub sp, #4
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r5, r2, #0x10
	ldr r1, [r0, #4]
	ldrb r4, [r1, #4]
	movs r1, #0x72
	bl UnitHasItem
	lsls r0, r0, #0x18
	movs r1, #0xf0
	lsls r1, r1, #8
	cmp r0, #0
	beq _0809A254
	movs r1, #0xc0
	lsls r1, r1, #8
_0809A254:
	movs r0, #0x80
	lsls r0, r0, #4
	adds r3, r0, #0
	adds r3, r1, r3
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	str r4, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl sub_8027C48
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809A274
sub_809A274: @ 0x0809A274
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r6, #0
	b _0809A308
_0809A27C:
	adds r0, r6, #0
	movs r1, #3
	bl __modsi3
	lsls r5, r0, #6
	adds r0, r6, #0
	movs r1, #3
	bl __divsi3
	lsls r0, r0, #4
	ldrh r1, [r7, #0x34]
	subs r4, r0, r1
	adds r0, r4, #0
	adds r0, #0x14
	cmp r0, #0x44
	bhi _0809A306
	adds r0, r7, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0809A2B8
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_809A21C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809A306
_0809A2B8:
	ldr r0, _0809A2E8  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809A2EC
	bl sub_80C4070
	cmp r0, #2
	bne _0809A2EC
	adds r0, r6, #0
	bl sub_8095354
	adds r1, r5, #0
	adds r1, #0x18
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	adds r2, r4, #4
	movs r3, #0xff
	ands r2, r3
	bl sub_809A230
	b _0809A306
	.align 2, 0
_0809A2E8: .4byte gUnknown_03005280
_0809A2EC:
	adds r5, #0x18
	adds r4, #4
	movs r0, #0xff
	ands r4, r0
	adds r0, r6, #0
	bl sub_8095354
	adds r3, r0, #0
	movs r0, #0
	adds r1, r5, #0
	adds r2, r4, #0
	bl sub_8027B60
_0809A306:
	adds r6, #1
_0809A308:
	bl sub_8095374
	cmp r6, r0
	blt _0809A27C
	bl SMS_FlushDirect
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809A31C
sub_809A31C: @ 0x0809A31C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	str r0, [sp, #4]
	mov sl, r1
	str r2, [sp, #8]
	str r3, [sp, #0xc]
	ldr r7, [sp, #0x38]
	cmp r2, #0
	bgt _0809A338
	b _0809A4E6
_0809A338:
	cmp r3, #0
	bgt _0809A33E
	b _0809A4E6
_0809A33E:
	ldr r4, _0809A4F8  @ gUnknown_08590F44
	str r7, [sp]
	movs r0, #4
	ldr r1, [sp, #4]
	mov r2, sl
	adds r3, r4, #0
	bl RegisterObjectAttributes
	ldr r0, [sp, #8]
	lsls r0, r0, #3
	mov r9, r0
	ldr r6, [sp, #4]
	add r6, r9
	adds r0, r7, #3
	str r0, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, sl
	adds r3, r4, #0
	bl RegisterObjectAttributes
	ldr r1, [sp, #0xc]
	lsls r1, r1, #3
	mov r8, r1
	mov r5, sl
	add r5, r8
	adds r0, r7, #0
	adds r0, #0xd
	str r0, [sp]
	movs r0, #4
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl RegisterObjectAttributes
	adds r0, r7, #0
	adds r0, #0xa
	str r0, [sp]
	movs r0, #4
	ldr r1, [sp, #4]
	adds r2, r5, #0
	adds r3, r4, #0
	bl RegisterObjectAttributes
	movs r5, #1
	ldr r3, [sp, #8]
	subs r3, #1
	str r3, [sp, #0x10]
	cmp r5, r3
	bge _0809A3D6
	ldr r6, _0809A4FC  @ gUnknown_08590F7C
	ldr r4, [sp, #4]
	adds r4, #8
_0809A3A8:
	adds r0, r7, #1
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r2, sl
	adds r3, r6, #0
	bl RegisterObjectAttributes
	adds r0, r7, #0
	adds r0, #0xb
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r2, sl
	add r2, r8
	adds r3, r6, #0
	bl RegisterObjectAttributes
	adds r4, #0x10
	adds r5, #2
	ldr r0, [sp, #0x10]
	cmp r5, r0
	blt _0809A3A8
_0809A3D6:
	ldr r1, [sp, #8]
	cmp r5, r1
	bge _0809A412
	ldr r6, _0809A4F8  @ gUnknown_08590F44
	lsls r0, r5, #3
	ldr r3, [sp, #4]
	adds r4, r0, r3
	subs r5, r1, r5
_0809A3E6:
	adds r0, r7, #1
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r2, sl
	adds r3, r6, #0
	bl RegisterObjectAttributes
	adds r0, r7, #0
	adds r0, #0xb
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r2, sl
	add r2, r8
	adds r3, r6, #0
	bl RegisterObjectAttributes
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bne _0809A3E6
_0809A412:
	ldr r0, [sp, #0xc]
	cmp r0, #1
	ble _0809A44E
	ldr r5, _0809A4F8  @ gUnknown_08590F44
	mov r4, sl
	adds r4, #8
	adds r6, r0, #0
	subs r6, #1
_0809A422:
	adds r0, r7, #4
	str r0, [sp]
	movs r0, #4
	ldr r1, [sp, #4]
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r0, r7, #0
	adds r0, #9
	str r0, [sp]
	movs r0, #4
	ldr r1, [sp, #4]
	add r1, r9
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r4, #8
	subs r6, #1
	cmp r6, #0
	bne _0809A422
_0809A44E:
	movs r6, #1
	ldr r1, [sp, #0xc]
	cmp r6, r1
	bge _0809A4E6
	ldr r3, [sp, #8]
	subs r3, #3
	mov r9, r3
	adds r7, #5
	mov r8, r7
_0809A460:
	movs r5, #1
	adds r0, r6, #1
	str r0, [sp, #0x14]
	cmp r5, r9
	bge _0809A48A
	ldr r4, [sp, #4]
	adds r4, #8
	lsls r7, r6, #3
_0809A470:
	mov r1, r8
	str r1, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r3, sl
	adds r2, r3, r7
	ldr r3, _0809A500  @ gUnknown_08590F9C
	bl RegisterObjectAttributes
	adds r4, #0x20
	adds r5, #4
	cmp r5, r9
	blt _0809A470
_0809A48A:
	ldr r0, [sp, #0x10]
	cmp r5, r0
	bge _0809A4B4
	lsls r0, r5, #3
	ldr r1, [sp, #4]
	adds r4, r0, r1
	lsls r7, r6, #3
_0809A498:
	mov r3, r8
	str r3, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r3, sl
	adds r2, r3, r7
	ldr r3, _0809A4FC  @ gUnknown_08590F7C
	bl RegisterObjectAttributes
	adds r4, #0x10
	adds r5, #2
	ldr r0, [sp, #0x10]
	cmp r5, r0
	blt _0809A498
_0809A4B4:
	ldr r1, [sp, #8]
	cmp r5, r1
	bge _0809A4DE
	lsls r0, r5, #3
	ldr r3, [sp, #4]
	adds r4, r0, r3
	lsls r6, r6, #3
	subs r5, r1, r5
_0809A4C4:
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r3, sl
	adds r2, r3, r6
	ldr r3, _0809A4F8  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bne _0809A4C4
_0809A4DE:
	ldr r6, [sp, #0x14]
	ldr r0, [sp, #0xc]
	cmp r6, r0
	blt _0809A460
_0809A4E6:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A4F8: .4byte gUnknown_08590F44
_0809A4FC: .4byte gUnknown_08590F7C
_0809A500: .4byte gUnknown_08590F9C

	THUMB_FUNC_START sub_809A504
sub_809A504: @ 0x0809A504
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldrh r0, [r5, #0x34]
	lsrs r4, r0, #4
	adds r0, r4, #4
	cmp r4, r0
	bge _0809A530
	lsls r6, r1, #0x18
_0809A518:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	adds r0, r5, #0
	asrs r2, r6, #0x18
	bl sub_809A114
	adds r4, #1
	ldrh r0, [r5, #0x34]
	lsrs r0, r0, #4
	adds r0, #4
	cmp r4, r0
	blt _0809A518
_0809A530:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809A538
sub_809A538: @ 0x0809A538
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	bl GetUnitItemCount
	adds r7, r0, #0
	bl sub_8097CC8
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	movs r4, #0
	cmp r4, r7
	bge _0809A56E
	cmp r6, #0x63
	bgt _0809A56E
_0809A554:
	ldrh r0, [r5, #0x1e]
	bl AddItemToConvoy
	adds r0, r5, #0
	movs r1, #0
	bl UnitRemoveItem
	adds r4, #1
	cmp r4, r7
	bge _0809A56E
	adds r0, r4, r6
	cmp r0, #0x63
	ble _0809A554
_0809A56E:
	cmp r4, #0
	bgt _0809A576
	movs r0, #0
	b _0809A578
_0809A576:
	movs r0, #1
_0809A578:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_809A580
sub_809A580: @ 0x0809A580
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r0, r1, #0
	movs r7, #0
	lsls r1, r0, #1
	mov r8, r1
	movs r1, #7
	bl __modsi3
	mov sl, r0
	movs r2, #0
	mov r9, r2
_0809A5A0:
	mov r0, r8
	adds r4, r0, r7
	bl sub_8095374
	cmp r4, r0
	bge _0809A61A
	adds r0, r4, #0
	bl sub_8095354
	adds r5, r0, #0
	movs r6, #0
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809A5D2
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809A5D2
	movs r6, #4
	b _0809A5DE
_0809A5D2:
	ldr r0, [r5, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	beq _0809A5DE
	movs r6, #1
_0809A5DE:
	mov r1, sl
	lsls r4, r1, #1
	adds r4, r4, r7
	lsls r4, r4, #3
	ldr r0, _0809A63C  @ gUnknown_02013598
	adds r4, r4, r0
	adds r0, r4, #0
	bl Text_Clear
	ldr r0, [r5]
	ldrh r0, [r0]
	bl GetStringFromIndex
	movs r1, #0x1f
	mov r2, r8
	ands r1, r2
	lsls r1, r1, #5
	adds r1, #0x10
	add r1, r9
	lsls r1, r1, #1
	ldr r2, _0809A640  @ gBG2TilemapBuffer
	adds r1, r1, r2
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r2, r6, #0
	movs r3, #0
	bl DrawTextInline
_0809A61A:
	movs r0, #7
	add r9, r0
	adds r7, #1
	cmp r7, #1
	ble _0809A5A0
	movs r0, #4
	bl BG_EnableSyncByMask
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A63C: .4byte gUnknown_02013598
_0809A640: .4byte gBG2TilemapBuffer

	THUMB_FUNC_START sub_809A644
sub_809A644: @ 0x0809A644
	push {lr}
	lsls r0, r0, #1
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #6
	ldr r1, _0809A668  @ gUnknown_02023CC8
	adds r0, r0, r1
	movs r1, #0xd
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r0}
	bx r0
	.align 2, 0
_0809A668: .4byte gUnknown_02023CC8

	THUMB_FUNC_START sub_809A66C
sub_809A66C: @ 0x0809A66C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	movs r6, #0
	b _0809A6AE
_0809A67A:
	asrs r0, r6, #1
	lsls r0, r0, #4
	mov r2, r8
	ldrh r1, [r2, #0x30]
	subs r5, r0, r1
	adds r0, r5, #0
	adds r0, #0xf
	cmp r0, #0x5f
	bhi _0809A6AC
	movs r0, #1
	ands r0, r6
	lsls r4, r0, #3
	subs r4, r4, r0
	lsls r4, r4, #3
	adds r4, #0x70
	adds r5, #0x18
	adds r0, r6, #0
	bl sub_8095354
	adds r3, r0, #0
	movs r0, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_8027B60
_0809A6AC:
	adds r6, #1
_0809A6AE:
	bl sub_8095374
	cmp r6, r0
	blt _0809A67A
	mov r0, r8
	ldrh r1, [r0, #0x30]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0809A758
	ldr r1, _0809A754  @ gLCDControlBuffer
	mov ip, r1
	ldrb r0, [r1, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r0, ip
	adds r0, #0x2d
	movs r2, #0
	strb r2, [r0]
	adds r0, #4
	strb r2, [r0]
	subs r0, #5
	movs r3, #0xf0
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x30
	movs r0, #0x1a
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2f
	strb r2, [r0]
	adds r1, #3
	movs r0, #0x78
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2e
	strb r3, [r0]
	subs r1, #1
	movs r0, #0xa0
	strb r0, [r1]
	mov r6, ip
	adds r6, #0x34
	ldrb r0, [r6]
	movs r5, #1
	orrs r0, r5
	movs r3, #2
	orrs r0, r3
	movs r4, #5
	negs r4, r4
	ands r0, r4
	movs r2, #8
	orrs r0, r2
	movs r1, #0x11
	negs r1, r1
	ands r0, r1
	strb r0, [r6]
	mov r1, ip
	adds r1, #0x35
	ldrb r0, [r1]
	orrs r0, r5
	orrs r0, r3
	ands r0, r4
	orrs r0, r2
	movs r6, #0x10
	orrs r0, r6
	strb r0, [r1]
	mov r4, ip
	adds r4, #0x36
	ldrb r0, [r4]
	orrs r0, r5
	orrs r0, r3
	movs r1, #4
	orrs r0, r1
	orrs r0, r2
	orrs r0, r6
	strb r0, [r4]
	b _0809A76E
	.align 2, 0
_0809A754: .4byte gLCDControlBuffer
_0809A758:
	ldr r2, _0809A7D0  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
_0809A76E:
	mov r0, r8
	adds r0, #0x37
	ldrb r1, [r0]
	adds r7, r0, #0
	cmp r1, #0
	beq _0809A77E
	adds r0, r1, #1
	strb r0, [r7]
_0809A77E:
	movs r5, #0x87
	lsls r5, r5, #8
	movs r4, #4
	movs r6, #2
_0809A786:
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x81
	ldr r3, _0809A7D4  @ gUnknown_08590F8C
	bl RegisterObjectAttributes
	adds r5, #4
	adds r4, #0x20
	subs r6, #1
	cmp r6, #0
	bge _0809A786
	ldrb r0, [r7]
	lsrs r0, r0, #2
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _0809A7EC
	mov r0, r8
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809A7EC
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809A7DC
	ldr r3, _0809A7D8  @ gUnknown_08A18E62
	movs r0, #0x40
	str r0, [sp]
	movs r0, #4
	movs r1, #0x80
	movs r2, #0x82
	bl RegisterObjectAttributes
	b _0809A7EC
	.align 2, 0
_0809A7D0: .4byte gLCDControlBuffer
_0809A7D4: .4byte gUnknown_08590F8C
_0809A7D8: .4byte gUnknown_08A18E62
_0809A7DC:
	ldr r3, _0809A80C  @ gUnknown_08A18E4E
	movs r0, #0x40
	str r0, [sp]
	movs r0, #4
	movs r1, #0x80
	movs r2, #0x82
	bl RegisterObjectAttributes
_0809A7EC:
	ldr r3, _0809A810  @ gUnknown_08A18E34
	movs r0, #0x40
	str r0, [sp]
	movs r0, #4
	movs r1, #0x80
	movs r2, #0x8f
	bl RegisterObjectAttributes
	bl SMS_FlushDirect
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A80C: .4byte gUnknown_08A18E4E
_0809A810: .4byte gUnknown_08A18E34

	THUMB_FUNC_START sub_809A814
sub_809A814: @ 0x0809A814
	push {r4, r5, lr}
	bl Font_InitForUIDefault
	ldr r5, _0809A868  @ gUnknown_02013598
	movs r4, #0xd
_0809A81E:
	adds r0, r5, #0
	movs r1, #5
	bl Text_Init
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0809A81E
	ldr r5, _0809A86C  @ gUnknown_02013608
	movs r4, #4
_0809A832:
	adds r0, r5, #0
	movs r1, #7
	bl Text_Init
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0809A832
	ldr r4, _0809A870  @ gUnknown_02013630
	adds r0, r4, #0
	movs r1, #7
	bl Text_Init
	adds r0, r4, #0
	adds r0, #8
	movs r1, #0xa
	bl Text_Init
	adds r4, #0x10
	adds r0, r4, #0
	movs r1, #0xc
	bl Text_Init
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809A868: .4byte gUnknown_02013598
_0809A86C: .4byte gUnknown_02013608
_0809A870: .4byte gUnknown_02013630

	THUMB_FUNC_START sub_809A874
sub_809A874: @ 0x0809A874
	push {r4, lr}
	bl ResetIconGraphics_
	bl LoadUiFrameGraphics
	bl LoadObjUIGfx
	movs r0, #4
	bl LoadIconPalettes
	movs r4, #0xc0
	lsls r4, r4, #7
	adds r0, r4, #0
	movs r1, #8
	bl sub_8095A44
	adds r0, r4, #0
	movs r1, #0xf
	bl sub_80950E8
	ldr r0, _0809A8D8  @ gUnknown_08A1B730
	ldr r1, _0809A8DC  @ 0x06000440
	bl CopyDataWithPossibleUncomp
	ldr r0, _0809A8E0  @ gUnknown_08A1B7C8
	ldr r4, _0809A8E4  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _0809A8E8  @ gBG1TilemapBuffer
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl CallARM_FillTileRect
	ldr r0, _0809A8EC  @ gUnknown_08A1D510
	ldr r1, _0809A8F0  @ 0x06010800
	bl CopyDataWithPossibleUncomp
	ldr r0, _0809A8F4  @ gUnknown_08A1D79C
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	bl EnablePaletteSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809A8D8: .4byte gUnknown_08A1B730
_0809A8DC: .4byte 0x06000440
_0809A8E0: .4byte gUnknown_08A1B7C8
_0809A8E4: .4byte gUnknown_02020188
_0809A8E8: .4byte gBG1TilemapBuffer
_0809A8EC: .4byte gUnknown_08A1D510
_0809A8F0: .4byte 0x06010800
_0809A8F4: .4byte gUnknown_08A1D79C

	THUMB_FUNC_START sub_809A8F8
sub_809A8F8: @ 0x0809A8F8
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl SetupMapSpritesPalettes
	movs r0, #0
	str r0, [sp]
	ldr r1, _0809A928  @ gUnknown_02022C08
	ldr r2, _0809A92C  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	bl sub_80958BC
	ldr r0, [r4, #0x14]
	bl sub_80959B4
	bl sub_8095928
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809A928: .4byte gUnknown_02022C08
_0809A92C: .4byte 0x01000008

	THUMB_FUNC_START sub_809A930
sub_809A930: @ 0x0809A930
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #8
	adds r5, r0, #0
	ldr r4, _0809A9E0  @ gUnknown_02022D72
	adds r0, r4, #0
	movs r1, #6
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	adds r0, r5, #0
	bl GetUnitPortraitId
	adds r1, r4, #0
	subs r1, #0x88
	movs r2, #0x9c
	lsls r2, r2, #2
	movs r3, #0
	mov r9, r3
	str r3, [sp]
	movs r3, #2
	bl sub_8005988
	ldr r0, _0809A9E4  @ gUnknown_02013630
	mov r8, r0
	bl Text_Clear
	ldr r0, [r5]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r1, r0, #0
	movs r0, #0x38
	bl GetStringTextCenteredPos
	adds r6, r0, #0
	ldr r0, [r5]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r1, r4, #0
	subs r1, #0x80
	mov r2, r9
	str r2, [sp]
	str r0, [sp, #4]
	mov r0, r8
	movs r2, #0
	adds r3, r6, #0
	bl DrawTextInline
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x24
	movs r3, #0x25
	bl sub_8004D5C
	adds r0, r4, #0
	adds r0, #8
	movs r1, #3
	movs r2, #0x1d
	bl sub_8004B0C
	adds r0, r4, #6
	movs r2, #8
	ldrsb r2, [r5, r2]
	movs r1, #2
	bl DrawDecNumber
	adds r4, #0xc
	ldrb r2, [r5, #9]
	adds r0, r4, #0
	movs r1, #2
	bl DrawDecNumber
	movs r0, #1
	bl BG_EnableSyncByMask
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809A9E0: .4byte gUnknown_02022D72
_0809A9E4: .4byte gUnknown_02013630

	THUMB_FUNC_START sub_809A9E8
sub_809A9E8: @ 0x0809A9E8
	push {lr}
	ldrh r0, [r0, #0x2e]
	bl sub_8095354
	bl sub_809A930
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809A9F8
sub_809A9F8: @ 0x0809A9F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r7, r0, #0
	bl ResetIconGraphics_
	ldr r4, _0809AAE4  @ gUnknown_02022DEA
	adds r0, r4, #0
	movs r1, #0xb
	movs r2, #0xa
	movs r3, #0
	bl TileMap_FillRect
	adds r0, r7, #0
	bl GetUnitItemCount
	str r0, [sp, #8]
	movs r0, #0
	mov r8, r0
	ldr r2, [sp, #8]
	cmp r8, r2
	bge _0809AACC
	movs r0, #0x14
	adds r0, r0, r4
	mov sl, r0
	mov r9, r4
	movs r2, #0xa0
	lsls r2, r2, #1
	str r2, [sp, #0xc]
_0809AA38:
	mov r0, r8
	lsls r1, r0, #1
	adds r0, r7, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r4, [r0]
	adds r0, r4, #0
	bl GetItemIconId
	adds r1, r0, #0
	mov r0, r9
	movs r2, #0x80
	lsls r2, r2, #7
	bl DrawIcon
	mov r2, r8
	lsls r1, r2, #3
	ldr r0, _0809AAE8  @ gUnknown_02013608
	adds r5, r1, r0
	adds r0, r5, #0
	bl Text_Clear
	adds r0, r7, #0
	adds r1, r4, #0
	bl IsItemDisplayUsable
	movs r6, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809AA76
	movs r6, #1
_0809AA76:
	adds r0, r4, #0
	bl GetItemName
	ldr r1, _0809AAEC  @ gUnknown_02022CAA
	adds r1, #4
	ldr r2, [sp, #0xc]
	adds r1, r2, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r6, #0
	movs r3, #0
	bl DrawTextInline
	adds r0, r7, #0
	adds r1, r4, #0
	bl IsItemDisplayUsable
	lsls r0, r0, #0x18
	movs r5, #1
	cmp r0, #0
	beq _0809AAA6
	movs r5, #2
_0809AAA6:
	adds r0, r4, #0
	bl GetItemUses
	adds r2, r0, #0
	mov r0, sl
	adds r1, r5, #0
	bl DrawDecNumber
	movs r0, #0x80
	add sl, r0
	add r9, r0
	ldr r2, [sp, #0xc]
	adds r2, #0x80
	str r2, [sp, #0xc]
	movs r0, #1
	add r8, r0
	ldr r2, [sp, #8]
	cmp r8, r2
	blt _0809AA38
_0809AACC:
	movs r0, #1
	bl BG_EnableSyncByMask
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809AAE4: .4byte gUnknown_02022DEA
_0809AAE8: .4byte gUnknown_02013608
_0809AAEC: .4byte gUnknown_02022CAA

	THUMB_FUNC_START sub_809AAF0
sub_809AAF0: @ 0x0809AAF0
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	lsls r1, r1, #0x18
	asrs r6, r1, #0x18
	cmp r6, #0
	bne _0809AB34
	ldr r4, _0809ABBC  @ gUnknown_02013640
	adds r0, r4, #0
	bl Text_Clear
	ldr r0, _0809ABC0  @ 0x000005A1
	bl GetStringFromIndex
	ldr r5, _0809ABC4  @ gUnknown_02022D02
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #6
	bl DrawTextInline
	ldr r0, _0809ABC8  @ 0x000005A2
	bl GetStringFromIndex
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0x29
	bl DrawTextInline
_0809AB34:
	ldr r4, _0809ABCC  @ gUnknown_02022D08
	adds r0, r4, #0
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	adds r3, r4, #2
	adds r5, r7, #0
	adds r5, #0x29
	adds r6, r7, #0
	adds r6, #0x2a
	ldrb r0, [r5]
	movs r1, #2
	ldrb r2, [r6]
	cmp r0, r2
	bne _0809AB58
	movs r1, #1
_0809AB58:
	ldrb r2, [r6]
	ldrb r0, [r5]
	subs r2, r2, r0
	adds r0, r3, #0
	bl DrawDecNumber
	adds r0, r4, #0
	adds r0, #0x10
	movs r1, #4
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	adds r3, r4, #0
	adds r3, #0x12
	ldrb r0, [r5]
	movs r1, #2
	ldrb r2, [r6]
	cmp r0, r2
	bne _0809AB82
	movs r1, #4
_0809AB82:
	ldrb r2, [r5]
	adds r0, r3, #0
	bl DrawDecNumber
	adds r0, r4, #0
	adds r0, #0x14
	movs r1, #0
	movs r2, #0x16
	bl sub_8004B0C
	adds r3, r4, #0
	adds r3, #0x18
	ldrb r0, [r5]
	movs r1, #2
	ldrb r2, [r6]
	cmp r0, r2
	bne _0809ABA6
	movs r1, #4
_0809ABA6:
	ldrb r2, [r6]
	adds r0, r3, #0
	bl DrawDecNumber
	movs r0, #1
	bl BG_EnableSyncByMask
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809ABBC: .4byte gUnknown_02013640
_0809ABC0: .4byte 0x000005A1
_0809ABC4: .4byte gUnknown_02022D02
_0809ABC8: .4byte 0x000005A2
_0809ABCC: .4byte gUnknown_02022D08

	THUMB_FUNC_START sub_809ABD0
sub_809ABD0: @ 0x0809ABD0
	push {r4, lr}
	adds r4, r0, #0
	adds r2, r1, #0
	adds r0, #0x2a
	adds r3, r4, #0
	adds r3, #0x29
	ldrb r1, [r3]
	ldrb r0, [r0]
	cmp r0, r1
	bls _0809AC20
	adds r0, r1, #1
	strb r0, [r3]
	ldr r0, [r2, #0xc]
	movs r1, #0xb
	negs r1, r1
	ands r0, r1
	str r0, [r2, #0xc]
	ldr r0, [r2]
	ldrb r0, [r0, #4]
	bl sub_80952EC
	ldr r0, _0809AC1C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809AC0C
	movs r0, #0x6a
	bl m4aSongNumStart
_0809AC0C:
	ldrh r1, [r4, #0x2e]
	lsrs r1, r1, #1
	adds r0, r4, #0
	bl sub_809A580
	movs r0, #1
	b _0809AC34
	.align 2, 0
_0809AC1C: .4byte gUnknown_0202BCF0
_0809AC20:
	ldr r0, _0809AC3C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809AC32
	movs r0, #0x6c
	bl m4aSongNumStart
_0809AC32:
	movs r0, #0
_0809AC34:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0809AC3C: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_809AC40
sub_809AC40: @ 0x0809AC40
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809AC94
	adds r1, r5, #0
	adds r1, #0x29
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	ldr r0, [r4, #0xc]
	movs r1, #0xa
	orrs r0, r1
	str r0, [r4, #0xc]
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl sub_8095314
	ldr r0, _0809AC90  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809AC80
	movs r0, #0x6b
	bl m4aSongNumStart
_0809AC80:
	ldrh r1, [r5, #0x2e]
	lsrs r1, r1, #1
	adds r0, r5, #0
	bl sub_809A580
	movs r0, #1
	b _0809ACA8
	.align 2, 0
_0809AC90: .4byte gUnknown_0202BCF0
_0809AC94:
	ldr r0, _0809ACB0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809ACA6
	movs r0, #0x6c
	bl m4aSongNumStart
_0809ACA6:
	movs r0, #0
_0809ACA8:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0809ACB0: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_809ACB4
sub_809ACB4: @ 0x0809ACB4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2e]
	bl sub_8095354
	adds r5, r0, #0
	ldr r1, [r5, #0xc]
	movs r0, #0x80
	lsls r0, r0, #0x12
	ands r0, r1
	cmp r0, #0
	beq _0809ACF4
	ldrh r1, [r4, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r4, #0x30]
	subs r1, r1, r2
	adds r1, #0x18
	ldr r2, _0809ACF0  @ 0x00000C52
_0809ACE6:
	adds r3, r4, #0
	bl sub_8097DA8
	b _0809AD88
	.align 2, 0
_0809ACF0: .4byte 0x00000C52
_0809ACF4:
	movs r0, #8
	ands r1, r0
	cmp r1, #0
	beq _0809AD76
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809AD34
	adds r0, r5, #0
	bl sub_8097E74
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809AD34
	ldrh r1, [r4, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r4, #0x30]
	subs r1, r1, r2
	adds r1, #0x18
	ldr r2, _0809AD30  @ 0x0000088A
	b _0809ACE6
	.align 2, 0
_0809AD30: .4byte 0x0000088A
_0809AD34:
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809AD6C
	adds r0, r5, #0
	bl sub_8097E38
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809AD6C
	ldrh r1, [r4, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r4, #0x30]
	subs r1, r1, r2
	adds r1, #0x18
	ldr r2, _0809AD68  @ 0x00000889
	b _0809ACE6
	.align 2, 0
_0809AD68: .4byte 0x00000889
_0809AD6C:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_809ABD0
	b _0809AD7E
_0809AD76:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_809AC40
_0809AD7E:
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809AD88
	movs r0, #1
	b _0809AD8A
_0809AD88:
	movs r0, #0
_0809AD8A:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_809AD90
sub_809AD90: @ 0x0809AD90
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x30]
	lsrs r1, r0, #4
	cmp r1, #0
	ble _0809ADA4
	ldrh r0, [r4, #0x2e]
	lsrs r0, r0, #1
	cmp r0, r1
	ble _0809ADBA
_0809ADA4:
	adds r5, r1, #5
	bl sub_8095374
	subs r0, #1
	asrs r0, r0, #1
	cmp r5, r0
	bge _0809ADBE
	ldrh r0, [r4, #0x2e]
	lsrs r0, r0, #1
	cmp r0, r5
	blt _0809ADBE
_0809ADBA:
	movs r0, #1
	b _0809ADC0
_0809ADBE:
	movs r0, #0
_0809ADC0:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_809ADC8
sub_809ADC8: @ 0x0809ADC8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_809AD90
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809AE0A
	ldrh r0, [r5, #0x2e]
	lsrs r4, r0, #1
	ldrh r0, [r5, #0x30]
	lsrs r6, r0, #4
	bl sub_8095374
	subs r0, #1
	asrs r1, r0, #1
	cmp r4, r6
	bgt _0809ADFC
	cmp r4, #0
	bne _0809ADF2
	strh r4, [r5, #0x30]
	b _0809ADF8
_0809ADF2:
	subs r0, r4, #1
	lsls r0, r0, #4
	strh r0, [r5, #0x30]
_0809ADF8:
	cmp r4, r6
	ble _0809AE0A
_0809ADFC:
	cmp r4, r1
	bne _0809AE04
	subs r0, r4, #5
	b _0809AE06
_0809AE04:
	subs r0, r4, #4
_0809AE06:
	lsls r0, r0, #4
	strh r0, [r5, #0x30]
_0809AE0A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809AE10
sub_809AE10: @ 0x0809AE10
	push {r4, r5, lr}
	movs r5, #0
	ldrh r0, [r0, #0x30]
	lsrs r4, r0, #4
	bl sub_8095374
	subs r0, #1
	asrs r1, r0, #1
	cmp r4, #0
	ble _0809AE26
	movs r5, #1
_0809AE26:
	adds r0, r4, #5
	cmp r0, r1
	bge _0809AE30
	movs r0, #2
	orrs r5, r0
_0809AE30:
	adds r0, r5, #0
	bl sub_80ACD60
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809AE3C
sub_809AE3C: @ 0x0809AE3C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80958BC
	bl sub_8095394
	bl sub_80958FC
	movs r1, #0
	strh r0, [r4, #0x2e]
	ldr r0, [r4, #0x14]
	adds r0, #0x2a
	ldrb r0, [r0]
	adds r2, r4, #0
	adds r2, #0x2a
	strb r0, [r2]
	ldr r0, [r4, #0x14]
	adds r0, #0x2b
	ldrb r0, [r0]
	subs r2, #1
	strb r0, [r2]
	ldr r0, [r4, #0x14]
	ldrh r0, [r0, #0x3c]
	strh r0, [r4, #0x30]
	ldrh r0, [r4, #0x2e]
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x37
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809AE7C
sub_809AE7C: @ 0x0809AE7C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _0809AFF8  @ gUnknown_08A181E8
	bl SetupBackgrounds
	ldr r4, _0809AFFC  @ gLCDControlBuffer
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	adds r0, r5, #0
	bl sub_809ADC8
	ldr r0, _0809B000  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _0809B004  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _0809B008  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	movs r3, #2
	orrs r0, r3
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	orrs r0, r3
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldrh r2, [r5, #0x30]
	subs r2, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	bl sub_809A814
	bl sub_809A874
	movs r0, #7
	bl BG_EnableSyncByMask
	bl SetDefaultColorEffects
	adds r0, r5, #0
	bl sub_809A8F8
	ldr r0, _0809B00C  @ sub_809A66C
	adds r1, r5, #0
	bl Get6CDifferedLoop6C
	adds r0, r5, #0
	bl sub_80AD47C
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_80AD4A0
	ldrh r1, [r5, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r5, #0x30]
	subs r2, #0x18
	subs r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #7
	bl sub_80AD51C
	movs r3, #0x80
	lsls r3, r3, #2
	movs r0, #2
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0xe0
	movs r2, #0x20
	bl sub_8097748
	ldrh r4, [r5, #0x30]
	bl sub_8095374
	adds r2, r0, #0
	subs r2, #1
	lsrs r0, r2, #0x1f
	adds r2, r2, r0
	asrs r2, r2, #1
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0xa
	adds r1, r4, #0
	movs r3, #6
	bl sub_80976CC
	movs r0, #0x20
	movs r1, #0x8f
	movs r2, #9
	adds r3, r5, #0
	bl StartHelpPromptSprite
	ldrh r0, [r5, #0x2e]
	bl sub_8095354
	bl sub_809A9F8
	ldrh r0, [r5, #0x2e]
	bl sub_8095354
	bl sub_809A930
	movs r4, #0
_0809AFC4:
	ldrh r1, [r5, #0x30]
	lsrs r1, r1, #4
	adds r1, r1, r4
	adds r0, r5, #0
	bl sub_809A580
	adds r4, #1
	cmp r4, #5
	ble _0809AFC4
	adds r0, r5, #0
	movs r1, #0
	bl sub_809AAF0
	adds r0, r5, #0
	bl NewGreenTextColorManager
	ldr r0, _0809B010  @ 0x06014800
	movs r1, #5
	bl LoadDialogueBoxGfx
	bl sub_8095A1C
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809AFF8: .4byte gUnknown_08A181E8
_0809AFFC: .4byte gLCDControlBuffer
_0809B000: .4byte gBG0TilemapBuffer
_0809B004: .4byte gBG1TilemapBuffer
_0809B008: .4byte gBG2TilemapBuffer
_0809B00C: .4byte sub_809A66C
_0809B010: .4byte 0x06014800

	THUMB_FUNC_START sub_809B014
sub_809B014: @ 0x0809B014
	push {lr}
	bl Delete6CMenuScroll
	bl DeleteEach6CDifferedLoop
	bl sub_80AD2D4
	bl sub_80AD580
	bl EndHelpPromptSprite
	bl sub_80ACDDC
	bl EndBG3Slider_
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809B038
sub_809B038: @ 0x0809B038
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	cmp r0, r1
	beq _0809B046
	b _0809B25A
_0809B046:
	ldr r4, _0809B094  @ gKeyStatusPtr
	ldr r2, [r4]
	ldrh r6, [r2, #6]
	adds r3, r5, #0
	adds r3, #0x36
	movs r7, #4
	strb r7, [r3]
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0809B066
	ldrh r6, [r2, #4]
	movs r0, #8
	strb r0, [r3]
_0809B066:
	ldr r0, [r4]
	ldrh r1, [r0, #8]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0809B0BC
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0809B09C
	ldr r0, _0809B098  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0809B08A
	b _0809B2D4
_0809B08A:
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0809B2D4
	.align 2, 0
_0809B094: .4byte gKeyStatusPtr
_0809B098: .4byte gUnknown_0202BCF0
_0809B09C:
	ldr r0, _0809B0B8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809B0AE
	movs r0, #0x6a
	bl m4aSongNumStart
_0809B0AE:
	adds r0, r5, #0
	movs r1, #0x63
	bl Proc_GotoLabel
	b _0809B2D4
	.align 2, 0
_0809B0B8: .4byte gUnknown_0202BCF0
_0809B0BC:
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0809B0E4
	ldr r0, _0809B0E0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809B0D6
	movs r0, #0x6a
	bl m4aSongNumStart
_0809B0D6:
	adds r0, r5, #0
	movs r1, #3
	bl Proc_GotoLabel
	b _0809B2D4
	.align 2, 0
_0809B0E0: .4byte gUnknown_0202BCF0
_0809B0E4:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809B0F8
	adds r0, r5, #0
	movs r1, #4
	bl Proc_GotoLabel
	b _0809B2D4
_0809B0F8:
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0809B11A
	adds r0, r5, #0
	bl sub_809ACB4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809B110
	b _0809B2D4
_0809B110:
	adds r0, r5, #0
	movs r1, #1
	bl sub_809AAF0
	b _0809B2D4
_0809B11A:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0809B144
	ldr r0, _0809B140  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809B134
	movs r0, #0x6b
	bl m4aSongNumStart
_0809B134:
	adds r0, r5, #0
	movs r1, #0xa
	bl Proc_GotoLabel
	b _0809B2D4
	.align 2, 0
_0809B140: .4byte gUnknown_0202BCF0
_0809B144:
	movs r0, #0x20
	ands r0, r6
	cmp r0, #0
	beq _0809B15A
	ldrh r1, [r5, #0x2e]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0809B15A
	subs r0, r1, #1
	strh r0, [r5, #0x2e]
_0809B15A:
	movs r0, #0x10
	ands r0, r6
	cmp r0, #0
	beq _0809B17E
	ldrh r1, [r5, #0x2e]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0809B17E
	ldrh r4, [r5, #0x2e]
	bl sub_8095374
	subs r0, #1
	cmp r4, r0
	bge _0809B17E
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
_0809B17E:
	movs r0, #0x40
	ands r0, r6
	cmp r0, #0
	beq _0809B190
	ldrh r0, [r5, #0x2e]
	subs r0, #2
	cmp r0, #0
	blt _0809B190
	strh r0, [r5, #0x2e]
_0809B190:
	movs r0, #0x80
	ands r6, r0
	cmp r6, #0
	beq _0809B1AC
	ldrh r4, [r5, #0x2e]
	adds r4, #2
	bl sub_8095374
	subs r0, #1
	cmp r4, r0
	bgt _0809B1AC
	ldrh r0, [r5, #0x2e]
	adds r0, #2
	strh r0, [r5, #0x2e]
_0809B1AC:
	ldrh r0, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	cmp r0, r1
	bne _0809B1B6
	b _0809B2D4
_0809B1B6:
	ldrh r0, [r5, #0x2e]
	bl sub_8095354
	bl sub_809A9F8
	ldr r0, _0809B224  @ sub_809A9E8
	movs r1, #1
	adds r2, r5, #0
	bl sub_80ACE20
	ldr r0, _0809B228  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809B1DC
	movs r0, #0x65
	bl m4aSongNumStart
_0809B1DC:
	adds r0, r5, #0
	bl sub_809AD90
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809B22C
	ldrh r0, [r5, #0x2e]
	ldrh r1, [r5, #0x2c]
	cmp r0, r1
	bcs _0809B1FC
	ldrh r1, [r5, #0x30]
	lsrs r1, r1, #4
	subs r1, #1
	adds r0, r5, #0
	bl sub_809A580
_0809B1FC:
	ldrh r0, [r5, #0x2e]
	ldrh r1, [r5, #0x2c]
	cmp r0, r1
	bls _0809B210
	ldrh r1, [r5, #0x30]
	lsrs r1, r1, #4
	adds r1, #6
	adds r0, r5, #0
	bl sub_809A580
_0809B210:
	ldrh r0, [r5, #0x2e]
	movs r1, #1
	ands r1, r0
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x70
	bl sub_80AD4E4
	b _0809B252
	.align 2, 0
_0809B224: .4byte sub_809A9E8
_0809B228: .4byte gUnknown_0202BCF0
_0809B22C:
	ldrh r1, [r5, #0x2e]
	strh r1, [r5, #0x2c]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x11
	lsls r1, r1, #4
	ldrh r2, [r5, #0x30]
	subs r2, #0x18
	subs r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #7
	bl sub_80AD51C
_0809B252:
	ldrh r0, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	cmp r0, r1
	beq _0809B2D4
_0809B25A:
	ldrh r3, [r5, #0x2e]
	ldrh r2, [r5, #0x2c]
	cmp r3, r2
	bcs _0809B26E
	adds r0, r5, #0
	adds r0, #0x36
	ldrb r1, [r0]
	ldrh r0, [r5, #0x30]
	subs r0, r0, r1
	strh r0, [r5, #0x30]
_0809B26E:
	cmp r3, r2
	bls _0809B27E
	adds r1, r5, #0
	adds r1, #0x36
	ldrh r0, [r5, #0x30]
	ldrb r1, [r1]
	adds r0, r0, r1
	strh r0, [r5, #0x30]
_0809B27E:
	ldrh r1, [r5, #0x30]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0809B2A4
	lsrs r0, r1, #4
	subs r0, #1
	bl sub_809A644
	ldrh r0, [r5, #0x30]
	lsrs r0, r0, #4
	adds r0, #6
	bl sub_809A644
	adds r0, r5, #0
	bl sub_809AE10
	ldrh r0, [r5, #0x2e]
	strh r0, [r5, #0x2c]
_0809B2A4:
	ldrh r2, [r5, #0x30]
	subs r2, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	ldrh r4, [r5, #0x30]
	bl sub_8095374
	adds r2, r0, #0
	subs r2, #1
	lsrs r0, r2, #0x1f
	adds r2, r2, r0
	asrs r2, r2, #1
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0xa
	adds r1, r4, #0
	movs r3, #6
	bl sub_80976CC
_0809B2D4:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809B2DC
sub_809B2DC: @ 0x0809B2DC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r1, [r4, #0x34]
	adds r1, #4
	strh r1, [r4, #0x34]
	ldrh r0, [r4, #0x30]
	adds r0, #4
	strh r0, [r4, #0x30]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmp r1, #0x20
	bne _0809B2FA
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0809B2FA:
	ldrh r2, [r4, #0x30]
	subs r2, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	ldrh r1, [r4, #0x30]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0809B31C
	lsrs r0, r1, #4
	subs r0, #1
	bl sub_809A644
_0809B31C:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809B324
sub_809B324: @ 0x0809B324
	push {r4, lr}
	adds r4, r0, #0
	ldrh r1, [r4, #0x30]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne _0809B33C
	lsrs r1, r1, #4
	subs r1, #1
	adds r0, r4, #0
	bl sub_809A580
_0809B33C:
	ldrh r1, [r4, #0x34]
	subs r1, #4
	strh r1, [r4, #0x34]
	ldrh r0, [r4, #0x30]
	subs r0, #4
	strh r0, [r4, #0x30]
	lsls r1, r1, #0x10
	cmp r1, #0
	bne _0809B354
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0809B354:
	ldrh r2, [r4, #0x30]
	subs r2, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START nullsub_21
nullsub_21: @ 0x0809B36C
	bx lr

	THUMB_FUNC_START sub_809B370
sub_809B370: @ 0x0809B370
	push {lr}
	bl nullsub_21
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0xd0
	movs r1, #0x68
	movs r2, #0
	bl sub_80AD51C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809B388
sub_809B388: @ 0x0809B388
	push {lr}
	adds r3, r0, #0
	ldrh r1, [r3, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r3, #0x30]
	subs r2, #0x18
	subs r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #7
	bl sub_80AD51C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809B3B4
sub_809B3B4: @ 0x0809B3B4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809B404  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809B3D8
	ldr r0, _0809B408  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809B3D8
	movs r0, #0x6c
	bl m4aSongNumStart
_0809B3D8:
	ldr r0, _0809B404  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0809B3FE
	ldr r0, _0809B408  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809B3F8
	movs r0, #0x65
	bl m4aSongNumStart
_0809B3F8:
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0809B3FE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809B404: .4byte gKeyStatusPtr
_0809B408: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_809B40C
sub_809B40C: @ 0x0809B40C
	push {lr}
	ldr r2, [r0, #0x14]
	ldrh r1, [r0, #0x30]
	strh r1, [r2, #0x3c]
	ldr r1, [r0, #0x14]
	adds r2, r0, #0
	adds r2, #0x29
	ldrb r2, [r2]
	adds r1, #0x2b
	strb r2, [r1]
	ldrh r0, [r0, #0x2e]
	bl sub_8095354
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_80953C0
	bl EndBG3Slider_
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809B438
sub_809B438: @ 0x0809B438
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x14]
	adds r0, #0x36
	movs r5, #1
	strb r5, [r0]
	ldr r0, [r4, #0x14]
	movs r1, #6
	bl Proc_GotoLabel
	adds r4, #0x37
	strb r5, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809B458
sub_809B458: @ 0x0809B458
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2e]
	bl sub_8095354
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_80953C0
	adds r0, r4, #0
	bl sub_80920DC
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809B478
sub_809B478: @ 0x0809B478
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_80956A8
	movs r1, #0
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	adds r4, #0x29
	strb r1, [r4]
	movs r5, #1
_0809B48C:
	adds r0, r5, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0809B4AE
	ldr r0, [r1]
	cmp r0, #0
	beq _0809B4AE
	ldr r0, [r1, #0xc]
	ldr r1, _0809B4BC  @ 0x0001000C
	ands r0, r1
	cmp r0, #0
	bne _0809B4AE
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
_0809B4AE:
	adds r5, #1
	cmp r5, #0x3f
	ble _0809B48C
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809B4BC: .4byte 0x0001000C

	THUMB_FUNC_START sub_809B4C0
sub_809B4C0: @ 0x0809B4C0
	ldr r2, _0809B4E0  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_0809B4E0: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_809B4E4
sub_809B4E4: @ 0x0809B4E4
	ldr r2, _0809B500  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_0809B500: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_809B504
sub_809B504: @ 0x0809B504
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x11
	bl SetStatScreenConfig
	ldrh r0, [r4, #0x2e]
	bl sub_8095354
	adds r1, r4, #0
	bl StartStatScreen
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809B520
sub_809B520: @ 0x0809B520
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80958BC
	bl sub_8095674
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809B538
sub_809B538: @ 0x0809B538
	push {r4, r5, r6, lr}
	adds r6, r2, #0
	lsls r1, r1, #1
	adds r4, r0, #0
	adds r4, #0x1e
	adds r4, r4, r1
	ldrh r5, [r4]
	lsls r3, r3, #1
	adds r1, r6, #0
	adds r1, #0x1e
	adds r1, r1, r3
	ldrh r2, [r1]
	strh r2, [r4]
	strh r5, [r1]
	bl UnitRemoveInvalidItems
	adds r0, r6, #0
	bl UnitRemoveInvalidItems
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809B564
sub_809B564: @ 0x0809B564
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809B5C8  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0809B5E8
	ldr r0, [r4, #0x34]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne _0809B582
	b _0809B744
_0809B582:
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r2, r0, #0
	ldr r3, [r4, #0x38]
	cmp r3, #0xff
	beq _0809B5B0
	ldr r0, [r4, #0x3c]
	cmp r0, #0xff
	bne _0809B5B0
	ldr r0, [r4, #0x34]
	adds r0, #8
	asrs r0, r0, #3
	movs r1, #1
	ands r0, r1
	asrs r1, r3, #3
	cmp r0, r1
	beq _0809B5B0
	movs r0, #5
	cmp r2, #5
	beq _0809B5AE
	adds r0, r2, #1
_0809B5AE:
	adds r2, r0, #0
_0809B5B0:
	cmp r2, #0
	bgt _0809B5B6
	b _0809B744
_0809B5B6:
	ldr r1, [r4, #0x34]
	movs r0, #7
	ands r0, r1
	cmp r2, r0
	ble _0809B5CC
	adds r0, r1, #0
	subs r0, #8
	b _0809B5CE
	.align 2, 0
_0809B5C8: .4byte gKeyStatusPtr
_0809B5CC:
	subs r0, r2, #1
_0809B5CE:
	str r0, [r4, #0x34]
	ldr r0, _0809B5E4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0809B5DE
	b _0809B738
_0809B5DE:
	movs r0, #0x67
	b _0809B734
	.align 2, 0
_0809B5E4: .4byte gUnknown_0202BCF0
_0809B5E8:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0809B658
	ldr r0, [r4, #0x34]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	beq _0809B5FC
	b _0809B744
_0809B5FC:
	ldr r0, [r4, #0x30]
	bl GetUnitItemCount
	adds r2, r0, #0
	ldr r3, [r4, #0x38]
	cmp r3, #0xff
	beq _0809B62A
	ldr r0, [r4, #0x3c]
	cmp r0, #0xff
	bne _0809B62A
	ldr r0, [r4, #0x34]
	adds r0, #8
	asrs r0, r0, #3
	movs r1, #1
	ands r0, r1
	asrs r1, r3, #3
	cmp r0, r1
	beq _0809B62A
	movs r0, #5
	cmp r2, #5
	beq _0809B628
	adds r0, r2, #1
_0809B628:
	adds r2, r0, #0
_0809B62A:
	cmp r2, #0
	bgt _0809B630
	b _0809B744
_0809B630:
	ldr r1, [r4, #0x34]
	movs r0, #7
	ands r0, r1
	cmp r2, r0
	ble _0809B640
	adds r0, r1, #0
	adds r0, #8
	b _0809B642
_0809B640:
	adds r0, r2, #7
_0809B642:
	str r0, [r4, #0x34]
	ldr r0, _0809B654  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809B738
	movs r0, #0x67
	b _0809B734
	.align 2, 0
_0809B654: .4byte gUnknown_0202BCF0
_0809B658:
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0809B6C4
	ldr r0, [r4, #0x34]
	asrs r0, r0, #3
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r0, [r1]
	bl GetUnitItemCount
	adds r3, r0, #0
	ldr r1, [r4, #0x38]
	cmp r1, #0xff
	beq _0809B694
	ldr r0, [r4, #0x3c]
	cmp r0, #0xff
	bne _0809B694
	ldr r0, [r4, #0x34]
	asrs r0, r0, #3
	asrs r1, r1, #3
	cmp r0, r1
	beq _0809B694
	movs r0, #5
	cmp r3, #5
	beq _0809B692
	adds r0, r3, #1
_0809B692:
	adds r3, r0, #0
_0809B694:
	ldr r2, [r4, #0x34]
	movs r0, #7
	ands r0, r2
	cmp r0, #0
	ble _0809B6A4
	subs r0, r2, #1
	str r0, [r4, #0x34]
	b _0809B726
_0809B6A4:
	ldr r0, _0809B6C0  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0809B744
	movs r0, #8
	ands r2, r0
	adds r0, r2, r3
	subs r0, #1
	str r0, [r4, #0x34]
	b _0809B726
	.align 2, 0
_0809B6C0: .4byte gKeyStatusPtr
_0809B6C4:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _0809B744
	ldr r0, [r4, #0x34]
	asrs r0, r0, #3
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r0, [r1]
	bl GetUnitItemCount
	adds r3, r0, #0
	ldr r1, [r4, #0x38]
	cmp r1, #0xff
	beq _0809B700
	ldr r0, [r4, #0x3c]
	cmp r0, #0xff
	bne _0809B700
	ldr r0, [r4, #0x34]
	asrs r0, r0, #3
	asrs r1, r1, #3
	cmp r0, r1
	beq _0809B700
	movs r0, #5
	cmp r3, #5
	beq _0809B6FE
	adds r0, r3, #1
_0809B6FE:
	adds r3, r0, #0
_0809B700:
	ldr r2, [r4, #0x34]
	movs r0, #7
	ands r0, r2
	subs r1, r3, #1
	cmp r0, r1
	bge _0809B712
	adds r0, r2, #1
	str r0, [r4, #0x34]
	b _0809B726
_0809B712:
	ldr r0, _0809B73C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _0809B744
	movs r0, #8
	ands r2, r0
	str r2, [r4, #0x34]
_0809B726:
	ldr r0, _0809B740  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809B738
	movs r0, #0x66
_0809B734:
	bl m4aSongNumStart
_0809B738:
	movs r0, #1
	b _0809B746
	.align 2, 0
_0809B73C: .4byte gKeyStatusPtr
_0809B740: .4byte gUnknown_0202BCF0
_0809B744:
	movs r0, #0
_0809B746:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_809B74C
sub_809B74C: @ 0x0809B74C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r4, r0, #0
	mov r9, r1
	mov sl, r2
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	str r3, [sp, #8]
	movs r1, #0xb
	movs r2, #9
	movs r3, #0
	bl TileMap_FillRect
	mov r0, sl
	bl GetUnitItemCount
	str r0, [sp, #0x10]
	movs r0, #0
	str r0, [sp, #0xc]
	ldr r1, [sp, #0x10]
	cmp r0, r1
	bge _0809B820
	adds r0, r4, #4
	str r0, [sp, #0x14]
	mov r8, r4
_0809B786:
	ldr r0, [sp, #0xc]
	lsls r1, r0, #1
	mov r0, sl
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r6, [r0]
	ldr r1, [sp, #8]
	cmp r1, #0
	beq _0809B7A2
	mov r0, sl
	adds r1, r6, #0
	bl CanUnitUseItemPrepScreen
	b _0809B7AA
_0809B7A2:
	mov r0, sl
	adds r1, r6, #0
	bl IsItemDisplayUsable
_0809B7AA:
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	mov r0, r9
	bl Text_Clear
	adds r0, r6, #0
	bl GetItemName
	adds r1, r0, #0
	movs r2, #0
	lsls r0, r4, #0x18
	asrs r5, r0, #0x18
	cmp r5, #0
	bne _0809B7C8
	movs r2, #1
_0809B7C8:
	movs r0, #0
	str r0, [sp]
	str r1, [sp, #4]
	mov r0, r9
	ldr r1, [sp, #0x14]
	movs r3, #0
	bl DrawTextInline
	mov r4, r8
	adds r4, #0x16
	movs r7, #1
	cmp r5, #0
	beq _0809B7E4
	movs r7, #2
_0809B7E4:
	adds r0, r6, #0
	bl GetItemUses
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r7, #0
	bl DrawDecNumber
	adds r0, r6, #0
	bl GetItemIconId
	adds r1, r0, #0
	mov r0, r8
	movs r2, #0x80
	lsls r2, r2, #7
	bl DrawIcon
	movs r0, #8
	add r9, r0
	ldr r1, [sp, #0x14]
	adds r1, #0x80
	str r1, [sp, #0x14]
	movs r0, #0x80
	add r8, r0
	ldr r1, [sp, #0xc]
	adds r1, #1
	str r1, [sp, #0xc]
	ldr r0, [sp, #0x10]
	cmp r1, r0
	blt _0809B786
_0809B820:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809B830
sub_809B830: @ 0x0809B830
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r7, r1, #0
	adds r0, r7, #0
	bl GetUnitItemCount
	adds r6, r0, #0
	movs r5, #0
	cmp r5, r6
	bge _0809B866
_0809B844:
	lsls r1, r5, #1
	adds r0, r7, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetItemIconId
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0x80
	lsls r2, r2, #7
	bl DrawIcon
	adds r4, #0x80
	adds r5, #1
	cmp r5, r6
	blt _0809B844
_0809B866:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809B86C
sub_809B86C: @ 0x0809B86C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0x28
	mov r8, r0
	add r1, sp, #8
	ldr r0, _0809B964  @ gUnknown_08205C44
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	ldr r0, _0809B968  @ gUnknown_08A181E8
	ldrh r0, [r0]
	bl SetupBackgrounds
	add r0, sp, #8
	bl SetupFaceGfxData
	ldr r3, _0809B96C  @ gLCDControlBuffer
	ldrb r1, [r3, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r3, #0xc]
	ldrb r1, [r3, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r2, r0
	strb r2, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #0
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #1
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #2
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	bl Font_InitForUIDefault
	bl ResetIconGraphics_
	bl LoadUiFrameGraphics
	bl LoadObjUIGfx
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r0, _0809B970  @ 0x06014000
	movs r1, #1
	negs r1, r1
	bl LoadDialogueBoxGfx
	movs r0, #4
	bl LoadIconPalettes
	bl sub_8095A1C
	ldr r0, _0809B974  @ gUnknown_02013510
	adds r6, r0, #0
	adds r6, #0x28
	adds r5, r0, #0
	movs r4, #4
_0809B932:
	adds r0, r5, #0
	movs r1, #7
	bl Text_Allocate
	adds r0, r6, #0
	movs r1, #7
	bl Text_Allocate
	adds r6, #8
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0809B932
	movs r0, #0xff
	mov r4, r8
	str r0, [r4, #0x38]
	ldr r1, [r4, #0x40]
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	beq _0809B978
	adds r0, r1, #0
	adds r0, #8
	str r0, [r4, #0x34]
	b _0809B992
	.align 2, 0
_0809B964: .4byte gUnknown_08205C44
_0809B968: .4byte gUnknown_08A181E8
_0809B96C: .4byte gLCDControlBuffer
_0809B970: .4byte 0x06014000
_0809B974: .4byte gUnknown_02013510
_0809B978:
	mov r1, r8
	ldr r0, [r1, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	bne _0809B98C
	movs r0, #8
	mov r2, r8
	str r0, [r2, #0x34]
	b _0809B992
_0809B98C:
	movs r0, #0
	mov r3, r8
	str r0, [r3, #0x34]
_0809B992:
	movs r0, #0xff
	mov r4, r8
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x2c]
	bl GetUnitPortraitId
	adds r1, r0, #0
	movs r4, #4
	negs r4, r4
	ldr r0, _0809BB24  @ 0x00000203
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	adds r3, r4, #0
	bl sub_80064F4
	mov r1, r8
	ldr r0, [r1, #0x30]
	bl GetUnitPortraitId
	adds r1, r0, #0
	ldr r0, _0809BB28  @ 0x00000202
	str r0, [sp]
	movs r0, #1
	movs r2, #0xae
	adds r3, r4, #0
	bl sub_80064F4
	movs r6, #0
	str r6, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0xe
	movs r3, #0xc
	bl DrawUiFrame2
	str r6, [sp]
	movs r0, #0xf
	movs r1, #8
	movs r2, #0xe
	movs r3, #0xc
	bl DrawUiFrame2
	movs r0, #7
	bl BG_EnableSyncByMask
	mov r2, r8
	ldr r0, [r2, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r7, r0, #0
	bl GetStringTextWidth
	adds r3, r0, #0
	movs r4, #0x30
	subs r3, r4, r3
	lsrs r0, r3, #0x1f
	adds r3, r3, r0
	asrs r3, r3, #1
	ldr r0, _0809BB2C  @ gBG0TilemapBuffer
	mov r9, r0
	movs r5, #6
	str r5, [sp]
	str r7, [sp, #4]
	movs r0, #0
	mov r1, r9
	movs r2, #0
	bl DrawTextInline
	mov r1, r8
	ldr r0, [r1, #0x30]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r7, r0, #0
	bl GetStringTextWidth
	subs r4, r4, r0
	lsrs r0, r4, #0x1f
	adds r4, r4, r0
	asrs r4, r4, #1
	mov r1, r9
	adds r1, #0x30
	str r5, [sp]
	str r7, [sp, #4]
	movs r0, #0
	movs r2, #0
	adds r3, r4, #0
	bl DrawTextInline
	movs r0, #0x91
	lsls r0, r0, #2
	add r0, r9
	ldr r4, _0809BB30  @ gUnknown_02013510
	mov r3, r8
	ldr r2, [r3, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl sub_809B74C
	movs r0, #0x98
	lsls r0, r0, #2
	add r0, r9
	adds r4, #0x28
	mov r1, r8
	ldr r2, [r1, #0x30]
	adds r1, r4, #0
	movs r3, #0
	bl sub_809B74C
	mov r0, r8
	bl sub_80AC9C0
	mov r0, r8
	bl sub_80AD47C
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_80AD4A0
	mov r2, r8
	ldr r1, [r2, #0x34]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl sub_80AD51C
	movs r0, #0xc8
	movs r1, #0x93
	movs r2, #2
	mov r3, r8
	bl StartHelpPromptSprite
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [sp]
	mov r4, r8
	str r4, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl sub_80ADB7C
	movs r1, #0x28
	negs r1, r1
	movs r4, #1
	negs r4, r4
	movs r0, #0
	adds r2, r4, #0
	movs r3, #1
	bl sub_80ADBFC
	movs r0, #1
	movs r1, #0xb8
	adds r2, r4, #0
	movs r3, #0
	bl sub_80ADBFC
	movs r0, #1
	movs r1, #0xe
	movs r2, #4
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	add sp, #0x28
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809BB24: .4byte 0x00000203
_0809BB28: .4byte 0x00000202
_0809BB2C: .4byte gBG0TilemapBuffer
_0809BB30: .4byte gUnknown_02013510

	THUMB_FUNC_START sub_809BB34
sub_809BB34: @ 0x0809BB34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r2, [r6, #0x3c]
	cmp r2, #0xff
	beq _0809BB60
	ldr r0, _0809BB5C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0809BB54
	b _0809BDB8
_0809BB54:
	bl CloseHelpBox
	movs r0, #0xff
	b _0809BE18
	.align 2, 0
_0809BB5C: .4byte gKeyStatusPtr
_0809BB60:
	ldr r0, _0809BB9C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809BBA0
	ldr r2, [r6, #0x34]
	asrs r3, r2, #3
	lsls r1, r3, #2
	adds r0, r6, #0
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	movs r4, #7
	ands r4, r2
	lsls r1, r4, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	bne _0809BB90
	b _0809BE1A
_0809BB90:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #4
	adds r0, #0x10
	lsls r1, r4, #4
	b _0809BE10
	.align 2, 0
_0809BB9C: .4byte gKeyStatusPtr
_0809BBA0:
	ldr r4, [r6, #0x38]
	cmp r4, #0xff
	bne _0809BBA8
	b _0809BD00
_0809BBA8:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0809BBB2
	b _0809BCB8
_0809BBB2:
	asrs r0, r4, #3
	lsls r0, r0, #2
	adds r7, r6, #0
	adds r7, #0x2c
	adds r0, r7, r0
	ldr r0, [r0]
	movs r1, #7
	mov r8, r1
	ands r4, r1
	ldr r3, [r6, #0x34]
	asrs r1, r3, #3
	lsls r1, r1, #2
	adds r1, r7, r1
	ldr r2, [r1]
	mov r1, r8
	ands r3, r1
	adds r1, r4, #0
	bl sub_8097EA0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809BBF4
	movs r1, #1
	negs r1, r1
	ldr r2, _0809BBF0  @ 0x0000088B
	adds r0, r1, #0
	adds r3, r6, #0
	bl sub_8097DA8
	b _0809BE1A
	.align 2, 0
_0809BBF0: .4byte 0x0000088B
_0809BBF4:
	ldr r1, [r6, #0x38]
	asrs r0, r1, #3
	lsls r0, r0, #2
	adds r0, r7, r0
	ldr r0, [r0]
	mov r2, r8
	ands r1, r2
	ldr r3, [r6, #0x34]
	asrs r2, r3, #3
	lsls r2, r2, #2
	adds r2, r7, r2
	ldr r2, [r2]
	mov r4, r8
	ands r3, r4
	bl sub_809B538
	ldr r4, _0809BC58  @ gUnknown_02022EEC
	ldr r5, _0809BC5C  @ gUnknown_02013510
	ldr r2, [r6, #0x2c]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl sub_809B74C
	adds r4, #0x1c
	adds r5, #0x28
	ldr r2, [r6, #0x30]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl sub_809B74C
	movs r0, #1
	bl BG_EnableSyncByMask
	ldr r0, [r6, #0x38]
	asrs r0, r0, #3
	lsls r0, r0, #2
	adds r0, r7, r0
	ldr r0, [r0]
	bl GetUnitItemCount
	adds r2, r0, #0
	cmp r2, #0
	bne _0809BC60
	ldr r0, [r6, #0x38]
	adds r0, #8
	movs r1, #8
	ands r0, r1
	b _0809BC74
	.align 2, 0
_0809BC58: .4byte gUnknown_02022EEC
_0809BC5C: .4byte gUnknown_02013510
_0809BC60:
	ldr r1, [r6, #0x38]
	adds r0, r1, #0
	mov r3, r8
	ands r0, r3
	cmp r2, r0
	bgt _0809BC76
	movs r0, #8
	ands r1, r0
	adds r0, r1, r2
	subs r0, #1
_0809BC74:
	str r0, [r6, #0x38]
_0809BC76:
	ldr r0, _0809BCB4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809BC88
	movs r0, #0x6a
	bl m4aSongNumStart
_0809BC88:
	movs r0, #0
	bl sub_80ACA84
	ldr r1, [r6, #0x38]
	str r1, [r6, #0x34]
	movs r0, #0xff
	str r0, [r6, #0x38]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl sub_80AD51C
	b _0809BE1A
	.align 2, 0
_0809BCB4: .4byte gUnknown_0202BCF0
_0809BCB8:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _0809BCC2
	b _0809BDB8
_0809BCC2:
	str r4, [r6, #0x34]
	str r2, [r6, #0x38]
	asrs r1, r4, #3
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #4
	adds r0, #0x10
	movs r1, #7
	ands r4, r1
	lsls r1, r4, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl sub_80AD51C
	ldr r0, _0809BCFC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809BCF4
	movs r0, #0x6b
	bl m4aSongNumStart
_0809BCF4:
	movs r0, #0
	bl sub_80ACA84
	b _0809BE1A
	.align 2, 0
_0809BCFC: .4byte gUnknown_0202BCF0
_0809BD00:
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0809BD90
	ldr r0, [r6, #0x34]
	asrs r0, r0, #3
	adds r0, #1
	ands r0, r2
	lsls r0, r0, #2
	adds r1, r6, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r0, [r1]
	bl GetUnitItemCount
	adds r4, r0, #0
	ldr r2, [r6, #0x34]
	str r2, [r6, #0x38]
	asrs r0, r2, #3
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	adds r1, #0x10
	movs r0, #7
	ands r2, r0
	lsls r2, r2, #4
	adds r2, #0x48
	movs r0, #0
	movs r3, #0
	bl sub_80AC9D4
	cmp r4, #4
	bgt _0809BD50
	ldr r0, [r6, #0x34]
	adds r0, #8
	movs r1, #8
	ands r0, r1
	adds r0, r0, r4
	b _0809BD58
_0809BD50:
	ldr r0, [r6, #0x34]
	adds r0, #8
	movs r1, #0xf
	ands r0, r1
_0809BD58:
	str r0, [r6, #0x34]
	ldr r1, [r6, #0x34]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl sub_80AD51C
	ldr r0, _0809BD8C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809BE1A
	movs r0, #0x6a
	bl m4aSongNumStart
	b _0809BE1A
	.align 2, 0
_0809BD8C: .4byte gUnknown_0202BCF0
_0809BD90:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0809BDB8
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	ldr r0, _0809BDB4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809BE1A
	movs r0, #0x6b
	bl m4aSongNumStart
	b _0809BE1A
	.align 2, 0
_0809BDB4: .4byte gUnknown_0202BCF0
_0809BDB8:
	adds r0, r6, #0
	bl sub_809B564
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809BE1A
	ldr r1, [r6, #0x34]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r5, #7
	ands r1, r5
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl sub_80AD51C
	ldr r0, [r6, #0x3c]
	cmp r0, #0xff
	beq _0809BE1A
	ldr r2, [r6, #0x34]
	asrs r4, r2, #3
	lsls r1, r4, #2
	adds r0, r6, #0
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	adds r3, r5, #0
	ands r3, r2
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _0809BE1A
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #4
	adds r0, #0x10
	lsls r1, r3, #4
_0809BE10:
	adds r1, #0x48
	bl StartItemHelpBox
	ldr r0, [r6, #0x34]
_0809BE18:
	str r0, [r6, #0x3c]
_0809BE1A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809BE24
sub_809BE24: @ 0x0809BE24
	push {lr}
	bl EndBG3Slider_
	movs r0, #0
	bl DeleteFaceByIndex
	movs r0, #1
	bl DeleteFaceByIndex
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809BE3C
sub_809BE3C: @ 0x0809BE3C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	ldr r0, _0809BE5C  @ gUnknown_08A1901C
	bl Proc_CreateBlockingChild
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	movs r1, #1
	negs r1, r1
	str r1, [r0, #0x40]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809BE5C: .4byte gUnknown_08A1901C

	THUMB_FUNC_START sub_809BE60
sub_809BE60: @ 0x0809BE60
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, _0809BE7C  @ gUnknown_08A1901C
	bl Proc_CreateBlockingChild
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x40]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809BE7C: .4byte gUnknown_08A1901C

	THUMB_FUNC_START sub_809BE80
sub_809BE80: @ 0x0809BE80
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r5, _0809BEAC  @ gKeyStatusPtr
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	cmp r6, #0
	beq _0809BEC2
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r2, r0, #0
	ldr r0, [r4, #0x30]
	cmp r0, #0
	ble _0809BEB0
	subs r0, #1
	str r0, [r4, #0x30]
	b _0809BEEE
	.align 2, 0
_0809BEAC: .4byte gKeyStatusPtr
_0809BEB0:
	ldr r0, [r5]
	ldrh r1, [r0, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0809BF08
	subs r0, r2, #1
	str r0, [r4, #0x30]
	b _0809BEEE
_0809BEC2:
	movs r7, #0x80
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0809BF08
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	subs r0, #1
	ldr r1, [r4, #0x30]
	cmp r1, r0
	bge _0809BEE0
	adds r0, r1, #1
	str r0, [r4, #0x30]
	b _0809BEEE
_0809BEE0:
	ldr r0, [r5]
	ldrh r1, [r0, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0809BF08
	str r6, [r4, #0x30]
_0809BEEE:
	ldr r0, _0809BF04  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809BF00
	movs r0, #0x66
	bl m4aSongNumStart
_0809BF00:
	movs r0, #1
	b _0809BF0A
	.align 2, 0
_0809BF04: .4byte gUnknown_0202BCF0
_0809BF08:
	movs r0, #0
_0809BF0A:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_809BF10
sub_809BF10: @ 0x0809BF10
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	mov r8, r0
	ldr r6, _0809BF78  @ gUnknown_02013498
	adds r5, r6, #0
	movs r4, #7
_0809BF20:
	adds r0, r5, #0
	bl Text_Clear
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0809BF20
	ldr r0, _0809BF7C  @ 0x000004E9
	bl GetStringFromIndex
	adds r1, r6, #0
	adds r6, #8
	ldr r5, _0809BF80  @ gUnknown_02023D88
	movs r7, #0
	str r7, [sp]
	str r0, [sp, #4]
	adds r0, r1, #0
	adds r1, r5, #0
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	mov r0, r8
	bl UnitHasMagicRank
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #0
	beq _0809BF88
	ldr r0, _0809BF84  @ 0x000004FF
	bl GetStringFromIndex
	adds r2, r6, #0
	adds r6, #8
	adds r1, r5, #0
	adds r1, #0x80
	str r7, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	b _0809BFA4
	.align 2, 0
_0809BF78: .4byte gUnknown_02013498
_0809BF7C: .4byte 0x000004E9
_0809BF80: .4byte gUnknown_02023D88
_0809BF84: .4byte 0x000004FF
_0809BF88:
	ldr r0, _0809C090  @ 0x000004FE
	bl GetStringFromIndex
	adds r2, r6, #0
	adds r6, #8
	adds r1, r5, #0
	adds r1, #0x80
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
_0809BFA4:
	ldr r0, _0809C094  @ 0x000004EC
	bl GetStringFromIndex
	adds r1, r6, #0
	adds r6, #8
	ldr r7, _0809C098  @ gUnknown_02023E88
	movs r5, #0
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r1, #0
	adds r1, r7, #0
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	ldr r0, _0809C09C  @ 0x000004ED
	bl GetStringFromIndex
	adds r2, r6, #0
	adds r6, #8
	adds r1, r7, #0
	adds r1, #0x80
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	ldr r0, _0809C0A0  @ 0x000004EE
	bl GetStringFromIndex
	adds r2, r6, #0
	adds r6, #8
	adds r1, r7, #0
	subs r1, #0xf2
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	ldr r0, _0809C0A4  @ 0x000004EF
	bl GetStringFromIndex
	adds r2, r6, #0
	adds r6, #8
	adds r1, r7, #0
	subs r1, #0x72
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	movs r0, #0x9e
	lsls r0, r0, #3
	bl GetStringFromIndex
	adds r2, r6, #0
	adds r6, #8
	adds r1, r7, #0
	adds r1, #0xe
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	ldr r0, _0809C0A8  @ 0x000004F7
	bl GetStringFromIndex
	adds r2, r6, #0
	adds r6, #8
	adds r1, r7, #0
	adds r1, #0x8e
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	mov r1, r8
	ldr r0, [r1, #4]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r4, r0, #0
	movs r0, #0x40
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	adds r0, r6, #0
	ldr r2, _0809C0AC  @ 0xFFFFFE8A
	adds r1, r7, r2
	str r5, [sp]
	str r4, [sp, #4]
	movs r2, #0
	bl DrawTextInline
	ldr r1, _0809C0B0  @ 0xFFFFFE82
	adds r0, r7, r1
	movs r1, #3
	movs r2, #0x24
	movs r3, #0x25
	bl sub_8004D5C
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809C090: .4byte 0x000004FE
_0809C094: .4byte 0x000004EC
_0809C098: .4byte gUnknown_02023E88
_0809C09C: .4byte 0x000004ED
_0809C0A0: .4byte 0x000004EE
_0809C0A4: .4byte 0x000004EF
_0809C0A8: .4byte 0x000004F7
_0809C0AC: .4byte 0xFFFFFE8A
_0809C0B0: .4byte 0xFFFFFE82

	THUMB_FUNC_START sub_809C0B4
sub_809C0B4: @ 0x0809C0B4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x2c
	adds r5, r0, #0
	mov r8, r1
	movs r0, #2
	bl UnpackUiBarPalette
	add r4, sp, #0xc
	adds r0, r5, #0
	bl GetUnitCurrentHp
	adds r2, r0, #0
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r3, r0, #3
	movs r0, #0xb
	ldrsb r0, [r5, r0]
	movs r1, #0xc0
	ands r0, r1
	cmp r0, #0x80
	beq _0809C0E8
	adds r0, r3, #0
	movs r1, #0x3c
	b _0809C0EC
_0809C0E8:
	adds r0, r2, #0
	movs r1, #5
_0809C0EC:
	bl __divsi3
	str r0, [r4]
	adds r0, r5, #0
	bl GetUnitPower
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r5, #4]
	ldrb r1, [r1, #0x14]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl __divsi3
	str r0, [sp, #0x10]
	adds r0, r5, #0
	bl GetUnitSkill
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r5, #4]
	ldrb r1, [r1, #0x15]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl __divsi3
	str r0, [sp, #0x14]
	adds r0, r5, #0
	bl GetUnitSpeed
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r5, #4]
	ldrb r1, [r1, #0x16]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl __divsi3
	str r0, [sp, #0x18]
	adds r0, r5, #0
	bl GetUnitLuck
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r1, #0x1e
	bl __divsi3
	str r0, [sp, #0x1c]
	adds r0, r5, #0
	bl GetUnitDefense
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r5, #4]
	ldrb r1, [r1, #0x17]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl __divsi3
	str r0, [sp, #0x20]
	adds r0, r5, #0
	bl GetUnitResistance
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r4, [r5, #4]
	movs r1, #0x18
	ldrsb r1, [r4, r1]
	bl __divsi3
	str r0, [sp, #0x24]
	movs r1, #0x11
	ldrsb r1, [r4, r1]
	ldr r0, [r5]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	movs r0, #0x1a
	ldrsb r0, [r5, r0]
	adds r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r1, #0x19
	ldrsb r1, [r4, r1]
	bl __divsi3
	str r0, [sp, #0x28]
	movs r5, #0
	add r6, sp, #0xc
	movs r7, #0xe0
	lsls r7, r7, #7
_0809C1BE:
	mov r4, r8
	asrs r4, r5
	movs r0, #1
	ands r4, r0
	cmp r4, #0
	beq _0809C200
	lsls r0, r7, #0xf
	lsrs r0, r0, #0x14
	movs r2, #3
	ands r2, r5
	lsls r2, r2, #6
	adds r2, #0x92
	asrs r3, r5, #2
	lsls r1, r3, #3
	subs r1, r1, r3
	adds r2, r2, r1
	lsls r2, r2, #1
	ldr r1, _0809C1FC  @ gBG0TilemapBuffer
	adds r2, r2, r1
	movs r1, #0x18
	str r1, [sp]
	ldr r1, [r6]
	str r1, [sp, #4]
	movs r1, #0
	str r1, [sp, #8]
	movs r1, #4
	movs r3, #0xc0
	lsls r3, r3, #6
	bl sub_8086B2C
	b _0809C22E
	.align 2, 0
_0809C1FC: .4byte gBG0TilemapBuffer
_0809C200:
	lsls r0, r7, #0xf
	lsrs r0, r0, #0x14
	movs r2, #3
	ands r2, r5
	lsls r2, r2, #6
	adds r2, #0x92
	asrs r3, r5, #2
	lsls r1, r3, #3
	subs r1, r1, r3
	adds r2, r2, r1
	lsls r2, r2, #1
	ldr r1, _0809C250  @ gBG0TilemapBuffer
	adds r2, r2, r1
	movs r1, #0x18
	str r1, [sp]
	ldr r1, [r6]
	str r1, [sp, #4]
	str r4, [sp, #8]
	movs r1, #4
	movs r3, #0x80
	lsls r3, r3, #6
	bl sub_8086B2C
_0809C22E:
	adds r6, #4
	movs r0, #0x80
	lsls r0, r0, #1
	adds r7, r7, r0
	adds r5, #1
	cmp r5, #7
	ble _0809C1BE
	movs r0, #1
	bl BG_EnableSyncByMask
	add sp, #0x2c
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809C250: .4byte gBG0TilemapBuffer

	THUMB_FUNC_START sub_809C254
sub_809C254: @ 0x0809C254
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r6, _0809C274  @ gUnknown_02023D90
	bl GetUnitCurrentHp
	adds r2, r0, #0
	movs r0, #0xb
	ldrsb r0, [r4, r0]
	movs r1, #0xc0
	ands r0, r1
	cmp r0, #0x80
	bne _0809C278
	cmp r2, #0x78
	beq _0809C27C
	b _0809C280
	.align 2, 0
_0809C274: .4byte gUnknown_02023D90
_0809C278:
	cmp r2, #0x3c
	bne _0809C280
_0809C27C:
	movs r5, #4
	b _0809C282
_0809C280:
	movs r5, #2
_0809C282:
	adds r0, r4, #0
	bl GetUnitCurrentHp
	adds r2, r0, #0
	adds r0, r6, #0
	adds r1, r5, #0
	bl DrawDecNumber
	ldr r5, _0809C3E0  @ gUnknown_02023E10
	adds r0, r4, #0
	bl GetUnitPower
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x14]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne _0809C2AA
	movs r6, #4
_0809C2AA:
	adds r0, r4, #0
	bl GetUnitPower
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r6, #0
	bl DrawDecNumber
	adds r7, r5, #0
	adds r7, #0x80
	adds r0, r4, #0
	bl GetUnitSkill
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x15]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne _0809C2D4
	movs r6, #4
_0809C2D4:
	adds r0, r4, #0
	bl GetUnitSkill
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl DrawDecNumber
	movs r0, #0x80
	lsls r0, r0, #1
	adds r7, r5, r0
	adds r0, r4, #0
	bl GetUnitSpeed
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x16]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne _0809C300
	movs r6, #4
_0809C300:
	adds r0, r4, #0
	bl GetUnitSpeed
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl DrawDecNumber
	adds r7, r5, #0
	subs r7, #0x72
	adds r0, r4, #0
	bl GetUnitLuck
	movs r6, #2
	cmp r0, #0x1e
	bne _0809C322
	movs r6, #4
_0809C322:
	adds r0, r4, #0
	bl GetUnitLuck
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl DrawDecNumber
	adds r7, r5, #0
	adds r7, #0xe
	adds r0, r4, #0
	bl GetUnitDefense
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x17]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne _0809C34C
	movs r6, #4
_0809C34C:
	adds r0, r4, #0
	bl GetUnitDefense
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl DrawDecNumber
	adds r7, r5, #0
	adds r7, #0x8e
	adds r0, r4, #0
	bl GetUnitResistance
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x18]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne _0809C376
	movs r6, #4
_0809C376:
	adds r0, r4, #0
	bl GetUnitResistance
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl DrawDecNumber
	movs r1, #0x87
	lsls r1, r1, #1
	adds r6, r5, r1
	ldr r2, [r4, #4]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r0, [r4]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	movs r0, #0x1a
	ldrsb r0, [r4, r0]
	adds r3, r1, r0
	movs r0, #0x19
	ldrsb r0, [r2, r0]
	movs r1, #2
	cmp r3, r0
	bne _0809C3AE
	movs r1, #4
_0809C3AE:
	adds r0, r6, #0
	adds r2, r3, #0
	bl DrawDecNumber
	ldr r1, _0809C3E4  @ 0xFFFFFEFE
	adds r0, r5, r1
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	ldr r1, _0809C3E8  @ 0xFFFFFF00
	adds r0, r5, r1
	movs r2, #8
	ldrsb r2, [r4, r2]
	movs r1, #2
	bl DrawDecNumber
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809C3E0: .4byte gUnknown_02023E10
_0809C3E4: .4byte 0xFFFFFEFE
_0809C3E8: .4byte 0xFFFFFF00

	THUMB_FUNC_START sub_809C3EC
sub_809C3EC: @ 0x0809C3EC
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r4, _0809C46C  @ gUnknown_02013560
	adds r0, r4, #0
	bl Text_Clear
	adds r0, r4, #0
	adds r0, #8
	bl Text_Clear
	adds r4, #0x20
	adds r0, r4, #0
	bl Text_Clear
	movs r0, #1
	negs r0, r0
	cmp r5, r0
	beq _0809C4A2
	lsls r1, r5, #1
	adds r0, r6, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r4, [r0]
	adds r0, r4, #0
	bl GetItemUseDescId
	adds r5, r0, #0
	mov r1, sp
	ldr r0, _0809C470  @ gUnknown_08205C64
	ldm r0!, {r2, r3, r7}
	stm r1!, {r2, r3, r7}
	cmp r5, #0
	beq _0809C4A2
	adds r0, r6, #0
	adds r1, r4, #0
	bl CanUnitUseItemPrepScreen
	cmp r0, #0
	beq _0809C478
	ldr r0, [sp]
	movs r1, #0
	bl Text_SetColorId
	ldr r0, [sp, #4]
	movs r1, #0
	bl Text_SetColorId
	ldr r0, [sp, #8]
	movs r1, #0
	bl Text_SetColorId
	adds r0, r5, #0
	bl GetStringFromIndex
	adds r1, r0, #0
	ldr r2, _0809C474  @ gUnknown_02022FC6
	mov r0, sp
	movs r3, #3
	bl sub_8008A3C
	b _0809C4A2
	.align 2, 0
_0809C46C: .4byte gUnknown_02013560
_0809C470: .4byte gUnknown_08205C64
_0809C474: .4byte gUnknown_02022FC6
_0809C478:
	ldr r0, [sp]
	movs r1, #1
	bl Text_SetColorId
	ldr r0, [sp, #4]
	movs r1, #1
	bl Text_SetColorId
	ldr r0, [sp, #8]
	movs r1, #1
	bl Text_SetColorId
	adds r0, r5, #0
	bl GetStringFromIndex
	adds r1, r0, #0
	ldr r2, _0809C4B0  @ gUnknown_02022FC6
	mov r0, sp
	movs r3, #3
	bl sub_8008A3C
_0809C4A2:
	movs r0, #1
	bl BG_EnableSyncByMask
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809C4B0: .4byte gUnknown_02022FC6

	THUMB_FUNC_START sub_809C4B4
sub_809C4B4: @ 0x0809C4B4
	push {lr}
	sub sp, #4
	movs r3, #0xc8
	lsls r3, r3, #8
	ldr r0, [r0, #0x2c]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #4]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x78
	movs r2, #0xa
	bl sub_8027C48
	bl SMS_FlushDirect
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809C4D8
sub_809C4D8: @ 0x0809C4D8
	movs r1, #0
	str r1, [r0, #0x30]
	movs r1, #0xff
	str r1, [r0, #0x38]
	bx lr

	THUMB_FUNC_START sub_809C4E4
sub_809C4E4: @ 0x0809C4E4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x28
	adds r7, r0, #0
	add r1, sp, #8
	ldr r0, _0809C7E0  @ gUnknown_08205C70
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r6}
	stm r1!, {r2, r3, r6}
	ldm r0!, {r4, r6}
	stm r1!, {r4, r6}
	ldr r4, _0809C7E4  @ gLCDControlBuffer
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	ldr r0, _0809C7E8  @ gUnknown_08A181E8
	bl SetupBackgrounds
	add r0, sp, #8
	bl SetupFaceGfxData
	movs r0, #0xff
	str r0, [r7, #0x34]
	movs r0, #0
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #1
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #2
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	ldrb r1, [r4, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r4, #0xc]
	ldrb r1, [r4, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r2, r0
	strb r2, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	bl Font_InitForUIDefault
	bl ResetIconGraphics_
	bl LoadUiFrameGraphics
	bl LoadObjUIGfx
	bl SetupMapSpritesPalettes
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r0, _0809C7EC  @ 0x06014000
	movs r1, #1
	negs r1, r1
	bl LoadDialogueBoxGfx
	movs r0, #4
	bl LoadIconPalettes
	bl sub_8095A1C
	ldr r5, _0809C7F0  @ gUnknown_02013510
	movs r4, #4
_0809C5B6:
	adds r0, r5, #0
	movs r1, #7
	bl Text_Allocate
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0809C5B6
	ldr r5, _0809C7F4  @ gUnknown_02013498
	movs r4, #7
_0809C5CA:
	adds r0, r5, #0
	movs r1, #3
	bl Text_Init
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0809C5CA
	ldr r0, _0809C7F4  @ gUnknown_02013498
	mov sl, r0
	adds r0, #0x40
	movs r1, #8
	bl Text_Init
	mov r0, sl
	adds r0, #0xc8
	movs r1, #0xf
	bl Text_Init
	mov r0, sl
	adds r0, #0xd0
	movs r1, #0xf
	bl Text_Init
	mov r0, sl
	adds r0, #0xe8
	movs r1, #0xf
	bl Text_Init
	mov r0, sl
	adds r0, #0xd8
	movs r1, #0xe
	bl Text_Init
	mov r0, sl
	adds r0, #0xe0
	movs r1, #8
	bl Text_Init
	ldr r0, [r7, #0x2c]
	bl sub_809BF10
	ldr r0, [r7, #0x2c]
	bl sub_809C254
	ldr r0, [r7, #0x2c]
	movs r1, #0
	bl sub_809C0B4
	ldr r0, [r7, #0x2c]
	bl GetUnitPortraitId
	adds r1, r0, #0
	movs r3, #4
	negs r3, r3
	ldr r0, _0809C7F8  @ 0x00000203
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	bl sub_80064F4
	movs r0, #0xc0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_8098C3C
	movs r0, #0x80
	lsls r0, r0, #4
	movs r1, #0xa
	bl sub_8098C8C
	ldr r0, _0809C7FC  @ gUnknown_08A1BAB8
	ldr r1, _0809C800  @ 0x06000440
	bl CopyDataWithPossibleUncomp
	ldr r0, _0809C804  @ gUnknown_08A1BAE4
	ldr r4, _0809C808  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _0809C80C  @ gBG1TilemapBuffer
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl CallARM_FillTileRect
	movs r0, #7
	bl BG_EnableSyncByMask
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r2, #0
	str r2, [sp]
	str r7, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl sub_80ADB7C
	movs r1, #0x28
	negs r1, r1
	movs r2, #1
	negs r2, r2
	movs r0, #0
	movs r3, #1
	bl sub_80ADBFC
	ldr r0, [r7, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r4, r0, #0
	bl GetStringTextWidth
	movs r3, #0x30
	subs r3, r3, r0
	lsrs r0, r3, #0x1f
	adds r3, r3, r0
	asrs r3, r3, #1
	movs r0, #6
	str r0, [sp]
	str r4, [sp, #4]
	movs r0, #0
	ldr r1, _0809C810  @ gBG0TilemapBuffer
	movs r2, #0
	bl DrawTextInline
	adds r0, r7, #0
	bl sub_80AC9C0
	adds r0, r7, #0
	bl sub_80AD47C
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_80AD4A0
	ldr r0, _0809C814  @ sub_809C4B4
	adds r1, r7, #0
	bl Get6CDifferedLoop6C
	ldr r6, _0809C7E4  @ gLCDControlBuffer
	ldrb r0, [r6, #1]
	movs r3, #0x20
	mov ip, r3
	mov r4, ip
	orrs r0, r4
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r6, #1]
	adds r1, r6, #0
	adds r1, #0x2d
	movs r0, #0x68
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x5e
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x92
	strb r0, [r1]
	movs r0, #0x34
	adds r0, r0, r6
	mov r9, r0
	ldrb r1, [r0]
	movs r2, #1
	mov r8, r2
	mov r3, r8
	orrs r1, r3
	movs r5, #2
	orrs r1, r5
	movs r4, #4
	orrs r1, r4
	movs r3, #8
	orrs r1, r3
	movs r2, #0x10
	orrs r1, r2
	ldr r6, _0809C818  @ gUnknown_030030B6
	ldrb r0, [r6]
	mov r6, r8
	orrs r0, r6
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	orrs r0, r2
	mov r2, ip
	orrs r1, r2
	mov r3, r9
	strb r1, [r3]
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	ldr r4, _0809C818  @ gUnknown_030030B6
	strb r0, [r4]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	movs r6, #0
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001ED0
	adds r0, r7, #0
	bl NewGreenTextColorManager
	movs r0, #0xc0
	movs r1, #0x90
	movs r2, #9
	adds r3, r7, #0
	bl StartHelpPromptSprite
	ldr r0, [r7, #0x2c]
	ldr r1, [r7, #0x30]
	bl sub_809C3EC
	mov r1, sl
	adds r1, #0x78
	ldr r2, [r7, #0x2c]
	ldr r0, _0809C81C  @ gUnknown_02022EEC
	movs r3, #1
	bl sub_809B74C
	ldr r1, [r7, #0x30]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x48
	movs r2, #0xb
	movs r3, #0x80
	lsls r3, r3, #4
	bl sub_80AD51C
	ldr r0, [r7, #0x2c]
	bl GetUnitSMSId
	bl SMS_RegisterUsage
	bl SMS_FlushIndirect
	add sp, #0x28
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809C7E0: .4byte gUnknown_08205C70
_0809C7E4: .4byte gLCDControlBuffer
_0809C7E8: .4byte gUnknown_08A181E8
_0809C7EC: .4byte 0x06014000
_0809C7F0: .4byte gUnknown_02013510
_0809C7F4: .4byte gUnknown_02013498
_0809C7F8: .4byte 0x00000203
_0809C7FC: .4byte gUnknown_08A1BAB8
_0809C800: .4byte 0x06000440
_0809C804: .4byte gUnknown_08A1BAE4
_0809C808: .4byte gUnknown_02020188
_0809C80C: .4byte gBG1TilemapBuffer
_0809C810: .4byte gBG0TilemapBuffer
_0809C814: .4byte sub_809C4B4
_0809C818: .4byte gUnknown_030030B6
_0809C81C: .4byte gUnknown_02022EEC

	THUMB_FUNC_START sub_809C820
sub_809C820: @ 0x0809C820
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	cmp r0, #0xff
	beq _0809C848
	ldr r0, _0809C844  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809C8F0
	bl CloseHelpBox
	movs r0, #0xff
	b _0809C938
	.align 2, 0
_0809C844: .4byte gKeyStatusPtr
_0809C848:
	ldr r0, _0809C8A8  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0809C91C
	movs r5, #1
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0809C8C8
	ldr r0, [r4, #0x2c]
	ldr r2, [r4, #0x30]
	lsls r2, r2, #1
	adds r1, r0, #0
	adds r1, #0x1e
	adds r1, r1, r2
	ldrh r1, [r1]
	bl CanUnitUseItemPrepScreen
	cmp r0, #0
	beq _0809C8B0
	ldr r2, [r4, #0x30]
	str r2, [r4, #0x34]
	lsls r2, r2, #4
	adds r2, #0x48
	movs r0, #0
	movs r1, #0x10
	movs r3, #0
	bl sub_80AC9D4
	str r5, [r4, #0x3c]
	ldr r0, _0809C8AC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809C89E
	movs r0, #0x6a
	bl m4aSongNumStart
_0809C89E:
	adds r0, r4, #0
	movs r1, #2
	bl Proc_GotoLabel
	b _0809C93A
	.align 2, 0
_0809C8A8: .4byte gKeyStatusPtr
_0809C8AC: .4byte gUnknown_0202BCF0
_0809C8B0:
	ldr r0, _0809C8C4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809C93A
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0809C93A
	.align 2, 0
_0809C8C4: .4byte gUnknown_0202BCF0
_0809C8C8:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0809C8F0
	adds r0, r4, #0
	movs r1, #6
	bl Proc_GotoLabel
	ldr r0, _0809C8EC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809C93A
	movs r0, #0x6b
	bl m4aSongNumStart
	b _0809C93A
	.align 2, 0
_0809C8EC: .4byte gUnknown_0202BCF0
_0809C8F0:
	adds r0, r4, #0
	bl sub_809BE80
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809C93A
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_80AD51C
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	bl sub_809C3EC
	ldr r0, [r4, #0x38]
	cmp r0, #0xff
	beq _0809C93A
_0809C91C:
	ldr r0, [r4, #0x2c]
	ldr r3, [r4, #0x30]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _0809C93A
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl StartItemHelpBox
	ldr r0, [r4, #0x30]
_0809C938:
	str r0, [r4, #0x38]
_0809C93A:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809C940
sub_809C940: @ 0x0809C940
	push {lr}
	bl EndBG3Slider_
	movs r0, #0
	bl DeleteFaceByIndex
	movs r0, #1
	bl DeleteFaceByIndex
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809C958
sub_809C958: @ 0x0809C958
	push {r4, r5, r6, lr}
	sub sp, #8
	ldr r4, _0809C9C4  @ gUnknown_02013570
	adds r0, r4, #0
	bl Text_Clear
	ldr r0, _0809C9C8  @ 0x00000585
	bl GetStringFromIndex
	adds r1, r4, #0
	adds r4, #8
	ldr r5, _0809C9CC  @ gUnknown_0202400A
	movs r6, #0
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r1, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	adds r0, r4, #0
	bl Text_Clear
	ldr r0, _0809C9D0  @ 0x00000843
	bl GetStringFromIndex
	adds r5, #0x84
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	ldr r0, _0809C9D4  @ 0x00000844
	bl GetStringFromIndex
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0x20
	bl DrawTextInline
	movs r0, #4
	bl BG_EnableSyncByMask
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809C9C4: .4byte gUnknown_02013570
_0809C9C8: .4byte 0x00000585
_0809C9CC: .4byte gUnknown_0202400A
_0809C9D0: .4byte 0x00000843
_0809C9D4: .4byte 0x00000844

	THUMB_FUNC_START sub_809C9D8
sub_809C9D8: @ 0x0809C9D8
	push {lr}
	ldr r0, _0809C9F0  @ gUnknown_0202400A
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r0}
	bx r0
	.align 2, 0
_0809C9F0: .4byte gUnknown_0202400A

	THUMB_FUNC_START sub_809C9F4
sub_809C9F4: @ 0x0809C9F4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_809C958
	ldr r0, [r4, #0x3c]
	lsls r0, r0, #5
	adds r0, #0x94
	movs r3, #0x80
	lsls r3, r3, #4
	movs r1, #0x78
	movs r2, #0
	bl sub_80AD51C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809CA14
sub_809CA14: @ 0x0809CA14
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r7, [r4, #0x3c]
	ldr r0, _0809CA6C  @ 0x0000A440
	str r0, [sp]
	movs r0, #0x80
	movs r1, #0x64
	movs r2, #0xc
	movs r3, #4
	bl sub_809A31C
	ldr r5, _0809CA70  @ gKeyStatusPtr
	ldr r3, [r5]
	ldrh r1, [r3, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0809CA78
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_80AD51C
	movs r0, #0
	bl sub_80ACA84
	bl sub_809C9D8
	ldr r0, _0809CA74  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809CADA
	movs r0, #0x6b
	bl m4aSongNumStart
	b _0809CADA
	.align 2, 0
_0809CA6C: .4byte 0x0000A440
_0809CA70: .4byte gKeyStatusPtr
_0809CA74: .4byte gUnknown_0202BCF0
_0809CA78:
	movs r6, #1
	adds r2, r6, #0
	ands r2, r1
	cmp r2, #0
	beq _0809CAE8
	bl sub_809C9D8
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	bne _0809CAB0
	bl sub_80AD564
	ldr r0, _0809CAAC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809CAA2
	movs r0, #0x6a
	bl m4aSongNumStart
_0809CAA2:
	adds r0, r4, #0
	movs r1, #3
	bl Proc_GotoLabel
	b _0809CB2A
	.align 2, 0
_0809CAAC: .4byte gUnknown_0202BCF0
_0809CAB0:
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_80AD51C
	ldr r0, _0809CAE4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809CAD4
	movs r0, #0x6b
	bl m4aSongNumStart
_0809CAD4:
	movs r0, #0
	bl sub_80ACA84
_0809CADA:
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _0809CB2A
	.align 2, 0
_0809CAE4: .4byte gUnknown_0202BCF0
_0809CAE8:
	ldrh r1, [r3, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0809CAF4
	str r2, [r4, #0x3c]
_0809CAF4:
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0809CB02
	str r6, [r4, #0x3c]
_0809CB02:
	ldr r0, [r4, #0x3c]
	cmp r7, r0
	beq _0809CB2A
	lsls r0, r0, #5
	adds r0, #0x94
	movs r3, #0x80
	lsls r3, r3, #4
	movs r1, #0x78
	movs r2, #0
	bl sub_80AD51C
	ldr r0, _0809CB34  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809CB2A
	movs r0, #0x67
	bl m4aSongNumStart
_0809CB2A:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809CB34: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_809CB38
sub_809CB38: @ 0x0809CB38
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	lsls r1, r1, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetItemIndex
	cmp r0, #0x8a
	beq _0809CB78
	cmp r0, #0x8a
	bgt _0809CB62
	cmp r0, #0x64
	blt _0809CBA0
	cmp r0, #0x68
	ble _0809CB78
	cmp r0, #0x88
	beq _0809CB78
	b _0809CBA0
_0809CB62:
	cmp r0, #0xb7
	beq _0809CB98
	cmp r0, #0xb7
	bgt _0809CB74
	cmp r0, #0x99
	bgt _0809CBA0
	cmp r0, #0x97
	blt _0809CBA0
	b _0809CB78
_0809CB74:
	cmp r0, #0xc1
	bne _0809CBA0
_0809CB78:
	ldr r0, _0809CB94  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809CB8A
	movs r0, #0x6a
	bl m4aSongNumStart
_0809CB8A:
	adds r0, r4, #0
	movs r1, #5
	bl Proc_GotoLabel
	b _0809CBA0
	.align 2, 0
_0809CB94: .4byte gUnknown_0202BCF0
_0809CB98:
	adds r0, r4, #0
	movs r1, #4
	bl Proc_GotoLabel
_0809CBA0:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809CBA8
sub_809CBA8: @ 0x0809CBA8
	push {r4, lr}
	adds r4, r0, #0
	bl EndBG3Slider_
	bl Font_InitForUIDefault
	movs r0, #0
	bl SetupBackgrounds
	bl EndGreenTextColorManager
	bl GetThread2SkipStack
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [r4, #0x40]
	bl ResetFaces
	bl EndHelpPromptSprite
	ldr r2, _0809CC38  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r1, r2, #0
	adds r1, #0x34
	ldrb r0, [r1]
	movs r3, #0x20
	orrs r0, r3
	strb r0, [r1]
	adds r2, #0x36
	ldrb r0, [r2]
	orrs r0, r3
	strb r0, [r2]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	bl sub_80ADC90
	bl DeleteEach6CDifferedLoop
	movs r0, #0
	bl DeleteFaceByIndex
	movs r0, #0
	bl sub_80ACA84
	ldr r0, [r4, #0x2c]
	ldr r2, [r4, #0x30]
	movs r1, #1
	movs r3, #0
	bl sub_802F664
	ldr r1, _0809CC3C  @ gBattleStats
	movs r0, #0x88
	lsls r0, r0, #1
	strh r0, [r1]
	bl BeginBattleAnimations
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809CC38: .4byte gLCDControlBuffer
_0809CC3C: .4byte gBattleStats

	THUMB_FUNC_START sub_809CC40
sub_809CC40: @ 0x0809CC40
	push {r4, lr}
	adds r4, r0, #0
	bl GetThread2SkipStack
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4, #0x40]
	cmp r1, r0
	bne _0809CC58
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0809CC58:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809CC60
sub_809CC60: @ 0x0809CC60
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r5, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_80953C0
	cmp r5, #0
	bne _0809CC84
	adds r0, r4, #0
	movs r1, #7
	bl Proc_GotoLabel
	b _0809CC94
_0809CC84:
	ldr r0, [r4, #0x30]
	cmp r0, r5
	blt _0809CC8E
	subs r0, #1
	str r0, [r4, #0x30]
_0809CC8E:
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_0809CC94:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809CC9C
sub_809CC9C: @ 0x0809CC9C
	push {lr}
	movs r0, #0x80
	lsls r0, r0, #1
	bl Sound_SetVolume80022EC
	bl CheckSomethingSomewhere
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809CCB8
	movs r0, #0x38
	bl sub_8002620
	b _0809CCDA
_0809CCB8:
	ldr r0, _0809CCD0  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809CCD4
	bl sub_800270C
	bl sub_80B9FC0
	b _0809CCDA
	.align 2, 0
_0809CCD0: .4byte gUnknown_03005280
_0809CCD4:
	movs r0, #0x34
	bl sub_8002620
_0809CCDA:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809CCE0
sub_809CCE0: @ 0x0809CCE0
	push {lr}
	sub sp, #4
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0
	str r0, [sp]
	movs r2, #0
	movs r3, #0x10
	bl sub_80029E8
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809CCFC
sub_809CCFC: @ 0x0809CCFC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809CD10  @ gUnknown_08A19064
	bl Proc_CreateBlockingChild
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809CD10: .4byte gUnknown_08A19064

	THUMB_FUNC_START sub_809CD14
sub_809CD14: @ 0x0809CD14
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r1, #0
	adds r7, r2, #0
	adds r0, r3, #0
	bl GetStringFromIndex
	mov r9, r0
	ldr r0, [sp, #0x28]
	bl GetItemIconId
	mov r8, r0
	mov r0, r9
	bl GetStringTextWidth
	mov sl, r0
	mov r0, r8
	cmp r0, #0
	beq _0809CD60
	lsls r4, r7, #5
	adds r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _0809CDCC  @ gBG2TilemapBuffer
	adds r4, r4, r0
	ldr r0, [sp, #0x28]
	bl GetItemIconId
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl DrawIcon
_0809CD60:
	ldr r4, _0809CDD0  @ gUnknown_02013570
	adds r0, r4, #0
	bl Text_Clear
	lsls r0, r7, #5
	mov r1, r8
	cmp r1, #0
	beq _0809CD72
	adds r0, #2
_0809CD72:
	adds r0, r0, r5
	lsls r0, r0, #1
	ldr r1, _0809CDCC  @ gBG2TilemapBuffer
	adds r1, r0, r1
	movs r0, #0
	str r0, [sp]
	mov r0, r9
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	movs r0, #4
	bl BG_EnableSyncByMask
	lsls r0, r5, #3
	subs r0, #4
	str r0, [r6, #0x40]
	lsls r0, r7, #3
	subs r0, #4
	str r0, [r6, #0x44]
	mov r0, sl
	cmp r0, #0
	bge _0809CDA6
	adds r0, #7
_0809CDA6:
	asrs r1, r0, #3
	adds r0, r1, #1
	str r0, [r6, #0x48]
	mov r0, r8
	cmp r0, #0
	beq _0809CDB6
	adds r0, r1, #3
	str r0, [r6, #0x48]
_0809CDB6:
	movs r0, #2
	str r0, [r6, #0x4c]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809CDCC: .4byte gBG2TilemapBuffer
_0809CDD0: .4byte gUnknown_02013570

	THUMB_FUNC_START sub_809CDD4
sub_809CDD4: @ 0x0809CDD4
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r4, [r7, #0x14]
	movs r0, #0xe0
	lsls r0, r0, #1
	movs r1, #3
	movs r2, #0
	adds r3, r7, #0
	bl sub_807EDF8
	ldr r0, [r4, #0x2c]
	bl GetUnitCurrentHp
	adds r1, r7, #0
	adds r1, #0x30
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitPower
	adds r1, r7, #0
	adds r1, #0x31
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitSkill
	adds r1, r7, #0
	adds r1, #0x32
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitSpeed
	adds r1, r7, #0
	adds r1, #0x33
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitLuck
	adds r1, r7, #0
	adds r1, #0x34
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitDefense
	adds r1, r7, #0
	adds r1, #0x35
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitResistance
	adds r1, r7, #0
	adds r1, #0x36
	strb r0, [r1]
	ldr r1, [r4, #0x2c]
	ldr r2, [r1, #4]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	ldrb r2, [r2, #0x11]
	adds r0, r0, r2
	ldrb r1, [r1, #0x1a]
	adds r1, r1, r0
	adds r0, r7, #0
	adds r0, #0x37
	strb r1, [r0]
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	lsls r3, r1, #1
	adds r2, r0, #0
	adds r2, #0x1e
	adds r2, r2, r3
	ldrh r5, [r2]
	bl sub_802F808
	adds r6, r0, #0
	ldr r0, [r4, #0x2c]
	movs r1, #0
	bl sub_809C0B4
	ldr r0, [r4, #0x2c]
	bl sub_809C254
	ldr r0, [r4, #0x2c]
	bl GetUnitCurrentHp
	adds r1, r7, #0
	adds r1, #0x38
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitPower
	adds r1, r7, #0
	adds r1, #0x39
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitSkill
	adds r1, r7, #0
	adds r1, #0x3a
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitSpeed
	adds r1, r7, #0
	adds r1, #0x3b
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitLuck
	adds r1, r7, #0
	adds r1, #0x3c
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitDefense
	adds r1, r7, #0
	adds r1, #0x3d
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitResistance
	adds r1, r7, #0
	adds r1, #0x3e
	strb r0, [r1]
	ldr r1, [r4, #0x2c]
	ldr r2, [r1, #4]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	ldrb r2, [r2, #0x11]
	adds r0, r0, r2
	ldrb r1, [r1, #0x1a]
	adds r1, r1, r0
	adds r0, r7, #0
	adds r0, #0x3f
	strb r1, [r0]
	str r5, [sp]
	adds r0, r7, #0
	movs r1, #0xe
	movs r2, #0xe
	adds r3, r6, #0
	bl sub_809CD14
	movs r4, #0
_0809CEF0:
	adds r0, r7, #0
	adds r0, #0x30
	adds r3, r0, r4
	adds r0, #8
	adds r2, r0, r4
	ldrb r0, [r3]
	ldrb r1, [r2]
	cmp r0, r1
	beq _0809CF1E
	asrs r1, r4, #2
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0xb0
	movs r1, #3
	ands r1, r4
	lsls r1, r1, #4
	adds r1, #0x2a
	ldrb r2, [r2]
	ldrb r3, [r3]
	subs r2, r2, r3
	bl sub_807EFF0
_0809CF1E:
	adds r4, #1
	cmp r4, #7
	ble _0809CEF0
	movs r0, #0x78
	str r0, [r7, #0x2c]
	ldr r0, _0809CF44  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809CF3A
	movs r0, #0x5a
	bl m4aSongNumStart
_0809CF3A:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809CF44: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_809CF48
sub_809CF48: @ 0x0809CF48
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, [r5, #0x40]
	ldr r1, [r5, #0x44]
	ldr r2, [r5, #0x48]
	ldr r3, [r5, #0x4c]
	ldr r4, _0809CF84  @ 0x0000A440
	str r4, [sp]
	bl sub_809A31C
	ldr r0, [r5, #0x2c]
	subs r0, #1
	str r0, [r5, #0x2c]
	cmp r0, #0
	beq _0809CF76
	ldr r0, _0809CF88  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0809CF7C
_0809CF76:
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_0809CF7C:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809CF84: .4byte 0x0000A440
_0809CF88: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_809CF8C
sub_809CF8C: @ 0x0809CF8C
	push {r4, r5, lr}
	ldr r4, [r0, #0x14]
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r5, r0, #0
	ldr r0, _0809CFB4  @ gUnknown_02024044
	movs r1, #0xe
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	cmp r5, #0
	bne _0809CFB8
	adds r0, r4, #0
	movs r1, #6
	bl Proc_GotoLabel
	b _0809CFD4
	.align 2, 0
_0809CFB4: .4byte gUnknown_02024044
_0809CFB8:
	ldr r0, [r4, #0x30]
	cmp r0, r5
	blt _0809CFC2
	subs r0, #1
	str r0, [r4, #0x30]
_0809CFC2:
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_80AD51C
_0809CFD4:
	ldr r0, _0809D008  @ gUnknown_02022EEC
	ldr r1, _0809D00C  @ gUnknown_02013510
	ldr r2, [r4, #0x2c]
	movs r3, #1
	bl sub_809B74C
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	bl sub_809C3EC
	movs r0, #0
	bl sub_80ACA84
	bl sub_807EE74
	movs r0, #5
	bl BG_EnableSyncByMask
	ldr r0, _0809D010  @ 0x06014000
	movs r1, #1
	negs r1, r1
	bl LoadDialogueBoxGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809D008: .4byte gUnknown_02022EEC
_0809D00C: .4byte gUnknown_02013510
_0809D010: .4byte 0x06014000

	THUMB_FUNC_START sub_809D014
sub_809D014: @ 0x0809D014
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r1, #0
	adds r7, r2, #0
	movs r0, #0x1f
	bl GetStringFromIndex
	mov r9, r0
	ldr r0, [sp, #0x28]
	bl GetItemIconId
	mov r8, r0
	mov r0, r9
	bl GetStringTextWidth
	mov sl, r0
	mov r0, r8
	cmp r0, #0
	beq _0809D060
	lsls r4, r7, #5
	adds r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _0809D0CC  @ gBG2TilemapBuffer
	adds r4, r4, r0
	ldr r0, [sp, #0x28]
	bl GetItemIconId
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl DrawIcon
_0809D060:
	ldr r4, _0809D0D0  @ gUnknown_02013570
	adds r0, r4, #0
	bl Text_Clear
	lsls r0, r7, #5
	mov r1, r8
	cmp r1, #0
	beq _0809D072
	adds r0, #2
_0809D072:
	adds r0, r0, r5
	lsls r0, r0, #1
	ldr r1, _0809D0CC  @ gBG2TilemapBuffer
	adds r1, r0, r1
	movs r0, #0
	str r0, [sp]
	mov r0, r9
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	movs r0, #4
	bl BG_EnableSyncByMask
	lsls r0, r5, #3
	subs r0, #4
	str r0, [r6, #0x34]
	lsls r0, r7, #3
	subs r0, #4
	str r0, [r6, #0x38]
	mov r0, sl
	cmp r0, #0
	bge _0809D0A6
	adds r0, #7
_0809D0A6:
	asrs r1, r0, #3
	adds r0, r1, #1
	str r0, [r6, #0x3c]
	mov r0, r8
	cmp r0, #0
	beq _0809D0B6
	adds r0, r1, #3
	str r0, [r6, #0x3c]
_0809D0B6:
	movs r0, #2
	str r0, [r6, #0x40]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D0CC: .4byte gBG2TilemapBuffer
_0809D0D0: .4byte gUnknown_02013570

	THUMB_FUNC_START sub_809D0D4
sub_809D0D4: @ 0x0809D0D4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r4, [r7, #0x14]
	movs r0, #0xe0
	lsls r0, r0, #1
	movs r1, #3
	movs r2, #0
	adds r3, r7, #0
	bl sub_807EDF8
	ldr r0, [r4, #0x2c]
	ldrb r0, [r0, #8]
	movs r1, #0x30
	adds r1, r1, r7
	mov r8, r1
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	lsls r3, r1, #1
	adds r2, r0, #0
	adds r2, #0x1e
	adds r2, r2, r3
	ldrh r5, [r2]
	bl sub_802F978
	adds r6, r0, #0
	ldr r0, [r4, #0x2c]
	movs r1, #0
	bl sub_809C0B4
	ldr r0, [r4, #0x2c]
	bl sub_809C254
	ldr r0, [r4, #0x2c]
	ldrb r0, [r0, #8]
	adds r4, r7, #0
	adds r4, #0x31
	strb r0, [r4]
	str r5, [sp]
	adds r0, r7, #0
	movs r1, #0x11
	movs r2, #0xe
	adds r3, r6, #0
	bl sub_809D014
	mov r0, r8
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r1, r0
	beq _0809D154
	adds r2, r0, #0
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	subs r2, r2, r0
	movs r0, #0xb0
	movs r1, #0x1a
	bl sub_807EFF0
_0809D154:
	movs r0, #0x78
	str r0, [r7, #0x2c]
	ldr r0, _0809D178  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809D16A
	movs r0, #0x5a
	bl m4aSongNumStart
_0809D16A:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D178: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_809D17C
sub_809D17C: @ 0x0809D17C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, [r5, #0x34]
	ldr r1, [r5, #0x38]
	ldr r2, [r5, #0x3c]
	ldr r3, [r5, #0x40]
	ldr r4, _0809D1B8  @ 0x0000A440
	str r4, [sp]
	bl sub_809A31C
	ldr r0, [r5, #0x2c]
	subs r0, #1
	str r0, [r5, #0x2c]
	cmp r0, #0
	beq _0809D1AA
	ldr r0, _0809D1BC  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq _0809D1B0
_0809D1AA:
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_0809D1B0:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809D1B8: .4byte 0x0000A440
_0809D1BC: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_809D1C0
sub_809D1C0: @ 0x0809D1C0
	push {r4, r5, lr}
	ldr r4, [r0, #0x14]
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r5, r0, #0
	ldr r0, _0809D1E8  @ gUnknown_0202404A
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	cmp r5, #0
	bne _0809D1EC
	adds r0, r4, #0
	movs r1, #6
	bl Proc_GotoLabel
	b _0809D208
	.align 2, 0
_0809D1E8: .4byte gUnknown_0202404A
_0809D1EC:
	ldr r0, [r4, #0x30]
	cmp r0, r5
	blt _0809D1F6
	subs r0, #1
	str r0, [r4, #0x30]
_0809D1F6:
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_80AD51C
_0809D208:
	ldr r0, _0809D238  @ gUnknown_02022EEC
	ldr r1, _0809D23C  @ gUnknown_02013510
	ldr r2, [r4, #0x2c]
	movs r3, #1
	bl sub_809B74C
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	bl sub_809C3EC
	movs r0, #0
	bl sub_80ACA84
	movs r0, #5
	bl BG_EnableSyncByMask
	ldr r0, _0809D240  @ 0x06014000
	movs r1, #1
	negs r1, r1
	bl LoadDialogueBoxGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809D238: .4byte gUnknown_02022EEC
_0809D23C: .4byte gUnknown_02013510
_0809D240: .4byte 0x06014000

	THUMB_FUNC_START sub_809D244
sub_809D244: @ 0x0809D244
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, _0809D270  @ 0x0000DFC0
	movs r5, #0x30
	movs r4, #3
_0809D24E:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x10
	ldr r3, _0809D274  @ gUnknown_08590F8C
	bl RegisterObjectAttributes
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _0809D24E
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809D270: .4byte 0x0000DFC0
_0809D274: .4byte gUnknown_08590F8C

	THUMB_FUNC_START sub_809D278
sub_809D278: @ 0x0809D278
	push {r4, r5, lr}
	sub sp, #0xc
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _0809D2B8  @ sub_809D244
	bl Get6CDifferedLoop6C
	ldr r0, _0809D2BC  @ gUnknown_08A191F4
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r0, [r4]
	ldr r1, _0809D2C0  @ gUnknown_08A19200
	ldr r1, [r1]
	bl GetStringFromIndexInBuffer
	adds r2, r0, #0
	movs r0, #0xf0
	lsls r0, r0, #7
	movs r1, #2
	str r1, [sp]
	movs r1, #3
	str r1, [sp, #4]
	str r5, [sp, #8]
	movs r1, #0xd
	movs r3, #1
	bl sub_80ADD24
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809D2B8: .4byte sub_809D244
_0809D2BC: .4byte gUnknown_08A191F4
_0809D2C0: .4byte gUnknown_08A19200

	THUMB_FUNC_START StoreConvoyWeaponIconGraphics
StoreConvoyWeaponIconGraphics: @ 0x0809D2C4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809D2F0  @ gUnknown_08A1A3FC
	lsls r1, r1, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _0809D2F4  @ gUnknown_08A1A0A4
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r4, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _0809D2F8  @ gUnknown_08A1A23C
	ldr r1, _0809D2FC  @ 0x06000200
	adds r4, r4, r1
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809D2F0: .4byte gUnknown_08A1A3FC
_0809D2F4: .4byte gUnknown_08A1A0A4
_0809D2F8: .4byte gUnknown_08A1A23C
_0809D2FC: .4byte 0x06000200

	THUMB_FUNC_START sub_809D300
sub_809D300: @ 0x0809D300
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r0, [sp]
	mov sl, r1
	str r2, [sp, #4]
	str r3, [sp, #8]
	mov r0, sl
	movs r1, #0xc
	movs r2, #0x1f
	movs r3, #0
	bl TileMap_FillRect
	ldr r1, _0809D350  @ gUnknown_02012F56
	ldrh r0, [r1]
	cmp r0, #0
	bne _0809D354
	ldr r0, [sp]
	bl Text_Clear
	movs r0, #0xb5
	lsls r0, r0, #3
	bl GetStringFromIndex
	adds r3, r0, #0
	ldr r0, [sp]
	movs r1, #0
	movs r2, #1
	bl Text_InsertString
	mov r1, sl
	adds r1, #6
	ldr r0, [sp]
	bl Text_Draw
	b _0809D3FE
	.align 2, 0
_0809D350: .4byte gUnknown_02012F56
_0809D354:
	ldr r6, [sp, #4]
	adds r0, r6, #7
	cmp r6, r0
	bge _0809D3FE
	ldrh r1, [r1]
	cmp r6, r1
	bge _0809D3FE
_0809D362:
	movs r0, #7
	ands r0, r6
	lsls r0, r0, #3
	ldr r1, [sp]
	adds r1, r1, r0
	mov r8, r1
	ldr r1, _0809D410  @ gUnknown_020122D4
	lsls r0, r6, #2
	adds r0, r0, r1
	ldrh r7, [r0, #2]
	ldr r0, [sp, #8]
	adds r1, r7, #0
	bl IsItemDisplayUsable
	movs r1, #0
	mov r9, r1
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809D38C
	movs r0, #1
	mov r9, r0
_0809D38C:
	mov r0, r8
	bl Text_Clear
	adds r0, r7, #0
	bl GetItemName
	adds r3, r0, #0
	mov r0, r8
	movs r1, #0
	mov r2, r9
	bl Text_InsertString
	lsls r5, r6, #1
	movs r0, #0x1f
	ands r5, r0
	lsls r5, r5, #6
	adds r4, r5, #2
	add r4, sl
	adds r0, r7, #0
	bl GetItemIconId
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0x80
	lsls r2, r2, #7
	bl DrawIcon
	adds r1, r5, #6
	add r1, sl
	mov r0, r8
	bl Text_Draw
	adds r5, #0x18
	mov r1, sl
	adds r4, r1, r5
	movs r5, #1
	mov r0, r9
	cmp r0, #0
	bne _0809D3DC
	movs r5, #2
_0809D3DC:
	adds r0, r7, #0
	bl GetItemUses
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl DrawDecNumber
	adds r6, #1
	ldr r0, [sp, #4]
	adds r0, #7
	cmp r6, r0
	bge _0809D3FE
	ldr r0, _0809D414  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r6, r0
	blt _0809D362
_0809D3FE:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D410: .4byte gUnknown_020122D4
_0809D414: .4byte gUnknown_02012F56

	THUMB_FUNC_START sub_809D418
sub_809D418: @ 0x0809D418
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r5, r1, #0
	adds r7, r5, #0
	adds r0, r5, #7
	cmp r5, r0
	bge _0809D468
	ldr r0, _0809D474  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r5, r0
	bge _0809D468
	ldr r1, _0809D478  @ gUnknown_020122D4
	lsls r0, r5, #2
	adds r6, r0, r1
_0809D438:
	ldrh r0, [r6, #2]
	lsls r4, r5, #1
	movs r1, #0x1f
	ands r4, r1
	lsls r4, r4, #6
	adds r4, #2
	add r4, r8
	bl GetItemIconId
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0x80
	lsls r2, r2, #7
	bl DrawIcon
	adds r6, #4
	adds r5, #1
	adds r0, r7, #7
	cmp r5, r0
	bge _0809D468
	ldr r0, _0809D474  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r5, r0
	blt _0809D438
_0809D468:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D474: .4byte gUnknown_02012F56
_0809D478: .4byte gUnknown_020122D4

	THUMB_FUNC_START sub_809D47C
sub_809D47C: @ 0x0809D47C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	mov r9, r1
	ldr r0, _0809D528  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, r2
	ble _0809D51C
	lsls r4, r2, #1
	movs r0, #0x1f
	ands r4, r0
	movs r0, #7
	ands r0, r2
	lsls r0, r0, #3
	adds r7, r5, r0
	ldr r1, _0809D52C  @ gUnknown_020122D4
	lsls r0, r2, #2
	adds r0, r0, r1
	ldrh r6, [r0, #2]
	adds r0, r3, #0
	adds r1, r6, #0
	bl IsItemDisplayUsable
	movs r1, #0
	mov r8, r1
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809D4BC
	movs r0, #1
	mov r8, r0
_0809D4BC:
	lsls r4, r4, #6
	add r4, r9
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	adds r0, r7, #0
	bl Text_Clear
	adds r0, r6, #0
	bl GetItemName
	adds r3, r0, #0
	adds r0, r7, #0
	movs r1, #0
	mov r2, r8
	bl Text_InsertString
	adds r5, r4, #2
	adds r0, r6, #0
	bl GetItemIconId
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r5, #0
	bl DrawIcon
	adds r1, r4, #6
	adds r0, r7, #0
	bl Text_Draw
	adds r4, #0x18
	movs r5, #1
	mov r1, r8
	cmp r1, #0
	bne _0809D50C
	movs r5, #2
_0809D50C:
	adds r0, r6, #0
	bl GetItemUses
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl DrawDecNumber
_0809D51C:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D528: .4byte gUnknown_02012F56
_0809D52C: .4byte gUnknown_020122D4

	THUMB_FUNC_START sub_809D530
sub_809D530: @ 0x0809D530
	push {lr}
	ldr r0, _0809D568  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls _0809D542
	movs r2, #0
_0809D542:
	cmp r2, #0xc
	bne _0809D552
	ldr r1, _0809D56C  @ 0x04000050
	movs r0, #0xc8
	strh r0, [r1]
	adds r1, #4
	movs r0, #8
	strh r0, [r1]
_0809D552:
	cmp r2, #0x34
	beq _0809D55A
	cmp r2, #0
	bne _0809D564
_0809D55A:
	ldr r0, _0809D56C  @ 0x04000050
	movs r1, #0
	strh r1, [r0]
	adds r0, #4
	strh r1, [r0]
_0809D564:
	pop {r0}
	bx r0
	.align 2, 0
_0809D568: .4byte 0x04000006
_0809D56C: .4byte 0x04000050

	THUMB_FUNC_START sub_809D570
sub_809D570: @ 0x0809D570
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	strh r0, [r4, #0x38]
	movs r0, #0xff
	strh r0, [r4, #0x36]
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	bne _0809D58E
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #1
	b _0809D594
_0809D58E:
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #0
_0809D594:
	strb r0, [r1]
	ldr r0, _0809D5B0  @ gUnknown_03005280
	ldrb r0, [r0]
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0809D5B4
	bl sub_80C4048
	cmp r0, #0
	beq _0809D5C8
	adds r0, #0x2b
	b _0809D5C6
	.align 2, 0
_0809D5B0: .4byte gUnknown_03005280
_0809D5B4:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _0809D5D4
	ldr r0, _0809D5D0  @ gUnknown_08A1829C
	bl Proc_Find
	adds r0, #0x32
_0809D5C6:
	ldrb r0, [r0]
_0809D5C8:
	adds r1, r4, #0
	adds r1, #0x35
	strb r0, [r1]
	b _0809D5DA
	.align 2, 0
_0809D5D0: .4byte gUnknown_08A1829C
_0809D5D4:
	adds r0, r4, #0
	adds r0, #0x35
	strb r1, [r0]
_0809D5DA:
	adds r2, r4, #0
	adds r2, #0x32
	movs r1, #0
	movs r0, #4
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x31
	strb r1, [r0]
	movs r3, #0
	adds r1, r4, #0
	adds r1, #0x4c
	adds r0, #9
	movs r2, #8
_0809D5F4:
	strh r3, [r0]
	strh r3, [r1]
	adds r1, #2
	adds r0, #2
	subs r2, #1
	cmp r2, #0
	bge _0809D5F4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809D608
sub_809D608: @ 0x0809D608
	push {r4, lr}
	ldr r4, _0809D638  @ gUnknown_02013648
	ldr r1, _0809D63C  @ 0x06011000
	adds r0, r4, #0
	movs r2, #0xb
	bl InitSomeOtherGraphicsRelatedStruct
	ldr r0, _0809D640  @ gUnknown_0859EF00
	movs r1, #0xd8
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	adds r4, #0x90
	adds r0, r4, #0
	bl Text_Init3
	movs r0, #0
	bl SetFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809D638: .4byte gUnknown_02013648
_0809D63C: .4byte 0x06011000
_0809D640: .4byte gUnknown_0859EF00

	THUMB_FUNC_START sub_809D644
sub_809D644: @ 0x0809D644
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	bl sub_8097CC8
	adds r5, r0, #0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r6, r0, #0
	ldr r4, _0809D6BC  @ gUnknown_02013648
	adds r0, r4, #0
	bl SetFont
	movs r0, #0
	bl SetFontGlyphSet
	adds r4, #0x90
	adds r0, r4, #0
	movs r1, #0
	bl Text_80046B4
	adds r7, r4, #0
	movs r4, #0
	cmp r5, #0x64
	beq _0809D67E
	cmp r6, #0
	bne _0809D680
_0809D67E:
	movs r4, #1
_0809D680:
	ldr r0, _0809D6C0  @ 0x0000059E
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r7, #0
	movs r1, #0
	adds r2, r4, #0
	bl Text_InsertString
	ldr r5, _0809D6C4  @ gUnknown_020136D8
	movs r4, #0
	cmp r6, #5
	bne _0809D69C
	movs r4, #1
_0809D69C:
	ldr r0, _0809D6C8  @ 0x0000059F
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x40
	adds r2, r4, #0
	bl Text_InsertString
	movs r0, #0
	bl SetFont
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D6BC: .4byte gUnknown_02013648
_0809D6C0: .4byte 0x0000059E
_0809D6C4: .4byte gUnknown_020136D8
_0809D6C8: .4byte 0x0000059F

	THUMB_FUNC_START sub_809D6CC
sub_809D6CC: @ 0x0809D6CC
	push {r4, r5, r6, lr}
	sub sp, #8
	movs r0, #0
	bl SetFont
	ldr r6, _0809D77C  @ gUnknown_02022D10
	adds r0, r6, #0
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #0xb3
	lsls r0, r0, #3
	bl GetStringFromIndex
	ldr r4, _0809D780  @ gUnknown_02013660
	adds r1, r6, #0
	adds r1, #0xda
	movs r5, #0
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #2
	bl DrawTextInline
	adds r1, r6, #0
	subs r1, #0x26
	movs r2, #0x9c
	lsls r2, r2, #2
	movs r0, #1
	str r0, [sp]
	movs r0, #0xab
	movs r3, #2
	bl sub_8005988
	movs r0, #0xb4
	lsls r0, r0, #3
	bl GetStringFromIndex
	adds r4, #8
	subs r1, r6, #2
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #4
	bl DrawTextInline
	adds r5, r6, #0
	adds r5, #0xa
	bl sub_8097CC8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r4, #2
	cmp r0, #0x64
	bne _0809D744
	movs r4, #4
_0809D744:
	bl sub_8097CC8
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_8004B88
	adds r0, r6, #0
	adds r0, #0xc
	movs r1, #0
	movs r2, #0x16
	bl sub_8004B0C
	adds r0, r6, #0
	adds r0, #0x12
	movs r1, #2
	movs r2, #0x64
	bl sub_8004B88
	movs r0, #1
	bl BG_EnableSyncByMask
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809D77C: .4byte gUnknown_02022D10
_0809D780: .4byte gUnknown_02013660

	THUMB_FUNC_START sub_809D784
sub_809D784: @ 0x0809D784
	push {r4, lr}
	sub sp, #4
	ldr r0, _0809D7C4  @ 0x0000A840
	str r0, [sp]
	movs r0, #0x40
	movs r1, #0x21
	movs r2, #5
	movs r3, #4
	bl sub_809A31C
	ldr r4, _0809D7C8  @ gUnknown_08590F8C
	ldr r0, _0809D7CC  @ 0x0000B080
	str r0, [sp]
	movs r0, #4
	movs r1, #0x48
	movs r2, #0x25
	adds r3, r4, #0
	bl RegisterObjectAttributes
	ldr r0, _0809D7D0  @ 0x0000B088
	str r0, [sp]
	movs r0, #4
	movs r1, #0x48
	movs r2, #0x35
	adds r3, r4, #0
	bl RegisterObjectAttributes
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809D7C4: .4byte 0x0000A840
_0809D7C8: .4byte gUnknown_08590F8C
_0809D7CC: .4byte 0x0000B080
_0809D7D0: .4byte 0x0000B088

	THUMB_FUNC_START sub_809D7D4
sub_809D7D4: @ 0x0809D7D4
	push {lr}
	sub sp, #4
	ldr r0, _0809D800  @ 0x0000A840
	str r0, [sp]
	movs r0, #0x40
	movs r1, #0x21
	movs r2, #5
	movs r3, #2
	bl sub_809A31C
	ldr r3, _0809D804  @ gUnknown_08590F8C
	ldr r0, _0809D808  @ 0x0000B080
	str r0, [sp]
	movs r0, #4
	movs r1, #0x48
	movs r2, #0x25
	bl RegisterObjectAttributes
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0809D800: .4byte 0x0000A840
_0809D804: .4byte gUnknown_08590F8C
_0809D808: .4byte 0x0000B080

	THUMB_FUNC_START sub_809D80C
sub_809D80C: @ 0x0809D80C
	push {lr}
	sub sp, #4
	ldr r0, _0809D838  @ 0x0000A840
	str r0, [sp]
	movs r0, #0x40
	movs r1, #0x31
	movs r2, #5
	movs r3, #2
	bl sub_809A31C
	ldr r3, _0809D83C  @ gUnknown_08590F8C
	ldr r0, _0809D840  @ 0x0000B088
	str r0, [sp]
	movs r0, #4
	movs r1, #0x48
	movs r2, #0x35
	bl RegisterObjectAttributes
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0809D838: .4byte 0x0000A840
_0809D83C: .4byte gUnknown_08590F8C
_0809D840: .4byte 0x0000B088

	THUMB_FUNC_START sub_809D844
sub_809D844: @ 0x0809D844
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r6, #0
	adds r7, #0x35
	ldrb r0, [r7]
	lsls r4, r0, #1
	adds r4, r4, r0
	lsls r4, r4, #2
	adds r4, #0x7c
	bl GetGameClock
	ldr r2, _0809D8BC  @ gPaletteBuffer
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	ldr r1, _0809D8C0  @ gUnknown_08A1BD60
	adds r0, r0, r1
	ldrh r0, [r0]
	ldr r1, _0809D8C4  @ 0x0000029A
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePaletteSync
	ldr r1, _0809D8C8  @ gUnknown_08A19608
	ldrb r0, [r7]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r5, #0x85
	lsls r5, r5, #7
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x18
	bl RegisterObjectAttributes_SafeMaybe
	ldr r3, _0809D8CC  @ gUnknown_08A195F8
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x18
	bl RegisterObjectAttributes_SafeMaybe
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r6, #0x4c
	adds r6, r6, r0
	ldrh r1, [r6]
	ldr r0, _0809D8D0  @ gUnknown_02012F56
	ldrh r2, [r0]
	movs r0, #0xc
	movs r3, #7
	bl sub_80976CC
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809D8BC: .4byte gPaletteBuffer
_0809D8C0: .4byte gUnknown_08A1BD60
_0809D8C4: .4byte 0x0000029A
_0809D8C8: .4byte gUnknown_08A19608
_0809D8CC: .4byte gUnknown_08A195F8
_0809D8D0: .4byte gUnknown_02012F56

	THUMB_FUNC_START sub_809D8D4
sub_809D8D4: @ 0x0809D8D4
	push {r4, r5, r6, lr}
	movs r5, #0
	lsls r2, r2, #0xc
	ldr r4, _0809D910  @ 0x0001FFFF
	adds r3, r1, #0
	ands r3, r4
	lsrs r3, r3, #5
	adds r6, r2, r3
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r1, r3
	ands r1, r4
	lsrs r1, r1, #5
	adds r2, r2, r1
	adds r3, r0, #0
	adds r3, #0x40
	adds r1, r0, #0
_0809D8F6:
	adds r0, r6, r5
	strh r0, [r1]
	adds r0, r2, r5
	strh r0, [r3]
	adds r3, #2
	adds r1, #2
	adds r5, #1
	cmp r5, #0xe
	ble _0809D8F6
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809D910: .4byte 0x0001FFFF

	THUMB_FUNC_START sub_809D914
sub_809D914: @ 0x0809D914
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _0809D9F8  @ gLCDControlBuffer
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #1
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #2
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	ldrb r1, [r4, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r4, #0xc]
	ldrb r1, [r4, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r2, r0
	strb r2, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	bl ResetFaces
	bl Font_InitForUIDefault
	bl ResetIconGraphics_
	bl LoadUiFrameGraphics
	bl LoadObjUIGfx
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	adds r0, r5, #0
	adds r0, #0x35
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r5, #0x4c
	adds r5, r5, r0
	ldrh r2, [r5]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	ldr r0, _0809D9FC  @ 0x06013000
	movs r1, #1
	negs r1, r1
	bl LoadDialogueBoxGfx
	movs r0, #4
	bl LoadIconPalettes
	bl sub_8095A1C
	movs r0, #8
	bl BG_EnableSyncByMask
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809D9F8: .4byte gLCDControlBuffer
_0809D9FC: .4byte 0x06013000

	THUMB_FUNC_START sub_809DA00
sub_809DA00: @ 0x0809DA00
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r7, r0, #0
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_8098C3C
	movs r0, #0x80
	lsls r0, r0, #4
	movs r1, #0xa
	bl sub_8098C8C
	ldr r0, _0809DC38  @ gUnknown_08A1B9EC
	ldr r4, _0809DC3C  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r5, _0809DC40  @ gBG1TilemapBuffer
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r5, #0
	adds r1, r4, #0
	adds r2, r6, #0
	bl CallARM_FillTileRect
	ldr r0, _0809DC44  @ gUnknown_08A1BCC0
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	adds r0, r5, #0
	adds r1, r4, #0
	adds r2, r6, #0
	bl CallARM_FillTileRect
	movs r0, #7
	bl BG_EnableSyncByMask
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r0, #0
	str r0, [sp]
	str r7, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl sub_80ADB7C
	movs r0, #0
	movs r1, #0x90
	movs r2, #6
	movs r3, #2
	bl sub_80ADBFC
	ldr r0, [r7, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r0, r7, #0
	bl sub_80AC9C0
	adds r0, r7, #0
	bl sub_80AD47C
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_80AD4A0
	ldr r5, _0809DC48  @ gLCDControlBuffer
	ldrb r0, [r5, #1]
	movs r1, #0x20
	mov r8, r1
	mov r2, r8
	orrs r0, r2
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	adds r1, r5, #0
	adds r1, #0x2d
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	movs r0, #0x34
	adds r0, r0, r5
	mov r9, r0
	ldrb r1, [r0]
	movs r6, #1
	orrs r1, r6
	movs r2, #2
	orrs r1, r2
	movs r0, #4
	orrs r1, r0
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	adds r5, #0x36
	ldrb r0, [r5]
	orrs r0, r6
	orrs r0, r2
	movs r2, #5
	negs r2, r2
	ands r0, r2
	orrs r0, r4
	orrs r0, r3
	mov r2, r8
	orrs r1, r2
	mov r2, r9
	strb r1, [r2]
	mov r1, r8
	orrs r0, r1
	strb r0, [r5]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	adds r0, r7, #0
	bl NewGreenTextColorManager
	movs r0, #0xc3
	movs r1, #0x93
	movs r2, #9
	adds r3, r7, #0
	bl StartHelpPromptSprite
	ldr r4, _0809DC4C  @ gUnknown_02013660
	adds r0, r4, #0
	movs r1, #4
	bl Text_Init
	adds r0, r4, #0
	adds r0, #8
	movs r1, #4
	bl Text_Init
	bl sub_809D608
	adds r4, #0x10
	movs r5, #4
_0809DB3C:
	adds r0, r4, #0
	movs r1, #7
	bl Text_Init
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _0809DB3C
	movs r2, #0x35
	adds r2, r2, r7
	mov r8, r2
	movs r0, #0x4c
	adds r0, r0, r7
	mov r9, r0
	ldr r4, _0809DC50  @ gUnknown_02013698
	movs r5, #7
_0809DB5C:
	adds r0, r4, #0
	movs r1, #7
	bl Text_Allocate
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _0809DB5C
	movs r0, #0
	bl SetPrimaryHBlankHandler
	ldr r0, _0809DC54  @ sub_809D530
	bl SetPrimaryHBlankHandler
	movs r4, #0x80
	lsls r4, r4, #7
	adds r0, r4, #0
	movs r1, #6
	bl StoreConvoyWeaponIconGraphics
	ldr r5, _0809DC58  @ gUnknown_02022D86
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #6
	bl sub_809D8D4
	ldr r0, _0809DC5C  @ gUnknown_08A19CCC
	ldr r1, _0809DC60  @ 0x06015000
	bl CopyDataWithPossibleUncomp
	ldr r0, _0809DC64  @ gUnknown_08A1A084
	movs r6, #0xa0
	lsls r6, r6, #2
	adds r1, r6, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r3, #0xb0
	lsls r3, r3, #7
	movs r0, #9
	str r0, [sp]
	adds r0, r7, #0
	movs r1, #0xe1
	movs r2, #0x2f
	bl sub_8097748
	bl sub_8097668
	ldr r0, [r7, #0x2c]
	mov r2, r8
	ldrb r1, [r2]
	movs r2, #1
	bl SomethingPrepListRelated
	ldr r4, _0809DC50  @ gUnknown_02013698
	ldr r1, _0809DC68  @ gUnknown_02023CC6
	mov r2, r8
	ldrb r0, [r2]
	lsls r0, r0, #1
	add r0, r9
	ldrh r2, [r0]
	lsrs r2, r2, #4
	ldr r3, [r7, #0x2c]
	adds r0, r4, #0
	bl sub_809D300
	movs r0, #4
	bl BG_EnableSyncByMask
	movs r0, #0xb3
	lsls r0, r0, #1
	adds r5, r5, r0
	subs r4, #0x28
	ldr r2, [r7, #0x2c]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r3, #0
	bl sub_809B74C
	bl sub_809D6CC
	adds r0, r7, #0
	bl sub_80ACCE0
	movs r0, #0
	adds r1, r6, #0
	movs r2, #2
	bl sub_80ACCF4
	movs r0, #0x78
	movs r1, #0x18
	movs r2, #0xe9
	movs r3, #0x18
	bl sub_80ACD7C
	movs r0, #3
	bl sub_80ACD60
	ldr r0, _0809DC6C  @ sub_809D844
	adds r1, r7, #0
	bl Get6CDifferedLoop6C
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809DC38: .4byte gUnknown_08A1B9EC
_0809DC3C: .4byte gUnknown_02020188
_0809DC40: .4byte gBG1TilemapBuffer
_0809DC44: .4byte gUnknown_08A1BCC0
_0809DC48: .4byte gLCDControlBuffer
_0809DC4C: .4byte gUnknown_02013660
_0809DC50: .4byte gUnknown_02013698
_0809DC54: .4byte sub_809D530
_0809DC58: .4byte gUnknown_02022D86
_0809DC5C: .4byte gUnknown_08A19CCC
_0809DC60: .4byte 0x06015000
_0809DC64: .4byte gUnknown_08A1A084
_0809DC68: .4byte gUnknown_02023CC6
_0809DC6C: .4byte sub_809D844

	THUMB_FUNC_START sub_809DC70
sub_809DC70: @ 0x0809DC70
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	adds r1, r4, #0
	bl sub_809D278
	movs r0, #0
	bl sub_80ACA84
	adds r0, r4, #0
	bl sub_809D644
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x24
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x44
	movs r2, #4
	bl sub_80AD51C
	ldr r0, _0809DCC8  @ sub_809D7D4
	bl Find6CDifferedLoop
	bl Proc_Delete
	ldr r0, _0809DCCC  @ sub_809D80C
	bl Find6CDifferedLoop
	bl Proc_Delete
	ldr r0, _0809DCD0  @ sub_809D784
	adds r1, r4, #0
	bl Get6CDifferedLoop6C
	movs r0, #7
	bl BG_EnableSyncByMask
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809DCC8: .4byte sub_809D7D4
_0809DCCC: .4byte sub_809D80C
_0809DCD0: .4byte sub_809D784

	THUMB_FUNC_START sub_809DCD4
sub_809DCD4: @ 0x0809DCD4
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x33
	ldrb r6, [r4]
	ldrh r0, [r5, #0x38]
	cmp r0, #0
	beq _0809DCE6
	b _0809DE34
_0809DCE6:
	ldr r1, _0809DD04  @ gKeyStatusPtr
	ldr r0, [r1]
	ldrh r3, [r0, #8]
	movs r7, #1
	adds r0, r7, #0
	ands r0, r3
	mov ip, r1
	cmp r0, #0
	beq _0809DDE8
	cmp r6, #0
	beq _0809DD08
	cmp r6, #1
	beq _0809DD70
	b _0809DEEC
	.align 2, 0
_0809DD04: .4byte gKeyStatusPtr
_0809DD08:
	bl sub_8097CC8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x63
	bhi _0809DDCC
	ldr r0, [r5, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	ble _0809DDCC
	ldrb r2, [r4]
	lsls r2, r2, #4
	adds r2, #0x24
	movs r0, #0
	movs r1, #0x44
	movs r3, #2
	bl sub_80AC9D4
	ldr r0, _0809DD64  @ sub_809D784
	bl Find6CDifferedLoop
	bl Proc_Delete
	ldr r0, _0809DD68  @ sub_809D7D4
	adds r1, r5, #0
	bl Get6CDifferedLoop6C
	movs r0, #1
	adds r1, r5, #0
	bl sub_809D278
	ldr r0, _0809DD6C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809DD5A
	movs r0, #0x6a
	bl m4aSongNumStart
_0809DD5A:
	adds r0, r5, #0
	movs r1, #3
	bl Proc_GotoLabel
	b _0809DEEC
	.align 2, 0
_0809DD64: .4byte sub_809D784
_0809DD68: .4byte sub_809D7D4
_0809DD6C: .4byte gUnknown_0202BCF0
_0809DD70:
	ldr r0, [r5, #0x2c]
	bl GetUnitItemCount
	cmp r0, #4
	bgt _0809DDCC
	ldrb r2, [r4]
	lsls r2, r2, #4
	adds r2, #0x24
	movs r0, #0
	movs r1, #0x44
	movs r3, #2
	bl sub_80AC9D4
	ldr r0, _0809DDC0  @ sub_809D784
	bl Find6CDifferedLoop
	bl Proc_Delete
	ldr r0, _0809DDC4  @ sub_809D80C
	adds r1, r5, #0
	bl Get6CDifferedLoop6C
	movs r0, #2
	adds r1, r5, #0
	bl sub_809D278
	ldr r0, _0809DDC8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809DDB6
	movs r0, #0x6a
	bl m4aSongNumStart
_0809DDB6:
	adds r0, r5, #0
	movs r1, #4
	bl Proc_GotoLabel
	b _0809DEEC
	.align 2, 0
_0809DDC0: .4byte sub_809D784
_0809DDC4: .4byte sub_809D80C
_0809DDC8: .4byte gUnknown_0202BCF0
_0809DDCC:
	ldr r0, _0809DDE4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0809DDDA
	b _0809DEEC
_0809DDDA:
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0809DEEC
	.align 2, 0
_0809DDE4: .4byte gUnknown_0202BCF0
_0809DDE8:
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _0809DE10
	adds r0, r5, #0
	movs r1, #8
	bl Proc_GotoLabel
	ldr r0, _0809DE0C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809DEEC
	movs r0, #0x6b
	bl m4aSongNumStart
	b _0809DEEC
	.align 2, 0
_0809DE0C: .4byte gUnknown_0202BCF0
_0809DE10:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	cmp r0, #0
	beq _0809DE54
	lsls r1, r6, #4
	adds r1, #0x24
	ldr r2, _0809DE30  @ gUnknown_08A19204
	lsls r0, r6, #2
	adds r0, r0, r2
	ldr r2, [r0]
	movs r0, #0x44
	bl StartHelpBox
	strh r7, [r5, #0x38]
	b _0809DEEC
	.align 2, 0
_0809DE30: .4byte gUnknown_08A19204
_0809DE34:
	ldr r2, _0809DE50  @ gKeyStatusPtr
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	mov ip, r2
	cmp r0, #0
	beq _0809DE54
	bl CloseHelpBox
	movs r0, #0
	strh r0, [r5, #0x38]
	b _0809DEEC
	.align 2, 0
_0809DE50: .4byte gKeyStatusPtr
_0809DE54:
	mov r0, ip
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r2, #0x40
	adds r0, r2, #0
	ands r0, r1
	adds r4, r5, #0
	adds r4, #0x33
	cmp r0, #0
	beq _0809DE80
	ldrb r0, [r4]
	cmp r0, #0
	beq _0809DE72
	subs r0, #1
	b _0809DE7E
_0809DE72:
	ldrh r1, [r3, #8]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0809DE80
	movs r0, #1
_0809DE7E:
	strb r0, [r4]
_0809DE80:
	mov r0, ip
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r3, #0x80
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _0809DEA8
	ldrb r0, [r4]
	cmp r0, #0
	bne _0809DE9A
	adds r0, #1
	b _0809DEA6
_0809DE9A:
	ldrh r1, [r2, #8]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _0809DEA8
	movs r0, #0
_0809DEA6:
	strb r0, [r4]
_0809DEA8:
	ldrb r0, [r4]
	cmp r6, r0
	beq _0809DEEC
	ldr r0, _0809DEF4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809DEC0
	movs r0, #0x66
	bl m4aSongNumStart
_0809DEC0:
	ldrb r1, [r4]
	lsls r1, r1, #4
	adds r1, #0x24
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x44
	movs r2, #4
	bl sub_80AD51C
	ldrh r0, [r5, #0x38]
	cmp r0, #0
	beq _0809DEEC
	ldrb r0, [r4]
	lsls r1, r0, #4
	adds r1, #0x24
	ldr r2, _0809DEF8  @ gUnknown_08A19204
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r2, [r0]
	movs r0, #0x44
	bl StartHelpBox
_0809DEEC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809DEF4: .4byte gUnknown_0202BCF0
_0809DEF8: .4byte gUnknown_08A19204

	THUMB_FUNC_START sub_809DEFC
sub_809DEFC: @ 0x0809DEFC
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	bl ResetIconGraphics_
	ldr r0, [r4, #0x2c]
	adds r5, r4, #0
	adds r5, #0x35
	ldrb r1, [r5]
	movs r2, #1
	bl SomethingPrepListRelated
	ldr r0, _0809DF8C  @ gUnknown_02013698
	ldr r1, _0809DF90  @ gUnknown_02023CC6
	ldrb r2, [r5]
	lsls r2, r2, #1
	adds r6, r4, #0
	adds r6, #0x4c
	adds r2, r6, r2
	ldrh r2, [r2]
	lsrs r2, r2, #4
	ldr r3, [r4, #0x2c]
	bl sub_809D300
	ldr r0, _0809DF94  @ gUnknown_02022EEC
	ldr r1, [r4, #0x2c]
	bl sub_809B830
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r7, r4, #0
	adds r7, #0x3a
	adds r1, r7, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r6, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_80AD51C
	movs r0, #5
	bl BG_EnableSyncByMask
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq _0809DFA8
	ldr r0, _0809DF98  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	beq _0809DFA0
	ldr r2, _0809DF9C  @ gUnknown_020122D4
	ldrb r3, [r5]
	lsls r3, r3, #1
	adds r0, r7, r3
	ldrh r1, [r0]
	lsls r0, r1, #2
	adds r0, r0, r2
	ldrh r2, [r0, #2]
	lsls r1, r1, #4
	adds r3, r6, r3
	ldrh r0, [r3]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	bl StartItemHelpBox
	movs r0, #1
	b _0809DFA6
	.align 2, 0
_0809DF8C: .4byte gUnknown_02013698
_0809DF90: .4byte gUnknown_02023CC6
_0809DF94: .4byte gUnknown_02022EEC
_0809DF98: .4byte gUnknown_02012F56
_0809DF9C: .4byte gUnknown_020122D4
_0809DFA0:
	bl CloseHelpBox
	movs r0, #0xff
_0809DFA6:
	strh r0, [r4, #0x38]
_0809DFA8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809DFB0
sub_809DFB0: @ 0x0809DFB0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r3, #0
	movs r7, #4
	adds r1, r6, #0
	adds r1, #0x34
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r4, [r1]
	cmp r4, #4
	bge _0809DFDE
	subs r1, r7, r4
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	movs r1, #0x10
	bl __divsi3
	adds r3, r0, #0
	subs r3, #0x60
_0809DFDE:
	adds r5, r6, #0
	adds r5, #0x35
	cmp r4, #4
	bne _0809DFFE
	ldrb r0, [r5]
	cmp r0, #0
	bne _0809DFF0
	movs r0, #8
	b _0809DFF2
_0809DFF0:
	subs r0, #1
_0809DFF2:
	strb r0, [r5]
	adds r0, r6, #0
	str r3, [sp]
	bl sub_809DEFC
	ldr r3, [sp]
_0809DFFE:
	adds r4, r6, #0
	adds r4, #0x34
	ldrb r1, [r4]
	cmp r1, r7
	blt _0809E01E
	subs r1, r1, r7
	subs r1, r7, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	adds r1, r7, #0
	muls r1, r7, r1
	bl __divsi3
	adds r3, r0, #0
_0809E01E:
	movs r0, #0xff
	ands r3, r0
	ldrb r1, [r5]
	lsls r1, r1, #1
	adds r0, r6, #0
	adds r0, #0x4c
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r3, #0
	bl BG_SetPosition
	ldrb r1, [r4]
	lsls r0, r7, #1
	cmp r1, r0
	bne _0809E04C
	adds r0, r6, #0
	movs r1, #4
	bl Proc_GotoLabel
_0809E04C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809E054
sub_809E054: @ 0x0809E054
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #4
	mov r8, r0
	adds r1, r7, #0
	adds r1, #0x34
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r4, [r1]
	cmp r4, #4
	bge _0809E086
	mov r2, r8
	subs r1, r2, r4
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	movs r1, #0x10
	bl __divsi3
	movs r1, #0x60
	subs r6, r1, r0
_0809E086:
	adds r5, r7, #0
	adds r5, #0x35
	cmp r4, #4
	bne _0809E0A2
	ldrb r0, [r5]
	cmp r0, #8
	bne _0809E098
	movs r0, #0
	b _0809E09A
_0809E098:
	adds r0, #1
_0809E09A:
	strb r0, [r5]
	adds r0, r7, #0
	bl sub_809DEFC
_0809E0A2:
	adds r4, r7, #0
	adds r4, #0x34
	ldrb r1, [r4]
	cmp r1, r8
	blt _0809E0C6
	mov r0, r8
	subs r1, r1, r0
	subs r1, r0, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	mov r2, r8
	mov r1, r8
	muls r1, r2, r1
	bl __divsi3
	negs r6, r0
_0809E0C6:
	movs r0, #0xff
	ands r6, r0
	ldrb r1, [r5]
	lsls r1, r1, #1
	adds r0, r7, #0
	adds r0, #0x4c
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r6, #0
	bl BG_SetPosition
	ldrb r1, [r4]
	mov r2, r8
	lsls r0, r2, #1
	cmp r1, r0
	bne _0809E0F6
	adds r0, r7, #0
	movs r1, #4
	bl Proc_GotoLabel
_0809E0F6:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809E100
sub_809E100: @ 0x0809E100
	push {r4, r5, lr}
	mov ip, r0
	ldr r0, _0809E128  @ gUnknown_02012F56
	ldrh r4, [r0]
	adds r5, r0, #0
	cmp r4, #0
	bne _0809E12C
	mov r3, ip
	adds r3, #0x35
	ldrb r0, [r3]
	lsls r0, r0, #1
	mov r1, ip
	adds r1, #0x3a
	adds r1, r1, r0
	mov r2, ip
	adds r2, #0x4c
	adds r0, r2, r0
	strh r4, [r0]
	strh r4, [r1]
	b _0809E14A
	.align 2, 0
_0809E128: .4byte gUnknown_02012F56
_0809E12C:
	mov r2, ip
	adds r2, #0x35
	ldrb r0, [r2]
	lsls r0, r0, #1
	mov r1, ip
	adds r1, #0x3a
	adds r4, r1, r0
	ldrh r1, [r4]
	ldrh r0, [r5]
	subs r0, #1
	adds r3, r2, #0
	adds r2, #0x17
	cmp r1, r0
	ble _0809E14A
	strh r0, [r4]
_0809E14A:
	ldrh r0, [r5]
	cmp r0, #6
	bls _0809E168
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r4, r2, r0
	ldrh r0, [r4]
	lsrs r0, r0, #4
	adds r0, #7
	ldrh r1, [r5]
	cmp r0, r1
	ble _0809E168
	subs r0, r1, #7
	lsls r0, r0, #4
	strh r0, [r4]
_0809E168:
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r0, r2, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809E184
sub_809E184: @ 0x0809E184
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov ip, r0
	adds r0, #0x35
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r0, #5
	adds r4, r0, r1
	ldrh r3, [r4]
	lsls r2, r3, #4
	adds r0, #0x12
	adds r0, r0, r1
	ldrh r0, [r0]
	subs r0, #0x28
	subs r2, r2, r0
	cmp r2, #0x37
	bgt _0809E1B0
	cmp r3, #0
	beq _0809E1B0
	adds r0, r3, #1
	strh r0, [r4]
_0809E1B0:
	mov r4, ip
	adds r4, #0x35
	ldrb r0, [r4]
	lsls r0, r0, #1
	mov r3, ip
	adds r3, #0x3a
	adds r6, r3, r0
	ldrh r5, [r6]
	lsls r1, r5, #4
	mov r2, ip
	adds r2, #0x4c
	adds r0, r2, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	adds r7, r3, #0
	mov r8, r2
	cmp r1, #0x78
	ble _0809E1E4
	ldr r0, _0809E214  @ gUnknown_02012F56
	ldrh r0, [r0]
	subs r0, #1
	cmp r5, r0
	beq _0809E1E4
	subs r0, r5, #1
	strh r0, [r6]
_0809E1E4:
	mov r0, ip
	bl sub_809E100
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r1, r7, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_80AD51C
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809E214: .4byte gUnknown_02012F56

	THUMB_FUNC_START sub_809E218
sub_809E218: @ 0x0809E218
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r7, r1, #0
	bl ResetIconGraphics_
	ldr r0, _0809E2B0  @ gUnknown_02023CC6
	mov r8, r0
	adds r6, r4, #0
	adds r6, #0x35
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r5, r4, #0
	adds r5, #0x4c
	adds r0, r5, r0
	ldrh r1, [r0]
	lsrs r1, r1, #4
	mov r0, r8
	bl sub_809D418
	ldr r0, _0809E2B4  @ gUnknown_02022EEC
	ldr r1, [r4, #0x2c]
	bl sub_809B830
	movs r0, #5
	bl BG_EnableSyncByMask
	cmp r7, #0
	bge _0809E26A
	ldr r0, _0809E2B8  @ gUnknown_02013698
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r2, [r1]
	lsrs r2, r2, #4
	subs r2, #1
	ldr r3, [r4, #0x2c]
	mov r1, r8
	bl sub_809D47C
_0809E26A:
	cmp r7, #0
	ble _0809E284
	ldr r0, _0809E2B8  @ gUnknown_02013698
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r2, [r1]
	lsrs r2, r2, #4
	adds r2, #7
	ldr r3, [r4, #0x2c]
	mov r1, r8
	bl sub_809D47C
_0809E284:
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r0, [r1]
	adds r0, r0, r7
	strh r0, [r1]
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809E2B0: .4byte gUnknown_02023CC6
_0809E2B4: .4byte gUnknown_02022EEC
_0809E2B8: .4byte gUnknown_02013698

	THUMB_FUNC_START sub_809E2BC
sub_809E2BC: @ 0x0809E2BC
	push {lr}
	bl sub_809D6CC
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809E2C8
sub_809E2C8: @ 0x0809E2C8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r0, [r7, #0x2c]
	bl GetUnitItemCount
	adds r2, r0, #0
	cmp r2, #5
	beq _0809E2E4
	ldr r0, _0809E2FC  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	bne _0809E304
_0809E2E4:
	ldr r0, _0809E300  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0809E2F2
	b _0809E412
_0809E2F2:
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0809E412
	.align 2, 0
_0809E2FC: .4byte gUnknown_02012F56
_0809E300: .4byte gUnknown_0202BCF0
_0809E304:
	movs r5, #0
	strh r5, [r7, #0x38]
	ldr r1, [r7, #0x2c]
	lsls r0, r2, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldr r4, _0809E3E4  @ gUnknown_020122D4
	movs r0, #0x35
	adds r0, r0, r7
	mov r8, r0
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r6, r7, #0
	adds r6, #0x3a
	adds r0, r6, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r4
	ldrh r0, [r0, #2]
	strh r0, [r1]
	ldr r0, [r7, #0x2c]
	bl UnitRemoveInvalidItems
	mov r1, r8
	ldrb r0, [r1]
	lsls r0, r0, #1
	adds r0, r6, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r4
	strh r5, [r0, #2]
	bl sub_80982B8
	ldr r0, [r7, #0x2c]
	mov r2, r8
	ldrb r1, [r2]
	movs r2, #1
	bl SomethingPrepListRelated
	adds r0, r7, #0
	bl sub_809E100
	bl ResetIconGraphics_
	ldr r0, _0809E3E8  @ gUnknown_02022EEC
	ldr r4, _0809E3EC  @ gUnknown_02013670
	ldr r2, [r7, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl sub_809B74C
	adds r4, #0x28
	ldr r1, _0809E3F0  @ gUnknown_02023CC6
	mov r2, r8
	ldrb r0, [r2]
	lsls r0, r0, #1
	adds r5, r7, #0
	adds r5, #0x4c
	adds r0, r5, r0
	ldrh r2, [r0]
	lsrs r2, r2, #4
	ldr r3, [r7, #0x2c]
	adds r0, r4, #0
	bl sub_809D300
	ldr r0, _0809E3F4  @ sub_809E2BC
	movs r1, #1
	adds r2, r7, #0
	bl sub_80ACE20
	mov r1, r8
	ldrb r0, [r1]
	lsls r0, r0, #1
	adds r6, r6, r0
	ldrh r1, [r6]
	lsls r1, r1, #4
	adds r5, r5, r0
	ldrh r0, [r5]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_80AD51C
	movs r0, #5
	bl BG_EnableSyncByMask
	ldr r1, _0809E3F8  @ gActionData
	movs r0, #0x1c
	strb r0, [r1, #0x11]
	ldr r0, [r7, #0x2c]
	bl GetUnitItemCount
	cmp r0, #5
	bne _0809E400
	adds r0, r7, #0
	movs r1, #1
	bl Proc_GotoLabel
	ldr r0, _0809E3FC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809E412
	movs r0, #0x6b
	bl m4aSongNumStart
	b _0809E412
	.align 2, 0
_0809E3E4: .4byte gUnknown_020122D4
_0809E3E8: .4byte gUnknown_02022EEC
_0809E3EC: .4byte gUnknown_02013670
_0809E3F0: .4byte gUnknown_02023CC6
_0809E3F4: .4byte sub_809E2BC
_0809E3F8: .4byte gActionData
_0809E3FC: .4byte gUnknown_0202BCF0
_0809E400:
	ldr r0, _0809E41C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809E412
	movs r0, #0x6a
	bl m4aSongNumStart
_0809E412:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809E41C: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_809E420
sub_809E420: @ 0x0809E420
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	adds r7, r4, #0
	adds r7, #0x35
	ldrb r0, [r7]
	lsls r0, r0, #1
	movs r1, #0x3a
	adds r1, r1, r4
	mov r8, r1
	adds r1, r1, r0
	ldrh r1, [r1]
	mov sl, r1
	adds r5, r4, #0
	adds r5, #0x4c
	adds r6, r5, r0
	ldrh r0, [r6]
	movs r2, #0xf
	mov r9, r2
	mov r1, r9
	ands r1, r0
	mov r9, r1
	cmp r1, #0
	beq _0809E458
	b _0809E648
_0809E458:
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq _0809E462
	cmp r0, #0xff
	bne _0809E500
_0809E462:
	ldr r1, _0809E49C  @ gKeyStatusPtr
	ldr r0, [r1]
	ldrh r3, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	mov r8, r1
	cmp r0, #0
	beq _0809E4C4
	ldr r0, _0809E4A0  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	beq _0809E4A8
	ldr r1, _0809E4A4  @ gUnknown_020122D4
	mov r2, sl
	lsls r0, r2, #2
	adds r0, r0, r1
	ldrh r2, [r0, #2]
	mov r0, sl
	lsls r1, r0, #4
	ldrh r0, [r6]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	bl StartItemHelpBox
	movs r0, #1
	strh r0, [r4, #0x38]
	b _0809E79A
	.align 2, 0
_0809E49C: .4byte gKeyStatusPtr
_0809E4A0: .4byte gUnknown_02012F56
_0809E4A4: .4byte gUnknown_020122D4
_0809E4A8:
	ldr r0, _0809E4C0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0809E4B6
	b _0809E79A
_0809E4B6:
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0809E79A
	.align 2, 0
_0809E4C0: .4byte gUnknown_0202BCF0
_0809E4C4:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _0809E4D4
	adds r0, r4, #0
	bl sub_809E2C8
	b _0809E79A
_0809E4D4:
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _0809E520
	adds r0, r4, #0
	movs r1, #1
	bl Proc_GotoLabel
	ldr r0, _0809E4FC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809E4F6
	movs r0, #0x6b
	bl m4aSongNumStart
_0809E4F6:
	mov r1, r9
	strh r1, [r4, #0x38]
	b _0809E79A
	.align 2, 0
_0809E4FC: .4byte gUnknown_0202BCF0
_0809E500:
	ldr r2, _0809E51C  @ gKeyStatusPtr
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	mov r8, r2
	cmp r0, #0
	beq _0809E520
	bl CloseHelpBox
	mov r2, r9
	strh r2, [r4, #0x38]
	b _0809E79A
	.align 2, 0
_0809E51C: .4byte gKeyStatusPtr
_0809E520:
	mov r0, r8
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0809E568
	movs r0, #0
	bl sub_80ACDA4
	ldr r0, _0809E564  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809E54A
	movs r0, #0x67
	bl m4aSongNumStart
_0809E54A:
	adds r0, r4, #0
	movs r1, #5
	bl Proc_GotoLabel
	adds r1, r4, #0
	adds r1, #0x34
	movs r0, #0
	strb r0, [r1]
	adds r0, r4, #0
	bl sub_809DFB0
	b _0809E79A
	.align 2, 0
_0809E564: .4byte gUnknown_0202BCF0
_0809E568:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0809E5A4
	movs r0, #1
	bl sub_80ACDA4
	ldr r0, _0809E5A0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809E588
	movs r0, #0x67
	bl m4aSongNumStart
_0809E588:
	adds r0, r4, #0
	movs r1, #6
	bl Proc_GotoLabel
	adds r0, r4, #0
	adds r0, #0x34
	strb r5, [r0]
	adds r0, r4, #0
	bl sub_809E054
	b _0809E79A
	.align 2, 0
_0809E5A0: .4byte gUnknown_0202BCF0
_0809E5A4:
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0809E5B8
	adds r1, r4, #0
	adds r1, #0x32
	movs r0, #8
	b _0809E5BE
_0809E5B8:
	adds r1, r4, #0
	adds r1, #0x32
	movs r0, #4
_0809E5BE:
	strb r0, [r1]
	adds r7, r1, #0
	mov r1, r8
	ldr r2, [r1]
	ldrh r1, [r2, #6]
	movs r3, #0x40
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne _0809E5EC
	ldrh r1, [r2, #4]
	adds r0, r3, #0
	ands r0, r1
	adds r6, r4, #0
	adds r6, #0x35
	adds r5, r4, #0
	adds r5, #0x3a
	cmp r0, #0
	beq _0809E608
	movs r0, #0
	ldrsb r0, [r7, r0]
	cmp r0, #8
	bne _0809E608
_0809E5EC:
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r2, r4, #0
	adds r2, #0x3a
	adds r3, r2, r1
	ldrh r1, [r3]
	adds r6, r0, #0
	adds r5, r2, #0
	cmp r1, #0
	beq _0809E608
	subs r0, r1, #1
	strh r0, [r3]
_0809E608:
	mov r0, r8
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r3, #0x80
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne _0809E62A
	ldrh r1, [r2, #4]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _0809E6A8
	movs r0, #0
	ldrsb r0, [r7, r0]
	cmp r0, #8
	bne _0809E6A8
_0809E62A:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r2, r5, r0
	ldrh r1, [r2]
	ldr r0, _0809E644  @ gUnknown_02012F56
	ldrh r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _0809E6A8
	adds r0, r1, #1
	strh r0, [r2]
	b _0809E6A8
	.align 2, 0
_0809E644: .4byte gUnknown_02012F56
_0809E648:
	mov r1, sl
	lsls r0, r1, #4
	ldrh r2, [r6]
	adds r1, r2, #0
	subs r1, #0x28
	subs r0, r0, r1
	cmp r0, #0x37
	bgt _0809E666
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r2, r0
	strh r0, [r6]
_0809E666:
	ldrb r0, [r7]
	lsls r0, r0, #1
	mov r2, r8
	adds r1, r2, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r3, r5, r0
	ldrh r2, [r3]
	adds r0, r2, #0
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x78
	ble _0809E68E
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, r2, r0
	strh r0, [r3]
_0809E68E:
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	adds r6, r7, #0
	mov r5, r8
_0809E6A8:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r0, [r0]
	cmp sl, r0
	beq _0809E79A
	ldr r1, _0809E710  @ gUnknown_020122D4
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0, #2]
	mov r8, r0
	ldr r0, _0809E714  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809E6D0
	movs r0, #0x66
	bl m4aSongNumStart
_0809E6D0:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r3, [r1]
	lsls r2, r3, #4
	adds r1, r4, #0
	adds r1, #0x4c
	adds r0, r1, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r2, r2, r0
	adds r7, r1, #0
	cmp r2, #0x37
	bgt _0809E718
	cmp r3, #0
	beq _0809E718
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq _0809E702
	adds r1, r2, #0
	adds r1, #0x10
	movs r0, #0x80
	mov r2, r8
	bl StartItemHelpBox
_0809E702:
	adds r0, r4, #0
	adds r0, #0x32
	movs r1, #0
	ldrsb r1, [r0, r1]
	negs r1, r1
	b _0809E750
	.align 2, 0
_0809E710: .4byte gUnknown_020122D4
_0809E714: .4byte gUnknown_0202BCF0
_0809E718:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r2, [r1]
	lsls r1, r2, #4
	adds r0, r7, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x78
	ble _0809E75C
	ldr r0, _0809E758  @ gUnknown_02012F56
	ldrh r0, [r0]
	subs r0, #1
	cmp r2, r0
	beq _0809E75C
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq _0809E748
	subs r1, #0x10
	movs r0, #0x80
	mov r2, r8
	bl StartItemHelpBox
_0809E748:
	adds r0, r4, #0
	adds r0, #0x32
	movs r1, #0
	ldrsb r1, [r0, r1]
_0809E750:
	adds r0, r4, #0
	bl sub_809E218
	b _0809E79A
	.align 2, 0
_0809E758: .4byte gUnknown_02012F56
_0809E75C:
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq _0809E77C
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r7, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	mov r2, r8
	bl StartItemHelpBox
_0809E77C:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r7, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_80AD51C
_0809E79A:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809E7A8
sub_809E7A8: @ 0x0809E7A8
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r6, _0809E7D8  @ gKeyStatusPtr
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0809E7EE
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r3, r0, #0
	adds r2, r4, #0
	adds r2, #0x31
	ldrb r0, [r2]
	cmp r0, #0
	beq _0809E7DC
	subs r0, #1
	strb r0, [r2]
	b _0809E81E
	.align 2, 0
_0809E7D8: .4byte gKeyStatusPtr
_0809E7DC:
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0809E838
	subs r0, r3, #1
	strb r0, [r2]
	b _0809E81E
_0809E7EE:
	movs r7, #0x80
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0809E838
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r2, r4, #0
	adds r2, #0x31
	ldrb r1, [r2]
	subs r0, #1
	cmp r1, r0
	bge _0809E810
	adds r0, r1, #1
	strb r0, [r2]
	b _0809E81E
_0809E810:
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0809E838
	strb r5, [r2]
_0809E81E:
	ldr r0, _0809E834  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809E830
	movs r0, #0x66
	bl m4aSongNumStart
_0809E830:
	movs r0, #1
	b _0809E83A
	.align 2, 0
_0809E834: .4byte gUnknown_0202BCF0
_0809E838:
	movs r0, #0
_0809E83A:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_809E840
sub_809E840: @ 0x0809E840
	push {lr}
	adds r0, #0x31
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_80AD51C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809E85C
sub_809E85C: @ 0x0809E85C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x2c]
	adds r7, r5, #0
	adds r7, #0x31
	ldrb r2, [r7]
	lsls r2, r2, #1
	adds r1, r0, #0
	adds r1, #0x1e
	adds r1, r1, r2
	ldrh r4, [r1]
	bl GetUnitItemCount
	ldr r1, [r5, #0x2c]
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	movs r0, #0
	strh r0, [r1]
	ldr r0, [r5, #0x2c]
	bl UnitRemoveInvalidItems
	adds r0, r4, #0
	bl sub_8098014
	adds r6, r5, #0
	adds r6, #0x35
	strb r0, [r6]
	adds r0, r4, #0
	bl AddItemToConvoy
	ldr r0, [r5, #0x2c]
	ldrb r1, [r6]
	movs r2, #1
	bl SomethingPrepListRelated
	adds r0, r5, #0
	bl sub_809E100
	bl ResetIconGraphics_
	ldr r0, _0809E924  @ gUnknown_02022EEC
	ldr r4, _0809E928  @ gUnknown_02013670
	ldr r2, [r5, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl sub_809B74C
	adds r4, #0x28
	ldr r1, _0809E92C  @ gUnknown_02023CC6
	ldrb r2, [r6]
	lsls r2, r2, #1
	adds r0, r5, #0
	adds r0, #0x4c
	adds r0, r0, r2
	ldrh r2, [r0]
	lsrs r2, r2, #4
	ldr r3, [r5, #0x2c]
	adds r0, r4, #0
	bl sub_809D300
	ldr r0, _0809E930  @ sub_809E2BC
	movs r1, #1
	adds r2, r5, #0
	bl sub_80ACE20
	movs r0, #4
	bl BG_EnableSyncByMask
	ldr r0, [r5, #0x2c]
	bl GetUnitItemCount
	adds r4, r0, #0
	ldr r1, _0809E934  @ gActionData
	movs r0, #0x1c
	strb r0, [r1, #0x11]
	cmp r4, #0
	beq _0809E906
	bl sub_8097CC8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x64
	bne _0809E93C
_0809E906:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_GotoLabel
	ldr r0, _0809E938  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809E96A
	movs r0, #0x6b
	bl m4aSongNumStart
	b _0809E96A
	.align 2, 0
_0809E924: .4byte gUnknown_02022EEC
_0809E928: .4byte gUnknown_02013670
_0809E92C: .4byte gUnknown_02023CC6
_0809E930: .4byte sub_809E2BC
_0809E934: .4byte gActionData
_0809E938: .4byte gUnknown_0202BCF0
_0809E93C:
	ldr r0, _0809E970  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809E94E
	movs r0, #0x6a
	bl m4aSongNumStart
_0809E94E:
	ldrb r0, [r7]
	cmp r4, r0
	bgt _0809E96A
	subs r0, r4, #1
	strb r0, [r7]
	ldrb r1, [r7]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_80AD51C
_0809E96A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809E970: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_809E974
sub_809E974: @ 0x0809E974
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x38]
	cmp r0, #1
	bne _0809E99C
	ldr r0, _0809E998  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809EA34
	bl CloseHelpBox
	movs r0, #0
	strh r0, [r4, #0x38]
	b _0809EA76
	.align 2, 0
_0809E998: .4byte gKeyStatusPtr
_0809E99C:
	ldr r0, _0809E9D0  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809E9D4
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x31
	ldrb r3, [r1]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _0809EA76
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl StartItemHelpBox
	movs r0, #1
	strh r0, [r4, #0x38]
	b _0809EA76
	.align 2, 0
_0809E9D0: .4byte gKeyStatusPtr
_0809E9D4:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809EA0C
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x31
	ldrb r1, [r1]
	bl sub_8097F98
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809EA04
	movs r1, #1
	negs r1, r1
	ldr r2, _0809EA00  @ 0x0000088B
	adds r0, r1, #0
	adds r3, r4, #0
	bl sub_8097DA8
	b _0809EA76
	.align 2, 0
_0809EA00: .4byte 0x0000088B
_0809EA04:
	adds r0, r4, #0
	bl sub_809E85C
	b _0809EA76
_0809EA0C:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0809EA34
	adds r0, r4, #0
	movs r1, #1
	bl Proc_GotoLabel
	ldr r0, _0809EA30  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809EA76
	movs r0, #0x6b
	bl m4aSongNumStart
	b _0809EA76
	.align 2, 0
_0809EA30: .4byte gUnknown_0202BCF0
_0809EA34:
	adds r0, r4, #0
	bl sub_809E7A8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809EA76
	adds r5, r4, #0
	adds r5, #0x31
	ldrb r1, [r5]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_80AD51C
	ldrh r0, [r4, #0x38]
	cmp r0, #1
	bne _0809EA76
	ldr r0, [r4, #0x2c]
	ldrb r3, [r5]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _0809EA76
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl StartItemHelpBox
_0809EA76:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809EA7C
sub_809EA7C: @ 0x0809EA7C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809EAA0  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809EAA4
	bl sub_80C4048
	cmp r0, #0
	beq _0809EABE
	adds r1, r4, #0
	adds r1, #0x35
	ldrb r1, [r1]
	adds r0, #0x2b
	b _0809EABC
	.align 2, 0
_0809EAA0: .4byte gUnknown_03005280
_0809EAA4:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _0809EABE
	ldr r0, _0809EAD4  @ gUnknown_08A1829C
	bl Proc_Find
	adds r1, r4, #0
	adds r1, #0x35
	ldrb r1, [r1]
	adds r0, #0x32
_0809EABC:
	strb r1, [r0]
_0809EABE:
	adds r0, r4, #0
	bl sub_80ADDD4
	bl EndBG3Slider_
	movs r0, #0
	bl SetPrimaryHBlankHandler
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809EAD4: .4byte gUnknown_08A1829C

	THUMB_FUNC_START sub_809EAD8
sub_809EAD8: @ 0x0809EAD8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809EAF0  @ gUnknown_08A1920C
	bl Proc_CreateBlockingChild
	str r4, [r0, #0x2c]
	adds r0, #0x30
	movs r1, #0
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809EAF0: .4byte gUnknown_08A1920C

	THUMB_FUNC_START sub_809EAF4
sub_809EAF4: @ 0x0809EAF4
	push {r4, lr}
	ldr r4, _0809EB10  @ gActiveUnit
	ldr r0, [r4]
	cmp r0, #0
	beq _0809EB08
	bl MU_EndAll
	ldr r0, [r4]
	bl ShowUnitSMS
_0809EB08:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809EB10: .4byte gActiveUnit

	THUMB_FUNC_START sub_809EB14
sub_809EB14: @ 0x0809EB14
	push {r4, lr}
	ldr r4, _0809EB34  @ gActiveUnit
	ldr r0, [r4]
	cmp r0, #0
	beq _0809EB2C
	bl HideUnitSMS
	ldr r0, [r4]
	bl MU_Create
	bl MU_SetDefaultFacing_Auto
_0809EB2C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809EB34: .4byte gActiveUnit

	THUMB_FUNC_START sub_809EB38
sub_809EB38: @ 0x0809EB38
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809EB54  @ gUnknown_08A192EC
	movs r1, #3
	bl Proc_Create
	str r4, [r0, #0x2c]
	adds r0, #0x30
	movs r1, #1
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809EB54: .4byte gUnknown_08A192EC

	THUMB_FUNC_START sub_809EB58
sub_809EB58: @ 0x0809EB58
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809EB74  @ gUnknown_08A192EC
	movs r1, #3
	bl Proc_Create
	str r4, [r0, #0x2c]
	adds r0, #0x30
	movs r1, #2
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809EB74: .4byte gUnknown_08A192EC

	THUMB_FUNC_START sub_809EB78
sub_809EB78: @ 0x0809EB78
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809EBA4  @ gUnknown_08A1829C
	bl Proc_Find
	adds r2, r0, #0
	movs r0, #0
	strh r0, [r4, #0x36]
	movs r0, #0xff
	strh r0, [r4, #0x34]
	ldr r0, _0809EBA8  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809EBB4
	bl sub_80C4048
	cmp r0, #0
	beq _0809EBAC
	adds r0, #0x2a
	b _0809EBB8
	.align 2, 0
_0809EBA4: .4byte gUnknown_08A1829C
_0809EBA8: .4byte gUnknown_03005280
_0809EBAC:
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #0
	b _0809EBBE
_0809EBB4:
	adds r0, r2, #0
	adds r0, #0x31
_0809EBB8:
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x33
_0809EBBE:
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x31
	movs r0, #0
	movs r1, #4
	strb r1, [r2]
	adds r1, r4, #0
	adds r1, #0x30
	strb r0, [r1]
	movs r3, #0
	adds r1, #0x1a
	adds r0, r4, #0
	adds r0, #0x38
	movs r2, #8
_0809EBDA:
	strh r3, [r0]
	strh r3, [r1]
	adds r1, #2
	adds r0, #2
	subs r2, #1
	cmp r2, #0
	bge _0809EBDA
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809EBF0
sub_809EBF0: @ 0x0809EBF0
	push {r4, lr}
	sub sp, #8
	ldr r4, _0809EC2C  @ gUnknown_02022D10
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _0809EC30  @ 0x000005A9
	bl GetStringFromIndex
	ldr r2, _0809EC34  @ gUnknown_020136D8
	movs r1, #0
	str r1, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	movs r0, #1
	bl BG_EnableSyncByMask
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809EC2C: .4byte gUnknown_02022D10
_0809EC30: .4byte 0x000005A9
_0809EC34: .4byte gUnknown_020136D8

	THUMB_FUNC_START sub_809EC38
sub_809EC38: @ 0x0809EC38
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	adds r6, #0x33
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r5, r0, #0
	adds r5, #0x38
	adds r1, r5, r1
	ldrh r4, [r1]
	ldr r0, _0809EC84  @ gUnknown_02022D18
	mov r8, r0
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	ldr r7, _0809EC88  @ gUnknown_02013668
	adds r0, r7, #0
	bl Text_Clear
	ldr r0, _0809EC8C  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, r4
	bgt _0809EC94
	ldr r0, _0809EC90  @ 0x00000536
	bl GetStringFromIndex
	movs r1, #0
	str r1, [sp]
	str r0, [sp, #4]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #1
	b _0809ECBA
	.align 2, 0
_0809EC84: .4byte gUnknown_02022D18
_0809EC88: .4byte gUnknown_02013668
_0809EC8C: .4byte gUnknown_02012F56
_0809EC90: .4byte 0x00000536
_0809EC94:
	ldr r0, _0809ECC4  @ gUnknown_020122D4
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r1, [r1]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrb r4, [r1]
	cmp r4, #0
	bne _0809ECC8
	movs r0, #0xb3
	lsls r0, r0, #3
	bl GetStringFromIndex
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #3
_0809ECBA:
	movs r3, #0
	bl DrawTextInline
	b _0809ECE8
	.align 2, 0
_0809ECC4: .4byte gUnknown_020122D4
_0809ECC8:
	adds r0, r4, #0
	bl GetUnitFromCharId
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetStringFromIndex
	movs r1, #0
	str r1, [sp]
	str r0, [sp, #4]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
_0809ECE8:
	movs r0, #1
	bl BG_EnableSyncByMask
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809ECFC
sub_809ECFC: @ 0x0809ECFC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r6, #0
	adds r7, #0x33
	ldrb r0, [r7]
	lsls r4, r0, #1
	adds r4, r4, r0
	lsls r4, r4, #2
	adds r4, #0x7c
	bl GetGameClock
	ldr r2, _0809ED74  @ gPaletteBuffer
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	ldr r1, _0809ED78  @ gUnknown_08A1BD60
	adds r0, r0, r1
	ldrh r0, [r0]
	ldr r1, _0809ED7C  @ 0x0000029A
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePaletteSync
	ldr r1, _0809ED80  @ gUnknown_08A19608
	ldrb r0, [r7]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r5, #0x85
	lsls r5, r5, #7
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x18
	bl RegisterObjectAttributes_SafeMaybe
	ldr r3, _0809ED84  @ gUnknown_08A195F8
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x18
	bl RegisterObjectAttributes_SafeMaybe
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r6, #0x4a
	adds r6, r6, r0
	ldrh r1, [r6]
	ldr r0, _0809ED88  @ gUnknown_02012F56
	ldrh r2, [r0]
	movs r0, #0xc
	movs r3, #7
	bl sub_80976CC
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809ED74: .4byte gPaletteBuffer
_0809ED78: .4byte gUnknown_08A1BD60
_0809ED7C: .4byte 0x0000029A
_0809ED80: .4byte gUnknown_08A19608
_0809ED84: .4byte gUnknown_08A195F8
_0809ED88: .4byte gUnknown_02012F56

	THUMB_FUNC_START sub_809ED8C
sub_809ED8C: @ 0x0809ED8C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r7, r0, #0
	ldr r0, _0809F0C0  @ gLCDControlBuffer
	mov r8, r0
	ldrb r1, [r0]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	mov r1, r8
	strb r0, [r1]
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #1
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #2
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	mov r0, r8
	ldrb r2, [r0, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	mov r9, r2
	mov r2, r9
	orrs r0, r2
	mov r2, r8
	strb r0, [r2, #0xc]
	ldrb r2, [r2, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r5, #2
	orrs r0, r5
	mov r2, r8
	strb r0, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	ands r1, r0
	strb r1, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x18]
	bl ResetFaces
	bl Font_InitForUIDefault
	bl ResetIconGraphics_
	bl LoadUiFrameGraphics
	bl LoadObjUIGfx
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	adds r0, r7, #0
	adds r0, #0x33
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r0, #0x17
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	ldr r0, _0809F0C4  @ 0x06012000
	movs r1, #1
	negs r1, r1
	bl LoadDialogueBoxGfx
	movs r0, #4
	bl LoadIconPalettes
	bl sub_8095A1C
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_8098C3C
	ldr r0, _0809F0C8  @ gUnknown_08A1B9EC
	ldr r4, _0809F0CC  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _0809F0D0  @ gBG1TilemapBuffer
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl CallARM_FillTileRect
	movs r0, #7
	bl BG_EnableSyncByMask
	adds r0, r7, #0
	bl sub_80AC9C0
	adds r0, r7, #0
	bl sub_80AD47C
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_80AD4A0
	mov r1, r8
	ldrb r0, [r1, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, r8
	strb r0, [r2, #1]
	mov r1, r8
	adds r1, #0x2d
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	adds r2, #0x34
	ldrb r0, [r2]
	mov r1, r9
	orrs r0, r1
	orrs r0, r5
	movs r1, #4
	orrs r0, r1
	movs r4, #8
	orrs r0, r4
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r2]
	adds r2, #2
	ldrb r0, [r2]
	mov r1, r9
	orrs r0, r1
	orrs r0, r5
	movs r1, #5
	negs r1, r1
	ands r0, r1
	orrs r0, r4
	orrs r0, r3
	strb r0, [r2]
	adds r0, r7, #0
	bl NewGreenTextColorManager
	movs r0, #0xc3
	movs r1, #0x93
	movs r2, #9
	adds r3, r7, #0
	bl StartHelpPromptSprite
	ldr r4, _0809F0D4  @ gUnknown_02013660
	adds r0, r4, #0
	movs r1, #6
	bl Text_Init
	adds r0, r4, #0
	adds r0, #8
	movs r1, #5
	bl Text_Init
	adds r0, r4, #0
	adds r0, #0x78
	movs r1, #4
	bl Text_Init
	adds r4, #0x10
	movs r5, #4
_0809EF2C:
	adds r0, r4, #0
	movs r1, #7
	bl Text_Init
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _0809EF2C
	movs r2, #0x33
	adds r2, r2, r7
	mov r8, r2
	adds r6, r7, #0
	adds r6, #0x4a
	ldr r4, _0809F0D8  @ gUnknown_02013698
	movs r5, #7
_0809EF4A:
	adds r0, r4, #0
	movs r1, #7
	bl Text_Allocate
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _0809EF4A
	movs r4, #0x80
	lsls r4, r4, #7
	adds r0, r4, #0
	movs r1, #6
	bl StoreConvoyWeaponIconGraphics
	ldr r0, _0809F0DC  @ gUnknown_02022D86
	mov r9, r0
	adds r1, r4, #0
	movs r2, #6
	bl sub_809D8D4
	ldr r0, _0809F0E0  @ gUnknown_08A19CCC
	ldr r1, _0809F0E4  @ 0x06015000
	bl CopyDataWithPossibleUncomp
	ldr r0, _0809F0E8  @ gUnknown_08A1A084
	movs r4, #0xa0
	lsls r4, r4, #2
	adds r1, r4, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r3, #0xb0
	lsls r3, r3, #7
	movs r0, #9
	str r0, [sp]
	adds r0, r7, #0
	movs r1, #0xe1
	movs r2, #0x2f
	bl sub_8097748
	bl sub_8097668
	ldr r0, [r7, #0x2c]
	mov r2, r8
	ldrb r1, [r2]
	movs r2, #3
	bl SomethingPrepListRelated
	adds r0, r7, #0
	bl sub_809F5F4
	ldr r5, _0809F0D8  @ gUnknown_02013698
	ldr r1, _0809F0EC  @ gUnknown_02023CC6
	mov r2, r8
	ldrb r0, [r2]
	lsls r0, r0, #1
	adds r0, r6, r0
	ldrh r2, [r0]
	lsrs r2, r2, #4
	ldr r3, [r7, #0x2c]
	adds r0, r5, #0
	bl sub_809D300
	movs r0, #4
	bl BG_EnableSyncByMask
	movs r0, #0xb3
	lsls r0, r0, #1
	add r0, r9
	adds r1, r5, #0
	subs r1, #0x28
	ldr r2, [r7, #0x2c]
	movs r3, #0
	bl sub_809B74C
	bl sub_809EBF0
	adds r0, r7, #0
	bl sub_80ACCE0
	movs r0, #0
	adds r1, r4, #0
	movs r2, #2
	bl sub_80ACCF4
	movs r0, #0x78
	movs r1, #0x18
	movs r2, #0xe9
	movs r3, #0x18
	bl sub_80ACD7C
	movs r0, #3
	bl sub_80ACD60
	ldr r0, _0809F0F0  @ sub_809ECFC
	adds r1, r7, #0
	bl Get6CDifferedLoop6C
	ldr r0, [r7, #0x2c]
	bl GetUnitPortraitId
	adds r1, r0, #0
	movs r3, #4
	negs r3, r3
	ldr r0, _0809F0F4  @ 0x00000203
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	bl sub_80064F4
	ldr r0, [r7, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetStringFromIndex
	mov r8, r0
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [sp]
	str r7, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl sub_80ADB7C
	movs r1, #0x28
	negs r1, r1
	movs r2, #1
	negs r2, r2
	movs r0, #0
	movs r3, #1
	bl sub_80ADBFC
	movs r0, #1
	movs r1, #0x98
	movs r2, #6
	movs r3, #2
	bl sub_80ADBFC
	movs r0, #1
	movs r1, #0xe
	movs r2, #4
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0x30
	mov r1, r8
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	subs r5, #0x38
	str r4, [sp]
	mov r0, r8
	str r0, [sp, #4]
	adds r0, r5, #0
	ldr r1, _0809F0F8  @ gBG0TilemapBuffer
	movs r2, #0
	bl DrawTextInline
	adds r0, r7, #0
	bl sub_809EC38
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809F0C0: .4byte gLCDControlBuffer
_0809F0C4: .4byte 0x06012000
_0809F0C8: .4byte gUnknown_08A1B9EC
_0809F0CC: .4byte gUnknown_02020188
_0809F0D0: .4byte gBG1TilemapBuffer
_0809F0D4: .4byte gUnknown_02013660
_0809F0D8: .4byte gUnknown_02013698
_0809F0DC: .4byte gUnknown_02022D86
_0809F0E0: .4byte gUnknown_08A19CCC
_0809F0E4: .4byte 0x06015000
_0809F0E8: .4byte gUnknown_08A1A084
_0809F0EC: .4byte gUnknown_02023CC6
_0809F0F0: .4byte sub_809ECFC
_0809F0F4: .4byte 0x00000203
_0809F0F8: .4byte gBG0TilemapBuffer

	THUMB_FUNC_START sub_809F0FC
sub_809F0FC: @ 0x0809F0FC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809F120  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809F124
	bl sub_80C4048
	cmp r0, #0
	beq _0809F134
	adds r1, r4, #0
	adds r1, #0x33
	ldrb r1, [r1]
	adds r0, #0x2a
	b _0809F132
	.align 2, 0
_0809F120: .4byte gUnknown_03005280
_0809F124:
	ldr r0, _0809F14C  @ gUnknown_08A1829C
	bl Proc_Find
	adds r1, r4, #0
	adds r1, #0x33
	ldrb r1, [r1]
	adds r0, #0x31
_0809F132:
	strb r1, [r0]
_0809F134:
	adds r0, r4, #0
	bl sub_80ADDD4
	movs r0, #0
	bl DeleteFaceByIndex
	bl EndBG3Slider_
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809F14C: .4byte gUnknown_08A1829C

	THUMB_FUNC_START sub_809F150
sub_809F150: @ 0x0809F150
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	bl ResetIconGraphics_
	ldr r0, [r4, #0x2c]
	adds r5, r4, #0
	adds r5, #0x33
	ldrb r1, [r5]
	movs r2, #3
	bl SomethingPrepListRelated
	adds r0, r4, #0
	bl sub_809F370
	ldr r0, _0809F1F0  @ gUnknown_02013698
	ldr r1, _0809F1F4  @ gUnknown_02023CC6
	ldrb r2, [r5]
	lsls r2, r2, #1
	adds r6, r4, #0
	adds r6, #0x4a
	adds r2, r6, r2
	ldrh r2, [r2]
	lsrs r2, r2, #4
	ldr r3, [r4, #0x2c]
	bl sub_809D300
	ldr r0, _0809F1F8  @ gUnknown_02022EEC
	ldr r1, [r4, #0x2c]
	bl sub_809B830
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r7, r4, #0
	adds r7, #0x38
	adds r1, r7, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r6, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_80AD51C
	movs r0, #5
	bl BG_EnableSyncByMask
	ldr r0, _0809F1FC  @ sub_809EC38
	movs r1, #2
	adds r2, r4, #0
	bl sub_80ACE20
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq _0809F210
	ldr r0, _0809F200  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	beq _0809F208
	ldr r2, _0809F204  @ gUnknown_020122D4
	ldrb r3, [r5]
	lsls r3, r3, #1
	adds r0, r7, r3
	ldrh r1, [r0]
	lsls r0, r1, #2
	adds r0, r0, r2
	ldrh r2, [r0, #2]
	lsls r1, r1, #4
	adds r3, r6, r3
	ldrh r0, [r3]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	bl StartItemHelpBox
	movs r0, #1
	b _0809F20E
	.align 2, 0
_0809F1F0: .4byte gUnknown_02013698
_0809F1F4: .4byte gUnknown_02023CC6
_0809F1F8: .4byte gUnknown_02022EEC
_0809F1FC: .4byte sub_809EC38
_0809F200: .4byte gUnknown_02012F56
_0809F204: .4byte gUnknown_020122D4
_0809F208:
	bl CloseHelpBox
	movs r0, #0xff
_0809F20E:
	strh r0, [r4, #0x36]
_0809F210:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809F218
sub_809F218: @ 0x0809F218
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #4
	mov r8, r0
	adds r1, r7, #0
	adds r1, #0x32
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r4, [r1]
	cmp r4, #4
	bge _0809F24A
	mov r2, r8
	subs r1, r2, r4
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	movs r1, #0x10
	bl __divsi3
	adds r6, r0, #0
	subs r6, #0x60
_0809F24A:
	adds r5, r7, #0
	adds r5, #0x33
	cmp r4, #4
	bne _0809F266
	ldrb r0, [r5]
	cmp r0, #0
	bne _0809F25C
	movs r0, #8
	b _0809F25E
_0809F25C:
	subs r0, #1
_0809F25E:
	strb r0, [r5]
	adds r0, r7, #0
	bl sub_809F150
_0809F266:
	adds r4, r7, #0
	adds r4, #0x32
	ldrb r1, [r4]
	cmp r1, r8
	blt _0809F28A
	mov r0, r8
	subs r1, r1, r0
	subs r1, r0, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	mov r2, r8
	mov r1, r8
	muls r1, r2, r1
	bl __divsi3
	adds r6, r0, #0
_0809F28A:
	movs r0, #0xff
	ands r6, r0
	ldrb r1, [r5]
	lsls r1, r1, #1
	adds r0, r7, #0
	adds r0, #0x4a
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r6, #0
	bl BG_SetPosition
	ldrb r1, [r4]
	mov r2, r8
	lsls r0, r2, #1
	cmp r1, r0
	bne _0809F2BA
	adds r0, r7, #0
	movs r1, #1
	bl Proc_GotoLabel
_0809F2BA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809F2C4
sub_809F2C4: @ 0x0809F2C4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #4
	mov r8, r0
	adds r1, r7, #0
	adds r1, #0x32
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r4, [r1]
	cmp r4, #4
	bge _0809F2F6
	mov r2, r8
	subs r1, r2, r4
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	movs r1, #0x10
	bl __divsi3
	movs r1, #0x60
	subs r6, r1, r0
_0809F2F6:
	adds r5, r7, #0
	adds r5, #0x33
	cmp r4, #4
	bne _0809F312
	ldrb r0, [r5]
	cmp r0, #8
	bne _0809F308
	movs r0, #0
	b _0809F30A
_0809F308:
	adds r0, #1
_0809F30A:
	strb r0, [r5]
	adds r0, r7, #0
	bl sub_809F150
_0809F312:
	adds r4, r7, #0
	adds r4, #0x32
	ldrb r1, [r4]
	cmp r1, r8
	blt _0809F336
	mov r0, r8
	subs r1, r1, r0
	subs r1, r0, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	mov r2, r8
	mov r1, r8
	muls r1, r2, r1
	bl __divsi3
	negs r6, r0
_0809F336:
	movs r0, #0xff
	ands r6, r0
	ldrb r1, [r5]
	lsls r1, r1, #1
	adds r0, r7, #0
	adds r0, #0x4a
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r6, #0
	bl BG_SetPosition
	ldrb r1, [r4]
	mov r2, r8
	lsls r0, r2, #1
	cmp r1, r0
	bne _0809F366
	adds r0, r7, #0
	movs r1, #1
	bl Proc_GotoLabel
_0809F366:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809F370
sub_809F370: @ 0x0809F370
	push {r4, r5, lr}
	mov ip, r0
	ldr r0, _0809F398  @ gUnknown_02012F56
	ldrh r4, [r0]
	adds r5, r0, #0
	cmp r4, #0
	bne _0809F39C
	mov r3, ip
	adds r3, #0x33
	ldrb r0, [r3]
	lsls r0, r0, #1
	mov r1, ip
	adds r1, #0x38
	adds r1, r1, r0
	mov r2, ip
	adds r2, #0x4a
	adds r0, r2, r0
	strh r4, [r0]
	strh r4, [r1]
	b _0809F3BA
	.align 2, 0
_0809F398: .4byte gUnknown_02012F56
_0809F39C:
	mov r2, ip
	adds r2, #0x33
	ldrb r0, [r2]
	lsls r0, r0, #1
	mov r1, ip
	adds r1, #0x38
	adds r4, r1, r0
	ldrh r1, [r4]
	ldrh r0, [r5]
	subs r0, #1
	adds r3, r2, #0
	adds r2, #0x17
	cmp r1, r0
	ble _0809F3BA
	strh r0, [r4]
_0809F3BA:
	ldrh r0, [r5]
	cmp r0, #6
	bls _0809F3D8
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r4, r2, r0
	ldrh r0, [r4]
	lsrs r0, r0, #4
	adds r0, #7
	ldrh r1, [r5]
	cmp r0, r1
	ble _0809F3D8
	subs r0, r1, #7
	lsls r0, r0, #4
	strh r0, [r4]
_0809F3D8:
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r0, r2, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809F3F4
sub_809F3F4: @ 0x0809F3F4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r7, r1, #0
	bl ResetIconGraphics_
	ldr r0, _0809F48C  @ gUnknown_02023CC6
	mov r8, r0
	adds r6, r4, #0
	adds r6, #0x33
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r5, r4, #0
	adds r5, #0x4a
	adds r0, r5, r0
	ldrh r1, [r0]
	lsrs r1, r1, #4
	mov r0, r8
	bl sub_809D418
	ldr r0, _0809F490  @ gUnknown_02022EEC
	ldr r1, [r4, #0x2c]
	bl sub_809B830
	movs r0, #5
	bl BG_EnableSyncByMask
	cmp r7, #0
	bge _0809F446
	ldr r0, _0809F494  @ gUnknown_02013698
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r2, [r1]
	lsrs r2, r2, #4
	subs r2, #1
	ldr r3, [r4, #0x2c]
	mov r1, r8
	bl sub_809D47C
_0809F446:
	cmp r7, #0
	ble _0809F460
	ldr r0, _0809F494  @ gUnknown_02013698
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r2, [r1]
	lsrs r2, r2, #4
	adds r2, #7
	ldr r3, [r4, #0x2c]
	mov r1, r8
	bl sub_809D47C
_0809F460:
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r0, [r1]
	adds r0, r0, r7
	strh r0, [r1]
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809F48C: .4byte gUnknown_02023CC6
_0809F490: .4byte gUnknown_02022EEC
_0809F494: .4byte gUnknown_02013698

	THUMB_FUNC_START sub_809F498
sub_809F498: @ 0x0809F498
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	ldr r0, [r6, #0x2c]
	bl GetUnitItemCount
	adds r2, r0, #0
	cmp r2, #5
	beq _0809F4B6
	ldr r0, _0809F4CC  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	bne _0809F4D4
_0809F4B6:
	ldr r0, _0809F4D0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0809F4C4
	b _0809F5E2
_0809F4C4:
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0809F5E2
	.align 2, 0
_0809F4CC: .4byte gUnknown_02012F56
_0809F4D0: .4byte gUnknown_0202BCF0
_0809F4D4:
	movs r4, #0
	strh r4, [r6, #0x36]
	ldr r1, [r6, #0x2c]
	lsls r0, r2, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldr r0, _0809F5B8  @ gUnknown_020122D4
	mov r9, r0
	adds r7, r6, #0
	adds r7, #0x33
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r5, r6, #0
	adds r5, #0x38
	adds r0, r5, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	add r0, r9
	ldrh r0, [r0, #2]
	strh r0, [r1]
	ldr r0, [r6, #0x2c]
	bl UnitRemoveInvalidItems
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	add r0, r9
	strh r4, [r0, #2]
	bl sub_80982B8
	ldr r0, [r6, #0x2c]
	ldrb r1, [r7]
	movs r2, #3
	bl SomethingPrepListRelated
	adds r0, r6, #0
	bl sub_809F370
	bl ResetIconGraphics_
	ldr r0, _0809F5BC  @ gUnknown_02022EEC
	ldr r4, _0809F5C0  @ gUnknown_02013670
	ldr r2, [r6, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl sub_809B74C
	adds r4, #0x28
	ldr r1, _0809F5C4  @ gUnknown_02023CC6
	ldrb r0, [r7]
	lsls r0, r0, #1
	movs r2, #0x4a
	adds r2, r2, r6
	mov r8, r2
	add r0, r8
	ldrh r2, [r0]
	lsrs r2, r2, #4
	ldr r3, [r6, #0x2c]
	adds r0, r4, #0
	bl sub_809D300
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	add r0, r9
	ldrb r0, [r0]
	cmp r0, #0
	beq _0809F56E
	ldr r0, _0809F5C8  @ sub_809EC38
	movs r1, #1
	adds r2, r6, #0
	bl sub_80ACE20
_0809F56E:
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_80AD51C
	movs r0, #5
	bl BG_EnableSyncByMask
	ldr r0, [r6, #0x2c]
	bl GetUnitItemCount
	cmp r0, #5
	bne _0809F5D0
	adds r0, r6, #0
	movs r1, #1
	bl Proc_GotoLabel
	ldr r0, _0809F5CC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809F5E2
	movs r0, #0x6b
	bl m4aSongNumStart
	b _0809F5E2
	.align 2, 0
_0809F5B8: .4byte gUnknown_020122D4
_0809F5BC: .4byte gUnknown_02022EEC
_0809F5C0: .4byte gUnknown_02013670
_0809F5C4: .4byte gUnknown_02023CC6
_0809F5C8: .4byte sub_809EC38
_0809F5CC: .4byte gUnknown_0202BCF0
_0809F5D0:
	ldr r0, _0809F5F0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809F5E2
	movs r0, #0x6a
	bl m4aSongNumStart
_0809F5E2:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809F5F0: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_809F5F4
sub_809F5F4: @ 0x0809F5F4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov ip, r0
	adds r0, #0x33
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r0, #5
	adds r4, r0, r1
	ldrh r3, [r4]
	lsls r2, r3, #4
	adds r0, #0x12
	adds r0, r0, r1
	ldrh r0, [r0]
	subs r0, #0x28
	subs r2, r2, r0
	cmp r2, #0x37
	bgt _0809F620
	cmp r3, #0
	beq _0809F620
	adds r0, r3, #1
	strh r0, [r4]
_0809F620:
	mov r4, ip
	adds r4, #0x33
	ldrb r0, [r4]
	lsls r0, r0, #1
	mov r3, ip
	adds r3, #0x38
	adds r6, r3, r0
	ldrh r5, [r6]
	lsls r1, r5, #4
	mov r2, ip
	adds r2, #0x4a
	adds r0, r2, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	adds r7, r3, #0
	mov r8, r2
	cmp r1, #0x78
	ble _0809F654
	ldr r0, _0809F684  @ gUnknown_02012F56
	ldrh r0, [r0]
	subs r0, #1
	cmp r5, r0
	beq _0809F654
	subs r0, r5, #1
	strh r0, [r6]
_0809F654:
	mov r0, ip
	bl sub_809F370
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r1, r7, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_80AD51C
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809F684: .4byte gUnknown_02012F56

	THUMB_FUNC_START sub_809F688
sub_809F688: @ 0x0809F688
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x33
	ldrb r0, [r6]
	lsls r0, r0, #1
	movs r1, #0x38
	adds r1, r1, r4
	mov r8, r1
	adds r1, r1, r0
	ldrh r1, [r1]
	mov r9, r1
	adds r5, r4, #0
	adds r5, #0x4a
	adds r7, r5, r0
	ldrh r0, [r7]
	movs r2, #0xf
	mov sl, r2
	mov r1, sl
	ands r1, r0
	mov sl, r1
	cmp r1, #0
	beq _0809F6C0
	b _0809F908
_0809F6C0:
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq _0809F6CC
	cmp r0, #0xff
	beq _0809F6CC
	b _0809F7C0
_0809F6CC:
	ldr r1, _0809F708  @ gKeyStatusPtr
	ldr r0, [r1]
	ldrh r3, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	mov r8, r1
	cmp r0, #0
	beq _0809F714
	ldr r0, _0809F70C  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	beq _0809F724
	ldr r1, _0809F710  @ gUnknown_020122D4
	mov r2, r9
	lsls r0, r2, #2
	adds r0, r0, r1
	ldrh r2, [r0, #2]
	mov r0, r9
	lsls r1, r0, #4
	ldrh r0, [r7]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	bl StartItemHelpBox
	movs r0, #1
	strh r0, [r4, #0x36]
	b _0809FA7A
	.align 2, 0
_0809F708: .4byte gKeyStatusPtr
_0809F70C: .4byte gUnknown_02012F56
_0809F710: .4byte gUnknown_020122D4
_0809F714:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _0809F794
	ldr r0, _0809F73C  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	bne _0809F744
_0809F724:
	ldr r0, _0809F740  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0809F732
	b _0809FA7A
_0809F732:
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0809FA7A
	.align 2, 0
_0809F73C: .4byte gUnknown_02012F56
_0809F740: .4byte gUnknown_0202BCF0
_0809F744:
	ldr r0, _0809F76C  @ gUnknown_020122D4
	mov r2, r9
	lsls r1, r2, #2
	adds r1, r1, r0
	ldrb r0, [r1]
	cmp r0, #0
	bne _0809F770
	lsls r2, r2, #4
	ldrh r0, [r7]
	subs r0, #0x28
	subs r2, r2, r0
	movs r0, #0
	movs r1, #0x80
	movs r3, #2
	bl sub_80AC9D4
	adds r0, r4, #0
	movs r1, #7
	b _0809F774
	.align 2, 0
_0809F76C: .4byte gUnknown_020122D4
_0809F770:
	adds r0, r4, #0
	movs r1, #6
_0809F774:
	bl Proc_GotoLabel
	ldr r0, _0809F790  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0809F786
	b _0809FA7A
_0809F786:
	movs r0, #0x6a
	bl m4aSongNumStart
	b _0809FA7A
	.align 2, 0
_0809F790: .4byte gUnknown_0202BCF0
_0809F794:
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _0809F7E0
	adds r0, r4, #0
	movs r1, #8
	bl Proc_GotoLabel
	ldr r0, _0809F7BC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809F7B6
	movs r0, #0x6b
	bl m4aSongNumStart
_0809F7B6:
	mov r0, sl
	strh r0, [r4, #0x36]
	b _0809FA7A
	.align 2, 0
_0809F7BC: .4byte gUnknown_0202BCF0
_0809F7C0:
	ldr r2, _0809F7DC  @ gKeyStatusPtr
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	mov r8, r2
	cmp r0, #0
	beq _0809F7E0
	bl CloseHelpBox
	mov r1, sl
	strh r1, [r4, #0x36]
	b _0809FA7A
	.align 2, 0
_0809F7DC: .4byte gKeyStatusPtr
_0809F7E0:
	mov r0, r8
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0809F828
	movs r0, #0
	bl sub_80ACDA4
	ldr r0, _0809F824  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809F80A
	movs r0, #0x67
	bl m4aSongNumStart
_0809F80A:
	adds r0, r4, #0
	movs r1, #3
	bl Proc_GotoLabel
	adds r1, r4, #0
	adds r1, #0x32
	movs r0, #0
	strb r0, [r1]
	adds r0, r4, #0
	bl sub_809F218
	b _0809FA7A
	.align 2, 0
_0809F824: .4byte gUnknown_0202BCF0
_0809F828:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0809F864
	movs r0, #1
	bl sub_80ACDA4
	ldr r0, _0809F860  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809F848
	movs r0, #0x67
	bl m4aSongNumStart
_0809F848:
	adds r0, r4, #0
	movs r1, #4
	bl Proc_GotoLabel
	adds r0, r4, #0
	adds r0, #0x32
	strb r5, [r0]
	adds r0, r4, #0
	bl sub_809F2C4
	b _0809FA7A
	.align 2, 0
_0809F860: .4byte gUnknown_0202BCF0
_0809F864:
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0809F878
	adds r1, r4, #0
	adds r1, #0x31
	movs r0, #8
	b _0809F87E
_0809F878:
	adds r1, r4, #0
	adds r1, #0x31
	movs r0, #4
_0809F87E:
	strb r0, [r1]
	adds r7, r1, #0
	mov r1, r8
	ldr r2, [r1]
	ldrh r1, [r2, #6]
	movs r3, #0x40
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne _0809F8AC
	ldrh r1, [r2, #4]
	adds r0, r3, #0
	ands r0, r1
	adds r6, r4, #0
	adds r6, #0x33
	adds r5, r4, #0
	adds r5, #0x38
	cmp r0, #0
	beq _0809F8C8
	movs r0, #0
	ldrsb r0, [r7, r0]
	cmp r0, #8
	bne _0809F8C8
_0809F8AC:
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r2, r4, #0
	adds r2, #0x38
	adds r3, r2, r1
	ldrh r1, [r3]
	adds r6, r0, #0
	adds r5, r2, #0
	cmp r1, #0
	beq _0809F8C8
	subs r0, r1, #1
	strh r0, [r3]
_0809F8C8:
	mov r0, r8
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r3, #0x80
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne _0809F8EA
	ldrh r1, [r2, #4]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _0809F966
	movs r0, #0
	ldrsb r0, [r7, r0]
	cmp r0, #8
	bne _0809F966
_0809F8EA:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r2, r5, r0
	ldrh r1, [r2]
	ldr r0, _0809F904  @ gUnknown_02012F56
	ldrh r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _0809F966
	adds r0, r1, #1
	strh r0, [r2]
	b _0809F966
	.align 2, 0
_0809F904: .4byte gUnknown_02012F56
_0809F908:
	mov r1, r9
	lsls r0, r1, #4
	ldrh r2, [r7]
	adds r1, r2, #0
	subs r1, #0x28
	subs r0, r0, r1
	cmp r0, #0x37
	bgt _0809F926
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r2, r0
	strh r0, [r7]
_0809F926:
	ldrb r0, [r6]
	lsls r0, r0, #1
	mov r2, r8
	adds r1, r2, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r3, r5, r0
	ldrh r2, [r3]
	adds r0, r2, #0
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x78
	ble _0809F94E
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, r2, r0
	strh r0, [r3]
_0809F94E:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	mov r5, r8
_0809F966:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r0, [r0]
	cmp r9, r0
	bne _0809F974
	b _0809FA7A
_0809F974:
	ldr r7, _0809F9F0  @ gUnknown_020122D4
	lsls r0, r0, #2
	adds r0, r0, r7
	ldrh r0, [r0, #2]
	mov r8, r0
	ldr r0, _0809F9F4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809F990
	movs r0, #0x66
	bl m4aSongNumStart
_0809F990:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r1, [r0]
	lsls r1, r1, #2
	adds r1, r1, r7
	mov r2, r9
	lsls r0, r2, #2
	adds r0, r0, r7
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	beq _0809F9B0
	adds r0, r4, #0
	bl sub_809EC38
_0809F9B0:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r3, [r1]
	lsls r2, r3, #4
	adds r1, r4, #0
	adds r1, #0x4a
	adds r0, r1, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r2, r2, r0
	adds r7, r1, #0
	cmp r2, #0x37
	bgt _0809F9F8
	cmp r3, #0
	beq _0809F9F8
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq _0809F9E2
	adds r1, r2, #0
	adds r1, #0x10
	movs r0, #0x80
	mov r2, r8
	bl StartItemHelpBox
_0809F9E2:
	adds r0, r4, #0
	adds r0, #0x31
	movs r1, #0
	ldrsb r1, [r0, r1]
	negs r1, r1
	b _0809FA30
	.align 2, 0
_0809F9F0: .4byte gUnknown_020122D4
_0809F9F4: .4byte gUnknown_0202BCF0
_0809F9F8:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r2, [r1]
	lsls r1, r2, #4
	adds r0, r7, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x78
	ble _0809FA3C
	ldr r0, _0809FA38  @ gUnknown_02012F56
	ldrh r0, [r0]
	subs r0, #1
	cmp r2, r0
	beq _0809FA3C
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq _0809FA28
	subs r1, #0x10
	movs r0, #0x80
	mov r2, r8
	bl StartItemHelpBox
_0809FA28:
	adds r0, r4, #0
	adds r0, #0x31
	movs r1, #0
	ldrsb r1, [r0, r1]
_0809FA30:
	adds r0, r4, #0
	bl sub_809F3F4
	b _0809FA7A
	.align 2, 0
_0809FA38: .4byte gUnknown_02012F56
_0809FA3C:
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq _0809FA5C
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r7, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	mov r2, r8
	bl StartItemHelpBox
_0809FA5C:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r7, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl sub_80AD51C
_0809FA7A:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809FA88
sub_809FA88: @ 0x0809FA88
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r1, r0, #0
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	mov ip, r0
	adds r5, r1, #0
	cmp r5, #5
	bne _0809FAA6
	movs r5, #4
	b _0809FAAE
_0809FAA6:
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq _0809FAAE
	subs r5, #1
_0809FAAE:
	cmp r1, #0
	beq _0809FB2C
	ldr r2, _0809FAD4  @ gKeyStatusPtr
	ldr r6, [r2]
	ldrh r1, [r6, #6]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	adds r3, r4, #0
	adds r3, #0x30
	cmp r0, #0
	beq _0809FAE4
	ldrb r0, [r3]
	cmp r0, #0
	beq _0809FAD8
	subs r0, #1
	strb r0, [r3]
	b _0809FAE4
	.align 2, 0
_0809FAD4: .4byte gKeyStatusPtr
_0809FAD8:
	ldrh r1, [r6, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _0809FAE4
	strb r5, [r3]
_0809FAE4:
	ldr r2, [r2]
	ldrh r1, [r2, #6]
	movs r4, #0x80
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _0809FB0A
	ldrb r0, [r3]
	cmp r0, r5
	bge _0809FAFC
	adds r0, #1
	b _0809FB08
_0809FAFC:
	ldrh r1, [r2, #8]
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _0809FB0A
	movs r0, #0
_0809FB08:
	strb r0, [r3]
_0809FB0A:
	ldrb r3, [r3]
	cmp ip, r3
	beq _0809FB2C
	ldr r0, _0809FB28  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809FB22
	movs r0, #0x66
	bl m4aSongNumStart
_0809FB22:
	movs r0, #1
	b _0809FB2E
	.align 2, 0
_0809FB28: .4byte gUnknown_0202BCF0
_0809FB2C:
	movs r0, #0
_0809FB2E:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_809FB34
sub_809FB34: @ 0x0809FB34
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r1, r0, #0
	cmp r1, #5
	bne _0809FB50
	adds r1, r4, #0
	adds r1, #0x30
	movs r0, #4
	strb r0, [r1]
	adds r0, r1, #0
	b _0809FB56
_0809FB50:
	adds r0, r4, #0
	adds r0, #0x30
	strb r1, [r0]
_0809FB56:
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_80AD51C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809FB70
sub_809FB70: @ 0x0809FB70
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r7, r6, #0
	adds r7, #0x33
	ldrb r1, [r7]
	lsls r1, r1, #1
	adds r0, #0x38
	adds r0, r0, r1
	ldrh r4, [r0]
	ldr r1, [r6, #0x2c]
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r5, [r1]
	ldr r0, _0809FC0C  @ gUnknown_020122D4
	lsls r4, r4, #2
	adds r4, r4, r0
	ldrh r0, [r4, #2]
	strh r0, [r1]
	ldr r0, [r6, #0x2c]
	bl UnitRemoveInvalidItems
	strh r5, [r4, #2]
	bl sub_80982B8
	cmp r5, #0
	bne _0809FBB6
	ldr r0, [r6, #0x2c]
	ldrb r1, [r7]
	movs r2, #3
	bl SomethingPrepListRelated
_0809FBB6:
	adds r0, r6, #0
	bl sub_809F370
	ldr r0, _0809FC10  @ gUnknown_02022EEC
	ldr r4, _0809FC14  @ gUnknown_02013670
	ldr r2, [r6, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl sub_809B74C
	adds r4, #0x28
	ldr r1, _0809FC18  @ gUnknown_02023CC6
	ldrb r2, [r7]
	lsls r2, r2, #1
	adds r0, r6, #0
	adds r0, #0x4a
	adds r0, r0, r2
	ldrh r2, [r0]
	lsrs r2, r2, #4
	ldr r3, [r6, #0x2c]
	adds r0, r4, #0
	bl sub_809D300
	ldr r0, _0809FC1C  @ sub_809EC38
	movs r1, #1
	adds r2, r6, #0
	bl sub_80ACE20
	movs r0, #4
	bl BG_EnableSyncByMask
	ldr r0, _0809FC20  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809FC06
	movs r0, #0x6a
	bl m4aSongNumStart
_0809FC06:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809FC0C: .4byte gUnknown_020122D4
_0809FC10: .4byte gUnknown_02022EEC
_0809FC14: .4byte gUnknown_02013670
_0809FC18: .4byte gUnknown_02023CC6
_0809FC1C: .4byte sub_809EC38
_0809FC20: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_809FC24
sub_809FC24: @ 0x0809FC24
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x36]
	cmp r0, #1
	bne _0809FC4C
	ldr r0, _0809FC48  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809FD0C
	bl CloseHelpBox
	movs r0, #0
	strh r0, [r5, #0x36]
	b _0809FD4E
	.align 2, 0
_0809FC48: .4byte gKeyStatusPtr
_0809FC4C:
	ldr r0, _0809FC80  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809FC84
	ldr r0, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x30
	ldrb r3, [r1]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _0809FD4E
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl StartItemHelpBox
	movs r0, #1
	strh r0, [r5, #0x36]
	b _0809FD4E
	.align 2, 0
_0809FC80: .4byte gKeyStatusPtr
_0809FC84:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0809FCE0
	ldr r0, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x30
	ldrb r1, [r1]
	ldr r4, _0809FCC4  @ gUnknown_020122D4
	adds r2, r5, #0
	adds r2, #0x33
	ldrb r3, [r2]
	lsls r3, r3, #1
	adds r2, #5
	adds r2, r2, r3
	ldrh r2, [r2]
	lsls r2, r2, #2
	adds r2, r2, r4
	ldrh r2, [r2, #2]
	bl sub_8097F44
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0809FCCC
	movs r1, #1
	negs r1, r1
	ldr r2, _0809FCC8  @ 0x0000088B
	adds r0, r1, #0
	adds r3, r5, #0
	bl sub_8097DA8
	b _0809FD4E
	.align 2, 0
_0809FCC4: .4byte gUnknown_020122D4
_0809FCC8: .4byte 0x0000088B
_0809FCCC:
	movs r0, #0
	bl sub_80ACA84
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	adds r0, r5, #0
	bl sub_809FB70
	b _0809FD4E
_0809FCE0:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0809FD0C
	movs r0, #0
	bl sub_80ACA84
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	ldr r0, _0809FD08  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809FD4E
	movs r0, #0x6b
	bl m4aSongNumStart
	b _0809FD4E
	.align 2, 0
_0809FD08: .4byte gUnknown_0202BCF0
_0809FD0C:
	adds r0, r5, #0
	bl sub_809FA88
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0809FD4E
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r1, [r4]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl sub_80AD51C
	ldrh r0, [r5, #0x36]
	cmp r0, #1
	bne _0809FD4E
	ldr r0, [r5, #0x2c]
	ldrb r3, [r4]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _0809FD4E
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl StartItemHelpBox
_0809FD4E:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_809FD54
sub_809FD54: @ 0x0809FD54
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r0, #0x33
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r0, #5
	adds r0, r0, r1
	ldrh r4, [r0]
	lsls r4, r4, #2
	ldr r0, _0809FD84  @ gUnknown_020122D4
	adds r4, r4, r0
	ldr r6, [r5, #0x2c]
	ldrb r0, [r4]
	bl GetUnitFromCharId
	adds r1, r0, #0
	ldrb r2, [r4, #1]
	adds r0, r6, #0
	adds r3, r5, #0
	bl sub_809BE60
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809FD84: .4byte gUnknown_020122D4

	THUMB_FUNC_START sub_809FD88
sub_809FD88: @ 0x0809FD88
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809FD9C  @ gUnknown_08A19424
	bl Proc_CreateBlockingChild
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809FD9C: .4byte gUnknown_08A19424

	THUMB_FUNC_START sub_809FDA0
sub_809FDA0: @ 0x0809FDA0
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, _0809FDCC  @ 0x0000DF80
	movs r5, #0x30
	movs r4, #3
_0809FDAA:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x10
	ldr r3, _0809FDD0  @ gUnknown_08590F8C
	bl RegisterObjectAttributes
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _0809FDAA
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809FDCC: .4byte 0x0000DF80
_0809FDD0: .4byte gUnknown_08590F8C

	THUMB_FUNC_START sub_809FDD4
sub_809FDD4: @ 0x0809FDD4
	push {r4, r5, lr}
	sub sp, #0xc
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _0809FE10  @ sub_809FDA0
	bl Get6CDifferedLoop6C
	ldr r0, _0809FE14  @ gUnknown_08A1951C
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r0, [r4]
	ldr r1, _0809FE18  @ gUnknown_08A19524
	ldr r1, [r1]
	bl GetStringFromIndexInBuffer
	adds r2, r0, #0
	movs r0, #0xe0
	lsls r0, r0, #7
	movs r1, #1
	str r1, [sp]
	str r1, [sp, #4]
	str r5, [sp, #8]
	movs r1, #0xd
	movs r3, #1
	bl sub_80ADD24
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809FE10: .4byte sub_809FDA0
_0809FE14: .4byte gUnknown_08A1951C
_0809FE18: .4byte gUnknown_08A19524

	THUMB_FUNC_START sub_809FE1C
sub_809FE1C: @ 0x0809FE1C
	push {lr}
	ldr r0, _0809FE4C  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls _0809FE2E
	movs r2, #0
_0809FE2E:
	cmp r2, #0xc
	bne _0809FE38
	ldr r1, _0809FE50  @ 0x04000050
	movs r0, #0xc8
	strh r0, [r1]
_0809FE38:
	cmp r2, #0x34
	beq _0809FE40
	cmp r2, #0
	bne _0809FE48
_0809FE40:
	ldr r1, _0809FE50  @ 0x04000050
	ldr r2, _0809FE54  @ 0x00000242
	adds r0, r2, #0
	strh r0, [r1]
_0809FE48:
	pop {r0}
	bx r0
	.align 2, 0
_0809FE4C: .4byte 0x04000006
_0809FE50: .4byte 0x04000050
_0809FE54: .4byte 0x00000242

	THUMB_FUNC_START sub_809FE58
sub_809FE58: @ 0x0809FE58
	movs r2, #0
	movs r1, #0
	strh r1, [r0, #0x34]
	movs r1, #0xff
	strh r1, [r0, #0x32]
	adds r0, #0x30
	strb r2, [r0]
	bx lr

	THUMB_FUNC_START sub_809FE68
sub_809FE68: @ 0x0809FE68
	push {r4, r5, lr}
	ldr r4, _0809FEE4  @ gUnknown_02013648
	ldr r1, _0809FEE8  @ 0x06011000
	adds r0, r4, #0
	movs r2, #0xb
	bl InitSomeOtherGraphicsRelatedStruct
	ldr r0, _0809FEEC  @ gUnknown_0859EF00
	movs r1, #0xd8
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	adds r5, r4, #0
	adds r5, #0x90
	adds r0, r5, #0
	bl Text_Init3
	adds r0, r4, #0
	bl SetFont
	movs r0, #0
	bl SetFontGlyphSet
	adds r0, r5, #0
	movs r1, #0
	bl Text_80046B4
	ldr r0, _0809FEF0  @ 0x0000059C
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertString
	ldr r0, _0809FEF4  @ 0x0000059B
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x40
	movs r2, #0
	bl Text_InsertString
	ldr r0, _0809FEF8  @ 0x0000059D
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x80
	movs r2, #3
	bl Text_InsertString
	movs r0, #0
	bl SetFont
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809FEE4: .4byte gUnknown_02013648
_0809FEE8: .4byte 0x06011000
_0809FEEC: .4byte gUnknown_0859EF00
_0809FEF0: .4byte 0x0000059C
_0809FEF4: .4byte 0x0000059B
_0809FEF8: .4byte 0x0000059D

	THUMB_FUNC_START sub_809FEFC
sub_809FEFC: @ 0x0809FEFC
	push {r4, lr}
	sub sp, #4
	ldr r0, _0809FF5C  @ 0x00008840
	str r0, [sp]
	movs r0, #0xa0
	movs r1, #0x5b
	movs r2, #8
	movs r3, #4
	bl sub_809A31C
	ldr r4, _0809FF60  @ gUnknown_08590F8C
	ldr r0, _0809FF64  @ 0x0000B088
	str r0, [sp]
	movs r0, #4
	movs r1, #0xb0
	movs r2, #0x5e
	adds r3, r4, #0
	bl RegisterObjectAttributes
	ldr r0, _0809FF68  @ 0x0000B08C
	str r0, [sp]
	movs r0, #4
	movs r1, #0xd0
	movs r2, #0x5e
	adds r3, r4, #0
	bl RegisterObjectAttributes
	ldr r0, _0809FF6C  @ 0x0000B080
	str r0, [sp]
	movs r0, #4
	movs r1, #0xa8
	movs r2, #0x6e
	adds r3, r4, #0
	bl RegisterObjectAttributes
	ldr r0, _0809FF70  @ 0x0000B084
	str r0, [sp]
	movs r0, #4
	movs r1, #0xc8
	movs r2, #0x6e
	adds r3, r4, #0
	bl RegisterObjectAttributes
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809FF5C: .4byte 0x00008840
_0809FF60: .4byte gUnknown_08590F8C
_0809FF64: .4byte 0x0000B088
_0809FF68: .4byte 0x0000B08C
_0809FF6C: .4byte 0x0000B080
_0809FF70: .4byte 0x0000B084

	THUMB_FUNC_START sub_809FF74
sub_809FF74: @ 0x0809FF74
	push {lr}
	sub sp, #4
	ldr r3, _0809FFA0  @ gUnknown_08590F8C
	ldr r0, _0809FFA4  @ 0x0000B090
	str r0, [sp]
	movs r0, #4
	movs r1, #0x88
	movs r2, #0x48
	bl RegisterObjectAttributes
	ldr r3, _0809FFA8  @ gUnknown_08590F64
	ldr r0, _0809FFAC  @ 0x0000B094
	str r0, [sp]
	movs r0, #4
	movs r1, #0xa8
	movs r2, #0x48
	bl RegisterObjectAttributes
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0809FFA0: .4byte gUnknown_08590F8C
_0809FFA4: .4byte 0x0000B090
_0809FFA8: .4byte gUnknown_08590F64
_0809FFAC: .4byte 0x0000B094

	THUMB_FUNC_START sub_809FFB0
sub_809FFB0: @ 0x0809FFB0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r6, _080A0008  @ gUnknown_02022F10
	adds r0, r6, #0
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	cmp r4, #0
	beq _080A0022
	adds r0, r4, #0
	bl sub_80B5268
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0809FFE2
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _080A000C
_0809FFE2:
	adds r0, r6, #0
	adds r0, #0xa
	movs r1, #1
	movs r2, #0x14
	bl sub_8004B0C
	adds r0, r6, #0
	adds r0, #0xc
	movs r1, #1
	movs r2, #0x14
	bl sub_8004B0C
	adds r0, r6, #0
	adds r0, #0xe
	movs r1, #1
	movs r2, #0x14
	bl sub_8004B0C
	b _080A0018
	.align 2, 0
_080A0008: .4byte gUnknown_02022F10
_080A000C:
	adds r0, r6, #0
	adds r0, #0xc
	movs r1, #2
	adds r2, r5, #0
	bl sub_8004B88
_080A0018:
	ldr r0, _080A0030  @ gUnknown_02022F1E
	movs r1, #3
	movs r2, #0x1e
	bl sub_8004B0C
_080A0022:
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A0030: .4byte gUnknown_02022F1E

	THUMB_FUNC_START sub_80A0034
sub_80A0034: @ 0x080A0034
	push {r4, r5, lr}
	ldr r4, _080A0074  @ gUnknown_02022E90
	adds r0, r4, #0
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #0xa3
	lsls r0, r0, #2
	adds r5, r4, r0
	bl GetPartyGoldAmount
	adds r2, r0, #0
	adds r0, r5, #0
	movs r1, #2
	bl sub_8004B88
	ldr r0, _080A0078  @ 0x0000028E
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x1e
	bl sub_8004B0C
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A0074: .4byte gUnknown_02022E90
_080A0078: .4byte 0x0000028E

	THUMB_FUNC_START sub_80A007C
sub_80A007C: @ 0x080A007C
	push {r4, lr}
	sub sp, #8
	movs r0, #0
	bl SetFont
	ldr r4, _080A00D4  @ gUnknown_02022D10
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #0xb3
	lsls r0, r0, #3
	bl GetStringFromIndex
	ldr r3, _080A00D8  @ gUnknown_02013660
	adds r1, r4, #0
	adds r1, #0xda
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r3, #0
	movs r3, #2
	bl DrawTextInline
	subs r4, #0x26
	movs r2, #0x9c
	lsls r2, r2, #2
	movs r0, #1
	str r0, [sp]
	movs r0, #0xab
	adds r1, r4, #0
	movs r3, #2
	bl sub_8005988
	movs r0, #1
	bl BG_EnableSyncByMask
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A00D4: .4byte gUnknown_02022D10
_080A00D8: .4byte gUnknown_02013660

	THUMB_FUNC_START sub_80A00DC
sub_80A00DC: @ 0x080A00DC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r5, _080A0300  @ gLCDControlBuffer
	ldrb r1, [r5]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r5]
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #1
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #2
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	ldrb r2, [r5, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r5, #0xc]
	ldrb r2, [r5, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	mov r9, r2
	mov r2, r9
	orrs r0, r2
	strb r0, [r5, #0x10]
	ldrb r0, [r5, #0x14]
	ands r1, r0
	strb r1, [r5, #0x14]
	ldrb r0, [r5, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r5, #0x18]
	bl ResetFaces
	bl Font_InitForUIDefault
	bl ResetIconGraphics_
	bl LoadUiFrameGraphics
	bl LoadObjUIGfx
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r0, _080A0304  @ 0x06014000
	movs r1, #1
	negs r1, r1
	bl LoadDialogueBoxGfx
	movs r0, #4
	bl LoadIconPalettes
	bl sub_8095A1C
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_8098C3C
	movs r0, #0x80
	lsls r0, r0, #4
	movs r1, #8
	bl sub_8098C8C
	ldr r0, _080A0308  @ gUnknown_08A1BBD0
	ldr r4, _080A030C  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080A0310  @ gBG1TilemapBuffer
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl CallARM_FillTileRect
	movs r0, #7
	bl BG_EnableSyncByMask
	ldr r0, [r7, #0x2c]
	bl GetUnitPortraitId
	adds r1, r0, #0
	ldr r0, _080A0314  @ 0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x44
	movs r3, #0x48
	bl sub_80064F4
	adds r0, r7, #0
	bl sub_80AC9C0
	adds r0, r7, #0
	bl sub_80AD47C
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_80AD4A0
	ldrb r0, [r5, #1]
	movs r6, #0x20
	orrs r0, r6
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	adds r1, r5, #0
	adds r1, #0x2d
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	movs r0, #0x34
	adds r0, r0, r5
	mov r8, r0
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	mov r0, r9
	orrs r1, r0
	movs r0, #4
	orrs r1, r0
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	adds r5, #0x36
	ldrb r0, [r5]
	orrs r0, r2
	mov r2, r9
	orrs r0, r2
	movs r2, #5
	negs r2, r2
	ands r0, r2
	orrs r0, r4
	orrs r0, r3
	orrs r1, r6
	mov r2, r8
	strb r1, [r2]
	orrs r0, r6
	strb r0, [r5]
	movs r0, #0
	movs r1, #8
	movs r2, #8
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	adds r0, r7, #0
	bl NewGreenTextColorManager
	movs r0, #0x78
	movs r1, #0x8c
	movs r2, #2
	adds r3, r7, #0
	bl StartHelpPromptSprite
	movs r0, #0xa5
	movs r1, #0x80
	movs r2, #0xa
	adds r3, r7, #0
	bl sub_80984A8
	movs r0, #0xa5
	movs r1, #0x80
	bl sub_80984CC
	ldr r4, _080A0318  @ gUnknown_02013660
	adds r0, r4, #0
	movs r1, #4
	bl Text_Init
	adds r0, r4, #0
	adds r0, #8
	movs r1, #2
	bl Text_Init
	bl sub_809FE68
	adds r4, #0x10
	movs r5, #4
_080A029E:
	adds r0, r4, #0
	movs r1, #7
	bl Text_Init
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _080A029E
	movs r0, #0
	bl SetPrimaryHBlankHandler
	ldr r0, _080A031C  @ sub_809FE1C
	bl SetPrimaryHBlankHandler
	movs r0, #4
	bl BG_EnableSyncByMask
	ldr r0, _080A0320  @ gUnknown_02022EEC
	ldr r1, _080A0324  @ gUnknown_02013670
	ldr r2, [r7, #0x2c]
	movs r3, #0
	bl sub_809B74C
	bl sub_80A007C
	ldr r0, _080A0328  @ sub_809FF74
	adds r1, r7, #0
	bl Get6CDifferedLoop6C
	ldr r1, [r7, #0x2c]
	adds r0, r7, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl sub_809FFB0
	bl sub_80A0034
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A0300: .4byte gLCDControlBuffer
_080A0304: .4byte 0x06014000
_080A0308: .4byte gUnknown_08A1BBD0
_080A030C: .4byte gUnknown_02020188
_080A0310: .4byte gBG1TilemapBuffer
_080A0314: .4byte 0x00000503
_080A0318: .4byte gUnknown_02013660
_080A031C: .4byte sub_809FE1C
_080A0320: .4byte gUnknown_02022EEC
_080A0324: .4byte gUnknown_02013670
_080A0328: .4byte sub_809FF74

	THUMB_FUNC_START sub_80A032C
sub_80A032C: @ 0x080A032C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r6, _080A035C  @ gKeyStatusPtr
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _080A0372
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r3, r0, #0
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r0, [r2]
	cmp r0, #0
	beq _080A0360
	subs r0, #1
	strb r0, [r2]
	b _080A03A2
	.align 2, 0
_080A035C: .4byte gKeyStatusPtr
_080A0360:
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080A03BC
	subs r0, r3, #1
	strb r0, [r2]
	b _080A03A2
_080A0372:
	movs r7, #0x80
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080A03BC
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r1, [r2]
	subs r0, #1
	cmp r1, r0
	bge _080A0394
	adds r0, r1, #1
	strb r0, [r2]
	b _080A03A2
_080A0394:
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080A03BC
	strb r5, [r2]
_080A03A2:
	ldr r0, _080A03B8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A03B4
	movs r0, #0x66
	bl m4aSongNumStart
_080A03B4:
	movs r0, #1
	b _080A03BE
	.align 2, 0
_080A03B8: .4byte gUnknown_0202BCF0
_080A03BC:
	movs r0, #0
_080A03BE:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A03C4
sub_80A03C4: @ 0x080A03C4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080A0418  @ gUnknown_02022EEC
	ldr r1, _080A041C  @ gUnknown_02013670
	ldr r2, [r4, #0x2c]
	movs r3, #0
	bl sub_809B74C
	ldr r1, [r4, #0x2c]
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl sub_809FFB0
	movs r0, #0
	bl sub_80ACA84
	ldr r0, _080A0420  @ sub_809FEFC
	bl Find6CDifferedLoop
	bl Proc_Delete
	ldrb r1, [r5]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x10
	movs r2, #0xb
	bl sub_80AD51C
	movs r0, #0
	adds r1, r4, #0
	bl sub_809FDD4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A0418: .4byte gUnknown_02022EEC
_080A041C: .4byte gUnknown_02013670
_080A0420: .4byte sub_809FEFC

	THUMB_FUNC_START sub_80A0424
sub_80A0424: @ 0x080A0424
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x34]
	cmp r0, #1
	bne _080A044C
	ldr r0, _080A0448  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A0518
	bl CloseHelpBox
	movs r0, #0
	strh r0, [r4, #0x34]
	b _080A056A
	.align 2, 0
_080A0448: .4byte gKeyStatusPtr
_080A044C:
	ldr r0, _080A0484  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A0488
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r3, [r1]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	bne _080A0472
	b _080A056A
_080A0472:
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl StartItemHelpBox
	movs r0, #1
	strh r0, [r4, #0x34]
	b _080A056A
	.align 2, 0
_080A0484: .4byte gKeyStatusPtr
_080A0488:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A04F0
	ldr r1, [r4, #0x2c]
	adds r6, r4, #0
	adds r6, #0x30
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r5, [r1]
	adds r0, r5, #0
	bl sub_80B5268
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080A04BA
	adds r0, r5, #0
	bl GetItemAttributes
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _080A04CE
_080A04BA:
	ldrb r1, [r6]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r2, #0x85
	lsls r2, r2, #4
	movs r0, #0x10
	adds r3, r4, #0
	bl sub_8097DA8
	b _080A056A
_080A04CE:
	adds r0, r4, #0
	movs r1, #2
	bl Proc_GotoLabel
	ldr r0, _080A04EC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A056A
	movs r0, #0x6a
	bl m4aSongNumStart
	b _080A056A
	.align 2, 0
_080A04EC: .4byte gUnknown_0202BCF0
_080A04F0:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080A0518
	adds r0, r4, #0
	movs r1, #3
	bl Proc_GotoLabel
	ldr r0, _080A0514  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A056A
	movs r0, #0x6b
	bl m4aSongNumStart
	b _080A056A
	.align 2, 0
_080A0514: .4byte gUnknown_0202BCF0
_080A0518:
	adds r0, r4, #0
	bl sub_80A032C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A056A
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r1, [r5]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x10
	movs r2, #0xb
	bl sub_80AD51C
	ldr r1, [r4, #0x2c]
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl sub_809FFB0
	ldrh r0, [r4, #0x34]
	cmp r0, #1
	bne _080A056A
	ldr r0, [r4, #0x2c]
	ldrb r3, [r5]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq _080A056A
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl StartItemHelpBox
_080A056A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A0570
sub_80A0570: @ 0x080A0570
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x31
	movs r0, #1
	strb r0, [r5]
	ldr r0, _080A05B8  @ sub_809FEFC
	adds r1, r4, #0
	bl Get6CDifferedLoop6C
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r2, [r0]
	lsls r2, r2, #4
	adds r2, #0x48
	movs r0, #0
	movs r1, #0x10
	movs r3, #2
	bl sub_80AC9D4
	ldrb r0, [r5]
	lsls r0, r0, #5
	adds r0, #0xa4
	movs r3, #0x80
	lsls r3, r3, #3
	movs r1, #0x6f
	movs r2, #0
	bl sub_80AD51C
	movs r0, #1
	adds r1, r4, #0
	bl sub_809FDD4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A05B8: .4byte sub_809FEFC

	THUMB_FUNC_START sub_80A05BC
sub_80A05BC: @ 0x080A05BC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x2c]
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl sub_80B5268
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_8024E20
	ldr r1, [r4, #0x2c]
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	movs r0, #0
	strh r0, [r1]
	ldr r0, [r4, #0x2c]
	bl UnitRemoveInvalidItems
	ldr r0, _080A0628  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A0602
	movs r0, #0xb9
	bl m4aSongNumStart
_080A0602:
	bl sub_80A0034
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	bne _080A0634
	ldr r0, _080A062C  @ gUnknown_02022EEC
	ldr r1, _080A0630  @ gUnknown_02013670
	ldr r2, [r4, #0x2c]
	movs r3, #0
	bl sub_809B74C
	adds r0, r4, #0
	movs r1, #3
	bl Proc_GotoLabel
	b _080A0646
	.align 2, 0
_080A0628: .4byte gUnknown_0202BCF0
_080A062C: .4byte gUnknown_02022EEC
_080A0630: .4byte gUnknown_02013670
_080A0634:
	ldrb r1, [r5]
	cmp r0, r1
	bne _080A063E
	subs r0, #1
	strb r0, [r5]
_080A063E:
	adds r0, r4, #0
	movs r1, #1
	bl Proc_GotoLabel
_080A0646:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A064C
sub_80A064C: @ 0x080A064C
	push {r4, r5, r6, lr}
	adds r1, r0, #0
	adds r4, r1, #0
	adds r4, #0x31
	ldrb r5, [r4]
	ldr r6, _080A0670  @ gKeyStatusPtr
	ldr r3, [r6]
	ldrh r2, [r3, #8]
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _080A0674
	cmp r5, #0
	bne _080A0680
	adds r0, r1, #0
	bl sub_80A05BC
	b _080A06E6
	.align 2, 0
_080A0670: .4byte gKeyStatusPtr
_080A0674:
	movs r0, #2
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq _080A06A0
_080A0680:
	adds r0, r1, #0
	movs r1, #1
	bl Proc_GotoLabel
	ldr r0, _080A069C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A06E6
	movs r0, #0x6b
	bl m4aSongNumStart
	b _080A06E6
	.align 2, 0
_080A069C: .4byte gUnknown_0202BCF0
_080A06A0:
	ldrh r1, [r3, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080A06AC
	strb r2, [r4]
_080A06AC:
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080A06BC
	movs r0, #1
	strb r0, [r4]
_080A06BC:
	ldrb r0, [r4]
	cmp r5, r0
	beq _080A06E6
	ldr r0, _080A06EC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A06D4
	movs r0, #0x67
	bl m4aSongNumStart
_080A06D4:
	ldrb r0, [r4]
	lsls r0, r0, #5
	adds r0, #0xa4
	movs r3, #0x80
	lsls r3, r3, #3
	movs r1, #0x6f
	movs r2, #0
	bl sub_80AD51C
_080A06E6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A06EC: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A06F0
sub_80A06F0: @ 0x080A06F0
	push {lr}
	bl EndBG3Slider_
	movs r0, #0
	bl DeleteFaceByIndex
	movs r0, #0
	bl SetPrimaryHBlankHandler
	bl sub_8098500
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A070C
sub_80A070C: @ 0x080A070C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A0720  @ gUnknown_08A19528
	bl Proc_CreateBlockingChild
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A0720: .4byte gUnknown_08A19528

	THUMB_FUNC_START sub_80A0724
sub_80A0724: @ 0x080A0724
	push {lr}
	sub sp, #0x10
	ldr r0, [r0, #0x2c]
	str r0, [sp]
	ldr r0, _080A0754  @ 0x06011000
	str r0, [sp, #4]
	movs r0, #1
	negs r0, r0
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0xa
	movs r1, #7
	movs r2, #0x11
	movs r3, #4
	bl sub_808F128
	movs r0, #0x7c
	bl sub_808E9D8
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_080A0754: .4byte 0x06011000

	THUMB_FUNC_START sub_80A0758
sub_80A0758: @ 0x080A0758
	bx lr

	THUMB_FUNC_START __malloc_unlock_2
__malloc_unlock_2: @ 0x080A075C
	bx lr

	THUMB_FUNC_START sub_80A0760
sub_80A0760: @ 0x080A0760
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x30
	movs r4, #1
	strb r4, [r0]
	bl sub_80A0A34
	adds r1, r5, #0
	adds r1, #0x31
	strb r0, [r1]
	bl sub_80A0A70
	adds r1, r5, #0
	adds r1, #0x32
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x33
	strb r4, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A078C
sub_80A078C: @ 0x080A078C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	mov r9, r0
	ldr r6, _080A084C  @ gUnknown_02013498
	movs r0, #0
	bl SetFontGlyphSet
	movs r0, #0
	bl SetFont
	ldr r0, _080A0850  @ gUnknown_02022F28
	movs r1, #0x1f
	movs r2, #0xa
	movs r3, #0
	bl TileMap_FillRect
	movs r4, #0
_080A07B4:
	adds r0, r6, #0
	bl Text_Clear
	ldr r1, _080A0854  @ gUnknown_08A196D0
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r5, r6, #0
	adds r6, #8
	asrs r2, r4, #1
	lsls r2, r2, #6
	movs r0, #0xa2
	lsls r0, r0, #1
	adds r2, r2, r0
	movs r1, #1
	ands r1, r4
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #1
	ldr r0, _080A0858  @ gBG0TilemapBuffer
	mov r8, r0
	adds r1, r2, r0
	movs r2, #0
	mov r0, r9
	adds r0, #0x30
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080A07FE
	movs r2, #1
_080A07FE:
	movs r7, #0
	str r7, [sp]
	str r3, [sp, #4]
	adds r0, r5, #0
	movs r3, #0
	bl DrawTextInline
	adds r4, #1
	cmp r4, #3
	ble _080A07B4
	ldr r0, _080A084C  @ gUnknown_02013498
	adds r6, r0, #0
	adds r6, #0xf0
	adds r0, r6, #0
	bl Text_Clear
	ldr r0, _080A085C  @ gUnknown_08A196BC
	ldr r0, [r0, #0xc]
	bl GetStringFromIndex
	mov r1, r8
	adds r1, #0x2c
	str r7, [sp]
	str r0, [sp, #4]
	adds r0, r6, #0
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	movs r0, #1
	bl BG_EnableSyncByMask
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A084C: .4byte gUnknown_02013498
_080A0850: .4byte gUnknown_02022F28
_080A0854: .4byte gUnknown_08A196D0
_080A0858: .4byte gBG0TilemapBuffer
_080A085C: .4byte gUnknown_08A196BC

	THUMB_FUNC_START sub_80A0860
sub_80A0860: @ 0x080A0860
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r3, r5, #0
	adds r3, #0x29
	ldrb r4, [r3]
	ldr r2, _080A08F0  @ gKeyStatusPtr
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080A0884
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	beq _080A0884
	subs r0, r4, #1
	strb r0, [r3]
_080A0884:
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0x10
	ands r0, r1
	adds r3, r5, #0
	adds r3, #0x29
	cmp r0, #0
	beq _080A08A2
	ldrb r1, [r3]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080A08A2
	adds r0, r1, #1
	strb r0, [r3]
_080A08A2:
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080A08BA
	ldrb r1, [r3]
	lsrs r0, r1, #1
	cmp r0, #0
	bne _080A08BA
	adds r0, r1, #2
	strb r0, [r3]
_080A08BA:
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080A08D2
	ldrb r1, [r3]
	lsrs r0, r1, #1
	cmp r0, #0
	beq _080A08D2
	subs r0, r1, #2
	strb r0, [r3]
_080A08D2:
	ldrb r3, [r3]
	cmp r4, r3
	beq _080A08F8
	ldr r0, _080A08F4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A08EA
	movs r0, #0x65
	bl m4aSongNumStart
_080A08EA:
	movs r0, #1
	b _080A08FA
	.align 2, 0
_080A08F0: .4byte gKeyStatusPtr
_080A08F4: .4byte gUnknown_0202BCF0
_080A08F8:
	movs r0, #0
_080A08FA:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A0900
sub_80A0900: @ 0x080A0900
	push {r4, lr}
	adds r4, r0, #0
	bl sub_808F270
	adds r0, r4, #0
	bl sub_80ADDD4
	bl EndBG3Slider_
	movs r0, #0
	bl DeleteFaceByIndex
	movs r0, #0
	bl SetPrimaryHBlankHandler
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A0924
sub_80A0924: @ 0x080A0924
	push {lr}
	adds r1, r0, #0
	adds r1, #0x29
	ldrb r1, [r1]
	cmp r1, #0
	blt _080A093E
	cmp r1, #1
	ble _080A093E
	cmp r1, #2
	bne _080A093E
	movs r1, #4
	bl Proc_GotoLabel
_080A093E:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A0944
sub_80A0944: @ 0x080A0944
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A0958  @ gUnknown_08A1962C
	bl Proc_CreateBlockingChild
	adds r0, #0x29
	strb r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A0958: .4byte gUnknown_08A1962C

	THUMB_FUNC_START sub_80A095C
sub_80A095C: @ 0x080A095C
	push {lr}
	cmp r0, #1
	beq _080A0976
	cmp r0, #1
	bgt _080A096C
	cmp r0, #0
	beq _080A0972
	b _080A0986
_080A096C:
	cmp r0, #2
	beq _080A097C
	b _080A0986
_080A0972:
	movs r0, #1
	b _080A0988
_080A0976:
	bl sub_80A0A34
	b _080A0980
_080A097C:
	bl sub_80A0A70
_080A0980:
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _080A0988
_080A0986:
	movs r0, #0
_080A0988:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A098C
sub_80A098C: @ 0x080A098C
	push {lr}
	ldr r0, _080A09A4  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x7a
	ldrh r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
_080A09A4: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A09A8
sub_80A09A8: @ 0x080A09A8
	push {lr}
	ldr r0, _080A09C0  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x76
	ldrh r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
_080A09C0: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A09C4
sub_80A09C4: @ 0x080A09C4
	push {lr}
	ldr r0, _080A09DC  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x7c
	ldrh r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
_080A09DC: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A09E0
sub_80A09E0: @ 0x080A09E0
	push {lr}
	ldr r0, _080A09F8  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x7f
	ldrb r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
_080A09F8: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A09FC
sub_80A09FC: @ 0x080A09FC
	push {lr}
	ldr r0, _080A0A14  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetROMChapterStruct
	adds r0, #0x7e
	ldrb r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
_080A0A14: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A0A18
sub_80A0A18: @ 0x080A0A18
	push {lr}
	bl sub_80A098C
	cmp r0, #0
	beq _080A0A2E
	bl sub_80A09A8
	cmp r0, #0
	bne _080A0A2E
	movs r0, #1
	b _080A0A30
_080A0A2E:
	movs r0, #0
_080A0A30:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A0A34
sub_80A0A34: @ 0x080A0A34
	push {lr}
	ldr r0, _080A0A50  @ gUnknown_0202BCF0
	ldrb r1, [r0, #0x14]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	bne _080A0A4A
	bl sub_80A098C
	cmp r0, #0
	bne _080A0A54
_080A0A4A:
	movs r0, #0
	b _080A0A56
	.align 2, 0
_080A0A50: .4byte gUnknown_0202BCF0
_080A0A54:
	movs r0, #1
_080A0A56:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A0A5C
sub_80A0A5C: @ 0x080A0A5C
	push {lr}
	bl sub_80A09FC
	cmp r0, #1
	beq _080A0A6A
	movs r0, #0
	b _080A0A6C
_080A0A6A:
	movs r0, #1
_080A0A6C:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A0A70
sub_80A0A70: @ 0x080A0A70
	movs r0, #1
	bx lr

	THUMB_FUNC_START sub_80A0A74
sub_80A0A74: @ 0x080A0A74
	push {lr}
	ldr r0, _080A0A88  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x61
	bgt _080A0A8C
	movs r0, #0
	b _080A0A8E
	.align 2, 0
_080A0A88: .4byte gUnknown_0202BCF0
_080A0A8C:
	movs r0, #1
_080A0A8E:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A0A94
sub_80A0A94: @ 0x080A0A94
	ldr r0, _080A0A9C  @ gUnknown_020136F0
	ldr r0, [r0]
	bx lr
	.align 2, 0
_080A0A9C: .4byte gUnknown_020136F0

	THUMB_FUNC_START sub_80A0AA0
sub_80A0AA0: @ 0x080A0AA0
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A0AB4  @ gUnknown_020136F0
	ldr r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _080A0AB8
	adds r0, r1, #1
	b _080A0ABA
	.align 2, 0
_080A0AB4: .4byte gUnknown_020136F0
_080A0AB8:
	movs r0, #0
_080A0ABA:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A0AC0
sub_80A0AC0: @ 0x080A0AC0
	push {lr}
	cmp r0, #0
	bne _080A0ACA
	ldr r0, _080A0AD0  @ gUnknown_020136F0
	ldr r0, [r0]
_080A0ACA:
	subs r0, #1
	pop {r1}
	bx r1
	.align 2, 0
_080A0AD0: .4byte gUnknown_020136F0

	THUMB_FUNC_START sub_80A0AD4
sub_80A0AD4: @ 0x080A0AD4
	ldr r2, _080A0AE8  @ gUnknown_08A196FC
	ldr r3, [r2]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r2, r2, r3
	adds r2, #2
	adds r2, r2, r1
	ldrb r0, [r2]
	bx lr
	.align 2, 0
_080A0AE8: .4byte gUnknown_08A196FC

	THUMB_FUNC_START sub_80A0AEC
sub_80A0AEC: @ 0x080A0AEC
	ldr r2, _080A0B00  @ gUnknown_08A196FC
	ldr r3, [r2]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r2, r2, r3
	adds r2, #9
	adds r2, r2, r1
	ldrb r0, [r2]
	bx lr
	.align 2, 0
_080A0B00: .4byte gUnknown_08A196FC

	THUMB_FUNC_START sub_80A0B04
sub_80A0B04: @ 0x080A0B04
	ldr r2, _080A0B1C  @ gUnknown_08A196FC
	ldr r3, [r2]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r2, r2, r3
	adds r2, #0x10
	adds r2, r2, r1
	movs r0, #0
	ldrsb r0, [r2, r0]
	bx lr
	.align 2, 0
_080A0B1C: .4byte gUnknown_08A196FC

	THUMB_FUNC_START sub_80A0B20
sub_80A0B20: @ 0x080A0B20
	push {r4, r5, lr}
	adds r5, r1, #0
	ldr r4, _080A0B40  @ gCharacterData
	bl sub_80A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r4, #0x2c
	adds r0, r0, r4
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A0B40: .4byte gCharacterData

	THUMB_FUNC_START sub_80A0B44
sub_80A0B44: @ 0x080A0B44
	ldr r1, _080A0B54  @ gUnknown_08A196FC
	ldr r2, [r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r0, [r1]
	bx lr
	.align 2, 0
_080A0B54: .4byte gUnknown_08A196FC

	THUMB_FUNC_START sub_80A0B58
sub_80A0B58: @ 0x080A0B58
	ldr r1, _080A0B68  @ gUnknown_08A196FC
	ldr r2, [r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r0, [r1, #1]
	bx lr
	.align 2, 0
_080A0B68: .4byte gUnknown_08A196FC

	THUMB_FUNC_START sub_80A0B6C
sub_80A0B6C: @ 0x080A0B6C
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #1
_080A0B72:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _080A0BA0
	ldr r3, [r2]
	cmp r3, #0
	beq _080A0BA0
	ldr r0, [r2, #0xc]
	ldr r1, _080A0B9C  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne _080A0BA0
	ldrb r0, [r3, #4]
	cmp r0, r5
	bne _080A0BA0
	ldr r0, [r2, #4]
	ldrb r0, [r0, #4]
	b _080A0BB2
	.align 2, 0
_080A0B9C: .4byte 0x00010004
_080A0BA0:
	adds r4, #1
	cmp r4, #0x3f
	ble _080A0B72
	ldr r2, _080A0BB8  @ gCharacterData
	subs r1, r5, #1
	movs r0, #0x34
	muls r0, r1, r0
	adds r0, r0, r2
	ldrb r0, [r0, #5]
_080A0BB2:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A0BB8: .4byte gCharacterData

	THUMB_FUNC_START sub_80A0BBC
sub_80A0BBC: @ 0x080A0BBC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80847F8
	adds r1, r0, #0
	ldrh r0, [r1]
	ldr r2, _080A0BE0  @ 0x0000FFFF
	cmp r0, r2
	beq _080A0BEC
_080A0BCE:
	ldrh r0, [r1]
	cmp r0, r4
	beq _080A0BDA
	ldrh r0, [r1, #2]
	cmp r0, r4
	bne _080A0BE4
_080A0BDA:
	movs r0, #1
	b _080A0BEE
	.align 2, 0
_080A0BE0: .4byte 0x0000FFFF
_080A0BE4:
	adds r1, #0x10
	ldrh r0, [r1]
	cmp r0, r2
	bne _080A0BCE
_080A0BEC:
	movs r0, #0
_080A0BEE:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A0BF4
sub_80A0BF4: @ 0x080A0BF4
	push {r4, r5, r6, r7, lr}
	bl sub_80847F8
	adds r6, r0, #0
	ldrh r0, [r6]
	ldr r1, _080A0C3C  @ 0x0000FFFF
	cmp r0, r1
	beq _080A0C34
	adds r7, r1, #0
_080A0C06:
	ldrh r0, [r6]
	movs r1, #0
	bl SetSomeUnitStatThingUnlockMaybeIdk
	ldrh r0, [r6, #2]
	movs r1, #0
	bl SetSomeUnitStatThingUnlockMaybeIdk
	ldrh r4, [r6]
	ldrh r5, [r6, #2]
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80A3468
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80A3724
	adds r6, #0x10
	ldrh r0, [r6]
	cmp r0, r7
	bne _080A0C06
_080A0C34:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A0C3C: .4byte 0x0000FFFF

	THUMB_FUNC_START sub_80A0C40
sub_80A0C40: @ 0x080A0C40
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x90
	adds r4, r0, #0
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r7, _080A0DC0  @ gUnknown_08A196FC
	ldr r1, [r7]
	ldr r2, _080A0DC4  @ 0x01000600
	mov r0, sp
	bl CpuSet
	ldr r5, _080A0DC8  @ gUnknown_020136F0
	movs r1, #0
	str r1, [r5]
	adds r4, #0x42
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _080A0C72
	b _080A0DD8
_080A0C72:
	add r0, sp, #0x24
	strh r1, [r0]
	add r1, sp, #4
	ldr r2, _080A0DCC  @ 0x01000010
	bl CpuSet
	movs r4, #1
_080A0C80:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _080A0CB0
	ldr r2, [r0]
	cmp r2, #0
	beq _080A0CB0
	ldr r0, [r0, #0xc]
	ldr r1, _080A0DD0  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne _080A0CB0
	ldrb r1, [r2, #4]
	lsrs r2, r1, #5
	lsls r2, r2, #2
	add r2, sp
	movs r0, #0x1f
	ands r0, r1
	movs r1, #1
	lsls r1, r0
	ldr r0, [r2, #4]
	orrs r0, r1
	str r0, [r2, #4]
_080A0CB0:
	adds r4, #1
	cmp r4, #0x3f
	ble _080A0C80
	movs r4, #1
	ldr r0, _080A0DC8  @ gUnknown_020136F0
	mov sl, r0
_080A0CBC:
	adds r0, r4, #0
	bl GetUnit
	adds r5, r0, #0
	adds r4, #1
	str r4, [sp, #0x8c]
	cmp r5, #0
	beq _080A0DB6
	ldr r2, [r5]
	cmp r2, #0
	beq _080A0DB6
	ldr r0, [r5, #0xc]
	ldr r1, _080A0DD0  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne _080A0DB6
	ldrb r0, [r2, #4]
	bl sub_80A1B6C
	cmp r0, #0
	beq _080A0DB6
	mov r0, sl
	ldr r1, [r0]
	ldr r0, _080A0DC0  @ gUnknown_08A196FC
	ldr r2, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldr r1, [r5]
	ldrb r1, [r1, #4]
	strb r1, [r0]
	mov r0, sl
	ldr r1, [r0]
	ldr r0, _080A0DC0  @ gUnknown_08A196FC
	ldr r2, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldr r1, [r5, #4]
	ldrb r1, [r1, #4]
	strb r1, [r0, #1]
	movs r6, #0
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	ldr r1, _080A0DD4  @ gCharacterData+0x2C
	adds r0, r0, r1
	ldr r0, [r0]
	ldrb r0, [r0, #0x15]
	cmp r6, r0
	bge _080A0DAE
	ldr r7, _080A0DC8  @ gUnknown_020136F0
	ldr r0, _080A0DC0  @ gUnknown_08A196FC
	mov r8, r0
_080A0D30:
	ldr r0, [r7]
	adds r1, r6, #0
	bl sub_80A0B20
	adds r4, r0, #0
	adds r0, r5, #0
	adds r1, r6, #0
	bl GetUnitSupportLevel
	ldr r2, [r7]
	mov r1, r8
	ldr r3, [r1]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r3
	adds r1, #2
	adds r1, r1, r6
	strb r0, [r1]
	adds r0, r4, #0
	bl sub_80A0B6C
	ldr r2, [r7]
	mov r1, r8
	ldr r3, [r1]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r3
	adds r1, #9
	adds r1, r1, r6
	strb r0, [r1]
	ldr r0, [r7]
	mov r1, r8
	ldr r2, [r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	adds r1, #0x10
	add r1, r9
	asrs r0, r4, #5
	lsls r0, r0, #2
	add r0, sp
	movs r2, #0x1f
	ands r2, r4
	ldr r0, [r0, #4]
	lsrs r0, r2
	movs r2, #1
	ands r0, r2
	strb r0, [r1]
	adds r6, #1
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	ldr r1, _080A0DD4  @ gCharacterData+0x2C
	adds r0, r0, r1
	ldr r0, [r0]
	ldrb r0, [r0, #0x15]
	cmp r6, r0
	blt _080A0D30
_080A0DAE:
	mov r1, sl
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
_080A0DB6:
	ldr r4, [sp, #0x8c]
	cmp r4, #0x3f
	bgt _080A0DBE
	b _080A0CBC
_080A0DBE:
	b _080A0EAE
	.align 2, 0
_080A0DC0: .4byte gUnknown_08A196FC
_080A0DC4: .4byte 0x01000600
_080A0DC8: .4byte gUnknown_020136F0
_080A0DCC: .4byte 0x01000010
_080A0DD0: .4byte 0x00010004
_080A0DD4: .4byte gCharacterData+0x2C
_080A0DD8:
	add r4, sp, #0x28
	adds r0, r4, #0
	bl LoadSomeUnitStatThingUnlockIdk
	ldr r0, _080A0E50  @ 0x0000026A
	bl GetStringFromIndex
	bl SetTacticianName
	movs r6, #0
	add r0, sp, #0x28
	mov sl, r0
	ldr r1, _080A0E54  @ gCharacterData
	mov r8, r1
_080A0DF4:
	adds r0, r6, #0
	mov r1, sl
	bl sub_80A37F0
	lsls r0, r0, #0x18
	adds r4, r6, #1
	cmp r0, #0
	beq _080A0EA8
	adds r0, r6, #0
	bl sub_80A1B6C
	cmp r0, #0
	beq _080A0EA8
	ldr r1, [r5]
	ldr r2, [r7]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	strb r6, [r0]
	ldr r0, [r5]
	ldr r2, [r7]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	subs r2, r6, #1
	movs r0, #0x34
	muls r0, r2, r0
	add r0, r8
	ldrb r0, [r0, #5]
	strb r0, [r1, #1]
	ldr r1, [r5]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r7]
	adds r1, r1, r0
	adds r1, #2
	adds r0, r6, #0
	mov r2, sl
	bl sub_80A35EC
	movs r0, #0
	mov r9, r0
	b _080A0E98
	.align 2, 0
_080A0E50: .4byte 0x0000026A
_080A0E54: .4byte gCharacterData
_080A0E58:
	ldr r0, [r5]
	mov r1, r9
	bl sub_80A0B20
	ldr r1, [r5]
	ldr r3, [r7]
	lsls r2, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #3
	adds r2, r2, r3
	adds r2, #9
	add r2, r9
	subs r3, r0, #1
	movs r1, #0x34
	muls r1, r3, r1
	add r1, r8
	ldrb r1, [r1, #5]
	strb r1, [r2]
	add r1, sp, #0x28
	bl sub_80A37F0
	ldr r2, [r5]
	ldr r3, [r7]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r3
	adds r1, #0x10
	add r1, r9
	strb r0, [r1]
	movs r1, #1
	add r9, r1
_080A0E98:
	adds r0, r6, #0
	bl sub_80A1B6C
	cmp r9, r0
	blt _080A0E58
	ldr r0, [r5]
	adds r0, #1
	str r0, [r5]
_080A0EA8:
	adds r6, r4, #0
	cmp r6, #0xff
	ble _080A0DF4
_080A0EAE:
	add sp, #0x90
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A0EC0
sub_80A0EC0: @ 0x080A0EC0
	push {r4, r5, lr}
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080A0EF4
	movs r4, #1
_080A0ED0:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _080A0EEC
	ldr r0, [r1]
	cmp r0, #0
	beq _080A0EEC
	adds r0, r1, #0
	bl GetUnitSMSId
	bl SMS_RegisterUsage
_080A0EEC:
	adds r4, #1
	cmp r4, #0x3f
	ble _080A0ED0
	b _080A0F1C
_080A0EF4:
	movs r4, #0
	ldr r0, _080A0F28  @ gUnknown_020136F0
	ldr r0, [r0]
	cmp r4, r0
	bge _080A0F1C
	movs r5, #0
_080A0F00:
	ldr r0, _080A0F2C  @ gUnknown_08A196FC
	ldr r0, [r0]
	adds r0, r5, r0
	ldrb r0, [r0, #1]
	bl GetClassSMSId
	bl SMS_RegisterUsage
	adds r5, #0x18
	adds r4, #1
	ldr r0, _080A0F28  @ gUnknown_020136F0
	ldr r0, [r0]
	cmp r4, r0
	blt _080A0F00
_080A0F1C:
	bl SMS_FlushIndirect
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A0F28: .4byte gUnknown_020136F0
_080A0F2C: .4byte gUnknown_08A196FC

	THUMB_FUNC_START sub_80A0F30
sub_80A0F30: @ 0x080A0F30
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r6, #0
	movs r4, #0
	ldr r7, _080A0F3C  @ gCharacterData+0x2C
	b _080A0F4C
	.align 2, 0
_080A0F3C: .4byte gCharacterData+0x2C
_080A0F40:
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80A0AD4
	adds r6, r6, r0
	adds r4, #1
_080A0F4C:
	adds r0, r5, #0
	bl sub_80A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r7
	ldr r0, [r0]
	ldrb r0, [r0, #0x15]
	cmp r4, r0
	blt _080A0F40
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A0F6C
sub_80A0F6C: @ 0x080A0F6C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r6, r1, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A0F88
	adds r0, r6, #0
	bl sub_80A0F30
	cmp r0, #5
	beq _080A0FCA
	b _080A0FD0
_080A0F88:
	movs r0, #0
	mov r8, r0
	adds r0, r6, #0
	bl sub_80A0F30
	mov r9, r0
	adds r0, r6, #0
	bl sub_80A0B44
	bl sub_80A1B6C
	adds r7, r0, #0
	movs r5, #0
	cmp r8, r7
	bge _080A0FC6
_080A0FA6:
	adds r0, r6, #0
	bl sub_80A0B44
	adds r4, r0, #0
	adds r0, r6, #0
	adds r1, r5, #0
	bl sub_80A0B20
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_80A3468
	add r8, r0
	adds r5, #1
	cmp r5, r7
	blt _080A0FA6
_080A0FC6:
	cmp r8, r9
	bne _080A0FCE
_080A0FCA:
	movs r0, #2
	b _080A0FDA
_080A0FCE:
	mov r0, r9
_080A0FD0:
	cmp r0, #0
	beq _080A0FD8
	movs r0, #1
	b _080A0FDA
_080A0FD8:
	movs r0, #0
_080A0FDA:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A0FE8
sub_80A0FE8: @ 0x080A0FE8
	push {r4, r5, r6, r7, lr}
	ldr r6, _080A10A4  @ gUnknown_02013590
	bl sub_80A3544
	adds r7, r0, #0
	adds r4, r6, #0
	subs r4, #8
	adds r0, r4, #0
	movs r1, #0x10
	bl Text_Init
	adds r0, r6, #0
	movs r1, #9
	bl Text_Init
	adds r0, r4, #0
	bl Text_Clear
	ldr r0, _080A10A8  @ 0x000005AD
	bl GetStringFromIndex
	adds r5, r0, #0
	movs r0, #0x80
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertString
	ldr r5, _080A10AC  @ gUnknown_02023136
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_Draw
	adds r0, r6, #0
	bl Text_Clear
	movs r4, #0
	cmp r7, #0x64
	bne _080A1044
	movs r4, #4
_080A1044:
	ldr r0, _080A10B0  @ 0x000005AA
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r6, #0
	movs r1, #0
	adds r2, r4, #0
	bl Text_InsertString
	adds r0, r6, #0
	movs r1, #0x34
	bl Text_SetXCursor
	movs r1, #2
	cmp r7, #0x64
	bne _080A1066
	movs r1, #4
_080A1066:
	adds r0, r6, #0
	bl Text_SetColorId
	adds r0, r6, #0
	adds r1, r7, #0
	bl Text_AppendNumberOr2Dashes
	movs r4, #0
	cmp r7, #0x64
	bne _080A107C
	movs r4, #4
_080A107C:
	ldr r0, _080A10B4  @ 0x000005AE
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r6, #0
	movs r1, #0x3c
	adds r2, r4, #0
	bl Text_InsertString
	ldr r0, _080A10B8  @ 0xFFFFFC18
	adds r1, r5, r0
	adds r0, r6, #0
	bl Text_Draw
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A10A4: .4byte gUnknown_02013590
_080A10A8: .4byte 0x000005AD
_080A10AC: .4byte gUnknown_02023136
_080A10B0: .4byte 0x000005AA
_080A10B4: .4byte 0x000005AE
_080A10B8: .4byte 0xFFFFFC18

	THUMB_FUNC_START sub_80A10BC
sub_80A10BC: @ 0x080A10BC
	movs r1, #0
	str r1, [r0, #0x2c]
	adds r2, r0, #0
	adds r2, #0x40
	strb r1, [r2]
	str r1, [r0, #0x34]
	str r1, [r0, #0x38]
	subs r1, #1
	str r1, [r0, #0x3c]
	bx lr

	THUMB_FUNC_START sub_80A10D0
sub_80A10D0: @ 0x080A10D0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A10F0  @ gUnknown_08A1DD0C
	ldr r1, _080A10F4  @ 0x06017800
	bl CopyDataWithPossibleUncomp
	ldr r0, _080A10F8  @ gUnknown_08A1E0D8
	ldr r1, [r4, #0x34]
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A10F0: .4byte gUnknown_08A1DD0C
_080A10F4: .4byte 0x06017800
_080A10F8: .4byte gUnknown_08A1E0D8

	THUMB_FUNC_START sub_80A10FC
sub_80A10FC: @ 0x080A10FC
	push {r4, lr}
	sub sp, #4
	ldr r1, [r0, #0x2c]
	ldr r2, [r0, #0x30]
	ldr r3, _080A1138  @ gUnknown_08A19700
	ldr r0, [r0, #0x34]
	movs r4, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	movs r4, #0xfc
	lsls r4, r4, #4
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
	ldr r3, _080A113C  @ gUnknown_08A19726
	movs r0, #0x87
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #4
	movs r2, #0
	bl RegisterObjectAttributes
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A1138: .4byte gUnknown_08A19700
_080A113C: .4byte gUnknown_08A19726

	THUMB_FUNC_START sub_80A1140
sub_80A1140: @ 0x080A1140
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, _080A115C  @ gUnknown_08A1973C
	bl Proc_Create
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x34]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A115C: .4byte gUnknown_08A1973C

	THUMB_FUNC_START sub_80A1160
sub_80A1160: @ 0x080A1160
	push {lr}
	ldr r0, _080A1170  @ gUnknown_08A1973C
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_080A1170: .4byte gUnknown_08A1973C

	THUMB_FUNC_START sub_80A1174
sub_80A1174: @ 0x080A1174
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	bl sub_80A0A94
	adds r7, r0, #0
	movs r6, #0
	cmp r6, r7
	bge _080A11CE
_080A118A:
	adds r0, r6, #0
	movs r1, #3
	bl __divsi3
	lsls r0, r0, #4
	mov r2, r8
	ldr r1, [r2, #0x34]
	subs r1, #0x24
	subs r5, r0, r1
	adds r0, r6, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r4, r0, #0
	adds r4, #0x18
	adds r0, r5, #0
	subs r0, #0x24
	cmp r0, #0x52
	bhi _080A11C8
	adds r0, r6, #0
	bl sub_80A0B58
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #0xc8
	lsls r3, r3, #8
	bl sub_8027C48
_080A11C8:
	adds r6, #1
	cmp r6, r7
	blt _080A118A
_080A11CE:
	bl SMS_FlushDirect
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A11E0
sub_80A11E0: @ 0x080A11E0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x3c]
	movs r1, #1
	negs r1, r1
	cmp r0, r1
	beq _080A1268
	str r0, [r4, #0x38]
	str r1, [r4, #0x3c]
	movs r1, #3
	bl __divsi3
	adds r1, r0, #0
	ldr r0, [r4, #0x34]
	cmp r0, #0
	bge _080A1202
	adds r0, #0xf
_080A1202:
	asrs r0, r0, #4
	subs r0, r1, r0
	lsls r0, r0, #4
	adds r0, #0x24
	cmp r0, #0x24
	bgt _080A121C
	cmp r1, #0
	bne _080A1216
	str r1, [r4, #0x34]
	b _080A121C
_080A1216:
	subs r0, r1, #1
	lsls r0, r0, #4
	str r0, [r4, #0x34]
_080A121C:
	ldr r0, [r4, #0x38]
	movs r1, #3
	bl __divsi3
	adds r5, r0, #0
	ldr r0, [r4, #0x34]
	cmp r0, #0
	bge _080A122E
	adds r0, #0xf
_080A122E:
	asrs r0, r0, #4
	subs r0, r5, r0
	lsls r0, r0, #4
	adds r0, #0x24
	cmp r0, #0x73
	ble _080A1268
	bl sub_80A0A94
	subs r0, #1
	movs r1, #3
	bl __divsi3
	cmp r5, r0
	bne _080A125A
	bl sub_80A0A94
	subs r0, #1
	movs r1, #3
	bl __divsi3
	subs r0, #5
	b _080A1264
_080A125A:
	ldr r0, [r4, #0x38]
	movs r1, #3
	bl __divsi3
	subs r0, #4
_080A1264:
	lsls r0, r0, #4
	str r0, [r4, #0x34]
_080A1268:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A1270
sub_80A1270: @ 0x080A1270
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r7, _080A14D0  @ gLCDControlBuffer
	ldrb r1, [r7]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r7]
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #1
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #2
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	ldrb r2, [r7, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r7, #0xc]
	ldrb r0, [r7, #0x10]
	movs r2, #3
	orrs r0, r2
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	movs r0, #1
	mov r9, r0
	mov r0, r9
	orrs r1, r0
	strb r1, [r7, #0x14]
	ldrb r0, [r7, #0x18]
	orrs r0, r2
	strb r0, [r7, #0x18]
	bl ResetFaces
	bl Font_InitForUIDefault
	bl ResetIconGraphics_
	movs r0, #0x80
	lsls r0, r0, #7
	movs r1, #1
	negs r1, r1
	bl LoadUiFrameGraphicsTo
	bl LoadObjUIGfx
	movs r0, #0xe
	bl LoadIconPalettes
	adds r0, r6, #0
	bl sub_80A11E0
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #2
	bl BG_SetPosition
	ldr r1, _080A14D4  @ 0x0000FFD8
	ldr r2, [r6, #0x34]
	subs r2, #0x24
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	bl BG_SetPosition
	movs r5, #0
	str r5, [sp]
	adds r0, r6, #0
	movs r1, #0
	movs r2, #0x12
	movs r3, #2
	bl sub_8086CE8
	bl SetupMapSpritesPalettes
	bl SMS_ClearUsageTable
	adds r0, r6, #0
	bl sub_80A0EC0
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl sub_8098C3C
	ldr r0, _080A14D8  @ gUnknown_08A1DB80
	ldr r4, _080A14DC  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080A14E0  @ gUnknown_020235AA
	movs r2, #0x90
	lsls r2, r2, #5
	adds r1, r4, #0
	bl CallARM_FillTileRect
	ldr r0, _080A14E4  @ gUnknown_08A1A8E4
	ldr r1, _080A14E8  @ 0x06013800
	bl CopyDataWithPossibleUncomp
	ldr r0, _080A14EC  @ gUnknown_08A1B174
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r0, #7
	bl BG_EnableSyncByMask
	ldrb r0, [r7, #1]
	movs r1, #0x20
	mov ip, r1
	mov r2, ip
	orrs r0, r2
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r0, r7, #0
	adds r0, #0x2d
	strb r5, [r0]
	adds r1, r7, #0
	adds r1, #0x31
	movs r0, #0x26
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x86
	strb r0, [r1]
	movs r0, #0x34
	adds r0, r0, r7
	mov r8, r0
	ldrb r1, [r0]
	mov r2, r9
	orrs r1, r2
	movs r2, #2
	orrs r1, r2
	movs r0, #4
	orrs r1, r0
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	adds r5, r7, #0
	adds r5, #0x36
	ldrb r0, [r5]
	mov r7, r9
	orrs r0, r7
	orrs r0, r2
	movs r2, #5
	negs r2, r2
	ands r0, r2
	orrs r0, r4
	orrs r0, r3
	mov r2, ip
	orrs r1, r2
	mov r7, r8
	strb r1, [r7]
	orrs r0, r2
	strb r0, [r5]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	ldr r5, _080A14F0  @ gUnknown_02013498
	movs r4, #0x14
_080A140A:
	adds r0, r5, #0
	movs r1, #5
	bl Text_Init
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _080A140A
	bl sub_80A0FE8
	bl sub_80A0A94
	cmp r0, #0
	beq _080A1476
	adds r0, r6, #0
	bl sub_80AD47C
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_80AD4A0
	ldr r4, [r6, #0x38]
	adds r0, r4, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r5, r0, #0
	adds r5, #0x14
	adds r0, r4, #0
	movs r1, #3
	bl __divsi3
	ldr r1, [r6, #0x34]
	cmp r1, #0
	bge _080A1456
	adds r1, #0xf
_080A1456:
	asrs r1, r1, #4
	subs r1, r0, r1
	lsls r1, r1, #4
	adds r1, #0x24
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r5, #0
	movs r2, #7
	bl sub_80AD51C
	movs r0, #0xc0
	movs r1, #1
	movs r2, #9
	adds r3, r6, #0
	bl StartHelpPromptSprite
_080A1476:
	movs r0, #0x88
	movs r1, #9
	movs r2, #0xb
	adds r3, r6, #0
	bl sub_80A1140
	ldr r0, _080A14F4  @ sub_80A1174
	adds r1, r6, #0
	bl Get6CDifferedLoop6C
	movs r3, #0x80
	lsls r3, r3, #2
	movs r0, #4
	str r0, [sp]
	adds r0, r6, #0
	movs r1, #0xd8
	movs r2, #0x2d
	bl sub_8097748
	ldrh r4, [r6, #0x34]
	bl sub_80A0A94
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0xa
	adds r1, r4, #0
	movs r3, #6
	bl sub_80976CC
	bl sub_8097668
	ldr r1, [r6, #0x34]
	cmp r1, #0
	bge _080A14C8
	adds r1, #0xf
_080A14C8:
	asrs r4, r1, #4
	adds r5, r6, #0
	adds r5, #0x43
	b _080A1502
	.align 2, 0
_080A14D0: .4byte gLCDControlBuffer
_080A14D4: .4byte 0x0000FFD8
_080A14D8: .4byte gUnknown_08A1DB80
_080A14DC: .4byte gUnknown_02020188
_080A14E0: .4byte gUnknown_020235AA
_080A14E4: .4byte gUnknown_08A1A8E4
_080A14E8: .4byte 0x06013800
_080A14EC: .4byte gUnknown_08A1B174
_080A14F0: .4byte gUnknown_02013498
_080A14F4: .4byte sub_80A1174
_080A14F8:
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_80A199C
	adds r4, #1
_080A1502:
	ldr r0, [r6, #0x34]
	cmp r0, #0
	bge _080A150A
	adds r0, #0xf
_080A150A:
	asrs r0, r0, #4
	adds r0, #6
	cmp r4, r0
	blt _080A14F8
	adds r0, r6, #0
	bl NewGreenTextColorManager
	movs r0, #0
	strb r0, [r5]
	ldr r0, _080A154C  @ 0x06014800
	movs r1, #0xa
	bl LoadDialogueBoxGfx
	ldr r2, _080A1550  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A154C: .4byte 0x06014800
_080A1550: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80A1554
sub_80A1554: @ 0x080A1554
	push {r4, lr}
	adds r4, r0, #0
	bl sub_808F270
	adds r0, r4, #0
	bl sub_80ADDD4
	bl EndBG3Slider_
	movs r0, #0
	bl DeleteFaceByIndex
	movs r0, #0
	bl SetPrimaryHBlankHandler
	bl sub_80A1160
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A157C
sub_80A157C: @ 0x080A157C
	push {lr}
	sub sp, #4
	movs r0, #1
	movs r1, #0xe
	movs r2, #3
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A15B0
sub_80A15B0: @ 0x080A15B0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	bl sub_80A0A94
	cmp r0, #0
	bne _080A15C6
	b _080A18D8
_080A15C6:
	adds r0, r6, #0
	adds r0, #0x40
	movs r7, #0
	ldrsb r7, [r0, r7]
	mov r8, r0
	cmp r7, #0
	beq _080A15D6
	b _080A1864
_080A15D6:
	ldr r0, [r6, #0x38]
	mov sl, r0
	ldr r4, _080A1620  @ gKeyStatusPtr
	ldr r2, [r4]
	ldrh r5, [r2, #6]
	adds r3, r6, #0
	adds r3, #0x41
	movs r0, #4
	strb r0, [r3]
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080A15FA
	ldrh r5, [r2, #4]
	movs r0, #8
	strb r0, [r3]
_080A15FA:
	adds r0, r6, #0
	adds r0, #0x43
	movs r1, #0
	ldrsb r1, [r0, r1]
	mov r9, r0
	cmp r1, #0
	beq _080A1624
	ldr r0, [r4]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A16DC
	bl CloseHelpBox
	mov r1, r9
	strb r7, [r1]
	b _080A1900
	.align 2, 0
_080A1620: .4byte gKeyStatusPtr
_080A1624:
	ldr r0, [r4]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A1684
	ldr r7, [r6, #0x38]
	adds r0, r7, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r0, #0x14
	mov r8, r0
	adds r0, r7, #0
	movs r1, #3
	bl __divsi3
	adds r1, r0, #0
	ldr r0, [r6, #0x34]
	cmp r0, #0
	bge _080A1654
	adds r0, #0xf
_080A1654:
	asrs r4, r0, #4
	subs r4, r1, r4
	lsls r4, r4, #4
	adds r4, #0x24
	ldr r5, _080A1680  @ gCharacterData
	adds r0, r7, #0
	bl sub_80A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r5
	ldrh r2, [r0, #2]
	mov r0, r8
	adds r1, r4, #0
	bl StartHelpBox
	movs r0, #1
	mov r1, r9
	strb r0, [r1]
	b _080A1900
	.align 2, 0
_080A1680: .4byte gCharacterData
_080A1684:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A16B0
	adds r0, r6, #0
	movs r1, #2
	bl Proc_GotoLabel
	ldr r0, _080A16AC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080A16A2
	b _080A1900
_080A16A2:
	movs r0, #0x6a
	bl m4aSongNumStart
	b _080A1900
	.align 2, 0
_080A16AC: .4byte gUnknown_0202BCF0
_080A16B0:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080A16DC
	adds r0, r6, #0
	movs r1, #3
	bl Proc_GotoLabel
	ldr r0, _080A16D8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080A16CE
	b _080A1900
_080A16CE:
	movs r0, #0x6b
	bl m4aSongNumStart
	b _080A1900
	.align 2, 0
_080A16D8: .4byte gUnknown_0202BCF0
_080A16DC:
	movs r0, #0x20
	ands r0, r5
	cmp r0, #0
	beq _080A16F6
	ldr r4, [r6, #0x38]
	adds r0, r4, #0
	movs r1, #3
	bl __modsi3
	cmp r0, #0
	beq _080A16F6
	subs r0, r4, #1
	str r0, [r6, #0x38]
_080A16F6:
	movs r0, #0x10
	ands r0, r5
	cmp r0, #0
	beq _080A1722
	ldr r4, [r6, #0x38]
	adds r0, r4, #0
	movs r1, #3
	bl __modsi3
	cmp r0, #2
	beq _080A1722
	adds r0, r4, #1
	str r0, [r6, #0x38]
	bl sub_80A0A94
	ldr r1, [r6, #0x38]
	cmp r1, r0
	blt _080A1722
	bl sub_80A0A94
	subs r0, #1
	str r0, [r6, #0x38]
_080A1722:
	movs r0, #0x40
	ands r0, r5
	cmp r0, #0
	beq _080A1734
	ldr r0, [r6, #0x38]
	cmp r0, #2
	ble _080A1734
	subs r0, #3
	str r0, [r6, #0x38]
_080A1734:
	movs r0, #0x80
	ands r5, r0
	cmp r5, #0
	beq _080A174E
	ldr r4, [r6, #0x38]
	adds r4, #3
	bl sub_80A0A94
	cmp r4, r0
	bge _080A174E
	ldr r0, [r6, #0x38]
	adds r0, #3
	str r0, [r6, #0x38]
_080A174E:
	ldr r0, [r6, #0x38]
	cmp sl, r0
	bne _080A1756
	b _080A185A
_080A1756:
	movs r1, #3
	bl __divsi3
	adds r1, r0, #0
	ldr r0, [r6, #0x34]
	cmp r0, #0
	bge _080A1766
	adds r0, #0xf
_080A1766:
	asrs r0, r0, #4
	subs r0, r1, r0
	lsls r4, r0, #4
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
	ldr r0, _080A17A4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A1784
	movs r0, #0x65
	bl m4aSongNumStart
_080A1784:
	cmp r4, #0xf
	bgt _080A17A8
	ldr r1, [r6, #0x34]
	cmp r1, #0
	beq _080A17A8
	cmp r1, #0
	bge _080A1794
	adds r1, #0xf
_080A1794:
	asrs r1, r1, #4
	subs r1, #1
	adds r0, r6, #0
	bl sub_80A199C
	movs r0, #0xff
	b _080A17D4
	.align 2, 0
_080A17A4: .4byte gUnknown_0202BCF0
_080A17A8:
	cmp r4, #0x4f
	ble _080A17EA
	bl sub_80A0A94
	subs r0, #1
	movs r1, #3
	bl __divsi3
	subs r0, #5
	lsls r0, r0, #4
	ldr r1, [r6, #0x34]
	cmp r1, r0
	beq _080A17EA
	cmp r1, #0
	bge _080A17C8
	adds r1, #0xf
_080A17C8:
	asrs r1, r1, #4
	adds r1, #6
	adds r0, r6, #0
	bl sub_80A199C
	movs r0, #1
_080A17D4:
	mov r1, r8
	strb r0, [r1]
	ldr r0, [r6, #0x38]
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r0, #0x14
	bl sub_80AD4E4
	b _080A1804
_080A17EA:
	ldr r0, [r6, #0x38]
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r0, #0x14
	adds r1, r4, #0
	adds r1, #0x24
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #7
	bl sub_80AD51C
_080A1804:
	mov r1, r9
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _080A185A
	ldr r7, [r6, #0x38]
	adds r0, r7, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r0, #0x14
	mov r9, r0
	adds r0, r7, #0
	movs r1, #3
	bl __divsi3
	ldr r4, [r6, #0x34]
	cmp r4, #0
	bge _080A182E
	adds r4, #0xf
_080A182E:
	asrs r4, r4, #4
	subs r4, r0, r4
	lsls r4, r4, #4
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	subs r0, #0x24
	subs r4, r4, r0
	ldr r5, _080A18D0  @ gCharacterData
	adds r0, r7, #0
	bl sub_80A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r5
	ldrh r2, [r0, #2]
	mov r0, r9
	adds r1, r4, #0
	bl StartHelpBox
_080A185A:
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _080A1900
_080A1864:
	mov r2, r8
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	bge _080A187A
	adds r0, r6, #0
	adds r0, #0x41
	ldrb r1, [r0]
	ldr r0, [r6, #0x34]
	subs r0, r0, r1
	str r0, [r6, #0x34]
_080A187A:
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	ble _080A188E
	adds r0, r6, #0
	adds r0, #0x41
	ldrb r1, [r0]
	ldr r0, [r6, #0x34]
	adds r0, r0, r1
	str r0, [r6, #0x34]
_080A188E:
	ldr r1, [r6, #0x34]
	movs r0, #0xf
	ands r1, r0
	cmp r1, #0
	bne _080A189C
	mov r0, r8
	strb r1, [r0]
_080A189C:
	ldrh r4, [r6, #0x34]
	bl sub_80A0A94
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0xa
	adds r1, r4, #0
	movs r3, #6
	bl sub_80976CC
	ldr r1, _080A18D4  @ 0x0000FFD8
	ldr r2, [r6, #0x34]
	subs r2, #0x24
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl BG_SetPosition
	b _080A1900
	.align 2, 0
_080A18D0: .4byte gCharacterData
_080A18D4: .4byte 0x0000FFD8
_080A18D8:
	ldr r0, _080A1910  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080A1900
	adds r0, r6, #0
	movs r1, #3
	bl Proc_GotoLabel
	ldr r0, _080A1914  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A1900
	movs r0, #0x6b
	bl m4aSongNumStart
_080A1900:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A1910: .4byte gKeyStatusPtr
_080A1914: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A1918
sub_80A1918: @ 0x080A1918
	push {lr}
	adds r2, r0, #0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r2, #0x38]
	bl sub_80A2C08
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A1930
sub_80A1930: @ 0x080A1930
	push {lr}
	sub sp, #4
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080A1952
	movs r1, #0x80
	lsls r1, r1, #1
	str r0, [sp]
	movs r0, #0x43
	movs r2, #0xc0
	movs r3, #0x18
	bl sub_80029E8
	b _080A1964
_080A1952:
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0
	str r0, [sp]
	movs r0, #0x34
	adds r1, r2, #0
	movs r3, #0x18
	bl sub_80029E8
_080A1964:
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A196C
sub_80A196C: @ 0x080A196C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A1980  @ gUnknown_08A1975C
	bl Proc_CreateBlockingChild
	adds r0, #0x42
	movs r1, #1
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080A1980: .4byte gUnknown_08A1975C

	THUMB_FUNC_START sub_80A1984
sub_80A1984: @ 0x080A1984
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A1998  @ gUnknown_08A1975C
	bl Proc_CreateBlockingChild
	adds r0, #0x42
	movs r1, #0
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080A1998: .4byte gUnknown_08A1975C

	THUMB_FUNC_START sub_80A199C
sub_80A199C: @ 0x080A199C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r0, [sp]
	mov sl, r1
	movs r0, #0
	bl SetFontGlyphSet
	movs r0, #0
	bl SetFont
	mov r0, sl
	lsls r4, r0, #1
	add r4, sl
	adds r0, r4, #0
	movs r1, #0x15
	bl __modsi3
	lsls r0, r0, #3
	ldr r1, _080A1A10  @ gUnknown_02013498
	adds r5, r0, r1
	movs r7, #0
	adds r6, r4, #0
_080A19D0:
	adds r0, r5, #0
	bl Text_Clear
	bl sub_80A0A94
	cmp r6, r0
	bge _080A1A66
	adds r0, r7, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #3
	mov r8, r0
	mov r1, sl
	lsls r4, r1, #1
	movs r0, #0x1f
	ands r4, r0
	ldr r0, [sp]
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r6, #0
	bl sub_80A0F6C
	cmp r0, #1
	beq _080A1A1E
	cmp r0, #1
	bgt _080A1A14
	cmp r0, #0
	beq _080A1A1A
	b _080A1A28
	.align 2, 0
_080A1A10: .4byte gUnknown_02013498
_080A1A14:
	cmp r0, #2
	beq _080A1A24
	b _080A1A28
_080A1A1A:
	movs r0, #1
	b _080A1A26
_080A1A1E:
	movs r1, #0
	mov r9, r1
	b _080A1A28
_080A1A24:
	movs r0, #4
_080A1A26:
	mov r9, r0
_080A1A28:
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetXCursor
	adds r0, r5, #0
	mov r1, r9
	bl Text_SetColorId
	adds r0, r6, #0
	bl sub_80A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	ldr r1, _080A1A88  @ gCharacterData
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendString
	lsls r1, r4, #5
	add r1, r8
	lsls r1, r1, #1
	ldr r0, _080A1A8C  @ gBG2TilemapBuffer
	adds r1, r1, r0
	adds r0, r5, #0
	bl Text_Draw
_080A1A66:
	adds r5, #8
	adds r6, #1
	adds r7, #1
	cmp r7, #2
	ble _080A19D0
	movs r0, #4
	bl BG_EnableSyncByMask
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A1A88: .4byte gCharacterData
_080A1A8C: .4byte gBG2TilemapBuffer

	THUMB_FUNC_START sub_80A1A90
sub_80A1A90: @ 0x080A1A90
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A1AA8  @ gUnknown_08A1975C
	bl Proc_Find
	cmp r0, #0
	beq _080A1AA0
	str r4, [r0, #0x3c]
_080A1AA0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A1AA8: .4byte gUnknown_08A1975C

	THUMB_FUNC_START sub_80A1AAC
sub_80A1AAC: @ 0x080A1AAC
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	bl sub_80A0B44
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_80A0B20
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	adds r1, r4, #0
	mov r3, r8
	bl sub_8083790
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A1AE4
sub_80A1AE4: @ 0x080A1AE4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	movs r0, #0
	ldr r1, _080A1B58  @ gBG1TilemapBuffer
	mov sl, r1
	ldr r6, _080A1B5C  @ gBG2TilemapBuffer
	mov r9, r6
	ldr r7, _080A1B60  @ gUnknown_020136F4
	ldr r1, _080A1B64  @ gBG0TilemapBuffer
	mov r8, r1
	movs r6, #0x80
	lsls r6, r6, #4
	adds r6, r6, r7
	mov ip, r6
_080A1B08:
	adds r1, r0, #1
	str r1, [sp]
	lsls r0, r0, #1
	ldr r6, _080A1B68  @ gUnknown_020146F4
	adds r4, r0, r6
	adds r3, r0, r7
	adds r2, r0, #0
	movs r5, #0x13
_080A1B18:
	mov r1, r8
	adds r0, r2, r1
	ldrh r0, [r0]
	strh r0, [r3]
	mov r6, ip
	adds r1, r2, r6
	mov r6, sl
	adds r0, r2, r6
	ldrh r0, [r0]
	strh r0, [r1]
	mov r1, r9
	adds r0, r2, r1
	ldrh r0, [r0]
	strh r0, [r4]
	adds r4, #0x40
	adds r3, #0x40
	adds r2, #0x40
	subs r5, #1
	cmp r5, #0
	bge _080A1B18
	ldr r0, [sp]
	cmp r0, #0x1d
	ble _080A1B08
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A1B58: .4byte gBG1TilemapBuffer
_080A1B5C: .4byte gBG2TilemapBuffer
_080A1B60: .4byte gUnknown_020136F4
_080A1B64: .4byte gBG0TilemapBuffer
_080A1B68: .4byte gUnknown_020146F4

	THUMB_FUNC_START sub_80A1B6C
sub_80A1B6C: @ 0x080A1B6C
	push {lr}
	ldr r2, _080A1B84  @ gCharacterData
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r2, #0x2c
	adds r0, r0, r2
	ldr r0, [r0]
	cmp r0, #0
	beq _080A1B88
	ldrb r0, [r0, #0x15]
	b _080A1B8A
	.align 2, 0
_080A1B84: .4byte gCharacterData
_080A1B88:
	movs r0, #0
_080A1B8A:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A1B90
sub_80A1B90: @ 0x080A1B90
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r1, [r6, #0x30]
	adds r1, #0x80
	ldr r4, _080A1C6C  @ 0x000001FF
	ands r1, r4
	ldr r3, _080A1C70  @ gUnknown_08A1983C
	movs r0, #0x8f
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r2, #8
	bl RegisterObjectAttributes
	ldr r1, [r6, #0x30]
	adds r1, #0x20
	ands r1, r4
	ldr r3, _080A1C74  @ gUnknown_08A19850
	ldr r5, _080A1C78  @ 0x0000E280
	str r5, [sp]
	movs r0, #4
	movs r2, #0x50
	bl RegisterObjectAttributes
	ldr r1, [r6, #0x30]
	adds r1, #5
	ands r1, r4
	ldr r3, _080A1C7C  @ gUnknown_08A19700
	ldr r0, _080A1C80  @ 0x0000ABC0
	str r0, [sp]
	movs r0, #4
	movs r2, #0x67
	bl RegisterObjectAttributes
	ldr r1, [r6, #0x30]
	adds r1, #0x14
	ands r1, r4
	ldr r3, _080A1C84  @ gUnknown_08A1985E
	str r5, [sp]
	movs r0, #4
	movs r2, #0x6f
	bl RegisterObjectAttributes
	ldr r1, [r6, #0x30]
	adds r1, #0xc
	ands r1, r4
	ldr r3, _080A1C88  @ gUnknown_08A19872
	movs r0, #0xaf
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r2, #0x90
	bl RegisterObjectAttributes
	ldr r0, [r6, #0x30]
	adds r7, r0, #0
	adds r7, #0x70
	ands r7, r4
	ldr r0, [r6, #0x34]
	adds r2, r0, #0
	adds r2, #0x16
	movs r4, #0
	adds r0, r6, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r4, r0
	bge _080A1C60
	adds r5, r2, #0
_080A1C1A:
	movs r3, #0xc0
	lsls r3, r3, #8
	adds r0, r6, #0
	adds r0, #0x3f
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0
	bne _080A1C2E
	movs r3, #0xd0
	lsls r3, r3, #8
_080A1C2E:
	cmp r0, #2
	bne _080A1C36
	movs r3, #0xf0
	lsls r3, r3, #8
_080A1C36:
	movs r1, #0xc0
	lsls r1, r1, #4
	adds r0, r1, #0
	orrs r3, r0
	adds r0, r6, #0
	adds r0, #0x4d
	adds r0, r0, r4
	ldrb r0, [r0]
	str r0, [sp]
	movs r0, #0
	adds r1, r7, #0
	adds r2, r5, #0
	bl sub_8027C48
	adds r5, #0x10
	adds r4, #1
	adds r0, r6, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r4, r0
	blt _080A1C1A
_080A1C60:
	bl SMS_FlushDirect
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A1C6C: .4byte 0x000001FF
_080A1C70: .4byte gUnknown_08A1983C
_080A1C74: .4byte gUnknown_08A19850
_080A1C78: .4byte 0x0000E280
_080A1C7C: .4byte gUnknown_08A19700
_080A1C80: .4byte 0x0000ABC0
_080A1C84: .4byte gUnknown_08A1985E
_080A1C88: .4byte gUnknown_08A19872

	THUMB_FUNC_START sub_80A1C8C
sub_80A1C8C: @ 0x080A1C8C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	mov r9, r0
	mov sl, r1
	add r1, sp, #8
	ldr r0, _080A1D20  @ gUnknown_08205C90
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	mov r0, r9
	adds r0, #0x3f
	mov r1, sl
	adds r4, r0, r1
	ldrb r0, [r4]
	cmp r0, #0
	bne _080A1D28
	movs r5, #0
	lsls r1, r1, #1
	mov r8, r1
	mov r0, r8
	adds r0, #3
	lsls r0, r0, #5
	adds r0, #0x10
	ldr r1, _080A1D24  @ gBG2TilemapBuffer
	lsls r0, r0, #1
	adds r4, r0, r1
_080A1CC6:
	adds r0, r4, #0
	movs r1, #1
	movs r2, #0x14
	bl sub_8004B0C
	adds r4, #2
	adds r5, #1
	cmp r5, #4
	ble _080A1CC6
	movs r5, #0
	mov r0, r8
	adds r0, #3
	lsls r0, r0, #5
	adds r0, #0x16
	ldr r1, _080A1D24  @ gBG2TilemapBuffer
	lsls r0, r0, #1
	adds r4, r0, r1
_080A1CE8:
	adds r0, r4, #0
	movs r1, #1
	movs r2, #0x14
	bl sub_8004B0C
	adds r4, #2
	adds r5, #1
	cmp r5, #1
	ble _080A1CE8
	movs r5, #0
	mov r0, r8
	adds r0, #3
	lsls r0, r0, #5
	adds r0, #0x19
	ldr r1, _080A1D24  @ gBG2TilemapBuffer
	lsls r0, r0, #1
	adds r4, r0, r1
_080A1D0A:
	adds r0, r4, #0
	movs r1, #1
	movs r2, #0x14
	bl sub_8004B0C
	adds r4, #2
	adds r5, #1
	cmp r5, #2
	ble _080A1D0A
	b _080A1E68
	.align 2, 0
_080A1D20: .4byte gUnknown_08205C90
_080A1D24: .4byte gBG2TilemapBuffer
_080A1D28:
	movs r7, #0
	mov r2, r9
	ldr r0, [r2, #0x2c]
	bl sub_80A0B44
	str r0, [sp, #0x14]
	mov r3, r9
	ldr r0, [r3, #0x2c]
	mov r1, sl
	bl sub_80A0B20
	str r0, [sp, #0x18]
	ldrb r0, [r4]
	cmp r0, #2
	bne _080A1D48
	movs r7, #1
_080A1D48:
	mov r4, r9
	ldr r0, [r4, #0x2c]
	mov r1, sl
	bl sub_80A0B20
	subs r0, #1
	movs r6, #0x34
	muls r0, r6, r0
	ldr r1, _080A1DD8  @ gCharacterData
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetStringFromIndex
	mov r2, sl
	lsls r2, r2, #1
	mov r8, r2
	mov r4, r8
	adds r4, #3
	lsls r3, r4, #5
	str r3, [sp, #0x1c]
	lsls r4, r4, #6
	ldr r5, _080A1DDC  @ gUnknown_02023CC8
	adds r1, r4, r5
	movs r2, #5
	str r2, [sp]
	str r0, [sp, #4]
	movs r0, #0
	adds r2, r7, #0
	movs r3, #0
	bl DrawTextInline
	adds r5, #0xc
	adds r4, r4, r5
	mov r1, r9
	ldr r0, [r1, #0x2c]
	mov r1, sl
	bl sub_80A0B20
	subs r0, #1
	muls r0, r6, r0
	ldr r2, _080A1DD8  @ gCharacterData
	adds r0, r0, r2
	ldrb r1, [r0, #9]
	adds r1, #0x79
	movs r2, #0xe0
	lsls r2, r2, #8
	adds r0, r4, #0
	bl DrawIcon
	ldr r0, [sp, #0x14]
	ldr r1, [sp, #0x18]
	bl sub_80A3468
	cmp r0, #2
	bne _080A1E24
	movs r5, #0
	mov r0, r9
	adds r0, #0x46
	mov r3, sl
	adds r6, r0, r3
	ldr r0, [sp, #0x1c]
	adds r0, #0x19
	add r4, sp, #8
	mov r9, r4
	lsls r4, r0, #1
_080A1DCA:
	movs r7, #1
	ldrb r0, [r6]
	cmp r0, #2
	bne _080A1DE0
	movs r7, #4
	b _080A1DE8
	.align 2, 0
_080A1DD8: .4byte gCharacterData
_080A1DDC: .4byte gUnknown_02023CC8
_080A1DE0:
	ldrb r0, [r6]
	cmp r0, r5
	ble _080A1DE8
	movs r7, #0
_080A1DE8:
	ldr r3, _080A1E20  @ gBG2TilemapBuffer
	adds r0, r4, r3
	mov r1, r9
	adds r1, #4
	mov r9, r1
	subs r1, #4
	ldm r1!, {r2}
	adds r1, r7, #0
	str r3, [sp, #0x20]
	bl sub_8004B0C
	adds r4, #2
	adds r5, #1
	ldr r3, [sp, #0x20]
	cmp r5, #1
	ble _080A1DCA
	mov r0, r8
	adds r0, #3
	lsls r0, r0, #6
	adds r1, r3, #0
	adds r1, #0x36
	adds r0, r0, r1
	movs r1, #1
	movs r2, #0x14
	bl sub_8004B0C
	b _080A1E68
	.align 2, 0
_080A1E20: .4byte gBG2TilemapBuffer
_080A1E24:
	movs r5, #0
	mov r0, r9
	adds r0, #0x46
	mov r2, sl
	adds r6, r0, r2
	ldr r0, [sp, #0x1c]
	adds r0, #0x19
	add r3, sp, #8
	mov r8, r3
	lsls r4, r0, #1
_080A1E38:
	movs r7, #1
	ldrb r0, [r6]
	cmp r0, #3
	bne _080A1E44
	movs r7, #4
	b _080A1E4C
_080A1E44:
	ldrb r0, [r6]
	cmp r0, r5
	ble _080A1E4C
	movs r7, #0
_080A1E4C:
	ldr r0, _080A1E78  @ gBG2TilemapBuffer
	adds r0, r4, r0
	mov r1, r8
	adds r1, #4
	mov r8, r1
	subs r1, #4
	ldm r1!, {r2}
	adds r1, r7, #0
	bl sub_8004B0C
	adds r4, #2
	adds r5, #1
	cmp r5, #2
	ble _080A1E38
_080A1E68:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A1E78: .4byte gBG2TilemapBuffer

	THUMB_FUNC_START sub_80A1E7C
sub_80A1E7C: @ 0x080A1E7C
	push {r4, r5, r6, lr}
	sub sp, #0x20
	adds r5, r0, #0
	ldr r1, _080A1F54  @ 0x06015000
	mov r0, sp
	movs r2, #0xe
	bl InitSomeOtherGraphicsRelatedStruct
	ldr r0, _080A1F58  @ gUnknown_0859EF00
	movs r1, #0xf0
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	add r6, sp, #0x18
	adds r0, r6, #0
	bl Text_Init3
	mov r0, sp
	bl SetFont
	movs r0, #0
	bl SetFontGlyphSet
	adds r0, r6, #0
	movs r1, #0
	bl Text_80046B4
	ldr r4, _080A1F5C  @ gCharacterData
	ldr r0, [r5, #0x2c]
	bl sub_80A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r4
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r4, r0, #0
	movs r0, #0x28
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r6, #0
	movs r2, #0
	adds r3, r4, #0
	bl Text_InsertString
	movs r4, #0
	adds r5, #0x3d
	ldrb r0, [r5]
	cmp r0, #0
	bne _080A1EEC
	movs r4, #1
_080A1EEC:
	ldr r0, _080A1F60  @ 0x000005AB
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r6, #0
	movs r1, #0x30
	adds r2, r4, #0
	bl Text_InsertString
	movs r4, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne _080A1F08
	movs r4, #1
_080A1F08:
	ldr r0, _080A1F64  @ 0x000005AC
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r6, #0
	movs r1, #0x60
	adds r2, r4, #0
	bl Text_InsertString
	ldrb r0, [r5]
	bl sub_80AEBEC
	adds r1, r0, #0
	lsls r1, r1, #3
	adds r1, #0x60
	adds r0, r6, #0
	bl Text_SetXCursor
	ldrb r0, [r5]
	movs r1, #2
	cmp r0, #0
	bne _080A1F36
	movs r1, #1
_080A1F36:
	adds r0, r6, #0
	bl Text_SetColorId
	ldrb r1, [r5]
	adds r0, r6, #0
	bl Text_AppendNumberOr2Dashes
	movs r0, #0
	bl SetFont
	add sp, #0x20
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A1F54: .4byte 0x06015000
_080A1F58: .4byte gUnknown_0859EF00
_080A1F5C: .4byte gCharacterData
_080A1F60: .4byte 0x000005AB
_080A1F64: .4byte 0x000005AC

	THUMB_FUNC_START sub_80A1F68
sub_80A1F68: @ 0x080A1F68
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	adds r0, #0x38
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080A1FF4
	movs r4, #0
	adds r0, r6, #0
	adds r0, #0x3c
	mov r8, r0
	ldrb r0, [r0]
	cmp r4, r0
	bge _080A203E
	movs r1, #0x3f
	adds r1, r1, r6
	mov sl, r1
_080A1F94:
	ldr r0, [r6, #0x2c]
	adds r1, r4, #0
	bl sub_80A0B20
	adds r7, r0, #0
	mov r2, sl
	adds r1, r2, r4
	movs r0, #0
	strb r0, [r1]
	movs r5, #1
	adds r4, #1
	mov r9, r4
	adds r4, r1, #0
_080A1FAE:
	adds r0, r5, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _080A1FE2
	ldr r0, [r1]
	cmp r0, #0
	beq _080A1FE2
	ldrb r0, [r0, #4]
	cmp r0, r7
	bne _080A1FE2
	ldr r1, [r1, #0xc]
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r1
	cmp r0, #0
	bne _080A1FE2
	movs r0, #4
	ands r1, r0
	cmp r1, #0
	beq _080A1FDE
	movs r0, #2
	b _080A1FE0
_080A1FDE:
	movs r0, #1
_080A1FE0:
	strb r0, [r4]
_080A1FE2:
	adds r5, #1
	cmp r5, #0x3f
	ble _080A1FAE
	mov r4, r9
	mov r0, r8
	ldrb r0, [r0]
	cmp r4, r0
	blt _080A1F94
	b _080A203E
_080A1FF4:
	adds r1, r6, #0
	adds r1, #0x3b
	strb r0, [r1]
	movs r4, #0
	adds r0, r6, #0
	adds r0, #0x3c
	mov r8, r0
	ldrb r2, [r0]
	cmp r4, r2
	bge _080A203E
	adds r7, r1, #0
_080A200A:
	adds r0, r6, #0
	adds r0, #0x3f
	adds r5, r0, r4
	movs r0, #0
	strb r0, [r5]
	ldr r0, [r6, #0x2c]
	adds r1, r4, #0
	bl sub_80A0B04
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A2034
	movs r0, #1
	strb r0, [r5]
	ldr r0, [r6, #0x2c]
	adds r1, r4, #0
	bl sub_80A0AD4
	ldrb r1, [r7]
	adds r1, r1, r0
	strb r1, [r7]
_080A2034:
	adds r4, #1
	mov r0, r8
	ldrb r0, [r0]
	cmp r4, r0
	blt _080A200A
_080A203E:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A204C
sub_80A204C: @ 0x080A204C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r4, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	cmp r4, r1
	bge _080A2074
	adds r7, r5, #0
	adds r7, #0x46
	adds r6, r0, #0
_080A2060:
	ldr r0, [r5, #0x2c]
	adds r1, r4, #0
	bl sub_80A0AD4
	adds r1, r7, r4
	strb r0, [r1]
	adds r4, #1
	ldrb r0, [r6]
	cmp r4, r0
	blt _080A2060
_080A2074:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A207C
sub_80A207C: @ 0x080A207C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	adds r0, #0x38
	movs r5, #0
	ldrsb r5, [r0, r5]
	cmp r5, #0
	beq _080A20A2
	ldr r0, [r4, #0x2c]
	bl sub_80A0F30
	movs r1, #5
	subs r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x3d
	strb r1, [r0]
	b _080A20EE
_080A20A2:
	ldr r0, [r4, #0x2c]
	bl sub_80A0B44
	mov r9, r0
	adds r1, r4, #0
	adds r1, #0x3d
	strb r5, [r1]
	movs r5, #0
	adds r0, r4, #0
	adds r0, #0x3c
	mov r8, r1
	adds r7, r0, #0
	ldrb r0, [r7]
	cmp r5, r0
	bge _080A20E0
	mov r6, r8
_080A20C2:
	ldr r0, [r4, #0x2c]
	adds r1, r5, #0
	bl sub_80A0B20
	adds r1, r0, #0
	mov r0, r9
	bl sub_80A3468
	ldrb r1, [r6]
	adds r1, r1, r0
	strb r1, [r6]
	adds r5, #1
	ldrb r2, [r7]
	cmp r5, r2
	blt _080A20C2
_080A20E0:
	ldr r0, [r4, #0x2c]
	bl sub_80A0F30
	mov r2, r8
	ldrb r1, [r2]
	subs r1, r1, r0
	strb r1, [r2]
_080A20EE:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A20FC
sub_80A20FC: @ 0x080A20FC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl SMS_ClearUsageTable
	movs r4, #0
	b _080A2124
_080A2108:
	ldr r0, [r5, #0x2c]
	adds r1, r4, #0
	bl sub_80A0AEC
	adds r1, r5, #0
	adds r1, #0x4d
	adds r1, r1, r4
	strb r0, [r1]
	ldrb r0, [r1]
	bl GetClassSMSId
	bl SMS_RegisterUsage
	adds r4, #1
_080A2124:
	adds r0, r5, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r4, r0
	blt _080A2108
	bl SMS_FlushIndirect
	movs r4, #0
	adds r0, r5, #0
	adds r0, #0x3c
	adds r6, r0, #0
	b _080A2146
_080A213C:
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80A1C8C
	adds r4, #1
_080A2146:
	ldrb r0, [r6]
	cmp r4, r0
	blt _080A213C
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A2154
sub_80A2154: @ 0x080A2154
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r5, r1, #0
	adds r4, r2, #0
_080A215C:
	cmp r5, #0
	blt _080A21C8
	adds r0, r7, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	subs r0, #1
	cmp r5, r0
	bgt _080A21C8
	adds r0, r7, #0
	adds r0, #0x3f
	adds r0, r0, r5
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A21C4
	ldr r0, [r7, #0x2c]
	adds r1, r5, #0
	bl sub_80A0AD4
	cmp r0, #0
	ble _080A21C4
	adds r6, r7, #0
	adds r6, #0x39
	ldrb r0, [r6]
	movs r1, #0xe3
	ands r1, r0
	movs r2, #7
	adds r0, r5, #0
	ands r0, r2
	lsls r0, r0, #2
	adds r1, r1, r0
	strb r1, [r6]
	movs r4, #3
	ands r4, r1
	ldr r0, [r7, #0x2c]
	adds r1, r5, #0
	bl sub_80A0AD4
	cmp r4, r0
	blt _080A21C8
	ldr r0, [r7, #0x2c]
	adds r1, r5, #0
	bl sub_80A0AD4
	ldrb r2, [r6]
	movs r1, #0xfc
	ands r1, r2
	subs r0, #1
	adds r1, r1, r0
	strb r1, [r6]
	b _080A21C8
_080A21C4:
	adds r5, r5, r4
	b _080A215C
_080A21C8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A21D0
sub_80A21D0: @ 0x080A21D0
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	str r0, [r4, #0x30]
	str r0, [r4, #0x34]
	adds r2, r4, #0
	adds r2, #0x39
	ldrb r1, [r2]
	movs r0, #0xfc
	ands r0, r1
	movs r1, #0xe3
	ands r0, r1
	strb r0, [r2]
	ldr r0, [r4, #0x2c]
	bl sub_80A0B44
	bl sub_80A1B6C
	adds r1, r4, #0
	adds r1, #0x3c
	strb r0, [r1]
	adds r0, r4, #0
	bl sub_80A1F68
	adds r0, r4, #0
	bl sub_80A204C
	adds r0, r4, #0
	bl sub_80A207C
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_80A2154
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A221C
sub_80A221C: @ 0x080A221C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r3, _080A2270  @ gUnknown_02022C28
	adds r5, r3, #0
	adds r5, #0x20
	movs r0, #0x1f
	mov r8, r0
	movs r7, #0xf8
	lsls r7, r7, #2
	movs r6, #0xf8
	lsls r6, r6, #7
	movs r4, #0xf
	movs r0, #0x1f
	mov ip, r0
_080A223A:
	ldrh r2, [r3]
	mov r1, ip
	ands r1, r2
	lsrs r1, r1, #1
	mov r0, r8
	ands r1, r0
	adds r0, r7, #0
	ands r0, r2
	lsrs r0, r0, #1
	ands r0, r7
	adds r1, r1, r0
	adds r0, r6, #0
	ands r0, r2
	lsrs r0, r0, #1
	ands r0, r6
	adds r1, r1, r0
	strh r1, [r5]
	adds r5, #2
	adds r3, #2
	subs r4, #1
	cmp r4, #0
	bge _080A223A
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A2270: .4byte gUnknown_02022C28

	THUMB_FUNC_START sub_80A2274
sub_80A2274: @ 0x080A2274
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, _080A2418  @ gLCDControlBuffer
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	bl SetupBackgrounds
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	movs r3, #1
	orrs r0, r3
	strb r0, [r4, #0xc]
	ldrb r0, [r4, #0x10]
	movs r2, #3
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	orrs r1, r3
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	orrs r0, r2
	strb r0, [r4, #0x18]
	bl Font_InitForUIDefault
	bl ResetIconGraphics_
	bl LoadUiFrameGraphics
	bl LoadObjUIGfx
	bl SetupMapSpritesPalettes
	bl sub_80A221C
	movs r0, #0xd
	bl LoadIconPalettes
	adds r0, r5, #0
	bl NewGreenTextColorManager
	adds r0, r5, #0
	adds r0, #0x38
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080A2340
	ldr r2, _080A241C  @ gUnknown_0202BCF0
	adds r2, #0x40
	ldrb r1, [r2]
	movs r0, #0x61
	negs r0, r0
	ands r0, r1
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	adds r0, r5, #0
	bl sub_80AD47C
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_80AD4A0
	movs r0, #1
	bl sub_80AD594
	adds r1, r5, #0
	adds r1, #0x3a
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A2340
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	lsls r0, r0, #3
	adds r0, #0xc4
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x18
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #1
	bl sub_80AD51C
_080A2340:
	movs r0, #0
	movs r1, #4
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #4
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0xd
	movs r2, #3
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	bl sub_8095A1C
	movs r0, #0x80
	lsls r0, r0, #7
	movs r1, #5
	bl sub_8098C3C
	ldr r0, _080A2420  @ gUnknown_08A1DC1C
	ldr r4, _080A2424  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080A2428  @ gBG1TilemapBuffer
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl CallARM_FillTileRect
	ldr r4, _080A242C  @ gCharacterData
	ldr r0, [r5, #0x2c]
	bl sub_80A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r4
	ldrh r2, [r0, #6]
	ldr r1, _080A2430  @ gUnknown_02022CEC
	movs r3, #0x80
	lsls r3, r3, #2
	movs r0, #2
	str r0, [sp]
	adds r0, r5, #0
	bl sub_8005E98
	adds r0, r5, #0
	bl sub_80A20FC
	adds r0, r5, #0
	bl sub_80A1E7C
	ldr r0, _080A2434  @ gUnknown_08A1DD0C
	ldr r1, _080A2438  @ 0x06017800
	bl CopyDataWithPossibleUncomp
	ldr r0, _080A243C  @ gUnknown_08A1E0D8
	movs r1, #0xd0
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080A2440  @ gUnknown_08A1D79C
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080A2444  @ sub_80A1B90
	adds r1, r5, #0
	bl Get6CDifferedLoop6C
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A2418: .4byte gLCDControlBuffer
_080A241C: .4byte gUnknown_0202BCF0
_080A2420: .4byte gUnknown_08A1DC1C
_080A2424: .4byte gUnknown_02020188
_080A2428: .4byte gBG1TilemapBuffer
_080A242C: .4byte gCharacterData
_080A2430: .4byte gUnknown_02022CEC
_080A2434: .4byte gUnknown_08A1DD0C
_080A2438: .4byte 0x06017800
_080A243C: .4byte gUnknown_08A1E0D8
_080A2440: .4byte gUnknown_08A1D79C
_080A2444: .4byte sub_80A1B90

	THUMB_FUNC_START sub_80A2448
sub_80A2448: @ 0x080A2448
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r0, _080A247C  @ gKeyStatusPtr
	ldr r1, [r0]
	ldrh r3, [r1, #8]
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _080A2484
	ldr r0, _080A2480  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A2470
	movs r0, #0x6b
	bl m4aSongNumStart
_080A2470:
	adds r0, r6, #0
	movs r1, #3
	bl Proc_GotoLabel
	b _080A25EA
	.align 2, 0
_080A247C: .4byte gKeyStatusPtr
_080A2480: .4byte gUnknown_0202BCF0
_080A2484:
	ldrh r2, [r1, #6]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	cmp r0, #0
	beq _080A249A
	adds r0, r6, #0
	movs r1, #4
	bl Proc_GotoLabel
	b _080A25EA
_080A249A:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r2
	cmp r0, #0
	beq _080A24AE
	adds r0, r6, #0
	movs r1, #5
	bl Proc_GotoLabel
	b _080A25EA
_080A24AE:
	adds r0, r6, #0
	adds r0, #0x38
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080A24BE
	b _080A25EA
_080A24BE:
	adds r0, r6, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	cmp r0, #0
	bne _080A24CA
	b _080A25D0
_080A24CA:
	adds r1, r6, #0
	adds r1, #0x39
	ldrb r7, [r1]
	movs r0, #1
	ands r0, r3
	adds r5, r1, #0
	cmp r0, #0
	beq _080A24FC
	ldr r0, _080A24F8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A24EC
	movs r0, #0x6a
	bl m4aSongNumStart
_080A24EC:
	adds r0, r6, #0
	movs r1, #2
	bl Proc_GotoLabel
	b _080A25EA
	.align 2, 0
_080A24F8: .4byte gUnknown_0202BCF0
_080A24FC:
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _080A2516
	movs r1, #3
	ands r1, r7
	cmp r1, #0
	beq _080A2516
	movs r0, #0xfc
	ands r0, r7
	adds r0, #0xff
	adds r0, r0, r1
	strb r0, [r5]
_080A2516:
	ldr r0, _080A25C8  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080A2550
	ldrb r1, [r5]
	movs r0, #3
	mov r8, r0
	mov r4, r8
	ands r4, r1
	ldr r0, [r6, #0x2c]
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	bl sub_80A0AD4
	subs r0, #1
	cmp r4, r0
	bge _080A2550
	ldrb r0, [r5]
	movs r1, #0xfc
	ands r1, r0
	adds r1, #1
	mov r2, r8
	ands r2, r0
	adds r1, r1, r2
	strb r1, [r5]
_080A2550:
	ldr r4, _080A25C8  @ gKeyStatusPtr
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080A2572
	ldrb r1, [r5]
	lsrs r1, r1, #2
	movs r0, #7
	ands r1, r0
	subs r1, #1
	movs r2, #1
	negs r2, r2
	adds r0, r6, #0
	bl sub_80A2154
_080A2572:
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080A2590
	ldrb r1, [r5]
	lsrs r1, r1, #2
	movs r0, #7
	ands r1, r0
	adds r1, #1
	adds r0, r6, #0
	movs r2, #1
	bl sub_80A2154
_080A2590:
	ldrb r1, [r5]
	cmp r7, r1
	beq _080A25EA
	movs r0, #3
	ands r0, r1
	lsls r0, r0, #3
	adds r0, #0xc4
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x18
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #1
	bl sub_80AD51C
	ldr r0, _080A25CC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A25EA
	movs r0, #0x65
	bl m4aSongNumStart
	b _080A25EA
	.align 2, 0
_080A25C8: .4byte gKeyStatusPtr
_080A25CC: .4byte gUnknown_0202BCF0
_080A25D0:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _080A25EA
	ldr r0, _080A25F4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A25EA
	movs r0, #0x6c
	bl m4aSongNumStart
_080A25EA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A25F4: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A25F8
sub_80A25F8: @ 0x080A25F8
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #0
	bl SetupBackgrounds
	ldr r3, _080A26A4  @ gLCDControlBuffer
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	movs r0, #0
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	bl ResetFaces
	bl Font_InitForUIDefault
	bl ResetIconGraphics_
	bl LoadLegacyUiFrameGraphics
	bl LoadObjUIGfx
	ldr r0, [r5, #0x2c]
	bl sub_80A0B44
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, [r5, #0x2c]
	adds r5, #0x39
	ldrb r1, [r5]
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	bl sub_80A0B20
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldrb r0, [r5]
	movs r2, #3
	ands r2, r0
	adds r2, #1
	adds r0, r4, #0
	bl sub_8083764
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A26A4: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80A26A8
sub_80A26A8: @ 0x080A26A8
	push {r4, r5, lr}
	sub sp, #4
	adds r0, #0x3a
	movs r5, #0
	strb r5, [r0]
	bl sub_80AD564
	ldr r2, _080A2728  @ gLCDControlBuffer
	ldrb r1, [r2, #0xc]
	movs r3, #4
	negs r3, r3
	adds r0, r3, #0
	ands r0, r1
	movs r4, #1
	orrs r0, r4
	strb r0, [r2, #0xc]
	ldrb r0, [r2, #0x10]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x10]
	ldrb r1, [r2, #0x14]
	adds r0, r3, #0
	ands r0, r1
	orrs r0, r4
	strb r0, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	ands r3, r0
	strb r3, [r2, #0x18]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl sub_8001F0C
	bl sub_80A1AE4
	ldr r0, _080A272C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A271E
	movs r0, #0xc8
	bl m4aSongNumStart
_080A271E:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A2728: .4byte gLCDControlBuffer
_080A272C: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A2730
sub_80A2730: @ 0x080A2730
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r0, [sp]
	movs r4, #0
	ldr r0, _080A27A0  @ gBG2TilemapBuffer
	mov sl, r0
_080A2744:
	ldr r2, [sp]
	adds r1, r4, r2
	cmp r1, #0x1d
	bhi _080A27B4
	adds r3, r4, #1
	mov r9, r3
	ldr r2, _080A27A4  @ gUnknown_020136F4
	lsls r1, r1, #1
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r2, r3
	adds r0, r0, r1
	mov ip, r0
	adds r7, r1, r2
	adds r6, r1, #0
	lsls r0, r4, #1
	ldr r4, _080A27A8  @ gBG0TilemapBuffer
	adds r5, r0, r4
	adds r3, r0, #0
	ldr r0, _080A27AC  @ gBG1TilemapBuffer
	mov r8, r0
	movs r4, #0x13
_080A2770:
	ldrh r0, [r7]
	strh r0, [r5]
	mov r2, r8
	adds r1, r3, r2
	ldr r2, _080A27B0  @ gUnknown_02013EF4
	adds r0, r6, r2
	ldrh r0, [r0]
	strh r0, [r1]
	mov r0, sl
	adds r1, r3, r0
	mov r2, ip
	ldrh r0, [r2]
	strh r0, [r1]
	movs r0, #0x40
	add ip, r0
	adds r7, #0x40
	adds r6, #0x40
	adds r5, #0x40
	adds r3, #0x40
	subs r4, #1
	cmp r4, #0
	bge _080A2770
	b _080A27DC
	.align 2, 0
_080A27A0: .4byte gBG2TilemapBuffer
_080A27A4: .4byte gUnknown_020136F4
_080A27A8: .4byte gBG0TilemapBuffer
_080A27AC: .4byte gBG1TilemapBuffer
_080A27B0: .4byte gUnknown_02013EF4
_080A27B4:
	adds r1, r4, #1
	mov r9, r1
	movs r3, #0
	lsls r0, r4, #1
	mov r4, sl
	adds r2, r0, r4
	ldr r4, _080A27F8  @ gBG1TilemapBuffer
	adds r1, r0, r4
	ldr r4, _080A27FC  @ gBG0TilemapBuffer
	adds r0, r0, r4
	movs r4, #0x13
_080A27CA:
	strh r3, [r0]
	strh r3, [r1]
	strh r3, [r2]
	adds r2, #0x40
	adds r1, #0x40
	adds r0, #0x40
	subs r4, #1
	cmp r4, #0
	bge _080A27CA
_080A27DC:
	mov r4, r9
	cmp r4, #0x1d
	ble _080A2744
	movs r0, #7
	bl BG_EnableSyncByMask
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A27F8: .4byte gBG1TilemapBuffer
_080A27FC: .4byte gBG0TilemapBuffer

	THUMB_FUNC_START sub_80A2800
sub_80A2800: @ 0x080A2800
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r6, r7, #0
	adds r6, #0x3a
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	ldrb r0, [r6]
	movs r4, #0xa
	subs r4, r4, r0
	lsls r0, r4, #3
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r5, #8
	subs r5, r5, r0
	lsls r0, r4, #4
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	negs r0, r5
	lsls r0, r0, #3
	str r0, [r7, #0x30]
	adds r0, r5, #0
	bl sub_80A2730
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r4
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	ldrb r0, [r6]
	cmp r0, #0xa
	bne _080A2864
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	ldr r0, [r7, #0x2c]
	bl sub_80A0AA0
	str r0, [r7, #0x2c]
_080A2864:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A286C
sub_80A286C: @ 0x080A286C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	mov r7, r8
	adds r7, #0x3a
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	ldrb r0, [r7]
	movs r4, #0xa
	subs r4, r4, r0
	lsls r0, r4, #3
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	adds r6, r0, #0
	movs r5, #8
	subs r6, r5, r6
	lsls r0, r4, #4
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	subs r5, r5, r6
	lsls r5, r5, #3
	mov r0, r8
	str r5, [r0, #0x30]
	subs r6, #8
	adds r0, r6, #0
	bl sub_80A2730
	movs r1, #0x10
	subs r1, r1, r4
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	movs r0, #1
	adds r2, r4, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	ldrb r0, [r7]
	cmp r0, #0xa
	bne _080A28D4
	mov r0, r8
	bl Proc_ClearNativeCallback
_080A28D4:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A28E0
sub_80A28E0: @ 0x080A28E0
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r6, r7, #0
	adds r6, #0x3a
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	ldrb r0, [r6]
	movs r4, #0xa
	subs r4, r4, r0
	lsls r0, r4, #3
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r5, #8
	subs r5, r5, r0
	lsls r0, r4, #4
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	lsls r0, r5, #3
	str r0, [r7, #0x30]
	negs r5, r5
	adds r0, r5, #0
	bl sub_80A2730
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r4
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	ldrb r0, [r6]
	cmp r0, #0xa
	bne _080A2944
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	ldr r0, [r7, #0x2c]
	bl sub_80A0AC0
	str r0, [r7, #0x2c]
_080A2944:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A294C
sub_80A294C: @ 0x080A294C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	mov r7, r8
	adds r7, #0x3a
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	ldrb r0, [r7]
	movs r4, #0xa
	subs r4, r4, r0
	lsls r0, r4, #3
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	adds r5, r0, #0
	movs r6, #8
	subs r5, r6, r5
	lsls r0, r4, #4
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	adds r0, r5, #0
	subs r0, #8
	lsls r0, r0, #3
	mov r1, r8
	str r0, [r1, #0x30]
	subs r6, r6, r5
	adds r0, r6, #0
	bl sub_80A2730
	movs r1, #0x10
	subs r1, r1, r4
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	movs r0, #1
	adds r2, r4, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	ldrb r0, [r7]
	cmp r0, #0xa
	bne _080A29B6
	mov r0, r8
	bl Proc_ClearNativeCallback
_080A29B6:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A29C0
sub_80A29C0: @ 0x080A29C0
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #4
	adds r4, r0, #0
	bl ResetFaces
	bl Font_InitForUIDefault
	bl ResetIconGraphics_
	ldr r6, _080A2A94  @ gBG0TilemapBuffer
	adds r0, r6, #0
	movs r1, #0
	bl BG_Fill
	ldr r0, _080A2A98  @ gBG1TilemapBuffer
	mov r8, r0
	movs r1, #0
	bl BG_Fill
	ldr r0, _080A2A9C  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	adds r2, r4, #0
	adds r2, #0x39
	ldrb r1, [r2]
	movs r0, #0xfc
	ands r0, r1
	movs r1, #0
	mov r9, r1
	movs r1, #0xe3
	ands r0, r1
	strb r0, [r2]
	ldr r0, [r4, #0x2c]
	bl sub_80A0B44
	bl sub_80A1B6C
	adds r1, r4, #0
	adds r1, #0x3c
	strb r0, [r1]
	adds r0, r4, #0
	bl sub_80A1F68
	adds r0, r4, #0
	bl sub_80A204C
	adds r0, r4, #0
	bl sub_80A207C
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl sub_80A2154
	ldr r0, _080A2AA0  @ gUnknown_08A1DC1C
	ldr r5, _080A2AA4  @ gUnknown_02020188
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	movs r2, #0x80
	lsls r2, r2, #5
	mov r0, r8
	adds r1, r5, #0
	bl CallARM_FillTileRect
	ldr r5, _080A2AA8  @ gCharacterData
	ldr r0, [r4, #0x2c]
	bl sub_80A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r5
	ldrh r2, [r0, #6]
	adds r6, #0x44
	movs r3, #0x80
	lsls r3, r3, #2
	movs r0, #2
	str r0, [sp]
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_8005E98
	adds r0, r4, #0
	bl sub_80A20FC
	adds r0, r4, #0
	bl sub_80A1E7C
	bl sub_80A1AE4
	adds r4, #0x3a
	mov r0, r9
	strb r0, [r4]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A2A94: .4byte gBG0TilemapBuffer
_080A2A98: .4byte gBG1TilemapBuffer
_080A2A9C: .4byte gBG2TilemapBuffer
_080A2AA0: .4byte gUnknown_08A1DC1C
_080A2AA4: .4byte gUnknown_02020188
_080A2AA8: .4byte gCharacterData

	THUMB_FUNC_START sub_80A2AAC
sub_80A2AAC: @ 0x080A2AAC
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r2, _080A2B58  @ gLCDControlBuffer
	ldrb r3, [r2, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	movs r4, #1
	orrs r0, r4
	strb r0, [r2, #0xc]
	ldrb r0, [r2, #0x10]
	movs r3, #3
	orrs r0, r3
	strb r0, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	ands r1, r0
	orrs r1, r4
	strb r1, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	orrs r0, r3
	strb r0, [r2, #0x18]
	movs r0, #1
	movs r1, #0
	movs r2, #0xc
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	adds r0, r5, #0
	adds r0, #0x38
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080A2B50
	adds r0, r5, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A2B50
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	lsls r0, r0, #3
	adds r0, #0xc4
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x18
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #1
	bl sub_80AD51C
	adds r1, r5, #0
	adds r1, #0x3a
	movs r0, #0xff
	strb r0, [r1]
_080A2B50:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A2B58: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80A2B5C
sub_80A2B5C: @ 0x080A2B5C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80ADDD4
	bl EndBG3Slider_
	movs r0, #0
	bl DeleteFaceByIndex
	ldr r0, [r4, #0x2c]
	bl sub_80A1A90
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A2B7C
sub_80A2B7C: @ 0x080A2B7C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x39
	ldrb r3, [r1]
	lsrs r1, r3, #2
	movs r2, #7
	ands r1, r2
	movs r2, #3
	ands r2, r3
	adds r2, #1
	bl sub_80A1AAC
	adds r4, #0x3e
	movs r3, #0
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A2BB8
	movs r1, #0x80
	lsls r1, r1, #1
	str r3, [sp]
	movs r0, #9
	movs r2, #0x80
	movs r3, #0x10
	bl sub_80029E8
	b _080A2BC8
_080A2BB8:
	ldrb r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	str r3, [sp]
	adds r1, r2, #0
	movs r3, #0x10
	bl sub_80029E8
_080A2BC8:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A2BD0
sub_80A2BD0: @ 0x080A2BD0
	push {lr}
	sub sp, #4
	adds r0, #0x3e
	ldrb r0, [r0]
	cmp r0, #0
	bne _080A2BEE
	movs r2, #0x80
	lsls r2, r2, #1
	str r0, [sp]
	movs r0, #9
	movs r1, #0x80
	movs r3, #0x10
	bl sub_80029E8
	b _080A2C00
_080A2BEE:
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0
	str r0, [sp]
	movs r0, #9
	adds r1, r2, #0
	movs r3, #0x10
	bl sub_80029E8
_080A2C00:
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A2C08
sub_80A2C08: @ 0x080A2C08
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080A2C28  @ gUnknown_08A19880
	bl Proc_CreateBlockingChild
	adds r1, r0, #0
	adds r1, #0x38
	strb r4, [r1]
	str r5, [r0, #0x2c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A2C28: .4byte gUnknown_08A19880

	THUMB_FUNC_START sub_80A2C2C
sub_80A2C2C: @ 0x080A2C2C
	ldr r0, _080A2C34  @ gUnknown_0203E884
	movs r1, #0
	strb r1, [r0]
	bx lr
	.align 2, 0
_080A2C34: .4byte gUnknown_0203E884

	THUMB_FUNC_START sub_80A2C38
sub_80A2C38: @ 0x080A2C38
	bx lr

	THUMB_FUNC_START sub_80A2C3C
sub_80A2C3C: @ 0x080A2C3C
	push {r4, r5, lr}
	sub sp, #8
	ldr r0, _080A2C94  @ 0x12345678
	str r0, [sp]
	ldr r0, _080A2C98  @ 0x87654321
	str r0, [sp, #4]
	bl SetSramFastFunc
	ldr r2, _080A2C9C  @ 0x04000200
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r5, _080A2CA0  @ gUnknown_08A1FAF4
	ldr r1, [r5]
	ldr r4, _080A2CA4  @ 0x000073A0
	adds r1, r1, r4
	mov r0, sp
	movs r2, #4
	bl WriteSramFast
	ldr r2, _080A2CA8  @ ReadSramFast
	ldr r0, [r5]
	adds r0, r0, r4
	add r1, sp, #4
	ldr r3, [r2]
	movs r2, #4
	bl _call_via_r3
	ldr r3, _080A2CAC  @ gUnknown_0203E88E
	movs r2, #0
	ldr r1, [sp, #4]
	ldr r0, [sp]
	cmp r1, r0
	bne _080A2C88
	movs r2, #1
_080A2C88:
	strb r2, [r3]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A2C94: .4byte 0x12345678
_080A2C98: .4byte 0x87654321
_080A2C9C: .4byte 0x04000200
_080A2CA0: .4byte gUnknown_08A1FAF4
_080A2CA4: .4byte 0x000073A0
_080A2CA8: .4byte ReadSramFast
_080A2CAC: .4byte gUnknown_0203E88E

	THUMB_FUNC_START sub_80A2CB0
sub_80A2CB0: @ 0x080A2CB0
	ldr r0, _080A2CBC  @ gUnknown_0203E88E
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr
	.align 2, 0
_080A2CBC: .4byte gUnknown_0203E88E

	THUMB_FUNC_START sub_80A2CC0
sub_80A2CC0: @ 0x080A2CC0
	push {r4, r5, r6, lr}
	sub sp, #0x40
	movs r1, #1
	negs r1, r1
	add r0, sp, #0x3c
_080A2CCA:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge _080A2CCA
	movs r4, #0
	ldr r6, _080A2CF4  @ gUnknown_08A1FAF4
	ldr r5, _080A2CF8  @ 0x000001FF
_080A2CD8:
	lsls r0, r4, #6
	ldr r1, [r6]
	adds r1, r1, r0
	mov r0, sp
	movs r2, #0x40
	bl WriteAndVerifySramFast
	adds r4, #1
	cmp r4, r5
	ble _080A2CD8
	add sp, #0x40
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A2CF4: .4byte gUnknown_08A1FAF4
_080A2CF8: .4byte 0x000001FF

	THUMB_FUNC_START sub_80A2CFC
sub_80A2CFC: @ 0x080A2CFC
	push {r4, lr}
	adds r2, r0, #0
	movs r3, #0
	movs r4, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	cmp r3, r1
	bge _080A2D1C
_080A2D0E:
	ldrh r0, [r2]
	adds r3, r3, r0
	eors r4, r0
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bne _080A2D0E
_080A2D1C:
	adds r0, r3, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START LoadSomeUnitStatThingUnlockIdk
LoadSomeUnitStatThingUnlockIdk: @ 0x080A2D28
	push {r4, r5, lr}
	sub sp, #0x64
	adds r5, r0, #0
	bl sub_80A2CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A2D9C
	cmp r5, #0
	bne _080A2D3E
	mov r5, sp
_080A2D3E:
	ldr r1, _080A2D88  @ ReadSramFast
	ldr r0, _080A2D8C  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r3, [r1]
	adds r1, r5, #0
	movs r2, #0x64
	bl _call_via_r3
	ldr r1, _080A2D90  @ gUnknown_08205C9C
	adds r0, r5, #0
	bl sub_8012E98
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A2D9C
	ldr r1, [r5, #8]
	ldr r0, _080A2D94  @ 0x00040624
	cmp r1, r0
	bne _080A2D9C
	ldrh r1, [r5, #0xc]
	ldr r0, _080A2D98  @ 0x0000200A
	cmp r1, r0
	bne _080A2D9C
	adds r4, r5, #0
	adds r4, #0x60
	adds r0, r5, #0
	movs r1, #0x50
	bl sub_80A2CFC
	ldrh r1, [r4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bne _080A2D9C
	movs r0, #1
	b _080A2D9E
	.align 2, 0
_080A2D88: .4byte ReadSramFast
_080A2D8C: .4byte gUnknown_08A1FAF4
_080A2D90: .4byte gUnknown_08205C9C
_080A2D94: .4byte 0x00040624
_080A2D98: .4byte 0x0000200A
_080A2D9C:
	movs r0, #0
_080A2D9E:
	add sp, #0x64
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START SaveSomeUnitStatThingUnlockIdk
SaveSomeUnitStatThingUnlockIdk: @ 0x080A2DA8
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x50
	bl sub_80A2CFC
	adds r1, r4, #0
	adds r1, #0x60
	strh r0, [r1]
	ldr r0, _080A2DCC  @ gUnknown_08A1FAF4
	ldr r1, [r0]
	adds r0, r4, #0
	movs r2, #0x64
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A2DCC: .4byte gUnknown_08A1FAF4

	THUMB_FUNC_START sub_80A2DD0
sub_80A2DD0: @ 0x080A2DD0
	push {lr}
	ldr r1, _080A2DE0  @ gUnknown_08A1FAF4
	ldr r1, [r1]
	movs r2, #0x64
	bl WriteAndVerifySramFast
	pop {r0}
	bx r0
	.align 2, 0
_080A2DE0: .4byte gUnknown_08A1FAF4

	THUMB_FUNC_START sub_80A2DE4
sub_80A2DE4: @ 0x080A2DE4
	push {r4, r5, lr}
	sub sp, #0x64
	bl sub_80A2CC0
	ldr r1, _080A2E9C  @ gUnknown_08205C9C
	mov r0, sp
	bl CopyString
	ldr r0, _080A2EA0  @ 0x00040624
	str r0, [sp, #8]
	mov r1, sp
	movs r4, #0
	movs r5, #0
	ldr r0, _080A2EA4  @ 0x0000200A
	strh r0, [r1, #0xc]
	mov r2, sp
	ldrb r1, [r2, #0xe]
	movs r3, #2
	negs r3, r3
	adds r0, r3, #0
	ands r0, r1
	strb r0, [r2, #0xe]
	movs r1, #3
	negs r1, r1
	ands r1, r0
	strb r1, [r2, #0xe]
	movs r0, #5
	negs r0, r0
	ands r0, r1
	strb r0, [r2, #0xe]
	movs r1, #9
	negs r1, r1
	ands r1, r0
	strb r1, [r2, #0xe]
	movs r0, #0x11
	negs r0, r0
	ands r0, r1
	strb r0, [r2, #0xe]
	movs r1, #0x21
	negs r1, r1
	ands r1, r0
	strb r1, [r2, #0xe]
	movs r0, #0x41
	negs r0, r0
	ands r0, r1
	strb r0, [r2, #0xe]
	mov r1, sp
	movs r0, #0
	strb r0, [r1, #0xe]
	ldrb r0, [r1, #0xf]
	ands r3, r0
	strb r3, [r1, #0xf]
	mov r0, sp
	strb r4, [r0, #0xf]
	strh r5, [r0, #0x10]
	strh r5, [r0, #0x12]
	adds r0, #0x63
	strb r4, [r0]
	subs r0, #1
	strb r4, [r0]
	add r3, sp, #0x20
	add r4, sp, #0x40
	add r1, sp, #0x14
	movs r2, #0
	subs r0, #0x43
_080A2E66:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _080A2E66
	adds r1, r3, #0
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x1f
_080A2E76:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _080A2E76
	adds r1, r4, #0
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x1f
_080A2E86:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _080A2E86
	mov r0, sp
	bl SaveSomeUnitStatThingUnlockIdk
	add sp, #0x64
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A2E9C: .4byte gUnknown_08205C9C
_080A2EA0: .4byte 0x00040624
_080A2EA4: .4byte 0x0000200A

	THUMB_FUNC_START sub_80A2EA8
sub_80A2EA8: @ 0x080A2EA8
	push {r4, lr}
	sub sp, #4
	ldr r4, _080A2ECC  @ gUnknown_02020188
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r2, _080A2ED0  @ 0x010000A2
	mov r0, sp
	adds r1, r4, #0
	bl CpuSet
	adds r0, r4, #0
	bl sub_80A3950
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A2ECC: .4byte gUnknown_02020188
_080A2ED0: .4byte 0x010000A2

	THUMB_FUNC_START GetSaveDataOffsetPointer
GetSaveDataOffsetPointer: @ 0x080A2ED4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r1, _080A2EE4  @ gUnknown_08A1FAF4
	ldr r1, [r1]
	adds r1, r1, r0
	adds r0, r1, #0
	bx lr
	.align 2, 0
_080A2EE4: .4byte gUnknown_08A1FAF4

	THUMB_FUNC_START sub_80A2EE8
sub_80A2EE8: @ 0x080A2EE8
	ldr r1, _080A2EF4  @ gUnknown_08A1FAF4
	ldr r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bx lr
	.align 2, 0
_080A2EF4: .4byte gUnknown_08A1FAF4

	THUMB_FUNC_START sub_80A2EF8
sub_80A2EF8: @ 0x080A2EF8
	push {r4, r5, lr}
	sub sp, #0x10
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne _080A2F06
	mov r4, sp
_080A2F06:
	ldr r2, _080A2F34  @ ReadSramFast
	ldr r0, _080A2F38  @ gUnknown_08A1FAF4
	lsls r1, r5, #4
	adds r1, #0x64
	ldr r0, [r0]
	adds r0, r0, r1
	ldr r3, [r2]
	adds r1, r4, #0
	movs r2, #0x10
	bl _call_via_r3
	ldrh r1, [r4, #4]
	ldr r0, _080A2F3C  @ 0x0000200A
	cmp r1, r0
	bne _080A2F88
	cmp r5, #6
	bhi _080A2F88
	lsls r0, r5, #2
	ldr r1, _080A2F40  @ _080A2F44
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080A2F34: .4byte ReadSramFast
_080A2F38: .4byte gUnknown_08A1FAF4
_080A2F3C: .4byte 0x0000200A
_080A2F40: .4byte _080A2F44
_080A2F44: @ jump table
	.4byte _080A2F60 @ case 0
	.4byte _080A2F60 @ case 1
	.4byte _080A2F60 @ case 2
	.4byte _080A2F60 @ case 3
	.4byte _080A2F60 @ case 4
	.4byte _080A2F68 @ case 5
	.4byte _080A2F70 @ case 6
_080A2F60:
	ldr r1, _080A2F64  @ 0x00040624
	b _080A2F72
	.align 2, 0
_080A2F64: .4byte 0x00040624
_080A2F68:
	ldr r1, _080A2F6C  @ 0x00020112
	b _080A2F72
	.align 2, 0
_080A2F6C: .4byte 0x00020112
_080A2F70:
	ldr r1, _080A2F84  @ 0x00020223
_080A2F72:
	ldr r0, [r4]
	cmp r0, r1
	bne _080A2F88
	adds r0, r4, #0
	bl sub_80A6430
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _080A2F8A
	.align 2, 0
_080A2F84: .4byte 0x00020223
_080A2F88:
	movs r0, #0
_080A2F8A:
	add sp, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A2F94
sub_80A2F94: @ 0x080A2F94
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	movs r7, #0
	movs r5, #0
	ldr r0, _080A2FC4  @ 0x0000200A
	strh r0, [r4, #4]
	adds r0, r6, #0
	bl GetSaveDataLocation
	strh r0, [r4, #8]
	cmp r6, #6
	bgt _080A301A
	ldrb r0, [r4, #6]
	cmp r0, #2
	beq _080A2FE8
	cmp r0, #2
	bgt _080A2FC8
	cmp r0, #0
	beq _080A2FD2
	cmp r0, #1
	beq _080A2FDC
	b _080A301A
	.align 2, 0
_080A2FC4: .4byte 0x0000200A
_080A2FC8:
	cmp r0, #3
	beq _080A2FF4
	cmp r0, #0xff
	beq _080A2FFC
	b _080A301A
_080A2FD2:
	ldr r0, _080A2FD8  @ 0x00000DC8
	strh r0, [r4, #0xa]
	b _080A3002
	.align 2, 0
_080A2FD8: .4byte 0x00000DC8
_080A2FDC:
	ldr r0, _080A2FE4  @ 0x00001F78
	strh r0, [r4, #0xa]
	b _080A3002
	.align 2, 0
_080A2FE4: .4byte 0x00001F78
_080A2FE8:
	ldr r0, _080A2FF0  @ 0x00000874
	strh r0, [r4, #0xa]
	b _080A3002
	.align 2, 0
_080A2FF0: .4byte 0x00000874
_080A2FF4:
	movs r0, #0xc0
	lsls r0, r0, #4
	strh r0, [r4, #0xa]
	b _080A3002
_080A2FFC:
	strh r5, [r4, #0xa]
	strh r5, [r4, #8]
	strh r5, [r4, #4]
_080A3002:
	adds r0, r4, #0
	bl sub_80A6454
	ldr r0, _080A3020  @ gUnknown_08A1FAF4
	lsls r2, r6, #4
	adds r2, #0x64
	ldr r1, [r0]
	adds r1, r1, r2
	adds r0, r4, #0
	movs r2, #0x10
	bl WriteAndVerifySramFast
_080A301A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A3020: .4byte gUnknown_08A1FAF4

	THUMB_FUNC_START sub_80A3024
sub_80A3024: @ 0x080A3024
	push {r4, lr}
	sub sp, #0x14
	adds r4, r0, #0
	cmp r4, #6
	bgt _080A3050
	add r0, sp, #0x10
	ldr r2, _080A3058  @ 0x0000FFFF
	adds r1, r2, #0
	strh r1, [r0]
	ldr r2, _080A305C  @ 0x01000008
	mov r1, sp
	bl CpuSet
	ldr r1, _080A3060  @ gUnknown_08A1FAF4
	lsls r0, r4, #4
	adds r0, #0x64
	ldr r1, [r1]
	adds r1, r1, r0
	mov r0, sp
	movs r2, #0x10
	bl WriteAndVerifySramFast
_080A3050:
	add sp, #0x14
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A3058: .4byte 0x0000FFFF
_080A305C: .4byte 0x01000008
_080A3060: .4byte gUnknown_08A1FAF4

	THUMB_FUNC_START GetSaveDataLocation
GetSaveDataLocation: @ 0x080A3064
	push {lr}
	cmp r0, #6
	bhi _080A310C
	lsls r0, r0, #2
	ldr r1, _080A3074  @ _080A3078
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080A3074: .4byte _080A3078
_080A3078: @ jump table
	.4byte _080A3094 @ case 0
	.4byte _080A30A8 @ case 1
	.4byte _080A30BC @ case 2
	.4byte _080A30D0 @ case 3
	.4byte _080A30DC @ case 4
	.4byte _080A30F0 @ case 5
	.4byte _080A3104 @ case 6
_080A3094:
	ldr r0, _080A30A0  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r1, _080A30A4  @ 0x00003FC4
	adds r0, r0, r1
	b _080A310E
	.align 2, 0
_080A30A0: .4byte gUnknown_08A1FAF4
_080A30A4: .4byte 0x00003FC4
_080A30A8:
	ldr r0, _080A30B4  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r1, _080A30B8  @ 0x00004D8C
	adds r0, r0, r1
	b _080A310E
	.align 2, 0
_080A30B4: .4byte gUnknown_08A1FAF4
_080A30B8: .4byte 0x00004D8C
_080A30BC:
	ldr r0, _080A30C8  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r1, _080A30CC  @ 0x00005B54
	adds r0, r0, r1
	b _080A310E
	.align 2, 0
_080A30C8: .4byte gUnknown_08A1FAF4
_080A30CC: .4byte 0x00005B54
_080A30D0:
	ldr r0, _080A30D8  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	adds r0, #0xd4
	b _080A310E
	.align 2, 0
_080A30D8: .4byte gUnknown_08A1FAF4
_080A30DC:
	ldr r0, _080A30E8  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r1, _080A30EC  @ 0x0000204C
	adds r0, r0, r1
	b _080A310E
	.align 2, 0
_080A30E8: .4byte gUnknown_08A1FAF4
_080A30EC: .4byte 0x0000204C
_080A30F0:
	ldr r0, _080A30FC  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r1, _080A3100  @ 0x0000691C
	adds r0, r0, r1
	b _080A310E
	.align 2, 0
_080A30FC: .4byte gUnknown_08A1FAF4
_080A3100: .4byte 0x0000691C
_080A3104:
	ldr r0, _080A3108  @ 0x0E007400
	b _080A310E
	.align 2, 0
_080A3108: .4byte 0x0E007400
_080A310C:
	movs r0, #0
_080A310E:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3114
sub_80A3114: @ 0x080A3114
	push {lr}
	sub sp, #0x10
	adds r1, r0, #0
	mov r0, sp
	bl sub_80A2EF8
	mov r0, sp
	ldrh r0, [r0, #8]
	bl GetSaveDataOffsetPointer
	add sp, #0x10
	pop {r1}
	bx r1

	THUMB_FUNC_START SaveLocalEventIndexes
SaveLocalEventIndexes: @ 0x080A3130
	push {r4, r5, lr}
	adds r4, r0, #0
	bl GetLocalEventIdStorage
	adds r5, r0, #0
	bl GetLocalEventIdStorageSize
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START SaveGlobalEventIndexes
SaveGlobalEventIndexes: @ 0x080A3150
	push {r4, r5, lr}
	adds r4, r0, #0
	bl GetGlobalEventIdStorage
	adds r5, r0, #0
	bl GetGlobalEventIdStorageSize
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START LoadLocalEventIds
LoadLocalEventIds: @ 0x080A3170
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r4, _080A3194  @ ReadSramFast
	bl GetLocalEventIdStorage
	adds r5, r0, #0
	bl GetLocalEventIdStorageSize
	adds r2, r0, #0
	ldr r3, [r4]
	adds r0, r6, #0
	adds r1, r5, #0
	bl _call_via_r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A3194: .4byte ReadSramFast

	THUMB_FUNC_START LoadGlobalEventIds
LoadGlobalEventIds: @ 0x080A3198
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r4, _080A31BC  @ ReadSramFast
	bl GetGlobalEventIdStorage
	adds r5, r0, #0
	bl GetGlobalEventIdStorageSize
	adds r2, r0, #0
	ldr r3, [r4]
	adds r0, r6, #0
	adds r1, r5, #0
	bl _call_via_r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A31BC: .4byte ReadSramFast

	THUMB_FUNC_START sub_80A31C0
sub_80A31C0: @ 0x080A31C0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r4, _080A31E0  @ ReadSramFast
	bl GetGlobalEventIdStorageSize
	adds r2, r0, #0
	ldr r3, [r4]
	adds r0, r5, #0
	adds r1, r6, #0
	bl _call_via_r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A31E0: .4byte ReadSramFast

	THUMB_FUNC_START SaveConvoyItems
SaveConvoyItems: @ 0x080A31E4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xb0
	mov r8, r0
	bl GetConvoyItemArray
	adds r6, r0, #0
	add r5, sp, #0x64
	movs r0, #0
	mov ip, r0
	movs r7, #0
_080A31FC:
	mov r0, sp
	adds r1, r0, r7
	ldrh r0, [r6]
	strb r0, [r1]
	ldrh r0, [r6]
	lsrs r4, r0, #8
	movs r0, #0x3f
	ands r4, r0
	movs r3, #7
	mov r0, ip
	ands r3, r0
	ldr r0, _080A3264  @ gUnknown_08205CA4
	adds r0, r3, r0
	ldrb r2, [r5]
	ldrb r1, [r0]
	ands r1, r2
	adds r0, r4, #0
	lsls r0, r3
	orrs r1, r0
	strb r1, [r5]
	cmp r3, #1
	ble _080A3242
	adds r5, #1
	cmp r3, #2
	ble _080A3242
	ldr r0, _080A3268  @ gUnknown_08205CAC
	adds r0, r3, r0
	ldrb r2, [r5]
	ldrb r1, [r0]
	ands r1, r2
	movs r0, #8
	subs r0, r0, r3
	asrs r4, r0
	orrs r1, r4
	strb r1, [r5]
_080A3242:
	movs r0, #6
	add ip, r0
	adds r6, #2
	adds r7, #1
	cmp r7, #0x63
	ble _080A31FC
	mov r0, sp
	mov r1, r8
	movs r2, #0xb0
	bl WriteAndVerifySramFast
	add sp, #0xb0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A3264: .4byte gUnknown_08205CA4
_080A3268: .4byte gUnknown_08205CAC

	THUMB_FUNC_START LoadConvoyItems
LoadConvoyItems: @ 0x080A326C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xb0
	ldr r1, _080A32E0  @ ReadSramFast
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0xb0
	bl _call_via_r3
	bl GetConvoyItemArray
	adds r4, r0, #0
	add r5, sp, #0x64
	movs r7, #0
	movs r6, #0
_080A3288:
	mov r1, sp
	adds r0, r1, r6
	ldrb r0, [r0]
	strh r0, [r4]
	movs r3, #7
	ands r3, r7
	ldrb r1, [r5]
	ldr r0, _080A32E4  @ gUnknown_08205CA4
	adds r0, r3, r0
	ldrb r0, [r0]
	bics r1, r0
	asrs r1, r3
	lsls r1, r1, #0x18
	lsrs r2, r1, #0x18
	cmp r3, #1
	ble _080A32C4
	adds r5, #1
	cmp r3, #2
	ble _080A32C4
	ldrb r1, [r5]
	ldr r0, _080A32E8  @ gUnknown_08205CAC
	adds r0, r3, r0
	ldrb r0, [r0]
	bics r1, r0
	movs r0, #8
	subs r0, r0, r3
	lsls r1, r0
	orrs r2, r1
	lsls r0, r2, #0x18
	lsrs r2, r0, #0x18
_080A32C4:
	lsls r0, r2, #8
	ldrh r1, [r4]
	orrs r0, r1
	strh r0, [r4]
	adds r7, #6
	adds r4, #2
	adds r6, #1
	cmp r6, #0x63
	ble _080A3288
	add sp, #0xb0
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A32E0: .4byte ReadSramFast
_080A32E4: .4byte gUnknown_08205CA4
_080A32E8: .4byte gUnknown_08205CAC

	THUMB_FUNC_START sub_80A32EC
sub_80A32EC: @ 0x080A32EC
	movs r0, #1
	bx lr

	THUMB_FUNC_START sub_80A32F0
sub_80A32F0: @ 0x080A32F0
	push {r4, lr}
	bl sub_80A2CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A3304
	movs r0, #0
	b _080A3320
_080A3300:
	movs r0, #1
	b _080A3320
_080A3304:
	movs r4, #0
_080A3306:
	adds r0, r4, #0
	bl sub_80A52DC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A3300
	adds r4, #1
	cmp r4, #2
	ble _080A3306
	bl sub_80A6A68
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
_080A3320:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3328
sub_80A3328: @ 0x080A3328
	movs r0, #1
	bx lr

	THUMB_FUNC_START sub_80A332C
sub_80A332C: @ 0x080A332C
	push {r4, lr}
	movs r0, #0
	bl sub_80A3834
	adds r4, r0, #0
	bl sub_80A3870
	ands r0, r4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3348
sub_80A3348: @ 0x080A3348
	push {r4, lr}
	sub sp, #0x94
	movs r4, #0
	bl sub_80A3870
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A335C
	movs r0, #0
	b _080A33BC
_080A335C:
	mov r0, sp
	bl sub_80A3898
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A33BA
	mov r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _080A3374
	movs r4, #1
_080A3374:
	mov r0, sp
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _080A3382
	movs r0, #2
	orrs r4, r0
_080A3382:
	add r0, sp, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _080A3390
	movs r0, #4
	orrs r4, r0
_080A3390:
	add r0, sp, #0x48
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _080A339E
	movs r0, #8
	orrs r4, r0
_080A339E:
	add r0, sp, #0x60
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _080A33AC
	movs r0, #0x10
	orrs r4, r0
_080A33AC:
	add r0, sp, #0x78
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _080A33BA
	movs r0, #0x20
	orrs r4, r0
_080A33BA:
	adds r0, r4, #0
_080A33BC:
	add sp, #0x94
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A33C4
sub_80A33C4: @ 0x080A33C4
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A33E2
	bl sub_80A6C1C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A33E2
	movs r0, #1
	b _080A33E4
_080A33E2:
	movs r0, #0
_080A33E4:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A33EC
sub_80A33EC: @ 0x080A33EC
	push {r4, lr}
	bl sub_80A2CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A33FE
	b _080A3412
_080A33FA:
	movs r0, #1
	b _080A3414
_080A33FE:
	movs r4, #0
_080A3400:
	adds r0, r4, #0
	bl sub_80A530C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A33FA
	adds r4, #1
	cmp r4, #2
	ble _080A3400
_080A3412:
	movs r0, #0
_080A3414:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A341C
sub_80A341C: @ 0x080A341C
	push {r4, lr}
	sub sp, #0x4c
	ldr r4, _080A3458  @ gUnknown_02020188
	adds r0, r4, #0
	bl sub_80A38F4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A345C
	movs r3, #0
	adds r1, r4, #0
	movs r2, #0xf
_080A3434:
	ldrb r0, [r1]
	cmp r0, #0
	beq _080A3448
	ldrb r0, [r1, #1]
	cmp r0, #0
	bne _080A3442
	movs r3, #1
_080A3442:
	cmp r0, #2
	bne _080A3448
	movs r3, #1
_080A3448:
	adds r1, #0x14
	subs r2, #1
	cmp r2, #0
	bge _080A3434
	cmp r3, #0
	beq _080A345C
	movs r0, #1
	b _080A345E
	.align 2, 0
_080A3458: .4byte gUnknown_02020188
_080A345C:
	movs r0, #0
_080A345E:
	add sp, #0x4c
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3468
sub_80A3468: @ 0x080A3468
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	ldr r7, _080A3498  @ gUnknown_08A1FAF8
	ldr r0, [r7]
	cmp r0, #0
	beq _080A34C4
	movs r6, #0
	adds r5, r7, #0
	adds r3, r7, #4
	adds r4, r7, #0
_080A347C:
	ldr r0, [r4]
	cmp r0, r2
	bne _080A3488
	ldr r0, [r3]
	cmp r0, r1
	bne _080A3494
_080A3488:
	ldr r0, [r4]
	cmp r0, r1
	bne _080A349C
	ldr r0, [r3]
	cmp r0, r2
	beq _080A34A2
_080A3494:
	movs r0, #2
	b _080A34C6
	.align 2, 0
_080A3498: .4byte gUnknown_08A1FAF8
_080A349C:
	ldr r0, [r3]
	cmp r0, r2
	bne _080A34A8
_080A34A2:
	ldr r0, [r4]
	cmp r0, r1
	bne _080A3494
_080A34A8:
	ldr r0, [r3]
	cmp r0, r1
	bne _080A34B4
	ldr r0, [r5]
	cmp r0, r2
	bne _080A3494
_080A34B4:
	adds r6, #8
	adds r5, #8
	adds r3, #8
	adds r4, #8
	adds r0, r6, r7
	ldr r0, [r0]
	cmp r0, #0
	bne _080A347C
_080A34C4:
	movs r0, #3
_080A34C6:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A34CC
sub_80A34CC: @ 0x080A34CC
	push {r4, r5, r6, lr}
	movs r5, #0
	bl sub_80847F8
	adds r4, r0, #0
	ldrh r0, [r4]
	ldr r1, _080A34FC  @ 0x0000FFFF
	cmp r0, r1
	beq _080A34F2
	adds r6, r1, #0
_080A34E0:
	ldrh r0, [r4]
	ldrh r1, [r4, #2]
	bl sub_80A3468
	adds r5, r5, r0
	adds r4, #0x10
	ldrh r0, [r4]
	cmp r0, r6
	bne _080A34E0
_080A34F2:
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080A34FC: .4byte 0x0000FFFF

	THUMB_FUNC_START sub_80A3500
sub_80A3500: @ 0x080A3500
	push {r4, r5, r6, r7, lr}
	sub sp, #0x64
	adds r4, r0, #0
	movs r5, #0
	cmp r4, #0
	bne _080A3514
	mov r4, sp
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
_080A3514:
	movs r0, #0
	adds r7, r4, #0
	adds r7, #0x20
	movs r6, #3
_080A351C:
	movs r2, #0
	adds r4, r0, #1
	adds r0, r7, r0
	ldrb r3, [r0]
_080A3524:
	lsls r1, r2, #1
	adds r0, r3, #0
	asrs r0, r1
	ands r0, r6
	adds r5, r5, r0
	adds r2, #1
	cmp r2, #3
	ble _080A3524
	adds r0, r4, #0
	cmp r0, #0x1f
	ble _080A351C
	adds r0, r5, #0
	add sp, #0x64
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3544
sub_80A3544: @ 0x080A3544
	push {r4, r5, lr}
	movs r0, #0
	bl sub_80A3500
	adds r4, r0, #0
	bl sub_80A34CC
	adds r5, r0, #0
	cmp r4, #0
	ble _080A356A
	movs r0, #0x64
	muls r0, r4, r0
	adds r1, r5, #0
	bl __divsi3
	cmp r0, #0
	bne _080A356A
	movs r4, #1
	b _080A3576
_080A356A:
	movs r0, #0x64
	muls r0, r4, r0
	adds r1, r5, #0
	bl __divsi3
	adds r4, r0, #0
_080A3576:
	cmp r4, #0x64
	ble _080A357C
	movs r4, #0x64
_080A357C:
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3584
sub_80A3584: @ 0x080A3584
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x64
	mov r8, r0
	adds r7, r1, #0
	adds r5, r2, #0
	movs r6, #0
	bl sub_80847F8
	adds r4, r0, #0
	cmp r5, #0
	bne _080A35A6
	mov r5, sp
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
_080A35A6:
	adds r3, r5, #0
	adds r3, #0x20
	b _080A35B0
_080A35AC:
	adds r6, #1
	adds r4, #0x10
_080A35B0:
	ldrh r1, [r4]
	ldr r0, _080A35E8  @ 0x0000FFFF
	cmp r1, r0
	beq _080A35CC
	cmp r1, r8
	bne _080A35C2
	ldrh r0, [r4, #2]
	cmp r0, r7
	beq _080A35CC
_080A35C2:
	cmp r1, r7
	bne _080A35AC
	ldrh r0, [r4, #2]
	cmp r0, r8
	bne _080A35AC
_080A35CC:
	asrs r0, r6, #2
	movs r2, #3
	ands r6, r2
	lsls r1, r6, #1
	adds r0, r3, r0
	ldrb r0, [r0]
	asrs r0, r1
	ands r0, r2
	add sp, #0x64
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080A35E8: .4byte 0x0000FFFF

	THUMB_FUNC_START sub_80A35EC
sub_80A35EC: @ 0x080A35EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x78
	str r0, [sp, #0x64]
	mov r8, r1
	str r2, [sp, #0x68]
	ldr r0, _080A3630  @ gCharacterData
	mov sl, r0
	ldr r6, [sp, #0x64]
	subs r6, #1
	movs r0, #0x34
	adds r1, r6, #0
	muls r1, r0, r1
	mov r9, r1
	mov r0, sl
	adds r0, #0x2c
	adds r7, r1, r0
	ldr r0, [r7]
	cmp r0, #0
	bne _080A3634
	movs r0, #0
	movs r3, #6
_080A361E:
	mov r2, r8
	strb r0, [r2]
	movs r1, #1
	add r8, r1
	subs r3, #1
	cmp r3, #0
	bge _080A361E
	b _080A370A
	.align 2, 0
_080A3630: .4byte gCharacterData
_080A3634:
	movs r4, #0
	bl sub_80847F8
	adds r5, r0, #0
	ldr r2, [sp, #0x68]
	cmp r2, #0
	bne _080A364E
	mov r1, sp
	adds r0, r1, #0
	str r0, [sp, #0x68]
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
_080A364E:
	ldrh r0, [r5]
	ldr r1, _080A36CC  @ 0x0000FFFF
	str r6, [sp, #0x74]
	cmp r0, r1
	beq _080A36E8
	str r7, [sp, #0x70]
	mov r2, r9
	str r2, [sp, #0x6c]
_080A365E:
	ldrh r0, [r5]
	ldr r1, [sp, #0x64]
	cmp r0, r1
	beq _080A3678
	ldrh r0, [r5, #2]
	adds r2, r4, #1
	mov r9, r2
	movs r1, #0x10
	adds r1, r1, r5
	mov ip, r1
	ldr r2, [sp, #0x64]
	cmp r0, r2
	bne _080A36DC
_080A3678:
	asrs r1, r4, #2
	adds r0, r4, #0
	movs r2, #3
	ands r0, r2
	lsls r0, r0, #1
	mov sl, r0
	movs r3, #0
	ldr r2, [sp, #0x70]
	ldr r0, [r2]
	adds r4, #1
	mov r9, r4
	movs r2, #0x10
	adds r2, r2, r5
	mov ip, r2
	ldrb r0, [r0, #0x15]
	cmp r3, r0
	bge _080A36DC
	ldr r0, _080A36D0  @ gCharacterData+0x2C
	ldr r2, [sp, #0x6c]
	adds r6, r2, r0
	ldr r0, [sp, #0x68]
	adds r0, #0x20
	adds r7, r0, r1
_080A36A6:
	ldr r4, [r6]
	adds r0, r4, r3
	ldrh r1, [r5]
	ldrb r2, [r0]
	cmp r1, r2
	beq _080A36B8
	ldrh r0, [r5, #2]
	cmp r0, r2
	bne _080A36D4
_080A36B8:
	mov r0, r8
	adds r1, r0, r3
	ldrb r0, [r7]
	mov r2, sl
	asrs r0, r2
	movs r2, #3
	ands r0, r2
	strb r0, [r1]
	b _080A36DC
	.align 2, 0
_080A36CC: .4byte 0x0000FFFF
_080A36D0: .4byte gCharacterData+0x2C
_080A36D4:
	adds r3, #1
	ldrb r4, [r4, #0x15]
	cmp r3, r4
	blt _080A36A6
_080A36DC:
	mov r4, r9
	mov r5, ip
	ldrh r0, [r5]
	ldr r1, _080A371C  @ 0x0000FFFF
	cmp r0, r1
	bne _080A365E
_080A36E8:
	movs r0, #0x34
	ldr r2, [sp, #0x74]
	muls r0, r2, r0
	ldr r1, _080A3720  @ gCharacterData
	adds r1, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	ldrb r3, [r0, #0x15]
	cmp r3, #6
	bgt _080A370A
	movs r1, #0
_080A36FE:
	mov r2, r8
	adds r0, r2, r3
	strb r1, [r0]
	adds r3, #1
	cmp r3, #6
	ble _080A36FE
_080A370A:
	add sp, #0x78
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A371C: .4byte 0x0000FFFF
_080A3720: .4byte gCharacterData

	THUMB_FUNC_START sub_80A3724
sub_80A3724: @ 0x080A3724
	push {r4, r5, r6, r7, lr}
	sub sp, #0x64
	adds r7, r0, #0
	adds r5, r1, #0
	movs r6, #3
	ands r6, r2
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A379C
	movs r4, #0
	bl sub_80847F8
	adds r2, r0, #0
	add r0, sp, #0x20
	mov ip, r0
	b _080A374E
_080A374A:
	adds r4, #1
	adds r2, #0x10
_080A374E:
	ldrh r1, [r2]
	ldr r0, _080A3798  @ 0x0000FFFF
	cmp r1, r0
	beq _080A376A
	cmp r1, r7
	bne _080A3760
	ldrh r0, [r2, #2]
	cmp r0, r5
	beq _080A376A
_080A3760:
	cmp r1, r5
	bne _080A374A
	ldrh r0, [r2, #2]
	cmp r0, r7
	bne _080A374A
_080A376A:
	asrs r0, r4, #2
	movs r3, #3
	ands r4, r3
	lsls r1, r4, #1
	mov r2, ip
	adds r4, r2, r0
	ldrb r2, [r4]
	adds r0, r2, #0
	asrs r0, r1
	ands r0, r3
	cmp r0, r6
	bge _080A379C
	adds r0, r3, #0
	lsls r0, r1
	bics r2, r0
	lsls r6, r1
	adds r0, r2, r6
	strb r0, [r4]
	mov r0, sp
	bl SaveSomeUnitStatThingUnlockIdk
	movs r0, #1
	b _080A379E
	.align 2, 0
_080A3798: .4byte 0x0000FFFF
_080A379C:
	movs r0, #0
_080A379E:
	add sp, #0x64
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START SetSomeUnitStatThingUnlockMaybeIdk
SetSomeUnitStatThingUnlockMaybeIdk: @ 0x080A37A8
	push {r4, r5, lr}
	sub sp, #0x64
	adds r4, r0, #0
	adds r5, r1, #0
	movs r3, #0
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r4, r0
	bgt _080A37E8
	cmp r5, #0
	bne _080A37C8
	mov r5, sp
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	movs r3, #1
_080A37C8:
	asrs r0, r4, #3
	adds r2, r5, #0
	adds r2, #0x40
	adds r2, r2, r0
	movs r1, #7
	ands r1, r4
	movs r0, #1
	lsls r0, r1
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	cmp r3, #0
	beq _080A37E8
	adds r0, r5, #0
	bl SaveSomeUnitStatThingUnlockIdk
_080A37E8:
	add sp, #0x64
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A37F0
sub_80A37F0: @ 0x080A37F0
	push {r4, r5, lr}
	sub sp, #0x64
	adds r5, r0, #0
	adds r4, r1, #0
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r5, r0
	bgt _080A3824
	cmp r4, #0
	bne _080A380C
	mov r4, sp
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
_080A380C:
	asrs r1, r5, #3
	adds r0, r4, #0
	adds r0, #0x40
	adds r0, r0, r1
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r5
	asrs r1, r0
	movs r0, #1
	ands r1, r0
	cmp r1, #0
	bne _080A3828
_080A3824:
	movs r0, #0
	b _080A382A
_080A3828:
	movs r0, #1
_080A382A:
	add sp, #0x64
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3834
sub_80A3834: @ 0x080A3834
	push {r4, lr}
	sub sp, #0x64
	adds r4, r0, #0
	cmp r4, #0
	bne _080A3846
	mov r4, sp
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
_080A3846:
	movs r1, #0
	adds r2, r4, #0
	adds r2, #0x40
_080A384C:
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A3858
	movs r0, #1
	b _080A3860
_080A3858:
	adds r1, #1
	cmp r1, #0x1f
	ble _080A384C
	movs r0, #0
_080A3860:
	add sp, #0x64
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3868
sub_80A3868: @ 0x080A3868
	bx lr

	THUMB_FUNC_START __malloc_unlock_3
__malloc_unlock_3: @ 0x080A386C
	bx lr

	THUMB_FUNC_START sub_80A3870
sub_80A3870: @ 0x080A3870
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A3890
	mov r0, sp
	ldrb r1, [r0, #0xe]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A3890
	movs r0, #1
	b _080A3892
_080A3890:
	movs r0, #0
_080A3892:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3898
sub_80A3898: @ 0x080A3898
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80A2CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A38EC
	cmp r5, #0
	bne _080A38AC
	ldr r5, _080A38DC  @ gUnknown_02020188
_080A38AC:
	ldr r1, _080A38E0  @ ReadSramFast
	ldr r0, _080A38E4  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r2, _080A38E8  @ 0x00007190
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r5, #0
	movs r2, #0x94
	bl _call_via_r3
	adds r4, r5, #0
	adds r4, #0x90
	adds r0, r5, #0
	movs r1, #0x90
	bl sub_80A2CFC
	ldrh r1, [r4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bne _080A38EC
	movs r0, #1
	b _080A38EE
	.align 2, 0
_080A38DC: .4byte gUnknown_02020188
_080A38E0: .4byte ReadSramFast
_080A38E4: .4byte gUnknown_08A1FAF4
_080A38E8: .4byte 0x00007190
_080A38EC:
	movs r0, #0
_080A38EE:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A38F4
sub_80A38F4: @ 0x080A38F4
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80A2CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A3948
	cmp r5, #0
	bne _080A3908
	ldr r5, _080A3938  @ gUnknown_02020188
_080A3908:
	ldr r1, _080A393C  @ ReadSramFast
	ldr r0, _080A3940  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r2, _080A3944  @ 0x0000725C
	adds r0, r0, r2
	movs r2, #0xa2
	lsls r2, r2, #1
	ldr r3, [r1]
	adds r1, r5, #0
	bl _call_via_r3
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r4, r5, r1
	adds r0, r5, #0
	bl sub_80A2CFC
	ldrh r1, [r4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bne _080A3948
	movs r0, #1
	b _080A394A
	.align 2, 0
_080A3938: .4byte gUnknown_02020188
_080A393C: .4byte ReadSramFast
_080A3940: .4byte gUnknown_08A1FAF4
_080A3944: .4byte 0x0000725C
_080A3948:
	movs r0, #0
_080A394A:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3950
sub_80A3950: @ 0x080A3950
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0xa0
	lsls r4, r4, #1
	adds r1, r4, #0
	bl sub_80A2CFC
	adds r4, r5, r4
	strh r0, [r4]
	ldr r0, _080A397C  @ gUnknown_08A1FAF4
	ldr r1, [r0]
	ldr r0, _080A3980  @ 0x0000725C
	adds r1, r1, r0
	movs r2, #0xa2
	lsls r2, r2, #1
	adds r0, r5, #0
	bl WriteAndVerifySramFast
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A397C: .4byte gUnknown_08A1FAF4
_080A3980: .4byte 0x0000725C

	THUMB_FUNC_START sub_80A3984
sub_80A3984: @ 0x080A3984
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x90
	bl sub_80A2CFC
	adds r1, r4, #0
	adds r1, #0x90
	strh r0, [r1]
	ldr r0, _080A39AC  @ gUnknown_08A1FAF4
	ldr r1, [r0]
	ldr r0, _080A39B0  @ 0x00007190
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0x94
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A39AC: .4byte gUnknown_08A1FAF4
_080A39B0: .4byte 0x00007190

	THUMB_FUNC_START sub_80A39B4
sub_80A39B4: @ 0x080A39B4
	push {lr}
	sub sp, #0x98
	add r0, sp, #0x94
	movs r1, #0
	strh r1, [r0]
	ldr r2, _080A39D4  @ 0x0100004A
	mov r1, sp
	bl CpuSet
	mov r0, sp
	bl sub_80A3984
	add sp, #0x98
	pop {r0}
	bx r0
	.align 2, 0
_080A39D4: .4byte 0x0100004A

	THUMB_FUNC_START sub_80A39D8
sub_80A39D8: @ 0x080A39D8
	ldr r0, _080A39E0  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0x1b]
	subs r0, #1
	bx lr
	.align 2, 0
_080A39E0: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A39E4
sub_80A39E4: @ 0x080A39E4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x98
	adds r6, r0, #0
	adds r7, r1, #0
	adds r5, r2, #0
	add r0, sp, #0x94
	movs r4, #0
	strh r4, [r0]
	ldr r2, _080A3A1C  @ 0x0100000C
	adds r1, r6, #0
	bl CpuSet
	mov r0, sp
	adds r0, #0x96
	strh r4, [r0]
	ldr r2, _080A3A20  @ 0x0100004A
	mov r1, sp
	bl CpuSet
	mov r0, sp
	bl sub_80A3898
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A3A24
	movs r0, #0
	b _080A3A40
	.align 2, 0
_080A3A1C: .4byte 0x0100000C
_080A3A20: .4byte 0x0100004A
_080A3A24:
	lsls r0, r5, #1
	adds r0, r0, r5
	adds r0, r7, r0
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r1, r6, #0
	mov r3, sp
	adds r0, r3, r2
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	movs r0, #1
_080A3A40:
	add sp, #0x98
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3A48
sub_80A3A48: @ 0x080A3A48
	push {r4, r5, r6, lr}
	sub sp, #0x94
	adds r6, r0, #0
	adds r5, r1, #0
	adds r4, r2, #0
	mov r0, sp
	bl sub_80A3898
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A3A7E
	lsls r1, r4, #1
	adds r1, r1, r4
	adds r1, r5, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	mov r2, sp
	adds r1, r2, r0
	adds r0, r6, #0
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	mov r0, sp
	bl sub_80A3984
_080A3A7E:
	add sp, #0x94
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A3A88
sub_80A3A88: @ 0x080A3A88
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldrb r2, [r5]
	lsls r0, r2, #0x1f
	cmp r0, #0
	beq _080A3B36
	ldrb r0, [r4]
	lsls r0, r0, #0x1c
	lsrs r1, r0, #0x1d
	lsls r0, r2, #0x1c
	lsrs r0, r0, #0x1d
	cmp r1, r0
	bgt _080A3B36
	cmp r1, r0
	bne _080A3B40
	ldrb r0, [r4, #0x17]
	cmp r0, #0
	beq _080A3AB4
	ldrb r1, [r5, #0x17]
	cmp r0, r1
	bne _080A3B36
_080A3AB4:
	ldrh r1, [r4, #2]
	lsls r1, r1, #0x11
	lsrs r1, r1, #0x18
	ldrh r0, [r5, #2]
	lsls r0, r0, #0x11
	lsrs r0, r0, #0x18
	cmp r1, r0
	bgt _080A3B36
	ldrb r1, [r4, #7]
	lsrs r1, r1, #5
	ldr r0, [r4, #8]
	ldr r2, _080A3B3C  @ 0x001FFFFF
	ands r0, r2
	lsls r3, r0, #3
	orrs r3, r1
	ldrb r1, [r5, #7]
	lsrs r1, r1, #5
	ldr r0, [r5, #8]
	ands r0, r2
	lsls r0, r0, #3
	orrs r0, r1
	cmp r3, r0
	bgt _080A3B36
	cmp r3, r0
	bne _080A3B40
	ldr r0, [r4, #4]
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x16
	lsls r3, r0, #3
	subs r3, r3, r0
	lsls r3, r3, #5
	adds r3, r3, r0
	lsls r3, r3, #4
	ldrb r1, [r4, #6]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x1a
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	adds r3, r3, r0
	ldrh r0, [r4, #6]
	lsls r0, r0, #0x13
	lsrs r0, r0, #0x1a
	adds r3, r3, r0
	ldr r0, [r5, #4]
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x16
	lsls r2, r0, #3
	subs r2, r2, r0
	lsls r2, r2, #5
	adds r2, r2, r0
	lsls r2, r2, #4
	ldrb r1, [r5, #6]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x1a
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	adds r2, r2, r0
	ldrh r0, [r5, #6]
	lsls r0, r0, #0x13
	lsrs r0, r0, #0x1a
	adds r2, r2, r0
	cmp r3, r2
	bge _080A3B40
_080A3B36:
	movs r0, #1
	b _080A3B42
	.align 2, 0
_080A3B3C: .4byte 0x001FFFFF
_080A3B40:
	movs r0, #0
_080A3B42:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3B48
sub_80A3B48: @ 0x080A3B48
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	movs r0, #0
	mov r9, r0
	add r0, sp, #4
	movs r1, #0
	mov r8, r1
	mov r3, r9
	strh r3, [r0]
	ldr r2, _080A3C54  @ 0x0100000C
	adds r1, r7, #0
	bl CpuSet
	ldrb r0, [r7]
	movs r6, #1
	orrs r0, r6
	strb r0, [r7]
	movs r0, #3
	ands r4, r0
	lsls r4, r4, #3
	ldrb r1, [r7, #2]
	movs r0, #0x19
	negs r0, r0
	ands r0, r1
	orrs r0, r4
	ands r5, r6
	lsls r5, r5, #5
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	orrs r0, r5
	strb r0, [r7, #2]
	bl GetPartyTotalGoldValue
	movs r2, #7
	ands r2, r0
	lsls r2, r2, #5
	ldrb r3, [r7, #7]
	movs r1, #0x1f
	ands r1, r3
	orrs r1, r2
	strb r1, [r7, #7]
	lsls r0, r0, #8
	lsrs r0, r0, #0xb
	ldr r1, [r7, #8]
	ldr r2, _080A3C58  @ 0xFFE00000
	ands r1, r2
	orrs r1, r0
	str r1, [r7, #8]
	ldr r3, _080A3C5C  @ gUnknown_0202BCF0
	adds r0, r3, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1f
	lsrs r1, r1, #0x1f
	ands r1, r6
	lsls r1, r1, #6
	ldrb r2, [r7, #2]
	movs r0, #0x41
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r7, #2]
	ldrh r1, [r3, #0x2c]
	lsls r1, r1, #0x13
	lsrs r1, r1, #0x17
	movs r0, #0xff
	ands r1, r0
	lsls r1, r1, #7
	ldrh r2, [r7, #2]
	ldr r0, _080A3C60  @ 0xFFFF807F
	ands r0, r2
	orrs r0, r1
	strh r0, [r7, #2]
	bl GetGameTotalTime
	mov r4, sp
	adds r4, #6
	add r5, sp, #8
	mov r6, sp
	adds r6, #0xa
	adds r1, r4, #0
	adds r2, r5, #0
	adds r3, r6, #0
	bl ComputeDisplayTime
	ldrh r2, [r4]
	ldr r0, _080A3C64  @ 0x000003FF
	ands r2, r0
	lsls r2, r2, #7
	ldr r0, [r7, #4]
	ldr r1, _080A3C68  @ 0xFFFE007F
	ands r0, r1
	orrs r0, r2
	str r0, [r7, #4]
	ldrh r1, [r5]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #1
	ldrb r2, [r7, #6]
	movs r0, #0x7f
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r7, #6]
	ldrh r1, [r6]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #7
	ldrh r2, [r7, #6]
	ldr r0, _080A3C6C  @ 0xFFFFE07F
	ands r0, r2
	orrs r0, r1
	strh r0, [r7, #6]
	ldrb r1, [r7, #3]
	movs r0, #0x7f
	ands r0, r1
	strb r0, [r7, #3]
	ldrb r1, [r7, #4]
	movs r0, #0x80
	negs r0, r0
	ands r0, r1
	strb r0, [r7, #4]
	mov r0, r8
	strb r0, [r7, #0x17]
	movs r4, #1
	b _080A3C78
	.align 2, 0
_080A3C54: .4byte 0x0100000C
_080A3C58: .4byte 0xFFE00000
_080A3C5C: .4byte gUnknown_0202BCF0
_080A3C60: .4byte 0xFFFF807F
_080A3C64: .4byte 0x000003FF
_080A3C68: .4byte 0xFFFE007F
_080A3C6C: .4byte 0xFFFFE07F
_080A3C70:
	ldrb r0, [r2, #4]
	strb r0, [r7, #0x17]
	b _080A3CA0
_080A3C76:
	adds r4, #1
_080A3C78:
	cmp r4, #0x3f
	bgt _080A3CA0
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _080A3C76
	ldr r2, [r0]
	cmp r2, #0
	beq _080A3C76
	ldr r1, [r0, #0xc]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	beq _080A3C76
	movs r0, #4
	ands r1, r0
	cmp r1, #0
	beq _080A3C70
_080A3CA0:
	movs r5, #1
	movs r1, #0xc
	adds r1, r1, r7
	mov sl, r1
	movs r3, #0x7f
	mov r8, r3
	movs r6, #0x7f
_080A3CAE:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _080A3D08
	ldr r2, [r4]
	cmp r2, #0
	beq _080A3D08
	ldr r0, [r4, #0xc]
	ldr r1, _080A3DCC  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne _080A3D08
	ldrb r0, [r2, #4]
	bl sub_80A49FC
	cmp r0, r9
	ble _080A3D08
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl sub_80A49FC
	mov r9, r0
	ldr r0, [r4]
	ldrb r2, [r0, #4]
	movs r1, #1
	ands r1, r2
	lsls r1, r1, #7
	ldrb r3, [r7, #3]
	adds r0, r6, #0
	ands r0, r3
	orrs r0, r1
	strb r0, [r7, #3]
	lsrs r2, r2, #1
	ands r2, r6
	mov r0, r8
	ands r2, r0
	ldrb r0, [r7, #4]
	movs r3, #0x80
	negs r3, r3
	adds r1, r3, #0
	ands r0, r1
	orrs r0, r2
	strb r0, [r7, #4]
_080A3D08:
	adds r5, #1
	cmp r5, #0x3f
	ble _080A3CAE
	bl sub_80B5D74
	movs r5, #7
	ands r0, r5
	lsls r0, r0, #4
	ldrb r2, [r7]
	movs r1, #0x71
	negs r1, r1
	ands r1, r2
	orrs r1, r0
	strb r1, [r7]
	bl sub_80B5FD0
	ands r0, r5
	lsls r0, r0, #2
	ldrb r2, [r7, #1]
	movs r1, #0x1d
	negs r1, r1
	ands r1, r2
	orrs r1, r0
	strb r1, [r7, #1]
	bl sub_80B5E6C
	movs r1, #7
	ands r0, r1
	lsls r0, r0, #7
	ldrh r2, [r7]
	ldr r1, _080A3DD0  @ 0xFFFFFC7F
	ands r1, r2
	orrs r1, r0
	strh r1, [r7]
	bl sub_80B5EA4
	lsls r0, r0, #5
	ldrb r2, [r7, #1]
	movs r1, #0x1f
	ands r1, r2
	orrs r1, r0
	strb r1, [r7, #1]
	bl sub_80B5F9C
	ands r0, r5
	ldrb r1, [r7, #2]
	movs r4, #8
	negs r4, r4
	ands r4, r1
	orrs r4, r0
	strb r4, [r7, #2]
	ldrb r0, [r7]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1d
	ldrh r1, [r7]
	lsls r1, r1, #0x16
	lsrs r1, r1, #0x1d
	ldrb r3, [r7, #1]
	lsls r2, r3, #0x1b
	lsrs r2, r2, #0x1d
	lsrs r3, r3, #5
	lsls r4, r4, #0x1d
	lsrs r4, r4, #0x1d
	str r4, [sp]
	bl sub_80B6070
	ands r0, r5
	lsls r0, r0, #1
	ldrb r2, [r7]
	movs r1, #0xf
	negs r1, r1
	ands r1, r2
	orrs r1, r0
	strb r1, [r7]
	bl GetWonChapterCount
	movs r1, #0x3f
	ands r0, r1
	lsls r0, r0, #5
	ldrh r2, [r7, #0xa]
	ldr r1, _080A3DD4  @ 0xFFFFF81F
	ands r1, r2
	orrs r1, r0
	strh r1, [r7, #0xa]
	bl GetTacticianName
	adds r1, r0, #0
	mov r0, sl
	bl strcpy
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A3DCC: .4byte 0x00010004
_080A3DD0: .4byte 0xFFFFFC7F
_080A3DD4: .4byte 0xFFFFF81F

	THUMB_FUNC_START SaveChapterRankings
SaveChapterRankings: @ 0x080A3DD8
	push {r4, r5, r6, lr}
	sub sp, #0x30
	bl sub_80A39D8
	adds r6, r0, #0
	ldr r0, _080A3E24  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0x14]
	lsrs r4, r0, #6
	movs r0, #1
	ands r4, r0
	add r5, sp, #0x18
	adds r0, r5, #0
	adds r1, r6, #0
	adds r2, r4, #0
	bl sub_80A3B48
	mov r0, sp
	adds r1, r6, #0
	adds r2, r4, #0
	bl sub_80A39E4
	mov r0, sp
	adds r1, r5, #0
	bl sub_80A3A88
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A3E1A
	adds r0, r5, #0
	adds r1, r6, #0
	adds r2, r4, #0
	bl sub_80A3A48
_080A3E1A:
	add sp, #0x30
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A3E24: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A3E28
sub_80A3E28: @ 0x080A3E28
	push {lr}
	sub sp, #0x28
	add r0, sp, #0x24
	movs r1, #0
	strh r1, [r0]
	ldr r2, _080A3E48  @ 0x01000012
	mov r1, sp
	bl CpuSet
	mov r0, sp
	bl sub_80A3EA4
	add sp, #0x28
	pop {r0}
	bx r0
	.align 2, 0
_080A3E48: .4byte 0x01000012

	THUMB_FUNC_START sub_80A3E4C
sub_80A3E4C: @ 0x080A3E4C
	push {r4, lr}
	sub sp, #0x24
	adds r4, r0, #0
	bl sub_80A2CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A3E98
	cmp r4, #0
	bne _080A3E62
	mov r4, sp
_080A3E62:
	ldr r1, _080A3E8C  @ ReadSramFast
	ldr r0, _080A3E90  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r2, _080A3E94  @ 0x00007224
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x24
	bl _call_via_r3
	adds r0, r4, #0
	movs r1, #0x20
	bl sub_80A2CFC
	ldrh r1, [r4, #0x20]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bne _080A3E98
	movs r0, #1
	b _080A3E9A
	.align 2, 0
_080A3E8C: .4byte ReadSramFast
_080A3E90: .4byte gUnknown_08A1FAF4
_080A3E94: .4byte 0x00007224
_080A3E98:
	movs r0, #0
_080A3E9A:
	add sp, #0x24
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3EA4
sub_80A3EA4: @ 0x080A3EA4
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x20
	bl sub_80A2CFC
	strh r0, [r4, #0x20]
	ldr r0, _080A3EC8  @ gUnknown_08A1FAF4
	ldr r1, [r0]
	ldr r0, _080A3ECC  @ 0x00007224
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A3EC8: .4byte gUnknown_08A1FAF4
_080A3ECC: .4byte 0x00007224

	THUMB_FUNC_START sub_80A3ED0
sub_80A3ED0: @ 0x080A3ED0
	push {r4, r5, lr}
	sub sp, #0x24
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne _080A3EE4
	mov r4, sp
	mov r0, sp
	bl sub_80A3E4C
_080A3EE4:
	asrs r0, r5, #5
	lsls r0, r0, #2
	adds r0, r4, r0
	movs r1, #0x1f
	ands r1, r5
	ldr r0, [r0]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _080A3EFE
	movs r0, #0
	b _080A3F00
_080A3EFE:
	movs r0, #1
_080A3F00:
	add sp, #0x24
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A3F08
sub_80A3F08: @ 0x080A3F08
	push {r4, r5, lr}
	sub sp, #0x24
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne _080A3F22
	mov r4, sp
	mov r0, sp
	bl sub_80A3E4C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A3F7C
_080A3F22:
	asrs r0, r5, #5
	lsls r0, r0, #2
	adds r3, r4, r0
	movs r0, #0x1f
	ands r0, r5
	movs r2, #1
	lsls r2, r0
	ldr r1, [r3]
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	bne _080A3F7C
	orrs r1, r2
	str r1, [r3]
	cmp r5, #0x43
	bne _080A3F4C
	ldr r0, [r4]
	movs r1, #4
	orrs r0, r1
	str r0, [r4]
	b _080A3F58
_080A3F4C:
	cmp r5, #2
	bne _080A3F58
	ldr r0, [r4, #8]
	movs r1, #8
	orrs r0, r1
	str r0, [r4, #8]
_080A3F58:
	cmp r5, #0x54
	bne _080A3F68
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #9
	orrs r0, r1
	str r0, [r4, #4]
	b _080A3F76
_080A3F68:
	cmp r5, #0x30
	bne _080A3F76
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #0xd
	orrs r0, r1
	str r0, [r4, #8]
_080A3F76:
	adds r0, r4, #0
	bl sub_80A3EA4
_080A3F7C:
	add sp, #0x24
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A3F84
sub_80A3F84: @ 0x080A3F84
	push {lr}
	sub sp, #0x18
	add r0, sp, #0x14
	movs r1, #0
	strh r1, [r0]
	ldr r2, _080A3FA4  @ 0x0100000A
	mov r1, sp
	bl CpuSet
	mov r0, sp
	bl sub_80A4000
	add sp, #0x18
	pop {r0}
	bx r0
	.align 2, 0
_080A3FA4: .4byte 0x0100000A

	THUMB_FUNC_START sub_80A3FA8
sub_80A3FA8: @ 0x080A3FA8
	push {r4, lr}
	sub sp, #0x14
	adds r4, r0, #0
	bl sub_80A2CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A3FF4
	cmp r4, #0
	bne _080A3FBE
	mov r4, sp
_080A3FBE:
	ldr r1, _080A3FE8  @ ReadSramFast
	ldr r0, _080A3FEC  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r2, _080A3FF0  @ 0x00007248
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x14
	bl _call_via_r3
	adds r0, r4, #0
	movs r1, #0x10
	bl sub_80A2CFC
	ldrh r1, [r4, #0x10]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bne _080A3FF4
	movs r0, #1
	b _080A3FF6
	.align 2, 0
_080A3FE8: .4byte ReadSramFast
_080A3FEC: .4byte gUnknown_08A1FAF4
_080A3FF0: .4byte 0x00007248
_080A3FF4:
	movs r0, #0
_080A3FF6:
	add sp, #0x14
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A4000
sub_80A4000: @ 0x080A4000
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x10
	bl sub_80A2CFC
	strh r0, [r4, #0x10]
	ldr r0, _080A4024  @ gUnknown_08A1FAF4
	ldr r1, [r0]
	ldr r0, _080A4028  @ 0x00007248
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0x14
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A4024: .4byte gUnknown_08A1FAF4
_080A4028: .4byte 0x00007248

	THUMB_FUNC_START sub_80A402C
sub_80A402C: @ 0x080A402C
	push {r4, r5, lr}
	sub sp, #0x14
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne _080A4040
	mov r4, sp
	mov r0, sp
	bl sub_80A3FA8
_080A4040:
	asrs r0, r5, #5
	lsls r0, r0, #2
	adds r0, r4, r0
	movs r1, #0x1f
	ands r1, r5
	ldr r0, [r0]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _080A405A
	movs r0, #0
	b _080A405C
_080A405A:
	movs r0, #1
_080A405C:
	add sp, #0x14
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A4064
sub_80A4064: @ 0x080A4064
	push {r4, r5, lr}
	sub sp, #0x14
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne _080A407E
	mov r4, sp
	mov r0, sp
	bl sub_80A3FA8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A40A0
_080A407E:
	asrs r0, r5, #5
	lsls r0, r0, #2
	adds r3, r4, r0
	movs r0, #0x1f
	ands r0, r5
	movs r2, #1
	lsls r2, r0
	ldr r1, [r3]
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	bne _080A40A0
	orrs r1, r2
	str r1, [r3]
	adds r0, r4, #0
	bl sub_80A4000
_080A40A0:
	add sp, #0x14
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A40A8
sub_80A40A8: @ 0x080A40A8
	push {lr}
	movs r0, #0
	bl LoadSomeUnitStatThingUnlockIdk
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A40BA
	bl sub_80A2DE4
_080A40BA:
	movs r0, #0
	bl sub_80A38F4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A40CA
	bl sub_80A2EA8
_080A40CA:
	movs r0, #0
	bl sub_80A3898
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A40DA
	bl sub_80A39B4
_080A40DA:
	movs r0, #0
	bl sub_80A3E4C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A40EA
	bl sub_80A3E28
_080A40EA:
	movs r0, #0
	bl sub_80A3FA8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A40FA
	bl sub_80A3F84
_080A40FA:
	bl sub_80A6AA0
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A4104
sub_80A4104: @ 0x080A4104
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	mov r0, sp
	movs r4, #0
	strh r4, [r0]
	ldr r5, _080A4184  @ gUnknown_0203E894
	ldr r2, _080A4188  @ 0x01000230
	adds r1, r5, #0
	bl CpuSet
	mov r0, sp
	adds r0, #2
	strh r4, [r0]
	ldr r1, _080A418C  @ gUnknown_0203ECF4
	ldr r2, _080A4190  @ 0x01000060
	bl CpuSet
	adds r7, r5, #0
	ldr r6, _080A4194  @ 0x0000084C
	add r6, r8
	adds r4, r7, #0
	movs r5, #0x45
_080A4136:
	ldr r0, [r4]
	ldr r1, _080A4198  @ 0xFF0000FF
	ands r0, r1
	movs r1, #0x80
	lsls r1, r1, #0xe
	orrs r0, r1
	str r0, [r4]
	adds r0, r7, #0
	adds r1, r6, #0
	movs r2, #0x10
	bl WriteAndVerifySramFast
	adds r6, #0x10
	adds r4, #0x10
	subs r5, #1
	cmp r5, #0
	bge _080A4136
	ldr r4, _080A419C  @ 0x00000CAC
	add r4, r8
	movs r5, #0x2f
_080A415E:
	ldr r0, _080A418C  @ gUnknown_0203ECF4
	adds r1, r4, #0
	movs r2, #4
	bl WriteAndVerifySramFast
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge _080A415E
	ldr r1, _080A41A0  @ gUnknown_0203E890
	ldr r0, _080A4194  @ 0x0000084C
	add r0, r8
	str r0, [r1]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A4184: .4byte gUnknown_0203E894
_080A4188: .4byte 0x01000230
_080A418C: .4byte gUnknown_0203ECF4
_080A4190: .4byte 0x01000060
_080A4194: .4byte 0x0000084C
_080A4198: .4byte 0xFF0000FF
_080A419C: .4byte 0x00000CAC
_080A41A0: .4byte gUnknown_0203E890

	THUMB_FUNC_START sub_80A41A4
sub_80A41A4: @ 0x080A41A4
	push {lr}
	ldr r2, _080A41C0  @ gUnknown_0202BCF0
	ldrh r1, [r2, #0x2c]
	ldr r0, _080A41C4  @ 0xFFFFE00F
	ands r0, r1
	strh r0, [r2, #0x2c]
	movs r0, #0
	bl SetPartyGoldAmount
	bl sub_80A41C8
	pop {r0}
	bx r0
	.align 2, 0
_080A41C0: .4byte gUnknown_0202BCF0
_080A41C4: .4byte 0xFFFFE00F

	THUMB_FUNC_START sub_80A41C8
sub_80A41C8: @ 0x080A41C8
	push {r4, r5, lr}
	sub sp, #4
	mov r0, sp
	movs r5, #0
	strh r5, [r0]
	ldr r1, _080A4208  @ gUnknown_0203E894
	ldr r2, _080A420C  @ 0x01000230
	bl CpuSet
	ldr r4, _080A4210  @ gUnknown_0202BCF0
	ldr r0, [r4, #0x38]
	ldr r1, _080A4214  @ 0xF00000FF
	ands r0, r1
	str r0, [r4, #0x38]
	ldrh r1, [r4, #0x36]
	movs r0, #0xf
	ands r0, r1
	strh r0, [r4, #0x36]
	adds r0, r4, #0
	adds r0, #0x38
	strb r5, [r0]
	ldr r0, [r4, #0x34]
	ldr r1, _080A4218  @ 0xFFF00000
	ands r0, r1
	str r0, [r4, #0x34]
	bl GetPartyTotalGoldValue
	str r0, [r4, #0x30]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A4208: .4byte gUnknown_0203E894
_080A420C: .4byte 0x01000230
_080A4210: .4byte gUnknown_0202BCF0
_080A4214: .4byte 0xF00000FF
_080A4218: .4byte 0xFFF00000

	THUMB_FUNC_START LoadBWLEntries
LoadBWLEntries: @ 0x080A421C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A423C  @ ReadSramFast
	ldr r1, _080A4240  @ gUnknown_0203E894
	movs r2, #0x8c
	lsls r2, r2, #3
	ldr r3, [r0]
	adds r0, r4, #0
	bl _call_via_r3
	ldr r0, _080A4244  @ gUnknown_0203E890
	str r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A423C: .4byte ReadSramFast
_080A4240: .4byte gUnknown_0203E894
_080A4244: .4byte gUnknown_0203E890

	THUMB_FUNC_START LoadSomeTable
LoadSomeTable: @ 0x080A4248
	push {lr}
	ldr r2, _080A425C  @ ReadSramFast
	ldr r1, _080A4260  @ gUnknown_0203ECF4
	ldr r3, [r2]
	movs r2, #0xc0
	bl _call_via_r3
	pop {r0}
	bx r0
	.align 2, 0
_080A425C: .4byte ReadSramFast
_080A4260: .4byte gUnknown_0203ECF4

	THUMB_FUNC_START SaveBWLEntries
SaveBWLEntries: @ 0x080A4264
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A4280  @ gUnknown_0203E894
	movs r2, #0x8c
	lsls r2, r2, #3
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	ldr r0, _080A4284  @ gUnknown_0203E890
	str r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A4280: .4byte gUnknown_0203E894
_080A4284: .4byte gUnknown_0203E890

	THUMB_FUNC_START SaveChapterWinData
SaveChapterWinData: @ 0x080A4288
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A4298  @ gUnknown_0203ECF4
	movs r2, #0xc0
	bl WriteAndVerifySramFast
	pop {r0}
	bx r0
	.align 2, 0
_080A4298: .4byte gUnknown_0203ECF4

	THUMB_FUNC_START GetChapterWinDataEntry
GetChapterWinDataEntry: @ 0x080A429C
	lsls r0, r0, #2
	ldr r1, _080A42A4  @ gUnknown_0203ECF4
	adds r0, r0, r1
	bx lr
	.align 2, 0
_080A42A4: .4byte gUnknown_0203ECF4

	THUMB_FUNC_START sub_80A42A8
sub_80A42A8: @ 0x080A42A8
	ldrh r0, [r0]
	ldr r1, _080A42B8  @ 0x0000FF80
	ands r1, r0
	negs r0, r1
	orrs r0, r1
	lsrs r0, r0, #0x1f
	bx lr
	.align 2, 0
_080A42B8: .4byte 0x0000FF80

	THUMB_FUNC_START GetNextChapterWinDataEntryIndex
GetNextChapterWinDataEntryIndex: @ 0x080A42BC
	push {r4, lr}
	movs r0, #0
	bl GetChapterWinDataEntry
	adds r2, r0, #0
	movs r3, #0
	ldrh r1, [r2]
	ldr r4, _080A42D0  @ 0x0000FF80
	b _080A42DA
	.align 2, 0
_080A42D0: .4byte 0x0000FF80
_080A42D4:
	adds r3, #1
	adds r2, #4
	ldrh r1, [r2]
_080A42DA:
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	bne _080A42D4
	adds r0, r3, #0
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START GetWonChapterCount
GetWonChapterCount: @ 0x080A42EC
	push {r4, r5, r6, lr}
	movs r0, #0
	bl GetChapterWinDataEntry
	adds r4, r0, #0
	movs r5, #0
	ldrh r1, [r4]
	ldr r2, _080A432C  @ 0x0000FF80
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _080A4322
	adds r6, r2, #0
_080A4306:
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl DoesThisChapterCount
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A4318
	adds r5, #1
_080A4318:
	adds r4, #4
	ldrh r0, [r4]
	ands r0, r6
	cmp r0, #0
	bne _080A4306
_080A4322:
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080A432C: .4byte 0x0000FF80

	THUMB_FUNC_START sub_80A4330
sub_80A4330: @ 0x080A4330
	push {lr}
	bl GetNextChapterWinDataEntryIndex
	cmp r0, #0
	beq _080A4348
	subs r0, #1
	bl GetChapterWinDataEntry
	ldr r0, [r0]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	b _080A434C
_080A4348:
	movs r0, #1
	negs r0, r0
_080A434C:
	pop {r1}
	bx r1

	THUMB_FUNC_START RegisterChapterTimeAndTurnCount
RegisterChapterTimeAndTurnCount: @ 0x080A4350
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	bl GetNextChapterWinDataEntryIndex
	bl GetChapterWinDataEntry
	adds r5, r0, #0
	bl GetGameClock
	ldr r1, [r4, #4]
	subs r0, r0, r1
	movs r1, #0xb4
	bl __udivsi3
	adds r6, r0, #0
	ldr r0, _080A43A8  @ 0x0000EA60
	cmp r6, r0
	ble _080A4376
	adds r6, r0, #0
_080A4376:
	ldrh r3, [r4, #0x10]
	movs r0, #0xfa
	lsls r0, r0, #1
	cmp r3, r0
	ble _080A4382
	adds r3, r0, #0
_080A4382:
	movs r0, #0x7f
	ldrb r1, [r4, #0xe]
	ands r1, r0
	ldrb r2, [r5]
	movs r0, #0x80
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r5]
	lsls r2, r3, #7
	ldrh r1, [r5]
	movs r0, #0x7f
	ands r0, r1
	orrs r0, r2
	strh r0, [r5]
	strh r6, [r5, #2]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A43A8: .4byte 0x0000EA60

	THUMB_FUNC_START sub_80A43AC
sub_80A43AC: @ 0x080A43AC
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	bl GetNextChapterWinDataEntryIndex
	adds r5, r0, #0
	movs r4, #0
	cmp r6, r5
	bge _080A43D0
	movs r7, #0xb4
_080A43BE:
	adds r0, r4, #0
	bl GetChapterWinDataEntry
	ldrh r0, [r0, #2]
	muls r0, r7, r0
	adds r6, r6, r0
	adds r4, #1
	cmp r4, r5
	blt _080A43BE
_080A43D0:
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START GetGameTotalTurnCount
GetGameTotalTurnCount: @ 0x080A43D8
	push {r4, r5, r6, lr}
	movs r6, #0
	bl GetNextChapterWinDataEntryIndex
	adds r5, r0, #0
	movs r4, #0
	cmp r6, r5
	bge _080A43FC
_080A43E8:
	adds r0, r4, #0
	bl GetChapterWinDataEntry
	ldr r0, [r0]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x17
	adds r6, r6, r0
	adds r4, #1
	cmp r4, r5
	blt _080A43E8
_080A43FC:
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START DoesThisChapterCount
DoesThisChapterCount: @ 0x080A4404
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A441C  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq _080A442E
	cmp r0, #2
	bgt _080A4420
	cmp r0, #1
	beq _080A4426
	b _080A4440
	.align 2, 0
_080A441C: .4byte gUnknown_0202BCF0
_080A4420:
	cmp r0, #3
	beq _080A4434
	b _080A4440
_080A4426:
	cmp r1, #9
	bhi _080A4440
	movs r0, #1
	b _080A4442
_080A442E:
	adds r0, r1, #0
	subs r0, #0xa
	b _080A4438
_080A4434:
	adds r0, r1, #0
	subs r0, #0x17
_080A4438:
	cmp r0, #0xb
	bhi _080A4440
	movs r0, #1
	b _080A4442
_080A4440:
	movs r0, #0
_080A4442:
	pop {r1}
	bx r1

	THUMB_FUNC_START GetGameTotalTime
GetGameTotalTime: @ 0x080A4448
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	bl GetNextChapterWinDataEntryIndex
	adds r6, r0, #0
	movs r5, #0
	cmp r7, r6
	bge _080A447E
_080A4458:
	adds r0, r5, #0
	bl GetChapterWinDataEntry
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl DoesThisChapterCount
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A4478
	ldrh r0, [r4, #2]
	movs r1, #0xb4
	muls r0, r1, r0
	adds r7, r7, r0
_080A4478:
	adds r5, #1
	cmp r5, r6
	blt _080A4458
_080A447E:
	adds r0, r7, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START GetGameTotalTurnCount2
GetGameTotalTurnCount2: @ 0x080A4488
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	bl GetNextChapterWinDataEntryIndex
	adds r6, r0, #0
	movs r5, #0
	cmp r7, r6
	bge _080A44BE
_080A4498:
	adds r0, r5, #0
	bl GetChapterWinDataEntry
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl DoesThisChapterCount
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A44B8
	ldr r0, [r4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x17
	adds r7, r7, r0
_080A44B8:
	adds r5, #1
	cmp r5, r6
	blt _080A4498
_080A44BE:
	adds r0, r7, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A44C8
sub_80A44C8: @ 0x080A44C8
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0xb
	ldrsb r0, [r4, r0]
	movs r1, #0xc0
	ands r0, r1
	cmp r0, #0
	bne _080A451E
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	adds r5, r0, #0
	cmp r0, #0x45
	bhi _080A451E
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A451E
	lsls r1, r5, #4
	ldr r0, _080A4524  @ gUnknown_0203E884
	adds r2, r1, r0
	cmp r2, #0
	beq _080A451E
	ldrh r3, [r2, #0xc]
	lsls r0, r3, #0x12
	lsrs r1, r0, #0x14
	ldr r0, _080A4528  @ 0x00000F9F
	cmp r1, r0
	bgt _080A4514
	adds r0, r1, #1
	ldr r5, _080A452C  @ 0x00000FFF
	adds r1, r5, #0
	ands r0, r1
	lsls r0, r0, #2
	ldr r1, _080A4530  @ 0xFFFFC003
	ands r1, r3
	orrs r1, r0
	strh r1, [r2, #0xc]
_080A4514:
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	movs r1, #4
	bl BWL_AddFavoritismValue
_080A451E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A4524: .4byte gUnknown_0203E884
_080A4528: .4byte 0x00000F9F
_080A452C: .4byte 0x00000FFF
_080A4530: .4byte 0xFFFFC003

	THUMB_FUNC_START sub_80A4534
sub_80A4534: @ 0x080A4534
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	cmp r4, #0x45
	bhi _080A4584
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A4584
	lsls r1, r4, #4
	ldr r0, _080A458C  @ gUnknown_0203E884
	adds r3, r1, r0
	cmp r3, #0
	beq _080A4584
	ldrb r0, [r3, #0xb]
	ldrb r1, [r3, #0xc]
	movs r2, #3
	ands r1, r2
	lsls r1, r1, #8
	orrs r1, r0
	ldr r0, _080A4590  @ 0x000003E7
	cmp r1, r0
	bgt _080A457C
	adds r0, r1, #1
	strb r0, [r3, #0xb]
	lsrs r0, r0, #8
	ands r0, r2
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	ands r1, r2
	orrs r1, r0
	strb r1, [r3, #0xc]
_080A457C:
	adds r0, r5, #0
	movs r1, #0x10
	bl BWL_AddFavoritismValue
_080A4584:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A458C: .4byte gUnknown_0203E884
_080A4590: .4byte 0x000003E7

	THUMB_FUNC_START sub_80A4594
sub_80A4594: @ 0x080A4594
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	mov r8, r4
	bl sub_80A2CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A4662
	cmp r4, #0x45
	bhi _080A4662
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A4662
	mov r0, r8
	lsls r6, r0, #4
	ldr r0, _080A4670  @ gUnknown_0203E884
	adds r5, r6, r0
	cmp r5, #0
	beq _080A4662
	ldr r1, _080A4674  @ gUnknown_0202BCB0
	adds r0, r1, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r0, #1
	beq _080A4662
	ldr r7, _080A4678  @ gUnknown_0202BCF0
	ldrb r2, [r7, #0x14]
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	bne _080A4662
	ldrb r1, [r1, #4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	bne _080A4662
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _080A4662
	movs r0, #0x80
	ands r0, r2
	cmp r0, #0
	bne _080A4662
	ldrb r0, [r5]
	cmp r0, #0xc7
	bhi _080A4662
	adds r0, #1
	strb r0, [r5]
	movs r1, #0x80
	negs r1, r1
	mov r0, r8
	bl BWL_AddFavoritismValue
	bl sub_80A63B0
	adds r4, r0, #0
	adds r4, #3
	adds r0, r4, #0
	bl GetSaveDataLocation
	adds r1, r0, #0
	ldr r2, _080A467C  @ 0x000019E4
	adds r0, r6, r2
	adds r1, r1, r0
	adds r0, r5, #0
	movs r2, #1
	bl WriteAndVerifySramFast
	mov r0, sp
	adds r1, r4, #0
	bl sub_80A2EF8
	mov r0, sp
	adds r1, r4, #0
	bl sub_80A2F94
	ldrb r0, [r7, #0xc]
	bl GetSaveDataLocation
	adds r1, r0, #0
	ldr r2, _080A4680  @ 0x0000083C
	adds r0, r6, r2
	adds r1, r1, r0
	adds r0, r5, #0
	movs r2, #3
	bl WriteAndVerifySramFast
	ldrb r1, [r7, #0xc]
	mov r0, sp
	bl sub_80A2EF8
	ldrb r1, [r7, #0xc]
	mov r0, sp
	bl sub_80A2F94
_080A4662:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A4670: .4byte gUnknown_0203E884
_080A4674: .4byte gUnknown_0202BCB0
_080A4678: .4byte gUnknown_0202BCF0
_080A467C: .4byte 0x000019E4
_080A4680: .4byte 0x0000083C

	THUMB_FUNC_START BWL_AddWinOrLossIdk
BWL_AddWinOrLossIdk: @ 0x080A4684
	push {r4, r5, r6, lr}
	adds r5, r2, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r6, r1, #0x18
	cmp r0, #0x45
	bhi _080A4734
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A4734
	lsls r1, r4, #4
	ldr r0, _080A46DC  @ gUnknown_0203E884
	adds r4, r1, r0
	cmp r4, #0
	beq _080A4734
	bl GetChapterThing
	cmp r0, #0
	blt _080A46E8
	cmp r0, #1
	ble _080A46E8
	cmp r0, #2
	bne _080A46E8
	ldrb r0, [r4, #0xe]
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r4, #0xe]
	ldr r0, _080A46E0  @ gUnknown_03005280
	ldrb r1, [r0, #0x11]
	movs r0, #0x3f
	ands r1, r0
	ldrb r2, [r4, #5]
	movs r0, #0x40
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #5]
	ldr r3, _080A46E4  @ gUnknown_0202BCF0
	b _080A4706
	.align 2, 0
_080A46DC: .4byte gUnknown_0203E884
_080A46E0: .4byte gUnknown_03005280
_080A46E4: .4byte gUnknown_0202BCF0
_080A46E8:
	ldrb r1, [r4, #0xe]
	movs r0, #0x7f
	ands r0, r1
	strb r0, [r4, #0xe]
	ldr r3, _080A473C  @ gUnknown_0202BCF0
	movs r1, #0xe
	ldrsb r1, [r3, r1]
	movs r0, #0x3f
	ands r1, r0
	ldrb r2, [r4, #5]
	movs r0, #0x40
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #5]
_080A4706:
	ldrh r2, [r3, #0x10]
	ldr r0, _080A4740  @ 0x000003FF
	ands r2, r0
	lsls r2, r2, #0xe
	ldr r0, [r4, #4]
	ldr r1, _080A4744  @ 0xFF003FFF
	ands r0, r1
	orrs r0, r2
	str r0, [r4, #4]
	lsls r2, r6, #0xe
	ldr r0, [r4, #0xc]
	ldr r1, _080A4748  @ 0xFF803FFF
	ands r0, r1
	orrs r0, r2
	str r0, [r4, #0xc]
	movs r0, #0xf
	ands r5, r0
	ldrb r1, [r4, #9]
	movs r0, #0x10
	negs r0, r0
	ands r0, r1
	orrs r0, r5
	strb r0, [r4, #9]
_080A4734:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A473C: .4byte gUnknown_0202BCF0
_080A4740: .4byte 0x000003FF
_080A4744: .4byte 0xFF003FFF
_080A4748: .4byte 0xFF803FFF

	THUMB_FUNC_START BWL_IncrementMoveValue
BWL_IncrementMoveValue: @ 0x080A474C
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	cmp r4, #0x45
	bhi _080A4780
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A4780
	lsls r1, r4, #4
	ldr r0, _080A4788  @ gUnknown_0203E884
	adds r1, r1, r0
	cmp r1, #0
	beq _080A4780
	ldrb r0, [r1, #3]
	cmp r0, #0xc7
	bhi _080A4778
	adds r0, #1
	strb r0, [r1, #3]
_080A4778:
	adds r0, r5, #0
	movs r1, #2
	bl BWL_AddFavoritismValue
_080A4780:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A4788: .4byte gUnknown_0203E884

	THUMB_FUNC_START BWL_IncrementStatScreenViews
BWL_IncrementStatScreenViews: @ 0x080A478C
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	cmp r4, #0x45
	bhi _080A47C0
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A47C0
	lsls r1, r4, #4
	ldr r0, _080A47C8  @ gUnknown_0203E884
	adds r1, r1, r0
	cmp r1, #0
	beq _080A47C0
	ldrb r0, [r1, #4]
	cmp r0, #0xc7
	bhi _080A47B8
	adds r0, #1
	strb r0, [r1, #4]
_080A47B8:
	adds r0, r5, #0
	movs r1, #2
	bl BWL_AddFavoritismValue
_080A47C0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A47C8: .4byte gUnknown_0203E884

	THUMB_FUNC_START BWL_IncrementDeployCountMaybe
BWL_IncrementDeployCountMaybe: @ 0x080A47CC
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	cmp r4, #0x45
	bhi _080A4810
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A4810
	lsls r1, r4, #4
	ldr r0, _080A4818  @ gUnknown_0203E884
	adds r2, r1, r0
	cmp r2, #0
	beq _080A4810
	ldrb r3, [r2, #7]
	lsls r0, r3, #0x1a
	lsrs r0, r0, #0x1a
	cmp r0, #0x3b
	bgt _080A4808
	adds r1, r0, #1
	movs r0, #0x3f
	ands r1, r0
	movs r0, #0x40
	negs r0, r0
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #7]
_080A4808:
	adds r0, r5, #0
	movs r1, #0x40
	bl BWL_AddFavoritismValue
_080A4810:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A4818: .4byte gUnknown_0203E884

	THUMB_FUNC_START BWL_AddTilesMoved
BWL_AddTilesMoved: @ 0x080A481C
	push {r4, r5, r6, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r6, r4, #0
	cmp r4, #0x45
	bhi _080A4870
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A4870
	lsls r1, r4, #4
	ldr r0, _080A4878  @ gUnknown_0203E884
	adds r3, r1, r0
	cmp r3, #0
	beq _080A4870
	ldrb r4, [r3, #7]
	lsrs r1, r4, #6
	ldrb r0, [r3, #8]
	lsls r0, r0, #2
	orrs r0, r1
	adds r2, r0, r5
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r2, r0
	ble _080A4856
	adds r2, r0, #0
_080A4856:
	movs r0, #3
	ands r0, r2
	lsls r0, r0, #6
	movs r1, #0x3f
	ands r1, r4
	orrs r1, r0
	strb r1, [r3, #7]
	lsrs r0, r2, #2
	strb r0, [r3, #8]
	adds r0, r6, #0
	movs r1, #2
	bl BWL_AddFavoritismValue
_080A4870:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A4878: .4byte gUnknown_0203E884

	THUMB_FUNC_START BWL_AddExpGained
BWL_AddExpGained: @ 0x080A487C
	push {r4, r5, r6, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r6, r4, #0
	cmp r4, #0x45
	bhi _080A48C8
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A48C8
	lsls r1, r4, #4
	ldr r0, _080A48D0  @ gUnknown_0203E884
	adds r2, r1, r0
	cmp r2, #0
	beq _080A48C8
	ldr r3, [r2, #8]
	lsls r0, r3, #8
	lsrs r0, r0, #0x14
	adds r0, r0, r5
	movs r1, #0xfa
	lsls r1, r1, #4
	cmp r0, r1
	ble _080A48B2
	adds r0, r1, #0
_080A48B2:
	ldr r1, _080A48D4  @ 0x00000FFF
	ands r1, r0
	lsls r1, r1, #0xc
	ldr r0, _080A48D8  @ 0xFF000FFF
	ands r0, r3
	orrs r0, r1
	str r0, [r2, #8]
	adds r0, r6, #0
	adds r1, r5, #0
	bl BWL_AddFavoritismValue
_080A48C8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A48D0: .4byte gUnknown_0203E884
_080A48D4: .4byte 0x00000FFF
_080A48D8: .4byte 0xFF000FFF

	THUMB_FUNC_START StoreSomeUnitSetFlags
StoreSomeUnitSetFlags: @ 0x080A48DC
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #8
	negs r1, r1
	bl BWL_AddFavoritismValue
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A48F0
sub_80A48F0: @ 0x080A48F0
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, _080A4900  @ 0xFFFFFF00
	bl BWL_AddFavoritismValue
	pop {r0}
	bx r0
	.align 2, 0
_080A4900: .4byte 0xFFFFFF00

	THUMB_FUNC_START sub_80A4904
sub_80A4904: @ 0x080A4904
	push {lr}
	movs r3, #0
	ldr r2, _080A4924  @ gUnknown_0203E894
	movs r1, #0x45
_080A490C:
	ldrh r0, [r2, #0xc]
	lsls r0, r0, #0x12
	lsrs r0, r0, #0x14
	adds r3, r3, r0
	adds r2, #0x10
	subs r1, #1
	cmp r1, #0
	bge _080A490C
	adds r0, r3, #0
	pop {r1}
	bx r1
	.align 2, 0
_080A4924: .4byte gUnknown_0203E894

	THUMB_FUNC_START sub_80A4928
sub_80A4928: @ 0x080A4928
	push {r4, r5, lr}
	movs r4, #0
	ldr r0, _080A4954  @ gUnknown_0203E894
	movs r5, #3
	adds r2, r0, #0
	adds r2, #0xb
	movs r3, #0x45
_080A4936:
	ldrb r1, [r2]
	ldrb r0, [r2, #1]
	ands r0, r5
	lsls r0, r0, #8
	orrs r0, r1
	adds r4, r4, r0
	adds r2, #0x10
	subs r3, #1
	cmp r3, #0
	bge _080A4936
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A4954: .4byte gUnknown_0203E894

	THUMB_FUNC_START sub_80A4958
sub_80A4958: @ 0x080A4958
	push {lr}
	movs r3, #0
	ldr r2, _080A4974  @ gUnknown_0203E894
	movs r1, #0x45
_080A4960:
	ldrb r0, [r2]
	adds r3, r3, r0
	adds r2, #0x10
	subs r1, #1
	cmp r1, #0
	bge _080A4960
	adds r0, r3, #0
	pop {r1}
	bx r1
	.align 2, 0
_080A4974: .4byte gUnknown_0203E894

	THUMB_FUNC_START sub_80A4978
sub_80A4978: @ 0x080A4978
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r5, _080A49A0  @ gUnknown_0203E894
	movs r4, #0x45
_080A4980:
	ldr r0, [r5, #8]
	lsls r0, r0, #8
	lsrs r0, r0, #0x14
	movs r1, #0x64
	bl __divsi3
	adds r6, r6, r0
	adds r5, #0x10
	subs r4, #1
	cmp r4, #0
	bge _080A4980
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080A49A0: .4byte gUnknown_0203E894

	THUMB_FUNC_START sub_80A49A4
sub_80A49A4: @ 0x080A49A4
	push {lr}
	movs r3, #0
	ldr r2, _080A49C4  @ gUnknown_0203E894
	movs r1, #0x45
_080A49AC:
	ldr r0, [r2, #8]
	lsls r0, r0, #8
	lsrs r0, r0, #0x14
	adds r3, r3, r0
	adds r2, #0x10
	subs r1, #1
	cmp r1, #0
	bge _080A49AC
	adds r0, r3, #0
	pop {r1}
	bx r1
	.align 2, 0
_080A49C4: .4byte gUnknown_0203E894

	THUMB_FUNC_START sub_80A49C8
sub_80A49C8: @ 0x080A49C8
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi _080A49E8
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A49E8
	lsls r1, r4, #4
	ldr r0, _080A49EC  @ gUnknown_0203E884
	adds r1, r1, r0
	cmp r1, #0
	bne _080A49F0
_080A49E8:
	movs r0, #0
	b _080A49F6
	.align 2, 0
_080A49EC: .4byte gUnknown_0203E884
_080A49F0:
	ldr r0, [r1, #8]
	lsls r0, r0, #8
	lsrs r0, r0, #0x14
_080A49F6:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A49FC
sub_80A49FC: @ 0x080A49FC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi _080A4A1C
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A4A1C
	lsls r1, r4, #4
	ldr r0, _080A4A24  @ gUnknown_0203E884
	adds r0, r1, r0
	cmp r0, #0
	bne _080A4A28
_080A4A1C:
	movs r0, #0x80
	lsls r0, r0, #6
	b _080A4A2E
	.align 2, 0
_080A4A24: .4byte gUnknown_0203E884
_080A4A28:
	ldr r0, [r0]
	lsls r0, r0, #8
	lsrs r0, r0, #0x16
_080A4A2E:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START BWL_AddFavoritismValue
BWL_AddFavoritismValue: @ 0x080A4A34
	push {r4, r5, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi _080A4A96
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A4A96
	lsls r1, r4, #4
	ldr r0, _080A4A70  @ gUnknown_0203E884
	adds r3, r1, r0
	cmp r3, #0
	beq _080A4A96
	ldr r2, [r3]
	lsls r0, r2, #8
	lsrs r0, r0, #0x10
	adds r1, r0, r5
	movs r0, #0x80
	lsls r0, r0, #7
	cmp r1, r0
	ble _080A4A78
	ldr r0, _080A4A74  @ 0xFF0000FF
	ands r0, r2
	movs r1, #0x80
	lsls r1, r1, #0xf
	b _080A4A92
	.align 2, 0
_080A4A70: .4byte gUnknown_0203E884
_080A4A74: .4byte 0xFF0000FF
_080A4A78:
	cmp r1, #0
	bge _080A4A88
	ldr r0, _080A4A84  @ 0xFF0000FF
	ands r2, r0
	str r2, [r3]
	b _080A4A96
	.align 2, 0
_080A4A84: .4byte 0xFF0000FF
_080A4A88:
	ldr r0, _080A4A9C  @ 0x0000FFFF
	ands r1, r0
	lsls r1, r1, #8
	ldr r0, _080A4AA0  @ 0xFF0000FF
	ands r0, r2
_080A4A92:
	orrs r0, r1
	str r0, [r3]
_080A4A96:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A4A9C: .4byte 0x0000FFFF
_080A4AA0: .4byte 0xFF0000FF

	THUMB_FUNC_START sub_80A4AA4
sub_80A4AA4: @ 0x080A4AA4
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	movs r5, #0
	ldr r4, _080A4B10  @ gBattleActor
	adds r0, r4, #0
	bl GetUnitCurrentHp
	cmp r0, #0
	bne _080A4ABA
	adds r7, r4, #0
	ldr r5, _080A4B14  @ gBattleTarget
_080A4ABA:
	ldr r6, _080A4B14  @ gBattleTarget
	adds r0, r6, #0
	bl GetUnitCurrentHp
	cmp r0, #0
	bne _080A4ACA
	adds r7, r6, #0
	adds r5, r4, #0
_080A4ACA:
	cmp r7, #0
	beq _080A4B08
	cmp r5, #0
	beq _080A4AF0
	movs r0, #0xb
	ldrsb r0, [r5, r0]
	movs r1, #0xc0
	ands r0, r1
	cmp r0, #0
	bne _080A4AF0
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	bl sub_80A4534
	ldr r1, _080A4B18  @ gUnknown_0202BCF0
	adds r1, #0x48
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
_080A4AF0:
	cmp r7, #0
	beq _080A4B08
	movs r0, #0xb
	ldrsb r0, [r7, r0]
	movs r1, #0xc0
	ands r0, r1
	cmp r0, #0
	bne _080A4B08
	ldr r0, [r7]
	ldrb r0, [r0, #4]
	bl sub_80A4594
_080A4B08:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A4B10: .4byte gBattleActor
_080A4B14: .4byte gBattleTarget
_080A4B18: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A4B1C
sub_80A4B1C: @ 0x080A4B1C
	push {r4, r5, r6, lr}
	sub sp, #0xb0
	adds r6, r0, #0
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	movs r4, #0
	add r1, sp, #0x14
_080A4B2C:
	adds r0, r1, r4
	ldrb r0, [r0]
	cmp r0, r6
	beq _080A4B58
	adds r4, #1
	cmp r4, #0xb
	ble _080A4B2C
	movs r4, #0
	add r5, sp, #0x64
_080A4B3E:
	adds r0, r4, #0
	bl sub_80A5218
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A4B5C
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80A522C
	ldrb r0, [r5, #0x18]
	cmp r0, r6
	bne _080A4B5C
_080A4B58:
	movs r0, #0
	b _080A4B64
_080A4B5C:
	adds r4, #1
	cmp r4, #2
	ble _080A4B3E
	movs r0, #1
_080A4B64:
	add sp, #0xb0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A4B6C
sub_80A4B6C: @ 0x080A4B6C
	push {r4, lr}
	movs r4, #1
_080A4B70:
	adds r0, r4, #0
	bl sub_80A4B1C
	adds r1, r0, #0
	lsls r1, r1, #0x18
	cmp r1, #0
	beq _080A4B82
	adds r0, r4, #0
	b _080A4B88
_080A4B82:
	adds r4, #1
	cmp r4, #0xff
	ble _080A4B70
_080A4B88:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A4B90
sub_80A4B90: @ 0x080A4B90
	push {lr}
	movs r2, #0
	movs r1, #0
	adds r3, r0, #0
	adds r3, #0x14
_080A4B9A:
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A4BA4
	adds r2, #1
_080A4BA4:
	adds r1, #1
	cmp r1, #0xb
	ble _080A4B9A
	adds r0, r2, #0
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A4BB0
sub_80A4BB0: @ 0x080A4BB0
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A4BC8
	mov r0, sp
	bl sub_80A4B90
	b _080A4BCA
_080A4BC8:
	movs r0, #0
_080A4BCA:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A4BD0
sub_80A4BD0: @ 0x080A4BD0
	push {r4, lr}
	movs r3, #0
	adds r4, r0, #0
	adds r4, #0x14
	adds r2, r4, #0
_080A4BDA:
	adds r0, r2, r3
	ldrb r0, [r0]
	cmp r0, r1
	beq _080A4BFE
	adds r3, #1
	cmp r3, #0xb
	ble _080A4BDA
	movs r3, #0
_080A4BEA:
	adds r2, r4, r3
	ldrb r0, [r2]
	cmp r0, #0
	bne _080A4BF8
	strb r1, [r2]
	movs r0, #1
	b _080A4C00
_080A4BF8:
	adds r3, #1
	cmp r3, #0xb
	ble _080A4BEA
_080A4BFE:
	movs r0, #0
_080A4C00:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A4C08
sub_80A4C08: @ 0x080A4C08
	ldr r0, _080A4C10  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0x1b]
	bx lr
	.align 2, 0
_080A4C10: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START DeclareCompletedPlaythrough
DeclareCompletedPlaythrough: @ 0x080A4C14
	push {r4, r5, r6, r7, lr}
	sub sp, #0x64
	bl sub_80A4C08
	adds r5, r0, #0
	ldr r6, _080A4C6C  @ gUnknown_0202BCF0
	ldrb r0, [r6, #0x14]
	lsrs r4, r0, #6
	movs r0, #1
	ands r4, r0
	adds r0, r6, #0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	lsrs r7, r0, #0x1f
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A4C48
	bl sub_80A2DE4
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
_080A4C48:
	ldrb r1, [r6, #0x18]
	mov r0, sp
	bl sub_80A4BD0
	mov r2, sp
	ldrb r1, [r2, #0xe]
	movs r0, #1
	adds r3, r1, #0
	orrs r3, r0
	strb r3, [r2, #0xe]
	cmp r5, #2
	beq _080A4C70
	cmp r5, #2
	ble _080A4CA6
	cmp r5, #3
	beq _080A4C8A
	b _080A4CA6
	.align 2, 0
_080A4C6C: .4byte gUnknown_0202BCF0
_080A4C70:
	cmp r7, #0
	bne _080A4C7A
	mov r1, sp
	movs r0, #4
	b _080A4CA2
_080A4C7A:
	cmp r4, #0
	beq _080A4C84
	mov r1, sp
	movs r0, #0x10
	b _080A4CA2
_080A4C84:
	mov r1, sp
	movs r0, #8
	b _080A4CA2
_080A4C8A:
	cmp r7, #0
	bne _080A4C94
	mov r1, sp
	movs r0, #0x20
	b _080A4CA2
_080A4C94:
	cmp r4, #0
	beq _080A4C9E
	mov r1, sp
	movs r0, #0x80
	b _080A4CA2
_080A4C9E:
	mov r1, sp
	movs r0, #0x40
_080A4CA2:
	orrs r3, r0
	strb r3, [r1, #0xe]
_080A4CA6:
	mov r0, sp
	bl SaveSomeUnitStatThingUnlockIdk
	add sp, #0x64
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A4CB4
sub_80A4CB4: @ 0x080A4CB4
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A4CC8
	movs r0, #0
	b _080A4CD0
_080A4CC8:
	mov r0, sp
	ldrb r0, [r0, #0xf]
	lsls r0, r0, #0x1f
	lsrs r0, r0, #0x1f
_080A4CD0:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A4CD8
sub_80A4CD8: @ 0x080A4CD8
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A4CF6
	mov r0, sp
	ldrb r1, [r0, #0xf]
	movs r2, #1
	orrs r1, r2
	strb r1, [r0, #0xf]
	bl SaveSomeUnitStatThingUnlockIdk
_080A4CF6:
	add sp, #0x64
	pop {r0}
	bx r0

	THUMB_FUNC_START BWL_GetEntry
BWL_GetEntry: @ 0x080A4CFC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r4, #0x45
	bhi _080A4D20
	adds r0, r4, #0
	bl GetCharacterData
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080A4D20
	lsls r0, r4, #4
	ldr r1, _080A4D1C  @ gUnknown_0203E884
	adds r0, r0, r1
	b _080A4D22
	.align 2, 0
_080A4D1C: .4byte gUnknown_0203E884
_080A4D20:
	movs r0, #0
_080A4D22:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A4D28
sub_80A4D28: @ 0x080A4D28
	ldr r0, _080A4D30  @ gUnknown_0203EDB4
	ldr r0, [r0]
	bx lr
	.align 2, 0
_080A4D30: .4byte gUnknown_0203EDB4

	THUMB_FUNC_START Set0203EDB4
Set0203EDB4: @ 0x080A4D34
	ldr r1, _080A4D3C  @ gUnknown_0203EDB4
	str r0, [r1]
	bx lr
	.align 2, 0
_080A4D3C: .4byte gUnknown_0203EDB4

	THUMB_FUNC_START Save0203EDB4
Save0203EDB4: @ 0x080A4D40
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A4D54  @ gUnknown_0203EDB4
	ldr r2, _080A4D58  @ 0x00000D88
	adds r1, r1, r2
	movs r2, #4
	bl WriteAndVerifySramFast
	pop {r0}
	bx r0
	.align 2, 0
_080A4D54: .4byte gUnknown_0203EDB4
_080A4D58: .4byte 0x00000D88

	THUMB_FUNC_START Load0203EDB4
Load0203EDB4: @ 0x080A4D5C
	push {lr}
	ldr r2, _080A4D74  @ ReadSramFast
	ldr r1, _080A4D78  @ 0x00000D88
	adds r0, r0, r1
	ldr r1, _080A4D7C  @ gUnknown_0203EDB4
	ldr r3, [r2]
	movs r2, #4
	bl _call_via_r3
	pop {r0}
	bx r0
	.align 2, 0
_080A4D74: .4byte ReadSramFast
_080A4D78: .4byte 0x00000D88
_080A4D7C: .4byte gUnknown_0203EDB4

	THUMB_FUNC_START sub_80A4D80
sub_80A4D80: @ 0x080A4D80
	push {r4, lr}
	sub sp, #0x64
	adds r4, r0, #0
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	mov r0, sp
	adds r0, #0x62
	strb r4, [r0]
	mov r0, sp
	bl sub_80A2DD0
	add sp, #0x64
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A4DA0
sub_80A4DA0: @ 0x080A4DA0
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A4DBE
	mov r0, sp
	adds r0, #0x62
	ldrb r0, [r0]
	cmp r0, #2
	bgt _080A4DBE
	cmp r0, #0
	bge _080A4DC0
_080A4DBE:
	movs r0, #0
_080A4DC0:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A4DC8
sub_80A4DC8: @ 0x080A4DC8
	push {r4, r5, lr}
	sub sp, #0x5c
	adds r5, r0, #0
	movs r0, #3
	bl sub_80A5DA8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A4DF0
	add r4, sp, #0x10
	movs r0, #3
	adds r1, r4, #0
	bl sub_80A5DFC
	ldrb r0, [r4, #0xc]
	cmp r0, r5
	bne _080A4DF0
	movs r0, #3
	bl sub_80A5A20
_080A4DF0:
	mov r1, sp
	movs r0, #0xff
	strb r0, [r1, #6]
	mov r0, sp
	adds r1, r5, #0
	bl sub_80A2F94
	add sp, #0x5c
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A4E08
sub_80A4E08: @ 0x080A4E08
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #0x10
	mov r9, r1
	bl sub_80A3114
	adds r6, r0, #0
	mov r0, r9
	bl GetSaveDataLocation
	mov r8, r0
	ldr r0, _080A4E60  @ ReadSramFast
	ldr r4, _080A4E64  @ gUnknown_02020188
	ldr r5, _080A4E68  @ 0x00000DC8
	ldr r3, [r0]
	adds r0, r6, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl _call_via_r3
	adds r0, r4, #0
	mov r1, r8
	adds r2, r5, #0
	bl WriteAndVerifySramFast
	ldr r0, _080A4E6C  @ 0x00040624
	str r0, [sp]
	mov r1, sp
	movs r0, #0
	strb r0, [r1, #6]
	mov r0, sp
	mov r1, r9
	bl sub_80A2F94
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A4E60: .4byte ReadSramFast
_080A4E64: .4byte gUnknown_02020188
_080A4E68: .4byte 0x00000DC8
_080A4E6C: .4byte 0x00040624

	THUMB_FUNC_START sub_80A4E70
sub_80A4E70: @ 0x080A4E70
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x54
	mov sl, r0
	adds r5, r1, #0
	mov r8, r2
	adds r4, r3, #0
	bl GetSaveDataLocation
	adds r7, r0, #0
	mov r0, r8
	cmp r0, #0
	bne _080A4E96
	ldr r0, _080A4FE4  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0x1b]
	mov r8, r0
_080A4E96:
	cmp r4, #0
	bge _080A4EA4
	ldr r0, _080A4FE4  @ gUnknown_0202BCF0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	lsrs r4, r0, #0x1f
_080A4EA4:
	movs r0, #0
	bl SetGameClock
	lsls r1, r4, #0x18
	asrs r1, r1, #0x18
	adds r0, r5, #0
	bl InitPlaythroughState
	bl ClearUnits
	bl ClearConvoyItems
	bl sub_8083D18
	movs r0, #3
	bl sub_80A5A20
	ldr r6, _080A4FE4  @ gUnknown_0202BCF0
	adds r2, r6, #0
	adds r2, #0x2c
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	ldrh r1, [r6, #0x2c]
	ldr r0, _080A4FE8  @ 0xFFFFE00F
	ands r0, r1
	strh r0, [r6, #0x2c]
	add r0, sp, #0x34
	movs r4, #0
	strh r4, [r0]
	adds r1, r6, #0
	adds r1, #0x30
	ldr r2, _080A4FEC  @ 0x01000008
	bl CpuSet
	ldr r0, [r6, #0x2c]
	ldr r1, _080A4FF0  @ 0xFF801FFF
	ands r0, r1
	str r0, [r6, #0x2c]
	movs r5, #0
	mov r1, r8
	strb r1, [r6, #0x1b]
	adds r2, r6, #0
	adds r2, #0x2b
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	adds r0, r6, #0
	adds r0, #0x20
	strb r4, [r0]
	strb r4, [r6, #0xe]
	bl sub_80A4B6C
	strb r0, [r6, #0x18]
	mov r0, sl
	strb r0, [r6, #0xc]
	bl sub_80A4BB0
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #7
	ldrh r2, [r6, #0x2e]
	ldr r1, _080A4FF4  @ 0xFFFFF07F
	ands r1, r2
	orrs r1, r0
	strh r1, [r6, #0x2e]
	adds r0, r6, #0
	adds r1, r7, #0
	movs r2, #0x4c
	bl WriteAndVerifySramFast
	movs r0, #0
	bl Set0203EDB4
	adds r0, r7, #0
	bl Save0203EDB4
	mov r0, sp
	adds r0, #0x36
	strh r5, [r0]
	add r4, sp, #0x10
	ldr r2, _080A4FF8  @ 0x01000012
	adds r1, r4, #0
	bl CpuSet
	add r1, sp, #0x50
	mov r8, r1
	add r0, sp, #0x38
	mov r9, r0
	adds r5, r7, #0
	adds r5, #0x4c
	movs r6, #0x32
_080A4F62:
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	adds r5, #0x24
	subs r6, #1
	cmp r6, #0
	bge _080A4F62
	movs r5, #0
	movs r0, #0xef
	lsls r0, r0, #3
	adds r1, r7, r0
	adds r0, r4, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	ldr r1, _080A4FFC  @ 0x0000079C
	adds r0, r7, r1
	bl SaveConvoyItems
	adds r0, r7, #0
	bl sub_80A4104
	ldr r1, _080A5000  @ 0x00000D6C
	adds r0, r7, r1
	bl SaveGlobalEventIndexes
	ldr r1, _080A5004  @ 0x00000D8C
	adds r0, r7, r1
	bl sub_80A7074
	movs r4, #0
	mov r0, r8
	strh r5, [r0]
	ldr r2, _080A5008  @ 0x0100000C
	mov r1, r9
	bl CpuSet
	movs r0, #0xdb
	lsls r0, r0, #4
	adds r1, r7, r0
	mov r0, r9
	movs r2, #0x18
	bl WriteAndVerifySramFast
	ldr r0, _080A500C  @ 0x00040624
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #6]
	mov r1, sl
	bl sub_80A2F94
	mov r0, sl
	bl sub_80A4D80
	add sp, #0x54
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A4FE4: .4byte gUnknown_0202BCF0
_080A4FE8: .4byte 0xFFFFE00F
_080A4FEC: .4byte 0x01000008
_080A4FF0: .4byte 0xFF801FFF
_080A4FF4: .4byte 0xFFFFF07F
_080A4FF8: .4byte 0x01000012
_080A4FFC: .4byte 0x0000079C
_080A5000: .4byte 0x00000D6C
_080A5004: .4byte 0x00000D8C
_080A5008: .4byte 0x0100000C
_080A500C: .4byte 0x00040624

	THUMB_FUNC_START SaveGame
SaveGame: @ 0x080A5010
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x90
	mov sl, r0
	bl GetSaveDataLocation
	adds r7, r0, #0
	movs r0, #3
	bl sub_80A5A20
	ldr r4, _080A5104  @ gUnknown_0202BCF0
	mov r0, sl
	strb r0, [r4, #0xc]
	bl GetGameClock
	str r0, [r4]
	adds r0, r4, #0
	adds r1, r7, #0
	movs r2, #0x4c
	bl WriteAndVerifySramFast
	add r1, sp, #0x10
	mov r8, r1
	mov r0, sp
	adds r0, #0x74
	str r0, [sp, #0x8c]
	adds r4, r7, #0
	adds r4, #0x4c
	movs r6, #0
	ldr r1, _080A5108  @ gUnitArrayBlue
	mov r9, r1
	movs r5, #0x32
_080A5056:
	mov r1, r9
	adds r0, r6, r1
	adds r1, r4, #0
	bl SaveUnit
	adds r4, #0x24
	adds r6, #0x48
	subs r5, #1
	cmp r5, #0
	bge _080A5056
	mov r0, r8
	bl LoadSomeUnitStatThingUnlockIdk
	movs r4, #0
	ldr r6, _080A5108  @ gUnitArrayBlue
	movs r5, #0x32
_080A5076:
	adds r0, r4, r6
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	mov r1, r8
	bl SetSomeUnitStatThingUnlockMaybeIdk
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge _080A5076
	movs r4, #0
	mov r0, r8
	bl SaveSomeUnitStatThingUnlockIdk
	movs r1, #0xef
	lsls r1, r1, #3
	adds r0, r7, r1
	bl SaveRNGState_Maybe
	ldr r1, _080A510C  @ 0x0000079C
	adds r0, r7, r1
	bl SaveConvoyItems
	ldr r1, _080A5110  @ 0x0000084C
	adds r0, r7, r1
	bl SaveBWLEntries
	ldr r1, _080A5114  @ 0x00000CAC
	adds r0, r7, r1
	bl SaveChapterWinData
	adds r0, r7, #0
	bl Save0203EDB4
	ldr r1, _080A5118  @ 0x00000D6C
	adds r0, r7, r1
	bl SaveGlobalEventIndexes
	ldr r1, _080A511C  @ 0x00000D8C
	adds r0, r7, r1
	ldr r1, _080A5120  @ gUnknown_03005280
	bl sub_80A70B0
	ldr r0, [sp, #0x8c]
	bl sub_8037E4C
	movs r0, #0xdb
	lsls r0, r0, #4
	adds r1, r7, r0
	ldr r0, [sp, #0x8c]
	movs r2, #0x18
	bl WriteAndVerifySramFast
	ldr r0, _080A5124  @ 0x00040624
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #6]
	mov r1, sl
	bl sub_80A2F94
	mov r0, sl
	bl sub_80A4D80
	add sp, #0x90
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A5104: .4byte gUnknown_0202BCF0
_080A5108: .4byte gUnitArrayBlue
_080A510C: .4byte 0x0000079C
_080A5110: .4byte 0x0000084C
_080A5114: .4byte 0x00000CAC
_080A5118: .4byte 0x00000D6C
_080A511C: .4byte 0x00000D8C
_080A5120: .4byte gUnknown_03005280
_080A5124: .4byte 0x00040624

	THUMB_FUNC_START LoadGame
LoadGame: @ 0x080A5128
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0x18
	mov r9, r0
	bl sub_80A3114
	adds r7, r0, #0
	ldr r0, _080A51F0  @ gUnknown_0202BCB0
	ldrb r1, [r0, #4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	bne _080A514C
	movs r0, #3
	bl sub_80A5A20
_080A514C:
	ldr r0, _080A51F4  @ ReadSramFast
	ldr r4, _080A51F8  @ gUnknown_0202BCF0
	ldr r3, [r0]
	adds r0, r7, #0
	adds r1, r4, #0
	movs r2, #0x4c
	bl _call_via_r3
	ldr r0, [r4]
	bl SetGameClock
	mov r0, r9
	strb r0, [r4, #0xc]
	bl ClearUnits
	movs r6, #0
	adds r4, r7, #0
	adds r4, #0x4c
	ldr r1, _080A51FC  @ gUnitArrayBlue
	mov r8, r1
	movs r5, #0x32
_080A5176:
	mov r2, r8
	adds r1, r6, r2
	adds r0, r4, #0
	bl LoadSavedUnit
	adds r6, #0x48
	adds r4, #0x24
	subs r5, #1
	cmp r5, #0
	bge _080A5176
	movs r1, #0xef
	lsls r1, r1, #3
	adds r0, r7, r1
	bl sub_80A5A00
	ldr r2, _080A5200  @ 0x0000079C
	adds r0, r7, r2
	bl LoadConvoyItems
	ldr r1, _080A5204  @ 0x00000D6C
	adds r0, r7, r1
	bl LoadGlobalEventIds
	ldr r2, _080A5208  @ 0x0000084C
	adds r0, r7, r2
	bl LoadBWLEntries
	ldr r1, _080A520C  @ 0x00000CAC
	adds r0, r7, r1
	bl LoadSomeTable
	adds r0, r7, #0
	bl Load0203EDB4
	ldr r2, _080A5210  @ 0x00000D8C
	adds r0, r7, r2
	ldr r1, _080A5214  @ gUnknown_03005280
	bl sub_80A7138
	ldr r1, _080A51F4  @ ReadSramFast
	movs r2, #0xdb
	lsls r2, r2, #4
	adds r0, r7, r2
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0x18
	bl _call_via_r3
	mov r0, sp
	bl sub_8037E64
	mov r0, r9
	bl sub_80A4D80
	add sp, #0x18
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A51F0: .4byte gUnknown_0202BCB0
_080A51F4: .4byte ReadSramFast
_080A51F8: .4byte gUnknown_0202BCF0
_080A51FC: .4byte gUnitArrayBlue
_080A5200: .4byte 0x0000079C
_080A5204: .4byte 0x00000D6C
_080A5208: .4byte 0x0000084C
_080A520C: .4byte 0x00000CAC
_080A5210: .4byte 0x00000D8C
_080A5214: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80A5218
sub_80A5218: @ 0x080A5218
	push {lr}
	adds r1, r0, #0
	movs r0, #0
	bl sub_80A2EF8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A522C
sub_80A522C: @ 0x080A522C
	push {r4, lr}
	adds r4, r1, #0
	bl sub_80A3114
	ldr r1, _080A5248  @ ReadSramFast
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x4c
	bl _call_via_r3
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A5248: .4byte ReadSramFast

	THUMB_FUNC_START sub_80A524C
sub_80A524C: @ 0x080A524C
	push {lr}
	sub sp, #4
	bl sub_80A3114
	ldr r1, _080A526C  @ ReadSramFast
	ldr r2, _080A5270  @ 0x00000D88
	adds r0, r0, r2
	ldr r3, [r1]
	mov r1, sp
	movs r2, #4
	bl _call_via_r3
	ldr r0, [sp]
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
_080A526C: .4byte ReadSramFast
_080A5270: .4byte 0x00000D88

	THUMB_FUNC_START sub_80A5274
sub_80A5274: @ 0x080A5274
	push {r4, lr}
	adds r4, r1, #0
	bl sub_80A3114
	ldr r1, _080A528C  @ 0x00000D8C
	adds r0, r0, r1
	adds r1, r4, #0
	bl sub_80A7138
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A528C: .4byte 0x00000D8C

	THUMB_FUNC_START sub_80A5290
sub_80A5290: @ 0x080A5290
	push {r4, lr}
	bl sub_80A3114
	ldr r1, _080A52B4  @ 0x00000D6C
	adds r0, r0, r1
	ldr r4, _080A52B8  @ gUnknown_02020188
	adds r1, r4, #0
	bl sub_80A31C0
	movs r0, #0x8a
	adds r1, r4, #0
	bl sub_8083D34
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080A52B4: .4byte 0x00000D6C
_080A52B8: .4byte gUnknown_02020188

	THUMB_FUNC_START sub_80A52BC
sub_80A52BC: @ 0x080A52BC
	push {lr}
	adds r2, r0, #0
	ldrb r1, [r2, #0x14]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _080A52D6
	movs r0, #0xe
	ldrsb r0, [r2, r0]
	cmp r0, #0
	bne _080A52D6
	movs r0, #0
	b _080A52D8
_080A52D6:
	movs r0, #1
_080A52D8:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A52DC
sub_80A52DC: @ 0x080A52DC
	push {r4, lr}
	sub sp, #0x4c
	adds r4, r0, #0
	bl sub_80A5218
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A5300
	adds r0, r4, #0
	mov r1, sp
	bl sub_80A522C
	mov r0, sp
	bl sub_80A52BC
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _080A5302
_080A5300:
	movs r0, #0
_080A5302:
	add sp, #0x4c
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A530C
sub_80A530C: @ 0x080A530C
	push {r4, lr}
	sub sp, #0x4c
	adds r4, r0, #0
	bl sub_80A5218
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A5332
	adds r0, r4, #0
	mov r1, sp
	bl sub_80A522C
	mov r0, sp
	ldrb r1, [r0, #0x14]
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _080A5334
_080A5332:
	movs r0, #0
_080A5334:
	add sp, #0x4c
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START SaveUnit
SaveUnit: @ 0x080A533C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x70
	adds r7, r0, #0
	str r1, [sp, #0x6c]
	mov r1, sp
	ldr r0, [r7]
	ldrb r0, [r0, #4]
	strb r0, [r1, #0x14]
	mov r3, sp
	ldr r0, [r7, #4]
	ldrb r1, [r0, #4]
	movs r0, #0x7f
	ands r1, r0
	ldrb r2, [r3]
	movs r5, #0x80
	negs r5, r5
	adds r0, r5, #0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3]
	ldr r4, [r7]
	cmp r4, #0
	bne _080A5388
	add r7, sp, #0x24
	adds r0, r7, #0
	bl ClearUnit
	mov r0, sp
	strb r4, [r0, #0x14]
	mov r2, sp
	ldrb r1, [r2]
	adds r0, r5, #0
	ands r0, r1
	strb r0, [r2]
_080A5388:
	mov r4, sp
	movs r1, #8
	ldrsb r1, [r7, r1]
	movs r0, #0x1f
	mov r9, r0
	mov r0, r9
	ands r1, r0
	lsls r1, r1, #7
	ldrh r2, [r4]
	ldr r3, _080A5748  @ 0xFFFFF07F
	adds r0, r3, #0
	ands r0, r2
	orrs r0, r1
	strh r0, [r4]
	ldrb r2, [r7, #9]
	movs r1, #0x7f
	mov sl, r1
	ands r2, r1
	lsls r2, r2, #0xc
	ldr r0, [sp]
	ldr r1, _080A574C  @ 0xFFF80FFF
	ands r0, r1
	orrs r0, r2
	str r0, [sp]
	movs r1, #0x10
	ldrsb r1, [r7, r1]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #3
	ldrh r2, [r4, #2]
	ldr r0, _080A5750  @ 0xFFFFFE07
	ands r0, r2
	orrs r0, r1
	strh r0, [r4, #2]
	movs r1, #0x11
	ldrsb r1, [r7, r1]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #1
	ldrb r2, [r4, #3]
	movs r0, #0x7f
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #3]
	movs r2, #0x12
	ldrsb r2, [r7, r2]
	movs r6, #0x3f
	ands r2, r6
	lsls r2, r2, #0xc
	ldr r0, [sp, #4]
	ldr r1, _080A5754  @ 0xFFFC0FFF
	ands r0, r1
	orrs r0, r2
	str r0, [sp, #4]
	movs r1, #0x14
	ldrsb r1, [r7, r1]
	movs r5, #0x1f
	ands r1, r5
	lsls r1, r1, #2
	ldrb r2, [r4, #6]
	movs r0, #0x7d
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #6]
	mov r2, sp
	movs r0, #0x15
	ldrsb r0, [r7, r0]
	mov r4, r9
	ands r0, r4
	lsls r0, r0, #7
	ldrh r1, [r2, #6]
	ands r3, r1
	orrs r3, r0
	strh r3, [r2, #6]
	mov r4, sp
	movs r3, #0x16
	ldrsb r3, [r7, r3]
	movs r0, #0xf
	mov r8, r0
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #4
	ldrb r2, [r4, #7]
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #7]
	lsrs r3, r3, #4
	movs r1, #1
	mov ip, r1
	ands r3, r1
	ldrb r1, [r4, #8]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	orrs r0, r3
	strb r0, [r4, #8]
	mov r3, sp
	movs r1, #0x17
	ldrsb r1, [r7, r1]
	ands r1, r5
	lsls r1, r1, #1
	movs r2, #0x3f
	negs r2, r2
	ands r0, r2
	orrs r0, r1
	strb r0, [r3, #8]
	movs r1, #0x18
	ldrsb r1, [r7, r1]
	mov r4, r9
	ands r1, r4
	lsls r1, r1, #6
	ldrh r2, [r3, #8]
	ldr r0, _080A5758  @ 0xFFFFF83F
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #8]
	movs r1, #0x19
	ldrsb r1, [r7, r1]
	lsls r1, r1, #3
	ldrb r2, [r3, #9]
	movs r0, #7
	ands r0, r2
	orrs r0, r1
	strb r0, [r3, #9]
	movs r1, #0x1a
	ldrsb r1, [r7, r1]
	ands r1, r5
	ldrb r2, [r3, #0xa]
	movs r0, #0x20
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3, #0xa]
	movs r1, #0x1d
	ldrsb r1, [r7, r1]
	ands r1, r4
	lsls r1, r1, #5
	ldrh r2, [r3, #0xa]
	ldr r0, _080A575C  @ 0xFFFFFC1F
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #0xa]
	ldrh r2, [r7, #0x1e]
	adds r1, r2, #0
	ands r1, r6
	lsls r1, r1, #2
	ldrb r4, [r3, #0xb]
	movs r5, #3
	adds r0, r5, #0
	ands r0, r4
	orrs r0, r1
	strb r0, [r3, #0xb]
	lsrs r2, r2, #6
	strb r2, [r3, #0xc]
	ldrh r2, [r7, #0x20]
	ldr r4, _080A5760  @ 0x00003FFF
	ands r2, r4
	lsls r2, r2, #8
	ldr r0, [sp, #0xc]
	ldr r1, _080A5764  @ 0xFFC000FF
	ands r0, r1
	orrs r0, r2
	str r0, [sp, #0xc]
	ldrh r1, [r7, #0x22]
	ldr r0, _080A5768  @ 0x000003FF
	ands r0, r1
	lsls r0, r0, #6
	ldrh r2, [r3, #0xe]
	ands r6, r2
	orrs r6, r0
	strh r6, [r3, #0xe]
	lsrs r1, r1, #0xa
	mov r0, r8
	ands r1, r0
	ldrb r2, [r3, #0x10]
	movs r0, #0x10
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3, #0x10]
	ldrh r1, [r7, #0x24]
	ands r1, r4
	lsls r1, r1, #4
	ldr r0, [sp, #0x10]
	ldr r2, _080A576C  @ 0xFFFC000F
	ands r0, r2
	orrs r0, r1
	str r0, [sp, #0x10]
	mov r2, sp
	ldrh r0, [r7, #0x26]
	lsls r0, r0, #2
	ldrh r1, [r2, #0x12]
	ands r5, r1
	orrs r5, r0
	strh r5, [r2, #0x12]
	mov r1, sp
	ldrb r0, [r1, #3]
	mov r5, sl
	ands r5, r0
	strb r5, [r1, #3]
	ldrh r2, [r1, #4]
	ldr r6, _080A5770  @ 0xFFFFF000
	adds r0, r6, #0
	ands r0, r2
	strh r0, [r1, #4]
	ldr r0, [r7, #0xc]
	movs r1, #4
	mov r8, r1
	ands r0, r1
	cmp r0, #0
	beq _080A5552
	mov r0, sp
	ldrh r2, [r0, #4]
	ldr r4, _080A5774  @ 0x00000FFF
	ands r2, r4
	mov r0, ip
	lsrs r1, r0, #1
	lsls r0, r0, #7
	orrs r0, r5
	strb r0, [r3, #3]
	orrs r1, r2
	ands r1, r4
	ldrh r2, [r3, #4]
	adds r0, r6, #0
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #4]
_080A5552:
	ldr r0, [r7, #0xc]
	movs r1, #8
	mov r9, r1
	ands r0, r1
	cmp r0, #0
	beq _080A5592
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r1, r4, #7
	ldrh r2, [r0, #4]
	ldr r5, _080A5774  @ 0x00000FFF
	ands r2, r5
	lsls r2, r2, #1
	orrs r2, r1
	movs r0, #2
	orrs r2, r0
	adds r1, r2, #0
	mov r0, ip
	ands r1, r0
	lsls r1, r1, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r1
	strb r0, [r3, #3]
	lsrs r2, r2, #1
	ands r2, r5
	ldrh r1, [r3, #4]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r2
	strh r0, [r3, #4]
_080A5592:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #7
	ands r0, r1
	cmp r0, #0
	beq _080A55D2
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r2, r4, #7
	ldrh r1, [r0, #4]
	ldr r5, _080A5774  @ 0x00000FFF
	ands r1, r5
	lsls r1, r1, #1
	orrs r1, r2
	mov r0, r8
	orrs r1, r0
	adds r2, r1, #0
	mov r0, ip
	ands r2, r0
	lsls r2, r2, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r2
	strb r0, [r3, #3]
	lsrs r1, r1, #1
	ands r1, r5
	ldrh r2, [r3, #4]
	adds r0, r6, #0
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #4]
_080A55D2:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #8
	ands r0, r1
	cmp r0, #0
	beq _080A5612
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r2, r4, #7
	ldrh r1, [r0, #4]
	ldr r5, _080A5774  @ 0x00000FFF
	ands r1, r5
	lsls r1, r1, #1
	orrs r1, r2
	mov r0, r9
	orrs r1, r0
	adds r2, r1, #0
	mov r0, ip
	ands r2, r0
	lsls r2, r2, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r2
	strb r0, [r3, #3]
	lsrs r1, r1, #1
	ands r1, r5
	ldrh r2, [r3, #4]
	adds r0, r6, #0
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #4]
_080A5612:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #6
	ands r0, r1
	cmp r0, #0
	beq _080A5652
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r1, r4, #7
	ldrh r2, [r0, #4]
	ldr r5, _080A5774  @ 0x00000FFF
	ands r2, r5
	lsls r2, r2, #1
	orrs r2, r1
	movs r0, #0x10
	orrs r2, r0
	adds r1, r2, #0
	mov r0, ip
	ands r1, r0
	lsls r1, r1, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r1
	strb r0, [r3, #3]
	lsrs r2, r2, #1
	ands r2, r5
	ldrh r1, [r3, #4]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r2
	strh r0, [r3, #4]
_080A5652:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	beq _080A5692
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r1, r4, #7
	ldrh r2, [r0, #4]
	ldr r5, _080A5774  @ 0x00000FFF
	ands r2, r5
	lsls r2, r2, #1
	orrs r2, r1
	movs r0, #0x20
	orrs r2, r0
	adds r1, r2, #0
	mov r0, ip
	ands r1, r0
	lsls r1, r1, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r1
	strb r0, [r3, #3]
	lsrs r2, r2, #1
	ands r2, r5
	ldrh r1, [r3, #4]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r2
	strh r0, [r3, #4]
_080A5692:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0x12
	ands r0, r1
	cmp r0, #0
	beq _080A56D2
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r1, r4, #7
	ldrh r2, [r0, #4]
	ldr r5, _080A5774  @ 0x00000FFF
	ands r2, r5
	lsls r2, r2, #1
	orrs r2, r1
	movs r0, #0x40
	orrs r2, r0
	adds r1, r2, #0
	mov r0, ip
	ands r1, r0
	lsls r1, r1, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r1
	strb r0, [r3, #3]
	lsrs r2, r2, #1
	ands r2, r5
	ldrh r1, [r3, #4]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r2
	strh r0, [r3, #4]
_080A56D2:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0xe
	ands r0, r1
	cmp r0, #0
	beq _080A5712
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r1, r4, #7
	ldrh r2, [r0, #4]
	ldr r5, _080A5774  @ 0x00000FFF
	ands r2, r5
	lsls r2, r2, #1
	orrs r2, r1
	movs r0, #0x80
	orrs r2, r0
	adds r1, r2, #0
	mov r0, ip
	ands r1, r0
	lsls r1, r1, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r1
	strb r0, [r3, #3]
	lsrs r2, r2, #1
	ands r2, r5
	ldrh r1, [r3, #4]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r2
	strh r0, [r3, #4]
_080A5712:
	movs r2, #0
	mov r5, sp
	adds r5, #0x1d
	adds r6, r7, #0
	adds r6, #0x32
	mov r4, sp
	adds r4, #0x15
	adds r3, r7, #0
	adds r3, #0x28
_080A5724:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble _080A5724
	movs r2, #0
	adds r4, r5, #0
	adds r3, r6, #0
_080A5738:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #6
	b _080A5778
	.align 2, 0
_080A5748: .4byte 0xFFFFF07F
_080A574C: .4byte 0xFFF80FFF
_080A5750: .4byte 0xFFFFFE07
_080A5754: .4byte 0xFFFC0FFF
_080A5758: .4byte 0xFFFFF83F
_080A575C: .4byte 0xFFFFFC1F
_080A5760: .4byte 0x00003FFF
_080A5764: .4byte 0xFFC000FF
_080A5768: .4byte 0x000003FF
_080A576C: .4byte 0xFFFC000F
_080A5770: .4byte 0xFFFFF000
_080A5774: .4byte 0x00000FFF
_080A5778:
	ble _080A5738
	mov r0, sp
	ldr r1, [sp, #0x6c]
	movs r2, #0x24
	bl WriteAndVerifySramFast
	add sp, #0x70
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START LoadSavedUnit
LoadSavedUnit: @ 0x080A5794
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x24
	adds r4, r1, #0
	ldr r1, _080A59D8  @ ReadSramFast
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0x24
	bl _call_via_r3
	mov r0, sp
	ldrb r0, [r0, #0x14]
	bl GetCharacterData
	str r0, [r4]
	mov r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl GetClassData
	str r0, [r4, #4]
	mov r0, sp
	ldrh r0, [r0]
	lsls r0, r0, #0x14
	lsrs r0, r0, #0x1b
	strb r0, [r4, #8]
	ldr r0, [sp]
	lsls r0, r0, #0xd
	lsrs r3, r0, #0x19
	strb r3, [r4, #9]
	mov r0, sp
	ldrh r0, [r0, #2]
	lsls r0, r0, #0x17
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0x10]
	mov r0, sp
	ldrb r0, [r0, #3]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0x11]
	ldr r0, [sp, #4]
	lsls r0, r0, #0xe
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0x12]
	mov r0, sp
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x14]
	mov r0, sp
	ldrh r0, [r0, #6]
	lsls r0, r0, #0x14
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x15]
	mov r0, sp
	ldrb r1, [r0, #7]
	lsrs r1, r1, #4
	ldrb r0, [r0, #8]
	movs r5, #1
	ands r0, r5
	lsls r0, r0, #4
	orrs r0, r1
	strb r0, [r4, #0x16]
	mov r0, sp
	ldrb r0, [r0, #8]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x17]
	mov r0, sp
	ldrh r0, [r0, #8]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x18]
	mov r0, sp
	ldrb r0, [r0, #9]
	lsrs r0, r0, #3
	strb r0, [r4, #0x19]
	mov r0, sp
	ldrb r0, [r0, #0xa]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x1a]
	mov r0, sp
	ldrh r0, [r0, #0xa]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x1d]
	mov r0, sp
	ldrb r1, [r0, #0xb]
	lsrs r1, r1, #2
	ldrb r0, [r0, #0xc]
	lsls r0, r0, #6
	orrs r0, r1
	strh r0, [r4, #0x1e]
	ldr r0, [sp, #0xc]
	lsls r0, r0, #0xa
	lsrs r0, r0, #0x12
	strh r0, [r4, #0x20]
	mov r0, sp
	ldrh r2, [r0, #0xe]
	lsrs r2, r2, #6
	ldrb r0, [r0, #0x10]
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #0xa
	orrs r0, r2
	strh r0, [r4, #0x22]
	ldr r0, [sp, #0x10]
	lsls r0, r0, #0xe
	lsrs r0, r0, #0x12
	strh r0, [r4, #0x24]
	mov r0, sp
	ldrh r0, [r0, #0x12]
	lsrs r0, r0, #2
	strh r0, [r4, #0x26]
	cmp r3, #0x63
	bls _080A5886
	movs r0, #0xff
	strb r0, [r4, #9]
_080A5886:
	movs r0, #0
	str r0, [r4, #0xc]
	mov r0, sp
	ldrb r1, [r0, #3]
	lsrs r1, r1, #7
	ldrh r0, [r0, #4]
	ldr r2, _080A59DC  @ 0x00000FFF
	ands r0, r2
	lsls r0, r0, #1
	orrs r0, r1
	ands r0, r5
	cmp r0, #0
	beq _080A58A4
	movs r0, #5
	str r0, [r4, #0xc]
_080A58A4:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _080A58BC
	ldr r0, [r4, #0xc]
	movs r1, #9
	orrs r0, r1
	str r0, [r4, #0xc]
_080A58BC:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _080A58D6
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #7
	orrs r0, r1
	str r0, [r4, #0xc]
_080A58D6:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	beq _080A58F0
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #8
	orrs r0, r1
	str r0, [r4, #0xc]
_080A58F0:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080A590A
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #6
	orrs r0, r1
	str r0, [r4, #0xc]
_080A590A:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080A5924
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #9
	orrs r0, r1
	str r0, [r4, #0xc]
_080A5924:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080A593E
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0x12
	orrs r0, r1
	str r0, [r4, #0xc]
_080A593E:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080A5958
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0xe
	orrs r0, r1
	str r0, [r4, #0xc]
_080A5958:
	movs r2, #0
	adds r7, r4, #0
	adds r7, #0x32
	mov r6, sp
	adds r6, #0x1d
	movs r0, #0x39
	adds r0, r0, r4
	mov r8, r0
	adds r5, r4, #0
	adds r5, #0x28
	mov r3, sp
	adds r3, #0x15
_080A5970:
	adds r0, r5, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble _080A5970
	movs r2, #0
	adds r5, r7, #0
	adds r3, r6, #0
_080A5984:
	adds r0, r5, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #6
	ble _080A5984
	adds r0, r4, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r4, #0
	bl SetUnitHp
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
	ldrb r0, [r4, #9]
	cmp r0, #0x7f
	bne _080A59B0
	movs r0, #0xff
	strb r0, [r4, #9]
_080A59B0:
	ldrb r1, [r4, #0x10]
	movs r0, #0x10
	ldrsb r0, [r4, r0]
	cmp r0, #0x3f
	bne _080A59BE
	movs r0, #0xff
	strb r0, [r4, #0x10]
_080A59BE:
	ldrb r1, [r4, #0x11]
	movs r0, #0x11
	ldrsb r0, [r4, r0]
	cmp r0, #0x3f
	bne _080A59CC
	movs r0, #0xff
	strb r0, [r4, #0x11]
_080A59CC:
	add sp, #0x24
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A59D8: .4byte ReadSramFast
_080A59DC: .4byte 0x00000FFF

	THUMB_FUNC_START SaveRNGState_Maybe
SaveRNGState_Maybe: @ 0x080A59E0
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	mov r0, sp
	bl sub_80A71E4
	mov r0, sp
	adds r1, r4, #0
	movs r2, #8
	bl WriteAndVerifySramFast
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A5A00
sub_80A5A00: @ 0x080A5A00
	push {lr}
	sub sp, #8
	ldr r1, _080A5A1C  @ ReadSramFast
	ldr r3, [r1]
	mov r1, sp
	movs r2, #8
	bl _call_via_r3
	mov r0, sp
	bl sub_80A71F8
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0
_080A5A1C: .4byte ReadSramFast

	THUMB_FUNC_START sub_80A5A20
sub_80A5A20: @ 0x080A5A20
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	mov r1, sp
	movs r0, #0xff
	strb r0, [r1, #6]
	mov r0, sp
	adds r1, r4, #0
	bl sub_80A2F94
	cmp r4, #3
	bne _080A5A40
	mov r0, sp
	movs r1, #4
	bl sub_80A2F94
_080A5A40:
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START SaveSuspendedGame
SaveSuspendedGame: @ 0x080A5A48
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x40
	mov r9, r0
	ldr r4, _080A5BC0  @ gUnknown_0202BCF0
	ldrb r1, [r4, #0x14]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080A5A64
	b _080A5BB0
_080A5A64:
	bl sub_80A2CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A5A70
	b _080A5BB0
_080A5A70:
	bl sub_80A63D0
	add r9, r0
	mov r0, r9
	bl GetSaveDataLocation
	adds r7, r0, #0
	bl GetGameClock
	str r0, [r4]
	adds r0, r4, #0
	adds r1, r7, #0
	movs r2, #0x4c
	bl WriteAndVerifySramFast
	bl StoreRNStateToActionStruct
	ldr r0, _080A5BC4  @ gActionData
	adds r1, r7, #0
	adds r1, #0x4c
	movs r2, #0x38
	bl WriteAndVerifySramFast
	ldr r5, _080A5BC8  @ gUnknown_02020188
	add r0, sp, #0x10
	mov sl, r0
	add r1, sp, #0x20
	mov r8, r1
	mov r2, sp
	adds r2, #0x38
	str r2, [sp, #0x3c]
	ldr r6, _080A5BCC  @ gUnitArrayBlue
	movs r4, #0x32
_080A5AB2:
	adds r1, r5, #0
	adds r5, #0x34
	adds r0, r6, #0
	bl PackUnitStructForSuspend
	adds r6, #0x48
	subs r4, #1
	cmp r4, #0
	bge _080A5AB2
	ldr r4, _080A5BC8  @ gUnknown_02020188
	ldr r2, _080A5BD0  @ 0x00000A5C
	adds r1, r7, #0
	adds r1, #0x84
	adds r0, r4, #0
	bl WriteSramFast
	adds r5, r4, #0
	ldr r6, _080A5BD4  @ gUnitArrayRed
	movs r4, #0x31
_080A5AD8:
	adds r1, r5, #0
	adds r5, #0x34
	adds r0, r6, #0
	bl PackUnitStructForSuspend
	adds r6, #0x48
	subs r4, #1
	cmp r4, #0
	bge _080A5AD8
	ldr r6, _080A5BD8  @ gUnitArrayGreen
	movs r4, #9
_080A5AEE:
	adds r1, r5, #0
	adds r5, #0x34
	adds r0, r6, #0
	bl PackUnitStructForSuspend
	adds r6, #0x48
	subs r4, #1
	cmp r4, #0
	bge _080A5AEE
	movs r4, #0
	ldr r0, _080A5BC8  @ gUnknown_02020188
	ldr r2, _080A5BDC  @ 0x00000B14
	adds r1, r7, r2
	movs r2, #0xc3
	lsls r2, r2, #4
	bl WriteSramFast
	ldr r1, _080A5BE0  @ 0x00001F24
	adds r0, r7, r1
	bl SaveGlobalEventIndexes
	ldr r2, _080A5BE4  @ 0x00001F3D
	adds r0, r7, r2
	bl SaveLocalEventIndexes
	ldr r1, _080A5BE8  @ 0x00001944
	adds r0, r7, r1
	bl SaveConvoyItems
	ldr r2, _080A5BEC  @ 0x000019F4
	adds r0, r7, r2
	bl SaveBWLEntries
	ldr r1, _080A5BF0  @ 0x00001E54
	adds r0, r7, r1
	bl SaveChapterWinData
	ldr r2, _080A5BF4  @ 0x00001744
	adds r0, r7, r2
	bl SaveTrapStructs
	mov r0, sl
	bl GetForceDisabledMenuItems
	ldr r0, _080A5BF8  @ 0x00001F14
	adds r1, r7, r0
	mov r0, sl
	movs r2, #0x10
	bl WriteAndVerifySramFast
	ldr r1, _080A5BFC  @ 0x00001F44
	adds r0, r7, r1
	ldr r1, _080A5C00  @ gUnknown_03005280
	bl sub_80A70B0
	mov r0, r8
	bl sub_8037E4C
	movs r2, #0xae
	lsls r2, r2, #4
	adds r1, r7, r2
	mov r0, r8
	movs r2, #0x18
	bl WriteAndVerifySramFast
	mov r0, r8
	bl sub_8037E08
	ldr r0, _080A5C04  @ 0x00001F68
	adds r1, r7, r0
	mov r0, r8
	movs r2, #0xc
	bl WriteAndVerifySramFast
	bl GetEventSlotCounter
	str r0, [sp, #0x38]
	ldr r2, _080A5C08  @ 0x00001F74
	adds r1, r7, r2
	ldr r0, [sp, #0x3c]
	movs r2, #4
	bl WriteAndVerifySramFast
	ldr r0, _080A5C0C  @ 0x00040624
	str r0, [sp]
	mov r1, sp
	movs r0, #1
	strb r0, [r1, #6]
	mov r0, sp
	mov r1, r9
	bl sub_80A2F94
	ldr r0, _080A5C10  @ gUnknown_0202BCB0
	adds r0, #0x3c
	strb r4, [r0]
	bl sub_80A63E0
_080A5BB0:
	add sp, #0x40
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A5BC0: .4byte gUnknown_0202BCF0
_080A5BC4: .4byte gActionData
_080A5BC8: .4byte gUnknown_02020188
_080A5BCC: .4byte gUnitArrayBlue
_080A5BD0: .4byte 0x00000A5C
_080A5BD4: .4byte gUnitArrayRed
_080A5BD8: .4byte gUnitArrayGreen
_080A5BDC: .4byte 0x00000B14
_080A5BE0: .4byte 0x00001F24
_080A5BE4: .4byte 0x00001F3D
_080A5BE8: .4byte 0x00001944
_080A5BEC: .4byte 0x000019F4
_080A5BF0: .4byte 0x00001E54
_080A5BF4: .4byte 0x00001744
_080A5BF8: .4byte 0x00001F14
_080A5BFC: .4byte 0x00001F44
_080A5C00: .4byte gUnknown_03005280
_080A5C04: .4byte 0x00001F68
_080A5C08: .4byte 0x00001F74
_080A5C0C: .4byte 0x00040624
_080A5C10: .4byte gUnknown_0202BCB0

	THUMB_FUNC_START LoadSuspendedGame
LoadSuspendedGame: @ 0x080A5C14
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x2c
	ldr r1, _080A5D58  @ gUnknown_0203EDB8
	ldrb r1, [r1]
	adds r0, r0, r1
	bl sub_80A3114
	adds r6, r0, #0
	ldr r5, _080A5D5C  @ ReadSramFast
	ldr r4, _080A5D60  @ gUnknown_0202BCF0
	ldr r3, [r5]
	adds r1, r4, #0
	movs r2, #0x4c
	bl _call_via_r3
	ldr r0, [r4]
	bl SetGameClock
	adds r0, r6, #0
	adds r0, #0x4c
	ldr r1, _080A5D64  @ gActionData
	ldr r3, [r5]
	movs r2, #0x38
	bl _call_via_r3
	bl LoadRNStateFromActionStruct
	bl ClearUnits
	movs r4, #0
	add r7, sp, #0x10
	add r0, sp, #0x28
	mov r8, r0
	movs r5, #0
_080A5C5C:
	movs r0, #0x34
	muls r0, r4, r0
	adds r0, #0x84
	adds r0, r6, r0
	ldr r1, _080A5D68  @ gUnitArrayBlue
	adds r1, r5, r1
	bl UnpackUnitStructFromSuspend
	adds r5, #0x48
	adds r4, #1
	cmp r4, #0x32
	ble _080A5C5C
	movs r4, #0
	movs r5, #0
_080A5C78:
	movs r0, #0x34
	muls r0, r4, r0
	ldr r1, _080A5D6C  @ 0x00000B14
	adds r0, r0, r1
	adds r0, r6, r0
	ldr r1, _080A5D70  @ gUnitArrayRed
	adds r1, r5, r1
	bl UnpackUnitStructFromSuspend
	adds r5, #0x48
	adds r4, #1
	cmp r4, #0x31
	ble _080A5C78
	movs r4, #0
	movs r5, #0
_080A5C96:
	movs r0, #0x34
	muls r0, r4, r0
	ldr r1, _080A5D74  @ 0x0000153C
	adds r0, r0, r1
	adds r0, r6, r0
	ldr r1, _080A5D78  @ gUnitArrayGreen
	adds r1, r5, r1
	bl UnpackUnitStructFromSuspend
	adds r5, #0x48
	adds r4, #1
	cmp r4, #9
	ble _080A5C96
	ldr r1, _080A5D7C  @ 0x000019F4
	adds r0, r6, r1
	bl LoadBWLEntries
	ldr r1, _080A5D80  @ 0x00001E54
	adds r0, r6, r1
	bl LoadSomeTable
	ldr r1, _080A5D84  @ 0x00001944
	adds r0, r6, r1
	bl LoadConvoyItems
	ldr r1, _080A5D88  @ 0x00001F24
	adds r0, r6, r1
	bl LoadGlobalEventIds
	ldr r1, _080A5D8C  @ 0x00001F3D
	adds r0, r6, r1
	bl LoadLocalEventIds
	ldr r1, _080A5D90  @ 0x00001744
	adds r0, r6, r1
	bl sub_80A638C
	ldr r4, _080A5D5C  @ ReadSramFast
	ldr r1, _080A5D94  @ 0x00001F14
	adds r0, r6, r1
	ldr r3, [r4]
	mov r1, sp
	movs r2, #0x10
	bl _call_via_r3
	mov r0, sp
	bl SetForceDisabledMenuItems
	ldr r1, _080A5D98  @ 0x00001F44
	adds r0, r6, r1
	ldr r1, _080A5D9C  @ gUnknown_03005280
	bl sub_80A7138
	movs r1, #0xae
	lsls r1, r1, #4
	adds r0, r6, r1
	ldr r3, [r4]
	adds r1, r7, #0
	movs r2, #0x18
	bl _call_via_r3
	adds r0, r7, #0
	bl sub_8037E64
	ldr r1, _080A5DA0  @ 0x00001F68
	adds r0, r6, r1
	ldr r3, [r4]
	adds r1, r7, #0
	movs r2, #0xc
	bl _call_via_r3
	adds r0, r7, #0
	bl sub_8037E30
	ldr r1, _080A5DA4  @ 0x00001F74
	adds r0, r6, r1
	ldr r3, [r4]
	mov r1, r8
	movs r2, #4
	bl _call_via_r3
	ldr r0, [sp, #0x28]
	bl SetEventSlotCounter
	ldr r0, _080A5D60  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xc]
	bl sub_80A524C
	bl Set0203EDB4
	add sp, #0x2c
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A5D58: .4byte gUnknown_0203EDB8
_080A5D5C: .4byte ReadSramFast
_080A5D60: .4byte gUnknown_0202BCF0
_080A5D64: .4byte gActionData
_080A5D68: .4byte gUnitArrayBlue
_080A5D6C: .4byte 0x00000B14
_080A5D70: .4byte gUnitArrayRed
_080A5D74: .4byte 0x0000153C
_080A5D78: .4byte gUnitArrayGreen
_080A5D7C: .4byte 0x000019F4
_080A5D80: .4byte 0x00001E54
_080A5D84: .4byte 0x00001944
_080A5D88: .4byte 0x00001F24
_080A5D8C: .4byte 0x00001F3D
_080A5D90: .4byte 0x00001744
_080A5D94: .4byte 0x00001F14
_080A5D98: .4byte 0x00001F44
_080A5D9C: .4byte gUnknown_03005280
_080A5DA0: .4byte 0x00001F68
_080A5DA4: .4byte 0x00001F74

	THUMB_FUNC_START sub_80A5DA8
sub_80A5DA8: @ 0x080A5DA8
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80A2CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A5DEC
	cmp r4, #3
	bne _080A5DEC
	ldr r4, _080A5DF0  @ gUnknown_0203EDB8
	bl sub_80A63B0
	strb r0, [r4]
	ldrb r1, [r4]
	adds r1, #3
	movs r0, #0
	bl sub_80A2EF8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A5DF4
	bl sub_80A63D0
	strb r0, [r4]
	ldrb r1, [r4]
	adds r1, #3
	movs r0, #0
	bl sub_80A2EF8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A5DF4
	movs r0, #0x7f
	strb r0, [r4]
_080A5DEC:
	movs r0, #0
	b _080A5DF6
	.align 2, 0
_080A5DF0: .4byte gUnknown_0203EDB8
_080A5DF4:
	movs r0, #1
_080A5DF6:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A5DFC
sub_80A5DFC: @ 0x080A5DFC
	push {lr}
	ldr r2, _080A5E0C  @ gUnknown_0203EDB8
	ldrb r2, [r2]
	adds r0, r0, r2
	bl sub_80A522C
	pop {r0}
	bx r0
	.align 2, 0
_080A5E0C: .4byte gUnknown_0203EDB8

	THUMB_FUNC_START PackUnitStructForSuspend
PackUnitStructForSuspend: @ 0x080A5E10
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	adds r7, r0, #0
	mov ip, r1
	ldr r0, [r7]
	cmp r0, #0
	bne _080A5E2A
	strb r0, [r1]
	b _080A60E6
_080A5E2A:
	ldrb r0, [r0, #4]
	mov r1, ip
	strb r0, [r1]
	ldr r0, [r7, #4]
	ldrb r0, [r0, #4]
	strb r0, [r1, #1]
	movs r1, #8
	ldrsb r1, [r7, r1]
	mov r4, ip
	adds r4, #0x24
	movs r5, #0x1f
	ands r1, r5
	ldrb r2, [r4]
	movs r3, #0x20
	negs r3, r3
	adds r0, r3, #0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4]
	ldrb r0, [r7, #9]
	mov r2, ip
	strb r0, [r2, #0x10]
	ldr r0, [r7, #0xc]
	str r0, [r2, #4]
	movs r1, #0x10
	ldrsb r1, [r7, r1]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #5
	ldrh r2, [r2, #0x24]
	ldr r0, _080A60F8  @ 0xFFFFF81F
	ands r0, r2
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x24]
	movs r2, #0x11
	ldrsb r2, [r7, r2]
	movs r0, #0x3f
	ands r2, r0
	lsls r2, r2, #0xb
	ldr r0, [r1, #0x24]
	ldr r1, _080A60FC  @ 0xFFFE07FF
	ands r0, r1
	orrs r0, r2
	mov r2, ip
	str r0, [r2, #0x24]
	ldrb r0, [r7, #0x12]
	strb r0, [r2, #0xe]
	ldrb r0, [r7, #0x13]
	strb r0, [r2, #0xf]
	movs r1, #0x14
	ldrsb r1, [r7, r1]
	adds r4, #2
	ands r1, r5
	lsls r1, r1, #1
	ldrb r2, [r4]
	movs r0, #0x3f
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4]
	movs r1, #0x15
	ldrsb r1, [r7, r1]
	movs r4, #0x1f
	ands r1, r4
	lsls r1, r1, #6
	mov r0, ip
	ldrh r2, [r0, #0x26]
	ldr r0, _080A6100  @ 0xFFFFF83F
	ands r0, r2
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x26]
	movs r1, #0x16
	ldrsb r1, [r7, r1]
	movs r2, #0x27
	add r2, ip
	mov r8, r2
	lsls r1, r1, #3
	ldrb r2, [r2]
	movs r6, #7
	movs r0, #7
	ands r0, r2
	orrs r0, r1
	mov r1, r8
	strb r0, [r1]
	movs r0, #0x17
	ldrsb r0, [r7, r0]
	mov r2, ip
	adds r2, #0x28
	ands r0, r5
	ldrb r1, [r2]
	ands r3, r1
	orrs r3, r0
	strb r3, [r2]
	movs r1, #0x18
	ldrsb r1, [r7, r1]
	ands r1, r4
	lsls r1, r1, #5
	mov r0, ip
	ldrh r2, [r0, #0x28]
	ldr r0, _080A6104  @ 0xFFFFFC1F
	ands r0, r2
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x28]
	movs r1, #0x19
	ldrsb r1, [r7, r1]
	mov r3, ip
	adds r3, #0x29
	ands r1, r5
	lsls r1, r1, #2
	ldrb r2, [r3]
	movs r0, #0x7d
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3]
	movs r2, #0x1a
	ldrsb r2, [r7, r2]
	movs r4, #0x1f
	ands r2, r4
	lsls r2, r2, #0xf
	mov r1, ip
	ldr r0, [r1, #0x28]
	ldr r1, _080A6108  @ 0xFFF07FFF
	ands r0, r1
	orrs r0, r2
	mov r2, ip
	str r0, [r2, #0x28]
	adds r5, r7, #0
	adds r5, #0x30
	ldrb r2, [r5]
	lsls r1, r2, #0x1c
	lsrs r1, r1, #0x1c
	movs r0, #0x2a
	add r0, ip
	mov r8, r0
	ands r1, r6
	lsls r1, r1, #4
	ldrb r3, [r0]
	movs r0, #0x71
	negs r0, r0
	ands r0, r3
	orrs r0, r1
	mov r1, r8
	strb r0, [r1]
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x1c
	movs r0, #7
	ands r2, r0
	lsls r2, r2, #7
	mov r0, ip
	ldrh r1, [r0, #0x2a]
	ldr r0, _080A610C  @ 0xFFFFFC7F
	ands r0, r1
	orrs r0, r2
	mov r1, ip
	strh r0, [r1, #0x2a]
	adds r0, r7, #0
	adds r0, #0x31
	ldrb r2, [r0]
	lsls r1, r2, #0x1c
	lsrs r1, r1, #0x1c
	movs r0, #0x2b
	add r0, ip
	mov r8, r0
	ands r1, r6
	lsls r1, r1, #2
	ldrb r3, [r0]
	movs r0, #0x1d
	negs r0, r0
	ands r0, r3
	orrs r0, r1
	lsrs r2, r2, #4
	lsls r2, r2, #5
	ands r0, r4
	orrs r0, r2
	mov r1, r8
	strb r0, [r1]
	ldrb r0, [r7, #0x1b]
	mov r2, ip
	strb r0, [r2, #3]
	movs r1, #0x1d
	ldrsb r1, [r7, r1]
	mov r3, ip
	adds r3, #0x2c
	movs r0, #0xf
	ands r1, r0
	ldrb r2, [r3]
	movs r0, #0x10
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3]
	ldrb r0, [r7, #0x1c]
	movs r1, #0x7f
	ands r1, r0
	adds r0, r7, #0
	adds r0, #0x39
	ldrb r3, [r0]
	movs r0, #1
	ands r0, r3
	lsls r0, r0, #7
	orrs r1, r0
	mov r0, ip
	adds r0, #0x30
	strb r1, [r0]
	ldrh r0, [r7, #0x1e]
	ldr r2, _080A6110  @ 0x00003FFF
	adds r1, r2, #0
	ands r1, r0
	movs r0, #6
	ands r0, r3
	lsls r0, r0, #0xd
	orrs r1, r0
	mov r0, ip
	strh r1, [r0, #8]
	ldrh r0, [r7, #0x20]
	adds r1, r2, #0
	ands r1, r0
	movs r0, #0x18
	ands r0, r3
	lsls r0, r0, #0xb
	orrs r1, r0
	mov r0, ip
	strh r1, [r0, #0xa]
	ldrh r0, [r7, #0x22]
	adds r1, r2, #0
	ands r1, r0
	movs r0, #0x60
	ands r0, r3
	lsls r0, r0, #9
	orrs r1, r0
	mov r0, ip
	strh r1, [r0, #0xc]
	ldrh r1, [r7, #0x24]
	ands r1, r2
	lsls r1, r1, #4
	ldr r0, [r0, #0x2c]
	ldr r2, _080A6114  @ 0xFFFC000F
	ands r0, r2
	orrs r0, r1
	mov r1, ip
	str r0, [r1, #0x2c]
	ldrh r1, [r7, #0x26]
	lsls r1, r1, #2
	mov r0, ip
	ldrh r2, [r0, #0x2e]
	movs r0, #3
	ands r0, r2
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x2e]
	movs r2, #0
	mov r9, r5
	mov r4, ip
	adds r4, #0x1a
	adds r6, r7, #0
	adds r6, #0x32
	movs r0, #0x42
	adds r0, r0, r7
	mov r8, r0
	adds r1, r7, #0
	adds r1, #0x43
	str r1, [sp, #0x10]
	movs r0, #0x21
	add r0, ip
	mov sl, r0
	adds r1, #1
	str r1, [sp, #0x14]
	mov r0, ip
	adds r0, #0x22
	str r0, [sp]
	adds r1, #1
	str r1, [sp, #0x18]
	adds r0, #1
	str r0, [sp, #4]
	subs r1, #5
	str r1, [sp, #0xc]
	adds r0, r7, #0
	adds r0, #0x46
	str r0, [sp, #0x1c]
	mov r1, ip
	adds r1, #0x31
	str r1, [sp, #8]
	ldrb r0, [r7, #0xa]
	add r1, sp, #0x20
	strb r0, [r1]
	mov r3, ip
	adds r3, #0x12
	subs r5, #8
_080A6072:
	adds r0, r3, r2
	adds r1, r5, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble _080A6072
	movs r2, #0
	adds r3, r6, #0
_080A6084:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #6
	ble _080A6084
	mov r2, r8
	ldrb r0, [r2]
	mov r1, ip
	strb r0, [r1, #2]
	movs r2, #0x7f
	ands r2, r0
	mov r0, r9
	ldrb r1, [r0]
	lsls r1, r1, #0x1c
	lsrs r1, r1, #0x1c
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080A60B2
	movs r0, #0x80
	orrs r2, r0
_080A60B2:
	mov r1, ip
	strb r2, [r1, #2]
	ldr r2, [sp, #0x10]
	ldrb r0, [r2]
	mov r1, sl
	strb r0, [r1]
	ldr r2, [sp, #0x14]
	ldrb r0, [r2]
	ldr r1, [sp]
	strb r0, [r1]
	ldr r2, [sp, #0x18]
	ldrb r0, [r2]
	ldr r1, [sp, #4]
	strb r0, [r1]
	ldr r2, [sp, #0xc]
	ldrh r0, [r2]
	mov r1, ip
	strh r0, [r1, #0x32]
	ldr r2, [sp, #0x1c]
	ldrb r0, [r2]
	ldr r1, [sp, #8]
	strb r0, [r1]
	add r2, sp, #0x20
	ldrb r0, [r2]
	mov r2, ip
	strb r0, [r2, #0x11]
_080A60E6:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A60F8: .4byte 0xFFFFF81F
_080A60FC: .4byte 0xFFFE07FF
_080A6100: .4byte 0xFFFFF83F
_080A6104: .4byte 0xFFFFFC1F
_080A6108: .4byte 0xFFF07FFF
_080A610C: .4byte 0xFFFFFC7F
_080A6110: .4byte 0x00003FFF
_080A6114: .4byte 0xFFFC000F

	THUMB_FUNC_START UnpackUnitStructFromSuspend
UnpackUnitStructFromSuspend: @ 0x080A6118
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x4c
	adds r6, r1, #0
	ldr r1, _080A6368  @ ReadSramFast
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0x34
	bl _call_via_r3
	mov r0, sp
	ldrb r0, [r0]
	bl GetCharacterData
	str r0, [r6]
	mov r0, sp
	ldrb r0, [r0, #1]
	bl GetClassData
	str r0, [r6, #4]
	add r0, sp, #0x24
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1b
	strb r0, [r6, #8]
	mov r0, sp
	ldrb r0, [r0, #0x10]
	strb r0, [r6, #9]
	ldr r0, [sp, #4]
	str r0, [r6, #0xc]
	mov r0, sp
	ldrh r0, [r0, #0x24]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1a
	strb r0, [r6, #0x10]
	ldr r0, [sp, #0x24]
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x1a
	strb r0, [r6, #0x11]
	mov r0, sp
	ldrb r0, [r0, #0xe]
	strb r0, [r6, #0x12]
	mov r0, sp
	ldrb r0, [r0, #0xf]
	strb r0, [r6, #0x13]
	mov r0, sp
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x14]
	mov r0, sp
	ldrh r0, [r0, #0x26]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x15]
	mov r0, sp
	adds r0, #0x27
	ldrb r0, [r0]
	lsrs r0, r0, #3
	strb r0, [r6, #0x16]
	add r0, sp, #0x28
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x17]
	mov r0, sp
	ldrh r0, [r0, #0x28]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x18]
	mov r0, sp
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x19]
	ldr r0, [sp, #0x28]
	lsls r0, r0, #0xc
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x1a]
	mov r0, sp
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	adds r4, r6, #0
	adds r4, #0x30
	movs r5, #0xf
	lsrs r0, r0, #0x1d
	ldrb r1, [r4]
	movs r7, #0x10
	negs r7, r7
	adds r3, r7, #0
	ands r3, r1
	orrs r3, r0
	strb r3, [r4]
	lsls r0, r3, #0x1c
	lsrs r2, r0, #0x1c
	mov r0, sp
	ldrb r1, [r0, #2]
	movs r0, #0x80
	mov r8, r0
	ands r0, r1
	cmp r0, #0
	beq _080A61F4
	movs r0, #8
	orrs r2, r0
_080A61F4:
	mov r0, sp
	ldrh r0, [r0, #0x2a]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1d
	lsls r0, r0, #4
	ands r2, r5
	orrs r2, r0
	strb r2, [r4]
	mov r0, sp
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r0, r1, #0x1b
	lsrs r0, r0, #0x1d
	adds r2, r6, #0
	adds r2, #0x31
	lsrs r1, r1, #5
	lsls r1, r1, #4
	ands r0, r5
	orrs r0, r1
	strb r0, [r2]
	mov r0, sp
	ldrb r0, [r0, #3]
	strb r0, [r6, #0x1b]
	add r0, sp, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	strb r0, [r6, #0x1d]
	add r0, sp, #0x30
	ldrb r2, [r0]
	movs r0, #0x7f
	ands r0, r2
	strb r0, [r6, #0x1c]
	mov r0, sp
	ldrh r5, [r0, #8]
	ldr r1, _080A636C  @ 0x00003FFF
	adds r0, r1, #0
	ands r0, r5
	strh r0, [r6, #0x1e]
	mov r0, sp
	ldrh r4, [r0, #0xa]
	adds r0, r1, #0
	ands r0, r4
	strh r0, [r6, #0x20]
	mov r0, sp
	ldrh r3, [r0, #0xc]
	ands r1, r3
	strh r1, [r6, #0x22]
	ldr r0, [sp, #0x2c]
	lsls r0, r0, #0xe
	lsrs r0, r0, #0x12
	strh r0, [r6, #0x24]
	mov r0, sp
	ldrh r0, [r0, #0x2e]
	lsrs r0, r0, #2
	strh r0, [r6, #0x26]
	mov r1, r8
	ands r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x1f
	movs r2, #0xc0
	lsls r2, r2, #8
	adds r0, r2, #0
	ands r0, r5
	lsrs r0, r0, #0xd
	orrs r0, r1
	adds r1, r2, #0
	ands r1, r4
	lsrs r1, r1, #0xb
	orrs r1, r0
	ands r2, r3
	lsrs r2, r2, #9
	orrs r2, r1
	adds r0, r6, #0
	adds r0, #0x39
	strb r2, [r0]
	movs r2, #0
	adds r7, r6, #0
	adds r7, #0x32
	mov r5, sp
	adds r5, #0x1a
	movs r1, #0x42
	adds r1, r1, r6
	mov sl, r1
	movs r0, #0x21
	add r0, sp
	mov ip, r0
	adds r1, r6, #0
	adds r1, #0x43
	str r1, [sp, #0x3c]
	movs r0, #0x22
	add r0, sp
	mov r8, r0
	adds r1, #1
	str r1, [sp, #0x40]
	movs r0, #0x23
	add r0, sp
	mov r9, r0
	adds r1, #1
	str r1, [sp, #0x44]
	adds r0, r6, #0
	adds r0, #0x40
	str r0, [sp, #0x38]
	mov r1, sp
	adds r1, #0x31
	str r1, [sp, #0x34]
	adds r0, #6
	str r0, [sp, #0x48]
	adds r4, r6, #0
	adds r4, #0x28
	mov r3, sp
	adds r3, #0x12
_080A62D4:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble _080A62D4
	movs r2, #0
	adds r4, r7, #0
	adds r3, r5, #0
_080A62E8:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #6
	ble _080A62E8
	mov r0, sp
	ldrb r1, [r0, #2]
	movs r0, #0x7f
	ands r0, r1
	mov r1, sl
	strb r0, [r1]
	mov r1, ip
	ldrb r0, [r1]
	ldr r1, [sp, #0x3c]
	strb r0, [r1]
	mov r1, r8
	ldrb r0, [r1]
	ldr r1, [sp, #0x40]
	strb r0, [r1]
	mov r1, r9
	ldrb r0, [r1]
	ldr r1, [sp, #0x44]
	strb r0, [r1]
	mov r0, sp
	ldrh r0, [r0, #0x32]
	ldr r1, [sp, #0x38]
	strh r0, [r1]
	ldr r1, [sp, #0x34]
	ldrb r0, [r1]
	ldr r1, [sp, #0x48]
	strb r0, [r1]
	mov r0, sp
	ldrb r0, [r0, #0x11]
	strb r0, [r6, #0xa]
	ldrb r0, [r6, #9]
	cmp r0, #0x7f
	bne _080A633A
	movs r0, #0xff
	strb r0, [r6, #9]
_080A633A:
	ldrb r1, [r6, #0x10]
	movs r0, #0x10
	ldrsb r0, [r6, r0]
	cmp r0, #0x3f
	bne _080A6348
	movs r0, #0xff
	strb r0, [r6, #0x10]
_080A6348:
	ldrb r1, [r6, #0x11]
	movs r0, #0x11
	ldrsb r0, [r6, r0]
	cmp r0, #0x3f
	bne _080A6356
	movs r0, #0xff
	strb r0, [r6, #0x11]
_080A6356:
	add sp, #0x4c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A6368: .4byte ReadSramFast
_080A636C: .4byte 0x00003FFF

	THUMB_FUNC_START SaveTrapStructs
SaveTrapStructs: @ 0x080A6370
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl GetTrap
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A638C
sub_80A638C: @ 0x080A638C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080A63AC  @ ReadSramFast
	movs r0, #0
	bl GetTrap
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #2
	ldr r3, [r4]
	adds r0, r5, #0
	bl _call_via_r3
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A63AC: .4byte ReadSramFast

	THUMB_FUNC_START sub_80A63B0
sub_80A63B0: @ 0x080A63B0
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	mov r0, sp
	adds r0, #0x63
	ldrb r0, [r0]
	cmp r0, #1
	beq _080A63C8
	movs r0, #0
	b _080A63CA
_080A63C8:
	movs r0, #1
_080A63CA:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A63D0
sub_80A63D0: @ 0x080A63D0
	push {lr}
	bl sub_80A63B0
	adds r1, r0, #0
	movs r0, #1
	subs r0, r0, r1
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A63E0
sub_80A63E0: @ 0x080A63E0
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	movs r2, #0
	mov r1, sp
	adds r1, #0x63
	ldrb r0, [r1]
	cmp r0, #0
	bne _080A63F8
	movs r2, #1
_080A63F8:
	strb r2, [r1]
	mov r0, sp
	bl sub_80A2DD0
	add sp, #0x64
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A6408
sub_80A6408: @ 0x080A6408
	push {r4, r5, lr}
	adds r5, r1, #0
	ldr r1, _080A6428  @ ReadSramFast
	ldr r4, _080A642C  @ gUnknown_02020188
	ldr r3, [r1]
	adds r1, r4, #0
	adds r2, r5, #0
	bl _call_via_r3
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80D74C0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A6428: .4byte ReadSramFast
_080A642C: .4byte gUnknown_02020188

	THUMB_FUNC_START sub_80A6430
sub_80A6430: @ 0x080A6430
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r5, [r4, #0xa]
	ldrh r0, [r4, #8]
	bl GetSaveDataOffsetPointer
	adds r1, r5, #0
	bl sub_80A6408
	ldr r1, [r4, #0xc]
	cmp r1, r0
	bne _080A644C
	movs r0, #1
	b _080A644E
_080A644C:
	movs r0, #0
_080A644E:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A6454
sub_80A6454: @ 0x080A6454
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r5, [r4, #0xa]
	ldrh r0, [r4, #8]
	bl GetSaveDataOffsetPointer
	adds r1, r5, #0
	bl sub_80A6408
	str r0, [r4, #0xc]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A6470
sub_80A6470: @ 0x080A6470
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, _080A6538  @ gUnitArrayBlue
	movs r5, #0x32
_080A6478:
	ldr r0, [r4]
	cmp r0, #0
	beq _080A6490
	movs r0, #0
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	movs r1, #0x24
	bl sub_80A6408
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
_080A6490:
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge _080A6478
	ldr r4, _080A653C  @ gUnitArrayRed
	movs r5, #0x31
_080A649C:
	ldr r0, [r4]
	cmp r0, #0
	beq _080A64B4
	movs r0, #0
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	movs r1, #0x24
	bl sub_80A6408
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
_080A64B4:
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge _080A649C
	ldr r4, _080A6540  @ gUnitArrayGreen
	movs r5, #9
_080A64C0:
	ldr r0, [r4]
	cmp r0, #0
	beq _080A64D8
	movs r0, #0
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	movs r1, #0x24
	bl sub_80A6408
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
_080A64D8:
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge _080A64C0
	bl GetGlobalEventIdStorage
	adds r4, r0, #0
	bl GetGlobalEventIdStorageSize
	adds r1, r0, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	bl sub_80A6408
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	bl GetLocalEventIdStorage
	adds r4, r0, #0
	bl GetLocalEventIdStorageSize
	adds r1, r0, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	bl sub_80A6408
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0
	bl GetTrap
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_80A6408
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080A6538: .4byte gUnitArrayBlue
_080A653C: .4byte gUnitArrayRed
_080A6540: .4byte gUnitArrayGreen

	THUMB_FUNC_START sub_80A6544
sub_80A6544: @ 0x080A6544
	sub sp, #8
	add sp, #8
	bx lr

	THUMB_FUNC_START sub_80A654C
sub_80A654C: @ 0x080A654C
	push {lr}
	adds r1, r0, #0
	movs r0, #0
	bl sub_80A2EF8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A6560
sub_80A6560: @ 0x080A6560
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x80
	movs r0, #5
	bl GetSaveDataLocation
	mov r9, r0
	add r0, sp, #0x6c
	movs r4, #0
	strh r4, [r0]
	add r5, sp, #0x24
	ldr r2, _080A66A8  @ 0x01000012
	adds r1, r5, #0
	bl CpuSet
	mov r0, sp
	adds r0, #0x6e
	strh r4, [r0]
	add r4, sp, #0x48
	ldr r2, _080A66AC  @ 0x01000007
	adds r1, r4, #0
	bl CpuSet
	movs r7, #0
	mov r8, r5
	add r0, sp, #0x70
	mov sl, r0
	mov r1, sp
	adds r1, #0x58
	str r1, [sp, #0x78]
	mov r3, sp
	adds r3, #0x5c
	str r3, [sp, #0x7c]
	mov r5, sp
	adds r5, #0x14
	str r5, [sp, #0x74]
	mov r6, r9
_080A65B0:
	movs r0, #0xc4
	muls r0, r7, r0
	adds r0, #0x10
	mov r1, r9
	adds r4, r1, r0
	movs r5, #4
_080A65BC:
	mov r0, r8
	adds r1, r4, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	adds r4, #0x24
	subs r5, #1
	cmp r5, #0
	bge _080A65BC
	add r0, sp, #0x48
	adds r1, r6, #0
	movs r2, #0xf
	bl WriteAndVerifySramFast
	adds r6, #0xc4
	adds r7, #1
	cmp r7, #9
	ble _080A65B0
	movs r0, #7
	mov r3, sl
	strh r0, [r3]
	movs r1, #0xf5
	lsls r1, r1, #3
	add r1, r9
	mov r0, sl
	movs r2, #2
	bl WriteAndVerifySramFast
	movs r7, #0
	ldr r5, [sp, #0x78]
	mov r8, r5
	movs r0, #3
	mov sl, r0
	ldr r6, _080A66B0  @ 0x000007AC
	add r6, r9
	movs r1, #0
	mov r9, r1
_080A6606:
	ldr r4, _080A66B4  @ gUnknown_08205CB4
	lsls r3, r7, #2
	mov ip, r3
	add r4, r9
	ldrb r3, [r4]
	lsls r1, r3, #0x1e
	lsrs r1, r1, #0x1e
	mov r5, sl
	ands r1, r5
	mov r0, r8
	ldrb r2, [r0]
	movs r5, #4
	negs r5, r5
	adds r0, r5, #0
	ands r2, r0
	orrs r2, r1
	lsls r0, r3, #0x1c
	lsrs r0, r0, #0x1e
	mov r1, sl
	ands r0, r1
	lsls r0, r0, #2
	subs r5, #9
	adds r1, r5, #0
	ands r2, r1
	orrs r2, r0
	movs r1, #0x10
	ands r1, r3
	movs r3, #0x11
	negs r3, r3
	adds r0, r3, #0
	ands r2, r0
	orrs r2, r1
	mov r5, r8
	strb r2, [r5]
	ldr r2, [r4]
	lsrs r2, r2, #5
	lsls r2, r2, #5
	ldr r0, [sp, #0x58]
	movs r1, #0x1f
	ands r0, r1
	orrs r0, r2
	str r0, [sp, #0x58]
	ldr r0, _080A66B8  @ gUnknown_08A1FB08
	mov r1, ip
	adds r5, r1, r0
	ldr r0, [r5]
	mov r1, sp
	bl GetStringFromIndexInBuffer
	mov r0, sp
	ldr r1, [sp, #0x7c]
	bl sub_8042DC8
	mov r0, r8
	adds r1, r6, #0
	movs r2, #0x14
	bl WriteAndVerifySramFast
	adds r6, #0x14
	movs r3, #0x14
	add r9, r3
	adds r7, #1
	cmp r7, #9
	ble _080A6606
	ldr r0, _080A66BC  @ 0x00020112
	str r0, [sp, #0x14]
	movs r0, #2
	ldr r5, [sp, #0x74]
	strb r0, [r5, #6]
	ldr r0, [sp, #0x74]
	movs r1, #5
	bl sub_80A2F94
	add sp, #0x80
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A66A8: .4byte 0x01000012
_080A66AC: .4byte 0x01000007
_080A66B0: .4byte 0x000007AC
_080A66B4: .4byte gUnknown_08205CB4
_080A66B8: .4byte gUnknown_08A1FB08
_080A66BC: .4byte 0x00020112

	THUMB_FUNC_START sub_80A66C0
sub_80A66C0: @ 0x080A66C0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r0, #5
	bl sub_80A3114
	ldr r2, _080A66E8  @ ReadSramFast
	movs r1, #0xc4
	muls r1, r4, r1
	adds r0, r0, r1
	ldr r3, [r2]
	adds r1, r5, #0
	movs r2, #0xc4
	bl _call_via_r3
	ldrb r0, [r5]
	cmp r0, #0
	beq _080A66EC
	movs r0, #1
	b _080A66EE
	.align 2, 0
_080A66E8: .4byte ReadSramFast
_080A66EC:
	movs r0, #0
_080A66EE:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A66F4
sub_80A66F4: @ 0x080A66F4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r0, #5
	bl sub_80A3114
	ldr r2, _080A6728  @ ReadSramFast
	movs r1, #0xc4
	muls r1, r4, r1
	adds r0, r0, r1
	ldr r4, _080A672C  @ gUnknown_0203EDBC
	ldr r3, [r2]
	adds r1, r4, #0
	movs r2, #0xc4
	bl _call_via_r3
	ldrb r0, [r4]
	cmp r0, #0
	beq _080A6730
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8042DC8
	movs r0, #1
	b _080A6732
	.align 2, 0
_080A6728: .4byte ReadSramFast
_080A672C: .4byte gUnknown_0203EDBC
_080A6730:
	movs r0, #0
_080A6732:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A6738
sub_80A6738: @ 0x080A6738
	push {r4, r5, lr}
	sub sp, #0x10
	adds r4, r0, #0
	adds r5, r1, #0
	movs r0, #5
	bl GetSaveDataLocation
	adds r1, r0, #0
	movs r0, #0xc4
	muls r0, r4, r0
	adds r1, r1, r0
	adds r0, r5, #0
	movs r2, #0xf
	bl WriteAndVerifySramFast
	ldr r0, _080A6770  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80A2F94
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A6770: .4byte 0x00020112

	THUMB_FUNC_START sub_80A6774
sub_80A6774: @ 0x080A6774
	push {r4, r5, r6, lr}
	sub sp, #0x14
	adds r6, r0, #0
	movs r0, #5
	bl GetSaveDataLocation
	adds r4, r0, #0
	add r0, sp, #0x10
	movs r1, #0
	strh r1, [r0]
	ldr r5, _080A67BC  @ gUnknown_0203EDBC
	ldr r2, _080A67C0  @ 0x01000062
	adds r1, r5, #0
	bl CpuSet
	movs r0, #0xc4
	muls r0, r6, r0
	adds r4, r4, r0
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0xc4
	bl WriteAndVerifySramFast
	ldr r0, _080A67C4  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80A2F94
	add sp, #0x14
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A67BC: .4byte gUnknown_0203EDBC
_080A67C0: .4byte 0x01000062
_080A67C4: .4byte 0x00020112

	THUMB_FUNC_START sub_80A67C8
sub_80A67C8: @ 0x080A67C8
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #0x10
	adds r6, r0, #0
	mov r9, r1
	movs r0, #5
	bl sub_80A3114
	adds r4, r0, #0
	movs r0, #5
	bl GetSaveDataLocation
	adds r5, r0, #0
	ldr r1, _080A6834  @ ReadSramFast
	movs r0, #0xc4
	mov r8, r0
	mov r0, r8
	muls r0, r6, r0
	adds r4, r4, r0
	ldr r6, _080A6838  @ gUnknown_0203EDBC
	ldr r3, [r1]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #0xc4
	bl _call_via_r3
	mov r1, r8
	mov r0, r9
	muls r0, r1, r0
	adds r5, r5, r0
	adds r0, r6, #0
	adds r1, r5, #0
	movs r2, #0xc4
	bl WriteAndVerifySramFast
	ldr r0, _080A683C  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80A2F94
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A6834: .4byte ReadSramFast
_080A6838: .4byte gUnknown_0203EDBC
_080A683C: .4byte 0x00020112

	THUMB_FUNC_START sub_80A6840
sub_80A6840: @ 0x080A6840
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r0
	mov sl, r1
	movs r0, #5
	bl sub_80A3114
	adds r5, r0, #0
	movs r0, #5
	bl GetSaveDataLocation
	adds r6, r0, #0
	ldr r0, _080A68CC  @ ReadSramFast
	mov r9, r0
	movs r4, #0xc4
	mov r7, r8
	muls r7, r4, r7
	adds r0, r5, r7
	mov r1, r9
	ldr r3, [r1]
	ldr r1, _080A68D0  @ gUnknown_0203EDBC
	movs r2, #0xc4
	bl _call_via_r3
	mov r0, sl
	muls r0, r4, r0
	adds r4, r0, #0
	adds r5, r5, r4
	ldr r1, _080A68D4  @ gUnknown_0203EE80
	mov r8, r1
	mov r0, r9
	ldr r3, [r0]
	adds r0, r5, #0
	movs r2, #0xc4
	bl _call_via_r3
	adds r4, r6, r4
	ldr r0, _080A68D0  @ gUnknown_0203EDBC
	adds r1, r4, #0
	movs r2, #0xc4
	bl WriteAndVerifySramFast
	adds r6, r6, r7
	mov r0, r8
	adds r1, r6, #0
	movs r2, #0xc4
	bl WriteAndVerifySramFast
	ldr r0, _080A68D8  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80A2F94
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A68CC: .4byte ReadSramFast
_080A68D0: .4byte gUnknown_0203EDBC
_080A68D4: .4byte gUnknown_0203EE80
_080A68D8: .4byte 0x00020112

	THUMB_FUNC_START sub_80A68DC
sub_80A68DC: @ 0x080A68DC
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #0x10
	adds r4, r0, #0
	mov r8, r1
	adds r6, r2, #0
	movs r0, #5
	bl GetSaveDataLocation
	adds r5, r0, #0
	movs r0, #0xc4
	muls r4, r0, r4
	adds r1, r5, r4
	adds r0, r6, #0
	movs r2, #0xf
	bl WriteAndVerifySramFast
	adds r4, #0x10
	adds r5, r5, r4
	mov r4, r8
	movs r6, #4
_080A6908:
	adds r0, r4, #0
	adds r1, r5, #0
	bl SaveUnit
	adds r5, #0x24
	adds r4, #0x48
	subs r6, #1
	cmp r6, #0
	bge _080A6908
	ldr r0, _080A6938  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80A2F94
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A6938: .4byte 0x00020112

	THUMB_FUNC_START sub_80A693C
sub_80A693C: @ 0x080A693C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r6, r1, #0
	adds r5, r2, #0
	movs r0, #5
	bl sub_80A3114
	adds r7, r0, #0
	ldr r1, _080A6990  @ ReadSramFast
	movs r0, #0xc4
	mov r4, r8
	muls r4, r0, r4
	adds r0, r7, r4
	ldr r3, [r1]
	adds r1, r5, #0
	movs r2, #0xf
	bl _call_via_r3
	adds r4, #0x10
	adds r4, r7, r4
	movs r5, #4
_080A696A:
	adds r0, r4, #0
	adds r1, r6, #0
	bl LoadSavedUnit
	adds r6, #0x48
	adds r4, #0x24
	subs r5, #1
	cmp r5, #0
	bge _080A696A
	movs r0, #0xc4
	mov r1, r8
	muls r1, r0, r1
	adds r0, r1, #0
	adds r0, r7, r0
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A6994
	movs r0, #1
	b _080A6996
	.align 2, 0
_080A6990: .4byte ReadSramFast
_080A6994:
	movs r0, #0
_080A6996:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A69A0
sub_80A69A0: @ 0x080A69A0
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	movs r0, #5
	bl GetSaveDataLocation
	adds r1, r0, #0
	ldr r0, _080A69D4  @ 0x000007AC
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0xc8
	bl WriteAndVerifySramFast
	ldr r0, _080A69D8  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80A2F94
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A69D4: .4byte 0x000007AC
_080A69D8: .4byte 0x00020112

	THUMB_FUNC_START sub_80A69DC
sub_80A69DC: @ 0x080A69DC
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #5
	bl sub_80A3114
	ldr r1, _080A69FC  @ ReadSramFast
	ldr r2, _080A6A00  @ 0x000007AC
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0xc8
	bl _call_via_r3
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A69FC: .4byte ReadSramFast
_080A6A00: .4byte 0x000007AC

	THUMB_FUNC_START sub_80A6A04
sub_80A6A04: @ 0x080A6A04
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	movs r0, #5
	bl GetSaveDataLocation
	adds r1, r0, #0
	movs r0, #0xf5
	lsls r0, r0, #3
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #2
	bl WriteAndVerifySramFast
	ldr r0, _080A6A3C  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80A2F94
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A6A3C: .4byte 0x00020112

	THUMB_FUNC_START sub_80A6A40
sub_80A6A40: @ 0x080A6A40
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #5
	bl sub_80A3114
	ldr r1, _080A6A64  @ ReadSramFast
	movs r2, #0xf5
	lsls r2, r2, #3
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #2
	bl _call_via_r3
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A6A64: .4byte ReadSramFast

	THUMB_FUNC_START sub_80A6A68
sub_80A6A68: @ 0x080A6A68
	push {r4, lr}
	sub sp, #0x10
	movs r0, #5
	bl sub_80A654C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A6A7E
	b _080A6A96
_080A6A7A:
	movs r0, #1
	b _080A6A98
_080A6A7E:
	movs r4, #0
_080A6A80:
	adds r0, r4, #0
	mov r1, sp
	bl sub_80A66F4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _080A6A7A
	adds r4, #1
	cmp r4, #9
	ble _080A6A80
_080A6A96:
	movs r0, #0
_080A6A98:
	add sp, #0x10
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A6AA0
sub_80A6AA0: @ 0x080A6AA0
	push {r4, lr}
	sub sp, #0x4c
	movs r0, #3
	bl sub_80A5DA8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A6AE8
	movs r0, #3
	mov r1, sp
	bl sub_80A5DFC
	mov r0, sp
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x7f
	bne _080A6AE8
	ldr r1, _080A6AF0  @ ReadSramFast
	ldr r0, _080A6AF4  @ gUnknown_08A1FB30
	ldr r0, [r0]
	ldr r4, _080A6AF8  @ gUnknown_0203EF44
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x1c
	bl _call_via_r3
	ldr r0, [sp, #0x2c]
	lsls r0, r0, #9
	lsrs r0, r0, #0x16
	ldrb r4, [r4, #0xf]
	cmp r0, r4
	beq _080A6AE8
	movs r0, #3
	bl sub_80A5A20
_080A6AE8:
	add sp, #0x4c
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A6AF0: .4byte ReadSramFast
_080A6AF4: .4byte gUnknown_08A1FB30
_080A6AF8: .4byte gUnknown_0203EF44

	THUMB_FUNC_START sub_80A6AFC
sub_80A6AFC: @ 0x080A6AFC
	push {r4, r5, lr}
	ldr r1, _080A6B4C  @ ReadSramFast
	ldr r5, _080A6B50  @ gUnknown_08A1FB30
	ldr r0, [r5]
	ldr r4, _080A6B54  @ gUnknown_0203EF44
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x1c
	bl _call_via_r3
	ldr r1, [r4]
	ldr r0, _080A6B58  @ 0x50414D58
	cmp r1, r0
	bne _080A6B68
	bl GetSomeByte
	lsls r0, r0, #0x18
	ldr r1, _080A6B5C  @ 0x00020223
	adds r0, r0, r1
	ldr r1, [r4, #8]
	cmp r1, r0
	bne _080A6B68
	ldr r0, [r4, #0x10]
	ldr r1, [r5]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	ldr r0, [r4, #0x18]
	adds r0, r0, r1
	str r0, [r4, #0x18]
	ldr r3, _080A6B60  @ gUnknown_0202BCF0
	ldrb r2, [r4, #0xf]
	lsls r2, r2, #0xd
	ldr r0, [r3, #0x2c]
	ldr r1, _080A6B64  @ 0xFF801FFF
	ands r0, r1
	orrs r0, r2
	str r0, [r3, #0x2c]
	movs r0, #1
	b _080A6B6A
	.align 2, 0
_080A6B4C: .4byte ReadSramFast
_080A6B50: .4byte gUnknown_08A1FB30
_080A6B54: .4byte gUnknown_0203EF44
_080A6B58: .4byte 0x50414D58
_080A6B5C: .4byte 0x00020223
_080A6B60: .4byte gUnknown_0202BCF0
_080A6B64: .4byte 0xFF801FFF
_080A6B68:
	movs r0, #0
_080A6B6A:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A6B70
sub_80A6B70: @ 0x080A6B70
	push {lr}
	ldr r2, _080A6B80  @ gUnknown_0203EF44
	ldr r1, [r2]
	ldr r0, _080A6B84  @ 0x50414D58
	cmp r1, r0
	bne _080A6B88
	ldr r0, [r2, #0x10]
	b _080A6B8A
	.align 2, 0
_080A6B80: .4byte gUnknown_0203EF44
_080A6B84: .4byte 0x50414D58
_080A6B88:
	movs r0, #0
_080A6B8A:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A6B90
sub_80A6B90: @ 0x080A6B90
	push {lr}
	ldr r2, _080A6BA4  @ gUnknown_0203EF44
	ldr r1, [r2]
	ldr r0, _080A6BA8  @ 0x50414D58
	cmp r1, r0
	bne _080A6BAC
	movs r1, #0x14
	ldrsh r0, [r2, r1]
	b _080A6BAE
	.align 2, 0
_080A6BA4: .4byte gUnknown_0203EF44
_080A6BA8: .4byte 0x50414D58
_080A6BAC:
	movs r0, #0
_080A6BAE:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A6BB4
sub_80A6BB4: @ 0x080A6BB4
	push {lr}
	ldr r2, _080A6BC4  @ gUnknown_0203EF44
	ldr r1, [r2]
	ldr r0, _080A6BC8  @ 0x50414D58
	cmp r1, r0
	bne _080A6BCC
	ldr r0, [r2, #0x18]
	b _080A6BCE
	.align 2, 0
_080A6BC4: .4byte gUnknown_0203EF44
_080A6BC8: .4byte 0x50414D58
_080A6BCC:
	movs r0, #0
_080A6BCE:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A6BD4
sub_80A6BD4: @ 0x080A6BD4
	push {lr}
	ldr r2, _080A6BE8  @ gUnknown_0203EF44
	ldr r1, [r2]
	ldr r0, _080A6BEC  @ 0x50414D58
	cmp r1, r0
	bne _080A6BF0
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	b _080A6BF2
	.align 2, 0
_080A6BE8: .4byte gUnknown_0203EF44
_080A6BEC: .4byte 0x50414D58
_080A6BF0:
	movs r0, #0
_080A6BF2:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A6BF8
sub_80A6BF8: @ 0x080A6BF8
	push {lr}
	adds r2, r0, #0
	movs r3, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	cmp r3, r1
	bge _080A6C14
_080A6C08:
	ldrh r0, [r2]
	adds r3, r3, r0
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bne _080A6C08
_080A6C14:
	lsls r0, r3, #0x10
	lsrs r0, r0, #0x10
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A6C1C
sub_80A6C1C: @ 0x080A6C1C
	push {r4, lr}
	ldr r4, _080A6C70  @ gUnknown_02020188
	bl sub_80A2CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A6C84
	ldr r1, _080A6C74  @ ReadSramFast
	ldr r0, _080A6C78  @ 0x0E007400
	movs r2, #0xc0
	lsls r2, r2, #4
	ldr r3, [r1]
	adds r1, r4, #0
	bl _call_via_r3
	ldr r1, [r4]
	ldr r0, _080A6C7C  @ 0x50414D58
	cmp r1, r0
	bne _080A6C84
	bl GetSomeByte
	lsls r0, r0, #0x18
	ldr r1, _080A6C80  @ 0x00020223
	adds r0, r0, r1
	ldr r1, [r4, #8]
	cmp r1, r0
	bne _080A6C84
	ldrh r0, [r4, #4]
	cmp r0, #0
	beq _080A6C84
	adds r0, r4, #0
	adds r0, #8
	ldrh r1, [r4, #4]
	bl sub_80A6BF8
	ldrh r1, [r4, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bne _080A6C84
	movs r0, #1
	b _080A6C86
	.align 2, 0
_080A6C70: .4byte gUnknown_02020188
_080A6C74: .4byte ReadSramFast
_080A6C78: .4byte 0x0E007400
_080A6C7C: .4byte 0x50414D58
_080A6C80: .4byte 0x00020223
_080A6C84:
	movs r0, #0
_080A6C86:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A6C8C
sub_80A6C8C: @ 0x080A6C8C
	push {r4, r5, r6, lr}
	bl sub_80A6AFC
	ldr r5, _080A6CF4  @ ReadSramFast
	bl sub_80A6BB4
	adds r4, r0, #0
	ldr r6, _080A6CF8  @ gUnknown_02020188
	bl sub_80A6BD4
	adds r2, r0, #0
	ldr r3, [r5]
	adds r0, r4, #0
	adds r1, r6, #0
	bl _call_via_r3
	ldr r4, _080A6CFC  @ gUnknown_08A1FB34
	ldr r1, [r4]
	adds r0, r6, #0
	bl CopyDataWithPossibleUncomp
	ldr r1, [r4]
	ldr r0, _080A6D00  @ gUnknown_0202BCF0
	str r0, [r1, #0x18]
	ldr r0, _080A6D04  @ gUnknown_0202BCB0
	str r0, [r1, #0x1c]
	ldr r0, _080A6D08  @ gActiveUnit
	str r0, [r1, #0x20]
	ldr r0, _080A6D0C  @ gUnitLookup
	str r0, [r1, #0x24]
	ldr r0, _080A6D10  @ gBattleActor
	str r0, [r1, #0x28]
	ldr r0, _080A6D14  @ gBattleTarget
	str r0, [r1, #0x2c]
	ldr r0, _080A6D18  @ gBattleHitArray
	str r0, [r1, #0x30]
	movs r0, #0
	bl GetTrap
	ldr r1, [r4]
	str r0, [r1, #0x34]
	bl GetGlobalEventIdStorage
	ldr r1, [r4]
	str r0, [r1, #0x38]
	bl GetLocalEventIdStorage
	ldr r1, [r4]
	str r0, [r1, #0x3c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A6CF4: .4byte ReadSramFast
_080A6CF8: .4byte gUnknown_02020188
_080A6CFC: .4byte gUnknown_08A1FB34
_080A6D00: .4byte gUnknown_0202BCF0
_080A6D04: .4byte gUnknown_0202BCB0
_080A6D08: .4byte gActiveUnit
_080A6D0C: .4byte gUnitLookup
_080A6D10: .4byte gBattleActor
_080A6D14: .4byte gBattleTarget
_080A6D18: .4byte gBattleHitArray

	THUMB_FUNC_START sub_80A6D1C
sub_80A6D1C: @ 0x080A6D1C
	movs r1, #0
	strb r1, [r0]
	movs r0, #1
	bx lr

	THUMB_FUNC_START sub_80A6D24
sub_80A6D24: @ 0x080A6D24
	push {lr}
	bl sub_80346E0
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A6D30
sub_80A6D30: @ 0x080A6D30
	movs r0, #0
	bx lr

	THUMB_FUNC_START sub_80A6D34
sub_80A6D34: @ 0x080A6D34
	movs r0, #0
	bx lr

	THUMB_FUNC_START sub_80A6D38
sub_80A6D38: @ 0x080A6D38
	push {lr}
	bl sub_80A4BB0
	ldr r1, _080A6D48  @ gBmMapHidden
	movs r0, #0
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_080A6D48: .4byte gBmMapHidden

	THUMB_FUNC_START sub_80A6D4C
sub_80A6D4C: @ 0x080A6D4C
	push {r4, r5, lr}
	bl GetGameClock
	ldr r5, _080A6D94  @ gUnknown_0202BCF0
	ldr r1, [r5, #4]
	subs r0, r0, r1
	movs r1, #0xb4
	bl __udivsi3
	adds r4, r0, #0
	ldr r0, _080A6D98  @ 0x0000EA60
	cmp r4, r0
	ble _080A6D68
	adds r4, r0, #0
_080A6D68:
	ldr r0, _080A6D9C  @ gUnknown_0203EF60
	movs r1, #0x7f
	ldrb r2, [r5, #0xe]
	ands r2, r1
	ldrb r3, [r0]
	movs r1, #0x80
	negs r1, r1
	ands r1, r3
	orrs r1, r2
	strb r1, [r0]
	ldrh r2, [r5, #0x10]
	lsls r2, r2, #7
	ldrh r3, [r0]
	movs r1, #0x7f
	ands r1, r3
	orrs r1, r2
	strh r1, [r0]
	strh r4, [r0, #2]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A6D94: .4byte gUnknown_0202BCF0
_080A6D98: .4byte 0x0000EA60
_080A6D9C: .4byte gUnknown_0203EF60

	THUMB_FUNC_START sub_80A6DA0
sub_80A6DA0: @ 0x080A6DA0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	mov r9, r0
	adds r7, r1, #0
	movs r1, #0
	adds r0, r7, #7
_080A6DB0:
	strb r1, [r0]
	subs r0, #1
	cmp r0, r7
	bge _080A6DB0
	movs r5, #0
	movs r0, #0
	movs r1, #1
	mov r8, r1
_080A6DC0:
	movs r4, #0
	adds r1, r0, #1
	mov ip, r1
	lsls r0, r0, #2
	add r0, r9
	adds r6, r0, #0
	adds r6, #0x30
_080A6DCE:
	cmp r4, #0
	beq _080A6DD8
	cmp r4, #1
	beq _080A6DE0
	b _080A6DEA
_080A6DD8:
	ldrb r0, [r6]
	mov r3, r8
	ands r3, r0
	b _080A6DEA
_080A6DE0:
	ldrb r1, [r6]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_080A6DEA:
	lsls r0, r3, #0x18
	cmp r0, #0
	beq _080A6E0A
	adds r2, r5, #0
	cmp r5, #0
	bge _080A6DF8
	adds r2, r5, #7
_080A6DF8:
	asrs r2, r2, #3
	movs r1, #7
	ands r1, r5
	adds r2, r7, r2
	mov r0, r8
	lsls r0, r1
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
_080A6E0A:
	adds r5, #1
	adds r4, #1
	cmp r4, #1
	ble _080A6DCE
	mov r0, ip
	cmp r0, #0x1c
	ble _080A6DC0
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A6E24
sub_80A6E24: @ 0x080A6E24
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	mov r8, r0
	adds r6, r1, #0
	movs r4, #0
	movs r0, #0
	movs r1, #1
	mov ip, r1
_080A6E38:
	movs r5, #0
	adds r7, r0, #1
	lsls r0, r0, #2
	add r0, r8
	adds r3, r0, #0
	adds r3, #0x30
_080A6E44:
	adds r0, r4, #0
	cmp r4, #0
	bge _080A6E4C
	adds r0, r4, #7
_080A6E4C:
	asrs r2, r0, #3
	movs r1, #7
	ands r1, r4
	mov r0, ip
	lsls r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r5, #0
	beq _080A6E64
	cmp r5, #1
	beq _080A6E7C
	b _080A6E96
_080A6E64:
	adds r0, r6, r2
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	beq _080A6E76
	ldrb r1, [r3]
	mov r0, ip
	orrs r0, r1
	b _080A6E94
_080A6E76:
	ldrb r1, [r3]
	movs r0, #0xfe
	b _080A6E92
_080A6E7C:
	adds r0, r6, r2
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	beq _080A6E8E
	ldrb r0, [r3]
	movs r1, #2
	orrs r0, r1
	b _080A6E94
_080A6E8E:
	ldrb r1, [r3]
	movs r0, #0xfd
_080A6E92:
	ands r0, r1
_080A6E94:
	strb r0, [r3]
_080A6E96:
	adds r4, #1
	adds r5, #1
	cmp r5, #1
	ble _080A6E44
	adds r0, r7, #0
	cmp r0, #0x1c
	ble _080A6E38
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A6EB0
sub_80A6EB0: @ 0x080A6EB0
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	movs r1, #0
	adds r0, r4, #3
_080A6EBA:
	strb r1, [r0]
	subs r0, #1
	cmp r0, r4
	bge _080A6EBA
	movs r3, #0
	adds r0, r2, #0
	adds r0, #0xc4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r3, r0
	bge _080A6F04
	adds r6, r2, #0
	adds r6, #0xa4
	movs r1, #7
	mov ip, r1
	adds r5, r0, #0
	movs r7, #1
_080A6EDE:
	adds r0, r6, r3
	movs r2, #0
	ldrsb r2, [r0, r2]
	adds r0, r2, #0
	cmp r2, #0
	bge _080A6EEC
	adds r0, r2, #7
_080A6EEC:
	asrs r0, r0, #3
	adds r0, r4, r0
	mov r1, ip
	ands r2, r1
	adds r1, r7, #0
	lsls r1, r2
	ldrb r2, [r0]
	orrs r1, r2
	strb r1, [r0]
	adds r3, #1
	cmp r3, r5
	blt _080A6EDE
_080A6F04:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A6F0C
sub_80A6F0C: @ 0x080A6F0C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r1, r5, #0
	adds r1, #0xc4
	movs r0, #0
	strb r0, [r1]
	movs r4, #0
_080A6F1C:
	adds r0, r4, #0
	cmp r4, #0
	bge _080A6F24
	adds r0, r4, #7
_080A6F24:
	asrs r0, r0, #3
	adds r0, r6, r0
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r4
	asrs r1, r0
	movs r0, #1
	ands r1, r0
	cmp r1, #0
	beq _080A6F44
	adds r0, r5, #0
	adds r1, r5, #0
	adds r1, #0xa4
	adds r2, r4, #0
	bl SetupNewWMRoute
_080A6F44:
	adds r4, #1
	cmp r4, #0x1f
	ble _080A6F1C
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A6F50
sub_80A6F50: @ 0x080A6F50
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	movs r2, #1
	mov r8, r2
	movs r2, #1
	mov ip, r2
	adds r6, r1, #0
	adds r4, r0, #0
	adds r4, #0x10
	movs r7, #6
_080A6F66:
	ldrb r2, [r4]
	mov r3, ip
	ands r3, r2
	movs r0, #2
	negs r0, r0
	ands r0, r5
	orrs r3, r0
	ldrb r1, [r4, #1]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #1
	subs r0, #0xbe
	ands r0, r3
	orrs r1, r0
	lsrs r2, r2, #1
	mov r0, r8
	ands r2, r0
	mov r0, ip
	ands r2, r0
	lsls r2, r2, #7
	movs r0, #0x81
	negs r0, r0
	ands r0, r1
	orrs r2, r0
	ldrb r1, [r4, #2]
	lsls r1, r1, #8
	ldr r0, _080A6FB8  @ 0xFFFF00FF
	ands r0, r2
	orrs r1, r0
	adds r5, r1, #0
	strh r5, [r6]
	adds r6, #2
	adds r4, #4
	subs r7, #1
	cmp r7, #0
	bge _080A6F66
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A6FB8: .4byte 0xFFFF00FF

	THUMB_FUNC_START sub_80A6FBC
sub_80A6FBC: @ 0x080A6FBC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	mov r4, sp
	movs r7, #1
	adds r3, r0, #0
	adds r5, r1, #0
	movs r6, #6
_080A6FCA:
	ldrh r2, [r5]
	ldr r1, _080A6FE8  @ 0xFFFF0000
	ldr r0, [sp]
	ands r0, r1
	orrs r0, r2
	str r0, [sp]
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A6FEC
	ldrb r0, [r3, #0x10]
	orrs r0, r7
	b _080A6FF2
	.align 2, 0
_080A6FE8: .4byte 0xFFFF0000
_080A6FEC:
	ldrb r1, [r3, #0x10]
	movs r0, #0xfe
	ands r0, r1
_080A6FF2:
	strb r0, [r3, #0x10]
	ldr r0, [sp]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1a
	movs r2, #0
	strb r0, [r3, #0x11]
	ldrb r1, [r4]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080A7014
	ldrb r0, [r4, #1]
	strh r0, [r3, #0x12]
	ldrb r0, [r3, #0x10]
	movs r1, #2
	orrs r0, r1
	b _080A701E
_080A7014:
	ldrb r0, [r4, #1]
	strh r0, [r3, #0x12]
	ldrb r1, [r3, #0x10]
	movs r0, #0xfd
	ands r0, r1
_080A701E:
	strb r0, [r3, #0x10]
	adds r3, #4
	adds r5, #2
	subs r6, #1
	cmp r6, #0
	bge _080A6FCA
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A7034
sub_80A7034: @ 0x080A7034
	push {r4, lr}
	adds r4, r1, #0
	movs r2, #0
	adds r3, r0, #0
	adds r3, #0xc9
_080A703E:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #2
	ble _080A703E
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A7054
sub_80A7054: @ 0x080A7054
	push {r4, lr}
	adds r4, r1, #0
	movs r2, #0
	adds r3, r0, #0
	adds r3, #0xc9
_080A705E:
	adds r0, r3, r2
	adds r1, r4, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #2
	ble _080A705E
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A7074
sub_80A7074: @ 0x080A7074
	push {r4, lr}
	sub sp, #0x28
	adds r4, r0, #0
	add r0, sp, #0x24
	movs r1, #0
	strh r1, [r0]
	ldr r2, _080A70AC  @ 0x01000012
	mov r1, sp
	bl CpuSet
	mov r2, sp
	ldrb r0, [r2, #0x1c]
	movs r1, #2
	orrs r0, r1
	strb r0, [r2, #0x1c]
	movs r1, #0xc
	orrs r0, r1
	strb r0, [r2, #0x1c]
	mov r0, sp
	adds r1, r4, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	add sp, #0x28
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A70AC: .4byte 0x01000012

	THUMB_FUNC_START sub_80A70B0
sub_80A70B0: @ 0x080A70B0
	push {r4, r5, r6, lr}
	sub sp, #0x24
	adds r6, r0, #0
	adds r4, r1, #0
	adds r0, r4, #0
	mov r1, sp
	bl sub_80A6DA0
	add r1, sp, #8
	adds r0, r4, #0
	bl sub_80A6EB0
	add r1, sp, #0xc
	adds r0, r4, #0
	bl sub_80A6F50
	mov r1, sp
	adds r1, #0x1d
	adds r0, r4, #0
	bl sub_80A7034
	adds r0, r4, #0
	adds r0, #0xcc
	ldrb r1, [r0]
	add r0, sp, #0x20
	strb r1, [r0]
	mov r1, sp
	ldrh r0, [r4, #2]
	strb r0, [r1, #0x1a]
	ldrh r0, [r4, #4]
	strb r0, [r1, #0x1b]
	mov r5, sp
	ldrb r3, [r4]
	lsls r0, r3, #0x1e
	lsrs r0, r0, #0x1f
	ldrb r1, [r5, #0x1c]
	movs r2, #2
	negs r2, r2
	ands r2, r1
	orrs r2, r0
	strb r2, [r5, #0x1c]
	mov r4, sp
	lsls r1, r3, #0x1d
	lsrs r1, r1, #0x1f
	lsls r1, r1, #1
	movs r0, #3
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #0x1c]
	mov r2, sp
	lsls r3, r3, #0x1a
	lsrs r3, r3, #0x1e
	lsls r3, r3, #2
	movs r1, #0xd
	negs r1, r1
	ands r0, r1
	orrs r0, r3
	strb r0, [r2, #0x1c]
	mov r0, sp
	adds r1, r6, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	add sp, #0x24
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A7138
sub_80A7138: @ 0x080A7138
	push {r4, lr}
	sub sp, #0x24
	adds r4, r1, #0
	ldr r1, _080A718C  @ ReadSramFast
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0x24
	bl _call_via_r3
	adds r0, r4, #0
	mov r1, sp
	bl sub_80A6E24
	add r1, sp, #8
	adds r0, r4, #0
	bl sub_80A6F0C
	add r1, sp, #0xc
	adds r0, r4, #0
	bl sub_80A6FBC
	mov r1, sp
	adds r1, #0x1d
	adds r0, r4, #0
	bl sub_80A7054
	add r0, sp, #0x20
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0xcc
	strb r1, [r0]
	mov r0, sp
	ldrb r1, [r0, #0x1c]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A7190
	ldrb r0, [r4]
	movs r1, #2
	orrs r0, r1
	b _080A7198
	.align 2, 0
_080A718C: .4byte ReadSramFast
_080A7190:
	ldrb r1, [r4]
	movs r0, #3
	negs r0, r0
	ands r0, r1
_080A7198:
	strb r0, [r4]
	mov r0, sp
	ldrb r1, [r0, #0x1c]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080A71AE
	ldrb r0, [r4]
	movs r1, #4
	orrs r0, r1
	b _080A71B6
_080A71AE:
	ldrb r1, [r4]
	movs r0, #5
	negs r0, r0
	ands r0, r1
_080A71B6:
	strb r0, [r4]
	mov r0, sp
	ldrb r1, [r0, #0x1c]
	lsls r1, r1, #0x1c
	lsrs r1, r1, #0x1e
	lsls r1, r1, #4
	ldrb r2, [r4]
	movs r0, #0x31
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4]
	mov r0, sp
	ldrb r0, [r0, #0x1a]
	strh r0, [r4, #2]
	mov r0, sp
	ldrb r0, [r0, #0x1b]
	strh r0, [r4, #4]
	add sp, #0x24
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A71E4
sub_80A71E4: @ 0x080A71E4
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A71F4  @ gUnknown_03005280
	bl sub_80BD260
	pop {r0}
	bx r0
	.align 2, 0
_080A71F4: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80A71F8
sub_80A71F8: @ 0x080A71F8
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A7208  @ gUnknown_03005280
	bl sub_80BD270
	pop {r0}
	bx r0
	.align 2, 0
_080A7208: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80A720C
sub_80A720C: @ 0x080A720C
	push {r4, lr}
	adds r4, r1, #0
	ldr r2, _080A722C  @ 0x04000019
	bl CpuSet
	ldr r1, _080A7230  @ gUnknown_08205D7C
	adds r0, r4, #0
	bl CopyString
	ldr r0, _080A7234  @ 0x00040624
	str r0, [r4, #8]
	ldr r0, _080A7238  @ 0x0000200A
	strh r0, [r4, #0xc]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A722C: .4byte 0x04000019
_080A7230: .4byte gUnknown_08205D7C
_080A7234: .4byte 0x00040624
_080A7238: .4byte 0x0000200A

	THUMB_FUNC_START sub_80A723C
sub_80A723C: @ 0x080A723C
	push {r4, r5, lr}
	adds r2, r1, #0
	ldm r0!, {r3, r4, r5}
	stm r2!, {r3, r4, r5}
	ldr r0, [r0]
	str r0, [r2]
	ldr r0, _080A7254  @ 0x00040624
	str r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7254: .4byte 0x00040624

	THUMB_FUNC_START sub_80A7258
sub_80A7258: @ 0x080A7258
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	adds r0, r4, #0
	adds r1, r2, #0
	movs r2, #0x4c
	bl memcpy
	ldrb r1, [r4, #0xe]
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	cmp r0, #4
	ble _080A7276
	adds r0, r1, #1
	strb r0, [r4, #0xe]
_080A7276:
	ldrb r1, [r4, #0xe]
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	cmp r0, #0x15
	ble _080A7284
	adds r0, r1, #1
	strb r0, [r4, #0xe]
_080A7284:
	ldrb r1, [r4, #0xe]
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	cmp r0, #0x22
	ble _080A7292
	adds r0, r1, #1
	strb r0, [r4, #0xe]
_080A7292:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A7298
sub_80A7298: @ 0x080A7298
	push {r4, lr}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r2, [r0]
	str r2, [r1]
	ldrb r0, [r0, #4]
	strb r0, [r1, #4]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A72B0
sub_80A72B0: @ 0x080A72B0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r0, r5, #0
	adds r0, #0x4c
	adds r1, r4, #0
	adds r1, #0x58
	ldr r2, _080A72E4  @ 0x00001EC4
	bl memcpy
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80A7258
	ldr r0, _080A72E8  @ 0x00001F1C
	adds r4, r4, r0
	adds r0, #0x28
	adds r5, r5, r0
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80A7298
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A72E4: .4byte 0x00001EC4
_080A72E8: .4byte 0x00001F1C

	THUMB_FUNC_START sub_80A72EC
sub_80A72EC: @ 0x080A72EC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r0, r5, #0
	adds r0, #0x4c
	adds r1, r4, #0
	adds r1, #0x58
	ldr r2, _080A7320  @ 0x00000D1C
	bl memcpy
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80A7258
	ldr r0, _080A7324  @ 0x00000D74
	adds r4, r4, r0
	adds r0, #0x18
	adds r5, r5, r0
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80A7298
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A7320: .4byte 0x00000D1C
_080A7324: .4byte 0x00000D74

	THUMB_FUNC_START sub_80A7328
sub_80A7328: @ 0x080A7328
	push {lr}
	adds r3, r0, #0
	adds r0, r1, #0
	movs r2, #0xa2
	lsls r2, r2, #1
	adds r1, r3, #0
	bl memcpy
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A733C
sub_80A733C: @ 0x080A733C
	push {r4, lr}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A734C
sub_80A734C: @ 0x080A734C
	push {r4, lr}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A7360
sub_80A7360: @ 0x080A7360
	push {lr}
	adds r2, r0, #0
	adds r0, r1, #0
	adds r1, r2, #0
	movs r2, #0x94
	bl memcpy
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A7374
sub_80A7374: @ 0x080A7374
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x34
	ldr r4, _080A751C  @ gUnknown_02000000
	movs r0, #0xe0
	lsls r0, r0, #0x14
	mov r9, r0
	ldr r5, _080A7520  @ ReadSramFast
	ldr r3, [r5]
	adds r1, r4, #0
	movs r2, #0x64
	bl _call_via_r3
	ldr r1, [r4, #8]
	ldr r0, _080A7524  @ 0x00040624
	cmp r1, r0
	bne _080A739E
	b _080A750C
_080A739E:
	mov r8, r4
	movs r2, #0x80
	lsls r2, r2, #8
	ldr r3, [r5]
	mov r0, r9
	mov r1, r8
	bl _call_via_r3
	mov r0, r8
	ldr r1, [r0, #8]
	ldr r0, _080A7528  @ 0x00040603
	cmp r1, r0
	beq _080A73BA
	b _080A750C
_080A73BA:
	movs r0, #0
	str r0, [sp]
	movs r4, #0x80
	lsls r4, r4, #8
	add r4, r8
	ldr r2, _080A752C  @ 0x01000019
	mov r0, sp
	adds r1, r4, #0
	bl CpuFastSet
	mov r0, r8
	adds r1, r4, #0
	bl sub_80A720C
	adds r0, r4, #0
	bl SaveSomeUnitStatThingUnlockIdk
	movs r5, #0
	add r7, sp, #4
	add r1, sp, #8
	mov sl, r1
	mov r0, sp
	adds r0, #0xc
	str r0, [sp, #0x20]
	mov r1, sp
	adds r1, #0x10
	str r1, [sp, #0x24]
	adds r0, #8
	str r0, [sp, #0x28]
	adds r1, #8
	str r1, [sp, #0x2c]
	adds r0, #8
	str r0, [sp, #0x30]
	mov r6, r9
	adds r6, #0xd4
_080A7400:
	movs r0, #0
	str r0, [sp, #4]
	adds r0, r7, #0
	adds r1, r4, #0
	ldr r2, _080A7530  @ 0x010007DE
	bl CpuFastSet
	ldr r0, _080A7534  @ 0x00001F58
	muls r0, r5, r0
	adds r0, #0xd4
	add r0, r8
	adds r1, r4, #0
	bl sub_80A72B0
	adds r0, r4, #0
	adds r1, r6, #0
	ldr r2, _080A7538  @ 0x00001F78
	bl WriteAndVerifySramFast
	ldr r1, _080A7538  @ 0x00001F78
	adds r6, r6, r1
	adds r5, #1
	cmp r5, #1
	ble _080A7400
	movs r5, #0
	ldr r6, _080A753C  @ gUnknown_02008000
	ldr r0, _080A7540  @ 0x00003FC4
	mov r1, r9
	adds r4, r1, r0
_080A743A:
	movs r7, #0
	str r7, [sp, #8]
	mov r0, sl
	adds r1, r6, #0
	ldr r2, _080A7544  @ 0x01000372
	bl CpuFastSet
	ldr r0, _080A7548  @ 0x00000DA4
	muls r0, r5, r0
	ldr r1, _080A754C  @ 0x00003F84
	adds r0, r0, r1
	add r0, r8
	adds r1, r6, #0
	bl sub_80A72EC
	adds r0, r6, #0
	adds r1, r4, #0
	ldr r2, _080A7550  @ 0x00000DC8
	bl WriteAndVerifySramFast
	ldr r0, _080A7550  @ 0x00000DC8
	adds r4, r4, r0
	adds r5, #1
	cmp r5, #2
	ble _080A743A
	str r7, [sp, #0xc]
	ldr r4, _080A753C  @ gUnknown_02008000
	ldr r2, _080A7554  @ 0x01000025
	ldr r0, [sp, #0x20]
	adds r1, r4, #0
	bl CpuFastSet
	ldr r0, _080A7558  @ 0x000070E4
	add r0, r8
	adds r1, r4, #0
	bl sub_80A7360
	adds r0, r4, #0
	bl sub_80A3984
	str r7, [sp, #0x10]
	ldr r2, _080A755C  @ 0x01000009
	ldr r0, [sp, #0x24]
	adds r1, r4, #0
	bl CpuFastSet
	ldr r0, _080A7560  @ 0x00007178
	add r0, r8
	adds r1, r4, #0
	bl sub_80A734C
	adds r0, r4, #0
	bl sub_80A3EA4
	str r7, [sp, #0x14]
	ldr r2, _080A7564  @ 0x01000005
	ldr r0, [sp, #0x28]
	adds r1, r4, #0
	bl CpuFastSet
	ldr r0, _080A7568  @ 0x0000719C
	add r0, r8
	adds r1, r4, #0
	bl sub_80A733C
	adds r0, r4, #0
	bl sub_80A4000
	str r7, [sp, #0x18]
	ldr r2, _080A756C  @ 0x01000051
	ldr r0, [sp, #0x2c]
	adds r1, r4, #0
	bl CpuFastSet
	ldr r0, _080A7570  @ 0x000071B0
	add r0, r8
	adds r1, r4, #0
	bl sub_80A7328
	adds r0, r4, #0
	bl sub_80A3950
	movs r5, #0
	adds r6, r4, #0
	mov r4, r8
	adds r4, #0x64
_080A74E6:
	movs r0, #0
	str r0, [sp, #0x1c]
	ldr r0, [sp, #0x30]
	adds r1, r6, #0
	ldr r2, _080A7574  @ 0x01000004
	bl CpuFastSet
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_80A723C
	adds r0, r6, #0
	adds r1, r5, #0
	bl sub_80A2F94
	adds r4, #0x10
	adds r5, #1
	cmp r5, #6
	ble _080A74E6
_080A750C:
	add sp, #0x34
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A751C: .4byte gUnknown_02000000
_080A7520: .4byte ReadSramFast
_080A7524: .4byte 0x00040624
_080A7528: .4byte 0x00040603
_080A752C: .4byte 0x01000019
_080A7530: .4byte 0x010007DE
_080A7534: .4byte 0x00001F58
_080A7538: .4byte 0x00001F78
_080A753C: .4byte gUnknown_02008000
_080A7540: .4byte 0x00003FC4
_080A7544: .4byte 0x01000372
_080A7548: .4byte 0x00000DA4
_080A754C: .4byte 0x00003F84
_080A7550: .4byte 0x00000DC8
_080A7554: .4byte 0x01000025
_080A7558: .4byte 0x000070E4
_080A755C: .4byte 0x01000009
_080A7560: .4byte 0x00007178
_080A7564: .4byte 0x01000005
_080A7568: .4byte 0x0000719C
_080A756C: .4byte 0x01000051
_080A7570: .4byte 0x000071B0
_080A7574: .4byte 0x01000004

	THUMB_FUNC_START sub_80A7578
sub_80A7578: @ 0x080A7578
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r2, #0
	ldr r0, _080A75C8  @ gBmMapTerrain
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	adds r5, r0, r4
	ldrb r3, [r5]
	ldr r0, [r1, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, r3
	bne _080A7598
	movs r2, #1
_080A7598:
	lsls r2, r2, #1
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, r3
	bne _080A75A8
	adds r2, #1
_080A75A8:
	lsls r2, r2, #1
	ldrb r0, [r5, #1]
	cmp r0, r3
	bne _080A75B2
	adds r2, #1
_080A75B2:
	lsls r2, r2, #1
	subs r0, r5, #1
	ldrb r0, [r0]
	cmp r0, r3
	bne _080A75BE
	adds r2, #1
_080A75BE:
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A75C8: .4byte gBmMapTerrain

	THUMB_FUNC_START sub_80A75CC
sub_80A75CC: @ 0x080A75CC
	push {lr}
	cmp r0, #0x36
	beq _080A75E0
	cmp r0, #0x36
	bgt _080A75DC
	cmp r0, #0
	beq _080A75E0
	b _080A75E2
_080A75DC:
	cmp r0, #0x3d
	bne _080A75E2
_080A75E0:
	movs r0, #0x15
_080A75E2:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A75E8
sub_80A75E8: @ 0x080A75E8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r4, #0
	ldr r0, _080A7678  @ gBmMapTerrain
	mov r8, r0
	ldr r0, [r0]
	lsls r5, r1, #2
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl sub_80A75CC
	adds r7, r0, #0
	mov r1, r8
	ldr r0, [r1]
	adds r0, r5, r0
	ldr r0, [r0, #4]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl sub_80A75CC
	cmp r0, r7
	bne _080A761E
	movs r4, #1
_080A761E:
	lsls r4, r4, #1
	mov r2, r8
	ldr r0, [r2]
	adds r0, r5, r0
	subs r0, #4
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl sub_80A75CC
	cmp r0, r7
	bne _080A7638
	adds r4, #1
_080A7638:
	lsls r4, r4, #1
	mov r1, r8
	ldr r0, [r1]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r6, r0
	ldrb r0, [r0, #1]
	bl sub_80A75CC
	cmp r0, r7
	bne _080A7650
	adds r4, #1
_080A7650:
	lsls r4, r4, #1
	mov r2, r8
	ldr r0, [r2]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r6, r0
	subs r0, #1
	ldrb r0, [r0]
	bl sub_80A75CC
	cmp r0, r7
	bne _080A766A
	adds r4, #1
_080A766A:
	adds r0, r4, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080A7678: .4byte gBmMapTerrain

	THUMB_FUNC_START sub_80A767C
sub_80A767C: @ 0x080A767C
	push {lr}
	cmp r0, #0x17
	beq _080A7694
	cmp r0, #0x17
	bgt _080A768C
	cmp r0, #0
	beq _080A7694
	b _080A7696
_080A768C:
	cmp r0, #0x1a
	beq _080A7694
	cmp r0, #0x3f
	bne _080A7696
_080A7694:
	movs r0, #0x3c
_080A7696:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A769C
sub_80A769C: @ 0x080A769C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r4, #0
	ldr r0, _080A772C  @ gBmMapTerrain
	mov r8, r0
	ldr r0, [r0]
	lsls r5, r1, #2
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl sub_80A767C
	adds r7, r0, #0
	mov r1, r8
	ldr r0, [r1]
	adds r0, r5, r0
	ldr r0, [r0, #4]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl sub_80A767C
	cmp r0, r7
	bne _080A76D2
	movs r4, #1
_080A76D2:
	lsls r4, r4, #1
	mov r2, r8
	ldr r0, [r2]
	adds r0, r5, r0
	subs r0, #4
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl sub_80A767C
	cmp r0, r7
	bne _080A76EC
	adds r4, #1
_080A76EC:
	lsls r4, r4, #1
	mov r1, r8
	ldr r0, [r1]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r6, r0
	ldrb r0, [r0, #1]
	bl sub_80A767C
	cmp r0, r7
	bne _080A7704
	adds r4, #1
_080A7704:
	lsls r4, r4, #1
	mov r2, r8
	ldr r0, [r2]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r6, r0
	subs r0, #1
	ldrb r0, [r0]
	bl sub_80A767C
	cmp r0, r7
	bne _080A771E
	adds r4, #1
_080A771E:
	adds r0, r4, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080A772C: .4byte gBmMapTerrain

	THUMB_FUNC_START sub_80A7730
sub_80A7730: @ 0x080A7730
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r3, #0
	ldr r2, _080A77D0  @ gBmMapTerrain
	ldr r1, [r2]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r0, [r0, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x10
	beq _080A775A
	cmp r0, #0x15
	beq _080A775A
	cmp r0, #0x36
	beq _080A775A
	cmp r0, #0x16
	beq _080A775A
	cmp r0, #0x13
	bne _080A775C
_080A775A:
	adds r3, #1
_080A775C:
	lsls r3, r3, #1
	ldr r0, [r2]
	lsls r1, r5, #2
	adds r0, r1, r0
	subs r0, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x10
	beq _080A7780
	cmp r0, #0x15
	beq _080A7780
	cmp r0, #0x36
	beq _080A7780
	cmp r0, #0x16
	beq _080A7780
	cmp r0, #0x13
	bne _080A7782
_080A7780:
	adds r3, #1
_080A7782:
	lsls r3, r3, #1
	ldr r0, [r2]
	adds r0, r1, r0
	ldr r0, [r0]
	adds r0, r4, r0
	ldrb r0, [r0, #1]
	cmp r0, #0x10
	beq _080A77A2
	cmp r0, #0x15
	beq _080A77A2
	cmp r0, #0x36
	beq _080A77A2
	cmp r0, #0x16
	beq _080A77A2
	cmp r0, #0x13
	bne _080A77A4
_080A77A2:
	adds r3, #1
_080A77A4:
	lsls r3, r3, #1
	ldr r0, [r2]
	adds r0, r1, r0
	ldr r0, [r0]
	adds r0, r4, r0
	subs r0, #1
	ldrb r0, [r0]
	cmp r0, #0x10
	beq _080A77C6
	cmp r0, #0x15
	beq _080A77C6
	cmp r0, #0x36
	beq _080A77C6
	cmp r0, #0x16
	beq _080A77C6
	cmp r0, #0x13
	bne _080A77C8
_080A77C6:
	adds r3, #1
_080A77C8:
	adds r0, r3, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A77D0: .4byte gBmMapTerrain

	THUMB_FUNC_START sub_80A77D4
sub_80A77D4: @ 0x080A77D4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _080A780C  @ gBmMapTerrain
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	adds r2, r0, r4
	ldrb r3, [r2]
	subs r0, r2, #1
	ldrb r6, [r0]
	cmp r6, r3
	beq _080A77F4
	ldrb r5, [r2, #1]
	cmp r5, r3
	bne _080A782E
_080A77F4:
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r2, [r0]
	cmp r2, #0x15
	beq _080A7808
	cmp r2, #0x36
	beq _080A7808
	cmp r2, #0x16
	bne _080A7810
_080A7808:
	movs r0, #4
	b _080A78F4
	.align 2, 0
_080A780C: .4byte gBmMapTerrain
_080A7810:
	ldr r0, [r1, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x15
	beq _080A7822
	cmp r0, #0x36
	beq _080A7822
	cmp r0, #0x16
	bne _080A7826
_080A7822:
	movs r0, #0
	b _080A78F4
_080A7826:
	cmp r2, #0xf
	bne _080A78F2
	movs r0, #0xc
	b _080A78F4
_080A782E:
	subs r0, r1, #4
	ldr r0, [r0]
	adds r2, r0, r4
	ldrb r0, [r2]
	cmp r0, r3
	beq _080A7844
	ldr r0, [r1, #4]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, r3
	bne _080A7874
_080A7844:
	adds r0, r5, #0
	cmp r0, #0x15
	beq _080A7852
	cmp r0, #0x36
	beq _080A7852
	cmp r0, #0x16
	bne _080A7856
_080A7852:
	movs r0, #2
	b _080A78F4
_080A7856:
	adds r1, r6, #0
	cmp r1, #0x15
	beq _080A7864
	cmp r1, #0x36
	beq _080A7864
	cmp r1, #0x16
	bne _080A7868
_080A7864:
	movs r0, #6
	b _080A78F4
_080A7868:
	cmp r0, #0xf
	bne _080A7870
	movs r0, #0xd
	b _080A78F4
_080A7870:
	movs r0, #9
	b _080A78F4
_080A7874:
	subs r0, r1, #1
	ldrb r5, [r0]
	cmp r5, r3
	beq _080A7882
	ldrb r4, [r2, #1]
	cmp r4, r3
	bne _080A78B4
_080A7882:
	subs r0, r2, #1
	ldrb r2, [r0]
	cmp r2, #0x15
	beq _080A7892
	cmp r2, #0x36
	beq _080A7892
	cmp r2, #0x16
	bne _080A7896
_080A7892:
	movs r0, #5
	b _080A78F4
_080A7896:
	ldrb r0, [r1, #1]
	cmp r0, #0x15
	beq _080A78A4
	cmp r0, #0x36
	beq _080A78A4
	cmp r0, #0x16
	bne _080A78A8
_080A78A4:
	movs r0, #1
	b _080A78F4
_080A78A8:
	cmp r2, #0xf
	bne _080A78B0
	movs r0, #0xe
	b _080A78F4
_080A78B0:
	movs r0, #0xa
	b _080A78F4
_080A78B4:
	ldrb r0, [r1, #1]
	cmp r0, r3
	beq _080A78C2
	subs r0, r2, #1
	ldrb r0, [r0]
	cmp r0, r3
	bne _080A78F2
_080A78C2:
	adds r1, r4, #0
	cmp r1, #0x15
	beq _080A78D0
	cmp r1, #0x36
	beq _080A78D0
	cmp r1, #0x16
	bne _080A78D4
_080A78D0:
	movs r0, #3
	b _080A78F4
_080A78D4:
	adds r0, r5, #0
	cmp r0, #0x15
	beq _080A78E2
	cmp r0, #0x36
	beq _080A78E2
	cmp r0, #0x16
	bne _080A78E6
_080A78E2:
	movs r0, #7
	b _080A78F4
_080A78E6:
	cmp r1, #0xf
	bne _080A78EE
	movs r0, #0xf
	b _080A78F4
_080A78EE:
	movs r0, #0xb
	b _080A78F4
_080A78F2:
	movs r0, #8
_080A78F4:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A78FC
sub_80A78FC: @ 0x080A78FC
	push {lr}
	adds r2, r0, #0
	ldr r0, _080A7934  @ gBmMapTerrain
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x2d
	beq _080A7930
	ldr r0, [r1, #4]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x2d
	beq _080A7930
	ldr r0, [r1]
	adds r1, r2, r0
	subs r0, r1, #1
	ldrb r0, [r0]
	cmp r0, #0x2d
	beq _080A7930
	ldrb r0, [r1, #1]
	cmp r0, #0x2d
	bne _080A7938
_080A7930:
	movs r0, #0x12
	b _080A793A
	.align 2, 0
_080A7934: .4byte gBmMapTerrain
_080A7938:
	movs r0, #0x11
_080A793A:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A7940
sub_80A7940: @ 0x080A7940
	push {lr}
	ldr r2, _080A7958  @ gBmMapTerrain
	ldr r2, [r2]
	lsls r1, r1, #2
	adds r1, r1, r2
	ldr r1, [r1]
	adds r1, r0, r1
	ldrb r0, [r1, #1]
	cmp r0, #0x1e
	bne _080A795C
	movs r0, #0x16
	b _080A796A
	.align 2, 0
_080A7958: .4byte gBmMapTerrain
_080A795C:
	subs r0, r1, #1
	ldrb r0, [r0]
	cmp r0, #0x1e
	beq _080A7968
	movs r0, #7
	b _080A796A
_080A7968:
	movs r0, #0x17
_080A796A:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A7970
sub_80A7970: @ 0x080A7970
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r2, _080A79E0  @ gBmMapTerrain
	mov ip, r2
	ldr r2, [r2]
	lsls r7, r1, #2
	adds r2, r7, r2
	ldr r1, [r2]
	adds r1, r5, r1
	ldrb r4, [r1, #1]
	cmp r4, #0x13
	beq _080A79DA
	subs r1, #1
	ldrb r3, [r1]
	cmp r3, #0x13
	beq _080A79DA
	ldr r1, [r2, #4]
	adds r1, r1, r5
	ldrb r6, [r1]
	cmp r6, #0x13
	beq _080A79F6
	subs r1, r2, #4
	ldr r1, [r1]
	adds r1, r1, r5
	ldrb r1, [r1]
	cmp r1, #0x13
	beq _080A79F6
	cmp r4, #0x10
	beq _080A79F6
	cmp r3, #0x10
	beq _080A79F6
	cmp r6, #0x10
	beq _080A79DA
	cmp r1, #0x10
	beq _080A79DA
	cmp r4, #0x16
	beq _080A79F6
	cmp r3, #0x16
	beq _080A79F6
	mov r3, ip
	ldr r1, [r3]
	adds r2, r7, r1
	ldr r1, [r2, #4]
	adds r1, r1, r5
	ldrb r4, [r1]
	cmp r4, #0x16
	beq _080A79DA
	subs r1, r2, #4
	ldr r1, [r1]
	adds r1, r1, r5
	ldrb r3, [r1]
	cmp r3, #0x16
	bne _080A79E4
_080A79DA:
	movs r0, #0x10
	b _080A7A04
	.align 2, 0
_080A79E0: .4byte gBmMapTerrain
_080A79E4:
	ldr r1, [r2]
	adds r2, r5, r1
	ldrb r1, [r2, #1]
	cmp r1, #0x3c
	beq _080A79F6
	subs r1, r2, #1
	ldrb r1, [r1]
	cmp r1, #0x3c
	bne _080A79FA
_080A79F6:
	movs r0, #0x18
	b _080A7A04
_080A79FA:
	cmp r4, #0x3c
	beq _080A7A02
	cmp r3, #0x3c
	bne _080A7A04
_080A7A02:
	movs r0, #0x10
_080A7A04:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A7A0C
sub_80A7A0C: @ 0x080A7A0C
	push {lr}
	adds r2, r0, #0
	adds r3, r1, #0
	ldr r0, _080A7A30  @ gBmMapTerrain
	ldr r1, [r0]
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x40
	bls _080A7A26
	b _080A7BF2
_080A7A26:
	lsls r0, r0, #2
	ldr r1, _080A7A34  @ _080A7A38
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080A7A30: .4byte gBmMapTerrain
_080A7A34: .4byte _080A7A38
_080A7A38: @ jump table
	.4byte _080A7BF2 @ case 0
	.4byte _080A7B3C @ case 1
	.4byte _080A7B40 @ case 2
	.4byte _080A7B4C @ case 3
	.4byte _080A7B4C @ case 4
	.4byte _080A7B4C @ case 5
	.4byte _080A7B50 @ case 6
	.4byte _080A7B50 @ case 7
	.4byte _080A7B54 @ case 8
	.4byte _080A7BF2 @ case 9
	.4byte _080A7B58 @ case 10
	.4byte _080A7B5C @ case 11
	.4byte _080A7B60 @ case 12
	.4byte _080A7B64 @ case 13
	.4byte _080A7B68 @ case 14
	.4byte _080A7B68 @ case 15
	.4byte _080A7B6C @ case 16
	.4byte _080A7B78 @ case 17
	.4byte _080A7B7C @ case 18
	.4byte _080A7B80 @ case 19
	.4byte _080A7BF2 @ case 20
	.4byte _080A7B96 @ case 21
	.4byte _080A7B96 @ case 22
	.4byte _080A7BA2 @ case 23
	.4byte _080A7BA2 @ case 24
	.4byte _080A7BE2 @ case 25
	.4byte _080A7BE2 @ case 26
	.4byte _080A7BE2 @ case 27
	.4byte _080A7BE2 @ case 28
	.4byte _080A7BA6 @ case 29
	.4byte _080A7BAA @ case 30
	.4byte _080A7BB4 @ case 31
	.4byte _080A7BB8 @ case 32
	.4byte _080A7BB8 @ case 33
	.4byte _080A7BE2 @ case 34
	.4byte _080A7B4C @ case 35
	.4byte _080A7BF2 @ case 36
	.4byte _080A7BBC @ case 37
	.4byte _080A7BC4 @ case 38
	.4byte _080A7BD0 @ case 39
	.4byte _080A7BD0 @ case 40
	.4byte _080A7BD0 @ case 41
	.4byte _080A7BD4 @ case 42
	.4byte _080A7BE2 @ case 43
	.4byte _080A7BE2 @ case 44
	.4byte _080A7BD8 @ case 45
	.4byte _080A7BE2 @ case 46
	.4byte _080A7B96 @ case 47
	.4byte _080A7BF2 @ case 48
	.4byte _080A7BEE @ case 49
	.4byte _080A7BF2 @ case 50
	.4byte _080A7B60 @ case 51
	.4byte _080A7B80 @ case 52
	.4byte _080A7B96 @ case 53
	.4byte _080A7B96 @ case 54
	.4byte _080A7B5C @ case 55
	.4byte _080A7B4C @ case 56
	.4byte _080A7BE2 @ case 57
	.4byte _080A7BC4 @ case 58
	.4byte _080A7BC0 @ case 59
	.4byte _080A7B8A @ case 60
	.4byte _080A7BE2 @ case 61
	.4byte _080A7BA2 @ case 62
	.4byte _080A7BE2 @ case 63
	.4byte _080A7BE2 @ case 64
_080A7B3C:
	movs r0, #1
	b _080A7BF4
_080A7B40:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_80A7578
	adds r0, #0x40
	b _080A7BF4
_080A7B4C:
	movs r0, #2
	b _080A7BF4
_080A7B50:
	movs r0, #3
	b _080A7BF4
_080A7B54:
	movs r0, #4
	b _080A7BF4
_080A7B58:
	movs r0, #5
	b _080A7BF4
_080A7B5C:
	movs r0, #6
	b _080A7BF4
_080A7B60:
	movs r0, #8
	b _080A7BF4
_080A7B64:
	movs r0, #9
	b _080A7BF4
_080A7B68:
	movs r0, #0xa
	b _080A7BF4
_080A7B6C:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_80A7730
	adds r0, #0x60
	b _080A7BF4
_080A7B78:
	movs r0, #0xb
	b _080A7BF4
_080A7B7C:
	movs r0, #0x14
	b _080A7BF4
_080A7B80:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_80A7970
	b _080A7BF4
_080A7B8A:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_80A769C
	adds r0, #0x30
	b _080A7BF4
_080A7B96:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_80A75E8
	adds r0, #0x30
	b _080A7BF4
_080A7BA2:
	movs r0, #0xc
	b _080A7BF4
_080A7BA6:
	movs r0, #0xd
	b _080A7BF4
_080A7BAA:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_80A7940
	b _080A7BF4
_080A7BB4:
	movs r0, #0xe
	b _080A7BF4
_080A7BB8:
	movs r0, #0xf
	b _080A7BF4
_080A7BBC:
	movs r0, #0x1a
	b _080A7BF4
_080A7BC0:
	movs r0, #0x1b
	b _080A7BF4
_080A7BC4:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_80A77D4
	adds r0, #0x50
	b _080A7BF4
_080A7BD0:
	movs r0, #0x13
	b _080A7BF4
_080A7BD4:
	movs r0, #0x3a
	b _080A7BF4
_080A7BD8:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_80A78FC
	b _080A7BF4
_080A7BE2:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_80A7578
	adds r0, #0x20
	b _080A7BF4
_080A7BEE:
	movs r0, #0x19
	b _080A7BF4
_080A7BF2:
	movs r0, #0
_080A7BF4:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A7BF8
sub_80A7BF8: @ 0x080A7BF8
	push {lr}
	bl sub_80A7A0C
	lsls r0, r0, #5
	ldr r1, _080A7C08  @ gUnknown_02020188
	adds r0, r0, r1
	pop {r1}
	bx r1
	.align 2, 0
_080A7C08: .4byte gUnknown_02020188

	THUMB_FUNC_START sub_80A7C0C
sub_80A7C0C: @ 0x080A7C0C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r1, _080A7C40  @ gUnknown_08205D84
	mov r0, sp
	movs r2, #3
	bl memcpy
	ldr r0, _080A7C44  @ gBmMapUnit
	ldr r0, [r0]
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r0, [r4]
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A7C4C
	asrs r0, r0, #6
	add r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #5
	ldr r1, _080A7C48  @ gUnknown_02020188
	adds r0, r0, r1
	b _080A7C4E
	.align 2, 0
_080A7C40: .4byte gUnknown_08205D84
_080A7C44: .4byte gBmMapUnit
_080A7C48: .4byte gUnknown_02020188
_080A7C4C:
	ldr r0, _080A7C58  @ gUnknown_02020188
_080A7C4E:
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080A7C58: .4byte gUnknown_02020188

	THUMB_FUNC_START sub_80A7C5C
sub_80A7C5C: @ 0x080A7C5C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r4, r0, #0
	str r1, [sp]
	cmp r4, #0
	bne _080A7C72
	ldr r4, _080A7C84  @ 0x06000020
_080A7C72:
	lsls r0, r4, #0xf
	lsrs r7, r0, #0x14
	ldr r0, [sp]
	cmp r0, #0
	bge _080A7C80
	movs r1, #3
	str r1, [sp]
_080A7C80:
	movs r2, #0
	b _080A7E56
	.align 2, 0
_080A7C84: .4byte 0x06000020
_080A7C88:
	movs r6, #0
	movs r2, #0
	ldrsh r0, [r1, r2]
	mov r3, r8
	adds r3, #2
	str r3, [sp, #0xc]
	cmp r6, r0
	blt _080A7C9A
	b _080A7E54
_080A7C9A:
	movs r0, #1
	add r0, r8
	mov r9, r0
	mov r1, r8
	lsrs r0, r1, #0x1f
	add r0, r8
	asrs r0, r0, #1
	lsls r0, r0, #5
	str r0, [sp, #4]
	movs r2, #1
	mov sl, r2
_080A7CB0:
	adds r0, r6, #0
	mov r1, r8
	bl sub_80A7BF8
	adds r5, r0, #0
	mov r0, sl
	mov r1, r8
	bl sub_80A7BF8
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	adds r0, r6, #0
	mov r1, r9
	bl sub_80A7BF8
	adds r5, r0, #0
	mov r0, sl
	mov r1, r9
	bl sub_80A7BF8
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	ldr r0, _080A7E74  @ gBG1TilemapBuffer
	asrs r2, r6, #0x1f
	subs r1, r6, r2
	asrs r1, r1, #1
	ldr r3, [sp, #4]
	adds r1, r3, r1
	lsls r1, r1, #1
	adds r1, r1, r0
	ldr r3, [sp]
	lsls r0, r3, #0xc
	adds r0, r7, r0
	strh r0, [r1]
	adds r7, #1
	ldr r0, _080A7E78  @ gBmMapUnit
	ldr r1, [r0]
	mov r3, r8
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r0, [r3]
	adds r1, r0, r6
	ldrb r0, [r1]
	str r2, [sp, #8]
	cmp r0, #0
	bne _080A7D8E
	ldrb r0, [r1, #1]
	cmp r0, #0
	bne _080A7D8E
	ldr r0, [r3, #4]
	adds r1, r0, r6
	ldrb r0, [r1]
	cmp r0, #0
	bne _080A7D8E
	ldrb r0, [r1, #1]
	cmp r0, #0
	beq _080A7E42
_080A7D8E:
	adds r0, r6, #0
	mov r1, r8
	bl sub_80A7C0C
	adds r5, r0, #0
	mov r0, sl
	mov r1, r8
	bl sub_80A7C0C
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	adds r0, r6, #0
	mov r1, r9
	bl sub_80A7C0C
	adds r5, r0, #0
	mov r0, sl
	mov r1, r9
	bl sub_80A7C0C
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	ldr r0, _080A7E7C  @ gBG0TilemapBuffer
	ldr r2, [sp, #8]
	subs r1, r6, r2
	asrs r1, r1, #1
	ldr r3, [sp, #4]
	adds r1, r3, r1
	lsls r1, r1, #1
	adds r1, r1, r0
	ldr r0, [sp]
	adds r0, #1
	lsls r0, r0, #0xc
	adds r0, r7, r0
	strh r0, [r1]
	adds r7, #1
_080A7E42:
	movs r0, #2
	add sl, r0
	adds r6, #2
	ldr r0, _080A7E80  @ gBmMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r6, r0
	bge _080A7E54
	b _080A7CB0
_080A7E54:
	ldr r2, [sp, #0xc]
_080A7E56:
	mov r8, r2
	ldr r1, _080A7E80  @ gBmMapSize
	movs r3, #2
	ldrsh r0, [r1, r3]
	cmp r8, r0
	bge _080A7E64
	b _080A7C88
_080A7E64:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A7E74: .4byte gBG1TilemapBuffer
_080A7E78: .4byte gBmMapUnit
_080A7E7C: .4byte gBG0TilemapBuffer
_080A7E80: .4byte gBmMapSize

	THUMB_FUNC_START sub_80A7E84
sub_80A7E84: @ 0x080A7E84
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A7EC0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A7E9A
	movs r0, #0x78
	bl m4aSongNumStart
_080A7E9A:
	adds r0, r4, #0
	bl sub_80A86AC
	movs r4, #1
	negs r4, r4
	adds r0, r4, #0
	bl sub_80A83D0
	movs r0, #0
	adds r1, r4, #0
	bl sub_80A7C5C
	movs r0, #3
	bl BG_EnableSyncByMask
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A7EC0: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A7EC4
sub_80A7EC4: @ 0x080A7EC4
	push {lr}
	ldr r0, _080A7EF4  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldr r3, _080A7EF8  @ gUnknown_02000508
	cmp r1, #0xa0
	bls _080A7EDE
	ldr r0, _080A7EFC  @ gUnknown_02000500
	ldr r0, [r0]
	str r0, [r3]
	movs r1, #0
_080A7EDE:
	ldr r2, _080A7F00  @ 0x04000040
	ldr r0, [r3]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrh r0, [r1]
	lsls r0, r0, #8
	ldrh r1, [r1, #2]
	adds r0, r0, r1
	strh r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
_080A7EF4: .4byte 0x04000006
_080A7EF8: .4byte gUnknown_02000508
_080A7EFC: .4byte gUnknown_02000500
_080A7F00: .4byte 0x04000040

	THUMB_FUNC_START sub_80A7F04
sub_80A7F04: @ 0x080A7F04
	ldr r2, _080A7F14  @ gUnknown_02000500
	ldr r3, [r2]
	ldr r1, _080A7F18  @ gUnknown_02000504
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	bx lr
	.align 2, 0
_080A7F14: .4byte gUnknown_02000500
_080A7F18: .4byte gUnknown_02000504

	THUMB_FUNC_START sub_80A7F1C
sub_80A7F1C: @ 0x080A7F1C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r8, r0
	ldr r0, _080A8004  @ gUnknown_02000500
	ldr r1, _080A8008  @ gUnknown_02000280
	str r1, [r0]
	ldr r2, _080A800C  @ gUnknown_02000504
	ldr r3, _080A8010  @ 0xFFFFFD80
	adds r0, r1, r3
	str r0, [r2]
	ldr r0, _080A8014  @ gUnknown_02000508
	str r1, [r0]
	ldr r7, _080A8018  @ gLCDControlBuffer
	ldrb r0, [r7, #1]
	movs r6, #0x20
	orrs r0, r6
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r5, r7, #0
	adds r5, #0x34
	ldrb r0, [r5]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r4, #4
	orrs r0, r4
	movs r3, #8
	orrs r0, r3
	movs r2, #0x10
	orrs r0, r2
	strb r0, [r5]
	movs r0, #0x36
	adds r0, r0, r7
	mov r9, r0
	ldrb r1, [r0]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	orrs r0, r4
	orrs r0, r3
	orrs r0, r2
	mov r1, r9
	strb r0, [r1]
	adds r1, r7, #0
	adds r1, #0x2d
	movs r4, #0
	movs r0, #0xf0
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x31
	strb r4, [r0]
	subs r0, #5
	strb r4, [r0]
	adds r1, #3
	movs r0, #0xa0
	strb r0, [r1]
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	movs r0, #1
	bl sub_8001F64
	movs r0, #3
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	ldrb r0, [r5]
	orrs r0, r6
	strb r0, [r5]
	adds r1, r7, #0
	adds r1, #0x35
	ldrb r0, [r1]
	orrs r0, r6
	strb r0, [r1]
	mov r3, r9
	ldrb r0, [r3]
	orrs r0, r6
	strb r0, [r3]
	movs r0, #0x4c
	add r8, r0
	mov r1, r8
	strh r4, [r1]
	ldr r0, _080A801C  @ sub_80A7EC4
	bl SetPrimaryHBlankHandler
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A8004: .4byte gUnknown_02000500
_080A8008: .4byte gUnknown_02000280
_080A800C: .4byte gUnknown_02000504
_080A8010: .4byte 0xFFFFFD80
_080A8014: .4byte gUnknown_02000508
_080A8018: .4byte gLCDControlBuffer
_080A801C: .4byte sub_80A7EC4

	THUMB_FUNC_START sub_80A8020
sub_80A8020: @ 0x080A8020
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #0x14]
	adds r6, r0, #0
	adds r6, #0x4c
	movs r0, #0
	ldrsh r3, [r6, r0]
	cmp r3, #0
	bge _080A803C
	adds r3, #3
_080A803C:
	asrs r3, r3, #2
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #3
	movs r1, #0x10
	movs r2, #0
	bl SetSpecialColorEffectsParameters
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	ldrsh r3, [r6, r1]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #5
	movs r1, #0
	bl sub_8012DCC
	adds r7, r0, #0
	adds r1, r7, #0
	cmp r7, #0
	bge _080A806A
	adds r1, r7, #3
_080A806A:
	asrs r1, r1, #2
	subs r1, #0x40
	add r0, sp, #4
	ldr r3, [sp, #0x14]
	ldr r2, [r3, #0x34]
	negs r5, r2
	strh r5, [r0]
	ldr r4, [r3, #0x38]
	negs r3, r4
	strh r3, [r0, #2]
	strh r2, [r0, #4]
	strh r3, [r0, #6]
	strh r2, [r0, #8]
	strh r4, [r0, #0xa]
	strh r5, [r0, #0xc]
	strh r4, [r0, #0xe]
	str r6, [sp, #0x18]
	ldr r4, _080A81B0  @ gUnknown_02000504
	mov sl, r4
	ldr r2, _080A81B4  @ gSinLookup
	movs r0, #0xff
	ands r1, r0
	adds r0, r1, #0
	adds r0, #0x40
	lsls r0, r0, #1
	adds r0, r0, r2
	mov r9, r0
	lsls r1, r1, #1
	adds r1, r1, r2
	mov r8, r1
	add r6, sp, #4
	movs r5, #3
	mov ip, r5
_080A80AC:
	mov r0, r9
	movs r1, #0
	ldrsh r5, [r0, r1]
	movs r2, #0
	ldrsh r4, [r6, r2]
	adds r2, r5, #0
	muls r2, r4, r2
	mov r3, r8
	movs r0, #0
	ldrsh r1, [r3, r0]
	movs r0, #2
	ldrsh r3, [r6, r0]
	adds r0, r1, #0
	muls r0, r3, r0
	subs r2, r2, r0
	muls r1, r4, r1
	adds r0, r5, #0
	muls r0, r3, r0
	adds r1, r1, r0
	adds r0, r2, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x78
	strh r0, [r6]
	adds r0, r1, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x50
	strh r0, [r6, #2]
	adds r6, #4
	movs r1, #1
	negs r1, r1
	add ip, r1
	mov r2, ip
	cmp r2, #0
	bge _080A80AC
	mov r3, sl
	ldr r0, [r3]
	bl sub_80131D0
	mov r4, sl
	ldr r0, [r4]
	add r1, sp, #4
	movs r5, #0
	ldrsh r1, [r1, r5]
	add r2, sp, #4
	movs r3, #2
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #4
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #6
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_80131F0
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #4
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #6
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #8
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xa
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_80131F0
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #8
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xa
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0xc
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xe
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_80131F0
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #0xc
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xe
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #2
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_80131F0
	bl sub_80A7F04
	ldr r1, [sp, #0x18]
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble _080A819E
	ldr r0, [sp, #0x14]
	bl Proc_ClearNativeCallback
_080A819E:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A81B0: .4byte gUnknown_02000504
_080A81B4: .4byte gSinLookup

	THUMB_FUNC_START sub_80A81B8
sub_80A81B8: @ 0x080A81B8
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _080A821C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A81D0
	movs r0, #0x79
	bl m4aSongNumStart
_080A81D0:
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	movs r0, #3
	movs r1, #0x10
	movs r2, #0
	movs r3, #4
	bl SetSpecialColorEffectsParameters
	ldr r0, _080A8220  @ gUnknown_02000500
	ldr r1, _080A8224  @ gUnknown_02000280
	str r1, [r0]
	ldr r2, _080A8228  @ gUnknown_02000504
	ldr r3, _080A822C  @ 0xFFFFFD80
	adds r0, r1, r3
	str r0, [r2]
	ldr r0, _080A8230  @ gUnknown_02000508
	str r1, [r0]
	adds r0, r5, #0
	adds r0, #0x4c
	strh r4, [r0]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A821C: .4byte gUnknown_0202BCF0
_080A8220: .4byte gUnknown_02000500
_080A8224: .4byte gUnknown_02000280
_080A8228: .4byte gUnknown_02000504
_080A822C: .4byte 0xFFFFFD80
_080A8230: .4byte gUnknown_02000508

	THUMB_FUNC_START sub_80A8234
sub_80A8234: @ 0x080A8234
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #0x14]
	adds r6, r0, #0
	adds r6, #0x4c
	movs r1, #0
	ldrsh r0, [r6, r1]
	cmp r0, #0
	bge _080A8250
	adds r0, #3
_080A8250:
	asrs r0, r0, #2
	movs r3, #4
	subs r3, r3, r0
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #3
	movs r1, #0x10
	movs r2, #0
	bl SetSpecialColorEffectsParameters
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0
	ldrsh r3, [r6, r2]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #2
	movs r2, #0
	bl sub_8012DCC
	adds r7, r0, #0
	cmp r7, #0
	bge _080A8280
	adds r0, r7, #3
_080A8280:
	asrs r0, r0, #2
	movs r1, #0x40
	subs r1, r1, r0
	add r0, sp, #4
	ldr r3, [sp, #0x14]
	ldr r2, [r3, #0x34]
	negs r5, r2
	strh r5, [r0]
	ldr r4, [r3, #0x38]
	negs r3, r4
	strh r3, [r0, #2]
	strh r2, [r0, #4]
	strh r3, [r0, #6]
	strh r2, [r0, #8]
	strh r4, [r0, #0xa]
	strh r5, [r0, #0xc]
	strh r4, [r0, #0xe]
	str r6, [sp, #0x18]
	ldr r4, _080A83C8  @ gUnknown_02000504
	mov sl, r4
	ldr r2, _080A83CC  @ gSinLookup
	movs r0, #0xff
	ands r1, r0
	adds r0, r1, #0
	adds r0, #0x40
	lsls r0, r0, #1
	adds r0, r0, r2
	mov r9, r0
	lsls r1, r1, #1
	adds r1, r1, r2
	mov r8, r1
	add r6, sp, #4
	movs r5, #3
	mov ip, r5
_080A82C4:
	mov r0, r9
	movs r1, #0
	ldrsh r5, [r0, r1]
	movs r2, #0
	ldrsh r4, [r6, r2]
	adds r2, r5, #0
	muls r2, r4, r2
	mov r3, r8
	movs r0, #0
	ldrsh r1, [r3, r0]
	movs r0, #2
	ldrsh r3, [r6, r0]
	adds r0, r1, #0
	muls r0, r3, r0
	subs r2, r2, r0
	muls r1, r4, r1
	adds r0, r5, #0
	muls r0, r3, r0
	adds r1, r1, r0
	adds r0, r2, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x78
	strh r0, [r6]
	adds r0, r1, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x50
	strh r0, [r6, #2]
	adds r6, #4
	movs r1, #1
	negs r1, r1
	add ip, r1
	mov r2, ip
	cmp r2, #0
	bge _080A82C4
	mov r3, sl
	ldr r0, [r3]
	bl sub_80131D0
	mov r4, sl
	ldr r0, [r4]
	add r1, sp, #4
	movs r5, #0
	ldrsh r1, [r1, r5]
	add r2, sp, #4
	movs r3, #2
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #4
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #6
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_80131F0
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #4
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #6
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #8
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xa
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_80131F0
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #8
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xa
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0xc
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xe
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_80131F0
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #0xc
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xe
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #2
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_80131F0
	bl sub_80A7F04
	ldr r1, [sp, #0x18]
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble _080A83B6
	ldr r0, [sp, #0x14]
	bl Proc_ClearNativeCallback
_080A83B6:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A83C8: .4byte gUnknown_02000504
_080A83CC: .4byte gSinLookup

	THUMB_FUNC_START sub_80A83D0
sub_80A83D0: @ 0x080A83D0
	push {r4, lr}
	adds r4, r0, #0
	cmp r4, #0
	bge _080A83DA
	movs r4, #3
_080A83DA:
	ldr r0, _080A8400  @ gUnknown_08A1FBD8
	ldr r1, _080A8404  @ gUnknown_02020188
	bl CopyDataWithPossibleUncomp
	ldr r0, _080A8408  @ gUnknown_08A1FFB0
	lsls r1, r4, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080A840C  @ gUnknown_08A1FFD0
	adds r1, r4, #1
	lsls r1, r1, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A8400: .4byte gUnknown_08A1FBD8
_080A8404: .4byte gUnknown_02020188
_080A8408: .4byte gUnknown_08A1FFB0
_080A840C: .4byte gUnknown_08A1FFD0

	THUMB_FUNC_START sub_80A8410
sub_80A8410: @ 0x080A8410
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	ldr r1, _080A8490  @ gUnknown_0200050C
	ldr r0, _080A8494  @ gUnknown_02020188
	str r0, [r1]
	movs r2, #1
	ldr r0, _080A8498  @ gPaletteBuffer
	mov sl, r0
	movs r0, #0x1f
	mov r8, r0
	mov r9, r1
_080A842C:
	adds r0, r2, #0
	adds r0, #0x40
	lsls r0, r0, #1
	add r0, sl
	ldrh r0, [r0]
	adds r5, r0, #0
	mov r1, r8
	ands r5, r1
	asrs r4, r0, #5
	ands r4, r1
	asrs r3, r0, #0xa
	ands r3, r1
	adds r0, r2, #1
	mov ip, r0
	lsls r6, r2, #1
	movs r7, #7
_080A844C:
	mov r1, r9
	ldr r0, [r1]
	adds r0, r6, r0
	lsls r1, r3, #0xa
	lsls r2, r4, #5
	adds r1, r1, r2
	adds r1, r1, r5
	strh r1, [r0]
	adds r5, #3
	cmp r5, #0x1f
	ble _080A8464
	movs r5, #0x1f
_080A8464:
	adds r4, #3
	cmp r4, #0x1f
	ble _080A846C
	movs r4, #0x1f
_080A846C:
	adds r3, #3
	cmp r3, #0x1f
	ble _080A8474
	movs r3, #0x1f
_080A8474:
	adds r6, #0x20
	subs r7, #1
	cmp r7, #0
	bge _080A844C
	mov r2, ip
	cmp r2, #0xf
	ble _080A842C
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A8490: .4byte gUnknown_0200050C
_080A8494: .4byte gUnknown_02020188
_080A8498: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80A849C
sub_80A849C: @ 0x080A849C
	push {lr}
	sub sp, #0x10
	ldr r1, _080A84D0  @ gUnknown_08205D87
	mov r0, sp
	movs r2, #0x10
	bl memcpy
	bl GetGameClock
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	add r0, sp
	ldrb r1, [r0]
	ldr r0, _080A84D4  @ gUnknown_0200050C
	lsls r1, r1, #5
	ldr r0, [r0]
	adds r0, r0, r1
	movs r1, #0x80
	movs r2, #0x20
	bl CopyToPaletteBuffer
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_080A84D0: .4byte gUnknown_08205D87
_080A84D4: .4byte gUnknown_0200050C

	THUMB_FUNC_START sub_80A84D8
sub_80A84D8: @ 0x080A84D8
	push {lr}
	sub sp, #0x20
	ldr r1, _080A8514  @ gUnknown_08205D97
	mov r0, sp
	movs r2, #0x20
	bl memcpy
	bl GetGameClock
	movs r1, #0x1f
	ands r1, r0
	mov r2, sp
	adds r0, r2, r1
	ldrb r0, [r0]
	adds r3, r0, #0
	adds r3, #0x10
	ldr r2, _080A8518  @ gPaletteBuffer
	lsls r0, r3, #0xa
	lsls r1, r3, #5
	adds r0, r0, r1
	adds r0, r0, r3
	movs r1, #0x87
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePaletteSync
	add sp, #0x20
	pop {r0}
	bx r0
	.align 2, 0
_080A8514: .4byte gUnknown_08205D97
_080A8518: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80A851C
sub_80A851C: @ 0x080A851C
	push {r4, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	ldr r1, _080A8560  @ gUnknown_08205DB8
	mov r0, sp
	movs r2, #0x1a
	bl memcpy
	ldr r3, _080A8564  @ gUnknown_0202BCB0
	movs r0, #0xc
	ldrsh r1, [r3, r0]
	cmp r1, #0
	bge _080A8538
	adds r1, #3
_080A8538:
	asrs r1, r1, #2
	ldr r0, [r4, #0x3c]
	adds r2, r0, r1
	movs r1, #0xe
	ldrsh r0, [r3, r1]
	cmp r0, #0
	bge _080A8548
	adds r0, #3
_080A8548:
	asrs r0, r0, #2
	ldr r1, [r4, #0x40]
	adds r1, r1, r0
	adds r0, r2, #0
	mov r2, sp
	movs r3, #0
	bl CallARM_PushToSecondaryOAM
	add sp, #0x1c
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A8560: .4byte gUnknown_08205DB8
_080A8564: .4byte gUnknown_0202BCB0

	THUMB_FUNC_START sub_80A8568
sub_80A8568: @ 0x080A8568
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r2, _080A85D8  @ gBmMapSize
	movs r0, #0
	ldrsh r1, [r2, r0]
	lsls r1, r1, #2
	movs r0, #0xf0
	subs r0, r0, r1
	asrs r5, r0, #1
	movs r1, #2
	ldrsh r0, [r2, r1]
	lsls r1, r0, #2
	movs r0, #0xa0
	subs r0, r0, r1
	asrs r4, r0, #1
	cmp r1, #0x90
	ble _080A85AE
	adds r4, r1, #0
	subs r4, #0x90
	ldr r1, _080A85DC  @ gUnknown_0202BCB0
	movs r2, #0xe
	ldrsh r0, [r1, r2]
	lsls r0, r0, #0x10
	movs r2, #0x2a
	ldrsh r1, [r1, r2]
	bl __divsi3
	muls r0, r4, r0
	cmp r0, #0
	bge _080A85A8
	ldr r1, _080A85E0  @ 0x0000FFFF
	adds r0, r0, r1
_080A85A8:
	asrs r4, r0, #0x10
	movs r0, #8
	subs r4, r0, r4
_080A85AE:
	str r5, [r6, #0x3c]
	str r4, [r6, #0x40]
	negs r5, r5
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	negs r4, r4
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r0, #0
	adds r1, r5, #0
	adds r2, r4, #0
	bl BG_SetPosition
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	bl BG_SetPosition
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A85D8: .4byte gBmMapSize
_080A85DC: .4byte gUnknown_0202BCB0
_080A85E0: .4byte 0x0000FFFF

	THUMB_FUNC_START sub_80A85E4
sub_80A85E4: @ 0x080A85E4
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	ldr r1, _080A86A4  @ gUnknown_0202BCB0
	movs r0, #0xc
	ldrsh r3, [r1, r0]
	movs r0, #0xe
	ldrsh r4, [r1, r0]
	movs r5, #0xf
	adds r0, r3, #0
	ands r0, r5
	adds r7, r1, #0
	cmp r0, #0
	bne _080A866E
	adds r0, r4, #0
	ands r0, r5
	cmp r0, #0
	bne _080A866E
	str r0, [r2, #0x2c]
	str r0, [r2, #0x30]
	ldr r5, _080A86A8  @ gKeyStatusPtr
	ldr r0, [r5]
	ldrh r1, [r0, #4]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080A8626
	movs r0, #8
	negs r0, r0
	str r0, [r2, #0x2c]
	adds r1, r2, #0
	adds r1, #0x4a
	movs r0, #1
	strh r0, [r1]
_080A8626:
	ldr r5, [r5]
	ldrh r1, [r5, #4]
	movs r0, #0x10
	ands r0, r1
	adds r6, r5, #0
	cmp r0, #0
	beq _080A8640
	movs r0, #8
	str r0, [r2, #0x2c]
	adds r1, r2, #0
	adds r1, #0x4a
	movs r0, #1
	strh r0, [r1]
_080A8640:
	ldrh r1, [r6, #4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080A8658
	movs r0, #8
	negs r0, r0
	str r0, [r2, #0x30]
	adds r1, r2, #0
	adds r1, #0x4a
	movs r0, #1
	strh r0, [r1]
_080A8658:
	ldrh r1, [r5, #4]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080A866E
	movs r0, #8
	str r0, [r2, #0x30]
	adds r1, r2, #0
	adds r1, #0x4a
	movs r0, #1
	strh r0, [r1]
_080A866E:
	ldr r0, [r2, #0x2c]
	adds r3, r3, r0
	ldr r0, [r2, #0x30]
	adds r4, r4, r0
	cmp r3, #0
	bge _080A867C
	movs r3, #0
_080A867C:
	adds r1, r7, #0
	movs r2, #0x28
	ldrsh r0, [r1, r2]
	cmp r3, r0
	ble _080A8688
	adds r3, r0, #0
_080A8688:
	cmp r4, #0
	bge _080A868E
	movs r4, #0
_080A868E:
	movs r2, #0x2a
	ldrsh r0, [r1, r2]
	cmp r4, r0
	ble _080A8698
	adds r4, r0, #0
_080A8698:
	strh r3, [r7, #0xc]
	strh r4, [r7, #0xe]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A86A4: .4byte gUnknown_0202BCB0
_080A86A8: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_80A86AC
sub_80A86AC: @ 0x080A86AC
	adds r2, r0, #0
	adds r2, #0x4a
	movs r1, #0
	strh r1, [r2]
	ldr r2, _080A86C8  @ gBmMapSize
	movs r3, #0
	ldrsh r1, [r2, r3]
	lsls r1, r1, #1
	str r1, [r0, #0x34]
	movs r3, #2
	ldrsh r1, [r2, r3]
	lsls r1, r1, #1
	str r1, [r0, #0x38]
	bx lr
	.align 2, 0
_080A86C8: .4byte gBmMapSize

	THUMB_FUNC_START sub_80A86CC
sub_80A86CC: @ 0x080A86CC
	push {lr}
	adds r0, #0x4a
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080A86FA
	ldr r1, _080A8704  @ gUnknown_0202BCB0
	movs r2, #0xc
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bge _080A86E4
	adds r0, #0xf
_080A86E4:
	asrs r0, r0, #4
	adds r0, #7
	movs r2, #0xe
	ldrsh r1, [r1, r2]
	cmp r1, #0
	bge _080A86F2
	adds r1, #0xf
_080A86F2:
	asrs r1, r1, #4
	adds r1, #5
	bl SetCursorMapPosition
_080A86FA:
	movs r0, #0
	bl SetPrimaryHBlankHandler
	pop {r0}
	bx r0
	.align 2, 0
_080A8704: .4byte gUnknown_0202BCB0

	THUMB_FUNC_START sub_80A8708
sub_80A8708: @ 0x080A8708
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl sub_80A849C
	adds r0, r4, #0
	bl sub_80A84D8
	adds r0, r4, #0
	bl sub_80A8568
	adds r0, r4, #0
	bl sub_80A851C
	adds r0, r4, #0
	bl sub_80A85E4
	ldr r0, _080A8768  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r0, [r0, #4]
	movs r1, #0xc0
	lsls r1, r1, #2
	ands r1, r0
	cmp r1, #0
	beq _080A876C
	movs r0, #0
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	movs r0, #1
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	b _080A8794
	.align 2, 0
_080A8768: .4byte gKeyStatusPtr
_080A876C:
	str r1, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	movs r0, #3
	movs r1, #0x10
	movs r2, #0
	movs r3, #4
	bl SetSpecialColorEffectsParameters
_080A8794:
	ldr r0, _080A87BC  @ gUnknown_0202BCB0
	ldr r0, [r0, #0xc]
	ldr r1, _080A87C0  @ 0x000F000F
	ands r0, r1
	cmp r0, #0
	bne _080A87B4
	ldr r0, _080A87C4  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xa
	ands r0, r1
	cmp r0, #0
	beq _080A87B4
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080A87B4:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A87BC: .4byte gUnknown_0202BCB0
_080A87C0: .4byte 0x000F000F
_080A87C4: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_80A87C8
sub_80A87C8: @ 0x080A87C8
	push {lr}
	ldr r0, _080A87D8  @ gUnknown_08A1FB38
	movs r1, #3
	bl Proc_Create
	pop {r0}
	bx r0
	.align 2, 0
_080A87D8: .4byte gUnknown_08A1FB38

	THUMB_FUNC_START sub_80A87DC
sub_80A87DC: @ 0x080A87DC
	push {lr}
	adds r1, r0, #0
	ldr r0, _080A87EC  @ gUnknown_08A1FB38
	bl Proc_CreateBlockingChild
	pop {r0}
	bx r0
	.align 2, 0
_080A87EC: .4byte gUnknown_08A1FB38

	THUMB_FUNC_START sub_80A87F0
sub_80A87F0: @ 0x080A87F0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	ldr r0, _080A8824  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080A8828  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	adds r0, r5, #0
	bl InitChapterPreviewMap
	adds r0, r4, #0
	bl sub_80A83D0
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_80A7C5C
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A8824: .4byte gBG0TilemapBuffer
_080A8828: .4byte gBG1TilemapBuffer

	THUMB_FUNC_START sub_80A882C
sub_80A882C: @ 0x080A882C
	push {lr}
	movs r1, #0x12
	bl Proc_GotoLabel
	movs r0, #0xc0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl ISuspectThisToBeMusicRelated_8002730
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A8844
sub_80A8844: @ 0x080A8844
	push {r4, r5, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	movs r3, #0
	movs r2, #0
	movs r1, #1
_080A8852:
	adds r0, r4, #0
	asrs r0, r2
	ands r0, r1
	cmp r0, #0
	beq _080A886C
	cmp r5, r3
	bne _080A886A
	adds r0, r1, #0
	lsls r0, r2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	b _080A8874
_080A886A:
	adds r3, #1
_080A886C:
	adds r2, #1
	cmp r2, #7
	ble _080A8852
	movs r0, #0xff
_080A8874:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A887C
sub_80A887C: @ 0x080A887C
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	movs r3, #0
	movs r2, #0
	movs r1, #1
_080A888C:
	adds r0, r5, #0
	asrs r0, r2
	ands r0, r1
	cmp r0, #0
	beq _080A88A8
	adds r0, r4, #0
	asrs r0, r2
	ands r0, r1
	cmp r0, #0
	beq _080A88A6
	lsls r0, r3, #0x18
	lsrs r0, r0, #0x18
	b _080A88B0
_080A88A6:
	adds r3, #1
_080A88A8:
	adds r2, #1
	cmp r2, #7
	ble _080A888C
	movs r0, #0xff
_080A88B0:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A88B8
sub_80A88B8: @ 0x080A88B8
	push {lr}
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	movs r1, #0
	movs r3, #1
_080A88C2:
	adds r0, r2, #0
	asrs r0, r1
	ands r0, r3
	cmp r0, #0
	beq _080A88D2
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	b _080A88DA
_080A88D2:
	adds r1, #1
	cmp r1, #7
	ble _080A88C2
	movs r0, #0xff
_080A88DA:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A88E0
sub_80A88E0: @ 0x080A88E0
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _080A88F6
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r1, [r0]
	cmp r1, #0
	bne _080A8904
_080A88F6:
	bl CloseHelpBox
	adds r1, r4, #0
	adds r1, #0x3e
	movs r0, #0
	strb r0, [r1]
	b _080A8940
_080A8904:
	adds r1, r4, #0
	adds r1, #0x42
	ldrh r1, [r1]
	cmp r1, #0x10
	beq _080A891C
	cmp r1, #0x10
	bgt _080A8918
	cmp r1, #2
	beq _080A891C
	b _080A8940
_080A8918:
	cmp r1, #0x20
	bne _080A8940
_080A891C:
	ldrb r0, [r0]
	cmp r0, #0
	beq _080A8940
	adds r4, #0x3e
	ldrb r0, [r4]
	cmp r0, #0
	bne _080A8940
	ldr r0, _080A8948  @ 0x06014000
	movs r1, #9
	bl LoadDialogueBoxGfx
	ldr r2, _080A894C  @ 0x00000882
	movs r0, #0x30
	movs r1, #0x30
	bl StartHelpBoxExt_Unk
	movs r0, #1
	strb r0, [r4]
_080A8940:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A8948: .4byte 0x06014000
_080A894C: .4byte 0x00000882

	THUMB_FUNC_START sub_80A8950
sub_80A8950: @ 0x080A8950
	push {r4, r5, r6, r7, lr}
	sub sp, #0x168
	adds r4, r0, #0
	bl sub_80A5218
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080A8964
	movs r0, #0
	b _080A89DA
_080A8964:
	adds r0, r4, #0
	mov r1, sp
	bl sub_80A522C
	mov r0, sp
	ldrb r0, [r0, #0x1b]
	cmp r0, #1
	blt _080A897C
	cmp r0, #2
	ble _080A897C
	cmp r0, #3
	beq _080A8980
_080A897C:
	movs r6, #1
	b _080A8982
_080A8980:
	movs r6, #0xf
_080A8982:
	adds r0, r4, #0
	bl sub_80A3114
	adds r7, r0, #0
	movs r5, #0
	adds r4, r7, #0
	adds r4, #0x4c
	b _080A8996
_080A8992:
	adds r4, #0x24
	adds r5, #1
_080A8996:
	cmp r5, #0x32
	bgt _080A89D4
	adds r0, r4, #0
	add r1, sp, #0x4c
	bl LoadSavedUnit
	ldr r0, [sp, #0x4c]
	add r1, sp, #0x4c
	cmp r0, #0
	beq _080A8992
	ldrb r0, [r0, #4]
	cmp r0, r6
	bne _080A8992
	ldr r4, _080A89CC  @ gUnknown_0203EF64
	strb r6, [r4]
	ldrb r0, [r1, #8]
	strb r0, [r4, #1]
	ldr r1, _080A89D0  @ 0x00000D8C
	adds r0, r7, r1
	add r5, sp, #0x94
	adds r1, r5, #0
	bl sub_80A7138
	ldrb r0, [r5, #0x11]
	strb r0, [r4, #2]
	b _080A89D8
	.align 2, 0
_080A89CC: .4byte gUnknown_0203EF64
_080A89D0: .4byte 0x00000D8C
_080A89D4:
	bl sub_80AA700
_080A89D8:
	movs r0, #2
_080A89DA:
	add sp, #0x168
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A89E4
sub_80A89E4: @ 0x080A89E4
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r7, #8
	adds r5, r6, #0
	adds r5, #0x40
	ldrb r0, [r5]
	cmp r0, #8
	bne _080A8A14
	ldr r0, _080A8A10  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xf9
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A8A70
	bl CloseHelpBox
	movs r0, #7
	strb r0, [r5]
	b _080A8A70
	.align 2, 0
_080A8A10: .4byte gKeyStatusPtr
_080A8A14:
	ldr r0, _080A8A48  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080A8A70
	adds r4, r6, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	bl sub_80A8950
	cmp r0, #0
	bne _080A8A50
	ldr r0, _080A8A4C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A8A70
	movs r0, #0x6c
	bl m4aSongNumStart
	b _080A8A70
	.align 2, 0
_080A8A48: .4byte gKeyStatusPtr
_080A8A4C: .4byte gUnknown_0202BCF0
_080A8A50:
	cmp r0, #0
	blt _080A8A70
	cmp r0, #2
	bgt _080A8A70
	ldr r0, _080A8A8C  @ 0x06014000
	movs r1, #9
	bl LoadDialogueBoxGfx
	ldrb r1, [r4]
	lsls r1, r1, #5
	adds r1, #0x2c
	ldr r2, _080A8A90  @ 0x0000FFFE
	movs r0, #0x50
	bl StartItemHelpBox
	strb r7, [r5]
_080A8A70:
	adds r1, r6, #0
	adds r1, #0x40
	ldrb r0, [r1]
	cmp r0, #0
	beq _080A8A88
	cmp r0, r7
	bge _080A8A82
	subs r0, #1
	strb r0, [r1]
_080A8A82:
	ldrb r0, [r1]
	cmp r0, #0
	bne _080A8A94
_080A8A88:
	movs r0, #0
	b _080A8A96
	.align 2, 0
_080A8A8C: .4byte 0x06014000
_080A8A90: .4byte 0x0000FFFE
_080A8A94:
	movs r0, #1
_080A8A96:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A8A9C
sub_80A8A9C: @ 0x080A8A9C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r0, #0xac
	lsls r0, r0, #4
	bl sub_8089678
	movs r4, #0
	ldr r6, _080A8ACC  @ 0x0001FFFF
	movs r5, #0xb4
	lsls r5, r5, #9
_080A8AB0:
	adds r0, r7, #0
	adds r0, #0x37
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _080A8AD0
	adds r0, r5, #0
	ands r0, r6
	lsrs r0, r0, #5
	ldrb r1, [r1]
	bl sub_8089624
	b _080A8ADE
	.align 2, 0
_080A8ACC: .4byte 0x0001FFFF
_080A8AD0:
	adds r0, r5, #0
	ands r0, r6
	lsrs r0, r0, #5
	movs r1, #1
	negs r1, r1
	bl sub_8089624
_080A8ADE:
	movs r0, #0x80
	lsls r0, r0, #4
	adds r5, r5, r0
	adds r4, #1
	cmp r4, #2
	ble _080A8AB0
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A8AF0
sub_80A8AF0: @ 0x080A8AF0
	push {r4, r5, lr}
	sub sp, #4
	ldr r5, _080A8B2C  @ gUnknown_0202BCF0
	ldrb r1, [r5, #0x14]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _080A8B7E
	movs r4, #0xe
	ldrsb r4, [r5, r4]
	ldr r2, _080A8B30  @ gUnknown_03005280
	ldrb r1, [r2]
	movs r0, #3
	ands r0, r1
	cmp r0, #3
	bne _080A8B34
	cmp r4, #1
	bls _080A8B7E
	cmp r4, #0x38
	beq _080A8B7E
	adds r0, r2, #0
	bl sub_80BD014
	cmp r0, #0
	bge _080A8B24
	movs r0, #0
_080A8B24:
	bl WMLoc_GetChapterId
	strb r0, [r5, #0xe]
	b _080A8B7E
	.align 2, 0
_080A8B2C: .4byte gUnknown_0202BCF0
_080A8B30: .4byte gUnknown_03005280
_080A8B34:
	movs r0, #0xe
	ldrsb r0, [r5, r0]
	cmp r0, #6
	bne _080A8B4E
	movs r0, #0x88
	bl CheckEventId
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A8B4E
	movs r0, #0x38
	strb r0, [r5, #0xe]
	b _080A8B7E
_080A8B4E:
	cmp r4, #1
	beq _080A8B7E
	cmp r4, #0xa
	beq _080A8B7E
	cmp r4, #0x17
	beq _080A8B7E
	ldr r4, _080A8C18  @ gUnknown_0202BCF0
	adds r0, r4, #0
	adds r0, #0x4a
	ldrb r1, [r0]
	movs r0, #0xe
	ands r0, r1
	cmp r0, #4
	beq _080A8B7E
	ldr r0, _080A8C1C  @ gUnknown_0202BCB0
	ldrb r1, [r0, #4]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne _080A8B7E
	ldr r0, _080A8C20  @ gUnknown_03005280
	bl sub_80BD224
	strb r0, [r4, #0xe]
_080A8B7E:
	bl sub_80AA700
	ldr r0, _080A8C24  @ gUnknown_08A20050
	bl SetupBackgrounds
	ldr r3, _080A8C28  @ gLCDControlBuffer
	ldrb r1, [r3, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r3, #1]
	ldrb r1, [r3]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r3]
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	movs r0, #1
	movs r1, #6
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A8C18: .4byte gUnknown_0202BCF0
_080A8C1C: .4byte gUnknown_0202BCB0
_080A8C20: .4byte gUnknown_03005280
_080A8C24: .4byte gUnknown_08A20050
_080A8C28: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80A8C2C
sub_80A8C2C: @ 0x080A8C2C
	push {r4, lr}
	sub sp, #4
	bl sub_80AA700
	ldr r0, _080A8CCC  @ gUnknown_08A20050
	bl SetupBackgrounds
	ldr r3, _080A8CD0  @ gLCDControlBuffer
	ldrb r1, [r3, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r3, #1]
	ldrb r1, [r3]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r3]
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	movs r0, #1
	movs r1, #6
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A8CCC: .4byte gUnknown_08A20050
_080A8CD0: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80A8CD4
sub_80A8CD4: @ 0x080A8CD4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r0
	bl sub_8003D20
	bl LoadUiFrameGraphics
	bl LoadObjUIGfx
	ldr r0, _080A8EB0  @ gUnknown_08A25DCC
	movs r6, #0x80
	lsls r6, r6, #1
	adds r1, r6, #0
	adds r2, r6, #0
	bl CopyToPaletteBuffer
	ldr r4, _080A8EB4  @ gUnknown_08A21658
	movs r0, #3
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080A8EB8  @ gBG3TilemapBuffer
	ldr r1, _080A8EBC  @ gUnknown_08A25ECC
	movs r2, #0x80
	lsls r2, r2, #8
	bl CallARM_FillTileRect
	ldr r0, _080A8EC0  @ gUnknown_08A268D8
	movs r1, #0xe0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r4, _080A8EC4  @ gUnknown_08A26380
	movs r0, #3
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r2, _080A8EC8  @ 0x06004C00
	adds r1, r1, r2
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080A8ECC  @ gUnknown_08A268F8
	ldr r4, _080A8ED0  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080A8ED4  @ gBG2TilemapBuffer
	ldr r2, _080A8ED8  @ 0x00007260
	adds r1, r4, #0
	bl CallARM_FillTileRect
	ldr r0, _080A8EDC  @ gUnknown_08A26A74
	ldr r1, _080A8EE0  @ 0x06010800
	bl CopyDataWithPossibleUncomp
	ldr r0, _080A8EE4  @ gUnknown_08A27F68
	movs r1, #0x90
	lsls r1, r1, #2
	adds r2, r6, #0
	bl CopyToPaletteBuffer
	ldr r0, _080A8EE8  @ gUnknown_08A295B4
	movs r1, #0x40
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080A8EEC  @ gUnknown_02022AE8
	adds r1, r0, #0
	subs r1, #0x20
	movs r2, #1
	bl sub_80AA790
	ldr r0, _080A8EF0  @ gUnknown_08A2C23C
	ldr r1, _080A8EF4  @ gUnknown_020007A0
	movs r2, #2
	bl sub_80AA790
	movs r0, #0xf
	bl BG_EnableSyncByMask
	mov r0, r8
	adds r0, #0x29
	movs r4, #0
	strb r4, [r0]
	ldr r1, _080A8EF8  @ gLCDControlBuffer
	adds r2, r1, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r3, #0x20
	orrs r0, r3
	strb r0, [r2]
	adds r1, #0x35
	ldrb r0, [r1]
	orrs r0, r3
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x36
	strb r4, [r0]
	mov r1, r8
	adds r1, #0x2d
	movs r0, #0xff
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x3d
	strb r4, [r0]
	movs r7, #0
	ldr r0, _080A8EFC  @ gSinLookup
	mov r9, r0
	movs r1, #0x80
	add r1, r9
	mov sl, r1
	adds r5, r6, #0
_080A8DCA:
	mov r2, sl
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	adds r1, r5, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r2, r9
	movs r1, #0
	ldrsh r0, [r2, r1]
	negs r0, r0
	lsls r0, r0, #4
	adds r1, r5, #0
	bl Div
	lsls r2, r0, #0x10
	asrs r0, r2, #0x10
	str r0, [sp, #8]
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r5, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sl
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r5, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	ldr r2, [sp, #8]
	adds r3, r4, #0
	bl WriteOAMRotScaleData
	adds r7, #1
	cmp r7, #3
	ble _080A8DCA
	mov r1, r8
	adds r1, #0x44
	movs r2, #0
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1]
	subs r1, #5
	movs r0, #0xff
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x3e
	strb r2, [r0]
	adds r0, #2
	strb r2, [r0]
	movs r7, #0
	mov r4, r8
	adds r4, #0x2c
_080A8E50:
	lsls r0, r7, #0x18
	lsrs r0, r0, #0x18
	mov r1, r8
	bl sub_80ABC14
	adds r7, #1
	cmp r7, #3
	ble _080A8E50
	ldrb r0, [r4]
	bl sub_80ABD88
	bl sub_80AB794
	movs r0, #2
	bl BG_EnableSyncByMask
	ldr r2, _080A8EF8  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldr r1, _080A8F00  @ gPaletteBuffer
	movs r0, #0
	strh r0, [r1]
	bl EnablePaletteSync
	mov r0, r8
	bl sub_80A8A9C
	mov r0, r8
	bl New6C_savedraw
	mov r1, r8
	str r0, [r1, #0x58]
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A8EB0: .4byte gUnknown_08A25DCC
_080A8EB4: .4byte gUnknown_08A21658
_080A8EB8: .4byte gBG3TilemapBuffer
_080A8EBC: .4byte gUnknown_08A25ECC
_080A8EC0: .4byte gUnknown_08A268D8
_080A8EC4: .4byte gUnknown_08A26380
_080A8EC8: .4byte 0x06004C00
_080A8ECC: .4byte gUnknown_08A268F8
_080A8ED0: .4byte gUnknown_02020188
_080A8ED4: .4byte gBG2TilemapBuffer
_080A8ED8: .4byte 0x00007260
_080A8EDC: .4byte gUnknown_08A26A74
_080A8EE0: .4byte 0x06010800
_080A8EE4: .4byte gUnknown_08A27F68
_080A8EE8: .4byte gUnknown_08A295B4
_080A8EEC: .4byte gUnknown_02022AE8
_080A8EF0: .4byte gUnknown_08A2C23C
_080A8EF4: .4byte gUnknown_020007A0
_080A8EF8: .4byte gLCDControlBuffer
_080A8EFC: .4byte gSinLookup
_080A8F00: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80A8F04
sub_80A8F04: @ 0x080A8F04
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, _080A8F34  @ gUnknown_08A2812C
	ldr r1, _080A8F38  @ 0x06014000
	bl CopyDataWithPossibleUncomp
	adds r0, r5, #0
	bl sub_80AB89C
	adds r6, r5, #0
	adds r6, #0x42
	ldrh r0, [r6]
	cmp r0, #0x20
	bne _080A8F3C
	movs r0, #0x20
	adds r1, r5, #0
	bl sub_80ABF44
	adds r1, r5, #0
	adds r1, #0x2b
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x2e
	b _080A8F6A
	.align 2, 0
_080A8F34: .4byte gUnknown_08A2812C
_080A8F38: .4byte 0x06014000
_080A8F3C:
	adds r4, r5, #0
	adds r4, #0x2e
	movs r1, #0
	movs r0, #2
	strb r0, [r4]
	adds r0, r5, #0
	adds r0, #0x2c
	strb r1, [r0]
	adds r2, r5, #0
	adds r2, #0x2b
	strb r1, [r2]
	adds r0, #8
	strb r1, [r0]
	adds r0, #0x12
	strh r1, [r0]
	subs r0, #0x16
	ldrb r0, [r0]
	ldrb r1, [r2]
	bl sub_80A8844
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	strh r0, [r6]
_080A8F6A:
	ldrb r0, [r4]
	cmp r0, #2
	bne _080A8F78
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
_080A8F78:
	ldrb r0, [r4]
	cmp r0, #5
	bne _080A8F86
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0xdc
	strb r0, [r1]
_080A8F86:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A8F8C
sub_80A8F8C: @ 0x080A8F8C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r4, #0
	movs r0, #5
	strb r0, [r1]
	bl sub_80A4DA0
	adds r1, r5, #0
	adds r1, #0x2c
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2b
	strb r4, [r0]
	adds r0, #9
	strb r4, [r0]
	adds r0, #0x12
	movs r2, #0
	strh r4, [r0]
	subs r0, #0x16
	movs r1, #0x40
	strb r1, [r0]
	adds r0, #0x12
	strh r1, [r0]
	subs r0, #0x11
	strb r2, [r0]
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0xdc
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A8FD0
sub_80A8FD0: @ 0x080A8FD0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r4, #0
	movs r0, #5
	strb r0, [r1]
	bl sub_80A4DA0
	adds r1, r5, #0
	adds r1, #0x2c
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2b
	strb r4, [r0]
	adds r0, #9
	strb r4, [r0]
	adds r0, #0x12
	movs r2, #0
	strh r4, [r0]
	subs r0, #0x16
	movs r1, #0x80
	strb r1, [r0]
	adds r0, #0x12
	strh r1, [r0]
	subs r0, #0x11
	strb r2, [r0]
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0xdc
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A9014
sub_80A9014: @ 0x080A9014
	push {lr}
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	bl Proc_GotoLabel
	pop {r0}
	bx r0

	THUMB_FUNC_START Loop6C_savemenu
Loop6C_savemenu: @ 0x080A9024
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #2
	strb r0, [r1]
	ldr r0, _080A9054  @ gKeyStatusPtr
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _080A906C
	adds r2, r5, #0
	adds r2, #0x2b
	ldrb r0, [r2]
	cmp r0, #0
	beq _080A9058
	subs r0, #1
	b _080A908A
	.align 2, 0
_080A9054: .4byte gKeyStatusPtr
_080A9058:
	ldrh r1, [r3, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080A90C2
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r0, [r0]
	subs r0, #1
	b _080A908A
_080A906C:
	movs r6, #0x80
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080A90C2
	adds r2, r5, #0
	adds r2, #0x2b
	ldrb r1, [r2]
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _080A90A4
	adds r0, r1, #1
_080A908A:
	strb r0, [r2]
	ldr r0, _080A90A0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A90C2
	movs r0, #0x66
	bl m4aSongNumStart
	b _080A90C2
	.align 2, 0
_080A90A0: .4byte gUnknown_0202BCF0
_080A90A4:
	ldrh r1, [r3, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080A90C2
	strb r4, [r2]
	ldr r0, _080A911C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A90C2
	movs r0, #0x66
	bl m4aSongNumStart
_080A90C2:
	ldr r0, _080A9120  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080A90D2
	b _080A921A
_080A90D2:
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r0, [r0]
	adds r1, r5, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	bl sub_80A8844
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r5, #0
	adds r4, #0x42
	strh r0, [r4]
	ldr r0, _080A911C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A90FE
	movs r0, #0x6a
	bl m4aSongNumStart
_080A90FE:
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	ldrh r0, [r4]
	subs r0, #1
	cmp r0, #0x1f
	bls _080A9110
	b _080A9246
_080A9110:
	lsls r0, r0, #2
	ldr r1, _080A9124  @ _080A9128
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080A911C: .4byte gUnknown_0202BCF0
_080A9120: .4byte gKeyStatusPtr
_080A9124: .4byte _080A9128
_080A9128: @ jump table
	.4byte _080A91A8 @ case 0
	.4byte _080A91B4 @ case 1
	.4byte _080A9246 @ case 2
	.4byte _080A91B4 @ case 3
	.4byte _080A9246 @ case 4
	.4byte _080A9246 @ case 5
	.4byte _080A9246 @ case 6
	.4byte _080A91B4 @ case 7
	.4byte _080A9246 @ case 8
	.4byte _080A9246 @ case 9
	.4byte _080A9246 @ case 10
	.4byte _080A9246 @ case 11
	.4byte _080A9246 @ case 12
	.4byte _080A9246 @ case 13
	.4byte _080A9246 @ case 14
	.4byte _080A91D4 @ case 15
	.4byte _080A9246 @ case 16
	.4byte _080A9246 @ case 17
	.4byte _080A9246 @ case 18
	.4byte _080A9246 @ case 19
	.4byte _080A9246 @ case 20
	.4byte _080A9246 @ case 21
	.4byte _080A9246 @ case 22
	.4byte _080A9246 @ case 23
	.4byte _080A9246 @ case 24
	.4byte _080A9246 @ case 25
	.4byte _080A9246 @ case 26
	.4byte _080A9246 @ case 27
	.4byte _080A9246 @ case 28
	.4byte _080A9246 @ case 29
	.4byte _080A9246 @ case 30
	.4byte _080A91FC @ case 31
_080A91A8:
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	subs r0, #0x13
	strb r1, [r0]
	b _080A91CA
_080A91B4:
	bl sub_80A4DA0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #1
	movs r2, #1
	bl sub_80AB98C
	adds r1, r5, #0
	adds r1, #0x2c
	strb r0, [r1]
_080A91CA:
	adds r0, r5, #0
	movs r1, #3
	bl Proc_GotoLabel
	b _080A9246
_080A91D4:
	adds r4, r5, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	movs r1, #0
	movs r2, #1
	bl sub_80AB98C
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl Proc_GotoLabel
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xc0
	movs r2, #0x10
	movs r3, #0
	bl ISuspectThisToBeMusicRelated_8002730
	b _080A9246
_080A91FC:
	adds r2, r5, #0
	adds r2, #0x34
	adds r1, r5, #0
	adds r1, #0x33
	ldrb r0, [r2]
	ldrb r1, [r1]
	cmp r0, r1
	bcc _080A9210
	movs r0, #0
	strb r0, [r2]
_080A9210:
	adds r0, r5, #0
	movs r1, #8
	bl Proc_GotoLabel
	b _080A9246
_080A921A:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080A9246
	ldr r0, _080A924C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9234
	movs r0, #0x6b
	bl m4aSongNumStart
_080A9234:
	adds r0, r5, #0
	movs r1, #0x12
	bl Proc_GotoLabel
	adds r1, r5, #0
	adds r1, #0x42
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1]
_080A9246:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A924C: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A9250
sub_80A9250: @ 0x080A9250
	push {lr}
	adds r2, r0, #0
	adds r2, #0x2a
	ldrb r2, [r2]
	cmp r2, #1
	beq _080A9272
	cmp r2, #1
	bgt _080A9266
	cmp r2, #0
	beq _080A926C
	b _080A927C
_080A9266:
	cmp r2, #2
	beq _080A9278
	b _080A927C
_080A926C:
	movs r3, #0
	movs r1, #0
	b _080A927C
_080A9272:
	movs r3, #1
	movs r1, #0
	b _080A927C
_080A9278:
	movs r3, #1
	movs r1, #1
_080A927C:
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r3, r3, #0x18
	asrs r3, r3, #0x18
	movs r2, #1
	bl sub_80A4E70
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A9290
sub_80A9290: @ 0x080A9290
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x36
	ldrb r1, [r5]
	cmp r1, #0
	bne _080A933C
	ldr r0, _080A92C8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A92B0
	movs r0, #0x6a
	bl m4aSongNumStart
_080A92B0:
	adds r0, r4, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #8
	beq _080A9312
	cmp r0, #8
	bgt _080A92CC
	cmp r0, #2
	beq _080A9324
	cmp r0, #4
	beq _080A92E0
	b _080A9334
	.align 2, 0
_080A92C8: .4byte gUnknown_0202BCF0
_080A92CC:
	cmp r0, #0x20
	beq _080A9324
	cmp r0, #0x20
	bgt _080A92DA
	cmp r0, #0x10
	beq _080A9324
	b _080A9334
_080A92DA:
	cmp r0, #0x40
	beq _080A9316
	b _080A9334
_080A92E0:
	adds r1, r4, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	cmp r0, #0xff
	bne _080A92FC
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #1
	bl sub_80AB9FC
	b _080A9488
_080A92FC:
	ldrb r0, [r1]
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	bl sub_80A4E08
	adds r0, r4, #0
	movs r1, #6
	bl Proc_GotoLabel
	b _080A9488
_080A9312:
	movs r0, #2
	b _080A9318
_080A9316:
	movs r0, #1
_080A9318:
	strb r0, [r5]
	adds r0, r4, #0
	movs r1, #1
	bl sub_80AB83C
	b _080A9334
_080A9324:
	adds r1, r4, #0
	adds r1, #0x36
	movs r0, #2
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #1
	bl sub_80AB83C
_080A9334:
	adds r0, r4, #0
	bl sub_80A88E0
	b _080A9488
_080A933C:
	adds r5, r4, #0
	adds r5, #0x42
	ldrh r0, [r5]
	cmp r0, #0x10
	beq _080A93D0
	cmp r0, #0x10
	bgt _080A9354
	cmp r0, #2
	beq _080A93A4
	cmp r0, #8
	beq _080A93DC
	b _080A947A
_080A9354:
	cmp r0, #0x20
	beq _080A935E
	cmp r0, #0x40
	beq _080A9424
	b _080A947A
_080A935E:
	cmp r1, #1
	bne _080A940C
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0xf0
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	bl LoadGame
	ldr r0, _080A93A0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9386
	movs r0, #0x6a
	bl m4aSongNumStart
_080A9386:
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #0x10
	beq _080A93C2
	cmp r0, #0x20
	bne _080A947A
	adds r0, r4, #0
	movs r1, #0xe
	bl Proc_GotoLabel
	b _080A947A
	.align 2, 0
_080A93A0: .4byte gUnknown_0202BCF0
_080A93A4:
	cmp r1, #1
	bne _080A940C
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0xf0
	strh r0, [r1]
	ldr r0, _080A93CC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A93C2
	movs r0, #0x6a
	bl m4aSongNumStart
_080A93C2:
	adds r0, r4, #0
	bl sub_80A882C
	b _080A947A
	.align 2, 0
_080A93CC: .4byte gUnknown_0202BCF0
_080A93D0:
	cmp r1, #1
	bne _080A940C
	adds r0, r4, #0
	bl sub_80A9250
	b _080A9432
_080A93DC:
	cmp r1, #1
	bne _080A940C
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	bl sub_80A4DC8
	adds r0, r4, #0
	movs r1, #6
	bl Proc_GotoLabel
	ldr r0, _080A9408  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A947A
	movs r0, #0x6a
	bl m4aSongNumStart
	b _080A947A
	.align 2, 0
_080A9408: .4byte gUnknown_0202BCF0
_080A940C:
	ldr r0, _080A9420  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A947A
	movs r0, #0x6b
	bl m4aSongNumStart
	b _080A947A
	.align 2, 0
_080A9420: .4byte gUnknown_0202BCF0
_080A9424:
	cmp r1, #1
	bne _080A9454
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	bl SaveGame
_080A9432:
	adds r0, r4, #0
	movs r1, #6
	bl Proc_GotoLabel
	ldr r0, _080A9450  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A947A
	movs r0, #0x60
	bl m4aSongNumStart
	b _080A947A
	.align 2, 0
_080A9450: .4byte gUnknown_0202BCF0
_080A9454:
	adds r0, r4, #0
	movs r1, #0x11
	bl Proc_GotoLabel
	ldrh r1, [r5]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r5]
	ldr r0, _080A9490  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A947A
	movs r0, #0x6b
	bl m4aSongNumStart
_080A947A:
	adds r0, r4, #0
	movs r1, #0
	bl sub_80AB83C
	adds r0, r4, #0
	bl sub_80A88E0
_080A9488:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A9490: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A9494
sub_80A9494: @ 0x080A9494
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #5
	strb r0, [r1]
	adds r0, r5, #0
	bl sub_80A89E4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A94AE
	b _080A96C8
_080A94AE:
	adds r0, r5, #0
	adds r0, #0x36
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #0
	bne _080A9504
	ldr r0, _080A94D0  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080A94D4
	movs r1, #1
	negs r1, r1
	adds r0, r5, #0
	b _080A94E0
	.align 2, 0
_080A94D0: .4byte gKeyStatusPtr
_080A94D4:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080A9564
	adds r0, r5, #0
	movs r1, #1
_080A94E0:
	bl sub_80AB9FC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A9564
	ldr r0, _080A9500  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9564
	movs r0, #0x66
	bl m4aSongNumStart
	b _080A9564
	.align 2, 0
_080A9500: .4byte gUnknown_0202BCF0
_080A9504:
	ldr r0, _080A9534  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _080A953C
	cmp r1, #1
	beq _080A9564
	movs r0, #1
	strb r0, [r4]
	ldr r0, _080A9538  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A952C
	movs r0, #0x67
	bl m4aSongNumStart
_080A952C:
	adds r0, r5, #0
	bl sub_80A88E0
	b _080A9564
	.align 2, 0
_080A9534: .4byte gKeyStatusPtr
_080A9538: .4byte gUnknown_0202BCF0
_080A953C:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _080A9564
	cmp r1, #2
	beq _080A9564
	movs r0, #2
	strb r0, [r4]
	ldr r0, _080A9598  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A955E
	movs r0, #0x67
	bl m4aSongNumStart
_080A955E:
	adds r0, r5, #0
	bl sub_80A88E0
_080A9564:
	ldr r0, _080A959C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r1, #1
	ands r1, r2
	cmp r1, #0
	beq _080A9648
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #8
	beq _080A9614
	cmp r0, #8
	bgt _080A95A6
	cmp r0, #2
	beq _080A95BA
	cmp r0, #2
	bgt _080A95A0
	cmp r0, #1
	beq _080A95D8
	b _080A96C8
	.align 2, 0
_080A9598: .4byte gUnknown_0202BCF0
_080A959C: .4byte gKeyStatusPtr
_080A95A0:
	cmp r0, #4
	beq _080A9614
	b _080A96C8
_080A95A6:
	cmp r0, #0x40
	beq _080A9614
	cmp r0, #0x40
	bgt _080A95B4
	cmp r0, #0x10
	beq _080A95F8
	b _080A96C8
_080A95B4:
	cmp r0, #0x80
	beq _080A95C6
	b _080A96C8
_080A95BA:
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080A9614
	b _080A95D8
_080A95C6:
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _080A95D8
	adds r1, r5, #0
	adds r1, #0x44
	movs r0, #0xf0
	strh r0, [r1]
_080A95D8:
	ldr r0, _080A95F4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A95EA
	movs r0, #0x6a
	bl m4aSongNumStart
_080A95EA:
	adds r0, r5, #0
	bl sub_80A882C
	b _080A96C8
	.align 2, 0
_080A95F4: .4byte gUnknown_0202BCF0
_080A95F8:
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _080A9620
	ldr r0, _080A961C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9614
	movs r0, #0x6a
	bl m4aSongNumStart
_080A9614:
	adds r0, r5, #0
	bl sub_80A9290
	b _080A96C8
	.align 2, 0
_080A961C: .4byte gUnknown_0202BCF0
_080A9620:
	adds r0, r5, #0
	bl sub_80A9250
	adds r0, r5, #0
	movs r1, #6
	bl Proc_GotoLabel
	ldr r0, _080A9644  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A96C8
	movs r0, #0x60
	bl m4aSongNumStart
	b _080A96C8
	.align 2, 0
_080A9644: .4byte gUnknown_0202BCF0
_080A9648:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _080A96C8
	adds r0, r5, #0
	adds r0, #0x29
	strb r1, [r0]
	ldr r0, _080A9680  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9668
	movs r0, #0x6b
	bl m4aSongNumStart
_080A9668:
	ldrb r0, [r4]
	cmp r0, #0
	beq _080A9684
	adds r0, r5, #0
	movs r1, #0
	bl sub_80AB83C
	adds r0, r5, #0
	bl sub_80A88E0
	b _080A96C8
	.align 2, 0
_080A9680: .4byte gUnknown_0202BCF0
_080A9684:
	adds r2, r5, #0
	adds r2, #0x2d
	ldrb r1, [r2]
	adds r0, r1, #0
	cmp r0, #0xff
	beq _080A969C
	adds r0, r5, #0
	adds r0, #0x2c
	strb r1, [r0]
	movs r0, #0xff
	strb r0, [r2]
	b _080A96C8
_080A969C:
	adds r4, r5, #0
	adds r4, #0x42
	ldrh r1, [r4]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _080A96C0
	adds r0, r5, #0
	movs r1, #0x11
	bl Proc_GotoLabel
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	b _080A96C8
_080A96C0:
	adds r0, r5, #0
	movs r1, #4
	bl Proc_GotoLabel
_080A96C8:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A96D0
sub_80A96D0: @ 0x080A96D0
	push {lr}
	bl sub_80A9290
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A96DC
sub_80A96DC: @ 0x080A96DC
	adds r3, r0, #0
	adds r3, #0x2e
	movs r2, #0
	movs r1, #6
	strb r1, [r3]
	adds r0, #0x29
	strb r2, [r0]
	bx lr

	THUMB_FUNC_START sub_80A96EC
sub_80A96EC: @ 0x080A96EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r3, r7, #0
	adds r3, #0x29
	ldrb r0, [r3]
	cmp r0, #8
	bne _080A9764
	adds r4, r7, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	adds r1, r7, #0
	bl sub_80ABC14
	movs r0, #4
	adds r1, r7, #0
	bl sub_80ABC14
	ldrb r1, [r4]
	adds r0, r7, #0
	adds r0, #0x37
	adds r2, r0, r1
	ldrb r0, [r2]
	cmp r0, #0xff
	beq _080A9740
	lsls r0, r1, #0xb
	movs r1, #0xb4
	lsls r1, r1, #9
	adds r0, r0, r1
	ldr r1, _080A973C  @ 0x0001FFFF
	ands r0, r1
	lsrs r0, r0, #5
	ldrb r1, [r2]
	bl sub_8089624
	b _080A9756
	.align 2, 0
_080A973C: .4byte 0x0001FFFF
_080A9740:
	lsls r0, r1, #0xb
	movs r2, #0xb4
	lsls r2, r2, #9
	adds r0, r0, r2
	ldr r1, _080A9760  @ 0x0001FFFF
	ands r0, r1
	lsrs r0, r0, #5
	movs r1, #1
	negs r1, r1
	bl sub_8089624
_080A9756:
	ldrb r0, [r4]
	bl sub_80ABD88
	b _080A9828
	.align 2, 0
_080A9760: .4byte 0x0001FFFF
_080A9764:
	cmp r0, #0x20
	bne _080A97DA
	adds r0, r7, #0
	bl sub_80AB89C
	adds r0, r7, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #0x10
	bne _080A978E
	adds r0, r7, #0
	movs r1, #0x12
	bl Proc_GotoLabel
	movs r0, #0xc0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl ISuspectThisToBeMusicRelated_8002730
	b _080A9828
_080A978E:
	cmp r0, #0x40
	bne _080A979C
	adds r0, r7, #0
	movs r1, #0x11
	bl Proc_GotoLabel
	b _080A9828
_080A979C:
	adds r0, r7, #0
	bl sub_80ABA98
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080A9828
	adds r2, r7, #0
	adds r2, #0x2d
	ldrb r1, [r2]
	adds r0, r1, #0
	cmp r0, #0xff
	beq _080A97C0
	adds r0, r7, #0
	adds r0, #0x2c
	strb r1, [r0]
	movs r0, #0xff
	strb r0, [r2]
	b _080A97D0
_080A97C0:
	adds r4, r7, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	movs r1, #1
	movs r2, #1
	bl sub_80AB98C
	strb r0, [r4]
_080A97D0:
	adds r0, r7, #0
	movs r1, #5
	bl Proc_GotoLabel
	b _080A9828
_080A97DA:
	cmp r0, #0x30
	bne _080A9828
	adds r0, r7, #0
	adds r0, #0x2c
	movs r1, #0
	strb r1, [r0]
	adds r2, r7, #0
	adds r2, #0x2d
	movs r0, #0xff
	strb r0, [r2]
	strb r1, [r3]
	adds r0, r7, #0
	adds r0, #0x2b
	strb r1, [r0]
	adds r0, #5
	ldrb r0, [r0]
	bl sub_80A8844
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r7, #0
	adds r1, #0x42
	strh r0, [r1]
	ldr r0, _080A9824  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A981A
	movs r0, #0x6b
	bl m4aSongNumStart
_080A981A:
	adds r0, r7, #0
	movs r1, #4
	bl Proc_GotoLabel
	b _080A99AC
	.align 2, 0
_080A9824: .4byte gUnknown_0202BCF0
_080A9828:
	adds r0, r7, #0
	adds r0, #0x29
	ldrb r1, [r0]
	mov sl, r0
	cmp r1, #0x10
	bne _080A98A0
	ldr r4, _080A989C  @ gSinLookup
	movs r0, #0x80
	adds r0, r0, r4
	mov r9, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	str r0, [sp]
	adds r0, r1, #0
	adds r1, r6, #0
	b _080A9918
	.align 2, 0
_080A989C: .4byte gSinLookup
_080A98A0:
	cmp r1, #7
	bhi _080A9928
	ldr r4, _080A9924  @ gSinLookup
	movs r0, #0x80
	adds r0, r0, r4
	mov r9, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r6, #0x80
	lsls r6, r6, #1
	adds r1, r6, #0
	bl Div
	mov r8, r0
	mov r2, r8
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	mov r8, r2
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	mov r2, sl
	ldrb r1, [r2]
	lsls r1, r1, #5
	subs r1, r6, r1
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	adds r1, r6, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, r9
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrb r1, [r2]
	lsls r1, r1, #5
	subs r6, r6, r1
	adds r1, r6, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	str r0, [sp]
	adds r0, r1, #0
	mov r1, r8
_080A9918:
	adds r2, r5, #0
	adds r3, r4, #0
	bl WriteOAMRotScaleData
	b _080A99A4
	.align 2, 0
_080A9924: .4byte gSinLookup
_080A9928:
	cmp r1, #0xf
	bhi _080A99A4
	ldr r4, _080A99BC  @ gSinLookup
	movs r0, #0x80
	adds r0, r0, r4
	mov r9, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	mov r2, sl
	ldrb r1, [r2]
	lsls r1, r1, #5
	subs r1, #0xe0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, r9
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrb r1, [r2]
	lsls r1, r1, #5
	subs r1, #0xe0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	str r0, [sp]
	adds r0, r1, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl WriteOAMRotScaleData
_080A99A4:
	mov r1, sl
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_080A99AC:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A99BC: .4byte gSinLookup

	THUMB_FUNC_START sub_80A99C0
sub_80A99C0: @ 0x080A99C0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #3
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0xe
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	movs r2, #0x24
	negs r2, r2
	adds r1, r2, #0
	subs r1, r1, r0
	adds r0, r5, #0
	adds r0, #0x2f
	strb r1, [r0]
	ldrb r0, [r4]
	cmp r0, #0xe
	bne _080A9A02
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080A9A02:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A9A08
sub_80A9A08: @ 0x080A9A08
	push {lr}
	adds r0, #0x35
	ldrb r0, [r0]
	bl sub_80ABF74
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A9A18
sub_80A9A18: @ 0x080A9A18
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #4
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0xe
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	adds r1, r5, #0
	adds r1, #0x2f
	strb r0, [r1]
	ldrb r0, [r4]
	cmp r0, #0xe
	bne _080A9A5A
	ldr r0, _080A9A60  @ gUnknown_08A2812C
	ldr r1, _080A9A64  @ 0x06014000
	bl CopyDataWithPossibleUncomp
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080A9A5A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080A9A60: .4byte gUnknown_08A2812C
_080A9A64: .4byte 0x06014000

	THUMB_FUNC_START sub_80A9A68
sub_80A9A68: @ 0x080A9A68
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #8
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0xe
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	movs r1, #0xdc
	subs r1, r1, r0
	adds r0, r5, #0
	adds r0, #0x46
	strh r1, [r0]
	ldrb r0, [r4]
	cmp r0, #0xe
	bne _080A9AA8
	adds r0, r5, #0
	movs r1, #0xa
	bl Proc_GotoLabel
_080A9AA8:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A9AB0
sub_80A9AB0: @ 0x080A9AB0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #8
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0xe
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	adds r1, r5, #0
	adds r1, #0x46
	strh r0, [r1]
	ldrb r0, [r4]
	cmp r0, #0xe
	bne _080A9AEC
	adds r0, r5, #0
	movs r1, #2
	bl Proc_GotoLabel
_080A9AEC:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A9AF4
sub_80A9AF4: @ 0x080A9AF4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0xc
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0xe
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	movs r2, #0xdc
	lsls r2, r2, #1
	adds r1, r2, #0
	subs r1, r1, r0
	adds r0, r5, #0
	adds r0, #0x46
	strh r1, [r0]
	adds r1, #0x24
	subs r0, #0x17
	strb r1, [r0]
	ldrb r0, [r4]
	cmp r0, #0xe
	bne _080A9B3E
	adds r0, r5, #0
	movs r1, #0xb
	bl Proc_GotoLabel
_080A9B3E:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A9B44
sub_80A9B44: @ 0x080A9B44
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0xd
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0xe
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	adds r0, #0xdc
	adds r1, r5, #0
	adds r1, #0x46
	strh r0, [r1]
	adds r0, #0x24
	subs r1, #0x17
	strb r0, [r1]
	ldrb r0, [r4]
	cmp r0, #0xe
	bne _080A9B88
	adds r0, r5, #0
	movs r1, #0xa
	bl Proc_GotoLabel
_080A9B88:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80A9B90
sub_80A9B90: @ 0x080A9B90
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r7, [r2]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0xa
	strb r0, [r1]
	ldr r0, _080A9BD4  @ gKeyStatusPtr
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _080A9BD8
	ldrb r0, [r2]
	cmp r0, #0
	bne _080A9BCE
	ldrh r1, [r3, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080A9C02
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
_080A9BCE:
	subs r0, #1
	strb r0, [r2]
	b _080A9C02
	.align 2, 0
_080A9BD4: .4byte gKeyStatusPtr
_080A9BD8:
	movs r6, #0x80
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080A9C02
	ldrb r1, [r2]
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _080A9BF6
	adds r0, r1, #1
	strb r0, [r2]
	b _080A9C02
_080A9BF6:
	ldrh r1, [r3, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080A9C02
	strb r5, [r2]
_080A9C02:
	adds r0, r4, #0
	adds r0, #0x34
	adds r5, r0, #0
	ldrb r0, [r5]
	cmp r7, r0
	beq _080A9C20
	ldr r0, _080A9C70  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9C20
	movs r0, #0x66
	bl m4aSongNumStart
_080A9C20:
	ldr r0, _080A9C74  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r1, #1
	ands r1, r2
	cmp r1, #0
	beq _080A9CEC
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	ldrb r1, [r5]
	bl sub_80A8844
	adds r5, r4, #0
	adds r5, #0x35
	movs r6, #0
	strb r0, [r5]
	ldr r0, _080A9C70  @ gUnknown_0202BCF0
	adds r7, r0, #0
	adds r7, #0x41
	ldrb r0, [r7]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9C56
	movs r0, #0x6a
	bl m4aSongNumStart
_080A9C56:
	adds r0, r4, #0
	adds r0, #0x29
	strb r6, [r0]
	ldrb r0, [r5]
	cmp r0, #0x10
	beq _080A9CA6
	cmp r0, #0x10
	bgt _080A9C78
	cmp r0, #2
	beq _080A9C82
	cmp r0, #4
	beq _080A9C8C
	b _080A9CDC
	.align 2, 0
_080A9C70: .4byte gUnknown_0202BCF0
_080A9C74: .4byte gKeyStatusPtr
_080A9C78:
	cmp r0, #0x20
	beq _080A9CA6
	cmp r0, #0x40
	bne _080A9CDC
	b _080A9CA6
_080A9C82:
	str r6, [sp]
	movs r0, #0
	movs r1, #0xc0
	movs r2, #0
	b _080A9C96
_080A9C8C:
	movs r2, #0x80
	lsls r2, r2, #1
	str r6, [sp]
	movs r0, #9
	movs r1, #0xc0
_080A9C96:
	movs r3, #0x18
	bl sub_80029E8
	adds r0, r4, #0
	movs r1, #0xe
	bl Proc_GotoLabel
	b _080A9D14
_080A9CA6:
	bl sub_80A4DA0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #1
	movs r2, #1
	bl sub_80AB98C
	adds r1, r4, #0
	adds r1, #0x2c
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #0
	bl sub_80A9D20
	ldrb r0, [r7]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9CD2
	movs r0, #0x6a
	bl m4aSongNumStart
_080A9CD2:
	adds r0, r4, #0
	movs r1, #0xc
	bl Proc_GotoLabel
	b _080A9D14
_080A9CDC:
	adds r0, r4, #0
	bl sub_80A882C
	adds r0, r4, #0
	movs r1, #0x12
	bl Proc_GotoLabel
	b _080A9D14
_080A9CEC:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _080A9D14
	adds r0, r4, #0
	adds r0, #0x29
	strb r1, [r0]
	adds r0, r4, #0
	movs r1, #9
	bl Proc_GotoLabel
	ldr r0, _080A9D1C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9D14
	movs r0, #0x6b
	bl m4aSongNumStart
_080A9D14:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080A9D1C: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A9D20
sub_80A9D20: @ 0x080A9D20
	push {r4, lr}
	adds r3, r0, #0
	adds r2, r3, #0
	adds r2, #0x2c
	ldrb r4, [r2]
	cmp r4, #2
	bls _080A9D32
	movs r0, #0
	strb r0, [r2]
_080A9D32:
	cmp r1, #0
	bne _080A9D3A
_080A9D36:
	movs r0, #1
	b _080A9D7E
_080A9D3A:
	cmp r1, #0
	ble _080A9D4C
	ldrb r0, [r2]
	cmp r0, #1
	bhi _080A9D48
	adds r0, #1
	b _080A9D58
_080A9D48:
	movs r0, #0
	b _080A9D58
_080A9D4C:
	ldrb r0, [r2]
	cmp r0, #0
	bne _080A9D56
	movs r0, #2
	b _080A9D58
_080A9D56:
	subs r0, #1
_080A9D58:
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	cmp r4, r0
	beq _080A9D7C
	ldr r0, _080A9D78  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9D36
	movs r0, #0x66
	bl m4aSongNumStart
	b _080A9D36
	.align 2, 0
_080A9D78: .4byte gUnknown_0202BCF0
_080A9D7C:
	movs r0, #0
_080A9D7E:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80A9D84
sub_80A9D84: @ 0x080A9D84
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A9DB4  @ 0x06014000
	movs r1, #9
	bl LoadDialogueBoxGfx
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	ldr r2, [r4, #0x58]
	bl StartHelpBoxExt_Unk
	ldr r0, _080A9DB8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9DAC
	movs r0, #0x70
	bl m4aSongNumStart
_080A9DAC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A9DB4: .4byte 0x06014000
_080A9DB8: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A9DBC
sub_80A9DBC: @ 0x080A9DBC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080A9DF0  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	ldr r0, _080A9DF4  @ 0x00000103
	ands r0, r1
	cmp r0, #0
	beq _080A9DEA
	ldr r0, _080A9DF8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9DE0
	movs r0, #0x71
	bl m4aSongNumStart
_080A9DE0:
	bl CloseHelpBox
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080A9DEA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080A9DF0: .4byte gKeyStatusPtr
_080A9DF4: .4byte 0x00000103
_080A9DF8: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80A9DFC
sub_80A9DFC: @ 0x080A9DFC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	adds r1, r3, #0
	ldr r0, _080A9E18  @ gUnknown_08A20068
	bl Proc_CreateBlockingChild
	str r4, [r0, #0x58]
	str r5, [r0, #0x2c]
	str r6, [r0, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080A9E18: .4byte gUnknown_08A20068

	THUMB_FUNC_START sub_80A9E1C
sub_80A9E1C: @ 0x080A9E1C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #5
	strb r0, [r1]
	adds r3, r4, #0
	adds r3, #0x36
	ldrb r1, [r3]
	cmp r1, #0
	bne _080A9E62
	ldr r0, _080A9E4C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080A9E50
	movs r1, #1
	negs r1, r1
	adds r0, r4, #0
	bl sub_80A9D20
	b _080A9EB6
	.align 2, 0
_080A9E4C: .4byte gKeyStatusPtr
_080A9E50:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080A9EB6
	adds r0, r4, #0
	movs r1, #1
	bl sub_80A9D20
	b _080A9EB6
_080A9E62:
	ldr r0, _080A9E8C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _080A9E94
	cmp r1, #1
	beq _080A9EB6
	movs r0, #1
	strb r0, [r3]
	ldr r0, _080A9E90  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9EB6
	movs r0, #0x67
	bl m4aSongNumStart
	b _080A9EB6
	.align 2, 0
_080A9E8C: .4byte gKeyStatusPtr
_080A9E90: .4byte gUnknown_0202BCF0
_080A9E94:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _080A9EB6
	cmp r1, #2
	beq _080A9EB6
	movs r0, #2
	strb r0, [r3]
	ldr r0, _080A9EDC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9EB6
	movs r0, #0x67
	bl m4aSongNumStart
_080A9EB6:
	ldr r0, _080A9EE0  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r3, #1
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne _080A9EC8
	b _080A9FBC
_080A9EC8:
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #0x20
	beq _080A9F24
	cmp r0, #0x20
	bgt _080A9EE4
	cmp r0, #0x10
	beq _080A9F5C
	b _080AA00A
	.align 2, 0
_080A9EDC: .4byte gUnknown_0202BCF0
_080A9EE0: .4byte gKeyStatusPtr
_080A9EE4:
	cmp r0, #0x40
	beq _080A9EEA
	b _080AA00A
_080A9EEA:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	adds r0, #0xe
	adds r0, r0, r2
	ldrb r1, [r0]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _080A9F18
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080A9FA0
	adds r0, r2, #0
	bl LoadGame
	adds r0, r4, #0
	movs r1, #0xe
	bl Proc_GotoLabel
	b _080A9F86
_080A9F18:
	ldr r2, _080A9F20  @ 0x00000892
	movs r0, #0x40
	movs r1, #0x30
	b _080A9FAE
	.align 2, 0
_080A9F20: .4byte 0x00000892
_080A9F24:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	adds r0, #0xe
	adds r0, r0, r2
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080A9F52
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080A9FA0
	adds r0, r2, #0
	bl LoadGame
	adds r0, r4, #0
	movs r1, #0xe
	bl Proc_GotoLabel
	b _080A9F86
_080A9F52:
	ldr r2, _080A9F58  @ 0x00000891
	b _080A9FAA
	.align 2, 0
_080A9F58: .4byte 0x00000891
_080A9F5C:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	adds r0, #0xe
	adds r0, r0, r2
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080A9FA8
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080A9FA0
	adds r0, r2, #0
	bl LoadGame
	adds r0, r4, #0
	bl sub_80A882C
_080A9F86:
	ldr r0, _080A9F9C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AA00A
	movs r0, #0x6a
	bl m4aSongNumStart
	b _080AA00A
	.align 2, 0
_080A9F9C: .4byte gUnknown_0202BCF0
_080A9FA0:
	adds r0, r4, #0
	bl sub_80A9290
	b _080AA00A
_080A9FA8:
	ldr r2, _080A9FB8  @ 0x00000895
_080A9FAA:
	movs r0, #0x2e
	movs r1, #0x38
_080A9FAE:
	adds r3, r4, #0
	bl sub_80A9DFC
	b _080AA00A
	.align 2, 0
_080A9FB8: .4byte 0x00000895
_080A9FBC:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080AA00A
	ldr r0, _080A9FF0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080A9FD6
	movs r0, #0x6b
	bl m4aSongNumStart
_080A9FD6:
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r5, [r0]
	cmp r5, #0
	beq _080A9FF4
	adds r0, r4, #0
	movs r1, #0
	bl sub_80AB83C
	adds r0, r4, #0
	bl sub_80A88E0
	b _080AA00A
	.align 2, 0
_080A9FF0: .4byte gUnknown_0202BCF0
_080A9FF4:
	ldr r0, _080AA010  @ gUnknown_08A2812C
	ldr r1, _080AA014  @ 0x06014000
	bl CopyDataWithPossibleUncomp
	adds r0, r4, #0
	adds r0, #0x29
	strb r5, [r0]
	adds r0, r4, #0
	movs r1, #0xd
	bl Proc_GotoLabel
_080AA00A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AA010: .4byte gUnknown_08A2812C
_080AA014: .4byte 0x06014000

	THUMB_FUNC_START sub_80AA018
sub_80AA018: @ 0x080AA018
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #1
	movs r2, #2
	bl sub_80ABBB0
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AA030
sub_80AA030: @ 0x080AA030
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x60]
	cmp r0, #0
	beq _080AA03E
	bl APProc_Delete
_080AA03E:
	ldr r0, [r4, #0x58]
	bl Proc_Delete
	movs r0, #0
	bl SetPrimaryHBlankHandler
	adds r5, r4, #0
	adds r5, #0x42
	ldrh r2, [r5]
	cmp r2, #0x20
	bne _080AA084
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #1
	beq _080AA064
	cmp r0, #0x10
	beq _080AA06C
	b _080AA0FA
_080AA064:
	movs r0, #6
	bl SetNextGameActionId
	b _080AA0FA
_080AA06C:
	movs r0, #0xc
	bl SetNextGameActionId
	ldr r2, _080AA080  @ gUnknown_0202BCF0
	ldrb r1, [r2, #0x14]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2, #0x14]
	b _080AA0FA
	.align 2, 0
_080AA080: .4byte gUnknown_0202BCF0
_080AA084:
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	bne _080AA0FA
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	beq _080AA0BC
	movs r0, #0xc0
	movs r2, #0x10
	movs r3, #0
	bl ISuspectThisToBeMusicRelated_8002730
	ldrh r1, [r5]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080AA0B4
	movs r0, #0xa
	bl SetNextGameActionId
	b _080AA0FA
_080AA0B4:
	movs r0, #5
	bl SetNextGameActionId
	b _080AA0FA
_080AA0BC:
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _080AA0D2
	movs r0, #3
	bl LoadSuspendedGame
	movs r0, #4
	bl SetNextGameActionId
	b _080AA0FA
_080AA0D2:
	movs r0, #0x82
	ands r0, r2
	cmp r0, #0
	beq _080AA0EC
	adds r4, #0x2c
	ldrb r0, [r4]
	bl LoadGame
	ldrb r0, [r4]
	adds r0, #1
	bl SetNextGameActionId
	b _080AA0FA
_080AA0EC:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _080AA0FA
	movs r0, #0
	bl SetNextGameActionId
_080AA0FA:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AA100
sub_80AA100: @ 0x080AA100
	push {lr}
	sub sp, #4
	str r0, [sp]
	movs r0, #0
	movs r1, #0xc0
	movs r2, #0
	movs r3, #0x18
	bl sub_80029E8
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AA118
sub_80AA118: @ 0x080AA118
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #7
	bl SetNextGameActionId
	ldr r4, _080AA140  @ gUnknown_0202BCF0
	ldrb r1, [r4, #0x14]
	movs r0, #0x80
	orrs r0, r1
	strb r0, [r4, #0x14]
	bl sub_80A6C8C
	movs r0, #0x7f
	strb r0, [r4, #0xe]
	ldr r0, [r5, #0x14]
	bl Proc_Delete
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AA140: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80AA144
sub_80AA144: @ 0x080AA144
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AA154  @ gUnknown_08A20098
	bl Proc_CreateBlockingChild
	pop {r0}
	bx r0
	.align 2, 0
_080AA154: .4byte gUnknown_08A20098

	THUMB_FUNC_START sub_80AA158
sub_80AA158: @ 0x080AA158
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x42
	movs r0, #0x20
	strh r0, [r1]
	ldr r0, [r4, #0x58]
	bl Proc_Delete
	movs r0, #0
	bl SetPrimaryHBlankHandler
	ldr r0, [r4, #0x60]
	cmp r0, #0
	beq _080AA17A
	bl APProc_Delete
_080AA17A:
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #4
	beq _080AA1AE
	cmp r0, #4
	bgt _080AA18E
	cmp r0, #2
	beq _080AA1A6
	b _080AA1B4
_080AA18E:
	cmp r0, #0x20
	beq _080AA19E
	cmp r0, #0x40
	bne _080AA1B4
	adds r0, r4, #0
	bl sub_80AA144
	b _080AA1B4
_080AA19E:
	adds r0, r4, #0
	bl sub_80B1688
	b _080AA1B4
_080AA1A6:
	adds r0, r4, #0
	bl sub_80AFF1C
	b _080AA1B4
_080AA1AE:
	adds r0, r4, #0
	bl sub_80A1984
_080AA1B4:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AA1BC
sub_80AA1BC: @ 0x080AA1BC
	push {lr}
	adds r1, r0, #0
	adds r1, #0x35
	ldrb r1, [r1]
	cmp r1, #4
	beq _080AA1E2
	cmp r1, #4
	bgt _080AA1D2
	cmp r1, #2
	beq _080AA1E2
	b _080AA1E8
_080AA1D2:
	cmp r1, #0x10
	beq _080AA1DA
	cmp r1, #0x20
	bne _080AA1E8
_080AA1DA:
	movs r1, #0xb
	bl Proc_GotoLabel
	b _080AA1E8
_080AA1E2:
	movs r1, #0xa
	bl Proc_GotoLabel
_080AA1E8:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AA1EC
sub_80AA1EC: @ 0x080AA1EC
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	ldr r2, _080AA244  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r3, r2, #0
	adds r3, #0x34
	ldrb r0, [r3]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3]
	adds r2, #0x36
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	bx lr
	.align 2, 0
_080AA244: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80AA248
sub_80AA248: @ 0x080AA248
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x29
	ldrb r0, [r1]
	adds r4, r0, #1
	strb r4, [r1]
	ldrb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	muls r0, r1, r0
	cmp r0, #0
	bge _080AA26A
	adds r0, #0xff
_080AA26A:
	asrs r0, r0, #8
	movs r2, #0x50
	subs r2, r2, r0
	ldr r3, _080AA2A4  @ gLCDControlBuffer
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	movs r0, #0x50
	subs r0, r0, r2
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r2, #0x50
	adds r0, r3, #0
	adds r0, #0x30
	strb r2, [r0]
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x10
	bne _080AA29E
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080AA29E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AA2A4: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80AA2A8
sub_80AA2A8: @ 0x080AA2A8
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x29
	ldrb r0, [r1]
	adds r4, r0, #1
	strb r4, [r1]
	ldrb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	muls r0, r1, r0
	cmp r0, #0
	bge _080AA2CA
	adds r0, #0xff
_080AA2CA:
	asrs r0, r0, #8
	movs r2, #0x50
	subs r2, r2, r0
	ldr r3, _080AA308  @ gLCDControlBuffer
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r1, #1
	movs r0, #0xf0
	strb r0, [r1]
	movs r1, #0x60
	negs r1, r1
	adds r0, r1, #0
	subs r0, r0, r2
	adds r1, r3, #0
	adds r1, #0x30
	strb r0, [r1]
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x10
	bne _080AA302
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080AA302:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AA308: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80AA30C
sub_80AA30C: @ 0x080AA30C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _080AA408  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080AA40C  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	bl sub_8003D20
	bl LoadUiFrameGraphics
	bl LoadObjUIGfx
	ldr r0, _080AA410  @ gUnknown_08A25DCC
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r5, #0
	adds r2, r5, #0
	bl CopyToPaletteBuffer
	ldr r4, _080AA414  @ gUnknown_08A21658
	movs r0, #3
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080AA418  @ gBG3TilemapBuffer
	ldr r1, _080AA41C  @ gUnknown_08A25ECC
	movs r2, #0x80
	lsls r2, r2, #8
	bl CallARM_FillTileRect
	ldr r0, _080AA420  @ gUnknown_08A268D8
	movs r1, #0xe0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r4, _080AA424  @ gUnknown_08A26380
	movs r0, #3
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r0, _080AA428  @ 0x06004C00
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080AA42C  @ gUnknown_08A268F8
	ldr r4, _080AA430  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080AA434  @ gBG2TilemapBuffer
	ldr r2, _080AA438  @ 0x00007260
	adds r1, r4, #0
	bl CallARM_FillTileRect
	ldr r0, _080AA43C  @ gUnknown_08A26A74
	ldr r1, _080AA440  @ 0x06010800
	bl CopyDataWithPossibleUncomp
	ldr r0, _080AA444  @ gUnknown_08A27F68
	movs r1, #0x90
	lsls r1, r1, #2
	adds r2, r5, #0
	bl CopyToPaletteBuffer
	ldr r0, _080AA448  @ gUnknown_08A295B4
	movs r1, #0x40
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080AA44C  @ gUnknown_02022AE8
	adds r1, r0, #0
	subs r1, #0x20
	movs r2, #1
	bl sub_80AA790
	ldr r0, _080AA450  @ gUnknown_08A2812C
	ldr r1, _080AA454  @ 0x06014000
	bl CopyDataWithPossibleUncomp
	bl sub_80AB794
	adds r0, r6, #0
	bl sub_80A8A9C
	adds r0, r6, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	bl sub_80ABD88
	movs r0, #0xc
	bl Proc_UnblockEachWithMark
	movs r0, #0xd
	bl Proc_UnblockEachWithMark
	movs r0, #3
	bl BG_EnableSyncByMask
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #3
	beq _080AA3FE
	adds r1, r6, #0
	adds r1, #0x2e
	movs r0, #5
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xdc
	strb r0, [r1]
_080AA3FE:
	bl EnablePaletteSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AA408: .4byte gBG0TilemapBuffer
_080AA40C: .4byte gBG1TilemapBuffer
_080AA410: .4byte gUnknown_08A25DCC
_080AA414: .4byte gUnknown_08A21658
_080AA418: .4byte gBG3TilemapBuffer
_080AA41C: .4byte gUnknown_08A25ECC
_080AA420: .4byte gUnknown_08A268D8
_080AA424: .4byte gUnknown_08A26380
_080AA428: .4byte 0x06004C00
_080AA42C: .4byte gUnknown_08A268F8
_080AA430: .4byte gUnknown_02020188
_080AA434: .4byte gBG2TilemapBuffer
_080AA438: .4byte 0x00007260
_080AA43C: .4byte gUnknown_08A26A74
_080AA440: .4byte 0x06010800
_080AA444: .4byte gUnknown_08A27F68
_080AA448: .4byte gUnknown_08A295B4
_080AA44C: .4byte gUnknown_02022AE8
_080AA450: .4byte gUnknown_08A2812C
_080AA454: .4byte 0x06014000

	THUMB_FUNC_START sub_80AA458
sub_80AA458: @ 0x080AA458
	push {lr}
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #3
	bne _080AA46E
	adds r0, r1, #0
	movs r1, #2
	bl Proc_GotoLabel
	b _080AA476
_080AA46E:
	adds r0, r1, #0
	movs r1, #5
	bl Proc_GotoLabel
_080AA476:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AA47C
sub_80AA47C: @ 0x080AA47C
	push {lr}
	adds r3, r0, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne _080AA496
	movs r0, #0xc0
	movs r1, #8
	movs r2, #8
	bl StartHelpPromptSprite
_080AA496:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AA49C
sub_80AA49C: @ 0x080AA49C
	push {lr}
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #0x20
	bne _080AA4AE
	adds r0, r1, #0
	bl sub_80AA6EC
_080AA4AE:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AA4B4
sub_80AA4B4: @ 0x080AA4B4
	push {lr}
	bl EndHelpPromptSprite
	pop {r0}
	bx r0

	THUMB_FUNC_START Make6C_savemenu
Make6C_savemenu: @ 0x080AA4C0
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AA4F0  @ gUnknown_08A200B8
	bl Proc_CreateBlockingChild
	adds r3, r0, #0
	adds r3, #0x42
	movs r2, #0
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r3]
	adds r0, #0x35
	strb r2, [r0]
	ldr r2, _080AA4F4  @ gUnknown_0202BCF0
	adds r2, #0x40
	ldrb r1, [r2]
	movs r0, #0x61
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
_080AA4F0: .4byte gUnknown_08A200B8
_080AA4F4: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80AA4F8
sub_80AA4F8: @ 0x080AA4F8
	push {lr}
	adds r2, r0, #0
	ldr r0, _080AA514  @ gUnknown_0202BCB0
	ldrb r1, [r0, #4]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne _080AA510
	adds r0, r2, #0
	movs r1, #0x14
	bl Proc_GotoLabel
_080AA510:
	pop {r0}
	bx r0
	.align 2, 0
_080AA514: .4byte gUnknown_0202BCB0

	THUMB_FUNC_START Make6C_savemenu2
Make6C_savemenu2: @ 0x080AA518
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AA528  @ gUnknown_08A203A8
	bl Proc_CreateBlockingChild
	pop {r0}
	bx r0
	.align 2, 0
_080AA528: .4byte gUnknown_08A203A8

	THUMB_FUNC_START savemenu_SetDifficultyChoice
savemenu_SetDifficultyChoice: @ 0x080AA52C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080AA54C  @ gUnknown_08A200B8
	bl Proc_Find
	cmp r0, #0
	beq _080AA546
	adds r1, r0, #0
	adds r1, #0x2a
	strb r4, [r1]
	adds r0, #0x3d
	strb r5, [r0]
_080AA546:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AA54C: .4byte gUnknown_08A200B8

	THUMB_FUNC_START sub_80AA550
sub_80AA550: @ 0x080AA550
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r4, _080AA5F0  @ gUnknown_08A204B8
	ldr r1, [r4]
	ldr r2, _080AA5F4  @ 0x010000A2
	mov r0, sp
	bl CpuSet
	ldr r0, [r4]
	bl sub_80A38F4
	cmp r0, #0
	beq _080AA5E6
	movs r0, #0
	str r0, [r5, #0x5c]
	str r0, [r5, #0x58]
	mov r8, r4
	movs r6, #0
	movs r0, #0xfc
	mov r9, r0
	movs r7, #0xf
_080AA588:
	mov r1, r8
	ldr r0, [r1]
	adds r2, r0, r6
	ldrb r0, [r2]
	movs r4, #3
	ands r4, r0
	cmp r4, #1
	bne _080AA5D2
	ldrb r0, [r2, #1]
	cmp r0, #3
	bne _080AA5B2
	str r4, [r5, #0x58]
	ldrb r1, [r2]
	mov r0, r9
	ands r0, r1
	adds r0, #2
	strb r0, [r2]
	movs r0, #0
	movs r1, #0x75
	bl sub_80A3F08
_080AA5B2:
	mov r1, r8
	ldr r0, [r1]
	adds r2, r0, r6
	ldrb r0, [r2, #1]
	cmp r0, #4
	bne _080AA5D2
	str r4, [r5, #0x5c]
	ldrb r1, [r2]
	mov r0, r9
	ands r0, r1
	adds r0, #2
	strb r0, [r2]
	movs r0, #0
	movs r1, #0x76
	bl sub_80A3F08
_080AA5D2:
	adds r6, #0x14
	subs r7, #1
	cmp r7, #0
	bge _080AA588
	ldr r0, [r5, #0x58]
	cmp r0, #0
	bne _080AA5F8
	ldr r0, [r5, #0x5c]
	cmp r0, #0
	bne _080AA5F8
_080AA5E6:
	adds r0, r5, #0
	movs r1, #0xa
	bl Proc_GotoLabel
	b _080AA600
	.align 2, 0
_080AA5F0: .4byte gUnknown_08A204B8
_080AA5F4: .4byte 0x010000A2
_080AA5F8:
	ldr r0, _080AA610  @ 0x06014000
	movs r1, #9
	bl LoadDialogueBoxGfx
_080AA600:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AA610: .4byte 0x06014000

	THUMB_FUNC_START sub_80AA614
sub_80AA614: @ 0x080AA614
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x58]
	cmp r0, #0
	beq _080AA64C
	adds r1, #0x4c
	movs r0, #0
	strh r0, [r1]
	ldr r2, _080AA644  @ 0x00000893
	movs r0, #0x40
	movs r1, #0x30
	bl StartHelpBoxExt_Unk
	ldr r0, _080AA648  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AA654
	movs r0, #0x5b
	bl m4aSongNumStart
	b _080AA654
	.align 2, 0
_080AA644: .4byte 0x00000893
_080AA648: .4byte gUnknown_0202BCF0
_080AA64C:
	adds r0, r1, #0
	movs r1, #0
	bl Proc_GotoLabel
_080AA654:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AA658
sub_80AA658: @ 0x080AA658
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x5c]
	cmp r0, #0
	beq _080AA690
	adds r1, #0x4c
	movs r0, #0
	strh r0, [r1]
	ldr r2, _080AA688  @ 0x00000894
	movs r0, #0x40
	movs r1, #0x30
	bl StartHelpBoxExt_Unk
	ldr r0, _080AA68C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AA698
	movs r0, #0x5b
	bl m4aSongNumStart
	b _080AA698
	.align 2, 0
_080AA688: .4byte 0x00000894
_080AA68C: .4byte gUnknown_0202BCF0
_080AA690:
	adds r0, r1, #0
	movs r1, #1
	bl Proc_GotoLabel
_080AA698:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AA69C
sub_80AA69C: @ 0x080AA69C
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x4c
	ldrh r2, [r1]
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0x1e
	ble _080AA6CC
	ldr r0, _080AA6C8  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xb
	ands r0, r1
	cmp r0, #0
	beq _080AA6D0
	bl CloseHelpBox
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080AA6D0
	.align 2, 0
_080AA6C8: .4byte gKeyStatusPtr
_080AA6CC:
	adds r0, r2, #1
	strh r0, [r1]
_080AA6D0:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AA6D8
sub_80AA6D8: @ 0x080AA6D8
	push {lr}
	ldr r0, _080AA6E8  @ gUnknown_08A204B8
	ldr r0, [r0]
	bl sub_80A3950
	pop {r0}
	bx r0
	.align 2, 0
_080AA6E8: .4byte gUnknown_08A204B8

	THUMB_FUNC_START sub_80AA6EC
sub_80AA6EC: @ 0x080AA6EC
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AA6FC  @ gUnknown_08A204BC
	bl Proc_CreateBlockingChild
	pop {r0}
	bx r0
	.align 2, 0
_080AA6FC: .4byte gUnknown_08A204BC

	THUMB_FUNC_START sub_80AA700
sub_80AA700: @ 0x080AA700
	ldr r1, _080AA714  @ gUnknown_0203EF64
	movs r0, #0
	strb r0, [r1]
	movs r0, #0xff
	strb r0, [r1, #1]
	movs r0, #1
	negs r0, r0
	strb r0, [r1, #2]
	bx lr
	.align 2, 0
_080AA714: .4byte gUnknown_0203EF64

	THUMB_FUNC_START sub_80AA718
sub_80AA718: @ 0x080AA718
	push {lr}
	ldr r1, _080AA734  @ gUnknown_0203EF64
	ldrb r0, [r1]
	cmp r0, #0
	beq _080AA73C
	ldr r2, _080AA738  @ gCharacterData
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r2
	ldrh r0, [r0]
	bl GetStringFromIndex
	b _080AA73E
	.align 2, 0
_080AA734: .4byte gUnknown_0203EF64
_080AA738: .4byte gCharacterData
_080AA73C:
	movs r0, #0
_080AA73E:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AA744
sub_80AA744: @ 0x080AA744
	push {lr}
	ldr r1, _080AA75C  @ gUnknown_0203EF64
	ldrb r0, [r1]
	cmp r0, #0
	beq _080AA756
	movs r0, #1
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _080AA760
_080AA756:
	movs r0, #1
	negs r0, r0
	b _080AA764
	.align 2, 0
_080AA75C: .4byte gUnknown_0203EF64
_080AA760:
	movs r0, #1
	ldrsb r0, [r1, r0]
_080AA764:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AA768
sub_80AA768: @ 0x080AA768
	push {lr}
	ldr r1, _080AA780  @ gUnknown_0203EF64
	ldrb r0, [r1]
	cmp r0, #0
	beq _080AA77A
	movs r0, #2
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _080AA784
_080AA77A:
	movs r0, #0
	b _080AA78C
	.align 2, 0
_080AA780: .4byte gUnknown_0203EF64
_080AA784:
	movs r0, #2
	ldrsb r0, [r1, r0]
	bl sub_80BBA28
_080AA78C:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AA790
sub_80AA790: @ 0x080AA790
	push {lr}
	lsls r2, r2, #4
	cmp r2, #0
	ble _080AA7A8
	adds r3, r0, #0
_080AA79A:
	ldrh r0, [r3]
	strh r0, [r1]
	adds r3, #2
	adds r1, #2
	subs r2, #1
	cmp r2, #0
	bne _080AA79A
_080AA7A8:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AA7AC
sub_80AA7AC: @ 0x080AA7AC
	push {r4, r5, lr}
	movs r2, #0x3f
	ands r2, r0
	asrs r2, r2, #2
	ldr r4, _080AA7DC  @ gPaletteBuffer
	lsls r2, r2, #1
	ldr r0, _080AA7E0  @ gUnknown_08A28088
	adds r2, r2, r0
	ldrh r3, [r2]
	ldr r5, _080AA7E4  @ 0x00000222
	adds r0, r4, r5
	strh r3, [r0]
	lsls r1, r1, #6
	ldr r0, _080AA7E8  @ 0x00000342
	adds r1, r1, r0
	adds r1, r1, r4
	ldrh r0, [r2]
	strh r0, [r1]
	bl EnablePaletteSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AA7DC: .4byte gPaletteBuffer
_080AA7E0: .4byte gUnknown_08A28088
_080AA7E4: .4byte 0x00000222
_080AA7E8: .4byte 0x00000342

	THUMB_FUNC_START sub_80AA7EC
sub_80AA7EC: @ 0x080AA7EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	ldr r4, [r0, #0x14]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r0, r0, #5
	movs r1, #0xdc
	bl __divsi3
	movs r1, #0x20
	subs r1, r1, r0
	lsls r1, r1, #0x18
	movs r0, #0x92
	lsls r0, r0, #0x18
	adds r1, r1, r0
	lsrs r1, r1, #0x18
	mov r9, r1
	movs r1, #0x8f
	mov r8, r1
	adds r0, r4, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #1
	bne _080AA83A
	ldr r0, [r4, #0x54]
	mov r4, sp
	adds r4, #6
	add r5, sp, #8
	add r1, sp, #4
	adds r2, r4, #0
	adds r3, r5, #0
	bl ComputeDisplayTime
	b _080AA858
_080AA83A:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	lsls r1, r1, #2
	adds r0, #0x1c
	adds r0, r0, r1
	ldr r0, [r0]
	mov r4, sp
	adds r4, #6
	add r5, sp, #8
	add r1, sp, #4
	adds r2, r4, #0
	adds r3, r5, #0
	bl ComputeDisplayTime
_080AA858:
	mov sl, r4
	mov r1, r8
	adds r1, #6
	mov r2, r9
	subs r2, #0xe
	ldr r3, _080AA9CC  @ gUnknown_08A20590
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0xd
	bl RegisterObjectAttributes
	add r0, sp, #4
	ldrh r0, [r0]
	mov r7, r9
	subs r7, #8
	cmp r0, #0x63
	bls _080AA8BE
	mov r5, r8
	adds r5, #0xa
	ldr r4, _080AA9D0  @ gUnknown_08A2067C
	add r0, sp, #4
	ldrh r0, [r0]
	movs r6, #0x64
	movs r1, #0x64
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	movs r0, #0xe0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	bl RegisterObjectAttributes
	add r5, sp, #4
	adds r0, r5, #0
	ldrh r4, [r0]
	adds r0, r4, #0
	movs r1, #0x64
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	muls r0, r6, r0
	subs r4, r4, r0
	strh r4, [r5]
_080AA8BE:
	add r0, sp, #4
	ldrh r0, [r0]
	cmp r0, #9
	bls _080AA8EE
	mov r5, r8
	adds r5, #0x12
	ldr r4, _080AA9D0  @ gUnknown_08A2067C
	add r0, sp, #4
	ldrh r0, [r0]
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	movs r0, #0xe0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	bl RegisterObjectAttributes
_080AA8EE:
	mov r6, r8
	adds r6, #0x1a
	ldr r5, _080AA9D0  @ gUnknown_08A2067C
	add r0, sp, #4
	ldrh r0, [r0]
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r5
	ldr r3, [r0]
	movs r4, #0xe0
	lsls r4, r4, #7
	str r4, [sp]
	movs r0, #0xd
	adds r1, r6, #0
	adds r2, r7, #0
	bl RegisterObjectAttributes
	mov r1, r8
	adds r1, #0x22
	mov r2, r9
	subs r2, #7
	ldr r3, [r5, #0x28]
	str r4, [sp]
	movs r0, #0xd
	bl RegisterObjectAttributes
	adds r6, #0x10
	mov r1, sl
	ldrh r0, [r1]
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r5
	ldr r3, [r0]
	str r4, [sp]
	movs r0, #0xd
	adds r1, r6, #0
	adds r2, r7, #0
	bl RegisterObjectAttributes
	adds r6, #8
	mov r1, sl
	ldrh r0, [r1]
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r5
	ldr r3, [r0]
	str r4, [sp]
	movs r0, #0xd
	adds r1, r6, #0
	adds r2, r7, #0
	bl RegisterObjectAttributes
	mov r1, r8
	adds r1, #0x3a
	mov r2, r9
	adds r2, #1
	ldr r5, _080AA9D4  @ gUnknown_08A20650
	ldr r3, [r5, #0x28]
	str r4, [sp]
	movs r0, #0xd
	bl RegisterObjectAttributes
	adds r6, #0x10
	mov r1, sp
	ldrh r0, [r1, #8]
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r5
	ldr r3, [r0]
	str r4, [sp]
	movs r0, #0xd
	adds r1, r6, #0
	mov r2, r9
	bl RegisterObjectAttributes
	adds r6, #8
	mov r1, sp
	ldrh r0, [r1, #8]
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r5
	ldr r3, [r0]
	str r4, [sp]
	movs r0, #0xd
	adds r1, r6, #0
	mov r2, r9
	bl RegisterObjectAttributes
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AA9CC: .4byte gUnknown_08A20590
_080AA9D0: .4byte gUnknown_08A2067C
_080AA9D4: .4byte gUnknown_08A20650

	THUMB_FUNC_START sub_80AA9D8
sub_80AA9D8: @ 0x080AA9D8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	ldrh r1, [r0, #0x3e]
	adds r1, #1
	strh r1, [r0, #0x3e]
	adds r2, r0, #0
	adds r2, #0x40
	ldrh r1, [r2]
	adds r1, #2
	strh r1, [r2]
	ldrh r4, [r0, #0x3e]
	lsls r4, r4, #0x14
	lsrs r4, r4, #0x17
	ldrh r0, [r2]
	lsrs r7, r0, #3
	movs r0, #0xff
	ands r7, r0
	movs r0, #0
	movs r1, #1
	bl sub_8014E74
	adds r6, r7, #0
	ldr r1, _080AAA64  @ gSinLookup
	mov sl, r1
	lsls r4, r4, #0x10
	asrs r2, r4, #0x10
	mov r8, r2
	adds r5, r0, #0
	mov r9, r4
	movs r4, #0x9f
_080AAA1A:
	movs r0, #0xff
	ands r0, r6
	lsls r0, r0, #1
	add r0, sl
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r1, #0xc0
	lsls r1, r1, #2
	bl __divsi3
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	add r0, r8
	ldr r2, _080AAA68  @ 0x000001FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r5]
	adds r6, #0xc
	adds r5, #2
	subs r4, #1
	cmp r4, #0
	bge _080AAA1A
	mov r0, r9
	lsrs r1, r0, #0x10
	adds r2, r7, #0
	movs r0, #2
	bl BG_SetPosition
	bl sub_8014EA8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AAA64: .4byte gSinLookup
_080AAA68: .4byte 0x000001FF

	THUMB_FUNC_START sub_80AAA6C
sub_80AAA6C: @ 0x080AAA6C
	push {lr}
	bl sub_8014E3C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AAA78
sub_80AAA78: @ 0x080AAA78
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x29
	movs r7, #0
	movs r0, #1
	strb r0, [r1]
	movs r5, #0
	strh r7, [r6, #0x2c]
	movs r4, #0x80
	lsls r4, r4, #1
	strh r4, [r6, #0x2e]
	adds r0, r6, #0
	adds r0, #0x3a
	strb r5, [r0]
	adds r1, #0x12
	movs r0, #0x28
	strb r0, [r1]
	strh r7, [r6, #0x30]
	adds r0, r6, #0
	adds r0, #0x32
	strb r5, [r0]
	str r4, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl WriteOAMRotScaleData
	str r4, [sp]
	movs r0, #1
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl WriteOAMRotScaleData
	str r4, [sp]
	movs r0, #2
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl WriteOAMRotScaleData
	str r4, [sp]
	movs r0, #3
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl WriteOAMRotScaleData
	strh r7, [r6, #0x2a]
	adds r0, r6, #0
	bl sub_80AB534
	str r0, [r6, #0x34]
	adds r0, r6, #0
	adds r0, #0x39
	strb r5, [r0]
	ldr r1, [r6, #0x14]
	adds r2, r1, #0
	adds r2, #0x3f
	ldrb r0, [r2]
	cmp r0, #0xff
	bne _080AAAFE
	str r7, [r1, #0x60]
	b _080AAB1C
_080AAAFE:
	ldr r0, _080AAB64  @ gUnknown_08A280A8
	movs r1, #0xa0
	lsls r1, r1, #1
	ldrb r2, [r2]
	lsls r2, r2, #5
	adds r2, #0x30
	movs r3, #0xc5
	lsls r3, r3, #6
	str r7, [sp]
	movs r4, #4
	str r4, [sp, #4]
	bl APProc_Create
	ldr r1, [r6, #0x14]
	str r0, [r1, #0x60]
_080AAB1C:
	ldr r0, [r6, #0x14]
	adds r0, #0x2c
	ldrb r2, [r0]
	adds r0, r6, #0
	adds r0, #0x3c
	movs r1, #0
	strb r2, [r0]
	adds r0, #4
	strh r1, [r0]
	strh r1, [r6, #0x3e]
	ldr r0, _080AAB68  @ gUnknown_02000000
	bl sub_8014DA8
	ldr r1, _080AAB6C  @ 0x04000018
	movs r0, #0
	bl sub_8014EC4
	movs r0, #0
	bl sub_8014EF4
	adds r0, r6, #0
	bl sub_80AA9D8
	ldr r0, _080AAB70  @ gUnknown_03004990
	ldr r0, [r0]
	ldr r1, _080AAB74  @ 0x0000079E
	adds r0, r0, r1
	movs r1, #1
	strb r1, [r0]
	bl sub_80AB548
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AAB64: .4byte gUnknown_08A280A8
_080AAB68: .4byte gUnknown_02000000
_080AAB6C: .4byte 0x04000018
_080AAB70: .4byte gUnknown_03004990
_080AAB74: .4byte 0x0000079E

	THUMB_FUNC_START sub_80AAB78
sub_80AAB78: @ 0x080AAB78
	push {lr}
	lsls r1, r1, #0x10
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AABA4
	ldr r2, _080AABA0  @ gPaletteBuffer
	lsrs r0, r1, #0x12
	movs r1, #0xf
	ands r0, r1
	movs r1, #0xc8
	lsls r1, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r1, #0xb4
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	b _080AABB2
	.align 2, 0
_080AABA0: .4byte gPaletteBuffer
_080AABA4:
	ldr r0, _080AABBC  @ gPaletteBuffer
	ldr r2, _080AABC0  @ 0x0000033A
	adds r1, r0, r2
	ldrh r1, [r1]
	subs r2, #0x6a
	adds r0, r0, r2
	strh r1, [r0]
_080AABB2:
	bl EnablePaletteSync
	pop {r0}
	bx r0
	.align 2, 0
_080AABBC: .4byte gPaletteBuffer
_080AABC0: .4byte 0x0000033A

	THUMB_FUNC_START sub_80AABC4
sub_80AABC4: @ 0x080AABC4
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, r9
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r0, [sp, #0x20]
	ldr r5, [sp, #0x24]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r1, _080AAC34  @ 0x000001FF
	mov r9, r1
	adds r1, r6, #0
	mov r2, r9
	ands r1, r2
	ldr r3, _080AAC38  @ gUnknown_08A2051C
	movs r2, #0xf
	mov sl, r2
	ands r0, r2
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	mov r2, r8
	bl RegisterObjectAttributes
	adds r6, #8
	mov r0, r9
	ands r6, r0
	movs r1, #8
	add r8, r1
	ldr r0, _080AAC3C  @ gUnknown_08A209B8
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r3, [r4]
	mov r2, sl
	ands r5, r2
	lsls r5, r5, #0xc
	str r5, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, r8
	bl RegisterObjectAttributes
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AAC34: .4byte 0x000001FF
_080AAC38: .4byte gUnknown_08A2051C
_080AAC3C: .4byte gUnknown_08A209B8

	THUMB_FUNC_START sub_80AAC40
sub_80AAC40: @ 0x080AAC40
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, r9
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r0, [sp, #0x20]
	ldr r5, [sp, #0x24]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r1, _080AACB0  @ 0x000001FF
	mov r9, r1
	adds r1, r6, #0
	mov r2, r9
	ands r1, r2
	ldr r3, _080AACB4  @ gUnknown_08A2051C
	movs r2, #0xf
	mov sl, r2
	ands r0, r2
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	mov r2, r8
	bl RegisterObjectAttributes
	adds r6, #8
	mov r0, r9
	ands r6, r0
	movs r1, #8
	add r8, r1
	ldr r0, _080AACB8  @ gUnknown_08A2099C
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r3, [r4]
	mov r2, sl
	ands r5, r2
	lsls r5, r5, #0xc
	str r5, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, r8
	bl RegisterObjectAttributes
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AACB0: .4byte 0x000001FF
_080AACB4: .4byte gUnknown_08A2051C
_080AACB8: .4byte gUnknown_08A2099C

	THUMB_FUNC_START sub_80AACBC
sub_80AACBC: @ 0x080AACBC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r4, r7, #0
	adds r4, #0x3c
	ldr r0, [r7, #0x14]
	adds r1, r0, #0
	adds r1, #0x2c
	ldrb r0, [r4]
	ldrb r2, [r1]
	cmp r0, r2
	beq _080AACE8
	ldrb r0, [r1]
	bl sub_80ABD88
	ldr r0, [r7, #0x14]
	adds r0, #0x2c
	ldrb r0, [r0]
	strb r0, [r4]
_080AACE8:
	ldrh r0, [r7, #0x2a]
	ldrb r1, [r4]
	bl sub_80ABE3C
	bl EnablePaletteSync
	ldr r1, [r7, #0x14]
	adds r4, r1, #0
	adds r4, #0x3f
	ldrb r3, [r4]
	adds r0, r3, #0
	cmp r0, #0xff
	beq _080AADBA
	adds r5, r1, #0
	adds r5, #0x44
	ldrh r2, [r5]
	adds r1, r2, #0
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	beq _080AADBA
	cmp r1, #0xf
	bhi _080AAD1C
	movs r0, #0xff
	strb r0, [r4]
	b _080AADB0
_080AAD1C:
	ldr r0, _080AADDC  @ gSinLookup
	mov r9, r0
	movs r4, #0xff
	adds r0, r4, #0
	ands r0, r2
	adds r0, #0x40
	lsls r0, r0, #1
	add r0, r9
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	ldrh r1, [r5]
	bl Div
	mov r8, r0
	mov r2, r8
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	mov r8, r2
	ldr r1, [r7, #0x14]
	adds r1, #0x44
	ldrh r2, [r1]
	adds r0, r4, #0
	ands r0, r2
	lsls r0, r0, #1
	add r0, r9
	movs r2, #0
	ldrsh r0, [r0, r2]
	negs r0, r0
	lsls r0, r0, #4
	ldrh r1, [r1]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	ldr r1, [r7, #0x14]
	adds r1, #0x44
	ldrh r2, [r1]
	adds r0, r4, #0
	ands r0, r2
	lsls r0, r0, #1
	add r0, r9
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r0, r0, #4
	ldrh r1, [r1]
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	ldr r1, [r7, #0x14]
	adds r1, #0x44
	ldrh r0, [r1]
	ands r4, r0
	adds r4, #0x40
	lsls r4, r4, #1
	add r4, r9
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	ldrh r1, [r1]
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #3
	mov r1, r8
	adds r2, r6, #0
	adds r3, r5, #0
	bl WriteOAMRotScaleData
_080AADB0:
	ldr r1, [r7, #0x14]
	adds r1, #0x44
	ldrh r0, [r1]
	subs r0, #0x10
	strh r0, [r1]
_080AADBA:
	ldrh r0, [r7, #0x2a]
	adds r1, r7, #0
	adds r1, #0x3c
	ldrb r1, [r1]
	bl sub_80AA7AC
	ldrh r0, [r7, #0x2a]
	adds r0, #1
	strh r0, [r7, #0x2a]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AADDC: .4byte gSinLookup

	THUMB_FUNC_START sub_80AADE0
sub_80AADE0: @ 0x080AADE0
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x14]
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #4
	movs r1, #0xdc
	bl __divsi3
	movs r1, #0xe8
	lsls r1, r1, #1
	adds r5, r0, r1
	movs r0, #0xff
	ands r5, r0
	ldr r3, _080AAE38  @ gUnknown_08A2051C
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x30
	adds r2, r5, #0
	bl RegisterObjectAttributes
	ldr r1, [r4, #0x14]
	adds r0, r1, #0
	adds r0, #0x46
	ldrh r0, [r0]
	cmp r0, #0
	beq _080AAE5C
	adds r0, r1, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080AAE40
	adds r2, r5, #0
	adds r2, #8
	ldr r0, _080AAE3C  @ gUnknown_08A209B8
	ldr r3, [r0, #0x28]
	b _080AAE48
	.align 2, 0
_080AAE38: .4byte gUnknown_08A2051C
_080AAE3C: .4byte gUnknown_08A209B8
_080AAE40:
	adds r2, r5, #0
	adds r2, #8
	ldr r0, _080AAE58  @ gUnknown_08A209B8
	ldr r3, [r0, #0x20]
_080AAE48:
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	movs r1, #0x38
	bl RegisterObjectAttributes
	b _080AAE82
	.align 2, 0
_080AAE58: .4byte gUnknown_08A209B8
_080AAE5C:
	adds r0, r1, #0
	adds r0, #0x42
	ldrb r0, [r0]
	bl sub_80A88B8
	lsls r0, r0, #0x18
	adds r2, r5, #0
	adds r2, #8
	ldr r1, _080AAE8C  @ gUnknown_08A209B8
	lsrs r0, r0, #0x16
	adds r0, r0, r1
	ldr r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	movs r1, #0x38
	bl RegisterObjectAttributes
_080AAE82:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AAE8C: .4byte gUnknown_08A209B8

	THUMB_FUNC_START sub_80AAE90
sub_80AAE90: @ 0x080AAE90
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r5, r0, #0
	ldr r2, [r5, #0x14]
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	adds r0, #0x17
	ldrh r0, [r0]
	adds r7, r1, r0
	cmp r7, #0xdb
	bgt _080AAF5E
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r3, [r0]
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r3
	asrs r0, r0, #1
	movs r1, #0x44
	subs r1, r1, r0
	mov r8, r1
	cmp r1, #1
	bgt _080AAECC
	movs r0, #2
	mov r8, r0
_080AAECC:
	movs r6, #0
	cmp r6, r3
	bge _080AAF36
	mov r4, r8
	movs r2, #0x30
	mov r9, r2
_080AAED8:
	ldr r0, [r5, #0x14]
	adds r0, #0x30
	ldrb r0, [r0]
	adds r1, r6, #0
	bl sub_80A8844
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_80A88B8
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r0, [r5, #0x14]
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r6, r0
	bne _080AAF10
	movs r0, #1
	str r0, [sp]
	movs r0, #4
	str r0, [sp, #4]
	adds r0, r5, #0
	mov r2, r9
	subs r1, r2, r7
	adds r2, r4, #0
	bl sub_80AABC4
	b _080AAF24
_080AAF10:
	movs r0, #6
	str r0, [sp]
	movs r0, #4
	str r0, [sp, #4]
	adds r0, r5, #0
	mov r2, r9
	subs r1, r2, r7
	adds r2, r4, #0
	bl sub_80AABC4
_080AAF24:
	adds r4, #0x19
	adds r6, #1
	ldr r0, [r5, #0x14]
	adds r1, r0, #0
	adds r1, #0x31
	adds r2, r0, #0
	ldrb r1, [r1]
	cmp r6, r1
	blt _080AAED8
_080AAF36:
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #2
	bne _080AAF5E
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r2, r2, r0
	add r2, r8
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r0, #0
	movs r1, #0x1c
	adds r3, r5, #0
	bl sub_80AB4F4
_080AAF5E:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AAF6C
sub_80AAF6C: @ 0x080AAF6C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r5, r0, #0
	ldr r2, [r5, #0x14]
	adds r0, r2, #0
	adds r0, #0x46
	ldrh r0, [r0]
	subs r0, #1
	lsls r0, r0, #0x10
	movs r1, #0xdb
	lsls r1, r1, #0x11
	cmp r0, r1
	bhi _080AB050
	adds r1, r2, #0
	adds r1, #0x33
	ldrb r0, [r1]
	cmp r0, #7
	bne _080AAF9A
	movs r7, #2
	movs r0, #0x15
	b _080AAFAE
_080AAF9A:
	ldrb r0, [r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	movs r0, #0x44
	subs r7, r0, r1
	cmp r7, #1
	bgt _080AAFAC
	movs r7, #2
_080AAFAC:
	movs r0, #0x19
_080AAFAE:
	mov r8, r0
	movs r6, #0
	ldr r0, [r5, #0x14]
	adds r1, r0, #0
	adds r1, #0x33
	adds r2, r0, #0
	ldrb r1, [r1]
	cmp r6, r1
	bge _080AB030
	adds r4, r7, #0
_080AAFC2:
	adds r0, #0x32
	ldrb r0, [r0]
	adds r1, r6, #0
	bl sub_80A8844
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl sub_80A88B8
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r1, [r5, #0x14]
	adds r0, r1, #0
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r6, r0
	bne _080AB002
	adds r0, r1, #0
	adds r0, #0x46
	ldrh r0, [r0]
	movs r1, #0x86
	lsls r1, r1, #1
	subs r1, r1, r0
	movs r0, #1
	str r0, [sp]
	movs r0, #4
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r4, #0
	bl sub_80AAC40
	b _080AB01E
_080AB002:
	adds r0, r1, #0
	adds r0, #0x46
	ldrh r0, [r0]
	movs r1, #0x86
	lsls r1, r1, #1
	subs r1, r1, r0
	movs r0, #6
	str r0, [sp]
	movs r0, #4
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r4, #0
	bl sub_80AAC40
_080AB01E:
	add r4, r8
	adds r6, #1
	ldr r0, [r5, #0x14]
	adds r1, r0, #0
	adds r1, #0x33
	adds r2, r0, #0
	ldrb r1, [r1]
	cmp r6, r1
	blt _080AAFC2
_080AB030:
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0xa
	bne _080AB050
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r0, [r0]
	mov r2, r8
	muls r2, r0, r2
	adds r2, r7, r2
	movs r0, #0
	movs r1, #0x1c
	adds r3, r5, #0
	bl sub_80AB4F4
_080AB050:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AB05C
sub_80AB05C: @ 0x080AB05C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	ldr r0, [r0, #0x14]
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	bne _080AB076
	b _080AB1DA
_080AB076:
	mov r0, r8
	bl sub_80AA7EC
	mov r0, r8
	bl sub_80AADE0
	movs r7, #0
	movs r0, #0xf
	mov sl, r0
	movs r1, #0xa
	mov r9, r1
_080AB08C:
	mov r2, r8
	ldr r1, [r2, #0x14]
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	movs r2, #0
	cmp r0, #6
	bne _080AB0AA
	adds r0, r1, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	cmp r0, r7
	bne _080AB0AA
	movs r2, #0x80
	lsls r2, r2, #1
_080AB0AA:
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x2f
	ldrb r1, [r0]
	movs r0, #0xf8
	subs r1, r0, r1
	ldr r0, _080AB168  @ 0x000001FF
	ands r1, r0
	lsls r5, r7, #5
	adds r5, #0x20
	adds r5, r2, r5
	ldr r0, _080AB16C  @ gUnknown_08A209F0
	lsls r6, r7, #2
	adds r0, r6, r0
	ldr r3, [r0]
	lsls r4, r7, #1
	mov r0, r9
	mov r2, sl
	ands r0, r2
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	adds r2, r5, #0
	bl RegisterObjectAttributes
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x2f
	ldrb r1, [r0]
	movs r2, #0xf8
	subs r1, r2, r1
	ldr r0, _080AB168  @ 0x000001FF
	ands r1, r0
	adds r5, #8
	ldr r0, _080AB170  @ gUnknown_08A209E4
	adds r6, r6, r0
	ldr r3, [r6]
	adds r4, #0xb
	mov r2, sl
	ands r4, r2
	lsls r4, r4, #0xc
	str r4, [sp]
	movs r0, #4
	adds r2, r5, #0
	bl RegisterObjectAttributes
	movs r0, #2
	add r9, r0
	adds r7, #1
	cmp r7, #2
	ble _080AB08C
	mov r1, r8
	ldr r2, [r1, #0x14]
	adds r3, r2, #0
	adds r3, #0x3f
	ldrb r0, [r3]
	cmp r0, #0xff
	beq _080AB1DA
	adds r0, r2, #0
	adds r0, #0x44
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	beq _080AB178
	ldr r0, [r2, #0x60]
	cmp r0, #0
	beq _080AB13E
	bl APProc_Delete
	mov r2, r8
	ldr r1, [r2, #0x14]
	movs r0, #0
	str r0, [r1, #0x60]
_080AB13E:
	mov r0, r8
	ldr r2, [r0, #0x14]
	adds r0, r2, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	adds r0, r2, #0
	adds r0, #0x3f
	ldrb r2, [r0]
	lsls r2, r2, #5
	adds r2, #0x1e
	ldr r3, _080AB174  @ gUnknown_08A20588
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0xca
	bl RegisterObjectAttributes
	b _080AB1DA
	.align 2, 0
_080AB168: .4byte 0x000001FF
_080AB16C: .4byte gUnknown_08A209F0
_080AB170: .4byte gUnknown_08A209E4
_080AB174: .4byte gUnknown_08A20588
_080AB178:
	adds r0, r2, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #1
	bne _080AB1A0
	ldr r0, [r2, #0x60]
	adds r1, r2, #0
	adds r1, #0x2f
	ldrb r2, [r1]
	movs r1, #0xda
	lsls r1, r1, #1
	subs r1, r1, r2
	ldrb r2, [r3]
	lsls r2, r2, #5
	adds r2, #0x30
	movs r3, #0xc5
	lsls r3, r3, #6
	bl APProc_SetParameters
	b _080AB1DA
_080AB1A0:
	ldr r0, [r2, #0x60]
	movs r1, #0xa0
	lsls r1, r1, #1
	ldrb r2, [r3]
	lsls r2, r2, #5
	adds r2, #0x30
	movs r3, #0xc5
	lsls r3, r3, #6
	bl APProc_SetParameters
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r1, r0, #0
	adds r1, #0x2f
	ldrb r2, [r1]
	movs r1, #0xd3
	lsls r1, r1, #1
	subs r1, r1, r2
	adds r0, #0x3f
	ldrb r2, [r0]
	lsls r2, r2, #5
	adds r2, #0x1e
	ldr r3, _080AB248  @ gUnknown_08A20588
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
_080AB1DA:
	mov r2, r8
	ldr r1, [r2, #0x14]
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	subs r0, #5
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _080AB28E
	adds r0, r1, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	beq _080AB250
	ldr r3, _080AB24C  @ gUnknown_08A20536
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x2c
	movs r2, #0x80
	bl RegisterObjectAttributes
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x36
	ldrb r1, [r0]
	subs r1, #1
	lsrs r0, r1, #0x1f
	adds r0, r1, r0
	asrs r0, r0, #1
	lsls r0, r0, #1
	subs r1, r1, r0
	movs r0, #0x2c
	muls r0, r1, r0
	adds r0, #0x34
	movs r1, #0x88
	bl DisplayUiHand
	mov r2, r8
	ldr r0, [r2, #0x14]
	adds r0, #0x2c
	ldrb r2, [r0]
	lsls r2, r2, #0x15
	movs r0, #0x80
	lsls r0, r0, #0xe
	adds r2, r2, r0
	asrs r2, r2, #0x10
	movs r0, #1
	movs r1, #0xc
	mov r3, r8
	bl sub_80AB4F4
	b _080AB26E
	.align 2, 0
_080AB248: .4byte gUnknown_08A20588
_080AB24C: .4byte gUnknown_08A20536
_080AB250:
	adds r1, #0x2c
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _080AB26E
	adds r2, r0, #0
	lsls r2, r2, #0x15
	movs r1, #0x80
	lsls r1, r1, #0xe
	adds r2, r2, r1
	asrs r2, r2, #0x10
	movs r0, #1
	movs r1, #0xc
	mov r3, r8
	bl sub_80AB4F4
_080AB26E:
	mov r2, r8
	ldr r0, [r2, #0x14]
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _080AB28E
	adds r1, r0, #0
	lsls r1, r1, #0x1d
	movs r0, #0x80
	lsls r0, r0, #0x16
	adds r1, r1, r0
	lsrs r1, r1, #0x18
	movs r0, #1
	bl sub_80AB514
_080AB28E:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AB2A0
sub_80AB2A0: @ 0x080AB2A0
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AB2EC
	ldr r0, [r4, #0x14]
	adds r1, r0, #0
	adds r1, #0x42
	ldrh r2, [r1]
	adds r1, r2, #0
	cmp r1, #0xff
	bhi _080AB2D4
	cmp r1, #0x20
	bne _080AB2CE
	adds r0, #0x35
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x33
	strb r0, [r1]
	b _080AB2D4
_080AB2CE:
	adds r0, r4, #0
	adds r0, #0x33
	strb r2, [r0]
_080AB2D4:
	adds r0, r4, #0
	bl sub_80AAE90
	adds r0, r4, #0
	bl sub_80AAF6C
	adds r0, r4, #0
	bl sub_80AB05C
	adds r0, r4, #0
	bl sub_80AACBC
_080AB2EC:
	adds r0, r4, #0
	bl sub_80AA9D8
	ldrh r0, [r4, #0x2a]
	bl sub_80AB56C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START New6C_savedraw
New6C_savedraw: @ 0x080AB300
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AB310  @ gUnknown_08A206A8
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080AB310: .4byte gUnknown_08A206A8

	THUMB_FUNC_START sub_80AB314
sub_80AB314: @ 0x080AB314
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x36
	movs r0, #0
	strb r0, [r1]
	movs r1, #0
	strh r0, [r2, #0x2a]
	strh r0, [r2, #0x2e]
	strh r0, [r2, #0x30]
	strh r0, [r2, #0x32]
	strh r0, [r2, #0x34]
	adds r0, r2, #0
	adds r0, #0x37
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	subs r0, #0xe
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80AB340
sub_80AB340: @ 0x080AB340
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r7, r0, #0
	ldr r1, _080AB3DC  @ gUnknown_08205DE9
	add r0, sp, #4
	movs r2, #8
	bl memcpy
	ldr r0, [r7, #0x14]
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080AB368
	b _080AB4E0
_080AB368:
	ldrh r0, [r7, #0x2a]
	adds r0, #1
	strh r0, [r7, #0x2a]
	adds r3, r7, #0
	adds r3, #0x2c
	ldrb r0, [r3]
	str r3, [sp, #0xc]
	cmp r0, #3
	bhi _080AB37E
	adds r0, #1
	strb r0, [r3]
_080AB37E:
	adds r0, r7, #0
	adds r0, #0x36
	ldrb r1, [r0]
	str r0, [sp, #0x10]
	cmp r1, #0
	bne _080AB38C
	b _080AB49C
_080AB38C:
	ldrh r2, [r7, #0x32]
	ldrh r5, [r7, #0x2e]
	ldrb r0, [r3]
	cmp r0, #3
	bhi _080AB3C6
	movs r1, #0x32
	ldrsh r0, [r7, r1]
	movs r2, #0x34
	ldrsh r1, [r7, r2]
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r3, [r7, #0x34]
	adds r0, r0, r3
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r4, #0x2e
	ldrsh r0, [r7, r4]
	movs r3, #0x30
	ldrsh r1, [r7, r3]
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r4, [r7, #0x30]
	adds r0, r0, r4
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
_080AB3C6:
	adds r0, r7, #0
	adds r0, #0x3a
	ldrb r1, [r0]
	adds r3, r0, #0
	cmp r1, #0
	bne _080AB3E0
	lsls r1, r5, #0x10
	movs r4, #0x9c
	lsls r4, r4, #0x10
	b _080AB3E6
	.align 2, 0
_080AB3DC: .4byte gUnknown_08205DE9
_080AB3E0:
	lsls r1, r5, #0x10
	movs r4, #0xb0
	lsls r4, r4, #0x10
_080AB3E6:
	adds r0, r1, r4
	lsrs r6, r0, #0x10
	ldrh r0, [r7, #0x32]
	strh r0, [r7, #0x34]
	ldrh r0, [r7, #0x2e]
	strh r0, [r7, #0x30]
	ldrb r0, [r3]
	cmp r0, #0
	bne _080AB468
	ldr r0, _080AB460  @ 0x000001FF
	mov r9, r0
	lsrs r1, r1, #0x10
	ands r1, r0
	lsls r4, r2, #0x10
	asrs r4, r4, #0x10
	ldrh r0, [r7, #0x2a]
	lsrs r0, r0, #3
	movs r2, #7
	mov r8, r2
	mov r3, r8
	ands r0, r3
	add r0, sp
	adds r0, #4
	ldrb r2, [r0]
	adds r2, r4, r2
	movs r0, #0xff
	mov sl, r0
	ands r2, r0
	movs r5, #0xc0
	lsls r5, r5, #6
	str r5, [sp]
	movs r0, #4
	ldr r3, _080AB464  @ gUnknown_08A20570
	bl RegisterObjectAttributes
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	mov r2, r9
	ands r1, r2
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r3, #0
	orrs r1, r0
	ldrh r0, [r7, #0x2a]
	lsrs r0, r0, #3
	mov r2, r8
	ands r0, r2
	add r0, sp
	adds r0, #4
	ldrb r0, [r0]
	adds r4, r4, r0
	mov r3, sl
	ands r4, r3
	str r5, [sp]
	movs r0, #4
	adds r2, r4, #0
	ldr r3, _080AB464  @ gUnknown_08A20570
	bl RegisterObjectAttributes
	b _080AB490
	.align 2, 0
_080AB460: .4byte 0x000001FF
_080AB464: .4byte gUnknown_08A20570
_080AB468:
	lsls r2, r2, #0x10
	ldrh r0, [r7, #0x2a]
	lsrs r0, r0, #3
	movs r1, #7
	ands r0, r1
	add r0, sp
	adds r0, #4
	asrs r2, r2, #0x10
	ldrb r0, [r0]
	adds r2, r2, r0
	movs r0, #0xff
	ands r2, r0
	ldr r3, _080AB498  @ gUnknown_08A20570
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #4
	bl RegisterObjectAttributes
_080AB490:
	movs r0, #0
	ldr r4, [sp, #0xc]
	strb r0, [r4]
	b _080AB4A8
	.align 2, 0
_080AB498: .4byte gUnknown_08A20570
_080AB49C:
	ldrb r0, [r3]
	cmp r0, #4
	bne _080AB4A8
	movs r0, #0
	ldr r1, [sp, #0x10]
	strb r0, [r1]
_080AB4A8:
	adds r4, r7, #0
	adds r4, #0x38
	ldrb r0, [r4]
	cmp r0, #0
	beq _080AB4C8
	adds r0, r7, #0
	adds r0, #0x37
	ldrb r2, [r0]
	ldr r3, _080AB4F0  @ gUnknown_08A20570
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #6
	bl RegisterObjectAttributes
_080AB4C8:
	adds r1, r7, #0
	adds r1, #0x39
	ldrb r0, [r1]
	cmp r0, #0
	beq _080AB4D6
	movs r0, #0
	strb r0, [r4]
_080AB4D6:
	movs r0, #0
	ldr r2, [sp, #0x10]
	strb r0, [r2]
	movs r0, #1
	strb r0, [r1]
_080AB4E0:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AB4F0: .4byte gUnknown_08A20570

	THUMB_FUNC_START sub_80AB4F4
sub_80AB4F4: @ 0x080AB4F4
	ldr r3, [r3, #0x34]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	subs r2, #0xc
	strh r2, [r3, #0x32]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	subs r1, #2
	strh r1, [r3, #0x2e]
	adds r2, r3, #0
	adds r2, #0x36
	movs r1, #1
	strb r1, [r2]
	adds r3, #0x3a
	strb r0, [r3]
	bx lr

	THUMB_FUNC_START sub_80AB514
sub_80AB514: @ 0x080AB514
	ldr r2, [r2, #0x34]
	mov ip, r2
	adds r2, #0x37
	movs r3, #0
	strb r1, [r2]
	adds r2, #1
	movs r1, #1
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x3a
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x39
	strb r3, [r0]
	bx lr

	THUMB_FUNC_START sub_80AB534
sub_80AB534: @ 0x080AB534
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AB544  @ gUnknown_08A206D8
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080AB544: .4byte gUnknown_08A206D8

	THUMB_FUNC_START sub_80AB548
sub_80AB548: @ 0x080AB548
	push {lr}
	movs r2, #0
	movs r3, #0xa0
	ldr r0, _080AB568  @ gUnknown_020007E0
	movs r1, #0x13
_080AB552:
	strb r2, [r0, #0xe]
	str r3, [r0, #4]
	str r3, [r0]
	strh r2, [r0, #0xa]
	strh r2, [r0, #8]
	adds r0, #0x10
	subs r1, #1
	cmp r1, #0
	bge _080AB552
	pop {r0}
	bx r0
	.align 2, 0
_080AB568: .4byte gUnknown_020007E0

	THUMB_FUNC_START sub_80AB56C
sub_80AB56C: @ 0x080AB56C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r9, r0
	movs r0, #0
	mov r8, r0
	ldr r6, _080AB5C8  @ gUnknown_020007E0
	movs r7, #0x13
_080AB580:
	movs r0, #0xe
	ldrsb r0, [r6, r0]
	cmp r0, #0
	beq _080AB674
	ldr r2, [r6]
	adds r1, r2, #0
	adds r1, #0xc0
	ldr r0, _080AB5CC  @ 0x00000C5F
	cmp r1, r0
	bhi _080AB606
	ldr r5, [r6, #4]
	ldr r0, _080AB5D0  @ 0x000003BF
	cmp r5, r0
	bgt _080AB5DC
	adds r0, r2, #0
	movs r1, #0xc
	bl __divsi3
	adds r4, r0, #0
	ldr r0, _080AB5D4  @ 0x000001FF
	ands r4, r0
	adds r0, r5, #0
	movs r1, #0xc
	bl __divsi3
	movs r2, #0xff
	ands r2, r0
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0xe
	adds r1, r4, #0
	ldr r3, _080AB5D8  @ gUnknown_08A20580
	bl RegisterObjectAttributes
	b _080AB606
	.align 2, 0
_080AB5C8: .4byte gUnknown_020007E0
_080AB5CC: .4byte 0x00000C5F
_080AB5D0: .4byte 0x000003BF
_080AB5D4: .4byte 0x000001FF
_080AB5D8: .4byte gUnknown_08A20580
_080AB5DC:
	adds r0, r2, #0
	movs r1, #0xc
	bl __divsi3
	adds r4, r0, #0
	ldr r0, _080AB65C  @ 0x000001FF
	ands r4, r0
	adds r0, r5, #0
	movs r1, #0xc
	bl __divsi3
	movs r2, #0xff
	ands r2, r0
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0xe
	adds r1, r4, #0
	ldr r3, _080AB660  @ gUnknown_08A20578
	bl RegisterObjectAttributes
_080AB606:
	movs r2, #8
	ldrsh r1, [r6, r2]
	ldr r0, [r6]
	adds r0, r0, r1
	str r0, [r6]
	movs r0, #0xa
	ldrsh r1, [r6, r0]
	ldr r0, [r6, #4]
	adds r0, r0, r1
	str r0, [r6, #4]
	movs r0, #3
	mov r1, r9
	ands r0, r1
	cmp r0, #0
	bne _080AB638
	movs r0, #0xc
	ldrsb r0, [r6, r0]
	ldrh r2, [r6, #8]
	adds r0, r0, r2
	strh r0, [r6, #8]
	movs r0, #0xd
	ldrsb r0, [r6, r0]
	ldrh r1, [r6, #0xa]
	adds r0, r0, r1
	strh r0, [r6, #0xa]
_080AB638:
	ldr r0, [r6]
	movs r2, #0xb4
	lsls r2, r2, #3
	adds r0, r0, r2
	ldr r1, _080AB664  @ 0x0000167F
	cmp r0, r1
	bhi _080AB654
	ldr r1, [r6, #4]
	ldr r0, _080AB668  @ 0xFFFFFC40
	cmp r1, r0
	blt _080AB654
	ldr r0, _080AB66C  @ 0x00000B3F
	cmp r1, r0
	ble _080AB670
_080AB654:
	movs r0, #0
	strb r0, [r6, #0xe]
	b _080AB674
	.align 2, 0
_080AB65C: .4byte 0x000001FF
_080AB660: .4byte gUnknown_08A20578
_080AB664: .4byte 0x0000167F
_080AB668: .4byte 0xFFFFFC40
_080AB66C: .4byte 0x00000B3F
_080AB670:
	movs r0, #1
	add r8, r0
_080AB674:
	subs r7, #1
	adds r6, #0x10
	cmp r7, #0
	blt _080AB67E
	b _080AB580
_080AB67E:
	ldr r0, _080AB71C  @ gUnknown_020007E0
	mov r1, r8
	cmp r1, #0x12
	bgt _080AB70E
	adds r6, r0, #0
	movs r5, #0
	movs r7, #0x13
_080AB68C:
	movs r0, #0xe
	ldrsb r0, [r6, r0]
	cmp r0, #0
	bne _080AB706
	bl AdvanceGetLCGRNValue
	movs r1, #0xb
	bl DivRem
	cmp r0, #0
	bne _080AB706
	bl AdvanceGetLCGRNValue
	movs r1, #0x11
	bl DivRem
	adds r4, r0, #0
	bl AdvanceGetLCGRNValue
	movs r1, #0x1f
	bl DivRem
	subs r4, #8
	lsls r1, r4, #4
	subs r1, r1, r4
	lsls r1, r1, #1
	adds r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	str r0, [r6]
	movs r0, #0xf0
	lsls r0, r0, #3
	str r0, [r6, #4]
	bl AdvanceGetLCGRNValue
	movs r1, #7
	bl DivRem
	adds r0, #6
	strh r0, [r6, #8]
	bl AdvanceGetLCGRNValue
	movs r1, #0x19
	bl DivRem
	movs r2, #0x18
	negs r2, r2
	adds r1, r2, #0
	subs r1, r1, r0
	strh r1, [r6, #0xa]
	bl AdvanceGetLCGRNValue
	movs r1, #3
	bl DivRem
	adds r0, #1
	strb r0, [r6, #0xc]
	strb r5, [r6, #0xd]
	movs r0, #1
	strb r0, [r6, #0xe]
_080AB706:
	subs r7, #1
	adds r6, #0x10
	cmp r7, #0
	bge _080AB68C
_080AB70E:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AB71C: .4byte gUnknown_020007E0

	THUMB_FUNC_START sub_80AB720
sub_80AB720: @ 0x080AB720
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x40
	movs r0, #0
	strh r0, [r1]
	strh r0, [r4, #0x3e]
	ldr r1, _080AB754  @ 0x04000018
	bl sub_8014EC4
	movs r0, #0
	bl sub_8014EF4
	adds r0, r4, #0
	bl sub_80AA9D8
	ldr r0, _080AB758  @ gUnknown_03004990
	ldr r0, [r0]
	ldr r1, _080AB75C  @ 0x0000079E
	adds r0, r0, r1
	movs r1, #1
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AB754: .4byte 0x04000018
_080AB758: .4byte gUnknown_03004990
_080AB75C: .4byte 0x0000079E

	THUMB_FUNC_START sub_80AB760
sub_80AB760: @ 0x080AB760
	push {lr}
	ldr r0, _080AB774  @ gUnknown_08A206F8
	movs r1, #3
	bl Proc_Create
	ldr r0, _080AB778  @ gUnknown_02000000
	bl sub_8014DA8
	pop {r0}
	bx r0
	.align 2, 0
_080AB774: .4byte gUnknown_08A206F8
_080AB778: .4byte gUnknown_02000000

	THUMB_FUNC_START sub_80AB77C
sub_80AB77C: @ 0x080AB77C
	push {lr}
	ldr r0, _080AB790  @ gUnknown_08A206F8
	bl Proc_DeleteAllWithScript
	movs r0, #0
	bl SetPrimaryHBlankHandler
	pop {r0}
	bx r0
	.align 2, 0
_080AB790: .4byte gUnknown_08A206F8

	THUMB_FUNC_START sub_80AB794
sub_80AB794: @ 0x080AB794
	push {lr}
	ldr r0, _080AB7B0  @ gUnknown_02000920
	ldr r1, _080AB7B4  @ 0x06001000
	movs r2, #0x80
	movs r3, #4
	bl Font_InitForUI
	ldr r0, _080AB7B8  @ gUnknown_02000938
	movs r1, #0xa
	bl Text_Init
	pop {r0}
	bx r0
	.align 2, 0
_080AB7B0: .4byte gUnknown_02000920
_080AB7B4: .4byte 0x06001000
_080AB7B8: .4byte gUnknown_02000938

	THUMB_FUNC_START sub_80AB7BC
sub_80AB7BC: @ 0x080AB7BC
	push {r4, r5, lr}
	lsls r1, r1, #0x18
	cmp r1, #0
	beq _080AB820
	bl GetStringFromIndex
	adds r5, r0, #0
	ldr r0, _080AB814  @ gUnknown_02000920
	bl SetFont
	ldr r4, _080AB818  @ gUnknown_02000938
	adds r0, r4, #0
	bl Text_Clear
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetXCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColorId
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_AppendString
	adds r0, r4, #0
	movs r1, #0x2c
	bl Text_SetXCursor
	movs r0, #0xa1
	lsls r0, r0, #1
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_AppendString
	ldr r1, _080AB81C  @ gUnknown_020238F6
	adds r0, r4, #0
	bl Text_Draw
	b _080AB82C
	.align 2, 0
_080AB814: .4byte gUnknown_02000920
_080AB818: .4byte gUnknown_02000938
_080AB81C: .4byte gUnknown_020238F6
_080AB820:
	ldr r0, _080AB838  @ gUnknown_020238F6
	movs r1, #0xb
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
_080AB82C:
	movs r0, #2
	bl BG_EnableSyncByMask
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AB838: .4byte gUnknown_020238F6

	THUMB_FUNC_START sub_80AB83C
sub_80AB83C: @ 0x080AB83C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r5, _080AB870  @ gUnknown_08A20720
	adds r0, #0x42
	ldrb r0, [r0]
	bl sub_80A88B8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	adds r0, r0, r5
	ldr r0, [r0]
	lsls r4, r4, #0x18
	asrs r4, r4, #0x18
	adds r1, r4, #0
	bl sub_80AB7BC
	cmp r4, #0
	bne _080AB86A
	adds r0, r6, #0
	adds r0, #0x36
	strb r4, [r0]
_080AB86A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AB870: .4byte gUnknown_08A20720

	THUMB_FUNC_START sub_80AB874
sub_80AB874: @ 0x080AB874
	adds r3, r0, #0
	adds r3, #0x30
	ldrb r2, [r3]
	orrs r1, r2
	strb r1, [r3]
	adds r0, #0x31
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80AB888
sub_80AB888: @ 0x080AB888
	adds r3, r0, #0
	adds r3, #0x32
	ldrb r2, [r3]
	orrs r1, r2
	strb r1, [r3]
	adds r0, #0x33
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80AB89C
sub_80AB89C: @ 0x080AB89C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r5, #0
	adds r0, #0x31
	strb r5, [r0]
	subs r0, #1
	strb r5, [r0]
	adds r0, #0x14
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bne _080AB8BE
	adds r0, r4, #0
	movs r1, #1
	bl sub_80AB874
_080AB8BE:
	movs r1, #0
	adds r7, r4, #0
	adds r7, #0x32
	adds r6, r4, #0
	adds r6, #0x33
	adds r2, r4, #0
	adds r2, #0x37
_080AB8CC:
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _080AB8D6
	adds r5, #1
_080AB8D6:
	adds r1, #1
	cmp r1, #2
	ble _080AB8CC
	cmp r5, #0
	ble _080AB8FC
	adds r0, r4, #0
	movs r1, #2
	bl sub_80AB874
	cmp r5, #2
	bgt _080AB8F4
	adds r0, r4, #0
	movs r1, #4
	bl sub_80AB874
_080AB8F4:
	adds r0, r4, #0
	movs r1, #8
	bl sub_80AB874
_080AB8FC:
	cmp r5, #2
	bgt _080AB908
	adds r0, r4, #0
	movs r1, #0x10
	bl sub_80AB874
_080AB908:
	movs r0, #0
	strb r0, [r7]
	strb r0, [r6]
	bl sub_80A32F0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AB920
	adds r0, r4, #0
	movs r1, #1
	bl sub_80AB888
_080AB920:
	bl sub_80A3328
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AB932
	adds r0, r4, #0
	movs r1, #2
	bl sub_80AB888
_080AB932:
	bl sub_80A332C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AB944
	adds r0, r4, #0
	movs r1, #4
	bl sub_80AB888
_080AB944:
	bl sub_80A33EC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AB956
	adds r0, r4, #0
	movs r1, #0x10
	bl sub_80AB888
_080AB956:
	bl sub_80A341C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AB968
	adds r0, r4, #0
	movs r1, #0x20
	bl sub_80AB888
_080AB968:
	ldrb r0, [r7]
	cmp r0, #0
	beq _080AB984
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r0, [r2]
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x31
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_080AB984:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AB98C
sub_80AB98C: @ 0x080AB98C
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	cmp r2, #0
	ble _080AB9CA
	movs r5, #0
	lsls r6, r1, #0x18
_080AB9A0:
	adds r0, r4, #0
	bl sub_80A5218
	lsls r0, r0, #0x18
	cmp r0, r6
	beq _080AB9C6
	cmp r4, #2
	bne _080AB9B4
	movs r4, #0
	b _080AB9BA
_080AB9B4:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_080AB9BA:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _080AB9A0
	b _080AB9F2
_080AB9C6:
	adds r0, r4, #0
	b _080AB9F4
_080AB9CA:
	movs r5, #0
	lsls r6, r1, #0x18
_080AB9CE:
	adds r0, r4, #0
	bl sub_80A5218
	lsls r0, r0, #0x18
	cmp r0, r6
	beq _080AB9C6
	cmp r4, #0
	bne _080AB9E2
	movs r4, #2
	b _080AB9E8
_080AB9E2:
	subs r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_080AB9E8:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _080AB9CE
_080AB9F2:
	movs r0, #0xff
_080AB9F4:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AB9FC
sub_80AB9FC: @ 0x080AB9FC
	push {r4, r5, lr}
	mov ip, r0
	lsls r1, r1, #0x18
	lsrs r2, r1, #0x18
	movs r1, #0
	adds r0, #0x2c
	ldrb r5, [r0]
	adds r0, #0x16
	ldrh r0, [r0]
	cmp r0, #4
	beq _080ABA34
	cmp r0, #4
	bgt _080ABA20
	cmp r0, #1
	beq _080ABA90
	cmp r0, #2
	beq _080ABA3E
	b _080ABA40
_080ABA20:
	cmp r0, #0x10
	beq _080ABA40
	cmp r0, #0x10
	bgt _080ABA2E
	cmp r0, #8
	beq _080ABA3E
	b _080ABA40
_080ABA2E:
	cmp r0, #0x80
	bne _080ABA40
	b _080ABA3E
_080ABA34:
	mov r0, ip
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080ABA40
_080ABA3E:
	movs r1, #1
_080ABA40:
	lsls r0, r2, #0x18
	adds r2, r0, #0
	cmp r2, #0
	ble _080ABA5C
	mov r0, ip
	adds r0, #0x2c
	ldrb r3, [r0]
	adds r4, r0, #0
	cmp r3, #2
	bne _080ABA58
	movs r0, #0
	b _080ABA6E
_080ABA58:
	adds r0, r3, #1
	b _080ABA6E
_080ABA5C:
	mov r0, ip
	adds r0, #0x2c
	ldrb r3, [r0]
	adds r4, r0, #0
	cmp r3, #0
	bne _080ABA6C
	movs r0, #2
	b _080ABA6E
_080ABA6C:
	subs r0, r3, #1
_080ABA6E:
	strb r0, [r4]
	mov r0, ip
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #0x40
	beq _080ABA8C
	ldrb r0, [r4]
	asrs r2, r2, #0x18
	bl sub_80AB98C
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r5, r0
	beq _080ABA90
_080ABA8C:
	movs r0, #1
	b _080ABA92
_080ABA90:
	movs r0, #0
_080ABA92:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80ABA98
sub_80ABA98: @ 0x080ABA98
	push {lr}
	adds r1, r0, #0
	adds r1, #0x42
	ldrh r1, [r1]
	adds r0, #0x30
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	bne _080ABAAE
	movs r0, #0
	b _080ABAB0
_080ABAAE:
	movs r0, #1
_080ABAB0:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80ABAB4
sub_80ABAB4: @ 0x080ABAB4
	push {r4, lr}
	mov ip, r0
	mov r2, ip
	adds r2, #0x29
	adds r0, #0x2b
	ldrb r0, [r0]
	ldrb r1, [r2]
	adds r0, r0, r1
	strb r0, [r2]
	ldr r3, _080ABB24  @ gLCDControlBuffer
	ldrb r1, [r3, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	mov r0, ip
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _080ABB28
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x2f
	strb r0, [r1]
	ldrb r0, [r2]
	lsls r0, r0, #1
	adds r1, #4
	strb r0, [r1]
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	movs r4, #0x10
	negs r4, r4
	adds r1, r4, #0
	subs r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x2e
	strb r1, [r0]
	ldrb r0, [r2]
	lsls r0, r0, #1
	movs r2, #0x60
	negs r2, r2
	adds r1, r2, #0
	subs r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x32
	strb r1, [r0]
	b _080ABB5E
	.align 2, 0
_080ABB24: .4byte gLCDControlBuffer
_080ABB28:
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	movs r1, #0x78
	subs r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x2f
	strb r1, [r0]
	ldrb r0, [r2]
	lsls r0, r0, #1
	movs r1, #0x50
	subs r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x33
	strb r1, [r0]
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r0, #0x78
	adds r1, r3, #0
	adds r1, #0x2e
	strb r0, [r1]
	ldrb r0, [r2]
	lsls r0, r0, #1
	adds r0, #0x50
	adds r1, #4
	strb r0, [r1]
_080ABB5E:
	adds r2, r3, #0
	adds r2, #0x35
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r2, #1
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0x27
	bls _080ABBA8
	mov r0, ip
	bl Proc_ClearNativeCallback
_080ABBA8:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80ABBB0
sub_80ABBB0: @ 0x080ABBB0
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _080ABBE0  @ gUnknown_08A2073C
	adds r1, r3, #0
	bl Proc_CreateBlockingChild
	adds r2, r0, #0
	adds r2, #0x2a
	movs r1, #0
	strb r4, [r2]
	adds r2, #1
	strb r5, [r2]
	adds r0, #0x29
	strb r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080ABBE0: .4byte gUnknown_08A2073C

	THUMB_FUNC_START sub_80ABBE4
sub_80ABBE4: @ 0x080ABBE4
	push {lr}
	ldr r0, _080ABBF8  @ gBG2TilemapBuffer
	ldr r1, _080ABBFC  @ 0x06007000
	movs r2, #0x80
	lsls r2, r2, #4
	bl RegisterTileGraphics
	pop {r0}
	bx r0
	.align 2, 0
_080ABBF8: .4byte gBG2TilemapBuffer
_080ABBFC: .4byte 0x06007000

	THUMB_FUNC_START sub_80ABC00
sub_80ABC00: @ 0x080ABC00
	push {lr}
	adds r1, r0, #0
	ldr r0, _080ABC10  @ gUnknown_08A2075C
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080ABC10: .4byte gUnknown_08A2075C

	THUMB_FUNC_START sub_80ABC14
sub_80ABC14: @ 0x080ABC14
	push {r4, r5, r6, r7, lr}
	sub sp, #0x120
	adds r7, r1, #0
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	adds r6, r5, #0
	cmp r5, #2
	bls _080ABC26
	b _080ABD48
_080ABC26:
	adds r0, r5, #0
	bl sub_80A5218
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq _080ABD04
	adds r0, r5, #0
	mov r1, sp
	bl sub_80A522C
	mov r0, sp
	movs r2, #0xe
	ldrsb r2, [r0, r2]
	ldrb r1, [r0, #0x14]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _080ABC6C
	mov r0, sp
	adds r0, #0x4a
	ldrb r1, [r0]
	movs r0, #0xe
	ands r0, r1
	cmp r0, #8
	bne _080ABC6C
	add r4, sp, #0x4c
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80A5274
	adds r0, r4, #0
	bl sub_80BD224
	adds r2, r0, #0
_080ABC6C:
	mov r0, sp
	movs r4, #0xe
	ldrsb r4, [r0, r4]
	movs r5, #0
	strb r2, [r0, #0xe]
	bl sub_8089768
	adds r1, r7, #0
	adds r1, #0x37
	adds r1, r1, r6
	strb r0, [r1]
	mov r0, sp
	strb r4, [r0, #0xe]
	lsls r1, r6, #2
	adds r0, r7, #0
	adds r0, #0x48
	adds r0, r0, r1
	ldr r1, [sp]
	str r1, [r0]
	adds r0, r7, #0
	adds r0, #0x3a
	adds r4, r0, r6
	strb r5, [r4]
	adds r0, r6, #0
	bl sub_80A52BC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080ABCAE
	ldrb r0, [r4]
	movs r1, #1
	orrs r0, r1
	strb r0, [r4]
_080ABCAE:
	adds r0, r6, #0
	bl sub_80A5290
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080ABCC2
	ldrb r0, [r4]
	movs r1, #2
	orrs r0, r1
	strb r0, [r4]
_080ABCC2:
	mov r0, sp
	ldrb r1, [r0, #0x14]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080ABCD6
	ldrb r0, [r4]
	movs r1, #4
	orrs r0, r1
	strb r0, [r4]
_080ABCD6:
	ldr r0, _080ABCF8  @ gUnknown_02000940
	adds r0, r6, r0
	mov r1, sp
	ldrb r1, [r1, #0x14]
	strb r1, [r0]
	ldr r0, _080ABCFC  @ gUnknown_02000944
	adds r0, r6, r0
	mov r1, sp
	ldrb r1, [r1, #0x1b]
	strb r1, [r0]
	lsls r1, r6, #3
	ldr r0, _080ABD00  @ gUnknown_02000948
	adds r1, r1, r0
	add r0, sp, #0x40
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	b _080ABD7E
	.align 2, 0
_080ABCF8: .4byte gUnknown_02000940
_080ABCFC: .4byte gUnknown_02000944
_080ABD00: .4byte gUnknown_02000948
_080ABD04:
	adds r0, r7, #0
	adds r0, #0x37
	adds r0, r0, r6
	movs r1, #0xff
	strb r1, [r0]
	adds r0, r7, #0
	adds r0, #0x3a
	adds r0, r0, r6
	strb r2, [r0]
	lsls r1, r6, #2
	adds r0, r7, #0
	adds r0, #0x48
	adds r0, r0, r1
	str r2, [r0]
	ldr r0, _080ABD3C  @ gUnknown_02000940
	adds r0, r6, r0
	strb r2, [r0]
	ldr r0, _080ABD40  @ gUnknown_02000944
	adds r0, r6, r0
	strb r2, [r0]
	lsls r0, r6, #3
	ldr r1, _080ABD44  @ gUnknown_02000948
	adds r0, r0, r1
	movs r1, #0
	movs r2, #8
	bl memset
	b _080ABD7E
	.align 2, 0
_080ABD3C: .4byte gUnknown_02000940
_080ABD40: .4byte gUnknown_02000944
_080ABD44: .4byte gUnknown_02000948
_080ABD48:
	adds r4, r7, #0
	adds r4, #0x44
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bne _080ABD7E
	movs r0, #3
	bl sub_80A5DA8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080ABD7A
	movs r0, #3
	mov r1, sp
	bl sub_80A5DFC
	mov r0, sp
	ldrb r0, [r0, #0xc]
	adds r1, r7, #0
	adds r1, #0x3f
	strb r0, [r1]
	ldr r0, [sp]
	str r0, [r7, #0x54]
	b _080ABD7E
_080ABD7A:
	movs r0, #0xf0
	strh r0, [r4]
_080ABD7E:
	add sp, #0x120
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80ABD88
sub_80ABD88: @ 0x080ABD88
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	movs r6, #0
	movs r7, #0x40
_080ABD98:
	ldr r0, _080ABDE0  @ gUnknown_02000940
	adds r0, r6, r0
	ldrb r1, [r0]
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	negs r0, r0
	asrs r5, r0, #0x1f
	movs r0, #4
	ands r5, r0
	ldr r1, _080ABDE4  @ gUnknown_02000948
	lsls r0, r6, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x1a
	cmp r0, #0
	blt _080ABDEC
	ldr r0, _080ABDE8  @ gUnknown_02000944
	adds r0, r6, r0
	ldrb r1, [r0]
	cmp r1, #1
	bne _080ABDCA
	movs r0, #0x10
	orrs r5, r0
_080ABDCA:
	cmp r1, #2
	bne _080ABDD6
	movs r0, #0x20
	orrs r5, r0
	lsls r0, r5, #0x18
	lsrs r5, r0, #0x18
_080ABDD6:
	cmp r1, #3
	bne _080ABDFE
_080ABDDA:
	orrs r5, r7
	b _080ABDFE
	.align 2, 0
_080ABDE0: .4byte gUnknown_02000940
_080ABDE4: .4byte gUnknown_02000948
_080ABDE8: .4byte gUnknown_02000944
_080ABDEC:
	ldr r0, _080ABE38  @ gUnknown_02000944
	adds r0, r6, r0
	ldrb r0, [r0]
	cmp r0, #3
	beq _080ABDDA
	movs r0, #0x20
	orrs r5, r0
	lsls r0, r5, #0x18
	lsrs r5, r0, #0x18
_080ABDFE:
	cmp r6, r8
	beq _080ABE0A
	movs r0, #2
	orrs r5, r0
	lsls r0, r5, #0x18
	lsrs r5, r0, #0x18
_080ABE0A:
	movs r1, #1
	adds r0, r5, #0
	orrs r0, r1
	lsls r4, r6, #1
	adds r1, r4, #0
	adds r1, #0x1a
	bl sub_80895B4
	adds r4, #0x1b
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80895B4
	adds r6, #1
	cmp r6, #2
	ble _080ABD98
	bl EnablePaletteSync
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ABE38: .4byte gUnknown_02000944

	THUMB_FUNC_START sub_80ABE3C
sub_80ABE3C: @ 0x080ABE3C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r5, r0, #0
	str r1, [sp]
	asrs r5, r5, #1
	movs r0, #0x1f
	ands r5, r0
	cmp r5, #0x10
	ble _080ABE5E
	movs r0, #0xf
	ands r0, r5
	movs r1, #0x10
	subs r5, r1, r0
_080ABE5E:
	movs r2, #0
_080ABE60:
	ldr r1, _080ABE90  @ gUnknown_02000940
	adds r0, r2, r1
	ldrb r1, [r0]
	movs r0, #0x40
	ands r0, r1
	adds r1, r2, #1
	str r1, [sp, #4]
	cmp r0, #0
	beq _080ABF22
	lsls r0, r2, #6
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r1, _080ABE94  @ gUnknown_02022ABA
	adds r0, r0, r1
	mov r8, r0
	ldr r0, [sp]
	cmp r2, r0
	bne _080ABEA0
	ldr r1, _080ABE98  @ gUnknown_08A07AEA
	mov ip, r1
	ldr r6, _080ABE9C  @ gUnknown_08A07BEA
	b _080ABEA6
	.align 2, 0
_080ABE90: .4byte gUnknown_02000940
_080ABE94: .4byte gUnknown_02022ABA
_080ABE98: .4byte gUnknown_08A07AEA
_080ABE9C: .4byte gUnknown_08A07BEA
_080ABEA0:
	ldr r0, _080ABF3C  @ gUnknown_08A07B0A
	mov ip, r0
	ldr r6, _080ABF40  @ gUnknown_08A07C0A
_080ABEA6:
	adds r2, #1
	str r2, [sp, #4]
	movs r0, #0x10
	subs r7, r0, r5
	movs r1, #0xf8
	lsls r1, r1, #7
	mov sl, r1
	movs r0, #6
	mov r9, r0
_080ABEB8:
	mov r1, ip
	ldrh r4, [r1]
	movs r0, #0x1f
	ands r0, r4
	adds r2, r0, #0
	muls r2, r5, r2
	ldrh r3, [r6]
	movs r0, #0x1f
	ands r0, r3
	muls r0, r7, r0
	adds r2, r2, r0
	asrs r2, r2, #4
	movs r0, #0x1f
	ands r2, r0
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r3
	muls r0, r7, r0
	adds r1, r1, r0
	asrs r1, r1, #4
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r1, r0
	adds r2, r2, r1
	mov r0, sl
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	mov r0, sl
	ands r0, r3
	muls r0, r7, r0
	adds r1, r1, r0
	asrs r1, r1, #4
	mov r0, sl
	ands r1, r0
	adds r2, r2, r1
	mov r1, r8
	strh r2, [r1]
	movs r0, #2
	add r8, r0
	add ip, r0
	adds r6, #2
	movs r1, #1
	negs r1, r1
	add r9, r1
	mov r0, r9
	cmp r0, #0
	bge _080ABEB8
_080ABF22:
	ldr r2, [sp, #4]
	cmp r2, #2
	ble _080ABE60
	bl EnablePaletteSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ABF3C: .4byte gUnknown_08A07B0A
_080ABF40: .4byte gUnknown_08A07C0A

	THUMB_FUNC_START sub_80ABF44
sub_80ABF44: @ 0x080ABF44
	push {r4, lr}
	adds r4, r1, #0
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r1, #0
	movs r2, #1
	cmp r2, r3
	bge _080ABF6A
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r4, [r0]
_080ABF5A:
	adds r0, r4, #0
	ands r0, r2
	cmp r0, #0
	beq _080ABF64
	adds r1, #1
_080ABF64:
	lsls r2, r2, #1
	cmp r2, r3
	blt _080ABF5A
_080ABF6A:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80ABF74
sub_80ABF74: @ 0x080ABF74
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r1, #0x60
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _080ABF94
	ldr r6, _080ABF90  @ 0x06014000
	movs r2, #0xe
	movs r4, #2
	b _080ABFA6
	.align 2, 0
_080ABF90: .4byte 0x06014000
_080ABF94:
	movs r0, #0x10
	ands r0, r3
	cmp r0, #0
	beq _080ABFA2
	ldr r6, _080ABFD4  @ 0x06014800
	movs r2, #0xe
	movs r4, #2
_080ABFA2:
	cmp r4, #0
	ble _080ABFC8
_080ABFA6:
	lsls r7, r2, #3
	ldr r5, _080ABFD8  @ 0x060121C0
	ldr r0, _080ABFDC  @ 0x001FFFFF
	mov r8, r0
_080ABFAE:
	adds r0, r6, #0
	adds r1, r5, #0
	mov r2, r8
	ands r2, r7
	bl CpuFastSet
	movs r0, #0x80
	lsls r0, r0, #3
	adds r6, r6, r0
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bne _080ABFAE
_080ABFC8:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ABFD4: .4byte 0x06014800
_080ABFD8: .4byte 0x060121C0
_080ABFDC: .4byte 0x001FFFFF

	THUMB_FUNC_START sub_80ABFE0
sub_80ABFE0: @ 0x080ABFE0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r6, #0
	adds r4, #0x38
	movs r5, #4
_080ABFEA:
	adds r0, r4, #0
	bl Text_Clear
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _080ABFEA
	adds r4, r6, #0
	adds r4, #0x38
	ldr r1, _080AC020  @ gUnknown_08A20A08
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetStringFromIndex
_080AC00E:
	adds r1, r0, #0
_080AC010:
	ldrb r0, [r1]
	cmp r0, #0
	beq _080AC02C
	cmp r0, #1
	bne _080AC024
	adds r4, #8
	adds r1, #1
	b _080AC010
	.align 2, 0
_080AC020: .4byte gUnknown_08A20A08
_080AC024:
	adds r0, r4, #0
	bl Text_AppendChar
	b _080AC00E
_080AC02C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AC034
sub_80AC034: @ 0x080AC034
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r4, _080AC070  @ gUnknown_02022E76
	adds r0, r4, #0
	movs r1, #0xe
	movs r2, #0xa
	movs r3, #0
	bl TileMap_FillRect
	movs r6, #0xe0
	lsls r6, r6, #1
	adds r5, #0x38
	ldr r0, _080AC074  @ 0xFFFFFE56
	adds r7, r4, r0
	movs r4, #4
_080AC052:
	adds r1, r6, r7
	adds r0, r5, #0
	bl Text_Draw
	adds r6, #0x80
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _080AC052
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AC070: .4byte gUnknown_02022E76
_080AC074: .4byte 0xFFFFFE56

	THUMB_FUNC_START sub_80AC078
sub_80AC078: @ 0x080AC078
	ldr r0, [r0, #0x14]
	ldr r0, [r0, #0x58]
	adds r0, #0x29
	movs r1, #1
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80AC084
sub_80AC084: @ 0x080AC084
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	bl sub_8003D20
	bl LoadUiFrameGraphics
	bl Font_InitForUIDefault
	adds r4, r7, #0
	adds r4, #0x38
	movs r5, #4
_080AC09A:
	adds r0, r4, #0
	movs r1, #0xe
	bl Text_Init
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _080AC09A
	movs r6, #0
	ldr r0, _080AC178  @ gUnknown_08A25DCC
	movs r4, #0x80
	lsls r4, r4, #1
	adds r1, r4, #0
	adds r2, r4, #0
	bl CopyToPaletteBuffer
	ldr r0, _080AC17C  @ gUnknown_08A268D8
	movs r1, #0xe0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080AC180  @ gUnknown_08A27F68
	movs r1, #0x90
	lsls r1, r1, #2
	adds r2, r4, #0
	bl CopyToPaletteBuffer
	ldr r0, _080AC184  @ gUnknown_08A295B4
	movs r1, #0x40
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080AC188  @ gUnknown_08A28A0C
	ldr r1, _080AC18C  @ 0x06010800
	bl CopyDataWithPossibleUncomp
	ldr r0, _080AC190  @ gUnknown_08A29418
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0xa0
	lsls r2, r2, #1
	bl CopyToPaletteBuffer
	bl EnablePaletteSync
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x58]
	adds r0, #0x29
	strb r6, [r0]
	ldr r0, _080AC194  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r4, _080AC198  @ gBG1TilemapBuffer
	adds r0, r4, #0
	movs r1, #0
	bl BG_Fill
	ldr r0, _080AC19C  @ gUnknown_08A29558
	ldr r5, _080AC1A0  @ gUnknown_02020188
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	movs r0, #0xd1
	lsls r0, r0, #1
	adds r4, r4, r0
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r4, #0
	adds r1, r5, #0
	bl CallARM_FillTileRect
	adds r0, r7, #0
	bl sub_80ABFE0
	adds r0, r7, #0
	bl sub_80AC034
	movs r0, #3
	bl BG_EnableSyncByMask
	adds r0, r7, #0
	bl sub_80AC698
	str r0, [r7, #0x34]
	adds r1, r7, #0
	adds r1, #0x30
	strb r6, [r1]
	ldr r0, [r7, #0x34]
	adds r0, #0x2b
	strb r6, [r0]
	ldr r2, [r7, #0x34]
	ldr r3, _080AC1A4  @ gUnknown_08A209FC
	ldrb r0, [r1]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r2, #0x2c]
	ldr r2, [r7, #0x34]
	ldrb r0, [r1]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldrb r0, [r0, #1]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r2, #0x2e]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AC178: .4byte gUnknown_08A25DCC
_080AC17C: .4byte gUnknown_08A268D8
_080AC180: .4byte gUnknown_08A27F68
_080AC184: .4byte gUnknown_08A295B4
_080AC188: .4byte gUnknown_08A28A0C
_080AC18C: .4byte 0x06010800
_080AC190: .4byte gUnknown_08A29418
_080AC194: .4byte gBG0TilemapBuffer
_080AC198: .4byte gBG1TilemapBuffer
_080AC19C: .4byte gUnknown_08A29558
_080AC1A0: .4byte gUnknown_02020188
_080AC1A4: .4byte gUnknown_08A209FC

	THUMB_FUNC_START sub_80AC1A8
sub_80AC1A8: @ 0x080AC1A8
	push {lr}
	adds r2, r0, #0
	adds r2, #0x30
	movs r1, #0
	strb r1, [r2]
	str r1, [r0, #0x2c]
	bl sub_80AC084
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AC1BC
sub_80AC1BC: @ 0x080AC1BC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x2c]
	adds r4, r0, #1
	str r4, [r5, #0x2c]
	ldr r3, _080AC228  @ gLCDControlBuffer
	ldrb r0, [r3, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3, #1]
	movs r1, #0x10
	subs r1, r1, r4
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	muls r0, r1, r0
	cmp r0, #0
	bge _080AC1F2
	adds r0, #0xff
_080AC1F2:
	asrs r0, r0, #8
	movs r1, #0x50
	subs r1, r1, r0
	adds r2, r3, #0
	adds r2, #0x2d
	movs r0, #0
	strb r0, [r2]
	movs r0, #0x50
	subs r0, r0, r1
	adds r2, #4
	strb r0, [r2]
	subs r2, #5
	movs r0, #0xf0
	strb r0, [r2]
	adds r1, #0x50
	adds r0, r3, #0
	adds r0, #0x30
	strb r1, [r0]
	cmp r4, #0x10
	bne _080AC220
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080AC220:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AC228: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80AC22C
sub_80AC22C: @ 0x080AC22C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x2c]
	adds r4, r0, #1
	str r4, [r5, #0x2c]
	movs r1, #0x10
	subs r1, r1, r4
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	muls r0, r1, r0
	cmp r0, #0
	bge _080AC248
	adds r0, #0xff
_080AC248:
	asrs r0, r0, #8
	movs r2, #0x50
	subs r2, r2, r0
	ldr r3, _080AC284  @ gLCDControlBuffer
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r1, #1
	movs r0, #0xf0
	strb r0, [r1]
	movs r1, #0x60
	negs r1, r1
	adds r0, r1, #0
	subs r0, r0, r2
	adds r1, r3, #0
	adds r1, #0x30
	strb r0, [r1]
	cmp r4, #0x10
	bne _080AC27C
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080AC27C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AC284: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80AC288
sub_80AC288: @ 0x080AC288
	push {r4, lr}
	adds r4, r0, #0
	movs r2, #0
	ldr r0, _080AC2AC  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080AC2B8
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #0
	bne _080AC2B0
	movs r0, #2
	b _080AC2B2
	.align 2, 0
_080AC2AC: .4byte gKeyStatusPtr
_080AC2B0:
	subs r0, #1
_080AC2B2:
	strb r0, [r1]
	movs r2, #1
	b _080AC2D8
_080AC2B8:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080AC2D4
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #2
	bne _080AC2CE
	strb r2, [r1]
	b _080AC2D2
_080AC2CE:
	adds r0, #1
	strb r0, [r1]
_080AC2D2:
	movs r2, #1
_080AC2D4:
	cmp r2, #0
	beq _080AC324
_080AC2D8:
	ldr r0, _080AC31C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AC2EA
	movs r0, #0x66
	bl m4aSongNumStart
_080AC2EA:
	ldr r0, [r4, #0x34]
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r1, [r2]
	adds r0, #0x2b
	strb r1, [r0]
	ldr r0, [r4, #0x34]
	ldr r1, _080AC320  @ gUnknown_08A209FC
	ldrb r2, [r2]
	lsls r2, r2, #2
	adds r2, r2, r1
	movs r1, #0
	ldrsb r1, [r2, r1]
	ldrb r2, [r2, #1]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl sub_80AC680
	adds r0, r4, #0
	bl sub_80ABFE0
	adds r0, r4, #0
	bl sub_80AC034
	b _080AC3CC
	.align 2, 0
_080AC31C: .4byte gUnknown_0202BCF0
_080AC320: .4byte gUnknown_08A209FC
_080AC324:
	ldr r0, [r4, #0x34]
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _080AC3CC
	ldr r0, _080AC36C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #9
	ands r0, r1
	cmp r0, #0
	beq _080AC398
	str r2, [r4, #0x2c]
	ldr r0, _080AC370  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AC358
	movs r0, #0x6a
	bl m4aSongNumStart
_080AC358:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #1
	beq _080AC37E
	cmp r0, #1
	bgt _080AC374
	cmp r0, #0
	beq _080AC37A
	b _080AC390
	.align 2, 0
_080AC36C: .4byte gKeyStatusPtr
_080AC370: .4byte gUnknown_0202BCF0
_080AC374:
	cmp r0, #2
	beq _080AC388
	b _080AC390
_080AC37A:
	movs r0, #0
	b _080AC380
_080AC37E:
	movs r0, #1
_080AC380:
	movs r1, #0
	bl savemenu_SetDifficultyChoice
	b _080AC390
_080AC388:
	movs r0, #2
	movs r1, #0
	bl savemenu_SetDifficultyChoice
_080AC390:
	adds r0, r4, #0
	movs r1, #1
	bl Proc_GotoLabel
_080AC398:
	ldr r0, _080AC3D4  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080AC3CC
	movs r0, #0
	str r0, [r4, #0x2c]
	ldr r0, _080AC3D8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AC3BC
	movs r0, #0x6b
	bl m4aSongNumStart
_080AC3BC:
	movs r0, #3
	movs r1, #0
	bl savemenu_SetDifficultyChoice
	adds r0, r4, #0
	movs r1, #2
	bl Proc_GotoLabel
_080AC3CC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AC3D4: .4byte gKeyStatusPtr
_080AC3D8: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START nullsub_64
nullsub_64: @ 0x080AC3DC
	bx lr

	THUMB_FUNC_START NewNewGameDifficultySelect
NewNewGameDifficultySelect: @ 0x080AC3E0
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AC3F0  @ gUnknown_08A20A10
	bl Proc_CreateBlockingChild
	pop {r0}
	bx r0
	.align 2, 0
_080AC3F0: .4byte gUnknown_08A20A10

	THUMB_FUNC_START sub_80AC3F4
sub_80AC3F4: @ 0x080AC3F4
	adds r2, r0, #0
	adds r3, r2, #0
	adds r3, #0x29
	ldrb r1, [r3]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	strb r0, [r3]
	adds r1, r2, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
	strh r0, [r2, #0x2e]
	strh r0, [r2, #0x2c]
	bx lr

	THUMB_FUNC_START sub_80AC418
sub_80AC418: @ 0x080AC418
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080AC452
	ldrh r0, [r6, #0x34]
	ldrh r2, [r6, #0x30]
	subs r0, r0, r2
	movs r3, #0
	strh r0, [r6, #0x38]
	ldrh r0, [r6, #0x36]
	ldrh r1, [r6, #0x32]
	subs r0, r0, r1
	strh r0, [r6, #0x3a]
	strh r2, [r6, #0x2c]
	strh r1, [r6, #0x2e]
	strh r3, [r6, #0x3c]
	ldrb r1, [r4]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r4]
_080AC452:
	ldrb r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080AC4B8
	ldrh r0, [r6, #0x3c]
	adds r0, #1
	strh r0, [r6, #0x3c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	bgt _080AC4A6
	movs r1, #0x3c
	ldrsh r0, [r6, r1]
	movs r1, #4
	movs r2, #0
	bl sub_800B84C
	adds r4, r0, #0
	movs r5, #0x80
	lsls r5, r5, #5
	movs r3, #0x38
	ldrsh r0, [r6, r3]
	adds r1, r0, #0
	muls r1, r4, r1
	adds r0, r5, #0
	bl DivArm
	ldrh r1, [r6, #0x30]
	adds r1, r1, r0
	strh r1, [r6, #0x2c]
	movs r1, #0x3a
	ldrsh r0, [r6, r1]
	adds r1, r0, #0
	muls r1, r4, r1
	adds r0, r5, #0
	bl DivArm
	ldrh r1, [r6, #0x32]
	adds r1, r1, r0
	strh r1, [r6, #0x2e]
	b _080AC4B8
_080AC4A6:
	ldrh r0, [r6, #0x34]
	strh r0, [r6, #0x2c]
	ldrh r0, [r6, #0x36]
	strh r0, [r6, #0x2e]
	ldrb r1, [r4]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
_080AC4B8:
	movs r3, #0x2c
	ldrsh r1, [r6, r3]
	ldr r3, _080AC4F0  @ gUnknown_08A20B14
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsrs r0, r0, #3
	movs r2, #7
	ands r0, r2
	adds r0, r0, r3
	movs r3, #0x2e
	ldrsh r2, [r6, r3]
	ldrb r0, [r0]
	adds r2, r2, r0
	movs r0, #0xff
	ands r2, r0
	ldr r3, _080AC4F4  @ gUnknown_08A20A98
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AC4F0: .4byte gUnknown_08A20B14
_080AC4F4: .4byte gUnknown_08A20A98

	THUMB_FUNC_START sub_80AC4F8
sub_80AC4F8: @ 0x080AC4F8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov ip, r0
	lsls r1, r1, #0x18
	lsrs r3, r1, #0x18
	movs r2, #0
	ldr r7, _080AC530  @ gPaletteBuffer
	ldr r0, _080AC534  @ gUnknown_08A28088
	mov r8, r0
	lsls r0, r3, #6
	ldr r1, _080AC538  @ 0x000002A2
	adds r0, r0, r1
	adds r6, r0, r7
	lsls r1, r3, #6
	ldr r0, _080AC53C  @ 0x000002C2
	adds r4, r7, r0
	ldr r0, _080AC540  @ gUnknown_08A2949A
	adds r5, r1, r0
_080AC522:
	cmp r2, r3
	bne _080AC544
	ldrh r0, [r5]
	strh r0, [r6]
	lsls r1, r2, #5
	b _080AC550
	.align 2, 0
_080AC530: .4byte gPaletteBuffer
_080AC534: .4byte gUnknown_08A28088
_080AC538: .4byte 0x000002A2
_080AC53C: .4byte 0x000002C2
_080AC540: .4byte gUnknown_08A2949A
_080AC544:
	lsls r0, r2, #6
	ldr r1, _080AC580  @ gUnknown_08A294BA
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4]
	lsls r1, r3, #5
_080AC550:
	adds r4, #0x40
	adds r2, #1
	cmp r2, #2
	ble _080AC522
	movs r0, #0x3f
	mov r2, ip
	ands r0, r2
	lsrs r0, r0, #2
	ldr r2, _080AC584  @ 0x00000151
	adds r1, r1, r2
	lsls r1, r1, #1
	adds r1, r1, r7
	lsls r0, r0, #1
	add r0, r8
	ldrh r0, [r0]
	strh r0, [r1]
	bl EnablePaletteSync
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AC580: .4byte gUnknown_08A294BA
_080AC584: .4byte 0x00000151

	THUMB_FUNC_START sub_80AC588
sub_80AC588: @ 0x080AC588
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x2a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r3, _080AC600  @ gUnknown_08A20AA0
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x38
	movs r2, #4
	bl RegisterObjectAttributes
	ldr r3, _080AC604  @ gUnknown_08A20AAE
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	movs r1, #0x38
	movs r2, #4
	bl RegisterObjectAttributes
	movs r5, #0
	movs r0, #0x2b
	adds r0, r0, r6
	mov sl, r0
	movs r1, #6
	mov r9, r1
	movs r2, #5
	mov r8, r2
	movs r7, #0xc0
	lsls r7, r7, #0xe
_080AC5D8:
	lsrs r4, r7, #0x10
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r5, r0
	bne _080AC60C
	lsls r4, r4, #0x10
	asrs r2, r4, #0x10
	movs r0, #0xf
	mov r1, r8
	ands r0, r1
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	movs r1, #8
	ldr r3, _080AC608  @ gUnknown_08A20AC2
	bl RegisterObjectAttributes
	b _080AC624
	.align 2, 0
_080AC600: .4byte gUnknown_08A20AA0
_080AC604: .4byte gUnknown_08A20AAE
_080AC608: .4byte gUnknown_08A20AC2
_080AC60C:
	lsls r4, r4, #0x10
	asrs r2, r4, #0x10
	movs r0, #0xf
	mov r1, r9
	ands r0, r1
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	movs r1, #8
	ldr r3, _080AC678  @ gUnknown_08A20AC2
	bl RegisterObjectAttributes
_080AC624:
	asrs r2, r4, #0x10
	ldr r1, _080AC67C  @ gUnknown_08A20B08
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	movs r4, #0x80
	lsls r4, r4, #0xc
	asrs r1, r4, #0x10
	bl RegisterObjectAttributes
	movs r0, #2
	add r9, r0
	add r8, r0
	movs r1, #0x80
	lsls r1, r1, #0xe
	adds r7, r7, r1
	adds r5, #1
	cmp r5, #2
	ble _080AC5D8
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	mov r2, sl
	ldrb r1, [r2]
	bl sub_80AC4F8
	adds r0, r6, #0
	bl sub_80AC418
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AC678: .4byte gUnknown_08A20AC2
_080AC67C: .4byte gUnknown_08A20B08

	THUMB_FUNC_START sub_80AC680
sub_80AC680: @ 0x080AC680
	ldrh r3, [r0, #0x2c]
	strh r3, [r0, #0x30]
	ldrh r3, [r0, #0x2e]
	strh r3, [r0, #0x32]
	strh r1, [r0, #0x34]
	strh r2, [r0, #0x36]
	adds r0, #0x29
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80AC698
sub_80AC698: @ 0x080AC698
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AC6A8  @ gUnknown_08A20B1C
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080AC6A8: .4byte gUnknown_08A20B1C

	THUMB_FUNC_START sub_80AC6AC
sub_80AC6AC: @ 0x080AC6AC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	str r0, [sp]
	str r1, [sp, #4]
	mov r9, r2
	mov sl, r3
	ldr r3, [sp, #0x40]
	ldr r0, _080AC780  @ 0xFFFFFC00
	adds r0, r0, r3
	mov r8, r0
	mov r1, r8
	muls r1, r0, r1
	lsls r5, r3, #1
	movs r6, #0x80
	lsls r6, r6, #3
	adds r0, r5, r6
	muls r0, r1, r0
	asrs r1, r0, #0x1f
	adds r4, r3, #0
	muls r4, r3, r4
	movs r2, #0xc0
	lsls r2, r2, #4
	subs r2, r2, r5
	muls r4, r2, r4
	asrs r5, r4, #0x1f
	subs r6, r6, r3
	adds r2, r6, #0
	muls r2, r6, r2
	muls r2, r3, r2
	str r2, [sp, #0x18]
	asrs r2, r2, #0x1f
	str r2, [sp, #0x1c]
	mov r2, r8
	muls r2, r3, r2
	muls r2, r3, r2
	str r2, [sp, #8]
	asrs r2, r2, #0x1f
	str r2, [sp, #0xc]
	ldr r2, [sp, #4]
	asrs r3, r2, #0x1f
	bl __muldi3
	str r0, [sp, #0x10]
	str r1, [sp, #0x14]
	mov r2, r9
	asrs r3, r2, #0x1f
	adds r1, r5, #0
	adds r0, r4, #0
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r2, r2, r0
	adcs r3, r1
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	mov r3, r9
	ldr r6, [sp]
	subs r3, r3, r6
	mov r9, r3
	asrs r0, r3, #1
	adds r2, r0, #0
	mov r0, r9
	asrs r3, r0, #0x1f
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r2, r2, r0
	adcs r3, r1
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	mov r3, sl
	ldr r6, [sp, #4]
	subs r3, r3, r6
	mov sl, r3
	asrs r0, r3, #1
	adds r2, r0, #0
	mov r0, sl
	asrs r3, r0, #0x1f
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r0, r0, r2
	adcs r1, r3
	lsls r3, r1, #2
	lsrs r2, r0, #0x1e
	adds r0, r3, #0
	orrs r0, r2
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080AC780: .4byte 0xFFFFFC00

	THUMB_FUNC_START sub_80AC784
sub_80AC784: @ 0x080AC784
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	mov sl, r0
	mov r9, r1
	adds r6, r2, #0
	mov r8, r3
	ldr r2, [sp, #0x38]
	lsls r3, r2, #1
	adds r3, r3, r2
	lsls r0, r3, #1
	adds r4, r2, #0
	muls r4, r0, r4
	lsls r5, r3, #0xb
	subs r0, r4, r5
	asrs r1, r0, #0x1f
	subs r4, r5, r4
	str r4, [sp]
	asrs r4, r4, #0x1f
	str r4, [sp, #4]
	muls r3, r2, r3
	lsls r4, r2, #0xc
	subs r4, r3, r4
	movs r5, #0x80
	lsls r5, r5, #0xd
	adds r4, r4, r5
	asrs r5, r4, #0x1f
	lsls r2, r2, #0xb
	subs r2, r3, r2
	str r2, [sp, #8]
	asrs r2, r2, #0x1f
	str r2, [sp, #0xc]
	mov r2, r9
	asrs r3, r2, #0x1f
	bl __muldi3
	str r0, [sp, #0x10]
	str r1, [sp, #0x14]
	adds r2, r6, #0
	asrs r3, r6, #0x1f
	ldr r0, [sp]
	ldr r1, [sp, #4]
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r2, r2, r0
	adcs r3, r1
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	mov r3, sl
	subs r6, r6, r3
	asrs r0, r6, #1
	adds r2, r0, #0
	asrs r3, r6, #0x1f
	adds r1, r5, #0
	adds r0, r4, #0
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r2, r2, r0
	adcs r3, r1
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	mov r3, r8
	mov r5, r9
	subs r3, r3, r5
	mov r8, r3
	asrs r0, r3, #1
	adds r2, r0, #0
	mov r7, r8
	asrs r3, r7, #0x1f
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r0, r0, r2
	adcs r1, r3
	lsls r3, r1, #0xc
	lsrs r2, r0, #0x14
	adds r0, r3, #0
	orrs r0, r2
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AC844
sub_80AC844: @ 0x080AC844
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	adds r5, r1, #0
	adds r4, r2, #0
	ldr r0, [sp, #0x24]
	mov r8, r0
	ldr r7, [sp, #0x28]
	ldr r1, [sp, #0x2c]
	mov r9, r1
	movs r0, #3
	ands r0, r3
	bl BG_GetMapBuffer
	str r0, [sp]
	lsls r4, r4, #5
	adds r4, r4, r5
	lsls r4, r4, #1
	add sl, r4
	mov r2, r8
	cmp r2, #0
	bge _080AC886
	add r9, r8
	lsls r0, r2, #1
	mov r1, sl
	subs r1, r1, r0
	mov sl, r1
	movs r2, #0
	mov r8, r2
_080AC886:
	cmp r7, #0
	bge _080AC89A
	ldr r0, [sp, #0x30]
	adds r0, r0, r7
	str r0, [sp, #0x30]
	lsls r0, r7, #6
	mov r1, sl
	subs r1, r1, r0
	mov sl, r1
	movs r7, #0
_080AC89A:
	movs r1, #0
	cmp r7, #0x1f
	bgt _080AC8F4
	ldr r2, [sp, #0x30]
	cmp r1, r2
	bge _080AC8F4
_080AC8A6:
	movs r5, #0
	adds r4, r1, #1
	mov r0, r8
	cmp r0, #0x1f
	bgt _080AC8E6
	cmp r5, r9
	bge _080AC8E6
	adds r0, r7, r1
	movs r2, #0x1f
	mov ip, r2
	ands r0, r2
	lsls r6, r0, #5
	mov r2, r8
	lsls r0, r1, #6
	mov r1, sl
	adds r3, r0, r1
_080AC8C6:
	adds r0, r2, #0
	mov r1, ip
	ands r0, r1
	adds r0, r6, r0
	lsls r0, r0, #1
	ldr r1, [sp]
	adds r0, r0, r1
	ldrh r1, [r3]
	strh r1, [r0]
	adds r2, #1
	adds r3, #2
	adds r5, #1
	cmp r2, #0x1f
	bgt _080AC8E6
	cmp r5, r9
	blt _080AC8C6
_080AC8E6:
	adds r1, r4, #0
	adds r0, r7, r4
	cmp r0, #0x1f
	bgt _080AC8F4
	ldr r2, [sp, #0x30]
	cmp r4, r2
	blt _080AC8A6
_080AC8F4:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AC904
sub_80AC904: @ 0x080AC904
	push {r4, r5, r6, lr}
	movs r2, #0
	adds r4, r0, #0
	adds r4, #0x3c
	movs r3, #0
	movs r6, #0xf0
	adds r1, r0, #0
	adds r1, #0x2c
	movs r5, #0xa0
_080AC916:
	adds r0, r4, r2
	strb r3, [r0]
	strb r3, [r1]
	strb r3, [r1, #1]
	strb r6, [r1, #2]
	strb r5, [r1, #3]
	adds r1, #4
	adds r2, #1
	cmp r2, #3
	ble _080AC916
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AC930
sub_80AC930: @ 0x080AC930
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r7, #0
	adds r4, r6, #0
	adds r4, #0x2c
_080AC93C:
	adds r0, r6, #0
	adds r0, #0x3c
	adds r0, r0, r7
	ldrb r5, [r0]
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	beq _080AC9AA
	lsls r0, r7, #1
	adds r1, r6, #0
	adds r1, #0x40
	adds r1, r1, r0
	movs r2, #0
	ldrsh r3, [r1, r2]
	adds r1, r6, #0
	adds r1, #0x48
	adds r1, r1, r0
	movs r0, #0
	ldrsh r2, [r1, r0]
	ldrb r0, [r4]
	cmp r3, r0
	blt _080AC9AA
	ldrb r0, [r4, #2]
	cmp r3, r0
	bge _080AC9AA
	ldrb r0, [r4, #1]
	cmp r2, r0
	blt _080AC9AA
	ldrb r0, [r4, #3]
	cmp r2, r0
	bge _080AC9AA
	movs r0, #2
	ands r0, r5
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	beq _080AC99C
	adds r1, r3, #0
	subs r1, #0xc
	movs r0, #0
	str r0, [sp]
	movs r0, #3
	ldr r3, _080AC998  @ gUnknown_08A20B44
	bl RegisterObjectAttributes_SafeMaybe
	b _080AC9AA
	.align 2, 0
_080AC998: .4byte gUnknown_08A20B44
_080AC99C:
	adds r1, r3, #0
	subs r1, #0xc
	str r0, [sp]
	movs r0, #3
	ldr r3, _080AC9BC  @ gUnknown_08A20B3C
	bl RegisterObjectAttributes_SafeMaybe
_080AC9AA:
	adds r4, #4
	adds r7, #1
	cmp r7, #3
	ble _080AC93C
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AC9BC: .4byte gUnknown_08A20B3C

	THUMB_FUNC_START sub_80AC9C0
sub_80AC9C0: @ 0x080AC9C0
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AC9D0  @ gUnknown_08A20B4C
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080AC9D0: .4byte gUnknown_08A20B4C

	THUMB_FUNC_START sub_80AC9D4
sub_80AC9D4: @ 0x080AC9D4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r7, r1, #0
	mov r8, r2
	lsls r3, r3, #0x18
	lsrs r6, r3, #0x18
	ldr r0, _080ACA38  @ gUnknown_08A20B4C
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080ACA2E
	adds r1, r4, #0
	adds r1, #0x3c
	adds r1, r1, r5
	movs r3, #1
	movs r0, #1
	strb r0, [r1]
	lsls r2, r5, #1
	adds r0, r4, #0
	adds r0, #0x40
	adds r0, r0, r2
	strh r7, [r0]
	adds r0, r4, #0
	adds r0, #0x48
	adds r0, r0, r2
	mov r2, r8
	strh r2, [r0]
	adds r0, r6, #0
	orrs r0, r3
	strb r0, [r1]
	movs r0, #2
	ands r0, r6
	cmp r0, #0
	beq _080ACA2E
	ldr r0, _080ACA3C  @ gUnknown_0859EDB0
	ldr r1, _080ACA40  @ 0x060100C0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080ACA44  @ gUnknown_0859EDEC
	ldr r1, _080ACA48  @ 0x060104C0
	bl CopyDataWithPossibleUncomp
_080ACA2E:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ACA38: .4byte gUnknown_08A20B4C
_080ACA3C: .4byte gUnknown_0859EDB0
_080ACA40: .4byte 0x060100C0
_080ACA44: .4byte gUnknown_0859EDEC
_080ACA48: .4byte 0x060104C0

	THUMB_FUNC_START sub_80ACA4C
sub_80ACA4C: @ 0x080ACA4C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, _080ACA80  @ gUnknown_08A20B4C
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080ACA7A
	lsls r0, r4, #2
	adds r1, r1, r0
	adds r0, r1, #0
	adds r0, #0x2c
	strb r5, [r0]
	adds r0, #1
	strb r6, [r0]
	adds r0, #1
	strb r7, [r0]
	adds r1, #0x2f
	ldr r0, [sp, #0x14]
	strb r0, [r1]
_080ACA7A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ACA80: .4byte gUnknown_08A20B4C

	THUMB_FUNC_START sub_80ACA84
sub_80ACA84: @ 0x080ACA84
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080ACAA0  @ gUnknown_08A20B4C
	bl Proc_Find
	cmp r0, #0
	beq _080ACA9A
	adds r0, #0x3c
	adds r0, r0, r4
	movs r1, #0
	strb r1, [r0]
_080ACA9A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080ACAA0: .4byte gUnknown_08A20B4C

	THUMB_FUNC_START sub_80ACAA4
sub_80ACAA4: @ 0x080ACAA4
	push {lr}
	ldr r0, _080ACAC4  @ gUnknown_08A20B4C
	bl Proc_Find
	cmp r0, #0
	beq _080ACAC0
	adds r1, r0, #0
	adds r1, #0x3c
	movs r2, #0
	adds r0, #0x43
_080ACAB8:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _080ACAB8
_080ACAC0:
	pop {r0}
	bx r0
	.align 2, 0
_080ACAC4: .4byte gUnknown_08A20B4C

	THUMB_FUNC_START sub_80ACAC8
sub_80ACAC8: @ 0x080ACAC8
	push {lr}
	ldr r0, _080ACAE0  @ gUnknown_08A20B4C
	bl Proc_Find
	cmp r0, #0
	beq _080ACADA
	movs r1, #1
	bl Proc_GotoLabel
_080ACADA:
	pop {r0}
	bx r0
	.align 2, 0
_080ACAE0: .4byte gUnknown_08A20B4C

	THUMB_FUNC_START sub_80ACAE4
sub_80ACAE4: @ 0x080ACAE4
	push {lr}
	ldr r0, _080ACAFC  @ gUnknown_08A20B4C
	bl Proc_Find
	cmp r0, #0
	beq _080ACAF6
	movs r1, #0
	bl Proc_GotoLabel
_080ACAF6:
	pop {r0}
	bx r0
	.align 2, 0
_080ACAFC: .4byte gUnknown_08A20B4C

	THUMB_FUNC_START sub_80ACB00
sub_80ACB00: @ 0x080ACB00
	push {lr}
	ldr r0, _080ACB10  @ gUnknown_08A20B4C
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_080ACB10: .4byte gUnknown_08A20B4C

	THUMB_FUNC_START sub_80ACB14
sub_80ACB14: @ 0x080ACB14
	movs r1, #0
	str r1, [r0, #0x2c]
	adds r2, r0, #0
	adds r2, #0x54
	strh r1, [r2]
	str r1, [r0, #0x4c]
	str r1, [r0, #0x44]
	str r1, [r0, #0x3c]
	str r1, [r0, #0x34]
	str r1, [r0, #0x50]
	str r1, [r0, #0x48]
	str r1, [r0, #0x40]
	str r1, [r0, #0x38]
	str r1, [r0, #0x30]
	bx lr

	THUMB_FUNC_START sub_80ACB34
sub_80ACB34: @ 0x080ACB34
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r7, [r5, #0x34]
	ldr r0, [r5, #0x3c]
	mov r8, r0
	ldr r1, [r5, #0x38]
	mov r9, r1
	ldr r2, [r5, #0x40]
	mov sl, r2
	ldr r0, [r5, #0x44]
	adds r0, #1
	str r0, [r5, #0x44]
	ldr r0, [r5, #0x48]
	adds r0, #1
	str r0, [r5, #0x48]
	movs r6, #0
_080ACB5E:
	lsls r3, r6, #2
	adds r0, r5, #0
	adds r0, #0x4c
	adds r2, r0, r3
	ldr r0, [r2]
	adds r4, r5, #0
	adds r4, #0x44
	cmp r0, #0
	beq _080ACB7E
	adds r0, r4, r3
	ldr r1, [r0]
	adds r1, #3
	str r1, [r0]
	ldr r0, [r2]
	adds r0, #1
	str r0, [r2]
_080ACB7E:
	adds r1, r4, r3
	ldr r0, [r1]
	asrs r0, r0, #3
	cmp r0, #5
	ble _080ACB8C
	movs r0, #0
	str r0, [r1]
_080ACB8C:
	adds r6, #1
	cmp r6, #1
	ble _080ACB5E
	ldr r3, [r5, #0x2c]
	cmp r3, #0
	bne _080ACC20
	ldr r2, [r5, #0x4c]
	cmp r2, #0
	beq _080ACBAC
	asrs r2, r2, #3
	subs r1, r2, #4
	ldr r0, [r5, #0x34]
	adds r7, r0, r1
	cmp r2, #4
	bne _080ACBAC
	str r3, [r5, #0x4c]
_080ACBAC:
	ldr r2, [r5, #0x50]
	cmp r2, #0
	beq _080ACBC4
	asrs r2, r2, #3
	subs r1, r2, #4
	ldr r0, [r5, #0x38]
	subs r0, r0, r1
	mov r9, r0
	cmp r2, #4
	bne _080ACBC4
	movs r0, #0
	str r0, [r5, #0x50]
_080ACBC4:
	ldr r0, [r5, #0x30]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080ACBEE
	ldr r1, _080ACCD4  @ 0x000001FF
	ands r1, r7
	movs r2, #0xff
	mov r0, r8
	ands r2, r0
	ldr r3, _080ACCD8  @ gUnknown_08A20B7C
	adds r4, r5, #0
	adds r4, #0x54
	ldr r0, [r5, #0x44]
	asrs r0, r0, #3
	ldrh r4, [r4]
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #0xd
	bl RegisterObjectAttributes
_080ACBEE:
	ldr r0, [r5, #0x30]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _080ACC20
	ldr r1, _080ACCD4  @ 0x000001FF
	mov r2, r9
	ands r1, r2
	movs r0, #0x80
	lsls r0, r0, #5
	adds r1, r1, r0
	movs r2, #0xff
	mov r0, sl
	ands r2, r0
	ldr r3, _080ACCD8  @ gUnknown_08A20B7C
	adds r4, r5, #0
	adds r4, #0x54
	ldr r0, [r5, #0x48]
	asrs r0, r0, #3
	ldrh r4, [r4]
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #0xd
	bl RegisterObjectAttributes
_080ACC20:
	ldr r0, [r5, #0x2c]
	cmp r0, #1
	bne _080ACCC2
	ldr r2, [r5, #0x4c]
	cmp r2, #0
	beq _080ACC3E
	asrs r2, r2, #3
	subs r1, r2, #4
	ldr r0, [r5, #0x3c]
	adds r0, r0, r1
	mov r8, r0
	cmp r2, #4
	bne _080ACC3E
	movs r0, #0
	str r0, [r5, #0x4c]
_080ACC3E:
	ldr r2, [r5, #0x50]
	cmp r2, #0
	beq _080ACC56
	asrs r2, r2, #3
	subs r1, r2, #4
	ldr r0, [r5, #0x40]
	subs r0, r0, r1
	mov sl, r0
	cmp r2, #4
	bne _080ACC56
	movs r0, #0
	str r0, [r5, #0x50]
_080ACC56:
	ldr r0, [r5, #0x30]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080ACC88
	ldr r0, _080ACCD4  @ 0x000001FF
	ands r7, r0
	movs r0, #0xff
	mov r1, r8
	ands r1, r0
	mov r8, r1
	ldr r3, _080ACCDC  @ gUnknown_08A20B8A
	adds r1, r5, #0
	adds r1, #0x54
	ldr r0, [r5, #0x44]
	asrs r0, r0, #3
	lsls r0, r0, #1
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r7, #0
	mov r2, r8
	bl RegisterObjectAttributes
_080ACC88:
	ldr r0, [r5, #0x30]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _080ACCC2
	ldr r0, _080ACCD4  @ 0x000001FF
	mov r2, r9
	ands r2, r0
	mov r9, r2
	movs r1, #0x80
	lsls r1, r1, #6
	add r1, r9
	movs r0, #0xff
	mov r2, sl
	ands r2, r0
	mov sl, r2
	ldr r3, _080ACCDC  @ gUnknown_08A20B8A
	adds r2, r5, #0
	adds r2, #0x54
	ldr r0, [r5, #0x48]
	asrs r0, r0, #3
	lsls r0, r0, #1
	ldrh r2, [r2]
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0xd
	mov r2, sl
	bl RegisterObjectAttributes
_080ACCC2:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ACCD4: .4byte 0x000001FF
_080ACCD8: .4byte gUnknown_08A20B7C
_080ACCDC: .4byte gUnknown_08A20B8A

	THUMB_FUNC_START sub_80ACCE0
sub_80ACCE0: @ 0x080ACCE0
	push {lr}
	adds r1, r0, #0
	ldr r0, _080ACCF0  @ gUnknown_08A20B94
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080ACCF0: .4byte gUnknown_08A20B94

	THUMB_FUNC_START sub_80ACCF4
sub_80ACCF4: @ 0x080ACCF4
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r7, r2, #0
	ldr r0, _080ACD4C  @ gUnknown_08A20B94
	bl Proc_Find
	adds r5, r0, #0
	cmp r5, #0
	beq _080ACD44
	ldr r0, _080ACD50  @ gUnknown_08A1D79C
	adds r1, r7, #0
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	cmp r6, #0
	bne _080ACD24
	ldr r0, _080ACD54  @ gUnknown_08A1C7D8
	ldr r2, _080ACD58  @ 0x06010000
	adds r1, r4, r2
	bl CopyDataWithPossibleUncomp
_080ACD24:
	cmp r6, #1
	bne _080ACD32
	ldr r0, _080ACD5C  @ gUnknown_08A1C704
	ldr r2, _080ACD58  @ 0x06010000
	adds r1, r4, r2
	bl CopyDataWithPossibleUncomp
_080ACD32:
	asrs r1, r4, #5
	movs r2, #0xf
	ands r2, r7
	lsls r2, r2, #0xc
	adds r1, r1, r2
	adds r2, r5, #0
	adds r2, #0x54
	strh r1, [r2]
	str r6, [r5, #0x2c]
_080ACD44:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080ACD4C: .4byte gUnknown_08A20B94
_080ACD50: .4byte gUnknown_08A1D79C
_080ACD54: .4byte gUnknown_08A1C7D8
_080ACD58: .4byte 0x06010000
_080ACD5C: .4byte gUnknown_08A1C704

	THUMB_FUNC_START sub_80ACD60
sub_80ACD60: @ 0x080ACD60
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080ACD78  @ gUnknown_08A20B94
	bl Proc_Find
	cmp r0, #0
	beq _080ACD70
	str r4, [r0, #0x30]
_080ACD70:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080ACD78: .4byte gUnknown_08A20B94

	THUMB_FUNC_START sub_80ACD7C
sub_80ACD7C: @ 0x080ACD7C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, _080ACDA0  @ gUnknown_08A20B94
	bl Proc_Find
	cmp r0, #0
	beq _080ACD98
	str r4, [r0, #0x34]
	str r5, [r0, #0x3c]
	str r6, [r0, #0x38]
	str r7, [r0, #0x40]
_080ACD98:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ACDA0: .4byte gUnknown_08A20B94

	THUMB_FUNC_START sub_80ACDA4
sub_80ACDA4: @ 0x080ACDA4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080ACDD8  @ gUnknown_08A20B94
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080ACDD2
	cmp r4, #0
	bne _080ACDBC
	movs r0, #1
	str r0, [r1, #0x4c]
_080ACDBC:
	cmp r4, #1
	bne _080ACDC2
	str r4, [r1, #0x50]
_080ACDC2:
	cmp r4, #2
	bne _080ACDCA
	movs r0, #1
	str r0, [r1, #0x4c]
_080ACDCA:
	cmp r4, #3
	bne _080ACDD2
	movs r0, #1
	str r0, [r1, #0x50]
_080ACDD2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080ACDD8: .4byte gUnknown_08A20B94

	THUMB_FUNC_START sub_80ACDDC
sub_80ACDDC: @ 0x080ACDDC
	push {lr}
	ldr r0, _080ACDEC  @ gUnknown_08A20B94
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_080ACDEC: .4byte gUnknown_08A20B94

	THUMB_FUNC_START sub_80ACDF0
sub_80ACDF0: @ 0x080ACDF0
	movs r1, #0
	str r1, [r0, #0x30]
	bx lr

	THUMB_FUNC_START sub_80ACDF8
sub_80ACDF8: @ 0x080ACDF8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x30]
	ldr r0, [r4, #0x2c]
	cmp r1, r0
	blt _080ACE12
	ldr r0, [r4, #0x14]
	ldr r1, [r4, #0x34]
	bl _call_via_r1
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080ACE12:
	ldr r0, [r4, #0x30]
	adds r0, #1
	str r0, [r4, #0x30]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80ACE20
sub_80ACE20: @ 0x080ACE20
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r1, r2, #0
	ldr r0, _080ACE38  @ gUnknown_08A20BB4
	bl Proc_Create
	str r4, [r0, #0x2c]
	str r5, [r0, #0x34]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080ACE38: .4byte gUnknown_08A20BB4

	THUMB_FUNC_START sub_80ACE3C
sub_80ACE3C: @ 0x080ACE3C
	push {lr}
	movs r2, #0
	movs r1, #3
	adds r0, #0x4d
_080ACE44:
	strb r2, [r0]
	subs r0, #1
	subs r1, #1
	cmp r1, #0
	bge _080ACE44
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80ACE54
sub_80ACE54: @ 0x080ACE54
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x34
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	ldr r1, [sp, #4]
	adds r1, #0x4e
	str r1, [sp, #0x14]
_080ACE6C:
	ldr r0, [sp, #4]
	adds r0, #0x4a
	ldr r2, [sp, #8]
	adds r0, r0, r2
	ldrb r0, [r0]
	adds r2, #1
	str r2, [sp, #0x1c]
	cmp r0, #0
	bne _080ACE80
	b _080AD188
_080ACE80:
	ldr r0, [sp, #4]
	adds r0, #0x3e
	ldr r3, [sp, #8]
	adds r3, r3, r0
	mov r9, r3
	movs r1, #0
	ldrsb r1, [r3, r1]
	str r0, [sp, #0x30]
	cmp r1, #1
	bgt _080ACE96
	b _080AD188
_080ACE96:
	ldr r0, [sp, #4]
	adds r0, #0x3a
	ldr r1, [sp, #8]
	adds r7, r0, r1
	movs r1, #0
	ldrsb r1, [r7, r1]
	str r0, [sp, #0x2c]
	cmp r1, #1
	bgt _080ACEAA
	b _080AD188
_080ACEAA:
	ldr r2, [sp, #8]
	lsls r2, r2, #1
	mov r8, r2
	ldr r3, [sp, #4]
	adds r3, #0x2a
	str r3, [sp, #0xc]
	adds r6, r3, #0
	add r6, r8
	ldrh r1, [r6]
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r2, #0
	orrs r1, r0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	ldr r3, [sp, #4]
	adds r3, #0x32
	str r3, [sp, #0x10]
	adds r5, r3, #0
	add r5, r8
	movs r0, #0
	ldrsh r2, [r5, r0]
	ldr r0, [sp, #0x14]
	ldrh r3, [r0]
	ldr r0, [sp, #4]
	adds r0, #0x42
	str r0, [sp, #0x18]
	adds r4, r0, #0
	add r4, r8
	ldrh r0, [r4]
	adds r3, r3, r0
	adds r3, #4
	str r3, [sp]
	movs r0, #0xd
	ldr r3, _080ACFD4  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	movs r2, #0
	ldrsh r1, [r6, r2]
	mov r3, r9
	movs r0, #0
	ldrsb r0, [r3, r0]
	subs r0, #1
	lsls r0, r0, #3
	adds r1, r1, r0
	movs r0, #0
	ldrsh r2, [r5, r0]
	ldr r3, [sp, #0x14]
	ldrh r0, [r3]
	ldrh r3, [r4]
	adds r0, r0, r3
	adds r0, #4
	str r0, [sp]
	movs r0, #0xd
	ldr r3, _080ACFD4  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	ldrh r1, [r6]
	movs r2, #0xc0
	lsls r2, r2, #6
	adds r0, r2, #0
	orrs r1, r0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r3, #0
	ldrsh r2, [r5, r3]
	movs r0, #0
	ldrsb r0, [r7, r0]
	subs r0, #1
	lsls r0, r0, #3
	adds r2, r2, r0
	ldr r3, [sp, #0x14]
	ldrh r0, [r3]
	ldrh r3, [r4]
	adds r0, r0, r3
	adds r0, #4
	str r0, [sp]
	movs r0, #0xd
	ldr r3, _080ACFD4  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	movs r0, #0
	ldrsh r1, [r6, r0]
	mov r2, r9
	movs r0, #0
	ldrsb r0, [r2, r0]
	subs r0, #1
	lsls r0, r0, #3
	adds r1, r1, r0
	movs r0, #0x80
	lsls r0, r0, #6
	orrs r1, r0
	movs r3, #0
	ldrsh r2, [r5, r3]
	movs r0, #0
	ldrsb r0, [r7, r0]
	subs r0, #1
	lsls r0, r0, #3
	adds r2, r2, r0
	ldr r3, [sp, #0x14]
	ldrh r0, [r3]
	ldrh r3, [r4]
	adds r0, r0, r3
	adds r0, #4
	str r0, [sp]
	movs r0, #0xd
	ldr r3, _080ACFD4  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	mov r1, r9
	movs r0, #0
	ldrsb r0, [r1, r0]
	subs r4, r0, #2
	movs r2, #0
	ldrsh r7, [r5, r2]
	movs r3, #0
	ldrsh r0, [r6, r3]
	adds r5, r0, #0
	adds r5, #8
	mov sl, r8
	ldr r0, [sp, #0xc]
	str r0, [sp, #0x24]
	ldr r1, [sp, #0x10]
	str r1, [sp, #0x28]
	ldr r2, [sp, #4]
	adds r2, #0x4e
	mov r8, r2
	ldr r6, [sp, #0x18]
	cmp r4, #3
	ble _080ACFFA
_080ACFAE:
	mov r3, r8
	ldrh r0, [r3]
	mov r2, sl
	adds r1, r6, r2
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080ACFD8  @ gUnknown_08590F9C
	bl RegisterObjectAttributes
	adds r5, #0x20
	subs r4, #4
	cmp r4, #3
	bgt _080ACFAE
	b _080ACFFA
	.align 2, 0
_080ACFD4: .4byte gUnknown_08590F44
_080ACFD8: .4byte gUnknown_08590F9C
_080ACFDC:
	mov r3, r8
	ldrh r0, [r3]
	mov r2, sl
	adds r1, r6, r2
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080AD080  @ gUnknown_08590F7C
	bl RegisterObjectAttributes
	adds r5, #0x10
	subs r4, #2
_080ACFFA:
	cmp r4, #1
	bgt _080ACFDC
	cmp r4, #0
	ble _080AD024
_080AD002:
	mov r3, r8
	ldrh r0, [r3]
	mov r2, sl
	adds r1, r6, r2
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080AD084  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bgt _080AD002
_080AD024:
	ldr r3, [sp, #0x30]
	ldr r1, [sp, #8]
	adds r0, r3, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r4, r0, #2
	ldr r0, [sp, #0x28]
	add r0, sl
	movs r2, #0
	ldrsh r1, [r0, r2]
	ldr r3, [sp, #0x2c]
	ldr r2, [sp, #8]
	adds r0, r3, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, #1
	lsls r0, r0, #3
	adds r7, r1, r0
	ldr r0, [sp, #0x24]
	add r0, sl
	movs r3, #0
	ldrsh r0, [r0, r3]
	adds r5, r0, #0
	adds r5, #8
	cmp r4, #3
	ble _080AD0AA
_080AD05C:
	mov r1, r8
	ldrh r0, [r1]
	mov r2, sl
	adds r1, r6, r2
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080AD088  @ gUnknown_08590F9C
	bl RegisterObjectAttributes
	adds r5, #0x20
	subs r4, #4
	cmp r4, #3
	bgt _080AD05C
	b _080AD0AA
	.align 2, 0
_080AD080: .4byte gUnknown_08590F7C
_080AD084: .4byte gUnknown_08590F44
_080AD088: .4byte gUnknown_08590F9C
_080AD08C:
	mov r3, r8
	ldrh r0, [r3]
	mov r2, sl
	adds r1, r6, r2
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080AD134  @ gUnknown_08590F7C
	bl RegisterObjectAttributes
	adds r5, #0x10
	subs r4, #2
_080AD0AA:
	cmp r4, #1
	bgt _080AD08C
	cmp r4, #0
	ble _080AD0D4
_080AD0B2:
	mov r3, r8
	ldrh r0, [r3]
	mov r2, sl
	adds r1, r6, r2
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080AD138  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bgt _080AD0B2
_080AD0D4:
	ldr r3, [sp, #0x2c]
	ldr r1, [sp, #8]
	adds r0, r3, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r1, r0, #2
	ldr r0, [sp, #0x28]
	add r0, sl
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r7, r0, #0
	adds r7, #8
	cmp r1, #0
	ble _080AD188
	add r6, sl
_080AD0F4:
	ldr r3, [sp, #0x30]
	ldr r2, [sp, #8]
	adds r0, r3, r2
	movs r4, #0
	ldrsb r4, [r0, r4]
	ldr r0, [sp, #0x24]
	add r0, sl
	movs r3, #0
	ldrsh r5, [r0, r3]
	adds r0, r7, #0
	adds r0, #8
	str r0, [sp, #0x20]
	subs r1, #1
	mov r9, r1
	cmp r4, #3
	ble _080AD15A
_080AD114:
	mov r2, r8
	ldrh r1, [r2]
	ldrh r0, [r6]
	adds r1, r1, r0
	str r1, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080AD13C  @ gUnknown_08590F9C
	bl RegisterObjectAttributes
	adds r5, #0x20
	subs r4, #4
	cmp r4, #3
	bgt _080AD114
	b _080AD15A
	.align 2, 0
_080AD134: .4byte gUnknown_08590F7C
_080AD138: .4byte gUnknown_08590F44
_080AD13C: .4byte gUnknown_08590F9C
_080AD140:
	mov r3, r8
	ldrh r1, [r3]
	ldrh r0, [r6]
	adds r1, r1, r0
	str r1, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080AD1A4  @ gUnknown_08590F7C
	bl RegisterObjectAttributes
	adds r5, #0x10
	subs r4, #2
_080AD15A:
	cmp r4, #1
	bgt _080AD140
	cmp r4, #0
	ble _080AD180
_080AD162:
	mov r0, r8
	ldrh r1, [r0]
	ldrh r0, [r6]
	adds r1, r1, r0
	str r1, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, _080AD1A8  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bgt _080AD162
_080AD180:
	ldr r7, [sp, #0x20]
	mov r1, r9
	cmp r1, #0
	bgt _080AD0F4
_080AD188:
	ldr r1, [sp, #0x1c]
	str r1, [sp, #8]
	cmp r1, #3
	bgt _080AD192
	b _080ACE6C
_080AD192:
	add sp, #0x34
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD1A4: .4byte gUnknown_08590F7C
_080AD1A8: .4byte gUnknown_08590F44

	THUMB_FUNC_START sub_80AD1AC
sub_80AD1AC: @ 0x080AD1AC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080AD1CC  @ gUnknown_08A20BD4
	adds r0, r4, #0
	bl Proc_Find
	bl Proc_Delete
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_Create
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080AD1CC: .4byte gUnknown_08A20BD4

	THUMB_FUNC_START sub_80AD1D0
sub_80AD1D0: @ 0x080AD1D0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AD1F8  @ gUnknown_08A20BD4
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080AD1F2
	lsls r0, r4, #0xf
	lsrs r0, r0, #0x14
	adds r1, #0x4e
	strh r0, [r1]
	ldr r0, _080AD1FC  @ gUnknown_08A2E950
	ldr r2, _080AD200  @ 0x06010000
	adds r1, r4, r2
	bl CopyDataWithPossibleUncomp
_080AD1F2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AD1F8: .4byte gUnknown_08A20BD4
_080AD1FC: .4byte gUnknown_08A2E950
_080AD200: .4byte 0x06010000

	THUMB_FUNC_START sub_80AD204
sub_80AD204: @ 0x080AD204
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, [sp, #0x1c]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	ldr r0, _080AD268  @ gUnknown_08A20BD4
	bl Proc_Find
	adds r3, r0, #0
	cmp r3, #0
	beq _080AD25C
	adds r0, #0x4a
	adds r0, r0, r4
	movs r1, #1
	strb r1, [r0]
	lsls r2, r4, #1
	adds r0, r3, #0
	adds r0, #0x2a
	adds r0, r0, r2
	strh r5, [r0]
	adds r0, r3, #0
	adds r0, #0x32
	adds r0, r0, r2
	strh r6, [r0]
	adds r0, r3, #0
	adds r0, #0x3e
	adds r0, r0, r4
	strb r7, [r0]
	adds r0, r3, #0
	adds r0, #0x3a
	adds r0, r0, r4
	ldr r1, [sp, #0x18]
	strb r1, [r0]
	adds r0, r3, #0
	adds r0, #0x42
	adds r0, r0, r2
	mov r1, r8
	strh r1, [r0]
_080AD25C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD268: .4byte gUnknown_08A20BD4

	THUMB_FUNC_START sub_80AD26C
sub_80AD26C: @ 0x080AD26C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AD288  @ gUnknown_08A20BD4
	bl Proc_Find
	cmp r0, #0
	beq _080AD282
	adds r0, #0x4a
	adds r0, r0, r4
	movs r1, #0
	strb r1, [r0]
_080AD282:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AD288: .4byte gUnknown_08A20BD4

	THUMB_FUNC_START sub_80AD28C
sub_80AD28C: @ 0x080AD28C
	push {lr}
	ldr r0, _080AD2A4  @ gUnknown_08A20BD4
	bl Proc_Find
	cmp r0, #0
	beq _080AD29E
	movs r1, #1
	bl Proc_GotoLabel
_080AD29E:
	pop {r0}
	bx r0
	.align 2, 0
_080AD2A4: .4byte gUnknown_08A20BD4

	THUMB_FUNC_START sub_80AD2A8
sub_80AD2A8: @ 0x080AD2A8
	push {r4, lr}
	ldr r0, _080AD2D0  @ gUnknown_08A20BD4
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080AD2C8
	movs r1, #0
	bl Proc_GotoLabel
	adds r0, r4, #0
	adds r0, #0x4e
	ldrh r0, [r0]
	lsls r0, r0, #5
	bl sub_80AD1D0
_080AD2C8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AD2D0: .4byte gUnknown_08A20BD4

	THUMB_FUNC_START sub_80AD2D4
sub_80AD2D4: @ 0x080AD2D4
	push {lr}
	ldr r0, _080AD2E4  @ gUnknown_08A20BD4
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_080AD2E4: .4byte gUnknown_08A20BD4

	THUMB_FUNC_START _CallDifferedLoop
_CallDifferedLoop: @ 0x080AD2E8
	push {lr}
	ldr r1, [r0, #0x14]
	ldr r2, [r0, #0x2c]
	adds r0, r1, #0
	bl _call_via_r2
	pop {r0}
	bx r0

	THUMB_FUNC_START Get6CDifferedLoop6C
Get6CDifferedLoop6C: @ 0x080AD2F8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	bl Find6CDifferedLoop
	cmp r0, #0
	bne _080AD310
	ldr r0, _080AD318  @ gUnknown_08A20C04
	adds r1, r5, #0
	bl Proc_Create
	str r4, [r0, #0x2c]
_080AD310:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080AD318: .4byte gUnknown_08A20C04

	THUMB_FUNC_START DeleteEach6CDifferedLoop
DeleteEach6CDifferedLoop: @ 0x080AD31C
	push {lr}
	b _080AD324
_080AD320:
	bl Proc_Delete
_080AD324:
	ldr r0, _080AD334  @ gUnknown_08A20C04
	bl Proc_Find
	cmp r0, #0
	bne _080AD320
	pop {r0}
	bx r0
	.align 2, 0
_080AD334: .4byte gUnknown_08A20C04

	THUMB_FUNC_START Find6CDifferedLoop
Find6CDifferedLoop: @ 0x080AD338
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	b _080AD34A
_080AD340:
	ldr r0, [r1, #0x2c]
	cmp r0, r4
	bne _080AD34A
	adds r0, r1, #0
	b _080AD358
_080AD34A:
	ldr r0, _080AD360  @ gUnknown_08A20C04
	bl Proc_FindAfter
	adds r1, r0, #0
	cmp r1, #0
	bne _080AD340
	movs r0, #0
_080AD358:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080AD360: .4byte gUnknown_08A20C04

	THUMB_FUNC_START sub_80AD364
sub_80AD364: @ 0x080AD364
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	bl GetGameClock
	ldr r1, _080AD424  @ gPaletteBuffer
	ldrh r2, [r5, #0x3a]
	lsls r2, r2, #5
	movs r3, #0x87
	lsls r3, r3, #2
	adds r2, r2, r3
	adds r2, r2, r1
	ldr r1, _080AD428  @ gUnknown_0202BCF0
	adds r1, #0x41
	ldrb r1, [r1]
	lsls r1, r1, #0x1c
	lsrs r1, r1, #0x1e
	lsls r1, r1, #4
	lsrs r0, r0, #2
	movs r4, #0xf
	ands r0, r4
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r0, _080AD42C  @ gUnknown_08A1D448
	adds r1, r1, r0
	ldrh r0, [r1]
	strh r0, [r2]
	bl EnablePaletteSync
	ldr r1, [r5, #0x2c]
	ldr r2, [r5, #0x30]
	adds r2, #8
	ldr r3, _080AD430  @ gUnknown_08590F44
	ldrh r0, [r5, #0x3a]
	ands r4, r0
	lsls r4, r4, #0xc
	ldrh r0, [r5, #0x3c]
	adds r4, r4, r0
	ldrh r0, [r5, #0x36]
	adds r4, r4, r0
	str r4, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
	movs r4, #1
	ldrh r3, [r5, #0x38]
	cmp r4, r3
	bge _080AD3F2
_080AD3C4:
	lsls r0, r4, #3
	ldr r1, [r5, #0x2c]
	adds r1, r1, r0
	ldr r2, [r5, #0x30]
	adds r2, #8
	ldrh r3, [r5, #0x3a]
	movs r0, #0xf
	ands r0, r3
	lsls r0, r0, #0xc
	ldrh r3, [r5, #0x3c]
	adds r0, r0, r3
	ldrh r3, [r5, #0x36]
	adds r0, r0, r3
	adds r0, #1
	str r0, [sp]
	movs r0, #4
	ldr r3, _080AD430  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	adds r4, #1
	ldrh r0, [r5, #0x38]
	cmp r4, r0
	blt _080AD3C4
_080AD3F2:
	ldrh r0, [r5, #0x38]
	lsls r0, r0, #3
	ldr r1, [r5, #0x2c]
	adds r1, r1, r0
	ldr r2, [r5, #0x30]
	adds r2, #8
	ldr r3, _080AD430  @ gUnknown_08590F44
	ldrh r4, [r5, #0x3a]
	movs r0, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	ldrh r4, [r5, #0x3c]
	adds r0, r0, r4
	ldrh r4, [r5, #0x36]
	adds r0, r0, r4
	adds r0, #2
	str r0, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AD424: .4byte gPaletteBuffer
_080AD428: .4byte gUnknown_0202BCF0
_080AD42C: .4byte gUnknown_08A1D448
_080AD430: .4byte gUnknown_08590F44

	THUMB_FUNC_START sub_80AD434
sub_80AD434: @ 0x080AD434
	adds r0, #0x35
	movs r1, #0
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80AD43C
sub_80AD43C: @ 0x080AD43C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	bl DisplayUiHand
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AD45C
	adds r0, r4, #0
	bl sub_80AD364
_080AD45C:
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AD474
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	adds r1, #2
	bl sub_8015B88
_080AD474:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AD47C
sub_80AD47C: @ 0x080AD47C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080AD49C  @ gUnknown_08A20C1C
	adds r0, r4, #0
	bl Proc_Find
	bl Proc_Delete
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_Create
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080AD49C: .4byte gUnknown_08A20C1C

	THUMB_FUNC_START sub_80AD4A0
sub_80AD4A0: @ 0x080AD4A0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _080AD4D8  @ gUnknown_08A20C1C
	bl Proc_Find
	adds r2, r0, #0
	cmp r2, #0
	beq _080AD4D0
	adds r1, r2, #0
	adds r1, #0x34
	movs r0, #0
	strb r0, [r1]
	lsls r0, r5, #0xf
	lsrs r0, r0, #0x14
	strh r0, [r2, #0x36]
	movs r0, #0xf
	ands r4, r0
	strh r4, [r2, #0x3a]
	ldr r0, _080AD4DC  @ gUnknown_08A1D4E8
	ldr r2, _080AD4E0  @ 0x06010000
	adds r1, r5, r2
	bl CopyDataWithPossibleUncomp
_080AD4D0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AD4D8: .4byte gUnknown_08A20C1C
_080AD4DC: .4byte gUnknown_08A1D4E8
_080AD4E0: .4byte 0x06010000

	THUMB_FUNC_START sub_80AD4E4
sub_80AD4E4: @ 0x080AD4E4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AD4FC  @ gUnknown_08A20C1C
	bl Proc_Find
	cmp r0, #0
	beq _080AD4F4
	str r4, [r0, #0x2c]
_080AD4F4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AD4FC: .4byte gUnknown_08A20C1C

	THUMB_FUNC_START sub_80AD500
sub_80AD500: @ 0x080AD500
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AD518  @ gUnknown_08A20C1C
	bl Proc_Find
	cmp r0, #0
	beq _080AD510
	str r4, [r0, #0x30]
_080AD510:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AD518: .4byte gUnknown_08A20C1C

	THUMB_FUNC_START sub_80AD51C
sub_80AD51C: @ 0x080AD51C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	lsls r3, r3, #0x10
	lsrs r7, r3, #0x10
	ldr r0, _080AD544  @ gUnknown_08A20C1C
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080AD55C
	str r5, [r1, #0x2c]
	str r6, [r1, #0x30]
	cmp r4, #0
	bne _080AD548
	adds r0, #0x35
	strb r4, [r0]
	b _080AD554
	.align 2, 0
_080AD544: .4byte gUnknown_08A20C1C
_080AD548:
	adds r2, r1, #0
	adds r2, #0x35
	movs r0, #1
	strb r0, [r2]
	strh r4, [r1, #0x38]
	strh r7, [r1, #0x3c]
_080AD554:
	adds r0, r1, #0
	movs r1, #1
	bl Proc_GotoLabel
_080AD55C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AD564
sub_80AD564: @ 0x080AD564
	push {lr}
	ldr r0, _080AD57C  @ gUnknown_08A20C1C
	bl Proc_Find
	cmp r0, #0
	beq _080AD576
	movs r1, #0
	bl Proc_GotoLabel
_080AD576:
	pop {r0}
	bx r0
	.align 2, 0
_080AD57C: .4byte gUnknown_08A20C1C

	THUMB_FUNC_START sub_80AD580
sub_80AD580: @ 0x080AD580
	push {lr}
	ldr r0, _080AD590  @ gUnknown_08A20C1C
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_080AD590: .4byte gUnknown_08A20C1C

	THUMB_FUNC_START sub_80AD594
sub_80AD594: @ 0x080AD594
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, _080AD5B0  @ gUnknown_08A20C1C
	bl Proc_Find
	cmp r0, #0
	beq _080AD5A8
	adds r0, #0x34
	strb r4, [r0]
_080AD5A8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AD5B0: .4byte gUnknown_08A20C1C

	THUMB_FUNC_START sub_80AD5B4
sub_80AD5B4: @ 0x080AD5B4
	ldr r2, _080AD5D4  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_080AD5D4: .4byte gLCDControlBuffer

	THUMB_FUNC_START EnableAllGfx
EnableAllGfx: @ 0x080AD5D8
	ldr r2, _080AD5F4  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_080AD5F4: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80AD5F8
sub_80AD5F8: @ 0x080AD5F8
	push {lr}
	movs r2, #0
	movs r1, #3
	adds r0, #0x50
_080AD600:
	strb r2, [r0]
	subs r0, #0xc
	subs r1, #1
	cmp r1, #0
	bge _080AD600
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AD610
sub_80AD610: @ 0x080AD610
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	str r0, [sp, #4]
	movs r1, #0
_080AD620:
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, #0x2c
	ldr r2, [sp, #4]
	adds r5, r2, r0
	movs r0, #0
	ldrsb r0, [r5, r0]
	adds r1, #1
	str r1, [sp, #0xc]
	cmp r0, #0
	bne _080AD63A
	b _080AD934
_080AD63A:
	ldr r1, [r2, #0x60]
	movs r0, #0xf
	ands r1, r0
	lsls r1, r1, #0xc
	ldr r0, [r2, #0x5c]
	adds r0, r0, r1
	ldrh r3, [r5, #8]
	adds r0, r0, r3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	ldrb r0, [r5, #1]
	ldrh r2, [r5, #2]
	ldr r1, _080AD8B8  @ 0x000001FF
	ands r1, r2
	ldrh r3, [r5, #4]
	movs r2, #0xff
	ands r2, r3
	mov r3, r8
	str r3, [sp]
	ldr r3, _080AD8BC  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldrb r2, [r5, #6]
	subs r2, #1
	lsls r2, r2, #3
	adds r1, r1, r2
	ldr r3, _080AD8B8  @ 0x000001FF
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r1, r2
	ldrh r3, [r5, #4]
	movs r2, #0xff
	ands r2, r3
	mov r3, r8
	str r3, [sp]
	ldr r3, _080AD8BC  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldrb r2, [r5, #6]
	subs r2, #1
	lsls r2, r2, #3
	adds r1, r1, r2
	ldr r3, _080AD8B8  @ 0x000001FF
	ands r1, r3
	movs r2, #0xc0
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	mov r3, r8
	str r3, [sp]
	ldr r3, _080AD8BC  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	ldrb r0, [r5, #1]
	ldrh r2, [r5, #2]
	ldr r1, _080AD8B8  @ 0x000001FF
	ands r1, r2
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	mov r3, r8
	str r3, [sp]
	ldr r3, _080AD8BC  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	movs r7, #1
	ldrb r0, [r5, #6]
	subs r0, #4
	cmp r7, r0
	bge _080AD750
	ldr r0, _080AD8B8  @ 0x000001FF
	mov sl, r0
	ldr r1, _080AD8C0  @ gUnknown_08590F9C
	mov r9, r1
	mov r6, r8
	adds r6, #1
_080AD700:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r4, r7, #3
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	ldrh r3, [r5, #4]
	movs r2, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, r9
	bl RegisterObjectAttributes
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, r9
	bl RegisterObjectAttributes
	adds r7, #4
	ldrb r0, [r5, #6]
	subs r0, #4
	cmp r7, r0
	blt _080AD700
_080AD750:
	ldrb r0, [r5, #6]
	subs r0, #2
	cmp r7, r0
	bge _080AD7B4
	ldr r0, _080AD8B8  @ 0x000001FF
	mov sl, r0
	ldr r1, _080AD8C4  @ gUnknown_08590F7C
	mov r9, r1
	mov r6, r8
	adds r6, #1
_080AD764:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r4, r7, #3
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	ldrh r3, [r5, #4]
	movs r2, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, r9
	bl RegisterObjectAttributes
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, r9
	bl RegisterObjectAttributes
	adds r7, #2
	ldrb r0, [r5, #6]
	subs r0, #2
	cmp r7, r0
	blt _080AD764
_080AD7B4:
	ldrb r0, [r5, #6]
	subs r0, #1
	cmp r7, r0
	bge _080AD818
	ldr r0, _080AD8B8  @ 0x000001FF
	mov sl, r0
	ldr r1, _080AD8BC  @ gUnknown_08590F44
	mov r9, r1
	mov r6, r8
	adds r6, #1
_080AD7C8:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r4, r7, #3
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	ldrh r3, [r5, #4]
	movs r2, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, r9
	bl RegisterObjectAttributes
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, r9
	bl RegisterObjectAttributes
	adds r7, #1
	ldrb r0, [r5, #6]
	subs r0, #1
	cmp r7, r0
	blt _080AD7C8
_080AD818:
	movs r7, #1
	ldrb r0, [r5, #7]
	subs r0, #1
	cmp r7, r0
	blt _080AD824
	b _080AD934
_080AD824:
	ldr r0, _080AD8B8  @ 0x000001FF
	mov sl, r0
	movs r1, #0xff
	mov r9, r1
	mov r2, r8
	adds r2, #9
	str r2, [sp, #8]
_080AD832:
	ldrb r0, [r5, #1]
	ldrh r2, [r5, #2]
	mov r1, sl
	ands r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	lsls r4, r7, #3
	adds r2, r2, r4
	mov r3, r9
	ands r2, r3
	ldr r3, [sp, #8]
	str r3, [sp]
	ldr r3, _080AD8BC  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldrb r2, [r5, #6]
	subs r2, #1
	lsls r2, r2, #3
	adds r1, r1, r2
	mov r3, sl
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	adds r2, r2, r4
	mov r3, r9
	ands r2, r3
	ldr r3, [sp, #8]
	str r3, [sp]
	ldr r3, _080AD8BC  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	movs r6, #1
	ldrb r0, [r5, #6]
	subs r0, #4
	adds r7, #1
	cmp r6, r0
	bge _080AD8EE
_080AD888:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r2, r6, #3
	adds r1, r1, r2
	mov r3, sl
	ands r1, r3
	movs r3, #4
	ldrsh r2, [r5, r3]
	adds r2, r2, r4
	mov r3, r9
	ands r2, r3
	mov r3, r8
	adds r3, #5
	str r3, [sp]
	ldr r3, _080AD8C0  @ gUnknown_08590F9C
	bl RegisterObjectAttributes
	adds r6, #4
	ldrb r0, [r5, #6]
	subs r0, #4
	cmp r6, r0
	blt _080AD888
	b _080AD8EE
	.align 2, 0
_080AD8B8: .4byte 0x000001FF
_080AD8BC: .4byte gUnknown_08590F44
_080AD8C0: .4byte gUnknown_08590F9C
_080AD8C4: .4byte gUnknown_08590F7C
_080AD8C8:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r2, r6, #3
	adds r1, r1, r2
	mov r3, sl
	ands r1, r3
	movs r3, #4
	ldrsh r2, [r5, r3]
	adds r2, r2, r4
	mov r3, r9
	ands r2, r3
	mov r3, r8
	adds r3, #5
	str r3, [sp]
	ldr r3, _080AD8F8  @ gUnknown_08590F7C
	bl RegisterObjectAttributes
	adds r6, #2
_080AD8EE:
	ldrb r0, [r5, #6]
	subs r0, #2
	cmp r6, r0
	blt _080AD8C8
	b _080AD922
	.align 2, 0
_080AD8F8: .4byte gUnknown_08590F7C
_080AD8FC:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r2, r6, #3
	adds r1, r1, r2
	mov r3, sl
	ands r1, r3
	movs r3, #4
	ldrsh r2, [r5, r3]
	adds r2, r2, r4
	mov r3, r9
	ands r2, r3
	mov r3, r8
	adds r3, #5
	str r3, [sp]
	ldr r3, _080AD94C  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	adds r6, #1
_080AD922:
	ldrb r0, [r5, #6]
	subs r0, #1
	cmp r6, r0
	blt _080AD8FC
	ldrb r0, [r5, #7]
	subs r0, #1
	cmp r7, r0
	bge _080AD934
	b _080AD832
_080AD934:
	ldr r1, [sp, #0xc]
	cmp r1, #3
	bgt _080AD93C
	b _080AD620
_080AD93C:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD94C: .4byte gUnknown_08590F44

	THUMB_FUNC_START sub_80AD950
sub_80AD950: @ 0x080AD950
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r1, r2, #0
	ldr r0, _080AD988  @ gUnknown_08A20C4C
	bl Proc_Create
	adds r5, r0, #0
	ldr r0, _080AD98C  @ gUnknown_085B92C4
	ldr r2, _080AD990  @ 0x06010000
	adds r1, r4, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _080AD994  @ gUnknown_020228C8
	adds r1, r6, #0
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	lsls r4, r4, #0xf
	lsrs r4, r4, #0x14
	str r4, [r5, #0x5c]
	str r6, [r5, #0x60]
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080AD988: .4byte gUnknown_08A20C4C
_080AD98C: .4byte gUnknown_085B92C4
_080AD990: .4byte 0x06010000
_080AD994: .4byte gUnknown_020228C8

	THUMB_FUNC_START sub_80AD998
sub_80AD998: @ 0x080AD998
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	mov r8, r3
	ldr r0, [sp, #0x20]
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldr r0, _080AD9E4  @ gUnknown_08A20C4C
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080AD9D8
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, #0x2c
	adds r0, r1, r0
	movs r1, #1
	strb r1, [r0]
	strb r6, [r0, #1]
	strh r7, [r0, #2]
	mov r1, r8
	strh r1, [r0, #4]
	ldr r1, [sp, #0x18]
	strb r1, [r0, #6]
	ldr r1, [sp, #0x1c]
	strb r1, [r0, #7]
	strh r5, [r0, #8]
_080AD9D8:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AD9E4: .4byte gUnknown_08A20C4C

	THUMB_FUNC_START sub_80AD9E8
sub_80AD9E8: @ 0x080AD9E8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080ADA0C  @ gUnknown_08A20C4C
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080ADA06
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, #0x2c
	adds r0, r1, r0
	movs r1, #0
	strb r1, [r0]
_080ADA06:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080ADA0C: .4byte gUnknown_08A20C4C

	THUMB_FUNC_START sub_80ADA10
sub_80ADA10: @ 0x080ADA10
	push {lr}
	ldr r0, _080ADA20  @ gUnknown_08A20C4C
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_080ADA20: .4byte gUnknown_08A20C4C

	THUMB_FUNC_START sub_80ADA24
sub_80ADA24: @ 0x080ADA24
	push {lr}
	movs r2, #0
	adds r0, #0x2c
	movs r1, #3
_080ADA2C:
	strb r2, [r0]
	strb r2, [r0, #6]
	adds r0, #8
	subs r1, #1
	cmp r1, #0
	bge _080ADA2C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80ADA3C
sub_80ADA3C: @ 0x080ADA3C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x30
	mov sl, r0
	add r1, sp, #4
	ldr r0, _080ADB24  @ gUnknown_08205E18
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	add r2, sp, #0x14
	adds r1, r2, #0
	ldr r0, _080ADB28  @ gUnknown_08205E28
	ldm r0!, {r3, r5, r7}
	stm r1!, {r3, r5, r7}
	ldr r0, [r0]
	str r0, [r1]
	mov r4, sl
	adds r4, #0x2d
	str r4, [sp, #0x28]
	mov r5, sl
	adds r5, #0x2c
	movs r7, #3
	str r7, [sp, #0x24]
_080ADA72:
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	beq _080ADB58
	movs r0, #2
	ldrsh r6, [r5, r0]
	movs r0, #6
	ldrsb r0, [r5, r0]
	cmp r0, #0
	beq _080ADB2C
	ldrb r4, [r5, #1]
	adds r0, r4, #0
	movs r1, #1
	ands r0, r1
	mov r7, sl
	adds r7, #0x50
	movs r2, #0x4e
	add r2, sl
	mov r8, r2
	movs r3, #0x4c
	add r3, sl
	mov r9, r3
	cmp r0, #0
	beq _080ADACA
	ldrb r0, [r7]
	adds r1, r6, #0
	adds r1, #0x60
	movs r3, #4
	ldrsh r2, [r5, r3]
	mov ip, r2
	mov r2, r8
	movs r3, #0
	ldrsh r2, [r2, r3]
	add r2, ip
	lsls r3, r4, #2
	add r3, sp
	adds r3, #0x14
	ldr r3, [r3]
	mov r4, r9
	ldrh r4, [r4]
	str r4, [sp]
	bl RegisterObjectAttributes
	adds r6, #0x20
_080ADACA:
	ldrb r0, [r7]
	movs r1, #4
	ldrsh r2, [r5, r1]
	mov r3, r8
	movs r4, #0
	ldrsh r1, [r3, r4]
	adds r2, r2, r1
	ldr r3, [sp, #0x28]
	ldrb r1, [r3]
	lsls r1, r1, #2
	add r1, sp
	adds r1, #4
	ldr r3, [r1]
	mov r4, r9
	ldrh r1, [r4]
	str r1, [sp]
	adds r1, r6, #0
	bl RegisterObjectAttributes
	ldr r0, [sp, #0x28]
	ldrb r3, [r0]
	adds r0, r3, #0
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _080ADB58
	adds r6, #0x60
	ldrb r0, [r7]
	movs r4, #4
	ldrsh r2, [r5, r4]
	mov r7, r8
	movs r4, #0
	ldrsh r1, [r7, r4]
	adds r2, r2, r1
	lsls r1, r3, #2
	add r1, sp
	adds r1, #0x14
	ldr r3, [r1]
	mov r7, r9
	ldrh r1, [r7]
	str r1, [sp]
	adds r1, r6, #0
	bl RegisterObjectAttributes
	b _080ADB58
	.align 2, 0
_080ADB24: .4byte gUnknown_08205E18
_080ADB28: .4byte gUnknown_08205E28
_080ADB2C:
	mov r0, sl
	adds r0, #0x50
	ldrb r0, [r0]
	movs r1, #4
	ldrsh r2, [r5, r1]
	mov r1, sl
	adds r1, #0x4e
	movs r3, #0
	ldrsh r1, [r1, r3]
	adds r2, r2, r1
	ldrb r1, [r5, #1]
	lsls r1, r1, #2
	add r1, sp
	adds r1, #4
	ldr r3, [r1]
	mov r1, sl
	adds r1, #0x4c
	ldrh r1, [r1]
	str r1, [sp]
	adds r1, r6, #0
	bl RegisterObjectAttributes
_080ADB58:
	ldr r4, [sp, #0x28]
	adds r4, #8
	str r4, [sp, #0x28]
	adds r5, #8
	ldr r7, [sp, #0x24]
	subs r7, #1
	str r7, [sp, #0x24]
	cmp r7, #0
	blt _080ADB6C
	b _080ADA72
_080ADB6C:
	add sp, #0x30
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80ADB7C
sub_80ADB7C: @ 0x080ADB7C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	mov r9, r0
	adds r4, r1, #0
	mov r8, r2
	adds r5, r3, #0
	ldr r6, [sp, #0x1c]
	ldr r7, [sp, #0x20]
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	bl sub_80ADC90
	ldr r0, _080ADBEC  @ gUnknown_08A20D6C
	adds r1, r7, #0
	bl Proc_Create
	adds r7, r0, #0
	ldr r0, _080ADBF0  @ gUnknown_08A1B0D8
	ldr r2, _080ADBF4  @ 0x06010000
	adds r1, r4, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, _080ADBF8  @ gUnknown_08A1B154
	mov r1, r8
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	lsls r4, r4, #0xf
	lsrs r4, r4, #0x14
	movs r0, #0xf
	mov r1, r8
	ands r0, r1
	lsls r0, r0, #0xc
	adds r4, r4, r0
	adds r5, r5, r4
	adds r0, r7, #0
	adds r0, #0x4c
	strh r5, [r0]
	adds r0, #2
	strh r6, [r0]
	adds r0, #2
	mov r2, r9
	strb r2, [r0]
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ADBEC: .4byte gUnknown_08A20D6C
_080ADBF0: .4byte gUnknown_08A1B0D8
_080ADBF4: .4byte 0x06010000
_080ADBF8: .4byte gUnknown_08A1B154

	THUMB_FUNC_START sub_80ADBFC
sub_80ADBFC: @ 0x080ADBFC
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r0, _080ADC3C  @ gUnknown_08A20D6C
	bl Proc_Find
	lsls r4, r4, #3
	adds r0, r0, r4
	adds r2, r0, #0
	adds r2, #0x2c
	movs r1, #1
	strb r1, [r2]
	ldr r2, _080ADC40  @ 0x000001FF
	adds r1, r2, #0
	ands r5, r1
	strh r5, [r0, #0x2e]
	movs r1, #0xff
	ands r6, r1
	strh r6, [r0, #0x30]
	adds r0, #0x2d
	mov r1, r8
	strb r1, [r0]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080ADC3C: .4byte gUnknown_08A20D6C
_080ADC40: .4byte 0x000001FF

	THUMB_FUNC_START sub_80ADC44
sub_80ADC44: @ 0x080ADC44
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080ADC64  @ gUnknown_08A20D6C
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080ADC5E
	lsls r0, r4, #3
	adds r0, r1, r0
	adds r0, #0x2c
	movs r1, #0
	strb r1, [r0]
_080ADC5E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080ADC64: .4byte gUnknown_08A20D6C

	THUMB_FUNC_START sub_80ADC68
sub_80ADC68: @ 0x080ADC68
	push {r4, r5, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	ldr r0, _080ADC8C  @ gUnknown_08A20D6C
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080ADC84
	lsls r0, r4, #3
	adds r0, r1, r0
	adds r0, #0x32
	strb r5, [r0]
_080ADC84:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080ADC8C: .4byte gUnknown_08A20D6C

	THUMB_FUNC_START sub_80ADC90
sub_80ADC90: @ 0x080ADC90
	push {lr}
	ldr r0, _080ADCA0  @ gUnknown_08A20D6C
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_080ADCA0: .4byte gUnknown_08A20D6C

	THUMB_FUNC_START sub_80ADCA4
sub_80ADCA4: @ 0x080ADCA4
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	bl SetFont
	adds r2, r4, #0
	adds r2, #0x5a
	adds r1, r4, #0
	adds r1, #0x5c
	ldrh r0, [r2]
	ldrh r1, [r1]
	cmp r0, r1
	bne _080ADCC2
	movs r0, #0
	strh r0, [r2]
_080ADCC2:
	ldrh r0, [r2]
	adds r7, r2, #0
	cmp r0, #0
	bne _080ADD10
	movs r6, #0
	adds r5, r4, #0
	adds r5, #0x5e
	b _080ADCFC
_080ADCD2:
	ldrb r0, [r1]
	cmp r0, #1
	bne _080ADCE8
	adds r0, r4, #0
	adds r0, #0x58
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldr r0, [r4, #0x54]
	adds r0, #1
	b _080ADCF8
_080ADCE8:
	adds r0, r4, #0
	adds r0, #0x58
	ldrb r0, [r0]
	lsls r0, r0, #3
	adds r0, #0x44
	adds r0, r4, r0
	bl Text_AppendChar
_080ADCF8:
	str r0, [r4, #0x54]
	adds r6, #1
_080ADCFC:
	ldrh r0, [r5]
	cmp r6, r0
	bge _080ADD10
	ldr r1, [r4, #0x54]
	ldrb r0, [r1]
	cmp r0, #0
	bne _080ADCD2
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080ADD10:
	ldrh r0, [r7]
	adds r0, #1
	strh r0, [r7]
	movs r0, #0
	bl SetFont
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80ADD24
sub_80ADD24: @ 0x080ADD24
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	mov r9, r1
	mov r8, r2
	adds r5, r3, #0
	ldr r4, _080ADDC8  @ gUnknown_08A20D8C
	adds r0, r4, #0
	bl Proc_Find
	adds r6, r0, #0
	cmp r6, #0
	bne _080ADD4C
	adds r0, r4, #0
	ldr r1, [sp, #0x24]
	bl Proc_CreateBlockingChild
	adds r6, r0, #0
_080ADD4C:
	adds r0, r6, #0
	adds r0, #0x2c
	ldr r2, _080ADDCC  @ 0x06010000
	adds r1, r7, r2
	mov r2, r9
	bl InitSomeOtherGraphicsRelatedStruct
	mov r0, r8
	str r0, [r6, #0x54]
	adds r0, r6, #0
	adds r0, #0x58
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #1
	strh r1, [r0]
	adds r1, r6, #0
	adds r1, #0x5c
	ldr r0, [sp, #0x1c]
	strh r0, [r1]
	adds r1, #2
	ldr r0, [sp, #0x20]
	strh r0, [r1]
	mov r7, r9
	adds r7, #0x10
	cmp r5, #0
	ble _080ADD9E
	adds r4, r6, #0
	adds r4, #0x44
_080ADD88:
	adds r0, r4, #0
	bl Text_Init3
	adds r0, r4, #0
	movs r1, #0
	bl Text_80046B4
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bne _080ADD88
_080ADD9E:
	ldr r0, _080ADDD0  @ gUnknown_0859EF00
	lsls r1, r7, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r0, #0
	bl SetFontGlyphSet
	movs r0, #0
	bl SetFont
	adds r0, r6, #0
	movs r1, #0
	bl Proc_GotoLabel
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ADDC8: .4byte gUnknown_08A20D8C
_080ADDCC: .4byte 0x06010000
_080ADDD0: .4byte gUnknown_0859EF00

	THUMB_FUNC_START sub_80ADDD4
sub_80ADDD4: @ 0x080ADDD4
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	b _080ADDE2
_080ADDDC:
	adds r0, r4, #0
	bl Proc_Delete
_080ADDE2:
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_FindAfterWithParent
	adds r4, r0, #0
	cmp r4, #0
	bne _080ADDDC
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80ADDF8
sub_80ADDF8: @ 0x080ADDF8
	bx lr

	THUMB_FUNC_START sub_80ADDFC
sub_80ADDFC: @ 0x080ADDFC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	ldr r4, [sp, #0x2c]
	ldr r5, [sp, #0x30]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r1, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	lsls r4, r4, #0x10
	lsls r5, r5, #0x10
	lsrs r6, r5, #0x10
	lsrs r2, r4, #0x10
	asrs r4, r4, #0x10
	cmp r4, #4
	bgt _080ADE2A
	movs r2, #4
_080ADE2A:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	bgt _080ADE34
	movs r6, #4
_080ADE34:
	lsls r0, r1, #0x10
	asrs r0, r0, #8
	str r0, [sp]
	lsls r0, r3, #0x10
	asrs r0, r0, #8
	str r0, [sp, #4]
	mov r0, sp
	movs r1, #0
	strh r1, [r0, #8]
	strh r1, [r0, #0xa]
	mov r5, sp
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	movs r4, #0x80
	lsls r4, r4, #9
	adds r0, r4, #0
	bl __divsi3
	strh r0, [r5, #0xc]
	mov r5, sp
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	bl __divsi3
	strh r0, [r5, #0xe]
	mov r1, sp
	lsls r0, r7, #4
	strh r0, [r1, #0x10]
	ldr r1, _080ADE8C  @ gUnknown_030030D8
	mov r0, r8
	cmp r0, #2
	bne _080ADE78
	subs r1, #0x10
_080ADE78:
	mov r0, sp
	movs r2, #1
	bl BgAffineSet
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ADE8C: .4byte gUnknown_030030D8

	THUMB_FUNC_START sub_80ADE90
sub_80ADE90: @ 0x080ADE90
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r3, #0
	cmp r0, #2
	bne _080ADEA6
	ldr r3, _080ADEDC  @ gUnknown_030030C8
_080ADEA6:
	movs r4, #2
	ldrsh r0, [r3, r4]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r3, #2]
	movs r4, #6
	ldrsh r0, [r3, r4]
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r3, #6]
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r3]
	movs r2, #4
	ldrsh r0, [r3, r2]
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r3, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080ADEDC: .4byte gUnknown_030030C8

	THUMB_FUNC_START sub_80ADEE0
sub_80ADEE0: @ 0x080ADEE0
	push {r4, r5, r6, r7, lr}
	ldr r4, [sp, #0x14]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r5, r3, #0x10
	lsls r4, r4, #0x10
	lsrs r6, r4, #0x10
	movs r4, #0
	cmp r0, #2
	bne _080ADF00
	ldr r4, _080ADF44  @ gUnknown_030030C8
_080ADF00:
	movs r3, #0
	ldrsh r0, [r4, r3]
	lsls r3, r1, #0x10
	asrs r3, r3, #0x10
	negs r3, r3
	adds r1, r0, #0
	muls r1, r3, r1
	movs r7, #2
	ldrsh r0, [r4, r7]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	negs r2, r2
	muls r0, r2, r0
	adds r1, r1, r0
	lsls r0, r5, #0x10
	asrs r0, r0, #8
	adds r1, r1, r0
	str r1, [r4, #8]
	movs r1, #4
	ldrsh r0, [r4, r1]
	adds r1, r0, #0
	muls r1, r3, r1
	movs r3, #6
	ldrsh r0, [r4, r3]
	muls r0, r2, r0
	adds r1, r1, r0
	lsls r0, r6, #0x10
	asrs r0, r0, #8
	adds r1, r1, r0
	str r1, [r4, #0xc]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ADF44: .4byte gUnknown_030030C8

	THUMB_FUNC_START sub_80ADF48
sub_80ADF48: @ 0x080ADF48
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	mov r8, r1
	adds r1, r2, #0
	ldr r2, [sp, #0x2c]
	ldr r6, [sp, #0x30]
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	movs r0, #0x80
	lsls r0, r0, #3
	cmp r2, r0
	bgt _080ADF66
	adds r2, r0, #0
_080ADF66:
	cmp r6, r0
	bgt _080ADF6C
	adds r6, r0, #0
_080ADF6C:
	str r1, [sp]
	str r3, [sp, #4]
	mov r0, sp
	movs r1, #0
	strh r1, [r0, #8]
	strh r1, [r0, #0xa]
	mov r5, sp
	movs r4, #0x80
	lsls r4, r4, #0x11
	adds r0, r4, #0
	adds r1, r2, #0
	bl __divsi3
	strh r0, [r5, #0xc]
	mov r5, sp
	adds r0, r4, #0
	adds r1, r6, #0
	bl __divsi3
	strh r0, [r5, #0xe]
	mov r1, sp
	mov r2, r8
	asrs r0, r2, #4
	strh r0, [r1, #0x10]
	ldr r1, _080ADFB8  @ gUnknown_030030D8
	cmp r7, #2
	bne _080ADFA4
	subs r1, #0x10
_080ADFA4:
	mov r0, sp
	movs r2, #1
	bl BgAffineSet
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080ADFB8: .4byte gUnknown_030030D8

	THUMB_FUNC_START sub_80ADFBC
sub_80ADFBC: @ 0x080ADFBC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r3, #0
	cmp r0, #2
	bne _080ADFCA
	ldr r3, _080ADFF8  @ gUnknown_030030C8
_080ADFCA:
	movs r4, #2
	ldrsh r0, [r3, r4]
	muls r0, r1, r0
	asrs r0, r0, #0x10
	strh r0, [r3, #2]
	movs r4, #6
	ldrsh r0, [r3, r4]
	muls r0, r1, r0
	asrs r0, r0, #0x10
	strh r0, [r3, #6]
	movs r1, #0
	ldrsh r0, [r3, r1]
	muls r0, r2, r0
	asrs r0, r0, #0x10
	strh r0, [r3]
	movs r4, #4
	ldrsh r0, [r3, r4]
	muls r0, r2, r0
	asrs r0, r0, #0x10
	strh r0, [r3, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080ADFF8: .4byte gUnknown_030030C8

	THUMB_FUNC_START sub_80ADFFC
sub_80ADFFC: @ 0x080ADFFC
	push {r4, r5, r6, lr}
	adds r5, r3, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r4, #0
	cmp r0, #2
	bne _080AE00C
	ldr r4, _080AE040  @ gUnknown_030030C8
_080AE00C:
	movs r3, #0
	ldrsh r0, [r4, r3]
	negs r3, r1
	muls r0, r3, r0
	movs r6, #2
	ldrsh r1, [r4, r6]
	negs r2, r2
	muls r1, r2, r1
	adds r0, r0, r1
	asrs r0, r0, #8
	adds r0, r0, r5
	str r0, [r4, #8]
	movs r1, #4
	ldrsh r0, [r4, r1]
	muls r0, r3, r0
	movs r3, #6
	ldrsh r1, [r4, r3]
	muls r1, r2, r1
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, [sp, #0x10]
	adds r0, r0, r1
	str r0, [r4, #0xc]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AE040: .4byte gUnknown_030030C8

	THUMB_FUNC_START sub_80AE044
sub_80AE044: @ 0x080AE044
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r1, #0
	mov ip, r2
	mov r9, r3
	ldr r2, [sp, #0x20]
	ldr r4, [sp, #0x28]
	ldr r3, [sp, #0x2c]
	ldrh r1, [r7]
	lsrs r1, r1, #1
	mov r8, r1
	movs r1, #0x78
	mov sl, r1
	adds r6, r7, #4
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #0xd
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r5, r1, r0
	cmp r4, #0
	beq _080AE0DC
	cmp r3, #0
	beq _080AE0DC
	movs r0, #1
	negs r0, r0
	cmp r4, r0
	bne _080AE086
	ldrh r4, [r7]
	ldrh r3, [r7, #2]
_080AE086:
	mov r1, ip
	asrs r1, r1, #1
	mov ip, r1
	asrs r2, r2, #1
	asrs r4, r4, #1
	lsls r4, r4, #1
	ldr r0, [sp, #0x24]
	mov r1, r8
	muls r1, r0, r1
	adds r0, r1, #0
	lsls r0, r0, #1
	adds r0, r6, r0
	lsls r1, r2, #1
	adds r6, r0, r1
	mov r2, sl
	mov r0, r9
	muls r0, r2, r0
	lsls r0, r0, #1
	adds r0, r5, r0
	mov r2, ip
	lsls r1, r2, #1
	adds r5, r0, r1
	cmp r3, #0
	ble _080AE0DC
	asrs r7, r4, #1
	adds r4, r3, #0
	ldr r0, _080AE0EC  @ 0x001FFFFF
	mov r9, r0
_080AE0BE:
	adds r0, r6, #0
	adds r1, r5, #0
	mov r2, r9
	ands r2, r7
	bl CpuSet
	mov r1, r8
	lsls r0, r1, #1
	adds r6, r6, r0
	mov r2, sl
	lsls r0, r2, #1
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bne _080AE0BE
_080AE0DC:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AE0EC: .4byte 0x001FFFFF

	THUMB_FUNC_START sub_80AE0F0
sub_80AE0F0: @ 0x080AE0F0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r4, r1, #0
	ldr r6, [sp, #0x20]
	ldr r1, [sp, #0x24]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r9, r1
	movs r1, #0x78
	mov r8, r1
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #0xd
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r5, r1, r0
	cmp r3, #0
	beq _080AE15A
	cmp r6, #0
	beq _080AE15A
	asrs r4, r4, #1
	asrs r3, r3, #1
	lsls r3, r3, #1
	mov r0, r8
	muls r0, r2, r0
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r1, r4, #1
	adds r5, r0, r1
	cmp r6, #0
	ble _080AE15A
	adds r4, r6, #0
	lsls r0, r3, #0xa
	lsrs r6, r0, #0xb
	movs r7, #0x80
	lsls r7, r7, #0x11
_080AE13E:
	mov r0, sp
	mov r1, r9
	strh r1, [r0]
	adds r1, r5, #0
	adds r2, r6, #0
	orrs r2, r7
	bl CpuSet
	mov r1, r8
	lsls r0, r1, #1
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bne _080AE13E
_080AE15A:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AE168
sub_80AE168: @ 0x080AE168
	push {r4, lr}
	movs r3, #0x1f
	ands r1, r3
	ands r2, r3
	ldr r4, _080AE188  @ gPaletteBuffer
	lsls r2, r2, #0xa
	lsls r1, r1, #5
	adds r2, r2, r1
	ands r3, r0
	adds r2, r2, r3
	strh r2, [r4]
	bl EnablePaletteSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE188: .4byte gPaletteBuffer

	THUMB_FUNC_START FadeInOut_Init
FadeInOut_Init: @ 0x080AE18C
	push {r4, lr}
	adds r4, r0, #0
	bl ArchiveCurrentPalettes
	movs r0, #0
	str r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START FadeIn_Loop
FadeIn_Loop: @ 0x080AE1A0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	adds r1, r0, r1
	str r1, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AE1C4
	lsls r1, r1, #1
	movs r0, #0x80
	lsls r0, r0, #2
	subs r2, r0, r1
	b _080AE1C6
_080AE1C4:
	lsls r2, r1, #1
_080AE1C6:
	ldr r3, [r4, #0x34]
	adds r0, r2, #0
	adds r1, r2, #0
	bl WriteFadedPaletteFromArchive
	ldr r2, _080AE1FC  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r0, [r4, #0x2c]
	cmp r0, #0x80
	bne _080AE1F6
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080AE1F6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE1FC: .4byte gLCDControlBuffer

	THUMB_FUNC_START FadeOut_Loop
FadeOut_Loop: @ 0x080AE200
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	adds r1, r0, r1
	str r1, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AE224
	lsls r0, r1, #1
	movs r1, #0x80
	lsls r1, r1, #1
	adds r2, r0, r1
	b _080AE22C
_080AE224:
	lsls r1, r1, #1
	movs r0, #0x80
	lsls r0, r0, #1
	subs r2, r0, r1
_080AE22C:
	ldr r3, [r4, #0x34]
	adds r0, r2, #0
	adds r1, r2, #0
	bl WriteFadedPaletteFromArchive
	ldr r0, [r4, #0x2c]
	cmp r0, #0x80
	bne _080AE242
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080AE242:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START FadeInOut_DisableGfx
FadeInOut_DisableGfx: @ 0x080AE248
	push {lr}
	ldr r1, [r0, #0x34]
	ldr r0, _080AE270  @ 0x0000FFFF
	cmp r1, r0
	bne _080AE278
	ldr r2, _080AE274  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	b _080AE294
	.align 2, 0
_080AE270: .4byte 0x0000FFFF
_080AE274: .4byte gLCDControlBuffer
_080AE278:
	ldr r2, _080AE29C  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
_080AE294:
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
_080AE29C: .4byte gLCDControlBuffer

	THUMB_FUNC_START FadeInExists
FadeInExists: @ 0x080AE2A0
	push {lr}
	ldr r0, _080AE2B4  @ gUnknown_08A20DA4
	bl Proc_Find
	cmp r0, #0
	beq _080AE2AE
	movs r0, #1
_080AE2AE:
	pop {r1}
	bx r1
	.align 2, 0
_080AE2B4: .4byte gUnknown_08A20DA4

	THUMB_FUNC_START FadeOutExists
FadeOutExists: @ 0x080AE2B8
	push {lr}
	ldr r0, _080AE2CC  @ gUnknown_08A20DCC
	bl Proc_Find
	cmp r0, #0
	beq _080AE2C6
	movs r0, #1
_080AE2C6:
	pop {r1}
	bx r1
	.align 2, 0
_080AE2CC: .4byte gUnknown_08A20DCC

	THUMB_FUNC_START NewFadeIn
NewFadeIn: @ 0x080AE2D0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AE2F0  @ gUnknown_08A20DA4
	movs r1, #4
	bl Proc_Create
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #1
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE2F0: .4byte gUnknown_08A20DA4

	THUMB_FUNC_START NewFadeOut
NewFadeOut: @ 0x080AE2F4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AE314  @ gUnknown_08A20DCC
	movs r1, #4
	bl Proc_Create
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #1
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE314: .4byte gUnknown_08A20DCC

	THUMB_FUNC_START sub_80AE318
sub_80AE318: @ 0x080AE318
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AE338  @ gUnknown_08A20DA4
	bl Proc_CreateBlockingChild
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #1
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE338: .4byte gUnknown_08A20DA4

	THUMB_FUNC_START sub_80AE33C
sub_80AE33C: @ 0x080AE33C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AE35C  @ gUnknown_08A20DCC
	bl Proc_CreateBlockingChild
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #1
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE35C: .4byte gUnknown_08A20DCC

	THUMB_FUNC_START sub_80AE360
sub_80AE360: @ 0x080AE360
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AE380  @ gUnknown_08A20DA4
	movs r1, #4
	bl Proc_Create
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	ldr r1, _080AE384  @ 0x0000FFFF
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE380: .4byte gUnknown_08A20DA4
_080AE384: .4byte 0x0000FFFF

	THUMB_FUNC_START sub_80AE388
sub_80AE388: @ 0x080AE388
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AE3A8  @ gUnknown_08A20DCC
	movs r1, #4
	bl Proc_Create
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	ldr r1, _080AE3AC  @ 0x0000FFFF
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE3A8: .4byte gUnknown_08A20DCC
_080AE3AC: .4byte 0x0000FFFF

	THUMB_FUNC_START sub_80AE3B0
sub_80AE3B0: @ 0x080AE3B0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AE3D0  @ gUnknown_08A20DA4
	movs r1, #4
	bl Proc_Create
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #2
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE3D0: .4byte gUnknown_08A20DA4

	THUMB_FUNC_START sub_80AE3D4
sub_80AE3D4: @ 0x080AE3D4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AE3F4  @ gUnknown_08A20DCC
	movs r1, #4
	bl Proc_Create
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #2
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE3F4: .4byte gUnknown_08A20DCC

	THUMB_FUNC_START sub_80AE3F8
sub_80AE3F8: @ 0x080AE3F8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AE418  @ gUnknown_08A20DA4
	bl Proc_CreateBlockingChild
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #2
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE418: .4byte gUnknown_08A20DA4

	THUMB_FUNC_START sub_80AE41C
sub_80AE41C: @ 0x080AE41C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AE43C  @ gUnknown_08A20DCC
	bl Proc_CreateBlockingChild
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #2
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE43C: .4byte gUnknown_08A20DCC

	THUMB_FUNC_START sub_80AE440
sub_80AE440: @ 0x080AE440
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AE460  @ gUnknown_08A20DA4
	movs r1, #4
	bl Proc_Create
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	ldr r1, _080AE464  @ 0x0000FFFF
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE460: .4byte gUnknown_08A20DA4
_080AE464: .4byte 0x0000FFFF

	THUMB_FUNC_START sub_80AE468
sub_80AE468: @ 0x080AE468
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AE488  @ gUnknown_08A20DCC
	movs r1, #4
	bl Proc_Create
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	ldr r1, _080AE48C  @ 0x0000FFFF
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE488: .4byte gUnknown_08A20DCC
_080AE48C: .4byte 0x0000FFFF

	THUMB_FUNC_START sub_80AE490
sub_80AE490: @ 0x080AE490
	push {lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	ldr r1, _080AE4AC  @ gPaletteBuffer
	ldr r2, _080AE4B0  @ 0x01000100
	mov r0, sp
	bl CpuFastSet
	bl EnablePaletteSync
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080AE4AC: .4byte gPaletteBuffer
_080AE4B0: .4byte 0x01000100

	THUMB_FUNC_START sub_80AE4B4
sub_80AE4B4: @ 0x080AE4B4
	push {lr}
	ldr r0, _080AE4D0  @ gUnknown_08A20DA4
	bl Proc_Find
	bl Proc_Delete
	ldr r0, _080AE4D4  @ gUnknown_08A20DCC
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_080AE4D0: .4byte gUnknown_08A20DA4
_080AE4D4: .4byte gUnknown_08A20DCC

	THUMB_FUNC_START sub_80AE4D8
sub_80AE4D8: @ 0x080AE4D8
	adds r2, r0, #0
	movs r0, #0
	str r0, [r2, #0x2c]
	adds r1, r2, #0
	adds r1, #0x34
	strb r0, [r1]
	str r0, [r2, #0x3c]
	str r0, [r2, #0x44]
	str r0, [r2, #0x40]
	str r0, [r2, #0x48]
	adds r1, #3
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	str r0, [r2, #0x4c]
	str r0, [r2, #0x50]
	str r0, [r2, #0x58]
	adds r1, #1
	strb r0, [r1]
	str r0, [r2, #0x54]
	movs r1, #0
	strh r0, [r2, #0x30]
	strh r0, [r2, #0x32]
	adds r3, r2, #0
	adds r3, #0x3a
	movs r0, #1
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x36
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80AE518
sub_80AE518: @ 0x080AE518
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	ldr r6, [r5, #0x2c]
	ldr r0, [r5, #0x58]
	cmp r0, #0
	beq _080AE54C
	adds r1, r5, #0
	adds r1, #0x39
	movs r0, #0
	strb r0, [r1]
	ldr r1, [r5, #0x58]
	adds r0, r5, #0
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AE542
	b _080AE70E
_080AE542:
	b _080AE54E
_080AE544:
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080AE706
_080AE54C:
	str r0, [r5, #0x58]
_080AE54E:
	movs r0, #0x37
	adds r0, r0, r5
	mov r9, r0
_080AE554:
	ldrb r0, [r6]
	cmp r0, #4
	bne _080AE55C
	adds r6, #0xc
_080AE55C:
	ldrb r0, [r6]
	cmp r0, #5
	bne _080AE5AE
	adds r0, r5, #0
	adds r0, #0x3a
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq _080AE5A6
	subs r0, #4
	ldrb r3, [r0]
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r2, r0, #0
	cmp r1, #0
	bne _080AE580
	ldrb r0, [r6, #0xa]
	b _080AE586
_080AE580:
	cmp r1, #0
	ble _080AE588
	subs r0, r3, #1
_080AE586:
	strb r0, [r2]
_080AE588:
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	beq _080AE5AC
	adds r1, r6, #0
	subs r1, #0xc
	ldrb r0, [r1]
	cmp r0, #4
	beq _080AE5AE
_080AE59A:
	adds r6, r1, #0
	subs r1, #0xc
	ldrb r0, [r1]
	cmp r0, #4
	bne _080AE59A
	b _080AE5AE
_080AE5A6:
	adds r0, r5, #0
	adds r0, #0x36
	strb r1, [r0]
_080AE5AC:
	adds r6, #0xc
_080AE5AE:
	ldrb r0, [r6]
	cmp r0, #8
	bne _080AE5D2
	ldr r0, [r5, #0x58]
	cmp r0, #0
	beq _080AE5D0
	ldr r0, [r5, #0x54]
	adds r0, #1
	str r0, [r5, #0x54]
	adds r1, r5, #0
	adds r1, #0x39
	movs r0, #1
	strb r0, [r1]
	ldr r1, [r5, #0x58]
	adds r0, r5, #0
	bl _call_via_r1
_080AE5D0:
	adds r6, #0xc
_080AE5D2:
	ldrb r0, [r6]
	cmp r0, #6
	bne _080AE5DA
	b _080AE706
_080AE5DA:
	subs r0, #9
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _080AE544
	adds r0, r5, #0
	adds r0, #0x38
	ldrb r1, [r0]
	mov r8, r0
	cmp r1, #0
	bne _080AE6EA
	ldrb r0, [r6]
	cmp r0, #1
	bgt _080AE60A
	cmp r0, #0
	blt _080AE60A
	ldr r0, [r5, #0x44]
	cmp r0, #0
	bne _080AE60A
	mov r2, r9
	ldrb r1, [r2]
	movs r0, #1
	subs r0, r0, r1
	strb r0, [r2]
_080AE60A:
	ldrb r0, [r6]
	cmp r0, #1
	beq _080AE64A
	cmp r0, #1
	bgt _080AE61A
	cmp r0, #0
	beq _080AE624
	b _080AE6EA
_080AE61A:
	cmp r0, #2
	beq _080AE674
	cmp r0, #3
	beq _080AE6D8
	b _080AE6EA
_080AE624:
	ldr r0, [r6, #4]
	ldr r2, [r5, #0x40]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r2, r2, r1
	ldr r1, [r5, #0x3c]
	adds r1, r1, r2
	ldr r2, [r5, #0x44]
	adds r1, r1, r2
	mov r2, r9
	ldrb r3, [r2]
	ldr r2, [r5, #0x48]
	muls r2, r3, r2
	adds r1, r1, r2
	ldrh r2, [r6, #8]
	lsrs r2, r2, #2
	bl CpuFastSet
	b _080AE66A
_080AE64A:
	ldr r0, [r6, #4]
	ldr r2, [r5, #0x40]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r2, r2, r1
	ldr r1, [r5, #0x3c]
	adds r1, r1, r2
	ldr r2, [r5, #0x44]
	adds r1, r1, r2
	mov r2, r9
	ldrb r3, [r2]
	ldr r2, [r5, #0x48]
	muls r2, r3, r2
	adds r1, r1, r2
	bl CopyDataWithPossibleUncomp
_080AE66A:
	ldrh r1, [r6, #8]
	ldr r0, [r5, #0x44]
	adds r0, r0, r1
	str r0, [r5, #0x44]
	b _080AE6EA
_080AE674:
	ldr r1, [r5, #0x48]
	movs r0, #0x80
	lsls r0, r0, #8
	adds r4, r5, #0
	adds r4, #0x37
	adds r7, r5, #0
	adds r7, #0x34
	cmp r1, r0
	bne _080AE69A
	ldrb r0, [r7]
	mov r1, r9
	ldrb r2, [r1]
	lsls r2, r2, #0xf
	ldr r1, [r5, #0x3c]
	adds r1, r1, r2
	ldr r2, _080AE6D4  @ 0x0000FFFF
	ands r1, r2
	bl SetBackgroundTileDataOffset
_080AE69A:
	ldrb r0, [r7]
	bl BG_GetMapBuffer
	ldr r1, [r6, #4]
	adds r2, r5, #0
	adds r2, #0x35
	ldrb r2, [r2]
	lsls r2, r2, #0xc
	ldrb r4, [r4]
	ldr r3, [r5, #0x48]
	muls r4, r3, r4
	ldr r3, [r5, #0x40]
	adds r3, r3, r4
	lsls r3, r3, #0x11
	lsrs r3, r3, #0x16
	adds r2, r2, r3
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl CallARM_FillTileRect
	movs r0, #0
	str r0, [r5, #0x44]
	movs r0, #1
	ldrb r7, [r7]
	lsls r0, r7
	bl BG_EnableSyncByMask
	b _080AE6EA
	.align 2, 0
_080AE6D4: .4byte 0x0000FFFF
_080AE6D8:
	ldr r0, [r6, #4]
	adds r1, r5, #0
	adds r1, #0x35
	ldrb r1, [r1]
	lsls r1, r1, #5
	ldrh r2, [r6, #8]
	lsls r2, r2, #5
	bl CopyToPaletteBuffer
_080AE6EA:
	mov r2, r8
	ldrb r0, [r2]
	adds r0, #1
	movs r1, #0
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r2, [r6, #0xa]
	cmp r0, r2
	bls _080AE706
	adds r6, #0xc
	mov r0, r8
	strb r1, [r0]
	b _080AE554
_080AE706:
	str r6, [r5, #0x2c]
	ldr r0, [r5, #0x50]
	adds r0, #1
	str r0, [r5, #0x50]
_080AE70E:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AE71C
sub_80AE71C: @ 0x080AE71C
	push {r4, lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x2c]
	ldrb r0, [r0]
	cmp r0, #0xa
	bne _080AE74A
	adds r4, r1, #0
	adds r4, #0x34
	ldrb r0, [r4]
	ldr r1, [r1, #0x3c]
	bl SetBackgroundTileDataOffset
	ldrb r0, [r4]
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #1
	ldrb r4, [r4]
	lsls r0, r4
	bl BG_EnableSyncByMask
_080AE74A:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AE750
sub_80AE750: @ 0x080AE750
	push {lr}
	ldr r0, _080AE760  @ gUnknown_08A20DFC
	bl Proc_Find
	cmp r0, #0
	bne _080AE764
	movs r0, #0
	b _080AE766
	.align 2, 0
_080AE760: .4byte gUnknown_08A20DFC
_080AE764:
	movs r0, #1
_080AE766:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AE76C
sub_80AE76C: @ 0x080AE76C
	push {lr}
	ldr r0, _080AE78C  @ gUnknown_08A20DFC
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080AE788
	ldr r2, [r1, #0x2c]
	ldrb r0, [r2]
	cmp r0, #6
	bne _080AE788
	adds r0, r2, #0
	adds r0, #0xc
	str r0, [r1, #0x2c]
_080AE788:
	pop {r0}
	bx r0
	.align 2, 0
_080AE78C: .4byte gUnknown_08A20DFC

	THUMB_FUNC_START sub_80AE790
sub_80AE790: @ 0x080AE790
	push {lr}
	ldr r0, _080AE7A0  @ gUnknown_08A20DFC
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_080AE7A0: .4byte gUnknown_08A20DFC

	THUMB_FUNC_START sub_80AE7A4
sub_80AE7A4: @ 0x080AE7A4
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, _080AE7C0  @ gUnknown_08A20DFC
	bl Proc_Find
	cmp r0, #0
	beq _080AE7B8
	adds r0, #0x3a
	strb r4, [r0]
_080AE7B8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AE7C0: .4byte gUnknown_08A20DFC

	THUMB_FUNC_START sub_80AE7C4
sub_80AE7C4: @ 0x080AE7C4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	mov r8, r1
	mov r9, r2
	mov sl, r3
	ldr r6, [sp, #0x20]
	ldr r7, [sp, #0x24]
	ldr r1, [sp, #0x30]
	cmp r1, #0
	bne _080AE7EC
	ldr r0, _080AE7E8  @ gUnknown_08A20DFC
	movs r1, #3
	b _080AE7EE
	.align 2, 0
_080AE7E8: .4byte gUnknown_08A20DFC
_080AE7EC:
	ldr r0, _080AE848  @ gUnknown_08A20DFC
_080AE7EE:
	bl Proc_Create
	adds r4, r0, #0
	str r5, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x34
	mov r1, r8
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x35
	ldr r0, [sp, #0x28]
	strb r0, [r1]
	cmp r7, #0
	bge _080AE80E
	movs r7, #0x80
	lsls r7, r7, #7
_080AE80E:
	cmp r6, #0
	bge _080AE814
	movs r6, #0
_080AE814:
	mov r0, r8
	bl GetBackgroundTileDataOffset
	str r0, [r4, #0x3c]
	str r6, [r4, #0x40]
	str r7, [r4, #0x48]
	mov r2, r9
	strh r2, [r4, #0x30]
	mov r6, sl
	strh r6, [r4, #0x32]
	ldr r0, [sp, #0x2c]
	str r0, [r4, #0x58]
	mov r1, r8
	lsls r0, r1, #0x10
	lsrs r0, r0, #0x10
	mov r2, r9
	negs r1, r2
	movs r3, #0xff
	ands r1, r3
	mov r6, sl
	negs r2, r6
	ands r2, r3
	bl BG_SetPosition
	b _080AE856
	.align 2, 0
_080AE848: .4byte gUnknown_08A20DFC
_080AE84C:
	ldrb r0, [r5, #0xa]
	ldr r1, [r4, #0x4c]
	adds r1, r1, r0
	str r1, [r4, #0x4c]
	adds r5, #0xc
_080AE856:
	ldrb r0, [r5]
	cmp r0, #9
	bls _080AE84C
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AE86C
sub_80AE86C: @ 0x080AE86C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r1, #0
	ldr r1, [r0, #0x30]
	lsls r1, r1, #5
	ldr r2, _080AE92C  @ gPaletteBuffer
	adds r1, r1, r2
	mov r8, r1
	ldr r1, [r0, #0x3c]
	mov ip, r1
	ldr r7, [r0, #0x40]
	movs r1, #0
	ldr r0, [r0, #0x34]
	cmp r1, r0
	bge _080AE918
	str r0, [sp, #4]
	movs r0, #0x80
	subs r5, r0, r6
	movs r0, #0xf8
	lsls r0, r0, #7
	mov sl, r0
_080AE89E:
	adds r1, #1
	str r1, [sp]
	movs r1, #0xf
	mov r9, r1
_080AE8A6:
	mov r0, ip
	ldrh r4, [r0]
	movs r0, #0x1f
	ands r0, r4
	adds r2, r0, #0
	muls r2, r5, r2
	ldrh r3, [r7]
	movs r0, #0x1f
	ands r0, r3
	muls r0, r6, r0
	adds r2, r2, r0
	asrs r2, r2, #7
	movs r1, #0x1f
	ands r2, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r3
	muls r0, r6, r0
	adds r1, r1, r0
	asrs r1, r1, #7
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r1, r0
	adds r2, r2, r1
	mov r0, sl
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	mov r0, sl
	ands r0, r3
	muls r0, r6, r0
	adds r1, r1, r0
	asrs r1, r1, #7
	mov r0, sl
	ands r1, r0
	adds r2, r2, r1
	mov r1, r8
	strh r2, [r1]
	movs r0, #2
	add r8, r0
	add ip, r0
	adds r7, #2
	movs r1, #1
	negs r1, r1
	add r9, r1
	mov r0, r9
	cmp r0, #0
	bge _080AE8A6
	ldr r1, [sp]
	ldr r0, [sp, #4]
	cmp r1, r0
	blt _080AE89E
_080AE918:
	bl EnablePaletteSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AE92C: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80AE930
sub_80AE930: @ 0x080AE930
	movs r1, #0
	str r1, [r0, #0x38]
	bx lr

	THUMB_FUNC_START sub_80AE938
sub_80AE938: @ 0x080AE938
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x38]
	ldr r1, [r2, #0x2c]
	adds r0, r0, r1
	str r0, [r2, #0x38]
	movs r1, #0x80
	lsls r1, r1, #1
	cmp r0, r1
	ble _080AE950
	movs r0, #0
	str r0, [r2, #0x38]
_080AE950:
	ldr r0, [r2, #0x38]
	subs r1, r1, r0
	cmp r0, #0x7f
	bgt _080AE95A
	adds r1, r0, #0
_080AE95A:
	adds r0, r2, #0
	bl sub_80AE86C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AE964
sub_80AE964: @ 0x080AE964
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	mov r8, r0
	mov r9, r1
	adds r4, r2, #0
	adds r5, r3, #0
	ldr r6, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	ldr r0, _080AE998  @ gUnknown_08A20E24
	bl Proc_Create
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x34]
	mov r1, r8
	str r1, [r0, #0x3c]
	mov r1, r9
	str r1, [r0, #0x40]
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AE998: .4byte gUnknown_08A20E24

	THUMB_FUNC_START sub_80AE99C
sub_80AE99C: @ 0x080AE99C
	push {lr}
	ldr r0, _080AE9AC  @ gUnknown_08A20E24
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_080AE9AC: .4byte gUnknown_08A20E24

	THUMB_FUNC_START sub_80AE9B0
sub_80AE9B0: @ 0x080AE9B0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	mov r9, r3
	ldr r4, [sp, #0x2c]
	ldr r0, [sp, #0x34]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r7, r0, #0
	cmp r5, #0
	beq _080AE9E0
	ldr r1, _080AEA1C  @ 0x000003FF
	ands r1, r0
	lsls r1, r1, #5
	ldr r0, _080AEA20  @ 0x06010000
	adds r1, r1, r0
	adds r0, r5, #0
	bl CopyDataWithPossibleUncomp
_080AE9E0:
	cmp r6, #0
	beq _080AE9F4
	adds r1, r4, #0
	adds r1, #0x10
	lsls r1, r1, #5
	ldr r2, [sp, #0x30]
	lsls r2, r2, #5
	adds r0, r6, #0
	bl CopyToPaletteBuffer
_080AE9F4:
	movs r0, #0xf
	ands r4, r0
	lsls r3, r4, #0xc
	adds r3, r3, r7
	ldr r0, [sp, #0x28]
	str r0, [sp]
	ldr r0, [sp, #0x38]
	str r0, [sp, #4]
	mov r0, r8
	mov r1, r9
	ldr r2, [sp, #0x24]
	bl APProc_Create
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080AEA1C: .4byte 0x000003FF
_080AEA20: .4byte 0x06010000

	THUMB_FUNC_START sub_80AEA24
sub_80AEA24: @ 0x080AEA24
	push {lr}
	adds r1, r0, #0
	cmp r1, #1
	beq _080AEA4C
	cmp r1, #1
	bgt _080AEA36
	cmp r1, #0
	beq _080AEA40
	b _080AEA68
_080AEA36:
	cmp r1, #2
	beq _080AEA58
	cmp r1, #3
	beq _080AEA64
	b _080AEA68
_080AEA40:
	ldr r0, _080AEA48  @ gLCDControlBuffer
	ldrh r0, [r0, #0x1c]
	b _080AEA68
	.align 2, 0
_080AEA48: .4byte gLCDControlBuffer
_080AEA4C:
	ldr r0, _080AEA54  @ gLCDControlBuffer
	ldrh r0, [r0, #0x20]
	b _080AEA68
	.align 2, 0
_080AEA54: .4byte gLCDControlBuffer
_080AEA58:
	ldr r0, _080AEA60  @ gLCDControlBuffer
	ldrh r0, [r0, #0x24]
	b _080AEA68
	.align 2, 0
_080AEA60: .4byte gLCDControlBuffer
_080AEA64:
	ldr r0, _080AEA6C  @ gLCDControlBuffer
	ldrh r0, [r0, #0x28]
_080AEA68:
	pop {r1}
	bx r1
	.align 2, 0
_080AEA6C: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80AEA70
sub_80AEA70: @ 0x080AEA70
	push {lr}
	adds r1, r0, #0
	cmp r1, #1
	beq _080AEA98
	cmp r1, #1
	bgt _080AEA82
	cmp r1, #0
	beq _080AEA8C
	b _080AEAB4
_080AEA82:
	cmp r1, #2
	beq _080AEAA4
	cmp r1, #3
	beq _080AEAB0
	b _080AEAB4
_080AEA8C:
	ldr r0, _080AEA94  @ gLCDControlBuffer
	ldrh r0, [r0, #0x1e]
	b _080AEAB4
	.align 2, 0
_080AEA94: .4byte gLCDControlBuffer
_080AEA98:
	ldr r0, _080AEAA0  @ gLCDControlBuffer
	ldrh r0, [r0, #0x22]
	b _080AEAB4
	.align 2, 0
_080AEAA0: .4byte gLCDControlBuffer
_080AEAA4:
	ldr r0, _080AEAAC  @ gLCDControlBuffer
	ldrh r0, [r0, #0x26]
	b _080AEAB4
	.align 2, 0
_080AEAAC: .4byte gLCDControlBuffer
_080AEAB0:
	ldr r0, _080AEAB8  @ gLCDControlBuffer
	ldrh r0, [r0, #0x2a]
_080AEAB4:
	pop {r1}
	bx r1
	.align 2, 0
_080AEAB8: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80AEABC
sub_80AEABC: @ 0x080AEABC
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl strcpy
	adds r0, r5, #0
	bl strlen
	adds r4, r4, r0
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AEADC
sub_80AEADC: @ 0x080AEADC
	strb r0, [r1]
	adds r1, #1
	movs r0, #0
	strb r0, [r1]
	adds r0, r1, #0
	bx lr

	THUMB_FUNC_START sub_80AEAE8
sub_80AEAE8: @ 0x080AEAE8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r0, [r5]
	mov r1, sp
	bl GetCharTextWidth
	adds r4, r0, #0
	ldr r1, [r5]
	subs r4, r4, r1
	ldr r0, [r6]
	adds r2, r4, #0
	bl memcpy
	ldr r0, [r5]
	adds r0, r0, r4
	str r0, [r5]
	ldr r0, [r6]
	adds r0, r0, r4
	str r0, [r6]
	adds r0, r4, #0
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AEB1C
sub_80AEB1C: @ 0x080AEB1C
	push {lr}
	movs r0, #0
	bl SetPrimaryHBlankHandler
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AEB28
sub_80AEB28: @ 0x080AEB28
	push {lr}
	sub sp, #4
	adds r3, r0, #0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0
	str r0, [sp]
	movs r2, #0
	bl sub_80029E8
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AEB44
sub_80AEB44: @ 0x080AEB44
	push {lr}
	sub sp, #4
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	str r1, [sp]
	adds r1, r2, #0
	movs r3, #0x20
	bl sub_80029E8
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AEB60
sub_80AEB60: @ 0x080AEB60
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AEB88  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AEB76
	movs r0, #0x70
	bl m4aSongNumStart
_080AEB76:
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	ldr r2, [r4, #0x58]
	bl StartHelpBox_Unk
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AEB88: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80AEB8C
sub_80AEB8C: @ 0x080AEB8C
	push {lr}
	adds r2, r0, #0
	ldr r0, _080AEBC0  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	ldr r0, _080AEBC4  @ 0x0000030B
	ands r0, r1
	cmp r0, #0
	beq _080AEBBA
	adds r0, r2, #0
	bl Proc_ClearNativeCallback
	ldr r0, _080AEBC8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AEBB6
	movs r0, #0x71
	bl m4aSongNumStart
_080AEBB6:
	bl CloseHelpBox
_080AEBBA:
	pop {r0}
	bx r0
	.align 2, 0
_080AEBC0: .4byte gKeyStatusPtr
_080AEBC4: .4byte 0x0000030B
_080AEBC8: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80AEBCC
sub_80AEBCC: @ 0x080AEBCC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, _080AEBE8  @ gUnknown_08A20E44
	bl Proc_CreateBlockingChild
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x58]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AEBE8: .4byte gUnknown_08A20E44

	THUMB_FUNC_START sub_80AEBEC
sub_80AEBEC: @ 0x080AEBEC
	push {r4, lr}
	movs r4, #0
_080AEBF0:
	adds r4, #1
	movs r1, #0xa
	bl __divsi3
	cmp r0, #0
	bne _080AEBF0
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AEC04
sub_80AEC04: @ 0x080AEC04
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r4, [sp, #0x14]
	ldr r0, [sp, #0x18]
	subs r7, r2, r6
	subs r2, r0, r5
	adds r1, r7, #0
	muls r1, r2, r1
	subs r3, r3, r5
	subs r4, r4, r6
	adds r0, r3, #0
	muls r0, r4, r0
	subs r1, r1, r0
	cmp r1, #0
	blt _080AEC4C
	ldr r0, [sp, #0x20]
	subs r5, r0, r5
	adds r1, r4, #0
	muls r1, r5, r1
	ldr r0, [sp, #0x1c]
	subs r4, r0, r6
	adds r0, r2, #0
	muls r0, r4, r0
	subs r1, r1, r0
	cmp r1, #0
	blt _080AEC4C
	adds r0, r4, #0
	muls r0, r3, r0
	adds r1, r5, #0
	muls r1, r7, r1
	subs r0, r0, r1
	cmp r0, #0
	blt _080AEC4C
	movs r0, #1
	b _080AEC4E
_080AEC4C:
	movs r0, #0
_080AEC4E:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AEC54
sub_80AEC54: @ 0x080AEC54
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	movs r0, #0
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AEC68
sub_80AEC68: @ 0x080AEC68
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	movs r0, #0
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AEC7C
sub_80AEC7C: @ 0x080AEC7C
	push {lr}
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r0, #0x64
	beq _080AEC8A
	movs r0, #0
	b _080AEC8C
_080AEC8A:
	movs r0, #1
_080AEC8C:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AEC90
sub_80AEC90: @ 0x080AEC90
	movs r0, #0
	bx lr

	THUMB_FUNC_START sub_80AEC94
sub_80AEC94: @ 0x080AEC94
	push {lr}
	movs r2, #0
	ldr r1, _080AECA8  @ gUnknown_08A20E74
_080AEC9A:
	ldr r0, [r1]
	cmp r0, #0
	blt _080AECAC
	adds r1, #0x10
	adds r2, #1
	b _080AEC9A
	.align 2, 0
_080AECA8: .4byte gUnknown_08A20E74
_080AECAC:
	adds r0, r2, #0
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AECB4
sub_80AECB4: @ 0x080AECB4
	push {r4, r5, lr}
	movs r3, #0
	movs r4, #0
	ldr r0, _080AECD0  @ gUnknown_08A20E74
	adds r5, r0, #0
	adds r5, #8
	adds r2, r0, #0
_080AECC2:
	lsls r1, r3, #4
	ldr r0, [r2]
	cmp r0, #0
	bge _080AECD4
	adds r0, r4, #0
	b _080AECE4
	.align 2, 0
_080AECD0: .4byte gUnknown_08A20E74
_080AECD4:
	adds r0, r1, r5
	ldr r0, [r0]
	cmp r0, #0
	beq _080AECDE
	adds r4, #1
_080AECDE:
	adds r2, #0x10
	adds r3, #1
	b _080AECC2
_080AECE4:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AECEC
sub_80AECEC: @ 0x080AECEC
	push {lr}
	asrs r3, r1, #5
	lsls r3, r3, #2
	adds r3, r3, r0
	movs r2, #0x1f
	ands r2, r1
	ldr r0, [r3, #0x40]
	lsrs r0, r2
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _080AED08
	movs r0, #0
	b _080AED0A
_080AED08:
	movs r0, #1
_080AED0A:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AED10
sub_80AED10: @ 0x080AED10
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r2, #0
	movs r4, #0
	ldr r3, _080AED2C  @ gUnknown_08A20E74
	adds r5, r3, #0
_080AED1C:
	lsls r1, r2, #4
	adds r0, r1, r5
	ldr r0, [r0]
	cmp r0, #0
	bge _080AED30
	adds r0, r4, #0
	b _080AED5E
	.align 2, 0
_080AED2C: .4byte gUnknown_08A20E74
_080AED30:
	adds r0, r3, #0
	adds r0, #8
	adds r0, r1, r0
	ldr r0, [r0]
	cmp r0, #0
	beq _080AED56
	asrs r1, r2, #5
	lsls r1, r1, #2
	adds r1, r1, r6
	movs r0, #0x1f
	ands r0, r2
	ldr r1, [r1, #0x40]
	lsrs r1, r0
	movs r0, #1
	ands r1, r0
	adds r0, r2, #1
	cmp r1, #0
	beq _080AED5A
	b _080AED58
_080AED56:
	adds r0, r2, #1
_080AED58:
	adds r4, r0, #0
_080AED5A:
	adds r2, r0, #0
	b _080AED1C
_080AED5E:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AED64
sub_80AED64: @ 0x080AED64
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x2c
	adds r7, r0, #0
	bl sub_80AEC94
	movs r1, #0x36
	adds r1, r1, r7
	mov r8, r1
	movs r1, #0
	mov r2, r8
	strb r0, [r2]
	add r0, sp, #0x24
	movs r4, #0
	strh r1, [r0]
	adds r1, r7, #0
	adds r1, #0x40
	ldr r2, _080AEEB8  @ 0x01000008
	bl CpuSet
	adds r5, r7, #0
	adds r5, #0x33
	strb r4, [r5]
	mov r0, sp
	bl sub_80A3E4C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AEE9A
	movs r6, #0
	ldr r1, _080AEEBC  @ gUnknown_08A20E74
	ldr r0, [r1]
	mov r9, r8
	mov r8, r5
	movs r3, #0x34
	adds r3, r3, r7
	mov sl, r3
	cmp r0, #0
	blt _080AEE0C
	movs r4, #0
	movs r0, #8
	adds r0, r0, r1
	mov ip, r0
_080AEDC0:
	mov r2, ip
	ldr r0, [r2]
	cmp r0, #0
	bne _080AEDFA
	adds r0, r4, r1
	ldr r1, [r0]
	asrs r0, r1, #5
	lsls r0, r0, #2
	add r0, sp
	movs r3, #0x1f
	ands r1, r3
	ldr r0, [r0]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080AEDFA
	asrs r2, r6, #5
	lsls r2, r2, #2
	adds r2, r2, r7
	adds r0, r6, #0
	ands r0, r3
	lsls r1, r0
	ldr r0, [r2, #0x40]
	orrs r0, r1
	str r0, [r2, #0x40]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_080AEDFA:
	adds r4, #0x10
	movs r3, #0x10
	add ip, r3
	adds r6, #1
	ldr r1, _080AEEBC  @ gUnknown_08A20E74
	adds r0, r4, r1
	ldr r0, [r0]
	cmp r0, #0
	bge _080AEDC0
_080AEE0C:
	bl sub_80AECB4
	adds r2, r0, #0
	mov r0, r8
	ldrb r1, [r0]
	movs r0, #0x64
	muls r0, r1, r0
	mov r3, r9
	ldrb r1, [r3]
	subs r1, r1, r2
	bl __divsi3
	mov r1, sl
	strb r0, [r1]
	movs r6, #0
	ldr r1, _080AEEBC  @ gUnknown_08A20E74
	ldr r0, [r1]
	cmp r0, #0
	blt _080AEE9A
	movs r5, #0
_080AEE34:
	adds r0, r1, #0
	adds r0, #8
	adds r0, r5, r0
	ldr r2, [r0]
	cmp r2, #0
	beq _080AEE8C
	adds r0, r5, r1
	ldr r1, [r0]
	asrs r0, r1, #5
	lsls r0, r0, #2
	add r0, sp
	movs r3, #0x1f
	ands r1, r3
	ldr r0, [r0]
	lsrs r0, r1
	movs r4, #1
	ands r0, r4
	cmp r0, #0
	bne _080AEE6A
	adds r0, r7, #0
	str r3, [sp, #0x28]
	bl _call_via_r2
	lsls r0, r0, #0x18
	ldr r3, [sp, #0x28]
	cmp r0, #0
	beq _080AEE8C
_080AEE6A:
	asrs r2, r6, #5
	lsls r2, r2, #2
	adds r2, r2, r7
	adds r0, r6, #0
	ands r0, r3
	adds r1, r4, #0
	lsls r1, r0
	ldr r0, [r2, #0x40]
	orrs r0, r1
	str r0, [r2, #0x40]
	mov r2, r8
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	adds r0, r7, #0
	adds r0, #0x2e
	strb r4, [r0]
_080AEE8C:
	adds r5, #0x10
	adds r6, #1
	ldr r1, _080AEEBC  @ gUnknown_08A20E74
	adds r0, r5, r1
	ldr r0, [r0]
	cmp r0, #0
	bge _080AEE34
_080AEE9A:
	adds r0, r7, #0
	bl sub_80AED10
	adds r1, r7, #0
	adds r1, #0x36
	strb r0, [r1]
	add sp, #0x2c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AEEB8: .4byte 0x01000008
_080AEEBC: .4byte gUnknown_08A20E74

	THUMB_FUNC_START sub_80AEEC0
sub_80AEEC0: @ 0x080AEEC0
	bx lr

	THUMB_FUNC_START sub_80AEEC4
sub_80AEEC4: @ 0x080AEEC4
	push {r4, lr}
	sub sp, #4
	ldr r4, [r0, #0x14]
	movs r1, #0x80
	lsls r1, r1, #1
	str r0, [sp]
	movs r0, #0
	movs r2, #0
	movs r3, #0x78
	bl sub_80029E8
	adds r4, #0x3f
	movs r0, #1
	strb r0, [r4]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AEEE8
sub_80AEEE8: @ 0x080AEEE8
	push {r4, lr}
	ldr r4, [r0, #0x14]
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r1, [r0]
	ldr r0, _080AEF20  @ gUnknown_08A212E0
	ldr r0, [r0]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	movs r2, #0
	bl sub_80AF7F4
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_80B0018
	adds r4, #0x3f
	movs r0, #0
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AEF20: .4byte gUnknown_08A212E0

	THUMB_FUNC_START sub_80AEF24
sub_80AEF24: @ 0x080AEF24
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080AEF5C  @ gUnknown_08A212E4
	adds r1, r4, #0
	bl Proc_Create
	adds r4, #0x31
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r2, [r4]
	ldr r0, _080AEF60  @ gUnknown_08A212E0
	ldr r0, [r0]
	adds r0, r0, r2
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	beq _080AEF50
	cmp r2, #0x80
	bne _080AEF54
_080AEF50:
	movs r0, #0
	strb r0, [r4]
_080AEF54:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AEF5C: .4byte gUnknown_08A212E4
_080AEF60: .4byte gUnknown_08A212E0

	THUMB_FUNC_START sub_80AEF64
sub_80AEF64: @ 0x080AEF64
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r9, r0
	movs r6, #0
	ldr r2, _080AF0AC  @ gUnknown_08A212E0
	movs r0, #1
	negs r0, r0
	adds r1, r0, #0
_080AEF7C:
	ldr r0, [r2]
	adds r0, r0, r6
	strb r1, [r0]
	adds r6, #1
	cmp r6, #0x7f
	ble _080AEF7C
	bl GetGameClock
	adds r3, r0, #0
	movs r0, #0x7f
	ands r3, r0
	adds r2, r3, #0
	movs r6, #0
	mov r7, r9
	adds r7, #0x31
	mov r1, r9
	adds r1, #0x35
	str r1, [sp, #4]
	mov r5, r9
	adds r5, #0x30
	str r5, [sp]
_080AEFA6:
	asrs r0, r2, #5
	lsls r0, r0, #2
	add r0, r9
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080AEFC6
	ldr r0, _080AF0AC  @ gUnknown_08A212E0
	ldr r0, [r0]
	adds r0, r0, r6
	strb r2, [r0]
	adds r6, #1
_080AEFC6:
	adds r1, r2, #1
	adds r0, r1, #0
	cmp r1, #0
	bge _080AEFD2
	adds r0, r2, #0
	adds r0, #0x80
_080AEFD2:
	asrs r2, r0, #7
	lsls r0, r2, #7
	subs r2, r1, r0
	cmp r2, r3
	bne _080AEFA6
	mov r8, r6
	bl GetGameClock
	adds r4, r0, #0
	adds r4, #0x7b
	ldr r0, _080AF0AC  @ gUnknown_08A212E0
	mov sl, r0
	movs r6, #0xff
_080AEFEC:
	movs r1, #0xd
	adds r2, r4, #0
	muls r2, r1, r2
	adds r1, r2, #1
	adds r0, r1, #0
	cmp r1, #0
	bge _080AF000
	movs r3, #0x80
	lsls r3, r3, #8
	adds r0, r2, r3
_080AF000:
	asrs r4, r0, #0xf
	lsls r0, r4, #0xf
	subs r4, r1, r0
	asrs r0, r4, #8
	mov r1, r8
	bl __modsi3
	adds r5, r0, #0
	movs r0, #0xd
	adds r2, r4, #0
	muls r2, r0, r2
	adds r1, r2, #1
	adds r0, r1, #0
	cmp r1, #0
	bge _080AF024
	movs r3, #0x80
	lsls r3, r3, #8
	adds r0, r2, r3
_080AF024:
	asrs r4, r0, #0xf
	lsls r0, r4, #0xf
	subs r4, r1, r0
	asrs r0, r4, #8
	mov r1, r8
	bl __modsi3
	adds r3, r0, #0
	cmp r5, r3
	beq _080AF068
	mov r1, sl
	ldr r0, [r1]
	adds r1, r0, r5
	adds r0, r0, r3
	ldrb r0, [r0]
	ldrb r2, [r1]
	adds r0, r0, r2
	strb r0, [r1]
	mov r1, sl
	ldr r0, [r1]
	adds r2, r0, r3
	adds r0, r0, r5
	ldrb r0, [r0]
	ldrb r1, [r2]
	subs r0, r0, r1
	strb r0, [r2]
	mov r2, sl
	ldr r1, [r2]
	adds r2, r1, r5
	adds r1, r1, r3
	ldrb r0, [r2]
	ldrb r1, [r1]
	subs r0, r0, r1
	strb r0, [r2]
_080AF068:
	subs r6, #1
	cmp r6, #0
	bge _080AEFEC
	movs r0, #0
	strb r0, [r7]
	ldr r3, [sp, #4]
	ldrb r2, [r3]
	lsrs r0, r2, #5
	lsls r0, r0, #2
	add r0, r9
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080AF0C4
	ldr r0, _080AF0AC  @ gUnknown_08A212E0
	ldr r1, [r0]
	movs r0, #0
	ldrsb r0, [r1, r0]
	adds r5, r2, #0
	cmp r0, r5
	beq _080AF0C4
	adds r3, r7, #0
	movs r4, #0
	ldr r2, [sp, #4]
_080AF0A0:
	ldrb r0, [r3]
	cmp r0, #0x80
	bne _080AF0B0
	strb r4, [r7]
	b _080AF0C4
	.align 2, 0
_080AF0AC: .4byte gUnknown_08A212E0
_080AF0B0:
	adds r0, #1
	strb r0, [r7]
	ldrb r0, [r7]
	adds r0, r1, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldrb r5, [r2]
	cmp r0, r5
	bne _080AF0A0
_080AF0C4:
	movs r0, #1
	ldr r1, [sp]
	strb r0, [r1]
	mov r0, r9
	bl sub_80AEF24
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AF0E0
sub_80AF0E0: @ 0x080AF0E0
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x32
	ldrb r0, [r0]
	adds r2, r0, #1
	movs r0, #0x7f
	ands r2, r0
_080AF0EE:
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r0, r0, r4
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080AF12A
	adds r0, r4, #0
	adds r1, r2, #0
	movs r2, #0x20
	bl sub_80AF7F4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AF126
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_80B0018
	movs r0, #1
	b _080AF138
_080AF126:
	movs r0, #0
	b _080AF138
_080AF12A:
	adds r1, r2, #1
	lsls r1, r1, #0x18
	movs r0, #0xfe
	lsls r0, r0, #0x17
	ands r0, r1
	lsrs r2, r0, #0x18
	b _080AF0EE
_080AF138:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AF140
sub_80AF140: @ 0x080AF140
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x32
	ldrb r0, [r0]
	subs r2, r0, #1
	movs r0, #0x7f
	ands r2, r0
_080AF14E:
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r0, r0, r4
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080AF18A
	adds r0, r4, #0
	adds r1, r2, #0
	movs r2, #0x20
	bl sub_80AF7F4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AF186
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_80B0018
	movs r0, #1
	b _080AF198
_080AF186:
	movs r0, #0
	b _080AF198
_080AF18A:
	subs r1, r2, #1
	lsls r1, r1, #0x18
	movs r0, #0xfe
	lsls r0, r0, #0x17
	ands r0, r1
	lsrs r2, r0, #0x18
	b _080AF14E
_080AF198:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AF1A0
sub_80AF1A0: @ 0x080AF1A0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r6, _080AF1D4  @ gUnknown_0201F19C
	lsls r1, r4, #1
	adds r0, r1, r4
	lsls r0, r0, #4
	adds r0, r0, r4
	adds r2, r0, r6
	movs r3, #0x2f
_080AF1B4:
	ldrb r0, [r2, #1]
	strb r0, [r2]
	adds r2, #1
	subs r3, #1
	cmp r3, #0
	bge _080AF1B4
	adds r0, r1, r4
	lsls r0, r0, #4
	adds r0, r0, r4
	adds r1, r6, #0
	adds r1, #0x30
	adds r0, r0, r1
	strb r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AF1D4: .4byte gUnknown_0201F19C

	THUMB_FUNC_START sub_80AF1D8
sub_80AF1D8: @ 0x080AF1D8
	push {r4, r5, lr}
	movs r1, #0
	ldr r5, _080AF210  @ gUnknown_08A2C838
	ldr r3, _080AF214  @ gUnknown_0201F19C
	movs r2, #0
	adds r4, r3, #0
	adds r4, #0x31
_080AF1E6:
	adds r0, r1, r3
	strb r2, [r0]
	adds r0, r1, r4
	strb r2, [r0]
	adds r1, #1
	cmp r1, #0x30
	ble _080AF1E6
	ldr r1, _080AF218  @ 0x06010800
	adds r0, r5, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080AF21C  @ gUnknown_08A2C8A8
	movs r1, #0xe8
	lsls r1, r1, #2
	movs r2, #0x60
	bl CopyToPaletteBuffer
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080AF210: .4byte gUnknown_08A2C838
_080AF214: .4byte gUnknown_0201F19C
_080AF218: .4byte 0x06010800
_080AF21C: .4byte gUnknown_08A2C8A8

	THUMB_FUNC_START sub_80AF220
sub_80AF220: @ 0x080AF220
	movs r1, #0
	str r1, [r0, #0x2c]
	bx lr

	THUMB_FUNC_START nullsub_65
nullsub_65: @ 0x080AF228
	bx lr

	THUMB_FUNC_START sub_80AF22C
sub_80AF22C: @ 0x080AF22C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	movs r7, #0
	movs r5, #0
	movs r0, #0xff
	mov r8, r0
	mov ip, r0
	movs r6, #0
	ldr r1, _080AF32C  @ gUnknown_08A212DC
	mov r9, r1
	movs r2, #0xd4
	lsls r2, r2, #2
	mov sl, r2
_080AF250:
	mov r0, r9
	ldr r2, [r0]
	lsls r3, r6, #1
	adds r2, r3, r2
	str r2, [sp]
	ldr r2, _080AF330  @ gUnknown_08A21304
	ldr r1, [r2]
	ldr r0, [r4, #0x2c]
	movs r2, #0xc6
	lsls r2, r2, #3
	adds r0, r0, r2
	add r1, sl
	adds r1, r1, r0
	ldrb r0, [r1]
	subs r0, #0x80
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x19
	ldr r1, [sp]
	strb r0, [r1]
	mov r0, r9
	ldr r2, [r0]
	adds r2, r3, r2
	ldr r1, _080AF330  @ gUnknown_08A21304
	ldr r0, [r1]
	add r0, sl
	ldr r1, [r4, #0x2c]
	adds r0, r0, r1
	ldrb r0, [r0]
	subs r0, #0x80
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x19
	movs r1, #0xf0
	subs r1, r1, r0
	strb r1, [r2, #1]
	mov r2, r9
	ldr r0, [r2]
	adds r3, r3, r0
	ldrb r0, [r3]
	cmp r0, r5
	bcs _080AF2A2
	adds r0, r5, #0
_080AF2A2:
	adds r5, r0, #0
	ldrb r0, [r3]
	cmp r0, ip
	bls _080AF2AC
	mov r0, ip
_080AF2AC:
	mov ip, r0
	ldrb r3, [r3, #1]
	adds r0, r3, #0
	cmp r3, r7
	bcs _080AF2B8
	adds r3, r7, #0
_080AF2B8:
	adds r7, r3, #0
	adds r1, r0, #0
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, r8
	bls _080AF2C6
	mov r1, r8
_080AF2C6:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	ldr r0, [r4, #0x2c]
	adds r1, r0, #1
	str r1, [r4, #0x2c]
	ldr r0, _080AF334  @ 0x0000062F
	cmp r1, r0
	ble _080AF2E0
	movs r2, #0xc6
	lsls r2, r2, #3
	subs r0, r1, r2
	str r0, [r4, #0x2c]
_080AF2E0:
	adds r6, #1
	cmp r6, #0xdf
	ble _080AF250
	mov r1, ip
	subs r0, r5, r1
	cmp r0, #0x3f
	ble _080AF2F0
	movs r0, #0x3f
_080AF2F0:
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	mov r2, r8
	subs r0, r7, r2
	cmp r0, #0x3f
	ble _080AF2FE
	movs r0, #0x3f
_080AF2FE:
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	lsls r0, r5, #1
	adds r0, r0, r5
	asrs r1, r0, #2
	movs r0, #0
	bl sub_80AF1A0
	lsls r0, r7, #1
	adds r0, r0, r7
	asrs r1, r0, #2
	movs r0, #1
	bl sub_80AF1A0
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AF32C: .4byte gUnknown_08A212DC
_080AF330: .4byte gUnknown_08A21304
_080AF334: .4byte 0x0000062F

	THUMB_FUNC_START sub_80AF338
sub_80AF338: @ 0x080AF338
	push {lr}
	ldrh r1, [r0, #0x2a]
	adds r0, #0x36
	ldrb r0, [r0]
	adds r2, r0, #3
	asrs r2, r2, #2
	movs r0, #8
	movs r3, #5
	bl sub_80976CC
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AF350
sub_80AF350: @ 0x080AF350
	push {lr}
	adds r2, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x60
	lsrs r1, r1, #2
	lsls r1, r1, #4
	ldrh r2, [r2, #0x2a]
	subs r2, #0x40
	subs r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #2
	bl sub_80AD51C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AF378
sub_80AF378: @ 0x080AF378
	push {r4, lr}
	adds r2, r0, #0
	adds r0, #0x35
	ldrb r0, [r0]
	lsrs r0, r0, #2
	lsls r0, r0, #4
	ldrh r1, [r2, #0x2a]
	subs r0, r0, r1
	cmp r0, #0
	bge _080AF38E
	adds r0, #0xf
_080AF38E:
	asrs r4, r0, #4
	cmp r1, #0
	beq _080AF39E
	cmp r4, #0
	bgt _080AF39E
	movs r0, #1
	negs r0, r0
	b _080AF3C2
_080AF39E:
	ldrh r0, [r2, #0x2a]
	lsrs r0, r0, #4
	adds r3, r0, #5
	adds r0, r2, #0
	adds r0, #0x36
	ldrb r1, [r0]
	subs r0, r1, #1
	cmp r0, #0
	bge _080AF3B2
	adds r0, r1, #2
_080AF3B2:
	asrs r0, r0, #2
	cmp r3, r0
	bgt _080AF3C0
	cmp r4, #3
	ble _080AF3C0
	movs r0, #1
	b _080AF3C2
_080AF3C0:
	movs r0, #0
_080AF3C2:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AF3C8
sub_80AF3C8: @ 0x080AF3C8
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	ldrh r0, [r6, #0x2a]
	lsrs r0, r0, #4
	subs r0, #1
	lsls r7, r0, #2
	ldr r0, _080AF3E4  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	adds r4, r7, #0
	adds r0, r4, #0
	b _080AF4A8
	.align 2, 0
_080AF3E4: .4byte gBG2TilemapBuffer
_080AF3E8:
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_80AECEC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AF3FA
	movs r5, #0
	b _080AF440
_080AF3FA:
	ldr r0, _080AF438  @ gUnknown_08A20E74
	lsls r1, r4, #4
	adds r0, #8
	adds r1, r1, r0
	ldr r0, [r1]
	cmp r0, #0
	beq _080AF440
	adds r2, r4, #0
	cmp r4, #0
	bge _080AF410
	adds r2, r4, #3
_080AF410:
	asrs r2, r2, #2
	lsls r0, r2, #1
	adds r0, #8
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0xc
	lsls r2, r2, #2
	subs r2, r4, r2
	lsls r2, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #1
	ldr r1, _080AF43C  @ gBG2TilemapBuffer
	adds r0, r0, r1
	movs r1, #1
	movs r2, #0x14
	movs r3, #0x14
	bl sub_8004D5C
	b _080AF4A4
	.align 2, 0
_080AF438: .4byte gUnknown_08A20E74
_080AF43C: .4byte gBG2TilemapBuffer
_080AF440:
	cmp r4, #0x62
	ble _080AF478
	adds r2, r4, #0
	cmp r4, #0
	bge _080AF44C
	adds r2, r4, #3
_080AF44C:
	asrs r2, r2, #2
	lsls r0, r2, #1
	adds r0, #8
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0xd
	lsls r2, r2, #2
	subs r2, r4, r2
	lsls r2, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #1
	ldr r1, _080AF474  @ gBG2TilemapBuffer
	adds r0, r0, r1
	adds r2, r4, #1
	adds r1, r5, #0
	bl sub_8004B88
	b _080AF4A4
	.align 2, 0
_080AF474: .4byte gBG2TilemapBuffer
_080AF478:
	adds r2, r4, #0
	cmp r4, #0
	bge _080AF480
	adds r2, r4, #3
_080AF480:
	asrs r2, r2, #2
	lsls r0, r2, #1
	adds r0, #8
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0xd
	lsls r2, r2, #2
	subs r2, r4, r2
	lsls r2, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #1
	ldr r1, _080AF4CC  @ gBG2TilemapBuffer
	adds r0, r0, r1
	adds r2, r4, #1
	adds r1, r5, #0
	bl sub_8004D7C
_080AF4A4:
	adds r4, #1
	adds r0, r7, #0
_080AF4A8:
	adds r0, #0x1c
	cmp r4, r0
	bge _080AF4BE
	movs r5, #1
	cmp r4, #0
	blt _080AF4A4
	adds r0, r6, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r4, r0
	blt _080AF3E8
_080AF4BE:
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AF4CC: .4byte gBG2TilemapBuffer

	THUMB_FUNC_START sub_80AF4D0
sub_80AF4D0: @ 0x080AF4D0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r6, _080AF50C  @ gUnknown_0201F160
	adds r0, r6, #0
	adds r1, r5, #0
	bl Text_Draw
	adds r3, r5, #0
	adds r3, #0x10
	adds r4, #0x34
	ldrb r0, [r4]
	movs r1, #2
	cmp r0, #0x64
	bne _080AF4F0
	movs r1, #4
_080AF4F0:
	ldrb r2, [r4]
	adds r0, r3, #0
	bl sub_8004B88
	adds r0, r6, #0
	adds r0, #0x30
	adds r1, r5, #0
	adds r1, #0x12
	bl Text_Draw
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AF50C: .4byte gUnknown_0201F160

	THUMB_FUNC_START sub_80AF510
sub_80AF510: @ 0x080AF510
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	cmp r0, #0
	beq _080AF51E
	adds r0, #1
	strh r0, [r1, #0x2c]
_080AF51E:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AF524
sub_80AF524: @ 0x080AF524
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0
	bl SetupBackgrounds
	bl sub_8003D20
	bl Font_InitForUIDefault
	bl LoadObjUIGfx
	bl LoadUiFrameGraphics
	bl Font_LoadForUI
	ldr r7, _080AF7A4  @ gLCDControlBuffer
	ldrb r2, [r7, #1]
	movs r0, #1
	orrs r2, r0
	movs r1, #2
	mov sl, r1
	mov r3, sl
	orrs r2, r3
	movs r0, #4
	orrs r2, r0
	movs r1, #8
	orrs r2, r1
	movs r3, #0x10
	orrs r2, r3
	ldrb r3, [r7, #0xc]
	subs r1, #0xc
	adds r0, r1, #0
	ands r0, r3
	strb r0, [r7, #0xc]
	ldrb r3, [r7, #0x10]
	adds r0, r1, #0
	ands r0, r3
	mov r3, sl
	orrs r0, r3
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r7, #0x14]
	ldrb r0, [r7, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r7, #0x18]
	movs r0, #0x21
	negs r0, r0
	ands r2, r0
	movs r1, #0x41
	negs r1, r1
	ands r2, r1
	movs r3, #0x7f
	ands r2, r3
	strb r2, [r7, #1]
	movs r0, #0
	bl RegisterBlankTile
	ldr r0, _080AF7A8  @ gBG0TilemapBuffer
	mov r8, r0
	movs r1, #0
	bl BG_Fill
	ldr r6, _080AF7AC  @ gBG1TilemapBuffer
	adds r0, r6, #0
	movs r1, #0
	bl BG_Fill
	ldr r0, _080AF7B0  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080AF7B4  @ gBG3TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0xf
	bl BG_EnableSyncByMask
	adds r0, r4, #0
	adds r0, #0x35
	movs r1, #0
	mov r9, r1
	mov r2, r9
	strb r2, [r0]
	adds r0, #2
	strb r2, [r0]
	mov r3, r9
	strh r3, [r4, #0x2a]
	adds r0, #4
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r0, #0xf
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r2, r4, #0
	adds r2, #0x32
	movs r0, #0xff
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	strh r3, [r4, #0x2c]
	adds r0, #0x11
	strb r1, [r0]
	adds r0, r4, #0
	bl sub_80AED64
	bl sub_80AFF30
	adds r0, r4, #0
	bl sub_80AF878
	adds r0, r4, #0
	bl sub_80AD47C
	movs r0, #0xa0
	lsls r0, r0, #2
	movs r1, #2
	bl sub_80AD4A0
	adds r0, r4, #0
	bl sub_80AF350
	adds r0, r4, #0
	bl sub_80AF3C8
	movs r5, #0x80
	lsls r5, r5, #5
	movs r0, #3
	str r0, [sp]
	adds r0, r4, #0
	movs r1, #0xd8
	movs r2, #0x48
	adds r3, r5, #0
	bl sub_8097748
	adds r0, r4, #0
	bl sub_80AF338
	ldr r0, _080AF7B8  @ gUnknown_08A2C908
	ldr r1, _080AF7BC  @ 0x06004000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080AF7C0  @ gUnknown_08A01EE4
	movs r1, #0x80
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080AF7C4  @ gUnknown_08A01F04
	movs r1, #0xa0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r1, #0xe1
	lsls r1, r1, #1
	adds r0, r6, r1
	ldr r1, _080AF7C8  @ gUnknown_08A2C4C8
	adds r2, r5, #0
	bl CallARM_FillTileRect
	movs r2, #0xab
	lsls r2, r2, #1
	adds r6, r6, r2
	ldr r1, _080AF7CC  @ gUnknown_08A2C5A8
	adds r0, r6, #0
	adds r2, r5, #0
	bl CallARM_FillTileRect
	movs r3, #0xcf
	lsls r3, r3, #1
	add r8, r3
	mov r0, r8
	adds r1, r4, #0
	bl sub_80AF4D0
	ldr r0, _080AF7D0  @ gUnknown_08A2D32C
	ldr r1, _080AF7D4  @ 0x06016000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080AF7D8  @ gUnknown_08A2E1B8
	movs r1, #0xe0
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r1, _080AF7DC  @ 0x0000FFFC
	movs r0, #2
	movs r2, #0
	bl BG_SetPosition
	ldrb r0, [r7, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r2, #0x7f
	ands r0, r2
	strb r0, [r7, #1]
	adds r1, r7, #0
	adds r1, #0x34
	ldrb r0, [r1]
	movs r3, #1
	orrs r0, r3
	mov r2, sl
	orrs r0, r2
	movs r3, #4
	orrs r0, r3
	movs r2, #8
	orrs r0, r2
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r1]
	subs r1, #7
	movs r0, #4
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x42
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x90
	strb r0, [r1]
	adds r2, r7, #0
	adds r2, #0x36
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	mov r3, sl
	orrs r0, r3
	subs r1, #6
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r2]
	ldr r0, _080AF7E0  @ gUnknown_08A2CABC
	ldr r1, _080AF7E4  @ 0x06012000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080AF7E8  @ gUnknown_08A2D2CC
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x60
	bl CopyToPaletteBuffer
	adds r0, r4, #0
	bl sub_80B0444
	movs r0, #1
	movs r1, #0xf
	movs r2, #3
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	mov r0, r9
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	mov r1, r9
	str r1, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0xe
	bl sub_8086BB8
	adds r0, r4, #0
	bl NewGreenTextColorManager
	bl sub_80AF1D8
	ldr r0, _080AF7EC  @ sub_80AF510
	adds r1, r4, #0
	bl Get6CDifferedLoop6C
	ldr r0, _080AF7F0  @ gUnknown_08A21308
	adds r1, r4, #0
	bl Proc_Create
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AF7A4: .4byte gLCDControlBuffer
_080AF7A8: .4byte gBG0TilemapBuffer
_080AF7AC: .4byte gBG1TilemapBuffer
_080AF7B0: .4byte gBG2TilemapBuffer
_080AF7B4: .4byte gBG3TilemapBuffer
_080AF7B8: .4byte gUnknown_08A2C908
_080AF7BC: .4byte 0x06004000
_080AF7C0: .4byte gUnknown_08A01EE4
_080AF7C4: .4byte gUnknown_08A01F04
_080AF7C8: .4byte gUnknown_08A2C4C8
_080AF7CC: .4byte gUnknown_08A2C5A8
_080AF7D0: .4byte gUnknown_08A2D32C
_080AF7D4: .4byte 0x06016000
_080AF7D8: .4byte gUnknown_08A2E1B8
_080AF7DC: .4byte 0x0000FFFC
_080AF7E0: .4byte gUnknown_08A2CABC
_080AF7E4: .4byte 0x06012000
_080AF7E8: .4byte gUnknown_08A2D2CC
_080AF7EC: .4byte sub_80AF510
_080AF7F0: .4byte gUnknown_08A21308

	THUMB_FUNC_START sub_80AF7F4
sub_80AF7F4: @ 0x080AF7F4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	bl sub_8002A6C
	lsls r0, r0, #0x18
	asrs r3, r0, #0x18
	cmp r3, #0
	bne _080AF834
	adds r0, r4, #0
	adds r0, #0x32
	strb r5, [r0]
	movs r0, #1
	strh r0, [r4, #0x2c]
	ldr r1, _080AF830  @ gUnknown_08A20E74
	lsls r0, r5, #4
	adds r0, r0, r1
	ldr r0, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	str r3, [sp]
	adds r1, r2, #0
	adds r3, r6, #0
	bl sub_80029E8
	movs r0, #1
	b _080AF836
	.align 2, 0
_080AF830: .4byte gUnknown_08A20E74
_080AF834:
	movs r0, #0
_080AF836:
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80AF840
sub_80AF840: @ 0x080AF840
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	bl sub_8002A6C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080AF870
	movs r4, #0
	strh r0, [r5, #0x2c]
	movs r1, #0x80
	lsls r1, r1, #1
	str r0, [sp]
	movs r0, #0
	movs r2, #0
	movs r3, #0x18
	bl sub_80029E8
	adds r0, r5, #0
	adds r0, #0x2f
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
_080AF870:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AF878
sub_80AF878: @ 0x080AF878
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x35
	ldrb r1, [r4]
	bl sub_80AECEC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AF892
	ldrb r0, [r4]
	bl sub_80B0018
	b _080AF89A
_080AF892:
	movs r0, #1
	negs r0, r0
	bl sub_80B0018
_080AF89A:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AF8A0
sub_80AF8A0: @ 0x080AF8A0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r6, #0
	adds r0, #0x37
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080AF994
	ldr r0, _080AF97C  @ gKeyStatusPtr
	ldr r2, [r0]
	ldrh r3, [r2, #6]
	adds r5, r4, #0
	adds r5, #0x38
	movs r0, #4
	strb r0, [r5]
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080AF8D2
	ldrh r3, [r2, #4]
	movs r0, #8
	strb r0, [r5]
_080AF8D2:
	movs r0, #0x40
	ands r0, r3
	cmp r0, #0
	beq _080AF8DE
	movs r6, #4
	negs r6, r6
_080AF8DE:
	movs r0, #0x80
	ands r0, r3
	cmp r0, #0
	beq _080AF8E8
	movs r6, #4
_080AF8E8:
	movs r0, #0x20
	ands r0, r3
	cmp r0, #0
	beq _080AF902
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	movs r1, #3
	ands r0, r1
	cmp r0, #0
	beq _080AF902
	movs r6, #1
	negs r6, r6
_080AF902:
	movs r0, #0x10
	ands r3, r0
	cmp r3, #0
	beq _080AF91A
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	movs r1, #3
	ands r0, r1
	cmp r0, #2
	bhi _080AF91A
	movs r6, #1
_080AF91A:
	cmp r6, #0
	beq _080AF986
	adds r2, r4, #0
	adds r2, #0x35
	ldrb r0, [r2]
	adds r0, r0, r6
	cmp r0, #0
	bge _080AF92C
	b _080AFA5C
_080AF92C:
	adds r1, r4, #0
	adds r1, #0x36
	ldrb r1, [r1]
	cmp r0, r1
	blt _080AF938
	b _080AFA5C
_080AF938:
	strb r0, [r2]
	adds r0, r4, #0
	bl sub_80AF878
	adds r0, r4, #0
	bl sub_80AF378
	adds r5, r4, #0
	adds r5, #0x37
	strb r0, [r5]
	lsls r0, r0, #0x18
	asrs r1, r0, #0x18
	cmp r1, #0
	beq _080AF980
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	bne _080AF964
	adds r0, r4, #0
	movs r1, #0xa
	bl Proc_GotoLabel
_080AF964:
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #1
	bne _080AF974
	adds r0, r4, #0
	movs r1, #0xb
	bl Proc_GotoLabel
_080AF974:
	adds r0, r4, #0
	bl sub_80AF3C8
	b _080AF986
	.align 2, 0
_080AF97C: .4byte gKeyStatusPtr
_080AF980:
	adds r0, r4, #0
	bl sub_80AF350
_080AF986:
	adds r0, r4, #0
	adds r0, #0x37
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AF9D4
_080AF994:
	adds r5, r4, #0
	adds r5, #0x37
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r0, [r0]
	adds r2, r1, #0
	muls r2, r0, r2
	ldrh r0, [r4, #0x2a]
	adds r2, r2, r0
	strh r2, [r4, #0x2a]
	ldr r1, _080AF9D0  @ 0x0000FFFC
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl BG_SetPosition
	ldrh r0, [r4, #0x2a]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	bne _080AF9C6
	movs r0, #0
	strb r0, [r5]
_080AF9C6:
	adds r0, r4, #0
	bl sub_80AF338
	b _080AFA5C
	.align 2, 0
_080AF9D0: .4byte 0x0000FFFC
_080AF9D4:
	ldr r0, _080AF9EC  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080AF9F0
	adds r0, r4, #0
	bl sub_80AF840
	b _080AFA5C
	.align 2, 0
_080AF9EC: .4byte gKeyStatusPtr
_080AF9F0:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080AFA30
	adds r5, r4, #0
	adds r5, #0x35
	ldrb r1, [r5]
	adds r0, r4, #0
	bl sub_80AECEC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080AFA16
	ldrb r1, [r5]
	adds r0, r4, #0
	movs r2, #0x20
	bl sub_80AF7F4
	b _080AFA5C
_080AFA16:
	ldr r0, _080AFA2C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080AFA5C
	movs r0, #0x6c
	bl m4aSongNumStart
	b _080AFA5C
	.align 2, 0
_080AFA2C: .4byte gUnknown_0202BCF0
_080AFA30:
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080AFA4C
	bl sub_8002A6C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080AFA5C
	adds r0, r4, #0
	movs r1, #2
	bl Proc_GotoLabel
	b _080AFA5C
_080AFA4C:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080AFA5C
	adds r0, r4, #0
	movs r1, #3
	bl Proc_GotoLabel
_080AFA5C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AFA64
sub_80AFA64: @ 0x080AFA64
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl sub_8002A6C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080AFA8A
	str r0, [sp]
	movs r0, #0x43
	movs r1, #0
	movs r2, #0xc0
	movs r3, #0x18
	bl sub_80029E8
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080AFA8A:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AFA94
sub_80AFA94: @ 0x080AFA94
	push {r4, lr}
	adds r4, r0, #0
	bl EndBG3Slider
	adds r0, r4, #0
	bl sub_80ADDD4
	ldr r0, _080AFAB0  @ gUnknown_08A21308
	bl Proc_DeleteAllWithScript
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080AFAB0: .4byte gUnknown_08A21308

	THUMB_FUNC_START sub_80AFAB4
sub_80AFAB4: @ 0x080AFAB4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #0x10
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x3b
	ldrb r0, [r5]
	negs r0, r0
	movs r1, #3
	bl __divsi3
	adds r1, r4, #0
	adds r1, #0x3c
	movs r2, #0
	mov r8, r2
	strb r0, [r1]
	ldrb r0, [r5]
	negs r0, r0
	lsls r0, r0, #1
	movs r1, #3
	bl __divsi3
	adds r6, r4, #0
	adds r6, #0x3d
	strb r0, [r6]
	ldrb r0, [r5]
	adds r5, #3
	strb r0, [r5]
	ldr r0, _080AFBA8  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080AFBAC  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080AFBB0  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r4, _080AFBB4  @ gUnknown_08A212D4
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r1, #1
	str r1, [sp]
	movs r1, #7
	str r1, [sp, #4]
	movs r6, #0xa
	str r6, [sp, #8]
	movs r1, #0xb
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #7
	movs r3, #1
	bl sub_80AC844
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r1, #0xb
	str r1, [sp]
	movs r1, #5
	str r1, [sp, #4]
	movs r1, #0x12
	str r1, [sp, #8]
	movs r1, #0xe
	str r1, [sp, #0xc]
	movs r1, #0xa
	movs r2, #5
	movs r3, #1
	bl sub_80AC844
	ldr r4, _080AFBB8  @ gUnknown_08A212D8
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r1, #0xc
	str r1, [sp]
	mov r1, r8
	str r1, [sp, #4]
	movs r1, #0x10
	str r1, [sp, #8]
	movs r1, #0x20
	str r1, [sp, #0xc]
	movs r1, #0xc
	movs r2, #0
	movs r3, #2
	bl sub_80AC844
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r1, #0xf
	str r1, [sp]
	movs r1, #6
	str r1, [sp, #4]
	str r6, [sp, #8]
	movs r1, #2
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_80AC844
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #3
	adds r0, #0xd8
	movs r1, #0x48
	bl sub_80976AC
	movs r0, #7
	bl BG_EnableSyncByMask
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AFBA8: .4byte gBG0TilemapBuffer
_080AFBAC: .4byte gBG1TilemapBuffer
_080AFBB0: .4byte gBG2TilemapBuffer
_080AFBB4: .4byte gUnknown_08A212D4
_080AFBB8: .4byte gUnknown_08A212D8

	THUMB_FUNC_START sub_80AFBBC
sub_80AFBBC: @ 0x080AFBBC
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	adds r5, r0, #0
	adds r0, #0x3b
	movs r1, #0
	mov r9, r1
	mov r2, r9
	strb r2, [r0]
	ldr r6, _080AFC3C  @ gUnknown_08A212D4
	ldr r0, [r6]
	movs r1, #0xe0
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r1, _080AFC40  @ gUnknown_08A2C4C8
	movs r2, #0x80
	lsls r2, r2, #5
	mov r8, r2
	bl CallARM_FillTileRect
	ldr r0, [r6]
	movs r1, #0xaa
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r1, _080AFC44  @ gUnknown_08A2C5A8
	mov r2, r8
	bl CallARM_FillTileRect
	ldr r0, _080AFC48  @ gBG2TilemapBuffer
	ldr r4, _080AFC4C  @ gUnknown_08A212D8
	ldr r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	bl CpuFastSet
	ldr r0, [r4]
	adds r1, r5, #0
	bl sub_80AF4D0
	ldr r0, _080AFC50  @ gUnknown_0202396C
	ldr r1, _080AFC54  @ gUnknown_08A2C92C
	movs r2, #0x90
	lsls r2, r2, #5
	bl CallARM_FillTileRect
	ldr r0, [r6]
	ldr r2, _080AFC58  @ 0x00000642
	adds r0, r0, r2
	ldr r1, _080AFC5C  @ gUnknown_08A2C7A4
	mov r2, r8
	bl CallARM_FillTileRect
	bl sub_80AD564
	adds r5, #0x3a
	mov r0, r9
	strb r0, [r5]
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AFC3C: .4byte gUnknown_08A212D4
_080AFC40: .4byte gUnknown_08A2C4C8
_080AFC44: .4byte gUnknown_08A2C5A8
_080AFC48: .4byte gBG2TilemapBuffer
_080AFC4C: .4byte gUnknown_08A212D8
_080AFC50: .4byte gUnknown_0202396C
_080AFC54: .4byte gUnknown_08A2C92C
_080AFC58: .4byte 0x00000642
_080AFC5C: .4byte gUnknown_08A2C7A4

	THUMB_FUNC_START sub_80AFC60
sub_80AFC60: @ 0x080AFC60
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x3a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r1, [r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r0, r1, r0
	asrs r0, r0, #6
	adds r4, r5, #0
	adds r4, #0x3b
	strb r0, [r4]
	adds r0, r5, #0
	bl sub_80AFAB4
	ldrb r0, [r4]
	cmp r0, #0x18
	bne _080AFC92
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080AFC92:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AFC98
sub_80AFC98: @ 0x080AFC98
	push {lr}
	adds r2, r0, #0
	ldr r0, _080AFCBC  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #5
	ands r0, r1
	cmp r0, #0
	bne _080AFCE0
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080AFCC0
	adds r0, r2, #0
	bl sub_80AF0E0
	b _080AFCE0
	.align 2, 0
_080AFCBC: .4byte gKeyStatusPtr
_080AFCC0:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080AFCD0
	adds r0, r2, #0
	bl sub_80AF140
	b _080AFCE0
_080AFCD0:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080AFCE0
	adds r0, r2, #0
	movs r1, #3
	bl Proc_GotoLabel
_080AFCE0:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AFCE4
sub_80AFCE4: @ 0x080AFCE4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80AF878
	adds r4, #0x3a
	movs r0, #0
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AFCF8
sub_80AFCF8: @ 0x080AFCF8
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x3a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r0, [r1]
	movs r1, #8
	subs r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r0, r1, r0
	cmp r0, #0
	bge _080AFD1A
	adds r0, #0x3f
_080AFD1A:
	asrs r0, r0, #6
	adds r4, r5, #0
	adds r4, #0x3b
	strb r0, [r4]
	adds r0, r5, #0
	bl sub_80AFAB4
	ldrb r0, [r4]
	cmp r0, #0
	bne _080AFD40
	adds r0, r5, #0
	bl sub_80AF350
	adds r0, r5, #0
	bl sub_80AF338
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080AFD40:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AFD48
sub_80AFD48: @ 0x080AFD48
	push {lr}
	adds r2, r0, #0
	adds r2, #0x3a
	movs r1, #0
	strb r1, [r2]
	strh r1, [r0, #0x2c]
	bl sub_80AEF64
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AFD5C
sub_80AFD5C: @ 0x080AFD5C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	mov r8, r0
	mov r7, r8
	adds r7, #0x3a
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	ldrb r0, [r7]
	movs r1, #8
	subs r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r1, r0, r1
	cmp r1, #0
	bge _080AFD84
	adds r1, #0x3f
_080AFD84:
	asrs r1, r1, #6
	movs r0, #0x18
	subs r0, r0, r1
	mov r6, r8
	adds r6, #0x3b
	strb r0, [r6]
	ldrb r0, [r6]
	movs r5, #3
	movs r1, #3
	bl __udivsi3
	movs r1, #0x14
	subs r1, r1, r0
	mov r4, r8
	adds r4, #0x3c
	strb r1, [r4]
	ldr r0, _080AFDEC  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080AFDF0  @ gUnknown_08A212D4
	ldr r0, [r0]
	str r5, [sp]
	movs r1, #0
	ldrsb r1, [r4, r1]
	adds r1, #4
	str r1, [sp, #4]
	movs r1, #0x18
	str r1, [sp, #8]
	str r5, [sp, #0xc]
	movs r1, #1
	movs r2, #0x19
	movs r3, #1
	bl sub_80AC844
	movs r0, #2
	bl BG_EnableSyncByMask
	ldrb r0, [r6]
	cmp r0, #0x18
	bne _080AFDE0
	movs r0, #0
	strb r0, [r7]
	mov r0, r8
	bl Proc_ClearNativeCallback
_080AFDE0:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AFDEC: .4byte gBG1TilemapBuffer
_080AFDF0: .4byte gUnknown_08A212D4

	THUMB_FUNC_START sub_80AFDF4
sub_80AFDF4: @ 0x080AFDF4
	push {lr}
	adds r3, r0, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0
	bne _080AFE88
	adds r0, r3, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080AFE34
	ldrh r2, [r3, #0x2c]
	ldr r1, _080AFE30  @ gUnknown_08A20E74
	adds r0, r3, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #4
	adds r1, #4
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r2, r0
	blt _080AFE34
	adds r0, r3, #0
	bl sub_80AEF24
	b _080AFE88
	.align 2, 0
_080AFE30: .4byte gUnknown_08A20E74
_080AFE34:
	ldr r0, _080AFE4C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080AFE50
	adds r0, r3, #0
	bl sub_80AF0E0
	b _080AFE88
	.align 2, 0
_080AFE4C: .4byte gKeyStatusPtr
_080AFE50:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080AFE60
	adds r0, r3, #0
	bl sub_80AF140
	b _080AFE88
_080AFE60:
	movs r0, #0xc
	ands r0, r1
	cmp r0, #0
	beq _080AFE70
	adds r0, r3, #0
	bl Proc_ClearNativeCallback
	b _080AFE88
_080AFE70:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080AFE88
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080AFE88
	adds r0, r3, #0
	movs r1, #3
	bl Proc_GotoLabel
_080AFE88:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80AFE8C
sub_80AFE8C: @ 0x080AFE8C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r7, r0, #0
	adds r1, r7, #0
	adds r1, #0x3a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r0, [r1]
	movs r1, #8
	subs r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r0, r1, r0
	cmp r0, #0
	bge _080AFEB0
	adds r0, #0x3f
_080AFEB0:
	asrs r0, r0, #6
	adds r6, r7, #0
	adds r6, #0x3b
	strb r0, [r6]
	ldrb r0, [r6]
	movs r5, #3
	movs r1, #3
	bl __udivsi3
	movs r1, #0x14
	subs r1, r1, r0
	adds r4, r7, #0
	adds r4, #0x3c
	strb r1, [r4]
	ldr r0, _080AFF14  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080AFF18  @ gUnknown_08A212D4
	ldr r0, [r0]
	str r5, [sp]
	movs r1, #0
	ldrsb r1, [r4, r1]
	adds r1, #4
	str r1, [sp, #4]
	movs r1, #0x18
	str r1, [sp, #8]
	str r5, [sp, #0xc]
	movs r1, #1
	movs r2, #0x19
	movs r3, #1
	bl sub_80AC844
	movs r0, #2
	bl BG_EnableSyncByMask
	ldrb r1, [r6]
	cmp r1, #0
	bne _080AFF0A
	adds r0, r7, #0
	adds r0, #0x30
	strb r1, [r0]
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
_080AFF0A:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080AFF14: .4byte gBG1TilemapBuffer
_080AFF18: .4byte gUnknown_08A212D4

	THUMB_FUNC_START sub_80AFF1C
sub_80AFF1C: @ 0x080AFF1C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080AFF2C  @ gUnknown_08A21338
	bl Proc_CreateBlockingChild
	pop {r1}
	bx r1
	.align 2, 0
_080AFF2C: .4byte gUnknown_08A21338

	THUMB_FUNC_START sub_80AFF30
sub_80AFF30: @ 0x080AFF30
	push {r4, r5, r6, lr}
	ldr r6, _080AFFF8  @ 0x06014000
	ldr r4, _080AFFFC  @ gUnknown_0201F148
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #5
	bl InitSomeOtherGraphicsRelatedStruct
	ldr r0, _080B0000  @ gUnknown_0859EF00
	movs r5, #0xd0
	lsls r5, r5, #2
	adds r1, r5, #0
	movs r2, #0x40
	bl CopyToPaletteBuffer
	ldr r0, _080B0004  @ gPaletteBuffer
	adds r0, r0, r5
	movs r1, #0
	strh r1, [r0]
	bl EnablePaletteSync
	adds r0, r4, #0
	bl SetFont
	adds r0, r4, #0
	adds r0, #0x20
	bl Text_Init3
	adds r0, r4, #0
	adds r0, #0x28
	bl Text_Init3
	adds r4, #0x30
	movs r5, #2
_080AFF74:
	adds r0, r4, #0
	bl Text_Init3
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _080AFF74
	movs r0, #0
	bl SetFont
	ldr r5, _080AFFFC  @ gUnknown_0201F148
	ldr r0, _080B0008  @ 0x0001FFFF
	ands r0, r6
	lsrs r0, r0, #5
	ldr r2, _080B000C  @ 0x000003FF
	adds r1, r2, #0
	ands r0, r1
	movs r2, #0xa0
	lsls r2, r2, #8
	adds r1, r2, #0
	adds r0, r0, r1
	adds r1, r5, #0
	adds r1, #0x50
	strh r0, [r1]
	movs r0, #0
	bl SetFont
	movs r0, #0
	bl SetFontGlyphSet
	adds r4, r5, #0
	adds r4, #0x18
	adds r0, r4, #0
	movs r1, #5
	bl Text_Init
	adds r0, r4, #0
	bl Text_Clear
	ldr r0, _080B0010  @ 0x000005AA
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertString
	adds r4, #0x30
	adds r0, r4, #0
	movs r1, #2
	bl Text_Init
	adds r0, r4, #0
	bl Text_Clear
	ldr r0, _080B0014  @ 0x000005AE
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_AppendString
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080AFFF8: .4byte 0x06014000
_080AFFFC: .4byte gUnknown_0201F148
_080B0000: .4byte gUnknown_0859EF00
_080B0004: .4byte gPaletteBuffer
_080B0008: .4byte 0x0001FFFF
_080B000C: .4byte 0x000003FF
_080B0010: .4byte 0x000005AA
_080B0014: .4byte 0x000005AE

	THUMB_FUNC_START sub_80B0018
sub_80B0018: @ 0x080B0018
	push {r4, r5, lr}
	adds r1, r0, #0
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	bne _080B002A
	movs r0, #0xfa
	lsls r0, r0, #3
	b _080B0034
_080B002A:
	ldr r0, _080B0080  @ gUnknown_08A20E74
	lsls r1, r1, #4
	adds r0, #0xc
	adds r1, r1, r0
	ldr r0, [r1]
_080B0034:
	bl GetStringFromIndex
	adds r5, r0, #0
	ldr r4, _080B0084  @ gUnknown_0201F148
	adds r0, r4, #0
	bl SetFont
	movs r0, #1
	bl SetFontGlyphSet
	adds r4, #0x20
	adds r0, r4, #0
	movs r1, #0
	bl Text_80046B4
	movs r0, #0xb0
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_SetXCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColorId
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_AppendString
	movs r0, #0
	bl SetFont
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B0080: .4byte gUnknown_08A20E74
_080B0084: .4byte gUnknown_0201F148

	THUMB_FUNC_START sub_80B0088
sub_80B0088: @ 0x080B0088
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	cmp r7, #0x20
	bls _080B015C
	movs r0, #0xff
	mov r1, sl
	ands r1, r0
	mov sl, r1
	ldr r4, _080B016C  @ gSinLookup
	movs r2, #0x80
	adds r2, r2, r4
	mov r9, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl WriteOAMRotScaleData
	movs r4, #0
	ldr r6, _080B0170  @ gUnknown_0201F198
	movs r5, #0x24
_080B0112:
	lsls r0, r4, #2
	ldrh r1, [r6]
	adds r0, r0, r1
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x84
	lsls r2, r2, #1
	add r2, sl
	ldr r3, _080B0174  @ gUnknown_08590F8C
	bl RegisterObjectAttributes
	adds r5, #0x20
	adds r4, #1
	cmp r4, #4
	ble _080B0112
	movs r6, #0xcb
	lsls r6, r6, #8
	movs r5, #0x18
	movs r4, #2
_080B0140:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x80
	lsls r2, r2, #1
	add r2, sl
	ldr r3, _080B0178  @ gUnknown_08590F94
	bl RegisterObjectAttributes
	adds r6, #8
	adds r5, #0x40
	subs r4, #1
	cmp r4, #0
	bge _080B0140
_080B015C:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B016C: .4byte gSinLookup
_080B0170: .4byte gUnknown_0201F198
_080B0174: .4byte gUnknown_08590F8C
_080B0178: .4byte gUnknown_08590F94

	THUMB_FUNC_START sub_80B017C
sub_80B017C: @ 0x080B017C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r9, r0
	mov r8, r1
	adds r4, r2, #0
	movs r6, #0
	movs r7, #0xd
	cmp r3, #0
	beq _080B01EA
	movs r0, #0xff
	ands r1, r0
	mov r8, r1
	cmp r4, #7
	ble _080B01CC
	mov r5, r9
_080B01A0:
	subs r4, #8
	ldr r1, _080B01F8  @ 0x000001FF
	ands r1, r5
	lsls r0, r7, #0xc
	ldr r2, _080B01FC  @ 0x00000847
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	mov r2, r8
	ldr r3, _080B0200  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	adds r5, #8
	adds r6, #1
	cmp r6, #2
	ble _080B01C2
	movs r7, #0xe
_080B01C2:
	cmp r6, #4
	ble _080B01C8
	movs r7, #0xf
_080B01C8:
	cmp r4, #7
	bgt _080B01A0
_080B01CC:
	lsls r1, r6, #3
	add r1, r9
	ldr r0, _080B01F8  @ 0x000001FF
	ands r1, r0
	ldr r3, _080B0200  @ gUnknown_08590F44
	lsls r0, r7, #0xc
	adds r0, r4, r0
	movs r2, #0x84
	lsls r2, r2, #4
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	mov r2, r8
	bl RegisterObjectAttributes
_080B01EA:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B01F8: .4byte 0x000001FF
_080B01FC: .4byte 0x00000847
_080B0200: .4byte gUnknown_08590F44

	THUMB_FUNC_START sub_80B0204
sub_80B0204: @ 0x080B0204
	push {r4, r5, r6, r7, lr}
	ldr r7, [r0, #0x14]
	ldr r0, _080B023C  @ gUnknown_0201F19C
	movs r6, #0x40
	adds r5, r0, #0
	adds r5, #0x30
	movs r4, #1
_080B0212:
	ldrb r3, [r5]
	adds r0, r7, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, #0xf
	adds r1, r6, #0
	adds r2, r3, #0
	bl sub_80B017C
	adds r6, #8
	adds r5, #0x31
	subs r4, #1
	cmp r4, #0
	bge _080B0212
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B023C: .4byte gUnknown_0201F19C

	THUMB_FUNC_START sub_80B0240
sub_80B0240: @ 0x080B0240
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r1, #0
	adds r0, r2, #0
	movs r1, #0x3c
	bl __divsi3
	adds r5, r0, #0
	movs r1, #0x3c
	bl __divsi3
	adds r4, r0, #0
	adds r0, r5, #0
	movs r1, #0x3c
	bl __modsi3
	mov r8, r0
	ldr r3, _080B02C8  @ gUnknown_08A214A6
	movs r5, #0x80
	lsls r5, r5, #7
	str r5, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r7, #0
	bl RegisterObjectAttributes
	adds r1, r6, #0
	adds r1, #0x28
	ldr r0, _080B02CC  @ gUnknown_08A21508
	mov r9, r0
	lsls r4, r4, #2
	add r4, r9
	ldr r3, [r4]
	str r5, [sp]
	movs r0, #0
	adds r2, r7, #0
	bl RegisterObjectAttributes
	adds r1, r6, #0
	adds r1, #0x30
	ldr r3, _080B02D0  @ gUnknown_08A214AE
	str r5, [sp]
	movs r0, #0
	adds r2, r7, #0
	bl RegisterObjectAttributes
	mov r0, r8
	cmp r0, #9
	ble _080B02D4
	adds r4, r6, #0
	adds r4, #0x38
	movs r1, #0xa
	bl __divsi3
	lsls r0, r0, #2
	add r0, r9
	ldr r3, [r0]
	str r5, [sp]
	movs r0, #0
	adds r1, r4, #0
	adds r2, r7, #0
	bl RegisterObjectAttributes
	b _080B02E6
	.align 2, 0
_080B02C8: .4byte gUnknown_08A214A6
_080B02CC: .4byte gUnknown_08A21508
_080B02D0: .4byte gUnknown_08A214AE
_080B02D4:
	adds r1, r6, #0
	adds r1, #0x38
	mov r0, r9
	ldr r3, [r0]
	str r5, [sp]
	movs r0, #0
	adds r2, r7, #0
	bl RegisterObjectAttributes
_080B02E6:
	adds r5, r6, #0
	adds r5, #0x40
	ldr r4, _080B0318  @ gUnknown_08A21508
	mov r0, r8
	movs r1, #0xa
	bl __modsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0
	adds r1, r5, #0
	adds r2, r7, #0
	bl RegisterObjectAttributes
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B0318: .4byte gUnknown_08A21508

	THUMB_FUNC_START sub_80B031C
sub_80B031C: @ 0x080B031C
	movs r1, #0
	str r1, [r0, #0x2c]
	bx lr

	THUMB_FUNC_START sub_80B0324
sub_80B0324: @ 0x080B0324
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r6, [r7, #0x14]
	adds r4, r6, #0
	adds r4, #0x3c
	movs r0, #0
	ldrsb r0, [r4, r0]
	lsls r0, r0, #3
	adds r0, #6
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_80B0088
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080B03CA
	movs r0, #0
	ldrsb r0, [r4, r0]
	lsls r5, r0, #3
	adds r5, #0x24
	movs r4, #0xff
	ands r5, r4
	movs r2, #0xc
	subs r2, r2, r0
	lsls r2, r2, #3
	adds r2, #4
	ands r2, r4
	movs r0, #0x80
	lsls r0, r0, #3
	adds r2, r2, r0
	ldr r3, _080B0424  @ gUnknown_08A2146A
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0
	movs r1, #4
	bl RegisterObjectAttributes
	adds r2, r5, #1
	ands r2, r4
	ldr r3, _080B0428  @ gUnknown_08A2148A
	movs r4, #0x80
	lsls r4, r4, #7
	str r4, [sp]
	movs r0, #0
	movs r1, #0x7c
	bl RegisterObjectAttributes
	ldrh r1, [r6, #0x2c]
	lsls r0, r1, #5
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r2, _080B042C  @ gUnknown_08A20E74
	adds r1, r6, #0
	adds r1, #0x32
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #4
	adds r2, #4
	adds r1, r1, r2
	ldr r1, [r1]
	adds r1, #0x78
	bl __divsi3
	adds r1, r0, #0
	adds r1, #0x7c
	ldr r3, _080B0430  @ gUnknown_08A2149E
	str r4, [sp]
	movs r0, #0
	adds r2, r5, #0
	bl RegisterObjectAttributes
	ldrh r2, [r6, #0x2c]
	movs r0, #0x30
	adds r1, r5, #0
	bl sub_80B0240
_080B03CA:
	adds r6, #0x3d
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r1, r1, #3
	adds r1, #0x11
	ldr r5, _080B0434  @ 0x000001FF
	ands r1, r5
	ldr r3, _080B0438  @ gUnknown_08A21440
	movs r4, #0xc0
	lsls r4, r4, #6
	str r4, [sp]
	movs r0, #0xb
	movs r2, #0x58
	bl RegisterObjectAttributes_SafeMaybe
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r1, r1, #3
	adds r1, #0x11
	ands r1, r5
	ldr r3, _080B043C  @ gUnknown_08A2144E
	str r4, [sp]
	movs r0, #0xb
	movs r2, #0x68
	bl RegisterObjectAttributes_SafeMaybe
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r1, r1, #3
	adds r1, #0x11
	ands r1, r5
	ldr r3, _080B0440  @ gUnknown_08A2145C
	str r4, [sp]
	movs r0, #0xb
	movs r2, #0x78
	bl RegisterObjectAttributes_SafeMaybe
	adds r0, r7, #0
	bl sub_80B0204
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B0424: .4byte gUnknown_08A2146A
_080B0428: .4byte gUnknown_08A2148A
_080B042C: .4byte gUnknown_08A20E74
_080B0430: .4byte gUnknown_08A2149E
_080B0434: .4byte 0x000001FF
_080B0438: .4byte gUnknown_08A21440
_080B043C: .4byte gUnknown_08A2144E
_080B0440: .4byte gUnknown_08A2145C

	THUMB_FUNC_START sub_80B0444
sub_80B0444: @ 0x080B0444
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B0454  @ gUnknown_08A21530
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080B0454: .4byte gUnknown_08A21530

	THUMB_FUNC_START sub_80B0458
sub_80B0458: @ 0x080B0458
	push {r4, lr}
	ldr r0, _080B0490  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls _080B046A
	movs r2, #0
_080B046A:
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	bne _080B04AE
	cmp r2, #0x63
	bhi _080B049C
	ldr r1, _080B0494  @ 0x04000050
	movs r0, #0xc1
	strh r0, [r1]
	ldr r4, _080B0498  @ 0x04000054
	movs r0, #0x64
	subs r0, r0, r2
	lsls r0, r0, #4
	movs r1, #0x64
	bl __divsi3
	strh r0, [r4]
	b _080B04AE
	.align 2, 0
_080B0490: .4byte 0x04000006
_080B0494: .4byte 0x04000050
_080B0498: .4byte 0x04000054
_080B049C:
	ldr r1, _080B04B4  @ 0x04000050
	movs r2, #0xa2
	lsls r2, r2, #1
	adds r0, r2, #0
	strh r0, [r1]
	adds r1, #2
	ldr r2, _080B04B8  @ 0x0000100A
	adds r0, r2, #0
	strh r0, [r1]
_080B04AE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B04B4: .4byte 0x04000050
_080B04B8: .4byte 0x0000100A

	THUMB_FUNC_START sub_80B04BC
sub_80B04BC: @ 0x080B04BC
	push {lr}
	movs r1, #4
	str r1, [r0, #0x58]
	ldr r0, _080B04F0  @ gUnknown_08A21550
	bl SetupBackgrounds
	ldr r2, _080B04F4  @ gLCDControlBuffer
	ldrb r1, [r2]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	ldrb r1, [r2, #0x15]
	movs r0, #0x3f
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	strb r0, [r2, #0x15]
	pop {r0}
	bx r0
	.align 2, 0
_080B04F0: .4byte gUnknown_08A21550
_080B04F4: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B04F8
sub_80B04F8: @ 0x080B04F8
	push {lr}
	ldr r0, _080B058C  @ gUnknown_08B1754C
	movs r1, #0
	movs r2, #0x40
	bl CopyToPaletteBuffer
	ldr r0, _080B0590  @ gUnknown_08A295B4
	movs r1, #0x40
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080B0594  @ gUnknown_08B12DB4
	ldr r1, _080B0598  @ 0x06001000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B059C  @ gBG0TilemapBuffer
	ldr r1, _080B05A0  @ gUnknown_08A295D4
	movs r2, #0x80
	bl CallARM_FillTileRect
	movs r0, #1
	bl BG_EnableSyncByMask
	ldr r0, _080B05A4  @ gUnknown_08A2C11C
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	bl CopyToPaletteBuffer
	ldr r0, _080B05A8  @ gUnknown_08A29A88
	ldr r1, _080B05AC  @ 0x06010800
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B05B0  @ gUnknown_08A2B1E4
	ldr r1, _080B05B4  @ 0x06014000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B05B8  @ sub_80B0458
	bl SetPrimaryHBlankHandler
	ldr r2, _080B05BC  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldrb r0, [r2, #0xc]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0xc]
	ldrb r3, [r2, #0x10]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	strb r0, [r2, #0x10]
	ldrb r3, [r2, #0x14]
	adds r0, r1, #0
	ands r0, r3
	movs r3, #2
	orrs r0, r3
	strb r0, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	ands r1, r0
	orrs r1, r3
	strb r1, [r2, #0x18]
	pop {r0}
	bx r0
	.align 2, 0
_080B058C: .4byte gUnknown_08B1754C
_080B0590: .4byte gUnknown_08A295B4
_080B0594: .4byte gUnknown_08B12DB4
_080B0598: .4byte 0x06001000
_080B059C: .4byte gBG0TilemapBuffer
_080B05A0: .4byte gUnknown_08A295D4
_080B05A4: .4byte gUnknown_08A2C11C
_080B05A8: .4byte gUnknown_08A29A88
_080B05AC: .4byte 0x06010800
_080B05B0: .4byte gUnknown_08A2B1E4
_080B05B4: .4byte 0x06014000
_080B05B8: .4byte sub_80B0458
_080B05BC: .4byte gLCDControlBuffer

	THUMB_FUNC_START nullsub_66
nullsub_66: @ 0x080B05C0
	bx lr

	THUMB_FUNC_START sub_80B05C4
sub_80B05C4: @ 0x080B05C4
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x58]
	cmp r0, #0
	blt _080B05FC
	ldr r3, _080B0604  @ gUnknown_08A2051C
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x38
	movs r2, #8
	bl RegisterObjectAttributes
	ldr r1, _080B0608  @ gUnknown_08A2099C
	ldr r0, [r4, #0x58]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x40
	movs r2, #0x10
	bl RegisterObjectAttributes
_080B05FC:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B0604: .4byte gUnknown_08A2051C
_080B0608: .4byte gUnknown_08A2099C

	THUMB_FUNC_START sub_80B060C
sub_80B060C: @ 0x080B060C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B061C  @ gUnknown_08A21568
	bl Proc_Create
	pop {r0}
	bx r0
	.align 2, 0
_080B061C: .4byte gUnknown_08A21568

	THUMB_FUNC_START sub_80B0620
sub_80B0620: @ 0x080B0620
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080B0634  @ gUnknown_08A21568
	bl Proc_Find
	str r4, [r0, #0x58]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B0634: .4byte gUnknown_08A21568

	THUMB_FUNC_START sub_80B0638
sub_80B0638: @ 0x080B0638
	push {lr}
	sub sp, #4
	ldr r0, _080B066C  @ gUnknown_08A209F0
	ldr r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0x18
	movs r2, #8
	bl RegisterObjectAttributes
	ldr r0, _080B0670  @ gUnknown_08A209E4
	ldr r3, [r0]
	movs r0, #0x90
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0x18
	movs r2, #0x10
	bl RegisterObjectAttributes
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080B066C: .4byte gUnknown_08A209F0
_080B0670: .4byte gUnknown_08A209E4

	THUMB_FUNC_START sub_80B0674
sub_80B0674: @ 0x080B0674
	push {r4, lr}
	ldr r2, _080B06B4  @ gUnknown_0202BCF0
	ldrb r1, [r2, #0x14]
	movs r3, #0x40
	adds r0, r3, #0
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	negs r0, r0
	asrs r4, r0, #0x1f
	movs r0, #4
	ands r4, r0
	adds r0, r2, #0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	cmp r0, #0
	blt _080B06B8
	ldrb r1, [r2, #0x1b]
	cmp r1, #1
	bne _080B06A2
	movs r0, #0x10
	orrs r4, r0
_080B06A2:
	cmp r1, #2
	bne _080B06AA
	movs r0, #0x20
	orrs r4, r0
_080B06AA:
	cmp r1, #3
	bne _080B06C2
_080B06AE:
	orrs r4, r3
	b _080B06C2
	.align 2, 0
_080B06B4: .4byte gUnknown_0202BCF0
_080B06B8:
	ldrb r0, [r2, #0x1b]
	cmp r0, #3
	beq _080B06AE
	movs r0, #0x20
	orrs r4, r0
_080B06C2:
	movs r0, #1
	orrs r0, r4
	movs r1, #0x18
	bl sub_80895B4
	adds r0, r4, #0
	movs r1, #0x19
	bl sub_80895B4
	bl EnablePaletteSync
	movs r0, #0xac
	lsls r0, r0, #4
	bl sub_8089678
	movs r4, #0xb4
	lsls r4, r4, #4
	ldr r0, _080B06F8  @ gUnknown_0202BCF0
	bl sub_8089768
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_8089624
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B06F8: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B06FC
sub_80B06FC: @ 0x080B06FC
	push {r4, r5, lr}
	ldr r0, _080B074C  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0xa0
	bls _080B070E
	movs r5, #0
_080B070E:
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	bne _080B0746
	cmp r5, #0x63
	bhi _080B0730
	ldr r1, _080B0750  @ 0x04000050
	movs r0, #0xc8
	strh r0, [r1]
	ldr r4, _080B0754  @ 0x04000054
	movs r0, #0x64
	subs r0, r0, r5
	lsls r0, r0, #4
	movs r1, #0x64
	bl __divsi3
	strh r0, [r4]
_080B0730:
	cmp r5, #0
	bne _080B073C
	ldr r0, _080B0758  @ 0x04000012
	ldr r1, _080B075C  @ gLCDControlBuffer
	ldrh r1, [r1, #0x1e]
	strh r1, [r0]
_080B073C:
	cmp r5, #0x78
	bne _080B0746
	ldr r1, _080B0758  @ 0x04000012
	movs r0, #4
	strh r0, [r1]
_080B0746:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B074C: .4byte 0x04000006
_080B0750: .4byte 0x04000050
_080B0754: .4byte 0x04000054
_080B0758: .4byte 0x04000012
_080B075C: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B0760
sub_80B0760: @ 0x080B0760
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	movs r0, #0
	mov r9, r0
	mov r0, sp
	mov r1, r9
	strh r1, [r0]
	ldr r0, _080B07D0  @ gUnknown_08A21598
	ldr r1, [r0]
	ldr r2, _080B07D4  @ 0x01000040
	mov r0, sp
	bl CpuSet
	mov r0, sp
	adds r0, #2
	mov r3, r9
	strh r3, [r0]
	ldr r4, _080B07D8  @ gUnknown_08A21590
	ldr r1, [r4]
	ldr r2, _080B07DC  @ 0x010000A2
	bl CpuSet
	ldr r0, [r4]
	bl sub_80A38F4
	cmp r0, #0
	beq _080B086E
	ldr r0, [r4]
	ldr r1, _080B07E0  @ gUnknown_08A21594
	ldr r1, [r1]
	movs r2, #0x51
	bl CpuFastSet
	movs r0, #0
	mov r8, r0
	movs r7, #0
_080B07AE:
	ldr r2, _080B07D8  @ gUnknown_08A21590
	ldr r0, [r2]
	adds r3, r0, r7
	ldrb r1, [r3]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq _080B0852
	ldrb r1, [r3, #1]
	cmp r1, #1
	beq _080B07EA
	cmp r1, #1
	bgt _080B07E4
	cmp r1, #0
	beq _080B07F6
	b _080B0834
	.align 2, 0
_080B07D0: .4byte gUnknown_08A21598
_080B07D4: .4byte 0x01000040
_080B07D8: .4byte gUnknown_08A21590
_080B07DC: .4byte 0x010000A2
_080B07E0: .4byte gUnknown_08A21594
_080B07E4:
	cmp r1, #2
	beq _080B07F6
	b _080B0834
_080B07EA:
	ldr r0, _080B0820  @ gUnknown_0202BCF0
	adds r0, #0x2b
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	beq _080B0852
_080B07F6:
	ldr r5, _080B0824  @ gUnknown_08A21598
	ldr r0, [r5]
	mov r1, r9
	lsls r4, r1, #2
	adds r0, r4, r0
	movs r6, #0
	mov r3, r8
	strb r3, [r0]
	bl sub_80A4D28
	movs r2, #1
	adds r1, r2, #0
	mov r3, r8
	lsls r1, r3
	ands r1, r0
	cmp r1, #0
	beq _080B0828
	ldr r0, [r5]
	adds r0, r4, r0
	strb r6, [r0, #1]
	b _080B082E
	.align 2, 0
_080B0820: .4byte gUnknown_0202BCF0
_080B0824: .4byte gUnknown_08A21598
_080B0828:
	ldr r0, [r5]
	adds r0, r4, r0
	strb r2, [r0, #1]
_080B082E:
	movs r0, #1
	add r9, r0
	ldr r2, _080B0878  @ gUnknown_08A21590
_080B0834:
	ldr r0, [r2]
	adds r0, r0, r7
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	cmp r0, #1
	bne _080B0852
	ldr r0, _080B087C  @ gUnknown_08A21594
	ldr r1, [r0]
	adds r1, r1, r7
	ldrb r2, [r1]
	movs r0, #0xfc
	ands r0, r2
	adds r0, #2
	strb r0, [r1]
_080B0852:
	adds r7, #0x14
	movs r1, #1
	add r8, r1
	mov r3, r8
	cmp r3, #0xf
	ble _080B07AE
	ldr r0, _080B0880  @ gUnknown_08A2159C
	ldr r0, [r0]
	mov r1, r9
	str r1, [r0]
	ldr r0, _080B087C  @ gUnknown_08A21594
	ldr r0, [r0]
	bl sub_80A3950
_080B086E:
	mov r3, r9
	cmp r3, #0
	beq _080B0884
	movs r0, #1
	b _080B0886
	.align 2, 0
_080B0878: .4byte gUnknown_08A21590
_080B087C: .4byte gUnknown_08A21594
_080B0880: .4byte gUnknown_08A2159C
_080B0884:
	movs r0, #0
_080B0886:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B0894
sub_80B0894: @ 0x080B0894
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r5, r0, #0
	ldr r4, _080B0938  @ gUnknown_08A215A0
	movs r1, #6
	bl __modsi3
	lsls r0, r0, #4
	ldr r1, [r4]
	adds r6, r1, r0
	lsls r0, r5, #1
	str r0, [sp, #8]
	movs r0, #0x1f
	ldr r1, [sp, #8]
	ands r1, r0
	str r1, [sp, #8]
	ldr r0, _080B093C  @ gUnknown_08A21598
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldrb r2, [r0, #1]
	str r2, [sp, #0xc]
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #0x10]
	ldr r3, _080B0940  @ gUnknown_08A21590
	ldr r1, [r3]
	lsls r0, r0, #2
	ldr r2, [sp, #0x10]
	adds r0, r0, r2
	lsls r7, r0, #2
	adds r1, r1, r7
	ldrb r1, [r1, #2]
	mov r8, r1
	movs r3, #0
	mov r9, r3
	ldr r0, [sp, #8]
	lsls r4, r0, #6
	ldr r1, _080B0944  @ gBG2TilemapBuffer
	adds r1, r1, r4
	mov sl, r1
	mov r0, sl
	movs r1, #0x14
	movs r2, #1
	bl TileMap_FillRect
	adds r0, r6, #0
	bl Text_Clear
	cmp r5, #0x1f
	ble _080B0906
	b _080B0A08
_080B0906:
	ldr r2, _080B0940  @ gUnknown_08A21590
	ldr r0, [r2]
	adds r1, r0, r7
	ldrb r0, [r1]
	movs r2, #3
	ands r2, r0
	cmp r2, #0
	beq _080B0A08
	cmp r2, #1
	bne _080B091E
	movs r3, #4
	mov r9, r3
_080B091E:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	bne _080B0928
	movs r2, #1
	mov r9, r2
_080B0928:
	ldrb r0, [r1, #1]
	cmp r0, #0
	blt _080B09CA
	cmp r0, #1
	ble _080B0948
	cmp r0, #2
	beq _080B099C
	b _080B09CA
	.align 2, 0
_080B0938: .4byte gUnknown_08A215A0
_080B093C: .4byte gUnknown_08A21598
_080B0940: .4byte gUnknown_08A21590
_080B0944: .4byte gBG2TilemapBuffer
_080B0948:
	mov r0, r8
	bl GetItemName
	ldr r1, _080B0998  @ gBG2TilemapBuffer
	adds r1, #4
	adds r1, r4, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r6, #0
	mov r2, r9
	movs r3, #0
	bl DrawTextInline
	ldr r0, _080B0998  @ gBG2TilemapBuffer
	adds r0, #0x14
	adds r5, r4, r0
	mov r4, r9
	cmp r4, #0
	bne _080B0972
	movs r4, #2
_080B0972:
	mov r0, r8
	bl GetItemMaxUses
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl DrawDecNumber
	mov r0, r8
	bl GetItemIconId
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	mov r0, sl
	bl DrawIcon
	b _080B09CA
	.align 2, 0
_080B0998: .4byte gBG2TilemapBuffer
_080B099C:
	mov r0, r8
	bl GetItemName
	ldr r1, _080B0A18  @ gBG2TilemapBuffer
	adds r1, #4
	adds r1, r4, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r6, #0
	mov r2, r9
	movs r3, #0
	bl DrawTextInline
	mov r0, r8
	bl GetItemIconId
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	mov r0, sl
	bl DrawIcon
_080B09CA:
	adds r6, #8
	adds r0, r6, #0
	bl Text_Clear
	ldr r3, [sp, #8]
	lsls r1, r3, #6
	ldr r0, _080B0A1C  @ gUnknown_02023CC0
	adds r5, r1, r0
	mov r2, r9
	cmp r2, #0
	bne _080B09E2
	movs r2, #3
_080B09E2:
	movs r0, #0
	str r0, [sp]
	ldr r0, _080B0A20  @ gUnknown_08A21590
	ldr r3, [sp, #0x10]
	lsls r1, r3, #2
	adds r1, r1, r3
	lsls r1, r1, #2
	ldr r0, [r0]
	adds r0, r0, r1
	adds r0, #3
	str r0, [sp, #4]
	adds r0, r6, #0
	adds r1, r5, #0
	movs r3, #0
	bl DrawTextInline
	movs r0, #4
	bl BG_EnableSyncByMask
_080B0A08:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B0A18: .4byte gBG2TilemapBuffer
_080B0A1C: .4byte gUnknown_02023CC0
_080B0A20: .4byte gUnknown_08A21590

	THUMB_FUNC_START sub_80B0A24
sub_80B0A24: @ 0x080B0A24
	push {r4, r5, lr}
	ldr r1, _080B0A4C  @ gUnknown_08A21598
	lsls r0, r0, #2
	ldr r4, [r1]
	adds r4, r4, r0
	movs r5, #0
	ldrsb r5, [r4, r5]
	bl sub_80A4D28
	adds r1, r0, #0
	movs r0, #1
	lsls r0, r5
	orrs r0, r1
	bl Set0203EDB4
	movs r0, #0
	strb r0, [r4, #1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B0A4C: .4byte gUnknown_08A21598

	THUMB_FUNC_START sub_80B0A50
sub_80B0A50: @ 0x080B0A50
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
	bl SMS_ClearUsageTable
	movs r4, #1
_080B0A5C:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _080B0A98
	ldr r3, [r2]
	cmp r3, #0
	beq _080B0A98
	ldr r0, [r2, #0xc]
	ldr r1, _080B0AB4  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne _080B0A98
	ldrb r0, [r3, #4]
	cmp r0, #1
	beq _080B0A82
	cmp r0, #0xf
	bne _080B0A98
_080B0A82:
	ldr r0, _080B0AB8  @ gUnknown_08A215A4
	ldr r1, [r0]
	lsls r0, r5, #3
	adds r0, r0, r1
	str r2, [r0, #4]
	adds r5, #1
	adds r0, r2, #0
	bl GetUnitSMSId
	bl SMS_RegisterUsage
_080B0A98:
	adds r4, #1
	cmp r4, #0x3f
	ble _080B0A5C
	adds r1, r5, #1
	adds r0, r6, #0
	adds r0, #0x2b
	strb r1, [r0]
	bl SetupMapSpritesPalettes
	bl SMS_FlushIndirect
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B0AB4: .4byte 0x00010004
_080B0AB8: .4byte gUnknown_08A215A4

	THUMB_FUNC_START sub_80B0ABC
sub_80B0ABC: @ 0x080B0ABC
	push {lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	movs r0, #3
	movs r1, #6
	movs r2, #0x18
	movs r3, #0xc
	bl DrawUiFrame2
	movs r0, #3
	bl BG_EnableSyncByMask
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B0ADC
sub_80B0ADC: @ 0x080B0ADC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0
	bl SetupBackgrounds
	ldr r0, _080B0D04  @ gUnknown_08B1754C
	movs r1, #0xc0
	lsls r1, r1, #1
	movs r2, #0x40
	bl CopyToPaletteBuffer
	ldr r0, _080B0D08  @ gUnknown_08A295B4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080B0D0C  @ gUnknown_08B12DB4
	ldr r1, _080B0D10  @ 0x06008000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B0D14  @ gBG3TilemapBuffer
	ldr r1, _080B0D18  @ gUnknown_08A295D4
	movs r2, #0xc0
	lsls r2, r2, #8
	bl CallARM_FillTileRect
	movs r0, #8
	bl BG_EnableSyncByMask
	bl LoadUiFrameGraphics
	bl Font_InitForUIDefault
	bl ResetIconGraphics_
	movs r0, #4
	bl LoadIconPalettes
	bl LoadObjUIGfx
	bl sub_80B0674
	bl sub_80B0ABC
	ldr r0, _080B0D1C  @ gLCDControlBuffer
	mov ip, r0
	ldrb r1, [r0, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r7, ip
	adds r7, #0x35
	ldrb r0, [r7]
	movs r4, #1
	orrs r0, r4
	movs r5, #2
	orrs r0, r5
	movs r1, #4
	orrs r0, r1
	movs r3, #8
	orrs r0, r3
	movs r2, #0x10
	orrs r0, r2
	strb r0, [r7]
	adds r7, #1
	ldrb r0, [r7]
	orrs r0, r4
	orrs r0, r5
	movs r1, #5
	negs r1, r1
	ands r0, r1
	orrs r0, r3
	orrs r0, r2
	strb r0, [r7]
	mov r1, ip
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x38
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x88
	strb r0, [r1]
	mov r0, ip
	ldrb r2, [r0, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	mov r2, ip
	strb r0, [r2, #0xc]
	ldrb r2, [r2, #0x10]
	adds r0, r1, #0
	ands r0, r2
	orrs r0, r5
	mov r2, ip
	strb r0, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	ands r1, r0
	strb r1, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x18]
	bl sub_80B0760
	movs r5, #0
	ldr r0, _080B0D20  @ gUnknown_08A2159C
	ldr r0, [r0]
	ldr r0, [r0]
	cmp r5, r0
	bge _080B0C0C
	ldr r7, _080B0D24  @ gUnknown_08A215A0
_080B0BDE:
	lsls r0, r5, #4
	ldr r4, [r7]
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #7
	bl Text_Init
	adds r4, #8
	adds r0, r4, #0
	movs r1, #0xa
	bl Text_Init
	adds r0, r5, #0
	bl sub_80B0894
	adds r5, #1
	cmp r5, #5
	bgt _080B0C0C
	ldr r0, _080B0D20  @ gUnknown_08A2159C
	ldr r0, [r0]
	ldr r0, [r0]
	cmp r5, r0
	blt _080B0BDE
_080B0C0C:
	adds r0, r6, #0
	adds r0, #0x29
	str r0, [sp]
	movs r1, #0x2e
	adds r1, r1, r6
	mov sl, r1
	movs r2, #0x2a
	adds r2, r2, r6
	mov r8, r2
	movs r0, #0x2b
	adds r0, r0, r6
	mov r9, r0
	ldr r7, _080B0D24  @ gUnknown_08A215A0
	movs r4, #0x60
	movs r5, #1
_080B0C2A:
	ldr r0, [r7]
	adds r0, r0, r4
	movs r1, #6
	bl Text_Init
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _080B0C2A
	movs r5, #2
	ldr r0, _080B0D24  @ gUnknown_08A215A0
	ldr r0, [r0]
	adds r0, #0x70
	movs r1, #0xf
	bl Text_Init
	ldr r0, _080B0D28  @ sub_80B0638
	adds r1, r6, #0
	bl Get6CDifferedLoop6C
	movs r0, #2
	bl BG_EnableSyncByMask
	ldr r0, _080B0D2C  @ sub_80B06FC
	bl SetPrimaryHBlankHandler
	movs r0, #0
	ldr r1, [sp]
	strb r0, [r1]
	movs r1, #0
	strh r0, [r6, #0x2c]
	mov r2, sl
	strb r1, [r2]
	mov r2, r8
	strb r1, [r2]
	mov r1, r9
	strb r5, [r1]
	str r0, [r6, #0x34]
	ldr r1, _080B0D30  @ 0x0000FFD8
	ldrh r2, [r6, #0x2c]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl BG_SetPosition
	adds r0, r6, #0
	bl sub_80AD47C
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl sub_80AD4A0
	ldr r2, [sp]
	ldrb r1, [r2]
	lsls r1, r1, #4
	movs r2, #0x2c
	ldrsh r0, [r6, r2]
	subs r0, #0x38
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x28
	movs r2, #0x13
	bl sub_80AD51C
	adds r0, r6, #0
	bl NewGreenTextColorManager
	adds r0, r6, #0
	bl Make6CMenuScroll
	movs r0, #0xc8
	movs r1, #0x40
	bl sub_80976AC
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #2
	bl sub_8097700
	ldrh r1, [r6, #0x2c]
	ldr r0, _080B0D20  @ gUnknown_08A2159C
	ldr r0, [r0]
	ldrh r2, [r0]
	movs r0, #8
	movs r3, #5
	bl sub_80976CC
	adds r0, r6, #0
	bl sub_80AC9C0
	adds r0, r6, #0
	bl sub_80B0A50
	ldr r0, _080B0D34  @ 0x06013800
	movs r1, #5
	bl LoadDialogueBoxGfx
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B0D04: .4byte gUnknown_08B1754C
_080B0D08: .4byte gUnknown_08A295B4
_080B0D0C: .4byte gUnknown_08B12DB4
_080B0D10: .4byte 0x06008000
_080B0D14: .4byte gBG3TilemapBuffer
_080B0D18: .4byte gUnknown_08A295D4
_080B0D1C: .4byte gLCDControlBuffer
_080B0D20: .4byte gUnknown_08A2159C
_080B0D24: .4byte gUnknown_08A215A0
_080B0D28: .4byte sub_80B0638
_080B0D2C: .4byte sub_80B06FC
_080B0D30: .4byte 0x0000FFD8
_080B0D34: .4byte 0x06013800

	THUMB_FUNC_START sub_80B0D38
sub_80B0D38: @ 0x080B0D38
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r6, r5, #0
	adds r6, #0x29
	ldrb r4, [r6]
	movs r0, #0x2e
	adds r0, r0, r5
	mov r8, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080B0D58
	b _080B0F36
_080B0D58:
	ldr r0, _080B0D94  @ gKeyStatusPtr
	ldr r2, [r0]
	ldrh r1, [r2, #8]
	movs r7, #1
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq _080B0E48
	ldr r0, _080B0D98  @ gUnknown_08A21598
	ldr r1, [r0]
	lsls r0, r4, #2
	adds r0, r0, r1
	movs r4, #0
	ldrsb r4, [r0, r4]
	bl sub_80A4D28
	adds r1, r7, #0
	lsls r1, r4
	ands r1, r0
	cmp r1, #0
	beq _080B0DA0
	movs r1, #1
	negs r1, r1
	ldr r2, _080B0D9C  @ 0x0000088F
	adds r0, r1, #0
	adds r3, r5, #0
	bl sub_80AEBCC
	b _080B0F82
	.align 2, 0
_080B0D94: .4byte gKeyStatusPtr
_080B0D98: .4byte gUnknown_08A21598
_080B0D9C: .4byte 0x0000088F
_080B0DA0:
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	beq _080B0E2C
	ldr r7, _080B0DC8  @ gUnknown_08A21590
	ldr r1, [r7]
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r4, r0, #2
	adds r1, r1, r4
	ldrb r0, [r1, #1]
	cmp r0, #0
	bge _080B0DBE
	b _080B0F82
_080B0DBE:
	cmp r0, #1
	ble _080B0DCC
	cmp r0, #2
	beq _080B0DF0
	b _080B0F82
	.align 2, 0
_080B0DC8: .4byte gUnknown_08A21590
_080B0DCC:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_GotoLabel
	ldr r0, _080B0DEC  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080B0DE2
	b _080B0F82
_080B0DE2:
	movs r0, #0x6a
	bl m4aSongNumStart
	b _080B0F82
	.align 2, 0
_080B0DEC: .4byte gUnknown_0202BCF0
_080B0DF0:
	ldrb r0, [r1, #2]
	cmp r0, #0x9f
	bne _080B0DFC
	ldr r0, _080B0E24  @ 0x00000BB8
	bl sub_8024E20
_080B0DFC:
	ldr r0, [r7]
	adds r0, r0, r4
	ldrb r0, [r0, #2]
	cmp r0, #0xa0
	bne _080B0E0C
	ldr r0, _080B0E28  @ 0x00001388
	bl sub_8024E20
_080B0E0C:
	ldrb r0, [r6]
	bl sub_80B0A24
	ldrb r0, [r6]
	bl sub_80B0894
	adds r0, r5, #0
	movs r1, #2
	bl Proc_GotoLabel
	b _080B0F82
	.align 2, 0
_080B0E24: .4byte 0x00000BB8
_080B0E28: .4byte 0x00001388
_080B0E2C:
	ldr r0, _080B0E44  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080B0E3A
	b _080B0F82
_080B0E3A:
	movs r0, #0x6c
	bl m4aSongNumStart
	b _080B0F82
	.align 2, 0
_080B0E44: .4byte gUnknown_0202BCF0
_080B0E48:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B0E70
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	ldr r0, _080B0E6C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080B0E64
	b _080B0F82
_080B0E64:
	movs r0, #0x6b
	bl m4aSongNumStart
	b _080B0F82
	.align 2, 0
_080B0E6C: .4byte gUnknown_0202BCF0
_080B0E70:
	ldrh r1, [r2, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080B0E7C
	subs r4, #1
_080B0E7C:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080B0E86
	adds r4, #1
_080B0E86:
	ldrb r0, [r6]
	cmp r0, r4
	beq _080B0F28
	cmp r4, #0
	blt _080B0F82
	ldr r0, _080B0ED0  @ gUnknown_08A2159C
	ldr r0, [r0]
	ldr r0, [r0]
	cmp r4, r0
	bge _080B0F82
	ldr r0, _080B0ED4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B0EAC
	movs r0, #0x66
	bl m4aSongNumStart
_080B0EAC:
	strb r4, [r6]
	ldrb r2, [r6]
	lsls r1, r2, #4
	movs r3, #0x2c
	ldrsh r0, [r5, r3]
	cmp r1, r0
	bne _080B0ED8
	cmp r2, #0
	beq _080B0ED8
	movs r0, #0xff
	mov r4, r8
	strb r0, [r4]
	ldrb r0, [r6]
	subs r0, #1
	bl sub_80B0894
	b _080B0F28
	.align 2, 0
_080B0ED0: .4byte gUnknown_08A2159C
_080B0ED4: .4byte gUnknown_0202BCF0
_080B0ED8:
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r3, [r0]
	lsls r1, r3, #4
	movs r4, #0x2c
	ldrsh r2, [r5, r4]
	subs r1, r1, r2
	adds r2, r0, #0
	cmp r1, #0x40
	bne _080B0F10
	ldr r0, _080B0F0C  @ gUnknown_08A2159C
	ldr r0, [r0]
	ldr r0, [r0]
	subs r0, #1
	cmp r3, r0
	bge _080B0F10
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #1
	strb r0, [r1]
	ldrb r0, [r2]
	adds r0, #1
	bl sub_80B0894
	b _080B0F28
	.align 2, 0
_080B0F0C: .4byte gUnknown_08A2159C
_080B0F10:
	ldrb r1, [r2]
	lsls r1, r1, #4
	movs r2, #0x2c
	ldrsh r0, [r5, r2]
	subs r0, #0x38
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x28
	movs r2, #0x13
	bl sub_80AD51C
_080B0F28:
	adds r0, r5, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080B0F82
_080B0F36:
	adds r2, r5, #0
	adds r2, #0x2e
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	bge _080B0F48
	ldrh r0, [r5, #0x2c]
	subs r0, #4
	strh r0, [r5, #0x2c]
_080B0F48:
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	ble _080B0F56
	ldrh r0, [r5, #0x2c]
	adds r0, #4
	strh r0, [r5, #0x2c]
_080B0F56:
	ldrh r1, [r5, #0x2c]
	movs r0, #0xf
	ands r1, r0
	cmp r1, #0
	bne _080B0F62
	strb r1, [r2]
_080B0F62:
	ldr r1, _080B0F8C  @ 0x0000FFD8
	ldrh r2, [r5, #0x2c]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl BG_SetPosition
	ldrh r1, [r5, #0x2c]
	ldr r0, _080B0F90  @ gUnknown_08A2159C
	ldr r0, [r0]
	ldrh r2, [r0]
	movs r0, #8
	movs r3, #5
	bl sub_80976CC
_080B0F82:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B0F8C: .4byte 0x0000FFD8
_080B0F90: .4byte gUnknown_08A2159C

	THUMB_FUNC_START sub_80B0F94
sub_80B0F94: @ 0x080B0F94
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	subs r0, #1
	cmp r5, r0
	bge _080B0FFC
	movs r4, #0x30
_080B0FA8:
	ldr r0, _080B0FD4  @ gUnknown_08A215A4
	ldr r1, [r0]
	lsls r0, r5, #3
	adds r0, r0, r1
	ldr r1, [r0, #4]
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080B0FD8
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x60
	adds r2, r4, #0
	movs r3, #0xc4
	lsls r3, r3, #8
	bl sub_8027C48
	b _080B0FEC
	.align 2, 0
_080B0FD4: .4byte gUnknown_08A215A4
_080B0FD8:
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x60
	adds r2, r4, #0
	movs r3, #0xf4
	lsls r3, r3, #8
	bl sub_8027C48
_080B0FEC:
	adds r4, #0x10
	adds r5, #1
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	subs r0, #1
	cmp r5, r0
	blt _080B0FA8
_080B0FFC:
	bl SMS_FlushDirect
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B1008
sub_80B1008: @ 0x080B1008
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x34]
	cmp r0, #0
	beq _080B101A
	bl Proc_Delete
	movs r0, #0
	str r0, [r4, #0x34]
_080B101A:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B1020
sub_80B1020: @ 0x080B1020
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	str r0, [sp, #4]
	ldr r0, _080B1138  @ gUnknown_08A215A0
	ldr r0, [r0]
	adds r6, r0, #0
	adds r6, #0x60
	ldr r0, [sp, #4]
	adds r0, #0x2b
	ldrb r0, [r0]
	mov sl, r0
	lsls r4, r0, #1
	adds r3, r4, #2
	movs r0, #1
	str r0, [sp]
	movs r0, #0xb
	movs r1, #5
	movs r2, #0xe
	bl DrawUiFrame2
	ldr r3, _080B113C  @ gLCDControlBuffer
	ldrb r0, [r3, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0x58
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xc8
	strb r0, [r1]
	adds r4, #7
	lsls r4, r4, #3
	adds r0, r3, #0
	adds r0, #0x30
	strb r4, [r0]
	ldr r0, [sp, #4]
	adds r0, #0x29
	ldrb r2, [r0]
	lsls r2, r2, #4
	ldr r1, [sp, #4]
	movs r3, #0x2c
	ldrsh r0, [r1, r3]
	subs r0, #0x38
	subs r2, r2, r0
	movs r0, #0
	movs r1, #0x28
	movs r3, #1
	bl sub_80AC9D4
	ldr r0, [sp, #4]
	adds r0, #0x2a
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x30
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x5c
	movs r2, #0xc
	bl sub_80AD51C
	movs r0, #0
	mov r9, r0
	cmp r9, sl
	bge _080B11C0
	ldr r0, _080B1140  @ gUnknown_02022CC4
	movs r1, #0xc9
	lsls r1, r1, #1
	adds r1, r0, r1
	str r1, [sp, #8]
	movs r3, #0xc0
	lsls r3, r3, #1
	adds r3, r0, r3
	str r3, [sp, #0xc]
	movs r0, #0
	mov r8, r0
_080B10EE:
	movs r7, #0
	ldr r1, _080B1144  @ gUnknown_08A215A4
	ldr r0, [r1]
	add r0, r8
	ldr r4, [r0, #4]
	adds r0, r6, #0
	bl Text_Clear
	adds r0, r6, #0
	movs r1, #0
	bl Text_SetXCursor
	mov r0, sl
	subs r0, #1
	cmp r9, r0
	bne _080B1148
	bl GetConvoyItemCount
	adds r5, r0, #0
	cmp r5, #0x64
	bne _080B111A
	movs r7, #1
_080B111A:
	adds r0, r6, #0
	movs r1, #0
	adds r2, r7, #0
	bl Text_SetParameters
	movs r0, #0xc2
	lsls r0, r0, #2
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r6, #0
	bl Text_AppendString
	b _080B1170
	.align 2, 0
_080B1138: .4byte gUnknown_08A215A0
_080B113C: .4byte gLCDControlBuffer
_080B1140: .4byte gUnknown_02022CC4
_080B1144: .4byte gUnknown_08A215A4
_080B1148:
	adds r0, r4, #0
	bl GetUnitItemCount
	adds r5, r0, #0
	cmp r5, #5
	bne _080B1156
	movs r7, #1
_080B1156:
	adds r0, r6, #0
	movs r1, #0
	adds r2, r7, #0
	bl Text_SetParameters
	ldr r0, [r4]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r6, #0
	bl Text_AppendString
_080B1170:
	cmp r7, #0
	bne _080B1184
	ldr r3, _080B1180  @ gUnknown_08A215A4
	ldr r0, [r3]
	add r0, r8
	movs r1, #1
	b _080B118C
	.align 2, 0
_080B1180: .4byte gUnknown_08A215A4
_080B1184:
	ldr r1, _080B11DC  @ gUnknown_08A215A4
	ldr r0, [r1]
	add r0, r8
	movs r1, #0
_080B118C:
	strb r1, [r0]
	adds r0, r6, #0
	ldr r1, [sp, #0xc]
	bl Text_Draw
	movs r1, #1
	cmp r7, #0
	bne _080B119E
	movs r1, #2
_080B119E:
	ldr r0, [sp, #8]
	adds r2, r5, #0
	bl sub_8004B88
	adds r6, #8
	ldr r3, [sp, #8]
	adds r3, #0x80
	str r3, [sp, #8]
	ldr r0, [sp, #0xc]
	adds r0, #0x80
	str r0, [sp, #0xc]
	movs r1, #8
	add r8, r1
	movs r3, #1
	add r9, r3
	cmp r9, sl
	blt _080B10EE
_080B11C0:
	ldr r0, _080B11E0  @ sub_80B0F94
	ldr r1, [sp, #4]
	bl Get6CDifferedLoop6C
	ldr r1, [sp, #4]
	str r0, [r1, #0x34]
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B11DC: .4byte gUnknown_08A215A4
_080B11E0: .4byte sub_80B0F94

	THUMB_FUNC_START sub_80B11E4
sub_80B11E4: @ 0x080B11E4
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	movs r0, #0x2a
	adds r0, r0, r4
	mov r8, r0
	ldrb r3, [r0]
	ldr r1, _080B122C  @ gUnknown_08A215A4
	mov r9, r1
	ldr r0, [r1]
	lsls r3, r3, #3
	adds r3, r3, r0
	ldr r0, _080B1230  @ gUnknown_08A21598
	adds r6, r4, #0
	adds r6, #0x29
	ldrb r5, [r6]
	lsls r1, r5, #2
	ldr r0, [r0]
	adds r0, r0, r1
	movs r2, #0
	ldrsb r2, [r0, r2]
	ldr r0, _080B1234  @ gUnknown_08A21590
	ldr r1, [r0]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #2
	adds r1, r1, r0
	ldrb r7, [r1, #2]
	movs r0, #0
	ldrsb r0, [r3, r0]
	cmp r0, #0
	bne _080B1238
	movs r0, #0
	b _080B127A
	.align 2, 0
_080B122C: .4byte gUnknown_08A215A4
_080B1230: .4byte gUnknown_08A21598
_080B1234: .4byte gUnknown_08A21590
_080B1238:
	adds r0, r5, #0
	bl sub_80B0A24
	ldrb r0, [r6]
	bl sub_80B0894
	mov r0, r8
	ldrb r2, [r0]
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	bne _080B1260
	adds r0, r7, #0
	bl MakeNewItem
	bl AddItemToConvoy
	b _080B1278
_080B1260:
	mov r0, r9
	ldr r1, [r0]
	lsls r0, r2, #3
	adds r0, r0, r1
	ldr r4, [r0, #4]
	adds r0, r7, #0
	bl MakeNewItem
	adds r1, r0, #0
	adds r0, r4, #0
	bl UnitAddItem
_080B1278:
	movs r0, #1
_080B127A:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B1288
sub_80B1288: @ 0x080B1288
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r5, #0
	adds r6, #0x2a
	ldrb r4, [r6]
	ldr r0, _080B12B8  @ gKeyStatusPtr
	ldr r2, [r0]
	ldrh r1, [r2, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B12CE
	adds r0, r5, #0
	bl sub_80B11E4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B12BC
	adds r0, r5, #0
	movs r1, #2
	bl Proc_GotoLabel
	b _080B1344
	.align 2, 0
_080B12B8: .4byte gKeyStatusPtr
_080B12BC:
	movs r1, #1
	negs r1, r1
	movs r2, #0x89
	lsls r2, r2, #4
	adds r0, r1, #0
	adds r3, r5, #0
	bl sub_80AEBCC
	b _080B1344
_080B12CE:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B12F4
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	ldr r0, _080B12F0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B1344
	movs r0, #0x6b
	bl m4aSongNumStart
	b _080B1344
	.align 2, 0
_080B12F0: .4byte gUnknown_0202BCF0
_080B12F4:
	ldrh r1, [r2, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080B1300
	subs r4, #1
_080B1300:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080B130A
	adds r4, #1
_080B130A:
	ldrb r0, [r6]
	cmp r4, r0
	beq _080B1344
	cmp r4, #0
	blt _080B1344
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r4, r0
	bge _080B1344
	ldr r0, _080B134C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B1330
	movs r0, #0x66
	bl m4aSongNumStart
_080B1330:
	strb r4, [r6]
	ldrb r1, [r6]
	lsls r1, r1, #4
	adds r1, #0x30
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x5c
	movs r2, #0xc
	bl sub_80AD51C
_080B1344:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B134C: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B1350
sub_80B1350: @ 0x080B1350
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80B1008
	ldr r2, _080B13B0  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldr r0, _080B13B4  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B13B8  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	bl sub_80B0ABC
	movs r0, #3
	bl BG_EnableSyncByMask
	movs r0, #0
	bl sub_80ACA84
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	lsls r1, r1, #4
	movs r2, #0x2c
	ldrsh r0, [r4, r2]
	subs r0, #0x38
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x28
	movs r2, #0x13
	bl sub_80AD51C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B13B0: .4byte gLCDControlBuffer
_080B13B4: .4byte gBG1TilemapBuffer
_080B13B8: .4byte gBG0TilemapBuffer

	THUMB_FUNC_START sub_80B13BC
sub_80B13BC: @ 0x080B13BC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x34
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x29
	ldrb r0, [r6]
	ldr r1, _080B14FC  @ gUnknown_08A21598
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0
	ldrsb r2, [r0, r2]
	ldr r0, _080B1500  @ gUnknown_08A21590
	ldr r1, [r0]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #2
	str r0, [sp, #0x30]
	adds r1, r1, r0
	ldrb r1, [r1, #2]
	str r1, [sp, #0x2c]
	ldr r0, _080B1504  @ gUnknown_08A215A0
	ldr r0, [r0]
	adds r5, r0, #0
	adds r5, #0x70
	ldr r2, _080B1508  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldr r1, _080B150C  @ gBG0TilemapBuffer
	mov sl, r1
	mov r0, sl
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B1510  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	bl sub_80B0ABC
	movs r0, #3
	bl BG_EnableSyncByMask
	adds r0, r4, #0
	bl sub_80B1008
	bl sub_80A4DA0
	bl SaveGame
	movs r0, #0
	str r0, [r4, #0x30]
	bl sub_80ACA84
	ldrb r1, [r6]
	lsls r1, r1, #4
	movs r2, #0x2c
	ldrsh r0, [r4, r2]
	subs r0, #0x38
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x28
	movs r2, #0x13
	bl sub_80AD51C
	adds r0, r5, #0
	bl Text_Clear
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0
	bl Text_SetParameters
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetXCursor
	ldr r0, [sp, #0x2c]
	bl GetItemName
	adds r7, r0, #0
	ldr r0, _080B1514  @ 0x00000883
	add r1, sp, #0xc
	bl GetStringFromIndexInBuffer
	adds r6, r0, #0
	adds r0, r7, #0
	bl GetStringTextWidth
	adds r4, r0, #0
	adds r0, r6, #0
	bl GetStringTextWidth
	adds r4, r4, r0
	adds r0, r4, #7
	cmp r0, #0
	bge _080B1498
	adds r0, #7
_080B1498:
	asrs r0, r0, #3
	adds r0, #4
	mov r9, r0
	lsrs r0, r0, #0x1f
	add r0, r9
	asrs r0, r0, #1
	movs r1, #0xf
	subs r1, r1, r0
	mov r8, r1
	adds r0, r5, #0
	adds r1, r7, #0
	bl Text_AppendString
	adds r0, r5, #0
	adds r1, r6, #0
	bl Text_AppendString
	mov r0, r8
	lsls r4, r0, #1
	ldr r1, _080B1518  @ 0x00000286
	add r1, sl
	adds r1, r4, r1
	adds r0, r5, #0
	bl Text_Draw
	ldr r0, _080B151C  @ 0x00000282
	add r0, sl
	adds r4, r4, r0
	ldr r0, [sp, #0x2c]
	bl GetItemIconId
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl DrawIcon
	ldr r1, _080B1500  @ gUnknown_08A21590
	ldr r0, [r1]
	ldr r2, [sp, #0x30]
	adds r0, r0, r2
	ldrb r0, [r0, #1]
	cmp r0, #0
	blt _080B154A
	cmp r0, #1
	ble _080B1520
	cmp r0, #2
	beq _080B1538
	b _080B154A
	.align 2, 0
_080B14FC: .4byte gUnknown_08A21598
_080B1500: .4byte gUnknown_08A21590
_080B1504: .4byte gUnknown_08A215A0
_080B1508: .4byte gLCDControlBuffer
_080B150C: .4byte gBG0TilemapBuffer
_080B1510: .4byte gBG1TilemapBuffer
_080B1514: .4byte 0x00000883
_080B1518: .4byte 0x00000286
_080B151C: .4byte 0x00000282
_080B1520:
	ldr r0, _080B1534  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B154A
	movs r0, #0x5a
	bl m4aSongNumStart
	b _080B154A
	.align 2, 0
_080B1534: .4byte gUnknown_0202BCF0
_080B1538:
	ldr r0, _080B15D8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B154A
	movs r0, #0xb9
	bl m4aSongNumStart
_080B154A:
	ldr r0, _080B15DC  @ gBG1TilemapBuffer
	movs r1, #3
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	movs r1, #1
	str r1, [sp, #8]
	mov r1, r8
	movs r2, #0xa
	mov r3, r9
	bl DrawUiFrame
	ldr r0, _080B15E0  @ gLCDControlBuffer
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r2, ip
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	negs r1, r1
	ands r0, r1
	strb r0, [r2]
	mov r2, r8
	lsls r0, r2, #3
	mov r1, ip
	adds r1, #0x2d
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x50
	strb r0, [r1]
	mov r0, r8
	add r0, r9
	lsls r0, r0, #3
	subs r1, #5
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x68
	strb r0, [r1]
	movs r0, #3
	bl BG_EnableSyncByMask
	ldr r2, _080B15E4  @ 0x0000FFFC
	movs r0, #0
	movs r1, #0
	bl BG_SetPosition
	add sp, #0x34
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B15D8: .4byte gUnknown_0202BCF0
_080B15DC: .4byte gBG1TilemapBuffer
_080B15E0: .4byte gLCDControlBuffer
_080B15E4: .4byte 0x0000FFFC

	THUMB_FUNC_START sub_80B15E8
sub_80B15E8: @ 0x080B15E8
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x30]
	adds r0, #1
	str r0, [r2, #0x30]
	cmp r0, #0x1e
	ble _080B1610
	ldr r0, _080B160C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq _080B1610
	adds r0, r2, #0
	bl Proc_ClearNativeCallback
	b _080B161C
	.align 2, 0
_080B160C: .4byte gKeyStatusPtr
_080B1610:
	ldr r0, [r2, #0x30]
	cmp r0, #0x78
	ble _080B161C
	adds r0, r2, #0
	bl Proc_ClearNativeCallback
_080B161C:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B1620
sub_80B1620: @ 0x080B1620
	push {lr}
	ldr r0, _080B1660  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B1664  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	bl sub_80B0ABC
	movs r0, #3
	bl BG_EnableSyncByMask
	ldr r2, _080B1668  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	pop {r0}
	bx r0
	.align 2, 0
_080B1660: .4byte gBG0TilemapBuffer
_080B1664: .4byte gBG1TilemapBuffer
_080B1668: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B166C
sub_80B166C: @ 0x080B166C
	push {r4, lr}
	adds r4, r0, #0
	bl EndGreenTextColorManager
	adds r0, r4, #0
	bl sub_80ADDD4
	movs r0, #0
	bl SetPrimaryHBlankHandler
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B1688
sub_80B1688: @ 0x080B1688
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B1698  @ gUnknown_08A215A8
	bl Proc_CreateBlockingChild
	pop {r0}
	bx r0
	.align 2, 0
_080B1698: .4byte gUnknown_08A215A8

	THUMB_FUNC_START sub_80B169C
sub_80B169C: @ 0x080B169C
	push {lr}
	ldr r0, _080B16BC  @ gUnknown_08A2E974
	ldr r0, [r0]
	movs r1, #0x32
	ldrsh r2, [r0, r1]
	ldr r0, _080B16C0  @ gUnknown_0202BCF0
	ldrb r1, [r0, #0x14]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080B16C4
	adds r0, r2, #3
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	b _080B16C6
	.align 2, 0
_080B16BC: .4byte gUnknown_08A2E974
_080B16C0: .4byte gUnknown_0202BCF0
_080B16C4:
	adds r0, r2, #0
_080B16C6:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B16CC
sub_80B16CC: @ 0x080B16CC
	ldr r0, _080B16D8  @ gUnknown_08A2E974
	ldr r0, [r0]
	ldrh r0, [r0, #0x2a]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bx lr
	.align 2, 0
_080B16D8: .4byte gUnknown_08A2E974

	THUMB_FUNC_START sub_80B16DC
sub_80B16DC: @ 0x080B16DC
	push {lr}
	ldr r1, _080B16F8  @ gUnknown_08A2E978
	ldr r0, _080B16FC  @ gUnknown_08A2E974
	ldr r0, [r0]
	movs r2, #0x2a
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_80B1DE8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0
_080B16F8: .4byte gUnknown_08A2E978
_080B16FC: .4byte gUnknown_08A2E974

	THUMB_FUNC_START sub_80B1700
sub_80B1700: @ 0x080B1700
	push {r4, r5, lr}
	lsls r2, r0, #1
	adds r2, r2, r1
	movs r4, #0x1f
	ands r2, r4
	lsls r2, r2, #5
	ldr r3, _080B176C  @ gUnknown_08A2E99C
	ldr r1, _080B1770  @ gUnknown_08A2E978
	adds r0, r0, r1
	ldrb r1, [r0]
	movs r0, #0x2c
	muls r0, r1, r0
	adds r0, r0, r3
	adds r0, #0x24
	ldrb r1, [r0]
	adds r3, r1, #0
	ands r3, r4
	lsls r0, r1, #1
	ldr r1, _080B1774  @ 0x0000FFC0
	ands r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r3, r3, r0
	movs r0, #0x80
	lsls r0, r0, #7
	adds r1, r3, r0
	ldr r4, _080B1778  @ gBG1TilemapBuffer
	adds r0, r2, #2
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r1, [r0]
	adds r0, r2, #3
	lsls r0, r0, #1
	adds r0, r0, r4
	ldr r5, _080B177C  @ 0x00004001
	adds r1, r3, r5
	strh r1, [r0]
	adds r0, r2, #0
	adds r0, #0x22
	lsls r0, r0, #1
	adds r0, r0, r4
	adds r5, #0x1f
	adds r1, r3, r5
	strh r1, [r0]
	adds r2, #0x23
	lsls r2, r2, #1
	adds r2, r2, r4
	ldr r0, _080B1780  @ 0x00004021
	adds r3, r3, r0
	strh r3, [r2]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B176C: .4byte gUnknown_08A2E99C
_080B1770: .4byte gUnknown_08A2E978
_080B1774: .4byte 0x0000FFC0
_080B1778: .4byte gBG1TilemapBuffer
_080B177C: .4byte 0x00004001
_080B1780: .4byte 0x00004021

	THUMB_FUNC_START sub_80B1784
sub_80B1784: @ 0x080B1784
	push {r4, r5, lr}
	sub sp, #8
	ldr r4, _080B17D4  @ gUnknown_08A2E974
	ldr r0, [r4]
	adds r0, #0xa8
	bl Text_Clear
	ldr r5, _080B17D8  @ gUnknown_08A2E99C
	bl sub_80B16DC
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x15
	ldr r2, _080B17DC  @ gUnknown_08A2E978
	ldr r1, [r4]
	movs r3, #0x2a
	ldrsh r1, [r1, r3]
	adds r1, r1, r2
	ldrb r2, [r1]
	movs r1, #0x2c
	muls r1, r2, r1
	adds r0, r0, r1
	adds r0, r0, r5
	ldrh r0, [r0, #4]
	bl GetStringFromIndex
	adds r3, r0, #0
	ldr r0, [r4]
	adds r0, #0xa8
	ldr r1, _080B17E0  @ gUnknown_02023130
	movs r2, #0x16
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B17D4: .4byte gUnknown_08A2E974
_080B17D8: .4byte gUnknown_08A2E99C
_080B17DC: .4byte gUnknown_08A2E978
_080B17E0: .4byte gUnknown_02023130

	THUMB_FUNC_START sub_80B17E4
sub_80B17E4: @ 0x080B17E4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	adds r5, r0, #0
	adds r4, r1, #0
	adds r6, r2, #0
	ldr r0, _080B1840  @ gUnknown_08A2E974
	mov r8, r0
	lsls r4, r4, #3
	adds r4, #0x38
	ldr r0, [r0]
	adds r0, r0, r4
	bl Text_Clear
	ldr r2, _080B1844  @ gUnknown_08A2E99C
	ldr r0, _080B1848  @ gUnknown_08A2E978
	adds r5, r5, r0
	ldrb r1, [r5]
	movs r0, #0x2c
	muls r0, r1, r0
	adds r0, r0, r2
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r2, r0, #0
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r4
	lsls r6, r6, #6
	ldr r1, _080B184C  @ gUnknown_020234B0
	adds r6, r6, r1
	movs r1, #9
	str r1, [sp]
	str r2, [sp, #4]
	adds r1, r6, #0
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B1840: .4byte gUnknown_08A2E974
_080B1844: .4byte gUnknown_08A2E99C
_080B1848: .4byte gUnknown_08A2E978
_080B184C: .4byte gUnknown_020234B0

	THUMB_FUNC_START sub_80B1850
sub_80B1850: @ 0x080B1850
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r1, [sp]
	str r2, [sp, #4]
	ldr r1, _080B1910  @ gUnknown_08A2E978
	adds r0, r0, r1
	ldrb r0, [r0]
	mov r9, r0
	ldr r1, _080B1914  @ gUnknown_08A2E99C
	movs r0, #0x2c
	mov r2, r9
	muls r2, r0, r2
	adds r0, r2, #0
	adds r4, r0, r1
	ldrb r0, [r4, #8]
	lsrs r0, r0, #3
	str r0, [sp, #8]
	ldr r1, _080B1918  @ gUnknown_08A2E974
	ldr r2, [sp]
	lsls r0, r2, #3
	adds r5, r0, #0
	adds r5, #0x70
	ldr r0, [r1]
	adds r0, r0, r5
	bl Text_Clear
	movs r0, #0
	mov r8, r0
	ldrh r0, [r4, #6]
	cmp r0, #0
	beq _080B18E0
	mov sl, r5
_080B1898:
	ldr r0, _080B1918  @ gUnknown_08A2E974
	ldr r0, [r0]
	mov r1, sl
	adds r7, r0, r1
	ldrb r0, [r4, #8]
	adds r6, r0, #0
	subs r6, #0x70
	mov r2, r9
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	bl sub_80B1DE8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r5, #1
	cmp r8, r0
	bne _080B18BC
	movs r5, #2
_080B18BC:
	ldrh r0, [r4, #6]
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl Text_InsertString
	adds r4, #8
	movs r0, #1
	add r8, r0
	mov r1, r8
	cmp r1, #3
	bgt _080B18E0
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _080B1898
_080B18E0:
	ldr r0, _080B1918  @ gUnknown_08A2E974
	ldr r2, [sp]
	lsls r1, r2, #3
	adds r1, #0x70
	ldr r0, [r0]
	adds r0, r0, r1
	ldr r2, [sp, #4]
	lsls r1, r2, #5
	ldr r2, [sp, #8]
	adds r1, r1, r2
	lsls r1, r1, #1
	ldr r2, _080B191C  @ gBG1TilemapBuffer
	adds r1, r1, r2
	bl Text_Draw
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B1910: .4byte gUnknown_08A2E978
_080B1914: .4byte gUnknown_08A2E99C
_080B1918: .4byte gUnknown_08A2E974
_080B191C: .4byte gBG1TilemapBuffer

	THUMB_FUNC_START sub_80B1920
sub_80B1920: @ 0x080B1920
	push {lr}
	movs r0, #1
	movs r1, #0x12
	bl LoadIconPalette
	movs r0, #0x80
	movs r1, #3
	bl sub_80B53BC
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B1938
sub_80B1938: @ 0x080B1938
	push {r4, r5, r6, r7, lr}
	ldr r1, _080B19F0  @ gUnknown_08A2E978
	ldr r6, _080B19F4  @ gUnknown_08A2E974
	ldr r0, [r6]
	movs r2, #0x2a
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	ldrb r5, [r0]
	bl GetGameClock
	movs r1, #0xf
	ands r0, r1
	movs r1, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r2, _080B19F8  @ gUnknown_08A2E986
	movs r3, #0x83
	lsls r3, r3, #6
	movs r0, #0x12
	movs r1, #8
	bl CallARM_PushToSecondaryOAM
	ldr r0, [r6]
	movs r1, #0x2a
	ldrsh r4, [r0, r1]
	movs r2, #0x2c
	ldrsh r0, [r0, r2]
	subs r4, r4, r0
	lsls r4, r4, #4
	adds r4, #0x28
	movs r0, #0x10
	adds r1, r4, #0
	bl DisplayFrozenUiHand
	adds r0, r5, #0
	bl sub_80B1DE8
	ldr r2, _080B19FC  @ gUnknown_08A2E99C
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x15
	movs r1, #0x2c
	muls r1, r5, r1
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r0, [r0, #8]
	subs r0, #2
	adds r1, r4, #0
	bl DisplayUiHand
	ldr r0, [r6]
	adds r0, #0x37
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B19B2
	bl sub_8095970
	cmp r0, #0
	beq _080B19DA
_080B19B2:
	bl sub_80B16CC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080B19DA
	bl sub_80B16DC
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bne _080B19DA
	ldr r2, _080B1A00  @ gUnknown_08590F4C
	ldr r3, _080B1A04  @ 0x000020CC
	cmp r7, #0
	beq _080B19D2
	adds r3, #2
_080B19D2:
	movs r0, #0xc0
	movs r1, #0x28
	bl CallARM_PushToSecondaryOAM
_080B19DA:
	ldr r0, _080B19F4  @ gUnknown_08A2E974
	ldr r0, [r0]
	ldrh r1, [r0, #0x2e]
	ldrh r2, [r0, #0x34]
	movs r0, #0xa
	movs r3, #6
	bl sub_80976CC
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B19F0: .4byte gUnknown_08A2E978
_080B19F4: .4byte gUnknown_08A2E974
_080B19F8: .4byte gUnknown_08A2E986
_080B19FC: .4byte gUnknown_08A2E99C
_080B1A00: .4byte gUnknown_08590F4C
_080B1A04: .4byte 0x000020CC

	THUMB_FUNC_START sub_80B1A08
sub_80B1A08: @ 0x080B1A08
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	mov r9, r0
	ldr r1, _080B1C54  @ gUnknown_08205E50
	add r0, sp, #4
	movs r2, #0x18
	bl memcpy
	movs r0, #0
	mov sl, r0
	add r0, sp, #4
	bl SetupBackgrounds
	ldr r2, _080B1C58  @ gUnknown_08A2E974
	ldr r1, [r2]
	mov r0, sl
	strh r0, [r1, #0x32]
	movs r0, #0xd
	strh r0, [r1, #0x34]
	mov r2, sl
	strh r2, [r1, #0x2a]
	strh r2, [r1, #0x2c]
	strh r2, [r1, #0x2e]
	mov r0, r9
	strh r2, [r0, #0x30]
	adds r0, #0x36
	movs r2, #0
	strb r2, [r0]
	adds r1, #0x37
	ldrb r2, [r1]
	movs r0, #2
	negs r0, r0
	ands r0, r2
	strb r0, [r1]
	ldr r0, _080B1C58  @ gUnknown_08A2E974
	ldr r1, [r0]
	adds r1, #0x37
	ldrb r2, [r1]
	movs r0, #3
	negs r0, r0
	ands r0, r2
	strb r0, [r1]
	bl Font_InitForUIDefault
	bl sub_80156BC
	bl LoadUiFrameGraphics
	ldr r7, _080B1C5C  @ gLCDControlBuffer
	ldrb r0, [r7, #1]
	movs r1, #1
	mov r8, r1
	mov r2, r8
	orrs r0, r2
	movs r1, #2
	orrs r0, r1
	movs r6, #4
	orrs r0, r6
	movs r5, #8
	orrs r0, r5
	movs r4, #0x10
	orrs r0, r4
	strb r0, [r7, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r2, _080B1C58  @ gUnknown_08A2E974
	ldr r0, [r2]
	ldrh r2, [r0, #0x2e]
	movs r0, #1
	movs r1, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldrb r0, [r7, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r0, r7, #0
	adds r0, #0x2d
	movs r1, #0
	strb r1, [r0]
	adds r1, r7, #0
	adds r1, #0x31
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x88
	strb r0, [r1]
	adds r1, #4
	ldrb r0, [r1]
	mov r2, r8
	orrs r0, r2
	movs r2, #2
	orrs r0, r2
	orrs r0, r6
	orrs r0, r5
	orrs r0, r4
	strb r0, [r1]
	adds r1, #2
	ldrb r0, [r1]
	mov r2, r8
	orrs r0, r2
	movs r2, #3
	negs r2, r2
	ands r0, r2
	orrs r0, r6
	orrs r0, r5
	orrs r0, r4
	strb r0, [r1]
	movs r0, #1
	movs r1, #0xe
	movs r2, #4
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	mov r0, sl
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	mov r1, sl
	str r1, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	ldr r0, _080B1C60  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B1C64  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r5, _080B1C68  @ gBG2TilemapBuffer
	adds r0, r5, #0
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B1C6C  @ gBG3TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r4, _080B1C70  @ gUnknown_08A07A98
	adds r0, r4, #0
	movs r1, #0x80
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r1, #0x90
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080B1C74  @ gUnknown_08A0733C
	ldr r1, _080B1C78  @ 0x06011800
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B1C7C  @ gUnknown_08A0754C
	ldr r1, _080B1C80  @ 0x06004000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B1C84  @ gUnknown_08A079B4
	ldr r4, _080B1C88  @ gUnknown_02020208
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r5, #0
	adds r1, r4, #0
	bl CallARM_FillTileRect
	bl sub_8003D20
	ldr r2, _080B1C58  @ gUnknown_08A2E974
	ldr r0, [r2]
	adds r0, #0xa8
	movs r1, #0x16
	bl Text_Init
	bl sub_80B1784
	movs r3, #0xe4
	lsls r3, r3, #7
	movs r0, #1
	str r0, [sp]
	mov r0, r9
	movs r1, #0xe0
	movs r2, #0x2f
	bl sub_8097748
	ldr r1, _080B1C58  @ gUnknown_08A2E974
	ldr r0, [r1]
	adds r0, #0x68
	movs r1, #9
	bl Text_Init
	ldr r2, _080B1C58  @ gUnknown_08A2E974
	ldr r0, [r2]
	adds r0, #0xa0
	movs r1, #0xe
	bl Text_Init
	ldr r7, _080B1C58  @ gUnknown_08A2E974
	movs r6, #0x70
	movs r5, #0x38
	movs r4, #5
_080B1BE4:
	mov r0, sl
	movs r1, #5
	bl sub_80B1700
	ldr r0, [r7]
	adds r0, r0, r5
	movs r1, #9
	bl Text_Init
	ldr r0, [r7]
	adds r0, r0, r6
	movs r1, #0xe
	bl Text_Init
	mov r0, sl
	mov r1, sl
	adds r2, r4, #0
	bl sub_80B17E4
	mov r0, sl
	mov r1, sl
	adds r2, r4, #0
	bl sub_80B1850
	adds r6, #8
	adds r5, #8
	adds r4, #2
	movs r0, #1
	add sl, r0
	mov r1, sl
	cmp r1, #5
	ble _080B1BE4
	movs r0, #0
	str r0, [sp]
	mov r0, r9
	movs r1, #0
	movs r2, #0x12
	movs r3, #2
	bl sub_8086CE8
	ldr r0, _080B1C8C  @ gUnknown_08A2ECA8
	mov r1, r9
	bl Proc_Create
	movs r0, #0xf
	bl BG_EnableSyncByMask
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B1C54: .4byte gUnknown_08205E50
_080B1C58: .4byte gUnknown_08A2E974
_080B1C5C: .4byte gLCDControlBuffer
_080B1C60: .4byte gBG0TilemapBuffer
_080B1C64: .4byte gBG1TilemapBuffer
_080B1C68: .4byte gBG2TilemapBuffer
_080B1C6C: .4byte gBG3TilemapBuffer
_080B1C70: .4byte gUnknown_08A07A98
_080B1C74: .4byte gUnknown_08A0733C
_080B1C78: .4byte 0x06011800
_080B1C7C: .4byte gUnknown_08A0754C
_080B1C80: .4byte 0x06004000
_080B1C84: .4byte gUnknown_08A079B4
_080B1C88: .4byte gUnknown_02020208
_080B1C8C: .4byte gUnknown_08A2ECA8

	THUMB_FUNC_START sub_80B1C90
sub_80B1C90: @ 0x080B1C90
	push {lr}
	bl sub_80B1D14
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B1CA4
	movs r0, #1
	negs r0, r0
	bl UnpackUiFrameBuffered
_080B1CA4:
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B1CAC
sub_80B1CAC: @ 0x080B1CAC
	push {r4, lr}
	bl sub_80B1D14
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B1D0A
	ldr r1, _080B1CD8  @ gUnknown_08A2E978
	ldr r4, _080B1CDC  @ gUnknown_08A2E974
	ldr r0, [r4]
	movs r2, #0x2a
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_80B1DE8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B1CE0
	bl sub_8002AC8
	b _080B1D0A
	.align 2, 0
_080B1CD8: .4byte gUnknown_08A2E978
_080B1CDC: .4byte gUnknown_08A2E974
_080B1CE0:
	ldr r0, [r4]
	adds r0, #0x37
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B1CF8
	movs r0, #0x34
	movs r1, #0
	bl Sound_PlaySong80024D4
	b _080B1D0A
_080B1CF8:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B1D06
	bl sub_80B9FC0
	b _080B1D0A
_080B1D06:
	bl sub_80160D0
_080B1D0A:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B1D14
sub_80B1D14: @ 0x080B1D14
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	movs r7, #0
	ldr r0, _080B1D64  @ gUnknown_08A2E974
	ldr r0, [r0]
	movs r1, #0x2a
	ldrsh r5, [r0, r1]
	ldr r0, _080B1D68  @ gUnknown_08A2E978
	adds r0, r5, r0
	ldrb r4, [r0]
	adds r6, r4, #0
	bl sub_80B16DC
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r0, _080B1D6C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _080B1DCE
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _080B1D70
	cmp r3, #0
	beq _080B1D96
	subs r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	adds r0, r4, #0
	adds r1, r3, #0
	bl sub_80B1F64
	movs r7, #1
	b _080B1D9A
	.align 2, 0
_080B1D64: .4byte gUnknown_08A2E974
_080B1D68: .4byte gUnknown_08A2E978
_080B1D6C: .4byte gKeyStatusPtr
_080B1D70:
	ldr r2, _080B1DDC  @ gUnknown_08A2E99C
	adds r4, r3, #1
	lsls r0, r4, #3
	movs r1, #0x2c
	muls r1, r6, r1
	adds r0, r0, r1
	adds r0, r0, r2
	ldrh r0, [r0, #6]
	cmp r0, #0
	beq _080B1D96
	cmp r3, #2
	bhi _080B1D96
	lsls r0, r4, #0x18
	lsrs r3, r0, #0x18
	adds r0, r6, #0
	adds r1, r3, #0
	bl sub_80B1F64
	movs r7, #1
_080B1D96:
	cmp r7, #0
	beq _080B1DCE
_080B1D9A:
	ldr r0, _080B1DE0  @ gUnknown_08A2EC88
	mov r1, r8
	bl Proc_Create
	adds r0, r5, #0
	movs r1, #7
	bl __modsi3
	adds r1, r0, #0
	lsls r2, r5, #1
	adds r2, #5
	adds r0, r5, #0
	bl sub_80B1850
	movs r0, #3
	bl BG_EnableSyncByMask
	ldr r0, _080B1DE4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B1DCE
	movs r0, #0x67
	bl m4aSongNumStart
_080B1DCE:
	adds r0, r7, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080B1DDC: .4byte gUnknown_08A2E99C
_080B1DE0: .4byte gUnknown_08A2EC88
_080B1DE4: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B1DE8
sub_80B1DE8: @ 0x080B1DE8
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r2, #0
	cmp r0, #0x10
	bls _080B1DF6
	b _080B1F5A
_080B1DF6:
	lsls r0, r0, #2
	ldr r1, _080B1E00  @ _080B1E04
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080B1E00: .4byte _080B1E04
_080B1E04: @ jump table
	.4byte _080B1E48 @ case 0
	.4byte _080B1E7E @ case 1
	.4byte _080B1E8C @ case 2
	.4byte _080B1E98 @ case 3
	.4byte _080B1EA8 @ case 4
	.4byte _080B1EB8 @ case 5
	.4byte _080B1EC4 @ case 6
	.4byte _080B1ED4 @ case 7
	.4byte _080B1EE4 @ case 8
	.4byte _080B1F5A @ case 9
	.4byte _080B1EF4 @ case 10
	.4byte _080B1F04 @ case 11
	.4byte _080B1F14 @ case 12
	.4byte _080B1F20 @ case 13
	.4byte _080B1F30 @ case 14
	.4byte _080B1F40 @ case 15
	.4byte _080B1F50 @ case 16
_080B1E48:
	ldr r0, _080B1E60  @ gUnknown_0202BCF0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1d
	lsrs r0, r0, #0x1e
	cmp r0, #1
	beq _080B1E76
	cmp r0, #1
	bgt _080B1E64
	cmp r0, #0
	beq _080B1E6E
	b _080B1E7E
	.align 2, 0
_080B1E60: .4byte gUnknown_0202BCF0
_080B1E64:
	cmp r0, #2
	beq _080B1E7A
	cmp r0, #3
	beq _080B1E72
	b _080B1E7E
_080B1E6E:
	movs r0, #0
	b _080B1F5C
_080B1E72:
	movs r0, #1
	b _080B1F5C
_080B1E76:
	movs r0, #2
	b _080B1F5C
_080B1E7A:
	movs r0, #3
	b _080B1F5C
_080B1E7E:
	ldr r0, _080B1E88  @ gUnknown_0202BCF0
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	b _080B1F58
	.align 2, 0
_080B1E88: .4byte gUnknown_0202BCF0
_080B1E8C:
	ldr r0, _080B1E94  @ gUnknown_0202BCF0
	adds r0, #0x40
	b _080B1EE8
	.align 2, 0
_080B1E94: .4byte gUnknown_0202BCF0
_080B1E98:
	ldr r0, _080B1EA4  @ gUnknown_0202BCF0
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	b _080B1F58
	.align 2, 0
_080B1EA4: .4byte gUnknown_0202BCF0
_080B1EA8:
	ldr r0, _080B1EB4  @ gUnknown_0202BCF0
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r2, r0, #0x1e
	b _080B1F5A
	.align 2, 0
_080B1EB4: .4byte gUnknown_0202BCF0
_080B1EB8:
	ldr r0, _080B1EC0  @ gUnknown_0202BCF0
	adds r0, #0x40
	b _080B1F08
	.align 2, 0
_080B1EC0: .4byte gUnknown_0202BCF0
_080B1EC4:
	ldr r0, _080B1ED0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	b _080B1F58
	.align 2, 0
_080B1ED0: .4byte gUnknown_0202BCF0
_080B1ED4:
	ldr r0, _080B1EE0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	b _080B1F58
	.align 2, 0
_080B1EE0: .4byte gUnknown_0202BCF0
_080B1EE4:
	ldr r0, _080B1EF0  @ gUnknown_0202BCF0
	adds r0, #0x41
_080B1EE8:
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r2, r0, #0x1e
	b _080B1F5A
	.align 2, 0
_080B1EF0: .4byte gUnknown_0202BCF0
_080B1EF4:
	ldr r0, _080B1F00  @ gUnknown_0202BCF0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r2, r0, #0x1e
	b _080B1F5A
	.align 2, 0
_080B1F00: .4byte gUnknown_0202BCF0
_080B1F04:
	ldr r0, _080B1F10  @ gUnknown_0202BCF0
	adds r0, #0x41
_080B1F08:
	ldrb r0, [r0]
	lsrs r2, r0, #7
	b _080B1F5A
	.align 2, 0
_080B1F10: .4byte gUnknown_0202BCF0
_080B1F14:
	ldr r0, _080B1F1C  @ gUnknown_0202BCF0
	adds r0, #0x41
	b _080B1F54
	.align 2, 0
_080B1F1C: .4byte gUnknown_0202BCF0
_080B1F20:
	ldr r0, _080B1F2C  @ gUnknown_0202BCF0
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	b _080B1F58
	.align 2, 0
_080B1F2C: .4byte gUnknown_0202BCF0
_080B1F30:
	ldr r0, _080B1F3C  @ gUnknown_0202BCF0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	b _080B1F58
	.align 2, 0
_080B1F3C: .4byte gUnknown_0202BCF0
_080B1F40:
	ldr r0, _080B1F4C  @ gUnknown_0202BCF0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	b _080B1F58
	.align 2, 0
_080B1F4C: .4byte gUnknown_0202BCF0
_080B1F50:
	ldr r0, _080B1F60  @ gUnknown_0202BCF0
	adds r0, #0x42
_080B1F54:
	ldrb r0, [r0]
	lsls r0, r0, #0x19
_080B1F58:
	lsrs r2, r0, #0x1f
_080B1F5A:
	adds r0, r2, #0
_080B1F5C:
	pop {r1}
	bx r1
	.align 2, 0
_080B1F60: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B1F64
sub_80B1F64: @ 0x080B1F64
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r3, r1, #0x18
	cmp r0, #0x10
	bls _080B1F74
	b _080B2180
_080B1F74:
	lsls r0, r0, #2
	ldr r1, _080B1F80  @ _080B1F84
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080B1F80: .4byte _080B1F84
_080B1F84: @ jump table
	.4byte _080B1FC8 @ case 0
	.4byte _080B2030 @ case 1
	.4byte _080B2048 @ case 2
	.4byte _080B2060 @ case 3
	.4byte _080B2078 @ case 4
	.4byte _080B2090 @ case 5
	.4byte _080B209C @ case 6
	.4byte _080B20B4 @ case 7
	.4byte _080B20CC @ case 8
	.4byte _080B2180 @ case 9
	.4byte _080B20E4 @ case 10
	.4byte _080B20FC @ case 11
	.4byte _080B2114 @ case 12
	.4byte _080B2120 @ case 13
	.4byte _080B2138 @ case 14
	.4byte _080B2150 @ case 15
	.4byte _080B2168 @ case 16
_080B1FC8:
	cmp r3, #1
	beq _080B1FF4
	cmp r3, #1
	bgt _080B1FD6
	cmp r3, #0
	beq _080B1FE0
	b _080B2030
_080B1FD6:
	cmp r3, #2
	beq _080B2008
	cmp r3, #3
	beq _080B201C
	b _080B2030
_080B1FE0:
	ldr r0, _080B1FF0  @ gUnknown_0202BCF0
	adds r0, #0x42
	ldrb r2, [r0]
	movs r1, #7
	negs r1, r1
	ands r1, r2
	strb r1, [r0]
	b _080B2180
	.align 2, 0
_080B1FF0: .4byte gUnknown_0202BCF0
_080B1FF4:
	ldr r0, _080B2004  @ gUnknown_0202BCF0
	adds r0, #0x42
	ldrb r1, [r0]
	movs r2, #6
	orrs r1, r2
	strb r1, [r0]
	b _080B2180
	.align 2, 0
_080B2004: .4byte gUnknown_0202BCF0
_080B2008:
	ldr r2, _080B2018  @ gUnknown_0202BCF0
	adds r2, #0x42
	ldrb r1, [r2]
	movs r0, #7
	negs r0, r0
	ands r0, r1
	movs r1, #2
	b _080B217C
	.align 2, 0
_080B2018: .4byte gUnknown_0202BCF0
_080B201C:
	ldr r2, _080B202C  @ gUnknown_0202BCF0
	adds r2, #0x42
	ldrb r1, [r2]
	movs r0, #7
	negs r0, r0
	ands r0, r1
	movs r1, #4
	b _080B217C
	.align 2, 0
_080B202C: .4byte gUnknown_0202BCF0
_080B2030:
	ldr r2, _080B2044  @ gUnknown_0202BCF0
	adds r2, #0x40
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #1
	ldrb r3, [r2]
	movs r0, #3
	negs r0, r0
	b _080B217A
	.align 2, 0
_080B2044: .4byte gUnknown_0202BCF0
_080B2048:
	ldr r2, _080B205C  @ gUnknown_0202BCF0
	adds r2, #0x40
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #2
	ldrb r3, [r2]
	movs r0, #0xd
	negs r0, r0
	b _080B217A
	.align 2, 0
_080B205C: .4byte gUnknown_0202BCF0
_080B2060:
	ldr r2, _080B2074  @ gUnknown_0202BCF0
	adds r2, #0x40
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #4
	ldrb r3, [r2]
	movs r0, #0x11
	negs r0, r0
	b _080B217A
	.align 2, 0
_080B2074: .4byte gUnknown_0202BCF0
_080B2078:
	ldr r2, _080B208C  @ gUnknown_0202BCF0
	adds r2, #0x40
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #5
	ldrb r3, [r2]
	movs r0, #0x61
	negs r0, r0
	b _080B217A
	.align 2, 0
_080B208C: .4byte gUnknown_0202BCF0
_080B2090:
	ldr r1, _080B2098  @ gUnknown_0202BCF0
	adds r1, #0x40
	b _080B2100
	.align 2, 0
_080B2098: .4byte gUnknown_0202BCF0
_080B209C:
	ldr r2, _080B20B0  @ gUnknown_0202BCF0
	adds r2, #0x41
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	ldrb r3, [r2]
	movs r0, #2
	negs r0, r0
	b _080B217A
	.align 2, 0
_080B20B0: .4byte gUnknown_0202BCF0
_080B20B4:
	ldr r2, _080B20C8  @ gUnknown_0202BCF0
	adds r2, #0x41
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #1
	ldrb r3, [r2]
	movs r0, #3
	negs r0, r0
	b _080B217A
	.align 2, 0
_080B20C8: .4byte gUnknown_0202BCF0
_080B20CC:
	ldr r2, _080B20E0  @ gUnknown_0202BCF0
	adds r2, #0x41
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #2
	ldrb r3, [r2]
	movs r0, #0xd
	negs r0, r0
	b _080B217A
	.align 2, 0
_080B20E0: .4byte gUnknown_0202BCF0
_080B20E4:
	ldr r2, _080B20F8  @ gUnknown_0202BCF0
	adds r2, #0x42
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #3
	ldrb r3, [r2]
	movs r0, #0x19
	negs r0, r0
	b _080B217A
	.align 2, 0
_080B20F8: .4byte gUnknown_0202BCF0
_080B20FC:
	ldr r1, _080B2110  @ gUnknown_0202BCF0
	adds r1, #0x41
_080B2100:
	lsls r3, r3, #7
	ldrb r2, [r1]
	movs r0, #0x7f
	ands r0, r2
	orrs r0, r3
	strb r0, [r1]
	b _080B2180
	.align 2, 0
_080B2110: .4byte gUnknown_0202BCF0
_080B2114:
	ldr r2, _080B211C  @ gUnknown_0202BCF0
	adds r2, #0x41
	b _080B216C
	.align 2, 0
_080B211C: .4byte gUnknown_0202BCF0
_080B2120:
	ldr r2, _080B2134  @ gUnknown_0202BCF0
	adds r2, #0x40
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	ldrb r3, [r2]
	movs r0, #2
	negs r0, r0
	b _080B217A
	.align 2, 0
_080B2134: .4byte gUnknown_0202BCF0
_080B2138:
	ldr r2, _080B214C  @ gUnknown_0202BCF0
	adds r2, #0x42
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	ldrb r3, [r2]
	movs r0, #2
	negs r0, r0
	b _080B217A
	.align 2, 0
_080B214C: .4byte gUnknown_0202BCF0
_080B2150:
	ldr r2, _080B2164  @ gUnknown_0202BCF0
	adds r2, #0x42
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #5
	ldrb r3, [r2]
	movs r0, #0x21
	negs r0, r0
	b _080B217A
	.align 2, 0
_080B2164: .4byte gUnknown_0202BCF0
_080B2168:
	ldr r2, _080B2184  @ gUnknown_0202BCF0
	adds r2, #0x42
_080B216C:
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #6
	ldrb r3, [r2]
	movs r0, #0x41
	negs r0, r0
_080B217A:
	ands r0, r3
_080B217C:
	orrs r0, r1
	strb r0, [r2]
_080B2180:
	pop {r0}
	bx r0
	.align 2, 0
_080B2184: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B2188
sub_80B2188: @ 0x080B2188
	push {r4, r5, r6, r7, lr}
	adds r6, r1, #0
	adds r7, r2, #0
	lsls r0, r6, #1
	adds r5, r0, #5
	movs r0, #0x1f
	ands r5, r0
	lsls r0, r5, #5
	ldr r2, _080B2204  @ gBG1TilemapBuffer
	movs r4, #0
	adds r1, r0, #0
	adds r1, #0x22
	adds r0, #2
	movs r3, #0x1a
	lsls r0, r0, #1
	adds r0, r0, r2
	lsls r1, r1, #1
	adds r1, r1, r2
_080B21AC:
	strh r4, [r0]
	strh r4, [r1]
	adds r1, #2
	adds r0, #2
	subs r3, #1
	cmp r3, #0
	bge _080B21AC
	adds r0, r6, #0
	movs r1, #7
	bl __modsi3
	adds r4, r0, #0
	adds r0, r6, #0
	movs r1, #5
	bl sub_80B1700
	adds r0, r6, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_80B17E4
	adds r0, r6, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_80B1850
	ldr r1, _080B2208  @ gBG0TilemapBuffer
	movs r2, #0
	adds r0, r7, #0
	adds r0, #0x62
	movs r3, #0x1a
	lsls r0, r0, #1
	adds r0, r0, r1
_080B21EE:
	strh r2, [r0]
	adds r0, #2
	subs r3, #1
	cmp r3, #0
	bge _080B21EE
	movs r0, #3
	bl BG_EnableSyncByMask
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2204: .4byte gBG1TilemapBuffer
_080B2208: .4byte gBG0TilemapBuffer

	THUMB_FUNC_START sub_80B220C
sub_80B220C: @ 0x080B220C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r3, #0
	movs r1, #0x30
	ldrsh r0, [r4, r1]
	cmp r0, #6
	bls _080B221C
	b _080B244C
_080B221C:
	lsls r0, r0, #2
	ldr r1, _080B2228  @ _080B222C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080B2228: .4byte _080B222C
_080B222C: @ jump table
	.4byte _080B2248 @ case 0
	.4byte _080B2410 @ case 1
	.4byte _080B2410 @ case 2
	.4byte _080B2410 @ case 3
	.4byte _080B242C @ case 4
	.4byte _080B242C @ case 5
	.4byte _080B242C @ case 6
_080B2248:
	ldr r0, _080B226C  @ gKeyStatusPtr
	ldr r2, [r0]
	ldrh r1, [r2, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B2274
	ldr r0, _080B2270  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B22D4
	movs r0, #0x6b
	bl m4aSongNumStart
	b _080B22D4
	.align 2, 0
_080B226C: .4byte gKeyStatusPtr
_080B2270: .4byte gUnknown_0202BCF0
_080B2274:
	movs r6, #1
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080B22E8
	ldr r5, _080B22DC  @ gUnknown_08A2E974
	ldr r0, [r5]
	adds r0, #0x37
	ldrb r1, [r0]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080B2298
	bl sub_8095970
	cmp r0, #0
	bne _080B2298
	b _080B244C
_080B2298:
	ldr r1, _080B22E0  @ gUnknown_08A2E978
	ldr r0, [r5]
	movs r2, #0x2a
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _080B22AA
	b _080B244C
_080B22AA:
	movs r0, #0
	bl sub_80B1DE8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	beq _080B22BA
	b _080B244C
_080B22BA:
	ldr r0, _080B22E4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B22CC
	movs r0, #0x6a
	bl m4aSongNumStart
_080B22CC:
	adds r1, r4, #0
	adds r1, #0x36
	movs r0, #1
	strb r0, [r1]
_080B22D4:
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080B244C
	.align 2, 0
_080B22DC: .4byte gUnknown_08A2E974
_080B22E0: .4byte gUnknown_08A2E978
_080B22E4: .4byte gUnknown_0202BCF0
_080B22E8:
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _080B23CC
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080B2348
	ldr r5, _080B2344  @ gUnknown_08A2E974
	ldr r2, [r5]
	ldrh r1, [r2, #0x2a]
	movs r7, #0x2a
	ldrsh r0, [r2, r7]
	cmp r0, #0
	beq _080B2398
	subs r0, r1, #1
	strh r0, [r2, #0x2a]
	movs r1, #0x2a
	ldrsh r0, [r2, r1]
	movs r3, #0x2c
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	cmp r0, #0
	bgt _080B2340
	ldrh r1, [r2, #0x2c]
	movs r7, #0x2c
	ldrsh r0, [r2, r7]
	cmp r0, #0
	beq _080B2340
	subs r0, r1, #1
	strh r0, [r2, #0x2c]
	movs r0, #0x2a
	ldrsh r1, [r2, r0]
	subs r1, #1
	adds r0, r4, #0
	movs r2, #0
	bl sub_80B2188
	ldr r1, [r5]
	ldrh r0, [r1, #0x2e]
	subs r0, #4
	strh r0, [r1, #0x2e]
	strh r6, [r4, #0x30]
_080B2340:
	movs r3, #1
	b _080B239C
	.align 2, 0
_080B2344: .4byte gUnknown_08A2E974
_080B2348:
	ldr r5, _080B23C0  @ gUnknown_08A2E974
	ldr r2, [r5]
	movs r6, #0x2a
	ldrsh r1, [r2, r6]
	movs r7, #0x34
	ldrsh r0, [r2, r7]
	subs r0, #1
	cmp r1, r0
	bge _080B2398
	ldrh r0, [r2, #0x2a]
	adds r0, #1
	strh r0, [r2, #0x2a]
	movs r0, #0x2a
	ldrsh r1, [r2, r0]
	movs r3, #0x2c
	ldrsh r0, [r2, r3]
	subs r0, r1, r0
	cmp r0, #4
	ble _080B2396
	movs r6, #0x34
	ldrsh r0, [r2, r6]
	subs r0, #1
	cmp r1, r0
	bge _080B2396
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	adds r1, #1
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r4, #0
	bl sub_80B2188
	ldr r1, [r5]
	ldrh r0, [r1, #0x2e]
	adds r0, #4
	strh r0, [r1, #0x2e]
	movs r0, #4
	strh r0, [r4, #0x30]
_080B2396:
	movs r3, #1
_080B2398:
	cmp r3, #0
	beq _080B23CC
_080B239C:
	ldr r0, _080B23C4  @ gUnknown_08A2EC88
	adds r1, r4, #0
	bl Proc_Create
	movs r0, #3
	bl BG_EnableSyncByMask
	ldr r0, _080B23C8  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B244C
	movs r0, #0x66
	bl m4aSongNumStart
	b _080B244C
	.align 2, 0
_080B23C0: .4byte gUnknown_08A2E974
_080B23C4: .4byte gUnknown_08A2EC88
_080B23C8: .4byte gUnknown_0202BCF0
_080B23CC:
	ldr r0, _080B2400  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _080B244C
	ldr r2, _080B2404  @ gUnknown_08A2E99C
	ldr r1, _080B2408  @ gUnknown_08A2E978
	ldr r0, _080B240C  @ gUnknown_08A2E974
	ldr r0, [r0]
	movs r3, #0x2a
	ldrsh r0, [r0, r3]
	adds r0, r0, r1
	ldrb r1, [r0]
	movs r0, #0x2c
	muls r0, r1, r0
	adds r2, #0x28
	adds r0, r0, r2
	ldr r1, [r0]
	cmp r1, #0
	beq _080B244C
	adds r0, r4, #0
	bl _call_via_r1
	b _080B244C
	.align 2, 0
_080B2400: .4byte gKeyStatusPtr
_080B2404: .4byte gUnknown_08A2E99C
_080B2408: .4byte gUnknown_08A2E978
_080B240C: .4byte gUnknown_08A2E974
_080B2410:
	ldr r0, _080B2428  @ gUnknown_08A2E974
	ldr r1, [r0]
	ldrh r0, [r1, #0x2e]
	subs r0, #4
	strh r0, [r1, #0x2e]
	ldrh r1, [r4, #0x30]
	movs r6, #0x30
	ldrsh r0, [r4, r6]
	cmp r0, #3
	bne _080B2448
	movs r0, #0
	b _080B244A
	.align 2, 0
_080B2428: .4byte gUnknown_08A2E974
_080B242C:
	ldr r0, _080B2444  @ gUnknown_08A2E974
	ldr r1, [r0]
	ldrh r0, [r1, #0x2e]
	adds r0, #4
	strh r0, [r1, #0x2e]
	ldrh r1, [r4, #0x30]
	movs r7, #0x30
	ldrsh r0, [r4, r7]
	cmp r0, #6
	bne _080B2448
	movs r0, #0
	b _080B244A
	.align 2, 0
_080B2444: .4byte gUnknown_08A2E974
_080B2448:
	adds r0, r1, #1
_080B244A:
	strh r0, [r4, #0x30]
_080B244C:
	ldr r0, _080B2460  @ gUnknown_08A2E974
	ldr r0, [r0]
	ldrh r2, [r0, #0x2e]
	movs r0, #1
	movs r1, #0
	bl BG_SetPosition
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2460: .4byte gUnknown_08A2E974

	THUMB_FUNC_START sub_80B2464
sub_80B2464: @ 0x080B2464
	push {r4, lr}
	adds r4, r0, #0
	bl Delete6CMenuScroll
	bl EndBG3Slider
	ldr r0, _080B248C  @ gUnknown_08A2ECA8
	bl Proc_DeleteAllWithScript
	ldr r0, _080B2490  @ gUnknown_08A2EC88
	bl Proc_DeleteAllWithScript
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	bne _080B2494
	movs r0, #1
	b _080B24A4
	.align 2, 0
_080B248C: .4byte gUnknown_08A2ECA8
_080B2490: .4byte gUnknown_08A2EC88
_080B2494:
	adds r0, r4, #0
	bl sub_8092134
	adds r0, r4, #0
	movs r1, #0
	bl Proc_GotoLabel
	movs r0, #0
_080B24A4:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B24AC
sub_80B24AC: @ 0x080B24AC
	ldr r0, _080B24BC  @ gUnknown_08A2E974
	ldr r1, [r0]
	adds r1, #0x37
	ldrb r0, [r1]
	movs r2, #1
	orrs r0, r2
	strb r0, [r1]
	bx lr
	.align 2, 0
_080B24BC: .4byte gUnknown_08A2E974

	THUMB_FUNC_START sub_80B24C0
sub_80B24C0: @ 0x080B24C0
	push {lr}
	ldr r0, _080B24D8  @ gUnknown_08A2E974
	ldr r1, [r0]
	adds r1, #0x37
	ldrb r0, [r1]
	movs r2, #2
	orrs r0, r2
	strb r0, [r1]
	bl SMS_ClearUsageTable
	pop {r0}
	bx r0
	.align 2, 0
_080B24D8: .4byte gUnknown_08A2E974

	THUMB_FUNC_START sub_80B24DC
sub_80B24DC: @ 0x080B24DC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r3, [r5, #0x5c]
	ldr r0, [r5, #0x60]
	adds r0, r3, r0
	cmp r3, r0
	bge _080B2508
	ldr r2, _080B2510  @ gUnknown_02014EF4
	ldr r1, _080B2514  @ gPaletteBuffer
	lsls r0, r3, #1
	adds r4, r0, r1
	adds r2, r0, r2
_080B24F4:
	ldrh r0, [r4]
	strh r0, [r2]
	adds r4, #2
	adds r2, #2
	adds r3, #1
	ldr r0, [r5, #0x5c]
	ldr r1, [r5, #0x60]
	adds r0, r0, r1
	cmp r3, r0
	blt _080B24F4
_080B2508:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B2510: .4byte gUnknown_02014EF4
_080B2514: .4byte gPaletteBuffer

	THUMB_FUNC_START nullsub_67
nullsub_67: @ 0x080B2518
	bx lr

	THUMB_FUNC_START sub_80B251C
sub_80B251C: @ 0x080B251C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	adds r0, #0x4e
	ldrh r0, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r9, r1
	mov r0, r8
	ldr r7, [r0, #0x5c]
	ldr r0, [r0, #0x60]
	adds r0, r7, r0
	cmp r7, r0
	bge _080B25D0
	movs r1, #0xf8
	lsls r1, r1, #7
	mov sl, r1
_080B254C:
	lsls r2, r7, #1
	mov ip, r2
	ldr r0, _080B2600  @ gUnknown_02014EF4
	add r0, ip
	ldrh r6, [r0]
	mov r1, sl
	ands r1, r6
	mov r0, r8
	ldr r4, [r0, #0x58]
	adds r0, r4, #0
	mov r2, sl
	ands r0, r2
	subs r0, r1, r0
	mov r1, r9
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _080B2572
	adds r0, #0xff
_080B2572:
	asrs r0, r0, #8
	adds r2, r0, r4
	mov r0, sl
	ands r2, r0
	movs r5, #0xf8
	lsls r5, r5, #2
	adds r1, r5, #0
	ands r1, r6
	adds r0, r4, #0
	ands r0, r5
	subs r0, r1, r0
	mov r1, r9
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _080B2594
	adds r0, #0xff
_080B2594:
	asrs r0, r0, #8
	adds r3, r0, r4
	ands r3, r5
	movs r5, #0x1f
	adds r1, r5, #0
	ands r1, r6
	adds r0, r4, #0
	ands r0, r5
	subs r0, r1, r0
	mov r1, r9
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _080B25B2
	adds r0, #0xff
_080B25B2:
	asrs r0, r0, #8
	adds r0, r0, r4
	ands r0, r5
	ldr r1, _080B2604  @ gPaletteBuffer
	add r1, ip
	orrs r2, r3
	orrs r2, r0
	strh r2, [r1]
	adds r7, #1
	mov r2, r8
	ldr r0, [r2, #0x5c]
	ldr r1, [r2, #0x60]
	adds r0, r0, r1
	cmp r7, r0
	blt _080B254C
_080B25D0:
	bl EnablePaletteSync
	mov r1, r8
	adds r1, #0x4e
	mov r0, r8
	adds r0, #0x64
	ldrh r0, [r0]
	ldrh r2, [r1]
	adds r0, r0, r2
	strh r0, [r1]
	mov r0, r9
	cmp r0, #0
	bne _080B25F0
	mov r0, r8
	bl Proc_ClearNativeCallback
_080B25F0:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2600: .4byte gUnknown_02014EF4
_080B2604: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80B2608
sub_80B2608: @ 0x080B2608
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	adds r0, #0x4e
	ldrh r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r9, r0
	cmp r0, #0
	beq _080B26C0
	mov r4, r8
	ldr r6, [r4, #0x5c]
	ldr r0, [r4, #0x60]
	adds r0, r6, r0
	cmp r6, r0
	bge _080B26C0
	movs r5, #0xf8
	lsls r5, r5, #7
	mov sl, r5
_080B263C:
	mov r0, r8
	ldr r5, [r0, #0x58]
	adds r2, r5, #0
	mov r1, sl
	ands r2, r1
	lsls r4, r6, #1
	mov ip, r4
	ldr r3, _080B2724  @ gUnknown_02014EF4
	add r3, ip
	ldrh r1, [r3]
	mov r0, sl
	ands r0, r1
	subs r0, r2, r0
	mov r1, r9
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _080B2662
	adds r0, #0xff
_080B2662:
	asrs r0, r0, #8
	ldrh r4, [r3]
	adds r2, r0, r4
	mov r0, sl
	ands r2, r0
	movs r7, #0xf8
	lsls r7, r7, #2
	adds r1, r5, #0
	ands r1, r7
	adds r0, r4, #0
	ands r0, r7
	subs r0, r1, r0
	mov r1, r9
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _080B2686
	adds r0, #0xff
_080B2686:
	asrs r0, r0, #8
	adds r3, r0, r4
	ands r3, r7
	movs r1, #0x1f
	ands r5, r1
	adds r0, r4, #0
	ands r0, r1
	subs r0, r5, r0
	mov r5, r9
	muls r5, r0, r5
	adds r0, r5, #0
	cmp r0, #0
	bge _080B26A2
	adds r0, #0xff
_080B26A2:
	asrs r0, r0, #8
	adds r0, r0, r4
	ands r0, r1
	ldr r1, _080B2728  @ gPaletteBuffer
	add r1, ip
	orrs r2, r3
	orrs r2, r0
	strh r2, [r1]
	adds r6, #1
	mov r1, r8
	ldr r0, [r1, #0x5c]
	ldr r1, [r1, #0x60]
	adds r0, r0, r1
	cmp r6, r0
	blt _080B263C
_080B26C0:
	bl EnablePaletteSync
	mov r1, r8
	adds r1, #0x4e
	mov r0, r8
	adds r0, #0x64
	ldrh r0, [r0]
	ldrh r2, [r1]
	adds r0, r0, r2
	strh r0, [r1]
	mov r4, r9
	cmp r4, #0
	bne _080B2714
	mov r5, r8
	ldr r6, [r5, #0x5c]
	ldr r0, [r5, #0x60]
	adds r0, r6, r0
	cmp r6, r0
	bge _080B270E
	ldr r0, _080B2728  @ gPaletteBuffer
	ldr r2, _080B2724  @ gUnknown_02014EF4
	lsls r1, r6, #1
	adds r3, r1, r0
	adds r2, r1, r2
_080B26F0:
	ldrh r0, [r2]
	strh r0, [r3]
	ldrh r0, [r2]
	strh r0, [r3]
	ldrh r0, [r2]
	strh r0, [r3]
	adds r3, #2
	adds r2, #2
	adds r6, #1
	mov r1, r8
	ldr r0, [r1, #0x5c]
	ldr r1, [r1, #0x60]
	adds r0, r0, r1
	cmp r6, r0
	blt _080B26F0
_080B270E:
	mov r0, r8
	bl Proc_ClearNativeCallback
_080B2714:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2724: .4byte gUnknown_02014EF4
_080B2728: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80B272C
sub_80B272C: @ 0x080B272C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	adds r1, r3, #0
	ldr r0, _080B2758  @ gUnknown_08A2EE90
	bl Proc_CreateBlockingChild
	adds r1, r0, #0
	adds r0, #0x64
	movs r2, #0
	strh r5, [r0]
	str r4, [r1, #0x58]
	subs r0, #0x16
	strh r2, [r0]
	cmp r6, #1
	beq _080B2768
	cmp r6, #1
	bgt _080B275C
	cmp r6, #0
	beq _080B2762
	b _080B2778
	.align 2, 0
_080B2758: .4byte gUnknown_08A2EE90
_080B275C:
	cmp r6, #2
	beq _080B2770
	b _080B2778
_080B2762:
	movs r0, #0x80
	str r0, [r1, #0x5c]
	b _080B2776
_080B2768:
	str r2, [r1, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #2
	b _080B2776
_080B2770:
	str r2, [r1, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #3
_080B2776:
	str r0, [r1, #0x60]
_080B2778:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B2780
sub_80B2780: @ 0x080B2780
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	adds r1, r3, #0
	ldr r0, _080B27B0  @ gUnknown_08A2EEC0
	bl Proc_CreateBlockingChild
	mov ip, r0
	adds r0, #0x64
	movs r1, #0
	strh r5, [r0]
	mov r0, ip
	str r4, [r0, #0x58]
	adds r0, #0x4e
	strh r1, [r0]
	cmp r6, #1
	beq _080B27C2
	cmp r6, #1
	bgt _080B27B4
	cmp r6, #0
	beq _080B27BA
	b _080B27DA
	.align 2, 0
_080B27B0: .4byte gUnknown_08A2EEC0
_080B27B4:
	cmp r6, #2
	beq _080B27CE
	b _080B27DA
_080B27BA:
	movs r0, #0x80
	mov r1, ip
	str r0, [r1, #0x5c]
	b _080B27D8
_080B27C2:
	mov r6, ip
	str r1, [r6, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [r6, #0x60]
	b _080B27DA
_080B27CE:
	mov r0, ip
	str r1, [r0, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #3
	mov r1, ip
_080B27D8:
	str r0, [r1, #0x60]
_080B27DA:
	mov r6, ip
	ldr r4, [r6, #0x5c]
	ldr r0, [r6, #0x60]
	adds r0, r4, r0
	cmp r4, r0
	bge _080B280A
	ldr r2, _080B2810  @ gUnknown_02014EF4
	ldr r1, _080B2814  @ gPaletteBuffer
	movs r5, #0
	lsls r0, r4, #1
	adds r3, r0, r1
	adds r2, r0, r2
_080B27F2:
	ldrh r0, [r3]
	strh r0, [r2]
	strh r5, [r3]
	adds r3, #2
	adds r2, #2
	adds r4, #1
	mov r1, ip
	ldr r0, [r1, #0x5c]
	ldr r1, [r1, #0x60]
	adds r0, r0, r1
	cmp r4, r0
	blt _080B27F2
_080B280A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B2810: .4byte gUnknown_02014EF4
_080B2814: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80B2818
sub_80B2818: @ 0x080B2818
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r4, _080B289C  @ gLCDControlBuffer
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	bl SetupBackgrounds
	bl NewEfxAnimeDrvProc
	bl sub_806E8F0
	movs r5, #0
	str r5, [r6, #0x38]
	str r5, [r6, #0x3c]
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	adds r0, r6, #0
	adds r0, #0x34
	strb r5, [r0]
	adds r1, r6, #0
	adds r1, #0x2c
	movs r0, #2
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x32
	strb r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B289C: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B28A0
sub_80B28A0: @ 0x080B28A0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080B28F8  @ gUnknown_08A20DA4
	bl Proc_Find
	bl Proc_Delete
	ldr r0, _080B28FC  @ gUnknown_08A20DCC
	bl Proc_Find
	bl Proc_Delete
	adds r0, r4, #0
	bl sub_80ADDD4
	movs r0, #1
	bl Sound_FadeOut800231C
	ldr r2, _080B2900  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	bl SetNextGameActionId
	adds r0, r4, #0
	movs r1, #5
	bl Proc_GotoLabel
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B28F8: .4byte gUnknown_08A20DA4
_080B28FC: .4byte gUnknown_08A20DCC
_080B2900: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B2904
sub_80B2904: @ 0x080B2904
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x2c
	ldrb r0, [r6]
	cmp r0, #2
	beq _080B2922
	cmp r0, #2
	bgt _080B291C
	cmp r0, #1
	beq _080B296A
	b _080B297E
_080B291C:
	cmp r0, #3
	beq _080B295C
	b _080B297E
_080B2922:
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
	adds r5, r4, #0
	adds r5, #0x34
	ldrb r1, [r5]
	bl sub_80B40EC
	str r0, [r4, #0x4c]
	cmp r0, #0
	bne _080B2948
	movs r0, #1
	bl SetNextGameActionId
	adds r0, r4, #0
	movs r1, #4
	bl Proc_GotoLabel
	b _080B297E
_080B2948:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	movs r0, #1
	strb r0, [r6]
	ldr r1, [r4, #0x4c]
	adds r0, r4, #0
	bl sub_80B2F3C
	b _080B297E
_080B295C:
	ldr r1, [r4, #0x4c]
	adds r0, r4, #0
	bl sub_80B3EDC
	movs r0, #1
	strb r0, [r6]
	b _080B297E
_080B296A:
	ldr r0, _080B2984  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #0xb
	ands r0, r1
	cmp r0, #0
	beq _080B297E
	adds r0, r4, #0
	bl sub_80B28A0
_080B297E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B2984: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_80B2988
sub_80B2988: @ 0x080B2988
	push {lr}
	ldr r0, _080B29AC  @ gUnknown_08A2EEF0
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _080B29B0
	adds r0, #0x33
	ldrb r0, [r0]
	adds r1, #0x34
	ldrb r1, [r1]
	bl sub_80B40EC
	cmp r0, #0
	bne _080B29B0
	movs r0, #1
	b _080B29B2
	.align 2, 0
_080B29AC: .4byte gUnknown_08A2EEF0
_080B29B0:
	movs r0, #0
_080B29B2:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B29B8
sub_80B29B8: @ 0x080B29B8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080B29D0  @ gUnknown_08A2EEF0
	bl Proc_Find
	cmp r0, #0
	beq _080B29CA
	adds r0, #0x2c
	strb r4, [r0]
_080B29CA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B29D0: .4byte gUnknown_08A2EEF0

	THUMB_FUNC_START sub_80B29D4
sub_80B29D4: @ 0x080B29D4
	push {lr}
	movs r0, #3
	bl Sound_FadeOut800231C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B29E0
sub_80B29E0: @ 0x080B29E0
	push {lr}
	bl sub_80ADDD4
	bl sub_805A9E0
	movs r0, #0
	bl sub_8009A84
	bl sub_806E920
	pop {r0}
	bx r0

	THUMB_FUNC_START Make6C_opinfo
Make6C_opinfo: @ 0x080B29F8
	push {r4, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080B2A10  @ gUnknown_08A2EEF0
	bl Proc_CreateBlockingChild
	adds r0, #0x33
	strb r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B2A10: .4byte gUnknown_08A2EEF0

	THUMB_FUNC_START sub_80B2A14
sub_80B2A14: @ 0x080B2A14
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r1
	str r2, [sp, #4]
	ldr r1, [sp, #0x30]
	ldr r2, [sp, #0x34]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r9, r0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov sl, r3
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	str r1, [sp, #8]
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp, #0xc]
	movs r4, #1
	ldr r2, _080B2A6C  @ gPaletteBuffer
	movs r0, #0x80
	lsls r0, r0, #1
	ldr r1, _080B2A70  @ 0x0000021E
	adds r5, r2, r1
	ldr r3, [sp, #0xc]
	adds r0, r3, r0
	mov r3, r9
	lsls r1, r3, #5
	lsls r0, r0, #1
	adds r0, r0, r2
	adds r3, r0, #2
	ldr r0, _080B2A74  @ 0x00000222
	adds r1, r1, r0
	adds r1, r1, r2
_080B2A60:
	ldr r2, [sp, #0xc]
	adds r0, r4, r2
	cmp r0, #0xf
	ble _080B2A78
	ldrh r0, [r5]
	b _080B2A7A
	.align 2, 0
_080B2A6C: .4byte gPaletteBuffer
_080B2A70: .4byte 0x0000021E
_080B2A74: .4byte 0x00000222
_080B2A78:
	ldrh r0, [r3]
_080B2A7A:
	strh r0, [r1]
	mov r7, r9
	adds r7, #1
	adds r1, #2
	adds r3, #2
	adds r4, #1
	cmp r4, #0xf
	ble _080B2A60
	bl EnablePaletteSync
	ldr r3, [sp, #8]
	cmp r3, #8
	bls _080B2B74
	mov r0, sl
	cmp r0, #7
	bhi _080B2A9E
	movs r1, #8
	mov sl, r1
_080B2A9E:
	ldr r4, _080B2B34  @ gSinLookup
	ldr r2, _080B2B38  @ gCosLookup
	movs r3, #0
	ldrsh r0, [r2, r3]
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	ldr r1, [sp, #8]
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r3, _080B2B38  @ gCosLookup
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r0, r0, #4
	ldr r1, [sp, #8]
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	mov r0, r9
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl WriteOAMRotScaleData
	ldr r2, [sp, #0xc]
	cmp r2, #0
	beq _080B2B44
	ldr r0, _080B2B3C  @ 0x000001FF
	mov r3, r8
	ands r3, r0
	mov r8, r3
	mov r2, r9
	lsls r1, r2, #9
	add r1, r8
	ldr r3, [sp, #4]
	ands r3, r0
	str r3, [sp, #4]
	ldr r3, _080B2B40  @ gUnknown_08A2EF48
	lsls r0, r2, #1
	movs r2, #0xf
	ands r7, r2
	lsls r2, r7, #0xc
	adds r0, r0, r2
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #4
	ldr r2, [sp, #4]
	bl RegisterObjectAttributes
	b _080B2B74
	.align 2, 0
_080B2B34: .4byte gSinLookup
_080B2B38: .4byte gCosLookup
_080B2B3C: .4byte 0x000001FF
_080B2B40: .4byte gUnknown_08A2EF48
_080B2B44:
	ldr r0, _080B2B84  @ 0x000001FF
	mov r3, r8
	ands r3, r0
	mov r8, r3
	mov r2, r9
	lsls r1, r2, #9
	add r1, r8
	ldr r3, [sp, #4]
	ands r3, r0
	str r3, [sp, #4]
	ldr r3, _080B2B88  @ gUnknown_08A2EF48
	lsls r0, r2, #1
	movs r2, #0xf
	ands r7, r2
	lsls r2, r7, #0xc
	adds r0, r0, r2
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #4
	ldr r2, [sp, #4]
	bl RegisterObjectAttributes
_080B2B74:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2B84: .4byte 0x000001FF
_080B2B88: .4byte gUnknown_08A2EF48

	THUMB_FUNC_START sub_80B2B8C
sub_80B2B8C: @ 0x080B2B8C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r7, r0, #0
	ldr r1, _080B2D8C  @ gUnknown_08205E94
	add r0, sp, #4
	movs r2, #0x18
	bl memcpy
	add r0, sp, #4
	bl SetupBackgrounds
	ldr r3, _080B2D90  @ gLCDControlBuffer
	ldrb r1, [r3]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r3]
	ldrb r0, [r3, #0xc]
	movs r2, #3
	orrs r0, r2
	strb r0, [r3, #0xc]
	ldrb r0, [r3, #0x10]
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r1, [r3, #0x14]
	movs r0, #4
	negs r0, r0
	ands r0, r1
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	orrs r0, r2
	strb r0, [r3, #0x18]
	ldrb r0, [r3, #1]
	movs r1, #2
	negs r1, r1
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	movs r0, #4
	orrs r1, r0
	movs r0, #9
	negs r0, r0
	ands r1, r0
	movs r0, #0x10
	orrs r1, r0
	ldrb r2, [r3, #0x15]
	movs r0, #0x3f
	ands r0, r2
	movs r2, #0x40
	orrs r0, r2
	movs r2, #0x21
	negs r2, r2
	ands r0, r2
	strb r0, [r3, #0x15]
	ands r1, r2
	movs r0, #0x41
	negs r0, r0
	ands r1, r0
	movs r0, #0x7f
	ands r1, r0
	strb r1, [r3, #1]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	strh r4, [r7, #0x2a]
	ldr r0, _080B2D94  @ gUnknown_03001D50
	str r0, [r7, #0x34]
	movs r2, #0
	movs r1, #0x13
	adds r0, #0x4c
_080B2C48:
	str r2, [r0]
	subs r0, #4
	subs r1, #1
	cmp r1, #0
	bge _080B2C48
	movs r0, #0
	str r0, [r7, #0x38]
	ldr r0, _080B2D98  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B2D9C  @ gUnknown_08A37300
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, [r7, #0x40]
	ldrb r0, [r0, #5]
	movs r1, #0
	bl sub_80B369C
	adds r4, r0, #0
	movs r6, #0
	bl strlen
	adds r1, r7, #0
	adds r1, #0x2e
	strb r0, [r1]
	movs r0, #0
	ldrsb r0, [r4, r0]
	mov sl, r1
	cmp r0, #0
	beq _080B2CD2
	ldr r0, _080B2DA0  @ gUnknown_08A2F2C0
	mov r8, r0
	movs r1, #0xb0
	lsls r1, r1, #1
	add r1, r8
	mov r9, r1
	ldr r5, _080B2DA4  @ gUnknown_02020188
_080B2C9A:
	movs r0, #0
	ldrsb r0, [r4, r0]
	lsls r0, r0, #2
	add r0, r8
	ldr r0, [r0]
	cmp r0, #0
	bne _080B2CAC
	mov r1, r9
	ldr r0, [r1]
_080B2CAC:
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B2DA8  @ 0x06010000
	adds r1, r6, r0
	adds r0, r5, #0
	movs r2, #2
	movs r3, #4
	bl CopyTileGfxForObj
	adds r4, #1
	adds r0, r6, #0
	adds r0, #0x40
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _080B2C9A
_080B2CD2:
	ldr r4, _080B2DAC  @ gUnknown_08A30780
	movs r1, #0xf0
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r1, #0xf8
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080B2DB0  @ gUnknown_08A301B0
	ldr r1, _080B2DB4  @ 0x06016000
	bl CopyDataWithPossibleUncomp
	mov r1, sl
	ldrb r0, [r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	movs r0, #0xf0
	subs r0, r0, r1
	asrs r0, r0, #1
	subs r0, #8
	strh r0, [r7, #0x2c]
	adds r0, r7, #0
	movs r1, #0
	bl sub_80B305C
	ldr r1, [r7, #0x34]
	str r0, [r1]
	ldr r0, _080B2DB8  @ gUnknown_08A360E8
	movs r1, #0xc0
	lsls r1, r1, #0x13
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B2DBC  @ gUnknown_08A36284
	ldr r4, _080B2DA4  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B2DC0  @ gUnknown_02022E68
	movs r2, #0x80
	lsls r2, r2, #7
	adds r1, r4, #0
	bl CallARM_FillTileRect
	ldr r0, _080B2DC4  @ gUnknown_08A35A3C
	ldr r1, _080B2DC8  @ 0x06000800
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B2DCC  @ gUnknown_08A35FD0
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B2DD0  @ gBG1TilemapBuffer
	ldr r2, _080B2DD4  @ 0x00005040
	adds r1, r4, #0
	bl CallARM_FillTileRect
	ldr r0, _080B2DD8  @ gUnknown_08A360C8
	movs r1, #0xa0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080B2DDC  @ gUnknown_08B17B64
	ldr r1, _080B2DE0  @ 0x06008000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B2DE4  @ gBG2TilemapBuffer
	ldr r1, _080B2DE8  @ gUnknown_08B18D68
	movs r2, #0
	movs r3, #5
	bl sub_800154C
	ldr r0, _080B2DEC  @ gUnknown_08B18ED4
	movs r1, #0
	movs r2, #0x60
	bl CopyToPaletteBuffer
	movs r0, #4
	bl BG_EnableSyncByMask
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B2D8C: .4byte gUnknown_08205E94
_080B2D90: .4byte gLCDControlBuffer
_080B2D94: .4byte gUnknown_03001D50
_080B2D98: .4byte gBG0TilemapBuffer
_080B2D9C: .4byte gUnknown_08A37300
_080B2DA0: .4byte gUnknown_08A2F2C0
_080B2DA4: .4byte gUnknown_02020188
_080B2DA8: .4byte 0x06010000
_080B2DAC: .4byte gUnknown_08A30780
_080B2DB0: .4byte gUnknown_08A301B0
_080B2DB4: .4byte 0x06016000
_080B2DB8: .4byte gUnknown_08A360E8
_080B2DBC: .4byte gUnknown_08A36284
_080B2DC0: .4byte gUnknown_02022E68
_080B2DC4: .4byte gUnknown_08A35A3C
_080B2DC8: .4byte 0x06000800
_080B2DCC: .4byte gUnknown_08A35FD0
_080B2DD0: .4byte gBG1TilemapBuffer
_080B2DD4: .4byte 0x00005040
_080B2DD8: .4byte gUnknown_08A360C8
_080B2DDC: .4byte gUnknown_08B17B64
_080B2DE0: .4byte 0x06008000
_080B2DE4: .4byte gBG2TilemapBuffer
_080B2DE8: .4byte gUnknown_08B18D68
_080B2DEC: .4byte gUnknown_08B18ED4

	THUMB_FUNC_START sub_80B2DF0
sub_80B2DF0: @ 0x080B2DF0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	asrs r0, r0, #1
	movs r3, #0x10
	subs r3, r3, r0
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	bl sub_8001F48
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x20
	bne _080B2E28
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080B2E28:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B2E30
sub_80B2E30: @ 0x080B2E30
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x3c
	bne _080B2E4E
	ldr r0, [r4, #0x40]
	ldrb r1, [r0, #5]
	adds r0, r4, #0
	bl sub_80B325C
	str r0, [r4, #0x38]
	ldr r0, _080B2E60  @ gUnknown_08A2F038
	adds r1, r4, #0
	bl Proc_Create
_080B2E4E:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x5f
	bls _080B2E64
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	movs r0, #0
	b _080B2E9E
	.align 2, 0
_080B2E60: .4byte gUnknown_08A2F038
_080B2E64:
	cmp r0, #0xf
	bls _080B2E9A
	ldrh r0, [r4, #0x2a]
	adds r1, r0, #0
	subs r1, #0x10
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080B2E9A
	lsrs r0, r1, #0x1f
	adds r0, r1, r0
	asrs r5, r0, #1
	adds r1, r5, #1
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r1, r0
	bge _080B2E9A
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r0, r4, #0
	bl sub_80B305C
	ldr r2, [r4, #0x34]
	lsls r1, r5, #2
	adds r1, r1, r2
	str r0, [r1, #4]
_080B2E9A:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
_080B2E9E:
	strh r0, [r4, #0x2a]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B2EA8
sub_80B2EA8: @ 0x080B2EA8
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x14
	bne _080B2EBA
	ldr r0, [r4, #0x38]
	movs r1, #4
	bl Proc_GotoLabel
_080B2EBA:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x4f
	bls _080B2ECA
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	movs r0, #0
	b _080B2F00
_080B2ECA:
	ldrh r5, [r4, #0x2a]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _080B2EFC
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r4, #0
	adds r2, #0x2e
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldrb r2, [r2]
	cmp r1, r2
	bcs _080B2EFC
	ldr r0, [r4, #0x34]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	bl Proc_ClearNativeCallback
_080B2EFC:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
_080B2F00:
	strh r0, [r4, #0x2a]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B2F08
sub_80B2F08: @ 0x080B2F08
	ldr r2, _080B2F28  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_080B2F28: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B2F2C
sub_80B2F2C: @ 0x080B2F2C
	push {lr}
	bl sub_80ADDD4
	movs r0, #3
	bl sub_80B29B8
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B2F3C
sub_80B2F3C: @ 0x080B2F3C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080B2F54  @ gUnknown_08A2EF50
	adds r1, r4, #0
	bl Proc_Create
	str r4, [r0, #0x3c]
	str r5, [r0, #0x40]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080B2F54: .4byte gUnknown_08A2EF50

	THUMB_FUNC_START sub_80B2F58
sub_80B2F58: @ 0x080B2F58
	movs r1, #0
	strh r1, [r0, #0x2a]
	ldr r3, [r0, #0x14]
	adds r1, r0, #0
	adds r1, #0x2c
	ldrb r2, [r1]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #2
	ldrh r3, [r3, #0x2c]
	adds r1, r1, r3
	strh r1, [r0, #0x2e]
	bx lr

	THUMB_FUNC_START sub_80B2F74
sub_80B2F74: @ 0x080B2F74
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r4, r0, #0
	ldrh r3, [r4, #0x2a]
	adds r1, r3, #0
	asrs r1, r1, #4
	movs r0, #0x10
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r5, [r1]
	movs r2, #0x2e
	ldrsh r1, [r4, r2]
	subs r2, r1, r0
	movs r6, #0x80
	lsls r6, r6, #1
	str r6, [sp]
	ldrh r0, [r4, #0x2a]
	asrs r0, r0, #4
	movs r1, #0x10
	subs r1, r1, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	str r1, [sp, #4]
	adds r0, r5, #0
	adds r1, r2, #0
	movs r2, #0x18
	bl sub_80B2A14
	ldrh r0, [r4, #0x2a]
	adds r0, #0x10
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r6
	bne _080B2FC8
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080B2FC8:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B2FD0
sub_80B2FD0: @ 0x080B2FD0
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	movs r2, #0x2e
	ldrsh r1, [r4, r2]
	movs r3, #0x80
	lsls r3, r3, #1
	str r3, [sp]
	movs r5, #0
	str r5, [sp, #4]
	movs r2, #0x18
	bl sub_80B2A14
	strh r5, [r4, #0x2a]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B2FF8
sub_80B2FF8: @ 0x080B2FF8
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r0, r5
	subs r0, r5, r0
	adds r7, r4, #0
	adds r7, #0x2c
	ldrb r2, [r7]
	movs r6, #0x2e
	ldrsh r3, [r4, r6]
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp]
	ldrh r0, [r4, #0x2a]
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #4]
	adds r0, r2, #0
	adds r1, r3, #0
	movs r2, #0x18
	adds r3, r6, #0
	bl sub_80B2A14
	ldrh r0, [r4, #0x2a]
	cmp r0, r5
	bne _080B304C
	ldr r1, [r4, #0x14]
	ldrb r0, [r7]
	ldr r1, [r1, #0x34]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r1, #0
	str r1, [r0]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080B304C:
	ldrh r0, [r4, #0x2a]
	adds r0, #8
	strh r0, [r4, #0x2a]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B305C
sub_80B305C: @ 0x080B305C
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080B3078  @ gUnknown_08A2EFC0
	adds r1, r2, #0
	bl Proc_Create
	adds r1, r0, #0
	adds r1, #0x2c
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080B3078: .4byte gUnknown_08A2EFC0

	THUMB_FUNC_START sub_80B307C
sub_80B307C: @ 0x080B307C
	push {lr}
	bl EnablePaletteSync
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B3088
sub_80B3088: @ 0x080B3088
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	movs r0, #0
	strh r0, [r3, #0x2a]
	ldr r0, _080B30F8  @ gPaletteBuffer
	movs r2, #0
	adds r1, r0, #0
	adds r1, #0x80
	movs r4, #0xf8
	lsls r4, r4, #2
	adds r0, r0, r4
	movs r4, #0xf
_080B30A0:
	strh r2, [r0]
	strh r2, [r1]
	adds r1, #2
	adds r0, #2
	subs r4, #1
	cmp r4, #0
	bge _080B30A0
	adds r0, r3, #0
	adds r0, #0x2e
	movs r1, #0
	strb r1, [r0]
	adds r2, r3, #0
	adds r2, #0x2d
	strb r1, [r2]
	movs r4, #0
	adds r7, r3, #0
	adds r7, #0x2c
	adds r6, r0, #0
	adds r5, r2, #0
_080B30C6:
	ldrb r0, [r7]
	bl GetClassData
	adds r0, #0x2c
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0
	beq _080B30E6
	movs r0, #1
	lsls r0, r4
	ldrb r1, [r6]
	orrs r0, r1
	strb r0, [r6]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_080B30E6:
	adds r4, #1
	cmp r4, #7
	ble _080B30C6
	bl EnablePaletteSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B30F8: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80B30FC
sub_80B30FC: @ 0x080B30FC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov ip, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r8, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov r9, r2
	movs r4, #0
	ldr r7, _080B31A4  @ gPaletteBuffer
	adds r5, r7, #0
	adds r5, #0x80
	lsls r2, r0, #0x10
	movs r0, #0xf8
	lsls r0, r0, #2
	adds r3, r7, r0
_080B3128:
	mov r1, ip
	adds r0, r1, r4
	movs r1, #0xf
	cmp r0, #0xf
	bgt _080B3134
	lsrs r1, r2, #0x10
_080B3134:
	movs r6, #0xf0
	lsls r6, r6, #1
	adds r0, r1, r6
	lsls r0, r0, #1
	adds r0, r0, r7
	ldrh r1, [r0]
	strh r1, [r3]
	ldrh r0, [r0]
	strh r0, [r5]
	adds r5, #2
	movs r0, #0x80
	lsls r0, r0, #9
	adds r2, r2, r0
	adds r3, #2
	adds r4, #1
	cmp r4, #0xf
	ble _080B3128
	bl EnablePaletteSync
	movs r0, #8
	mov r1, r8
	subs r0, r0, r1
	lsls r0, r0, #4
	movs r4, #0
	ldr r6, _080B31A8  @ gUnknown_08A2F1D0
	adds r5, r0, #0
	subs r5, #8
_080B316A:
	mov r0, r9
	asrs r0, r4
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080B318C
	ldr r1, _080B31AC  @ 0x000001FF
	ands r1, r5
	ldr r3, [r6]
	movs r0, #0xf0
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #4
	movs r2, #0x50
	bl RegisterObjectAttributes
	adds r5, #0x20
_080B318C:
	adds r6, #4
	adds r4, #1
	cmp r4, #7
	ble _080B316A
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B31A4: .4byte gPaletteBuffer
_080B31A8: .4byte gUnknown_08A2F1D0
_080B31AC: .4byte 0x000001FF

	THUMB_FUNC_START sub_80B31B0
sub_80B31B0: @ 0x080B31B0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0x20
	bls _080B31CC
	movs r5, #0
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080B31D6
_080B31CC:
	lsrs r1, r1, #0x11
	movs r0, #0x10
	subs r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_080B31D6:
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	adds r0, #1
	ldrb r2, [r0]
	adds r0, r5, #0
	bl sub_80B30FC
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B31EC
sub_80B31EC: @ 0x080B31EC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	adds r0, #1
	ldrb r2, [r0]
	movs r0, #0
	bl sub_80B30FC
	movs r0, #0
	strh r0, [r4, #0x2a]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B3208
sub_80B3208: @ 0x080B3208
	push {lr}
	adds r3, r0, #0
	ldrh r0, [r3, #0x2a]
	adds r0, #1
	strh r0, [r3, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x11
	cmp r0, #0x10
	bls _080B3244
	ldr r2, _080B3240  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	adds r0, r3, #0
	bl Proc_ClearNativeCallback
	b _080B3258
	.align 2, 0
_080B3240: .4byte gLCDControlBuffer
_080B3244:
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r3, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r3, #0
	adds r2, #0x2e
	ldrb r2, [r2]
	bl sub_80B30FC
_080B3258:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B325C
sub_80B325C: @ 0x080B325C
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080B3278  @ gUnknown_08A2EFF8
	adds r1, r2, #0
	bl Proc_Create
	adds r1, r0, #0
	adds r1, #0x2c
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080B3278: .4byte gUnknown_08A2EFF8

	THUMB_FUNC_START sub_80B327C
sub_80B327C: @ 0x080B327C
	adds r1, r0, #0
	adds r1, #0x4c
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x4e
	strh r2, [r0]
	ldr r2, _080B32A8  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_080B32A8: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B32AC
sub_80B32AC: @ 0x080B32AC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r9, r0
	mov r5, r9
	adds r5, #0x4c
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #0x1d
	bgt _080B32E6
	adds r3, r0, #0
	movs r4, #0x1e
	str r4, [sp]
	movs r0, #5
	movs r1, #4
	movs r2, #0x32
	bl sub_8012DCC
	adds r7, r0, #0
	movs r0, #0
	ldrsh r3, [r5, r0]
	str r4, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x10
	b _080B330A
_080B32E6:
	movs r1, #0
	ldrsh r3, [r5, r1]
	subs r3, #0x1e
	movs r4, #0x1e
	str r4, [sp]
	movs r0, #0
	movs r1, #0x32
	movs r2, #0x64
	bl sub_8012DCC
	adds r7, r0, #0
	movs r2, #0
	ldrsh r3, [r5, r2]
	subs r3, #0x1e
	str r4, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
_080B330A:
	bl sub_8012DCC
	mov sl, r0
	cmp r7, #0x31
	ble _080B3318
	movs r0, #0x64
	subs r7, r0, r7
_080B3318:
	mov r6, r9
	adds r6, #0x4c
	movs r0, #0
	ldrsh r3, [r6, r0]
	movs r4, #0x3c
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0xd6
	bl sub_8012DCC
	adds r5, r0, #0
	movs r1, #0
	ldrsh r3, [r6, r1]
	str r4, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x80
	bl sub_8012DCC
	adds r4, r0, #0
	movs r2, #0x4e
	add r2, r9
	mov r8, r2
	movs r0, #0
	ldrsh r1, [r2, r0]
	lsls r0, r7, #2
	adds r0, r0, r7
	adds r0, #0x80
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	str r0, [sp, #4]
	movs r0, #2
	movs r2, #0
	movs r3, #0
	bl sub_80ADDFC
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #2
	adds r1, r2, #0
	bl sub_80ADE90
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	movs r0, #0x48
	str r0, [sp]
	movs r0, #2
	adds r1, r5, #0
	adds r2, r4, #0
	movs r3, #0x50
	bl sub_80ADEE0
	mov r1, r8
	ldrh r0, [r1]
	subs r0, #0x40
	strh r0, [r1]
	mov r2, sl
	lsls r1, r2, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	ldrh r0, [r6]
	adds r0, #1
	strh r0, [r6]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3b
	ble _080B33D0
	mov r0, r9
	bl Proc_ClearNativeCallback
	ldr r2, _080B33E0  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
_080B33D0:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B33E0: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B33E4
sub_80B33E4: @ 0x080B33E4
	adds r2, r0, #0
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	adds r0, #0x18
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80B33FC
sub_80B33FC: @ 0x080B33FC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	adds r6, r1, #0
	mov r8, r3
	adds r4, #0x4c
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r5, #0x46
	str r5, [sp]
	movs r0, #5
	movs r1, #0x78
	bl sub_8012DCC
	adds r7, r0, #0
	movs r0, #0
	ldrsh r3, [r4, r0]
	str r5, [sp]
	movs r0, #5
	movs r1, #0x50
	mov r2, r8
	bl sub_8012DCC
	mov sl, r0
	adds r1, r7, #0
	subs r1, #8
	ldr r4, _080B3490  @ 0x000001FF
	ands r1, r4
	lsls r6, r6, #9
	orrs r1, r6
	mov r2, sl
	subs r2, #8
	ands r2, r4
	movs r0, #0x80
	lsls r0, r0, #1
	mov r8, r0
	orrs r2, r0
	ldr r0, _080B3494  @ gUnknown_08A2F1F0
	mov r9, r0
	movs r5, #0xf0
	lsls r5, r5, #8
	str r5, [sp]
	movs r0, #4
	mov r3, r9
	bl RegisterObjectAttributes
	movs r1, #0xe8
	subs r1, r1, r7
	ands r1, r4
	orrs r1, r6
	movs r2, #0x98
	mov r0, sl
	subs r2, r2, r0
	ands r2, r4
	mov r0, r8
	orrs r2, r0
	str r5, [sp]
	movs r0, #4
	mov r3, r9
	bl RegisterObjectAttributes
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B3490: .4byte 0x000001FF
_080B3494: .4byte gUnknown_08A2F1F0

	THUMB_FUNC_START sub_80B3498
sub_80B3498: @ 0x080B3498
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	movs r0, #0x64
	add r0, sl
	mov r9, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0x46
	bgt _080B3534
	movs r1, #0x90
	lsls r1, r1, #1
	mov r2, r9
	movs r0, #0
	ldrsh r3, [r2, r0]
	movs r0, #0x46
	str r0, [sp]
	movs r0, #4
	movs r2, #0x10
	bl sub_8012DCC
	adds r7, r0, #0
	ldr r4, _080B3698  @ gSinLookup
	movs r1, #0x80
	adds r1, r1, r4
	mov r8, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r8
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0x15
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl WriteOAMRotScaleData
	mov r1, r9
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
_080B3534:
	mov r0, sl
	movs r1, #0x15
	movs r2, #0xd7
	movs r3, #0x11
	bl sub_80B33FC
	movs r2, #0x66
	add r2, sl
	mov r9, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	cmp r0, #0x46
	bgt _080B35CA
	movs r1, #0x90
	lsls r1, r1, #1
	adds r3, r0, #0
	movs r0, #0x46
	str r0, [sp]
	movs r0, #0
	movs r2, #0x10
	bl sub_8012DCC
	adds r7, r0, #0
	ldr r4, _080B3698  @ gSinLookup
	movs r1, #0x80
	adds r1, r1, r4
	mov r8, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r8
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0x16
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl WriteOAMRotScaleData
	mov r1, r9
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
_080B35CA:
	mov r0, sl
	movs r1, #0x16
	movs r2, #0xc0
	movs r3, #0x20
	bl sub_80B33FC
	movs r2, #0x68
	add r2, sl
	mov r9, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	cmp r0, #0x46
	bgt _080B3660
	movs r1, #0x90
	lsls r1, r1, #1
	adds r3, r0, #0
	movs r0, #0x46
	str r0, [sp]
	movs r0, #1
	movs r2, #0x10
	bl sub_8012DCC
	adds r7, r0, #0
	ldr r4, _080B3698  @ gSinLookup
	movs r1, #0x80
	adds r1, r1, r4
	mov r8, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r8
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0x17
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl WriteOAMRotScaleData
	mov r1, r9
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
_080B3660:
	mov r0, sl
	movs r1, #0x17
	movs r2, #0xa9
	movs r3, #0x2f
	bl sub_80B33FC
	mov r0, sl
	adds r0, #0x4c
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	mov r2, r9
	movs r1, #0
	ldrsh r0, [r2, r1]
	cmp r0, #0x46
	ble _080B3686
	mov r0, sl
	bl Proc_ClearNativeCallback
_080B3686:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B3698: .4byte gSinLookup

	THUMB_FUNC_START sub_80B369C
sub_80B369C: @ 0x080B369C
	push {r4, lr}
	adds r4, r1, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl GetClassData
	cmp r4, #0
	bne _080B36B6
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r4, r0, #0
	b _080B36BE
_080B36B6:
	ldrh r0, [r0]
	adds r1, r4, #0
	bl GetStringFromIndexInBuffer
_080B36BE:
	ldr r1, _080B36D8  @ gUnknown_08205ED0
	adds r0, r4, #0
	bl strstr
	cmp r0, #0
	beq _080B36D0
	ldr r1, _080B36DC  @ gUnknown_08205ED4
	bl sprintf
_080B36D0:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080B36D8: .4byte gUnknown_08205ED0
_080B36DC: .4byte gUnknown_08205ED4

	THUMB_FUNC_START sub_80B36E0
sub_80B36E0: @ 0x080B36E0
	push {lr}
	ldr r0, _080B3708  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x6d
	bhi _080B3718
	ldr r3, _080B370C  @ 0x04000008
	ldrh r2, [r3]
	ldr r1, _080B3710  @ 0x0000FFFC
	adds r0, r1, #0
	ands r0, r2
	adds r0, #2
	strh r0, [r3]
	ldr r2, _080B3714  @ 0x0400000C
	ldrh r0, [r2]
	ands r1, r0
	adds r1, #2
	b _080B372E
	.align 2, 0
_080B3708: .4byte 0x04000006
_080B370C: .4byte 0x04000008
_080B3710: .4byte 0x0000FFFC
_080B3714: .4byte 0x0400000C
_080B3718:
	ldr r3, _080B3734  @ 0x04000008
	ldrh r2, [r3]
	ldr r1, _080B3738  @ 0x0000FFFC
	adds r0, r1, #0
	ands r0, r2
	adds r0, #1
	strh r0, [r3]
	ldr r2, _080B373C  @ 0x0400000C
	ldrh r0, [r2]
	ands r1, r0
	adds r1, #1
_080B372E:
	strh r1, [r2]
	pop {r0}
	bx r0
	.align 2, 0
_080B3734: .4byte 0x04000008
_080B3738: .4byte 0x0000FFFC
_080B373C: .4byte 0x0400000C

	THUMB_FUNC_START sub_80B3740
sub_80B3740: @ 0x080B3740
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	movs r0, #1
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	ldr r0, _080B37F8  @ gLCDControlBuffer
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r6, #0x20
	orrs r0, r6
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2d
	strb r4, [r0]
	adds r0, #4
	strb r4, [r0]
	adds r1, #0x2c
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	movs r2, #0x34
	add r2, ip
	mov r8, r2
	ldrb r1, [r2]
	movs r2, #1
	orrs r1, r2
	movs r0, #2
	orrs r1, r0
	movs r5, #4
	orrs r1, r5
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	mov r7, ip
	adds r7, #0x36
	ldrb r0, [r7]
	orrs r0, r2
	movs r2, #3
	negs r2, r2
	ands r0, r2
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	orrs r1, r6
	mov r2, r8
	strb r1, [r2]
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	strb r0, [r7]
	mov r1, ip
	adds r1, #0x3d
	ldrb r0, [r1]
	orrs r0, r6
	strb r0, [r1]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B37F8: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B37FC
sub_80B37FC: @ 0x080B37FC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x3c
	mov r9, r0
	movs r0, #0
	str r0, [sp, #0x34]
	add r1, sp, #4
	ldr r0, _080B3830  @ gUnknown_08205EDC
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	mov r1, r9
	ldr r0, [r1, #0x34]
	ldr r0, [r0, #0x10]
	str r0, [r1, #0x38]
	movs r7, #4
	b _080B3836
	.align 2, 0
_080B3830: .4byte gUnknown_08205EDC
_080B3834:
	adds r7, #1
_080B3836:
	cmp r7, #7
	bgt _080B3852
	mov r2, r9
	ldr r0, [r2, #0x34]
	ldrb r0, [r0, #5]
	bl GetClassData
	adds r0, #0x2c
	adds r0, r0, r7
	ldrb r0, [r0]
	cmp r0, #0
	beq _080B3834
	movs r3, #1
	str r3, [sp, #0x34]
_080B3852:
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	mov r4, r9
	strh r0, [r4, #0x2a]
	strh r0, [r4, #0x2c]
	mov r1, r9
	adds r1, #0x46
	movs r0, #0xfa
	strb r0, [r1]
	ldr r6, _080B3A28  @ gBG0TilemapBuffer
	adds r0, r6, #0
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B3A2C  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B3A30  @ gBG2TilemapBuffer
	mov r8, r0
	movs r1, #0
	bl BG_Fill
	ldr r4, _080B3A34  @ gLCDControlBuffer
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	bl SetDefaultColorEffects
	bl sub_8003D20
	bl Font_InitForUIDefault
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	movs r3, #2
	orrs r0, r3
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	orrs r0, r3
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	orrs r1, r3
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r4, _080B3A38  @ gUnknown_08A30E2C
	movs r0, #3
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r5, #0xc0
	lsls r5, r5, #0x13
	adds r1, r1, r5
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B3A3C  @ gUnknown_08A3593C
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0xe0
	bl CopyToPaletteBuffer
	ldr r0, _080B3A40  @ gBG3TilemapBuffer
	ldr r1, _080B3A44  @ gUnknown_08A35488
	movs r2, #0xe0
	lsls r2, r2, #7
	bl CallARM_FillTileRect
	ldr r4, _080B3A48  @ gUnknown_08A30800
	movs r0, #2
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B3A4C  @ gUiFramePaletteA
	movs r1, #0xc0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r1, _080B3A50  @ gUnknown_08A30978
	movs r2, #0xc0
	lsls r2, r2, #7
	mov r0, r8
	bl CallARM_FillTileRect
	movs r0, #0xf
	bl BG_EnableSyncByMask
	adds r0, r6, #0
	movs r1, #0
	bl BG_Fill
	mov r1, r9
	ldr r0, [r1, #0x34]
	ldrb r0, [r0, #5]
	bl GetClassData
	ldrb r0, [r0, #0xb]
	mov r4, r9
	adds r4, #0x40
	strb r0, [r4]
	mov r2, r9
	ldr r0, [r2, #0x34]
	ldrb r0, [r0, #5]
	bl GetClassData
	ldrb r0, [r0, #0xc]
	mov r1, r9
	adds r1, #0x41
	strb r0, [r1]
	mov r3, r9
	ldr r0, [r3, #0x34]
	ldrb r0, [r0, #5]
	bl GetClassData
	ldrb r0, [r0, #0xd]
	mov r1, r9
	adds r1, #0x42
	strb r0, [r1]
	mov r1, r9
	ldr r0, [r1, #0x34]
	ldrb r0, [r0, #5]
	bl GetClassData
	ldrb r0, [r0, #0xe]
	mov r1, r9
	adds r1, #0x43
	strb r0, [r1]
	mov r2, r9
	ldr r0, [r2, #0x34]
	ldrb r0, [r0, #5]
	bl GetClassData
	ldrb r1, [r0, #0xf]
	mov r0, r9
	adds r0, #0x44
	strb r1, [r0]
	mov r3, r9
	ldr r0, [r3, #0x34]
	ldrb r0, [r0, #5]
	bl GetClassData
	ldrb r0, [r0, #0x10]
	mov r1, r9
	adds r1, #0x45
	strb r0, [r1]
	movs r7, #0
	str r4, [sp, #0x38]
	movs r4, #0x4a
	adds r4, r4, r6
	mov sl, r4
	adds r6, #0x42
	mov r8, r6
	movs r6, #0
	movs r4, #0
_080B39EC:
	ldr r0, _080B3A54  @ gUnknown_0201FB28
	adds r5, r4, r0
	adds r0, r5, #0
	movs r1, #3
	bl Text_Init
	adds r0, r5, #0
	bl Text_Clear
	adds r0, r5, #0
	movs r1, #3
	bl Text_SetColorId
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetXCursor
	ldr r0, [sp, #0x34]
	cmp r0, #0
	beq _080B3A58
	add r0, sp, #0x1c
	adds r0, r0, r6
	ldr r0, [r0]
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendString
	b _080B3A6C
	.align 2, 0
_080B3A28: .4byte gBG0TilemapBuffer
_080B3A2C: .4byte gBG1TilemapBuffer
_080B3A30: .4byte gBG2TilemapBuffer
_080B3A34: .4byte gLCDControlBuffer
_080B3A38: .4byte gUnknown_08A30E2C
_080B3A3C: .4byte gUnknown_08A3593C
_080B3A40: .4byte gBG3TilemapBuffer
_080B3A44: .4byte gUnknown_08A35488
_080B3A48: .4byte gUnknown_08A30800
_080B3A4C: .4byte gUiFramePaletteA
_080B3A50: .4byte gUnknown_08A30978
_080B3A54: .4byte gUnknown_0201FB28
_080B3A58:
	mov r0, sp
	adds r0, r0, r6
	adds r0, #4
	ldr r0, [r0]
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_AppendString
_080B3A6C:
	ldr r0, _080B3BD0  @ gUnknown_0201FB28
	adds r0, r4, r0
	mov r1, r8
	bl Text_Draw
	ldr r1, [sp, #0x38]
	adds r0, r1, r7
	ldrb r2, [r0]
	mov r0, sl
	movs r1, #0
	bl sub_8004B88
	movs r2, #0x80
	add sl, r2
	add r8, r2
	adds r6, #4
	adds r4, #8
	adds r7, #1
	cmp r7, #5
	ble _080B39EC
	movs r5, #0
	mov r0, r9
	bl sub_80B40D0
	mov r3, r9
	str r0, [r3, #0x3c]
	movs r0, #0x80
	lsls r0, r0, #1
	movs r1, #2
	movs r2, #0
	bl sub_800680C
	bl sub_8006978
	bl sub_8008250
	bl sub_8006A7C
	mov r4, r9
	ldr r0, [r4, #0x34]
	ldr r2, [r0]
	movs r0, #2
	movs r1, #0xf
	bl sub_8006A30
	movs r0, #0
	bl sub_8006B10
	movs r0, #1
	bl sub_8006AA8
	movs r0, #2
	bl sub_8006AA8
	movs r0, #4
	bl sub_8006AA8
	movs r0, #8
	bl sub_8006AA8
	movs r0, #0x40
	bl sub_8006AA8
	movs r0, #4
	bl sub_8006AF0
	ldr r0, _080B3BD4  @ gUnknown_02000000
	ldr r3, [r4, #0x34]
	movs r1, #4
	ldrsb r1, [r3, r1]
	strh r1, [r0, #8]
	movs r1, #0x82
	lsls r1, r1, #1
	strh r1, [r0, #2]
	movs r1, #0x58
	strh r1, [r0, #4]
	ldrb r1, [r3, #7]
	strh r1, [r0, #6]
	movs r1, #6
	strh r1, [r0, #0xa]
	ldrb r1, [r3, #6]
	strb r1, [r0, #1]
	movs r4, #1
	strh r4, [r0, #0xc]
	movs r1, #0xc0
	lsls r1, r1, #1
	strh r1, [r0, #0xe]
	movs r1, #2
	strh r1, [r0, #0x10]
	ldr r1, _080B3BD8  @ gUnknown_02000038
	str r1, [r0, #0x1c]
	ldr r1, _080B3BDC  @ gUnknown_02002038
	str r1, [r0, #0x24]
	ldr r1, _080B3BE0  @ gUnknown_02007838
	str r1, [r0, #0x20]
	ldr r1, _080B3BE4  @ gUnknown_020078D8
	str r1, [r0, #0x28]
	ldr r1, _080B3BE8  @ gUnknown_0200A2D8
	str r1, [r0, #0x30]
	ldrb r2, [r3, #8]
	strh r2, [r1]
	ldrb r2, [r3, #9]
	strh r2, [r1, #2]
	ldrb r2, [r3, #0xa]
	strh r2, [r1, #4]
	ldrb r2, [r3, #0xb]
	strh r2, [r1, #6]
	ldrb r2, [r3, #0xc]
	strh r2, [r1, #8]
	movs r2, #0xa0
	lsls r2, r2, #2
	strh r2, [r1, #0xe]
	movs r3, #0xf
	strh r3, [r1, #0x10]
	subs r2, #0x80
	strh r2, [r1, #0xa]
	strh r3, [r1, #0xc]
	strh r4, [r1, #0x12]
	ldr r2, _080B3BEC  @ gBG1TilemapBuffer
	str r2, [r1, #0x14]
	ldr r2, _080B3BF0  @ gUnknown_0200A300
	str r2, [r1, #0x18]
	ldr r2, _080B3BF4  @ gUnknown_0200C300
	str r2, [r1, #0x1c]
	ldr r2, _080B3BF8  @ gUnknown_0200CB00
	str r2, [r1, #0x20]
	ldr r2, _080B3BFC  @ sub_80B3740
	str r2, [r1, #0x24]
	bl sub_805AA00
	ldr r4, _080B3C00  @ gUnknown_0201DB00
	mov r0, r9
	ldr r1, [r0, #0x34]
	ldrb r0, [r1, #0xd]
	strh r0, [r4]
	movs r0, #0xa
	strh r0, [r4, #2]
	movs r0, #0xe0
	lsls r0, r0, #2
	strh r0, [r4, #4]
	ldrb r0, [r1, #0xe]
	strh r0, [r4, #6]
	movs r0, #0xb
	strh r0, [r4, #8]
	movs r0, #0xf0
	lsls r0, r0, #2
	strh r0, [r4, #0xa]
	strh r5, [r4, #0xc]
	ldr r0, _080B3C04  @ 0x0000FFFF
	strh r0, [r4, #0xe]
	ldr r0, _080B3C08  @ 0x06010000
	str r0, [r4, #0x1c]
	ldr r0, _080B3C0C  @ gUnknown_0201DB28
	str r0, [r4, #0x20]
	adds r0, r4, #0
	bl sub_805AA68
	movs r3, #0x98
	lsls r3, r3, #1
	movs r0, #0x68
	str r0, [sp]
	adds r0, r4, #0
	movs r1, #0xd0
	movs r2, #0x68
	bl sub_805AE40
	ldr r0, _080B3C10  @ sub_80B36E0
	bl SetPrimaryHBlankHandler
	add sp, #0x3c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B3BD0: .4byte gUnknown_0201FB28
_080B3BD4: .4byte gUnknown_02000000
_080B3BD8: .4byte gUnknown_02000038
_080B3BDC: .4byte gUnknown_02002038
_080B3BE0: .4byte gUnknown_02007838
_080B3BE4: .4byte gUnknown_020078D8
_080B3BE8: .4byte gUnknown_0200A2D8
_080B3BEC: .4byte gBG1TilemapBuffer
_080B3BF0: .4byte gUnknown_0200A300
_080B3BF4: .4byte gUnknown_0200C300
_080B3BF8: .4byte gUnknown_0200CB00
_080B3BFC: .4byte sub_80B3740
_080B3C00: .4byte gUnknown_0201DB00
_080B3C04: .4byte 0x0000FFFF
_080B3C08: .4byte 0x06010000
_080B3C0C: .4byte gUnknown_0201DB28
_080B3C10: .4byte sub_80B36E0

	THUMB_FUNC_START sub_80B3C14
sub_80B3C14: @ 0x080B3C14
	push {r4, lr}
	adds r4, r0, #0
	ldrh r1, [r4, #0x2c]
	movs r0, #0xc8
	lsls r0, r0, #1
	cmp r1, r0
	bne _080B3C44
	bl sub_80B2988
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B3C3C
	movs r0, #0x3c
	bl Sound_FadeOut800231C
	adds r0, r4, #0
	movs r1, #7
	bl Proc_GotoLabel
	b _080B3C44
_080B3C3C:
	adds r0, r4, #0
	movs r1, #4
	bl Proc_GotoLabel
_080B3C44:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B3C50
sub_80B3C50: @ 0x080B3C50
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x46
	adds r0, r0, r7
	mov r9, r0
	ldrh r1, [r7, #0x2a]
	movs r0, #0x50
	subs r0, r0, r1
	movs r1, #0xe
	bl __divsi3
	mvns r0, r0
	mov r1, r9
	ldrb r1, [r1]
	adds r0, r0, r1
	mov r2, r9
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xb3
	bhi _080B3C88
	movs r0, #0xb4
	strb r0, [r2]
_080B3C88:
	ldr r0, _080B3D38  @ gLCDControlBuffer
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r1, #1
	mov r8, r1
	mov r2, r8
	orrs r0, r2
	movs r1, #2
	mov sl, r1
	mov r2, sl
	orrs r0, r2
	movs r5, #4
	orrs r0, r5
	movs r4, #8
	orrs r0, r4
	movs r3, #0x10
	orrs r0, r3
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2d
	movs r2, #0
	strb r2, [r0]
	ldrh r6, [r7, #0x2a]
	adds r1, r6, #0
	movs r0, #0x50
	subs r0, r0, r1
	mov r2, ip
	adds r2, #0x31
	strb r0, [r2]
	subs r2, #5
	movs r0, #0xf0
	strb r0, [r2]
	adds r1, #0x50
	mov r0, ip
	adds r0, #0x30
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x34
	ldrb r0, [r1]
	mov r2, r8
	orrs r0, r2
	mov r2, sl
	orrs r0, r2
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x36
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	lsls r0, r6, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x50
	bne _080B3D40
	movs r0, #0xb4
	mov r1, r9
	strb r0, [r1]
	movs r2, #0
	strh r2, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	ldr r0, _080B3D3C  @ sub_80B3C14
	adds r1, r7, #0
	bl Get6CDifferedLoop6C
	b _080B3D44
	.align 2, 0
_080B3D38: .4byte gLCDControlBuffer
_080B3D3C: .4byte sub_80B3C14
_080B3D40:
	adds r0, r6, #4
	strh r0, [r7, #0x2a]
_080B3D44:
	ldr r0, _080B3D7C  @ gUnknown_02000000
	adds r4, r7, #0
	adds r4, #0x46
	ldrb r1, [r4]
	movs r2, #0x58
	bl sub_805A940
	ldr r0, _080B3D80  @ gUnknown_0201DB00
	ldrb r3, [r4]
	adds r1, r3, #0
	subs r1, #0x30
	adds r3, #0x30
	movs r2, #0x68
	str r2, [sp]
	bl sub_805AE40
	ldr r0, [r7, #0x3c]
	movs r1, #0x64
	bl sub_80B40E4
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B3D7C: .4byte gUnknown_02000000
_080B3D80: .4byte gUnknown_0201DB00

	THUMB_FUNC_START sub_80B3D84
sub_80B3D84: @ 0x080B3D84
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	ldrb r0, [r0]
	cmp r0, #8
	bhi _080B3E0A
	lsls r0, r0, #2
	ldr r1, _080B3D9C  @ _080B3DA0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080B3D9C: .4byte _080B3DA0
_080B3DA0: @ jump table
	.4byte _080B3DC4 @ case 0
	.4byte _080B3DCE @ case 1
	.4byte _080B3DD8 @ case 2
	.4byte _080B3DE4 @ case 3
	.4byte _080B3DF0 @ case 4
	.4byte _080B3E0A @ case 5
	.4byte _080B3E00 @ case 6
	.4byte _080B3DE4 @ case 7
	.4byte _080B3E0A @ case 8
_080B3DC4:
	adds r0, r4, #0
	movs r1, #0xa
	bl Proc_GotoLabel
	b _080B3E0A
_080B3DCE:
	ldr r0, _080B3DD4  @ gUnknown_02000000
	movs r1, #0
	b _080B3DF4
	.align 2, 0
_080B3DD4: .4byte gUnknown_02000000
_080B3DD8:
	ldr r0, _080B3DE0  @ gUnknown_02000000
	movs r1, #1
	b _080B3DF4
	.align 2, 0
_080B3DE0: .4byte gUnknown_02000000
_080B3DE4:
	ldr r0, _080B3DEC  @ gUnknown_02000000
	bl sub_805A990
	b _080B3E0A
	.align 2, 0
_080B3DEC: .4byte gUnknown_02000000
_080B3DF0:
	ldr r0, _080B3DFC  @ gUnknown_02000000
	movs r1, #2
_080B3DF4:
	strh r1, [r0, #0xa]
	bl sub_805A7B4
	b _080B3E0A
	.align 2, 0
_080B3DFC: .4byte gUnknown_02000000
_080B3E00:
	ldr r0, _080B3E14  @ gUnknown_02000000
	movs r1, #4
	strh r1, [r0, #0xa]
	bl sub_805A7B4
_080B3E0A:
	movs r0, #0
	strh r0, [r4, #0x2a]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B3E14: .4byte gUnknown_02000000

	THUMB_FUNC_START sub_80B3E18
sub_80B3E18: @ 0x080B3E18
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #7
	bhi _080B3E90
	lsls r0, r0, #2
	ldr r1, _080B3E30  @ _080B3E34
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080B3E30: .4byte _080B3E34
_080B3E34: @ jump table
	.4byte _080B3E54 @ case 0
	.4byte _080B3E54 @ case 1
	.4byte _080B3E54 @ case 2
	.4byte _080B3E54 @ case 3
	.4byte _080B3E5A @ case 4
	.4byte _080B3E54 @ case 5
	.4byte _080B3E54 @ case 6
	.4byte _080B3E78 @ case 7
_080B3E54:
	ldr r0, [r4, #0x38]
	adds r0, #2
	b _080B3E6E
_080B3E5A:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	ldr r1, [r4, #0x38]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrb r2, [r1, #1]
	cmp r0, r2
	bcc _080B3E90
	adds r0, r1, #2
_080B3E6E:
	str r0, [r4, #0x38]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080B3E90
_080B3E78:
	ldr r0, _080B3E98  @ gUnknown_02000000
	bl sub_805A96C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B3E90
	ldr r0, [r4, #0x38]
	adds r0, #2
	str r0, [r4, #0x38]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080B3E90:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B3E98: .4byte gUnknown_02000000

	THUMB_FUNC_START sub_80B3E9C
sub_80B3E9C: @ 0x080B3E9C
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl SetPrimaryHBlankHandler
	bl sub_8006A7C
	bl sub_806E920
	ldr r0, _080B3ED4  @ gUnknown_0201DB00
	bl sub_805AE14
	bl sub_806E904
	ldr r0, _080B3ED8  @ gUnknown_02000000
	bl sub_805AA28
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	beq _080B3EC8
	bl Proc_Delete
_080B3EC8:
	movs r0, #2
	bl sub_80B29B8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B3ED4: .4byte gUnknown_0201DB00
_080B3ED8: .4byte gUnknown_02000000

	THUMB_FUNC_START sub_80B3EDC
sub_80B3EDC: @ 0x080B3EDC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080B3EF8  @ gUnknown_08A2F088
	adds r1, r4, #0
	bl Proc_Create
	str r4, [r0, #0x30]
	str r5, [r0, #0x34]
	movs r1, #0
	str r1, [r0, #0x3c]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080B3EF8: .4byte gUnknown_08A2F088

	THUMB_FUNC_START sub_80B3EFC
sub_80B3EFC: @ 0x080B3EFC
	push {r4, r5, lr}
	sub sp, #0x20
	adds r2, r0, #0
	ldr r0, [r2, #0x14]
	str r0, [r2, #0x30]
	movs r1, #0
	movs r0, #0
	strh r0, [r2, #0x2a]
	adds r4, r2, #0
	adds r4, #0x34
	strb r1, [r4]
	adds r1, r2, #0
	adds r1, #0x35
	movs r0, #0x64
	strb r0, [r1]
	ldr r0, [r2, #0x30]
	ldr r0, [r0, #0x34]
	ldrb r0, [r0, #5]
	mov r1, sp
	bl sub_80B369C
	mov r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080B3F66
	adds r5, r4, #0
	mov r4, sp
_080B3F36:
	ldrb r0, [r4]
	bl sub_80B4108
	adds r1, r0, #0
	cmp r1, #0
	beq _080B3F4E
	ldrb r0, [r1, #5]
	ldrb r1, [r1, #4]
	subs r0, r0, r1
	ldrb r1, [r5]
	adds r0, r0, r1
	b _080B3F52
_080B3F4E:
	ldrb r0, [r5]
	adds r0, #4
_080B3F52:
	strb r0, [r5]
	adds r4, #1
	mov r0, sp
	adds r0, #0xd
	cmp r4, r0
	bgt _080B3F66
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _080B3F36
_080B3F66:
	ldr r0, _080B3F84  @ gUnknown_08A36338
	ldr r1, _080B3F88  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B3F8C  @ gUnknown_08A372C0
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x40
	bl CopyToPaletteBuffer
	add sp, #0x20
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B3F84: .4byte gUnknown_08A36338
_080B3F88: .4byte 0x06010000
_080B3F8C: .4byte gUnknown_08A372C0

	THUMB_FUNC_START sub_80B3F90
sub_80B3F90: @ 0x080B3F90
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x30
	mov sl, r0
	movs r0, #0
	mov r9, r0
_080B3FA2:
	mov r1, sl
	ldr r0, [r1, #0x30]
	adds r0, #0x40
	add r0, r9
	ldrb r5, [r0]
	cmp r5, #0x1d
	bls _080B3FB2
	movs r5, #0x1e
_080B3FB2:
	movs r7, #0
	lsrs r0, r5, #2
	mov r2, r9
	adds r2, #1
	str r2, [sp, #0x2c]
	mov r3, sl
	adds r3, #0x34
	str r3, [sp, #0x24]
	mov r1, sl
	adds r1, #0x35
	str r1, [sp, #0x28]
	cmp r7, r0
	bge _080B3FF6
	mov r8, r0
	movs r4, #0x30
	mov r2, r9
	lsls r6, r2, #4
	mov r7, r8
_080B3FD6:
	ldr r0, _080B4098  @ gUnknown_08A2F180
	ldr r3, [r0, #0xc]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r1, r4, #0
	adds r2, r6, #0
	adds r2, #0x10
	bl RegisterObjectAttributes
	adds r4, #8
	subs r7, #1
	cmp r7, #0
	bne _080B3FD6
	mov r7, r8
_080B3FF6:
	movs r0, #3
	ands r0, r5
	cmp r0, #0
	beq _080B401E
	lsls r1, r7, #3
	adds r1, #0x30
	mov r3, r9
	lsls r2, r3, #4
	adds r2, #0x10
	subs r0, #1
	lsls r0, r0, #2
	ldr r3, _080B4098  @ gUnknown_08A2F180
	adds r0, r0, r3
	ldr r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	bl RegisterObjectAttributes
_080B401E:
	ldr r0, [sp, #0x2c]
	mov r9, r0
	cmp r0, #5
	ble _080B3FA2
	ldr r2, [sp, #0x24]
	ldrb r1, [r2]
	movs r0, #0x78
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldr r3, [sp, #0x28]
	ldrb r3, [r3]
	adds r7, r0, r3
	mov r1, sl
	ldr r0, [r1, #0x30]
	ldr r0, [r0, #0x34]
	ldrb r0, [r0, #5]
	add r1, sp, #4
	bl sub_80B369C
	movs r2, #0
	mov r9, r2
	add r0, sp, #4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080B40B2
	add r5, sp, #4
_080B405A:
	ldrb r0, [r5]
	bl sub_80B4108
	adds r4, r0, #0
	cmp r4, #0
	beq _080B409C
	ldr r3, [r4]
	cmp r3, #0
	beq _080B409E
	movs r1, #4
	ldrsb r1, [r4, r1]
	subs r1, r7, r1
	subs r1, #2
	movs r0, #6
	ldrsb r0, [r4, r0]
	movs r2, #5
	subs r2, r2, r0
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
	movs r0, #5
	ldrsb r0, [r4, r0]
	movs r1, #4
	ldrsb r1, [r4, r1]
	subs r0, r0, r1
	adds r7, r7, r0
	b _080B409E
	.align 2, 0
_080B4098: .4byte gUnknown_08A2F180
_080B409C:
	adds r7, #4
_080B409E:
	adds r5, #1
	movs r3, #1
	add r9, r3
	mov r0, r9
	cmp r0, #0xd
	bgt _080B40B2
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	bne _080B405A
_080B40B2:
	mov r1, sl
	ldrh r0, [r1, #0x2a]
	cmp r0, #0xfe
	bhi _080B40BE
	adds r0, #1
	strh r0, [r1, #0x2a]
_080B40BE:
	add sp, #0x30
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B40D0
sub_80B40D0: @ 0x080B40D0
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B40E0  @ gUnknown_08A2F138
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080B40E0: .4byte gUnknown_08A2F138

	THUMB_FUNC_START sub_80B40E4
sub_80B40E4: @ 0x080B40E4
	adds r0, #0x35
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80B40EC
sub_80B40EC: @ 0x080B40EC
	ldr r3, _080B4100  @ gUnknown_08A2FBE0
	ldr r2, _080B4104  @ gUnknown_08A2FBD4
	adds r0, r0, r2
	ldrb r0, [r0]
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r0, [r0]
	bx lr
	.align 2, 0
_080B4100: .4byte gUnknown_08A2FBE0
_080B4104: .4byte gUnknown_08A2FBD4

	THUMB_FUNC_START sub_80B4108
sub_80B4108: @ 0x080B4108
	push {lr}
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	adds r2, r1, #0
	adds r0, r1, #0
	subs r0, #0x61
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x19
	bhi _080B4128
	lsls r0, r1, #3
	ldr r1, _080B4124  @ gUnknown_08A2FDD0
	adds r0, r0, r1
	b _080B414A
	.align 2, 0
_080B4124: .4byte gUnknown_08A2FDD0
_080B4128:
	adds r0, r1, #0
	subs r0, #0x41
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x19
	bhi _080B4140
	lsls r0, r1, #3
	ldr r1, _080B413C  @ gUnknown_08A2FE00
	adds r0, r0, r1
	b _080B414A
	.align 2, 0
_080B413C: .4byte gUnknown_08A2FE00
_080B4140:
	cmp r2, #0x2e
	beq _080B4148
	movs r0, #0
	b _080B414A
_080B4148:
	ldr r0, _080B4150  @ gUnknown_08A301A8
_080B414A:
	pop {r1}
	bx r1
	.align 2, 0
_080B4150: .4byte gUnknown_08A301A8

	THUMB_FUNC_START Shop6C_GetPortraitIndex
Shop6C_GetPortraitIndex: @ 0x080B4154
	ldr r1, _080B4164  @ gUnknown_08A3918C
	adds r0, #0x61
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
_080B4164: .4byte gUnknown_08A3918C

	THUMB_FUNC_START sub_80B4168
sub_80B4168: @ 0x080B4168
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _080B41BC  @ gUnknown_08A39180
	adds r0, r5, #0
	adds r0, #0x61
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r4, r4, r0
	bl sub_8006978
	bl sub_8008250
	adds r0, r4, #0
	bl GetStringFromIndex
	adds r2, r0, #0
	movs r0, #8
	movs r1, #2
	adds r3, r5, #0
	bl sub_800698C
	movs r0, #0
	bl sub_8006B10
	movs r0, #1
	bl sub_8006AA8
	movs r0, #2
	bl sub_8006AA8
	movs r0, #4
	bl sub_8006AA8
	movs r0, #1
	bl sub_8007838
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B41BC: .4byte gUnknown_08A39180

	THUMB_FUNC_START sub_80B41C0
sub_80B41C0: @ 0x080B41C0
	push {lr}
	adds r3, r1, #0
	movs r1, #0
	movs r2, #0
	bl MakeShop
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B41D0
sub_80B41D0: @ 0x080B41D0
	push {lr}
	movs r2, #0
	movs r3, #0
	bl MakeShop
	pop {r0}
	bx r0

	THUMB_FUNC_START MakeShopArmory
MakeShopArmory: @ 0x080B41E0
	push {lr}
	adds r3, r2, #0
	movs r2, #0
	bl MakeShop
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B41F0
sub_80B41F0: @ 0x080B41F0
	push {lr}
	movs r2, #1
	movs r3, #0
	bl MakeShop
	pop {r0}
	bx r0

	THUMB_FUNC_START MakeShopVendor
MakeShopVendor: @ 0x080B4200
	push {lr}
	adds r3, r2, #0
	movs r2, #1
	bl MakeShop
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B4210
sub_80B4210: @ 0x080B4210
	push {lr}
	movs r2, #2
	movs r3, #0
	bl MakeShop
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B4220
sub_80B4220: @ 0x080B4220
	push {lr}
	adds r3, r2, #0
	movs r2, #2
	bl MakeShop
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B4230
sub_80B4230: @ 0x080B4230
	push {lr}
	movs r2, #0
	movs r3, #0
	bl MakeShop
	pop {r0}
	bx r0

	THUMB_FUNC_START MakeShop
MakeShop: @ 0x080B4240
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r6, r1, #0
	adds r4, r3, #0
	lsls r2, r2, #0x18
	lsrs r5, r2, #0x18
	bl DeletePlayerPhaseInterface6Cs
	cmp r4, #0
	beq _080B4268
	ldr r0, _080B4264  @ gUnknown_08A39210
	adds r1, r4, #0
	bl Proc_CreateBlockingChild
	b _080B4270
	.align 2, 0
_080B4264: .4byte gUnknown_08A39210
_080B4268:
	ldr r0, _080B42AC  @ gUnknown_08A39210
	movs r1, #3
	bl Proc_Create
_080B4270:
	adds r7, r0, #0
	adds r0, r7, #0
	adds r0, #0x61
	strb r5, [r0]
	mov r0, r8
	str r0, [r7, #0x2c]
	ldr r5, _080B42B0  @ gUnknown_08A39170
	cmp r6, #0
	beq _080B4284
	adds r5, r6, #0
_080B4284:
	adds r4, r7, #0
	adds r4, #0x30
	movs r6, #0x14
_080B428A:
	ldrh r0, [r5]
	adds r5, #2
	bl MakeNewItem
	strh r0, [r4]
	adds r4, #2
	subs r6, #1
	cmp r6, #0
	bge _080B428A
	adds r0, r7, #0
	bl sub_80B42B4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B42AC: .4byte gUnknown_08A39210
_080B42B0: .4byte gUnknown_08A39170

	THUMB_FUNC_START sub_80B42B4
sub_80B42B4: @ 0x080B42B4
	push {r4, lr}
	adds r4, r0, #0
	movs r2, #0
	ldrh r0, [r4, #0x30]
	cmp r0, #0
	beq _080B42CE
	adds r1, r4, #0
	adds r1, #0x30
_080B42C4:
	adds r1, #2
	adds r2, #1
	ldrh r0, [r1]
	cmp r0, #0
	bne _080B42C4
_080B42CE:
	adds r0, r4, #0
	adds r0, #0x5a
	strb r2, [r0]
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r1, r4, #0
	adds r1, #0x5b
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B42E8
sub_80B42E8: @ 0x080B42E8
	push {lr}
	ldr r0, _080B4304  @ gUnknown_08A39210
	bl Proc_Find
	adds r1, r0, #0
	adds r0, #0x60
	ldrb r0, [r0]
	cmp r0, #0
	beq _080B4300
	adds r0, r1, #0
	bl sub_80B4F04
_080B4300:
	pop {r0}
	bx r0
	.align 2, 0
_080B4304: .4byte gUnknown_08A39210

	THUMB_FUNC_START sub_80B4308
sub_80B4308: @ 0x080B4308
	push {lr}
	ldr r0, _080B4324  @ gUnknown_08A39210
	bl Proc_Find
	adds r1, r0, #0
	adds r0, #0x60
	ldrb r0, [r0]
	cmp r0, #1
	beq _080B4320
	adds r0, r1, #0
	bl sub_80B505C
_080B4320:
	pop {r0}
	bx r0
	.align 2, 0
_080B4324: .4byte gUnknown_08A39210

	THUMB_FUNC_START sub_80B4328
sub_80B4328: @ 0x080B4328
	bx lr

	THUMB_FUNC_START sub_80B432C
sub_80B432C: @ 0x080B432C
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x2c]
	cmp r0, #0
	bne _080B4340
	adds r0, r1, #0
	movs r1, #0xd
	bl Proc_GotoLabel
	b _080B4346
_080B4340:
	ldr r0, _080B434C  @ 0x0000089A
	bl sub_80B4168
_080B4346:
	pop {r0}
	bx r0
	.align 2, 0
_080B434C: .4byte 0x0000089A

	THUMB_FUNC_START sub_80B4350
sub_80B4350: @ 0x080B4350
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8008A00
	cmp r0, #1
	beq _080B436E
	cmp r0, #1
	ble _080B4364
	cmp r0, #2
	beq _080B4378
_080B4364:
	adds r0, r4, #0
	movs r1, #0xc
	bl Proc_GotoLabel
	b _080B43A0
_080B436E:
	adds r0, r4, #0
	movs r1, #1
	bl Proc_GotoLabel
	b _080B43A0
_080B4378:
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	bne _080B4398
	ldr r0, _080B4394  @ 0x000008AC
	adds r1, r4, #0
	bl sub_80B4168
	adds r0, r4, #0
	movs r1, #7
	bl Proc_GotoLabel
	b _080B43A0
	.align 2, 0
_080B4394: .4byte 0x000008AC
_080B4398:
	adds r0, r4, #0
	movs r1, #4
	bl Proc_GotoLabel
_080B43A0:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B43A8
sub_80B43A8: @ 0x080B43A8
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B43B8  @ 0x000008A3
	bl sub_80B4168
	pop {r0}
	bx r0
	.align 2, 0
_080B43B8: .4byte 0x000008A3

	THUMB_FUNC_START sub_80B43BC
sub_80B43BC: @ 0x080B43BC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	adds r0, r5, #0
	movs r1, #6
	bl DivRem
	adds r4, r0, #0
	movs r0, #0
	bl SetFont
	bl Font_LoadForUI
	movs r0, #4
	bl BG_EnableSyncByMask
	lsls r4, r4, #3
	ldr r0, _080B4410  @ gUnknown_0203EF68
	adds r4, r4, r0
	adds r0, r4, #0
	bl Text_Clear
	lsls r5, r5, #1
	adds r0, r6, #0
	adds r0, #0x30
	adds r0, r0, r5
	ldrh r1, [r0]
	cmp r1, #0
	beq _080B4408
	ldr r2, [r6, #0x2c]
	movs r3, #0x1f
	ands r3, r5
	lsls r3, r3, #6
	ldr r0, _080B4414  @ gUnknown_02023CB6
	adds r3, r3, r0
	adds r0, r4, #0
	bl sub_80B5164
_080B4408:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B4410: .4byte gUnknown_0203EF68
_080B4414: .4byte gUnknown_02023CB6

	THUMB_FUNC_START sub_80B4418
sub_80B4418: @ 0x080B4418
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	adds r0, r5, #0
	movs r1, #6
	bl DivRem
	adds r4, r0, #0
	movs r0, #0
	bl SetFont
	bl Font_LoadForUI
	movs r0, #4
	bl BG_EnableSyncByMask
	lsls r4, r4, #3
	ldr r0, _080B446C  @ gUnknown_0203EF68
	adds r4, r4, r0
	adds r0, r4, #0
	bl Text_Clear
	lsls r5, r5, #1
	adds r0, r6, #0
	adds r0, #0x30
	adds r0, r0, r5
	ldrh r1, [r0]
	cmp r1, #0
	beq _080B4464
	ldr r2, [r6, #0x2c]
	movs r3, #0x1f
	ands r3, r5
	lsls r3, r3, #6
	ldr r0, _080B4470  @ gUnknown_02023CB6
	adds r3, r3, r0
	adds r0, r4, #0
	bl sub_80B51C0
_080B4464:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B446C: .4byte gUnknown_0203EF68
_080B4470: .4byte gUnknown_02023CB6

	THUMB_FUNC_START sub_80B4474
sub_80B4474: @ 0x080B4474
	push {lr}
	sub sp, #0xc
	mov ip, r0
	adds r0, #0x5e
	ldrb r0, [r0]
	mov r1, ip
	adds r1, #0x5a
	ldrb r1, [r1]
	mov r2, ip
	adds r2, #0x5f
	ldrb r3, [r2]
	movs r2, #0x48
	str r2, [sp]
	ldr r2, _080B44A4  @ sub_80B43BC
	str r2, [sp, #4]
	mov r2, ip
	str r2, [sp, #8]
	movs r2, #5
	bl sub_80B55AC
	add sp, #0xc
	pop {r0}
	bx r0
	.align 2, 0
_080B44A4: .4byte sub_80B43BC

	THUMB_FUNC_START sub_80B44A8
sub_80B44A8: @ 0x080B44A8
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	bl sub_80B5604
	bl sub_80B5698
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	adds r6, r5, #0
	adds r6, #0x5c
	ldrb r4, [r6]
	bl sub_80B568C
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	eors r0, r4
	negs r1, r0
	orrs r1, r0
	lsrs r7, r1, #0x1f
	bl sub_80B568C
	strb r0, [r6]
	bl sub_80B56A8
	adds r4, r5, #0
	adds r4, #0x5d
	strb r0, [r4]
	ldrb r0, [r6]
	adds r1, r5, #0
	adds r1, #0x5e
	strb r0, [r1]
	ldrb r0, [r4]
	adds r1, #1
	strb r0, [r1]
	ldrb r1, [r6]
	lsls r1, r1, #4
	ldrb r0, [r4]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	movs r0, #0x38
	bl DisplayUiHand
	adds r0, r5, #0
	adds r0, #0x62
	ldrb r0, [r0]
	cmp r0, #0
	beq _080B4532
	cmp r7, #0
	beq _080B4532
	ldrb r2, [r6]
	lsls r1, r2, #4
	ldrb r0, [r4]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	lsls r2, r2, #1
	adds r0, r5, #0
	adds r0, #0x30
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x38
	bl StartItemHelpBox
_080B4532:
	bl sub_80B5384
	bl sub_80B56CC
	lsls r0, r0, #0x18
	asrs r3, r0, #0x18
	cmp r3, #0
	bne _080B4626
	adds r2, r5, #0
	adds r2, #0x62
	ldrb r0, [r2]
	cmp r0, #0
	beq _080B4568
	ldr r0, _080B4564  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B4626
	strb r3, [r2]
	bl CloseHelpBox
	b _080B4626
	.align 2, 0
_080B4564: .4byte gKeyStatusPtr
_080B4568:
	ldr r6, _080B45A0  @ gKeyStatusPtr
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B45A4
	movs r0, #1
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r2, [r0]
	lsls r1, r2, #4
	adds r0, #1
	ldrb r0, [r0]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	lsls r2, r2, #1
	adds r0, r5, #0
	adds r0, #0x30
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x38
	bl StartItemHelpBox
	b _080B4626
	.align 2, 0
_080B45A0: .4byte gKeyStatusPtr
_080B45A4:
	ldr r0, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x5c
	ldrb r2, [r1]
	lsls r2, r2, #1
	subs r1, #0x2c
	adds r1, r1, r2
	ldrh r1, [r1]
	bl sub_80B5220
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B4604
	bl GetPartyGoldAmount
	cmp r4, r0
	ble _080B45E8
	ldr r0, _080B45E4  @ 0x000008B2
	adds r1, r5, #0
	bl sub_80B4168
	adds r0, r5, #0
	movs r1, #1
	bl Proc_GotoLabel
	b _080B4626
	.align 2, 0
_080B45E4: .4byte 0x000008B2
_080B45E8:
	adds r0, r4, #0
	bl sub_8008A18
	ldr r0, _080B4600  @ 0x000008B5
	adds r1, r5, #0
	bl sub_80B4168
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080B4626
	.align 2, 0
_080B4600: .4byte 0x000008B5
_080B4604:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B4626
	ldr r0, _080B462C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B461E
	movs r0, #0x6b
	bl m4aSongNumStart
_080B461E:
	adds r0, r5, #0
	movs r1, #7
	bl Proc_GotoLabel
_080B4626:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B462C: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B4630
sub_80B4630: @ 0x080B4630
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8008A00
	cmp r0, #1
	beq _080B4644
	adds r0, r4, #0
	movs r1, #1
	bl Proc_GotoLabel
_080B4644:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B464C
sub_80B464C: @ 0x080B464C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x5b
	ldrb r0, [r0]
	cmp r0, #4
	bls _080B4688
	bl HasConvoyAccess
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B4670
	ldr r0, _080B466C  @ 0x000008BE
	adds r1, r4, #0
	bl sub_80B4168
	b _080B46AA
	.align 2, 0
_080B466C: .4byte 0x000008BE
_080B4670:
	ldr r0, _080B4684  @ 0x000008C1
	adds r1, r4, #0
	bl sub_80B4168
	adds r0, r4, #0
	movs r1, #0xb
	bl Proc_GotoLabel
	b _080B46AA
	.align 2, 0
_080B4684: .4byte 0x000008C1
_080B4688:
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x5c
	ldrb r2, [r1]
	lsls r2, r2, #1
	subs r1, #0x2c
	adds r1, r1, r2
	ldrh r1, [r1]
	bl UnitAddItem
	adds r0, r4, #0
	bl sub_80B5440
	adds r0, r4, #0
	movs r1, #3
	bl Proc_GotoLabel
_080B46AA:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B46B0
sub_80B46B0: @ 0x080B46B0
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8008A00
	cmp r0, #1
	beq _080B46C4
	adds r0, r4, #0
	movs r1, #0xb
	bl Proc_GotoLabel
_080B46C4:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B46CC
sub_80B46CC: @ 0x080B46CC
	push {r4, lr}
	adds r4, r0, #0
	bl HasConvoyAccess
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B46E8
	ldr r0, _080B46E4  @ 0x000008C7
	adds r1, r4, #0
	bl sub_80B4168
	b _080B46F0
	.align 2, 0
_080B46E4: .4byte 0x000008C7
_080B46E8:
	ldr r0, _080B46F8  @ 0x000008CA
	adds r1, r4, #0
	bl sub_80B4168
_080B46F0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B46F8: .4byte 0x000008CA

	THUMB_FUNC_START sub_80B46FC
sub_80B46FC: @ 0x080B46FC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x5c
	ldrb r1, [r0]
	lsls r1, r1, #1
	subs r0, #0x2c
	adds r0, r0, r1
	ldrh r0, [r0]
	bl AddItemToConvoy
	adds r0, r4, #0
	bl sub_80B5440
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B471C
sub_80B471C: @ 0x080B471C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B472C  @ 0x000008C4
	bl sub_80B4168
	pop {r0}
	bx r0
	.align 2, 0
_080B472C: .4byte 0x000008C4

	THUMB_FUNC_START sub_80B4730
sub_80B4730: @ 0x080B4730
	push {r4, lr}
	adds r4, r0, #0
	bl GetConvoyItemCount
	cmp r0, #0x63
	bgt _080B4744
	adds r0, r4, #0
	movs r1, #0xa
	bl Proc_GotoLabel
_080B4744:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B474C
sub_80B474C: @ 0x080B474C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B475C  @ 0x000008CD
	bl sub_80B4168
	pop {r0}
	bx r0
	.align 2, 0
_080B475C: .4byte 0x000008CD

	THUMB_FUNC_START sub_80B4760
sub_80B4760: @ 0x080B4760
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B4770  @ 0x000008A6
	bl sub_80B4168
	pop {r0}
	bx r0
	.align 2, 0
_080B4770: .4byte 0x000008A6

	THUMB_FUNC_START sub_80B4774
sub_80B4774: @ 0x080B4774
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B4784  @ 0x000008A9
	bl sub_80B4168
	pop {r0}
	bx r0
	.align 2, 0
_080B4784: .4byte 0x000008A9

	THUMB_FUNC_START sub_80B4788
sub_80B4788: @ 0x080B4788
	push {lr}
	sub sp, #0xc
	adds r1, r0, #0
	adds r1, #0x5c
	ldrb r3, [r1]
	subs r1, #1
	ldrb r1, [r1]
	movs r2, #0x48
	str r2, [sp]
	ldr r2, _080B47B0  @ sub_80B4418
	str r2, [sp, #4]
	str r0, [sp, #8]
	adds r0, r3, #0
	movs r2, #5
	movs r3, #0
	bl sub_80B55AC
	add sp, #0xc
	pop {r0}
	bx r0
	.align 2, 0
_080B47B0: .4byte sub_80B4418

	THUMB_FUNC_START sub_80B47B4
sub_80B47B4: @ 0x080B47B4
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	bl sub_80B5604
	bl sub_80B5698
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	adds r6, r5, #0
	adds r6, #0x5c
	ldrb r4, [r6]
	bl sub_80B568C
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	eors r0, r4
	negs r1, r0
	orrs r1, r0
	lsrs r7, r1, #0x1f
	bl sub_80B568C
	strb r0, [r6]
	bl sub_80B56A8
	adds r4, r5, #0
	adds r4, #0x5d
	strb r0, [r4]
	ldrb r1, [r6]
	lsls r1, r1, #4
	ldrb r0, [r4]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	movs r0, #0x38
	bl DisplayUiHand
	adds r0, r5, #0
	adds r0, #0x62
	ldrb r0, [r0]
	cmp r0, #0
	beq _080B4830
	cmp r7, #0
	beq _080B4830
	ldrb r2, [r6]
	lsls r1, r2, #4
	ldrb r0, [r4]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	ldr r0, [r5, #0x2c]
	lsls r2, r2, #1
	adds r0, #0x1e
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x38
	bl StartItemHelpBox
_080B4830:
	bl sub_80B56CC
	lsls r0, r0, #0x18
	asrs r3, r0, #0x18
	cmp r3, #0
	bne _080B4926
	adds r2, r5, #0
	adds r2, #0x62
	ldrb r0, [r2]
	cmp r0, #0
	beq _080B4864
	ldr r0, _080B4860  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B4926
	strb r3, [r2]
	bl CloseHelpBox
	b _080B4926
	.align 2, 0
_080B4860: .4byte gKeyStatusPtr
_080B4864:
	ldr r0, _080B489C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B48A0
	movs r0, #1
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r2, [r0]
	lsls r1, r2, #4
	adds r0, #1
	ldrb r0, [r0]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	ldr r0, [r5, #0x2c]
	lsls r2, r2, #1
	adds r0, #0x1e
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x38
	bl StartItemHelpBox
	b _080B4926
	.align 2, 0
_080B489C: .4byte gKeyStatusPtr
_080B48A0:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B4904
	ldr r1, [r5, #0x2c]
	adds r4, r5, #0
	adds r4, #0x5c
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl sub_80B527C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080B48D8
	ldr r0, _080B48D4  @ 0x000008BB
	adds r1, r5, #0
	bl sub_80B4168
	adds r0, r5, #0
	movs r1, #4
	bl Proc_GotoLabel
	b _080B4926
	.align 2, 0
_080B48D4: .4byte 0x000008BB
_080B48D8:
	ldr r1, [r5, #0x2c]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl sub_80B5268
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_8008A18
	ldr r0, _080B4900  @ 0x000008B5
	adds r1, r5, #0
	bl sub_80B4168
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080B4926
	.align 2, 0
_080B4900: .4byte 0x000008B5
_080B4904:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B4926
	ldr r0, _080B492C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B491E
	movs r0, #0x6b
	bl m4aSongNumStart
_080B491E:
	adds r0, r5, #0
	movs r1, #8
	bl Proc_GotoLabel
_080B4926:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B492C: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B4930
sub_80B4930: @ 0x080B4930
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	bl sub_8008A00
	cmp r0, #1
	bne _080B49A8
	movs r0, #0xb9
	movs r1, #8
	bl sub_8014B88
	ldr r1, _080B49A0  @ gActionData
	movs r0, #0x17
	strb r0, [r1, #0x11]
	bl GetPartyGoldAmount
	adds r4, r0, #0
	ldr r1, [r6, #0x2c]
	adds r5, r6, #0
	adds r5, #0x5c
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl sub_80B5268
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r4, r4, r0
	adds r0, r4, #0
	bl SetPartyGoldAmount
	ldr r0, [r6, #0x2c]
	ldrb r1, [r5]
	bl UnitRemoveItem
	adds r0, r6, #0
	bl sub_80B42B4
	adds r0, r6, #0
	bl sub_80B505C
	ldr r0, _080B49A4  @ gUnknown_02022E5E
	bl sub_80B4ED4
	adds r0, r6, #0
	adds r0, #0x5b
	ldrb r0, [r0]
	cmp r0, #0
	bne _080B49B0
	adds r0, r6, #0
	movs r1, #7
	bl Proc_GotoLabel
	b _080B49B0
	.align 2, 0
_080B49A0: .4byte gActionData
_080B49A4: .4byte gUnknown_02022E5E
_080B49A8:
	adds r0, r6, #0
	movs r1, #4
	bl Proc_GotoLabel
_080B49B0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B49B8
sub_80B49B8: @ 0x080B49B8
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B49C8  @ 0x000008AF
	bl sub_80B4168
	pop {r0}
	bx r0
	.align 2, 0
_080B49C8: .4byte 0x000008AF

	THUMB_FUNC_START sub_80B49CC
sub_80B49CC: @ 0x080B49CC
	push {lr}
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x5c
	movs r0, #0
	strb r0, [r2]
	ldr r0, _080B49E4  @ 0x0000089D
	bl sub_80B4168
	pop {r0}
	bx r0
	.align 2, 0
_080B49E4: .4byte 0x0000089D

	THUMB_FUNC_START sub_80B49E8
sub_80B49E8: @ 0x080B49E8
	push {lr}
	adds r1, r0, #0
	movs r0, #0x8a
	lsls r0, r0, #4
	bl sub_80B4168
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B49F8
sub_80B49F8: @ 0x080B49F8
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x2c]
	cmp r0, #0
	bne _080B4A10
	ldr r0, _080B4A0C  @ 0x00000898
	bl sub_80B4168
	b _080B4A16
	.align 2, 0
_080B4A0C: .4byte 0x00000898
_080B4A10:
	ldr r0, _080B4A1C  @ 0x000008B8
	bl sub_80B4168
_080B4A16:
	pop {r0}
	bx r0
	.align 2, 0
_080B4A1C: .4byte 0x000008B8

	THUMB_FUNC_START sub_80B4A20
sub_80B4A20: @ 0x080B4A20
	push {lr}
	ldr r0, _080B4A34  @ gUnknown_08A394C0
	bl Proc_DeleteAllWithScript
	ldr r0, _080B4A38  @ gProcScr_MoveUnit
	ldr r1, _080B4A3C  @ MU_Show
	bl Proc_ForEachWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080B4A34: .4byte gUnknown_08A394C0
_080B4A38: .4byte gProcScr_MoveUnit
_080B4A3C: .4byte MU_Show

	THUMB_FUNC_START sub_80B4A40
sub_80B4A40: @ 0x080B4A40
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B4A50  @ 0x00000896
	bl sub_80B4168
	pop {r0}
	bx r0
	.align 2, 0
_080B4A50: .4byte 0x00000896

	THUMB_FUNC_START sub_80B4A54
sub_80B4A54: @ 0x080B4A54
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	bl sub_80B5604
	bl sub_80B5698
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	adds r6, r5, #0
	adds r6, #0x5c
	ldrb r4, [r6]
	bl sub_80B568C
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	eors r0, r4
	negs r1, r0
	orrs r1, r0
	lsrs r7, r1, #0x1f
	bl sub_80B568C
	strb r0, [r6]
	bl sub_80B56A8
	adds r4, r5, #0
	adds r4, #0x5d
	strb r0, [r4]
	ldrb r0, [r6]
	adds r1, r5, #0
	adds r1, #0x5e
	strb r0, [r1]
	ldrb r0, [r4]
	adds r1, #1
	strb r0, [r1]
	ldrb r1, [r6]
	lsls r1, r1, #4
	ldrb r0, [r4]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	movs r0, #0x38
	bl DisplayUiHand
	adds r0, r5, #0
	adds r0, #0x62
	ldrb r0, [r0]
	cmp r0, #0
	beq _080B4ADE
	cmp r7, #0
	beq _080B4ADE
	ldrb r2, [r6]
	lsls r1, r2, #4
	ldrb r0, [r4]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	lsls r2, r2, #1
	adds r0, r5, #0
	adds r0, #0x30
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x38
	bl StartItemHelpBox
_080B4ADE:
	bl sub_80B5384
	bl sub_80B56CC
	lsls r0, r0, #0x18
	asrs r3, r0, #0x18
	cmp r3, #0
	bne _080B4B72
	adds r2, r5, #0
	adds r2, #0x62
	ldrb r0, [r2]
	cmp r0, #0
	beq _080B4B14
	ldr r0, _080B4B10  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B4B72
	strb r3, [r2]
	bl CloseHelpBox
	b _080B4B72
	.align 2, 0
_080B4B10: .4byte gKeyStatusPtr
_080B4B14:
	ldr r0, _080B4B4C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B4B50
	movs r0, #1
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r2, [r0]
	lsls r1, r2, #4
	adds r0, #1
	ldrb r0, [r0]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	lsls r2, r2, #1
	adds r0, r5, #0
	adds r0, #0x30
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x38
	bl StartItemHelpBox
	b _080B4B72
	.align 2, 0
_080B4B4C: .4byte gKeyStatusPtr
_080B4B50:
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq _080B4B72
	ldr r0, _080B4B78  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B4B6A
	movs r0, #0x6b
	bl m4aSongNumStart
_080B4B6A:
	adds r0, r5, #0
	movs r1, #0xc
	bl Proc_GotoLabel
_080B4B72:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B4B78: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B4B7C
sub_80B4B7C: @ 0x080B4B7C
	push {lr}
	adds r2, r0, #0
	ldr r0, _080B4BA4  @ gUnknown_0202BCB0
	ldrb r1, [r0, #4]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne _080B4BA0
	ldr r0, _080B4BA8  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080B4BA0
	ldr r0, _080B4BAC  @ gUnknown_08A39198
	adds r1, r2, #0
	bl Proc_CreateBlockingChild
_080B4BA0:
	pop {r0}
	bx r0
	.align 2, 0
_080B4BA4: .4byte gUnknown_0202BCB0
_080B4BA8: .4byte gUnknown_03005280
_080B4BAC: .4byte gUnknown_08A39198

	THUMB_FUNC_START sub_80B4BB0
sub_80B4BB0: @ 0x080B4BB0
	push {lr}
	adds r2, r0, #0
	ldr r0, _080B4BD8  @ gUnknown_0202BCB0
	ldrb r1, [r0, #4]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne _080B4BE4
	ldr r0, _080B4BDC  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080B4BE4
	ldr r0, _080B4BE0  @ gUnknown_08A391D0
	adds r1, r2, #0
	bl Proc_CreateBlockingChild
	b _080B4BE8
	.align 2, 0
_080B4BD8: .4byte gUnknown_0202BCB0
_080B4BDC: .4byte gUnknown_03005280
_080B4BE0: .4byte gUnknown_08A391D0
_080B4BE4:
	bl sub_8010E50
_080B4BE8:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B4BEC
sub_80B4BEC: @ 0x080B4BEC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	adds r0, #0x61
	ldrb r0, [r0]
	cmp r0, #0
	bne _080B4C0C
	movs r0, #0x36
	movs r1, #0
	bl Sound_PlaySong80024D4
	b _080B4C14
_080B4C0C:
	movs r0, #0x35
	movs r1, #0
	bl Sound_PlaySong80024D4
_080B4C14:
	ldr r0, _080B4DF8  @ gProcScr_MoveUnit
	ldr r1, _080B4DFC  @ MU_Hide
	bl Proc_ForEachWithScript
	bl sub_80B52CC
	ldr r3, _080B4E00  @ gLCDControlBuffer
	ldrb r1, [r3, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	strb r0, [r3, #0xc]
	ldrb r1, [r3, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r2, r0
	strb r2, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #2
	movs r2, #0
	bl sub_800680C
	bl ResetFaces
	adds r0, r6, #0
	adds r0, #0x5c
	movs r4, #0
	strb r4, [r0]
	adds r0, #2
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	subs r0, #2
	strb r4, [r0]
	adds r0, #3
	strb r4, [r0]
	adds r0, #2
	strb r4, [r0]
	movs r0, #0x90
	lsls r0, r0, #2
	movs r1, #3
	bl sub_80B53BC
	adds r0, r6, #0
	bl Shop6C_GetPortraitIndex
	movs r1, #1
	str r1, [sp]
	movs r1, #0x20
	movs r2, #8
	movs r3, #3
	bl sub_8007938
	ldr r0, _080B4E04  @ gUnknown_089AD934
	ldr r5, _080B4E08  @ gUnknown_02020188
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B4E0C  @ gBG1TilemapBuffer
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r5, #0
	bl CallARM_FillTileRect
	str r4, [sp]
	movs r0, #6
	movs r1, #8
	movs r2, #0x14
	movs r3, #0xc
	bl DrawUiFrame2
	movs r0, #2
	bl BG_EnableSyncByMask
	adds r0, r6, #0
	bl sub_80B4E24
	ldr r5, _080B4E10  @ gUnknown_0203EF68
	movs r4, #5
_080B4CC6:
	adds r0, r5, #0
	movs r1, #0x14
	bl Text_Init
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _080B4CC6
	adds r0, r6, #0
	bl sub_80B4F90
	ldr r0, _080B4E00  @ gLCDControlBuffer
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r3, ip
	strb r0, [r3, #1]
	movs r5, #0x34
	add r5, ip
	mov r9, r5
	ldrb r4, [r5]
	movs r6, #1
	orrs r4, r6
	movs r5, #2
	orrs r4, r5
	movs r0, #4
	orrs r4, r0
	movs r3, #8
	orrs r4, r3
	movs r0, #0x10
	orrs r4, r0
	movs r1, #0x35
	add r1, ip
	mov sl, r1
	ldrb r2, [r1]
	orrs r2, r6
	orrs r2, r5
	movs r1, #5
	negs r1, r1
	mov r8, r1
	ands r2, r1
	orrs r2, r3
	orrs r2, r0
	mov r7, ip
	adds r7, #0x36
	ldrb r1, [r7]
	orrs r1, r6
	orrs r1, r5
	mov r5, r8
	ands r1, r5
	orrs r1, r3
	orrs r1, r0
	mov r0, ip
	adds r0, #0x2d
	movs r6, #0
	movs r3, #0x38
	mov r8, r3
	mov r5, r8
	strb r5, [r0]
	mov r3, ip
	adds r3, #0x31
	movs r0, #0x48
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x2c
	movs r5, #0xf0
	strb r5, [r0]
	subs r3, #1
	movs r0, #0x98
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x2f
	strb r6, [r0]
	adds r3, #3
	movs r0, #8
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x2e
	strb r5, [r0]
	adds r0, #4
	mov r3, r8
	strb r3, [r0]
	movs r0, #0x21
	negs r0, r0
	ands r4, r0
	mov r5, r9
	strb r4, [r5]
	movs r3, #0x20
	orrs r2, r3
	mov r5, sl
	strb r2, [r5]
	ands r1, r0
	strb r1, [r7]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001ED0
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	ldr r0, _080B4E14  @ gUnknown_08B1754C
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r4, _080B4E18  @ gUnknown_08B12DB4
	movs r0, #3
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B4E1C  @ gBG3TilemapBuffer
	ldr r1, _080B4E20  @ gUnknown_08A295D4
	movs r2, #0xe0
	lsls r2, r2, #8
	bl CallARM_FillTileRect
	movs r0, #8
	bl BG_EnableSyncByMask
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B4DF8: .4byte gProcScr_MoveUnit
_080B4DFC: .4byte MU_Hide
_080B4E00: .4byte gLCDControlBuffer
_080B4E04: .4byte gUnknown_089AD934
_080B4E08: .4byte gUnknown_02020188
_080B4E0C: .4byte gBG1TilemapBuffer
_080B4E10: .4byte gUnknown_0203EF68
_080B4E14: .4byte gUnknown_08B1754C
_080B4E18: .4byte gUnknown_08B12DB4
_080B4E1C: .4byte gBG3TilemapBuffer
_080B4E20: .4byte gUnknown_08A295D4

	THUMB_FUNC_START sub_80B4E24
sub_80B4E24: @ 0x080B4E24
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080B4E70  @ gUnknown_089AD9F8
	ldr r1, _080B4E74  @ 0x06014C00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B4E78  @ gUnknown_08A394C0
	adds r1, r4, #0
	bl Proc_Create
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x64
	movs r0, #0xac
	strh r0, [r1]
	adds r1, #2
	movs r0, #0x2d
	strh r0, [r1]
	adds r1, #2
	ldr r0, _080B4E7C  @ 0x00004260
	strh r0, [r1]
	ldr r0, _080B4E80  @ gUiFramePaletteA
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r4, _080B4E84  @ gUnknown_02022E60
	adds r0, r4, #0
	bl sub_80B4E88
	subs r4, #2
	adds r0, r4, #0
	bl sub_80B4ED4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B4E70: .4byte gUnknown_089AD9F8
_080B4E74: .4byte 0x06014C00
_080B4E78: .4byte gUnknown_08A394C0
_080B4E7C: .4byte 0x00004260
_080B4E80: .4byte gUiFramePaletteA
_080B4E84: .4byte gUnknown_02022E60

	THUMB_FUNC_START sub_80B4E88
sub_80B4E88: @ 0x080B4E88
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl SetFont
	bl Font_LoadForUI
	ldr r0, _080B4EB0  @ gUnknown_03001DA0
	movs r1, #1
	bl Text_Init
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x1e
	bl sub_8004B0C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B4EB0: .4byte gUnknown_03001DA0

	THUMB_FUNC_START sub_80B4EB4
sub_80B4EB4: @ 0x080B4EB4
	push {lr}
	adds r2, r0, #0
	cmp r1, #0
	ble _080B4ECE
	movs r3, #0
_080B4EBE:
	strh r3, [r2]
	adds r0, r2, #0
	adds r0, #0x40
	strh r3, [r0]
	subs r2, #2
	subs r1, #1
	cmp r1, #0
	bgt _080B4EBE
_080B4ECE:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B4ED4
sub_80B4ED4: @ 0x080B4ED4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl SetFont
	bl Font_LoadForUI
	adds r0, r4, #0
	movs r1, #6
	bl sub_80B4EB4
	bl GetPartyGoldAmount
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl sub_8004B88
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B4F04
sub_80B4F04: @ 0x080B4F04
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x60
	movs r0, #0
	strb r0, [r1]
	ldr r0, _080B4F80  @ gUnknown_08A39478
	movs r1, #3
	bl Proc_Create
	str r5, [r0, #0x54]
	movs r0, #0
	bl SetFont
	bl Font_LoadForUI
	adds r0, r5, #0
	adds r0, #0x5f
	ldrb r4, [r0]
	adds r0, r4, #5
	cmp r4, r0
	bge _080B4F5C
_080B4F30:
	adds r0, r4, #0
	movs r1, #6
	bl DivRem
	lsls r0, r0, #3
	ldr r1, _080B4F84  @ gUnknown_0203EF68
	adds r0, r0, r1
	lsls r1, r4, #1
	movs r2, #0x1f
	ands r1, r2
	lsls r1, r1, #6
	ldr r2, _080B4F88  @ gUnknown_02023CB6
	adds r1, r1, r2
	bl Text_DrawBlank
	adds r4, #1
	adds r0, r5, #0
	adds r0, #0x5f
	ldrb r0, [r0]
	adds r0, #5
	cmp r4, r0
	blt _080B4F30
_080B4F5C:
	adds r0, r5, #0
	adds r0, #0x5f
	ldrb r2, [r0]
	lsls r2, r2, #0x14
	ldr r0, _080B4F8C  @ 0xFFB80000
	adds r2, r2, r0
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B4F80: .4byte gUnknown_08A39478
_080B4F84: .4byte gUnknown_0203EF68
_080B4F88: .4byte gUnknown_02023CB6
_080B4F8C: .4byte 0xFFB80000

	THUMB_FUNC_START sub_80B4F90
sub_80B4F90: @ 0x080B4F90
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r0, #0
	bl SetFont
	bl Font_LoadForUI
	adds r0, r6, #0
	adds r0, #0x5f
	ldrb r4, [r0]
	adds r0, r4, #5
	cmp r4, r0
	bge _080B4FCC
_080B4FAA:
	adds r0, r4, #0
	movs r1, #6
	bl DivRem
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, _080B4FD8  @ gUnknown_0203EF68
	adds r0, r0, r1
	bl Text_Clear
	adds r4, #1
	adds r0, r6, #0
	adds r0, #0x5f
	ldrb r0, [r0]
	adds r0, #5
	cmp r4, r0
	blt _080B4FAA
_080B4FCC:
	adds r0, r6, #0
	adds r0, #0x5f
	ldrb r4, [r0]
	adds r7, r0, #0
	b _080B4FF6
	.align 2, 0
_080B4FD8: .4byte gUnknown_0203EF68
_080B4FDC:
	lsls r0, r1, #3
	ldr r1, _080B5034  @ gUnknown_0203EF68
	adds r0, r0, r1
	ldr r2, [r6, #0x2c]
	movs r1, #0x1f
	ands r3, r1
	lsls r3, r3, #6
	ldr r1, _080B5038  @ gUnknown_02023CB6
	adds r3, r3, r1
	adds r1, r5, #0
	bl sub_80B5164
	adds r4, #1
_080B4FF6:
	ldrb r0, [r7]
	adds r0, #5
	cmp r4, r0
	bge _080B5016
	adds r0, r4, #0
	movs r1, #6
	bl DivRem
	adds r1, r0, #0
	lsls r3, r4, #1
	adds r0, r6, #0
	adds r0, #0x30
	adds r0, r0, r3
	ldrh r5, [r0]
	cmp r5, #0
	bne _080B4FDC
_080B5016:
	ldrb r2, [r7]
	lsls r2, r2, #0x14
	ldr r0, _080B503C  @ 0xFFB80000
	adds r2, r2, r0
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B5034: .4byte gUnknown_0203EF68
_080B5038: .4byte gUnknown_02023CB6
_080B503C: .4byte 0xFFB80000

	THUMB_FUNC_START sub_80B5040
sub_80B5040: @ 0x080B5040
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x54]
	bl sub_80B4474
	ldr r0, [r4, #0x54]
	bl sub_80B4F90
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B505C
sub_80B505C: @ 0x080B505C
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x60
	movs r0, #1
	strb r0, [r1]
	ldr r0, _080B50B8  @ gUnknown_08A39488
	movs r1, #3
	bl Proc_Create
	str r4, [r0, #0x54]
	movs r0, #0
	bl SetFont
	bl Font_LoadForUI
	movs r4, #0
_080B507E:
	adds r0, r4, #0
	movs r1, #6
	bl DivRem
	lsls r0, r0, #3
	ldr r1, _080B50BC  @ gUnknown_0203EF68
	adds r0, r0, r1
	lsls r1, r4, #1
	movs r2, #0x1f
	ands r1, r2
	lsls r1, r1, #6
	ldr r2, _080B50C0  @ gUnknown_02023CB6
	adds r1, r1, r2
	bl Text_DrawBlank
	adds r4, #1
	cmp r4, #4
	ble _080B507E
	ldr r2, _080B50C4  @ 0x0000FFB8
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B50B8: .4byte gUnknown_08A39488
_080B50BC: .4byte gUnknown_0203EF68
_080B50C0: .4byte gUnknown_02023CB6
_080B50C4: .4byte 0x0000FFB8

	THUMB_FUNC_START sub_80B50C8
sub_80B50C8: @ 0x080B50C8
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r0, #0
	bl SetFont
	bl Font_LoadForUI
	movs r4, #0
	ldr r5, _080B50F8  @ gUnknown_0203EF68
_080B50DA:
	adds r0, r4, #0
	movs r1, #6
	bl DivRem
	adds r1, r0, #0
	lsls r0, r1, #3
	adds r0, r0, r5
	bl Text_Clear
	adds r4, #1
	cmp r4, #4
	ble _080B50DA
	movs r4, #0
	b _080B5116
	.align 2, 0
_080B50F8: .4byte gUnknown_0203EF68
_080B50FC:
	lsls r0, r1, #3
	ldr r1, _080B5140  @ gUnknown_0203EF68
	adds r0, r0, r1
	movs r1, #0x1f
	ands r3, r1
	lsls r3, r3, #6
	ldr r1, _080B5144  @ gUnknown_02023CB6
	adds r3, r3, r1
	adds r1, r2, #0
	adds r2, r5, #0
	bl sub_80B51C0
	adds r4, #1
_080B5116:
	cmp r4, #4
	bgt _080B5134
	adds r0, r4, #0
	movs r1, #6
	bl DivRem
	adds r1, r0, #0
	ldr r5, [r6, #0x2c]
	lsls r3, r4, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r3
	ldrh r2, [r0]
	cmp r2, #0
	bne _080B50FC
_080B5134:
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B5140: .4byte gUnknown_0203EF68
_080B5144: .4byte gUnknown_02023CB6

	THUMB_FUNC_START sub_80B5148
sub_80B5148: @ 0x080B5148
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x54]
	bl sub_80B4788
	ldr r0, [r4, #0x54]
	bl sub_80B50C8
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B5164
sub_80B5164: @ 0x080B5164
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r5, r1, #0
	adds r4, r2, #0
	adds r6, r3, #0
	adds r0, r4, #0
	bl sub_80B5220
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	cmp r4, #0
	bne _080B5184
	movs r0, #1
	b _080B5190
_080B5184:
	adds r0, r4, #0
	adds r1, r5, #0
	bl IsItemDisplayUsable
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
_080B5190:
	lsls r2, r0, #0x18
	asrs r2, r2, #0x18
	mov r0, r8
	adds r1, r5, #0
	adds r3, r6, #0
	bl DrawItemMenuLine
	adds r4, r6, #0
	adds r4, #0x22
	bl GetPartyGoldAmount
	movs r1, #1
	cmp r0, r7
	blt _080B51AE
	movs r1, #2
_080B51AE:
	adds r0, r4, #0
	adds r2, r7, #0
	bl sub_8004B88
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B51C0
sub_80B51C0: @ 0x080B51C0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	adds r0, r2, #0
	adds r4, r3, #0
	bl IsItemDisplayUsable
	adds r2, r0, #0
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	adds r0, r6, #0
	adds r1, r5, #0
	adds r3, r4, #0
	bl DrawItemMenuLine
	adds r0, r5, #0
	bl sub_80B527C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B5202
	adds r4, #0x22
	adds r0, r5, #0
	bl sub_80B5268
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	adds r0, r4, #0
	movs r1, #2
	bl sub_8004B88
	b _080B5214
_080B5202:
	ldr r0, _080B521C  @ 0x00000537
	bl GetStringFromIndex
	adds r3, r0, #0
	adds r0, r6, #0
	movs r1, #0x5c
	movs r2, #2
	bl Text_InsertString
_080B5214:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B521C: .4byte 0x00000537

	THUMB_FUNC_START sub_80B5220
sub_80B5220: @ 0x080B5220
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, r1, #0
	bl GetItemCost
	adds r4, r0, #0
	ldr r0, _080B5254  @ gUnknown_0202BCB0
	ldrb r1, [r0, #4]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080B5240
	lsrs r0, r4, #0x1f
	adds r0, r4, r0
	asrs r0, r0, #1
	adds r4, r4, r0
_080B5240:
	adds r0, r5, #0
	movs r1, #0x73
	bl UnitHasItem
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080B5258
	lsls r0, r4, #0x10
	b _080B525E
	.align 2, 0
_080B5254: .4byte gUnknown_0202BCB0
_080B5258:
	lsrs r0, r4, #0x1f
	adds r0, r4, r0
	lsls r0, r0, #0xf
_080B525E:
	lsrs r0, r0, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B5268
sub_80B5268: @ 0x080B5268
	push {lr}
	bl GetItemCost
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x10
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B527C
sub_80B527C: @ 0x080B527C
	push {r4, lr}
	adds r4, r0, #0
	bl GetItemAttributes
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	bne _080B529C
	adds r0, r4, #0
	bl sub_80B5268
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080B529C
	movs r0, #1
	b _080B529E
_080B529C:
	movs r0, #0
_080B529E:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B52A4
sub_80B52A4: @ 0x080B52A4
	push {r4, lr}
	adds r3, r0, #0
	adds r0, #0x64
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r3, #0
	adds r1, #0x66
	movs r2, #0
	ldrsh r1, [r1, r2]
	ldr r2, _080B52C8  @ gUnknown_08A39498
	adds r3, #0x68
	movs r4, #0
	ldrsh r3, [r3, r4]
	bl CallARM_PushToSecondaryOAM
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B52C8: .4byte gUnknown_08A39498

	THUMB_FUNC_START sub_80B52CC
sub_80B52CC: @ 0x080B52CC
	push {lr}
	ldr r2, _080B5364  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r0, _080B5368  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B536C  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B5370  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B5374  @ gBG3TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0xf
	bl BG_EnableSyncByMask
	bl Font_InitForUIDefault
	bl LoadUiFrameGraphics
	bl ResetIconGraphics_
	movs r0, #4
	bl LoadIconPalettes
	movs r1, #1
	negs r1, r1
	movs r0, #0
	bl LoadDialogueBoxGfx
	pop {r0}
	bx r0
	.align 2, 0
_080B5364: .4byte gLCDControlBuffer
_080B5368: .4byte gBG0TilemapBuffer
_080B536C: .4byte gBG1TilemapBuffer
_080B5370: .4byte gBG2TilemapBuffer
_080B5374: .4byte gBG3TilemapBuffer

	THUMB_FUNC_START sub_80B5378
sub_80B5378: @ 0x080B5378
	push {lr}
	bl sub_80B5384
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B5384
sub_80B5384: @ 0x080B5384
	push {lr}
	bl sub_80B56F0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B539E
	movs r2, #0xc9
	lsls r2, r2, #6
	movs r0, #0x78
	movs r1, #0x40
	movs r3, #1
	bl sub_80B53F8
_080B539E:
	bl sub_80B570C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B53B6
	movs r2, #0xc9
	lsls r2, r2, #6
	movs r0, #0x78
	movs r1, #0x98
	movs r3, #0
	bl sub_80B53F8
_080B53B6:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B53BC
sub_80B53BC: @ 0x080B53BC
	push {r4, lr}
	adds r4, r1, #0
	ldr r2, _080B53E8  @ gUnknown_08A1C704
	ldr r1, _080B53EC  @ 0x000003FF
	ands r1, r0
	lsls r1, r1, #5
	ldr r0, _080B53F0  @ 0x06010000
	adds r1, r1, r0
	adds r0, r2, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B53F4  @ gUnknown_08A1A084
	adds r4, #0x10
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B53E8: .4byte gUnknown_08A1C704
_080B53EC: .4byte 0x000003FF
_080B53F0: .4byte 0x06010000
_080B53F4: .4byte gUnknown_08A1A084

	THUMB_FUNC_START sub_80B53F8
sub_80B53F8: @ 0x080B53F8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r1, #0
	adds r4, r3, #0
	lsls r2, r2, #0x10
	lsrs r5, r2, #0x10
	bl GetGameClock
	movs r1, #0x28
	bl DivRem
	movs r1, #8
	bl Div
	lsls r0, r0, #1
	movs r1, #0
	cmp r4, #0
	bne _080B5422
	movs r1, #0x80
	lsls r1, r1, #6
_080B5422:
	orrs r1, r6
	ldr r3, _080B543C  @ gUnknown_08590F7C
	adds r0, r5, r0
	str r0, [sp]
	movs r0, #2
	adds r2, r7, #0
	bl RegisterObjectAttributes
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B543C: .4byte gUnknown_08590F7C

	THUMB_FUNC_START sub_80B5440
sub_80B5440: @ 0x080B5440
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0xb9
	movs r1, #8
	bl sub_8014B88
	ldr r1, _080B5490  @ gActionData
	movs r0, #0x17
	strb r0, [r1, #0x11]
	bl GetPartyGoldAmount
	adds r4, r0, #0
	ldr r0, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x5c
	ldrb r2, [r1]
	lsls r2, r2, #1
	subs r1, #0x2c
	adds r1, r1, r2
	ldrh r1, [r1]
	bl sub_80B5220
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	subs r4, r4, r0
	adds r0, r4, #0
	bl SetPartyGoldAmount
	adds r0, r5, #0
	bl sub_80B42B4
	adds r0, r5, #0
	bl sub_80B4F90
	ldr r0, _080B5494  @ gUnknown_02022E5E
	bl sub_80B4ED4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B5490: .4byte gActionData
_080B5494: .4byte gUnknown_02022E5E

	THUMB_FUNC_START sub_80B5498
sub_80B5498: @ 0x080B5498
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	adds r7, r2, #0
	cmp r4, #0
	bge _080B54AA
	movs r4, #0
_080B54AA:
	cmp r4, r5
	blt _080B54B0
	subs r4, r5, #1
_080B54B0:
	mov ip, r4
	ldr r0, _080B54D8  @ gKeyStatusPtr
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080B54E0
	cmp r4, #0
	bne _080B54DC
	cmp r2, #0
	beq _080B5504
	ldrh r1, [r3, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080B5504
	subs r4, r5, #1
	b _080B5504
	.align 2, 0
_080B54D8: .4byte gKeyStatusPtr
_080B54DC:
	subs r4, #1
	b _080B5504
_080B54E0:
	movs r2, #0x80
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _080B5504
	subs r0, r5, #1
	cmp r4, r0
	bne _080B5502
	cmp r7, #0
	beq _080B5504
	ldrh r1, [r3, #8]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _080B5504
	movs r4, #0
	b _080B5504
_080B5502:
	adds r4, #1
_080B5504:
	cmp ip, r4
	beq _080B551A
	ldr r0, _080B5524  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B551A
	movs r0, #0x66
	bl m4aSongNumStart
_080B551A:
	adds r0, r4, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080B5524: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B5528
sub_80B5528: @ 0x080B5528
	ldr r1, _080B5530  @ gUnknown_0203EFB4
	str r0, [r1]
	bx lr
	.align 2, 0
_080B5530: .4byte gUnknown_0203EFB4

	THUMB_FUNC_START sub_80B5534
sub_80B5534: @ 0x080B5534
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080B555C  @ gUnknown_0203EFB4
	ldr r1, [r0]
	str r4, [r0]
	cmp r4, r1
	beq _080B5572
	cmp r2, r5
	bgt _080B5572
	cmp r4, r1
	bge _080B5560
	cmp r3, #0
	beq _080B5572
	subs r0, r4, r3
	cmp r0, #0
	bgt _080B5572
	movs r0, #1
	negs r0, r0
	b _080B5574
	.align 2, 0
_080B555C: .4byte gUnknown_0203EFB4
_080B5560:
	adds r0, r2, r3
	cmp r0, r5
	beq _080B5572
	subs r1, r4, r3
	subs r0, r2, #1
	cmp r1, r0
	blt _080B5572
	movs r0, #1
	b _080B5574
_080B5572:
	movs r0, #0
_080B5574:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B557C
sub_80B557C: @ 0x080B557C
	push {lr}
	subs r3, r0, r1
	cmp r3, #0
	blt _080B558C
	cmp r3, r2
	blt _080B5592
	subs r3, r1, r0
	b _080B5596
_080B558C:
	subs r3, r1, r0
	cmp r3, r2
	bge _080B5596
_080B5592:
	adds r0, r1, #0
	b _080B55A8
_080B5596:
	cmp r3, #0
	bgt _080B55A4
	adds r1, r0, #0
	cmp r3, #0
	bge _080B55A6
	subs r1, r0, r2
	b _080B55A6
_080B55A4:
	adds r1, r0, r2
_080B55A6:
	adds r0, r1, #0
_080B55A8:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B55AC
sub_80B55AC: @ 0x080B55AC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	adds r1, r2, #0
	adds r4, r3, #0
	ldr r7, [sp, #0x1c]
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r0, r5, #0
	str r1, [sp]
	bl sub_80B5528
	ldr r0, _080B5600  @ gUnknown_08A394D8
	ldr r0, [r0]
	strh r5, [r0]
	strh r6, [r0, #2]
	ldr r1, [sp]
	strh r1, [r0, #4]
	strh r4, [r0, #6]
	movs r1, #0x10
	strh r1, [r0, #8]
	movs r1, #4
	strh r1, [r0, #0xa]
	str r7, [r0, #0x14]
	ldr r1, [sp, #0x20]
	str r1, [r0, #0x18]
	ldr r2, [sp, #0x18]
	negs r1, r2
	str r1, [r0, #0x10]
	lsls r4, r4, #4
	strh r4, [r0, #0xc]
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B5600: .4byte gUnknown_08A394D8

	THUMB_FUNC_START sub_80B5604
sub_80B5604: @ 0x080B5604
	push {r4, lr}
	ldr r4, _080B5638  @ gUnknown_08A394D8
	ldr r1, [r4]
	ldrh r0, [r1]
	ldrh r1, [r1, #2]
	movs r2, #0
	bl sub_80B5498
	ldr r3, [r4]
	strh r0, [r3]
	ldrh r0, [r3]
	ldrh r1, [r3, #2]
	ldrh r2, [r3, #4]
	ldrh r3, [r3, #6]
	bl sub_80B5534
	adds r1, r0, #0
	cmp r1, #0
	beq _080B566C
	cmp r1, #0
	bgt _080B563C
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	beq _080B565A
	b _080B566C
	.align 2, 0
_080B5638: .4byte gUnknown_08A394D8
_080B563C:
	cmp r1, #1
	bne _080B566C
	ldr r3, [r4]
	ldrh r0, [r3, #6]
	adds r0, #1
	strh r0, [r3, #6]
	ldr r0, [r3, #0x18]
	ldrh r1, [r3, #6]
	ldrh r2, [r3, #4]
	adds r1, r1, r2
	subs r1, #1
	ldr r2, [r3, #0x14]
	bl _call_via_r2
	b _080B566C
_080B565A:
	ldr r2, [r4]
	ldrh r0, [r2, #6]
	subs r0, #1
	strh r0, [r2, #6]
	ldr r0, [r2, #0x18]
	ldrh r1, [r2, #6]
	ldr r2, [r2, #0x14]
	bl _call_via_r2
_080B566C:
	ldr r4, _080B5688  @ gUnknown_08A394D8
	ldr r2, [r4]
	ldrh r0, [r2, #0xc]
	ldrh r3, [r2, #6]
	ldrh r1, [r2, #8]
	muls r1, r3, r1
	ldrh r2, [r2, #0xa]
	bl sub_80B557C
	ldr r1, [r4]
	strh r0, [r1, #0xc]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B5688: .4byte gUnknown_08A394D8

	THUMB_FUNC_START sub_80B568C
sub_80B568C: @ 0x080B568C
	ldr r0, _080B5694  @ gUnknown_08A394D8
	ldr r0, [r0]
	ldrh r0, [r0]
	bx lr
	.align 2, 0
_080B5694: .4byte gUnknown_08A394D8

	THUMB_FUNC_START sub_80B5698
sub_80B5698: @ 0x080B5698
	ldr r0, _080B56A4  @ gUnknown_08A394D8
	ldr r0, [r0]
	ldrh r1, [r0, #0xc]
	ldr r0, [r0, #0x10]
	adds r0, r0, r1
	bx lr
	.align 2, 0
_080B56A4: .4byte gUnknown_08A394D8

	THUMB_FUNC_START sub_80B56A8
sub_80B56A8: @ 0x080B56A8
	ldr r0, _080B56B0  @ gUnknown_08A394D8
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	bx lr
	.align 2, 0
_080B56B0: .4byte gUnknown_08A394D8

	THUMB_FUNC_START sub_80B56B4
sub_80B56B4: @ 0x080B56B4
	ldr r1, _080B56BC  @ gUnknown_08A394D8
	ldr r1, [r1]
	strh r0, [r1, #8]
	bx lr
	.align 2, 0
_080B56BC: .4byte gUnknown_08A394D8

	THUMB_FUNC_START sub_80B56C0
sub_80B56C0: @ 0x080B56C0
	ldr r1, _080B56C8  @ gUnknown_08A394D8
	ldr r1, [r1]
	strh r0, [r1, #0xa]
	bx lr
	.align 2, 0
_080B56C8: .4byte gUnknown_08A394D8

	THUMB_FUNC_START sub_80B56CC
sub_80B56CC: @ 0x080B56CC
	push {lr}
	ldr r0, _080B56E4  @ gUnknown_08A394D8
	ldr r0, [r0]
	ldrh r2, [r0, #0xc]
	ldrh r1, [r0, #6]
	ldrh r0, [r0, #8]
	muls r0, r1, r0
	cmp r2, r0
	bne _080B56E8
	movs r0, #0
	b _080B56EA
	.align 2, 0
_080B56E4: .4byte gUnknown_08A394D8
_080B56E8:
	movs r0, #1
_080B56EA:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B56F0
sub_80B56F0: @ 0x080B56F0
	push {lr}
	ldr r0, _080B5700  @ gUnknown_08A394D8
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	cmp r0, #0
	bne _080B5704
	movs r0, #0
	b _080B5706
	.align 2, 0
_080B5700: .4byte gUnknown_08A394D8
_080B5704:
	movs r0, #1
_080B5706:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B570C
sub_80B570C: @ 0x080B570C
	push {lr}
	ldr r0, _080B5724  @ gUnknown_08A394D8
	ldr r1, [r0]
	ldrh r0, [r1, #6]
	ldrh r2, [r1, #4]
	adds r0, r0, r2
	ldrh r1, [r1, #2]
	cmp r0, r1
	blt _080B5728
	movs r0, #0
	b _080B572A
	.align 2, 0
_080B5724: .4byte gUnknown_08A394D8
_080B5728:
	movs r0, #1
_080B572A:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B5730
sub_80B5730: @ 0x080B5730
	push {lr}
	ldr r2, _080B5758  @ gMPlayTable
	ldr r0, _080B575C  @ gSongTable
	movs r1, #0xe2
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrh r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldr r1, _080B5760  @ 0x8000FFFF
	ands r0, r1
	cmp r0, #0
	beq _080B5764
	movs r0, #1
	b _080B5766
	.align 2, 0
_080B5758: .4byte gMPlayTable
_080B575C: .4byte gSongTable
_080B5760: .4byte 0x8000FFFF
_080B5764:
	movs r0, #0
_080B5766:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B576C
sub_80B576C: @ 0x080B576C
	push {lr}
	ldr r0, _080B5784  @ gActiveUnit
	ldr r0, [r0]
	bl PrepareArena
	ldr r0, _080B5788  @ gUnknown_08A394DC
	movs r1, #3
	bl Proc_Create
	pop {r0}
	bx r0
	.align 2, 0
_080B5784: .4byte gActiveUnit
_080B5788: .4byte gUnknown_08A394DC

	THUMB_FUNC_START sub_80B578C
sub_80B578C: @ 0x080B578C
	push {lr}
	ldr r0, _080B579C  @ gUnknown_08A3963C
	movs r1, #3
	bl Proc_Create
	pop {r0}
	bx r0
	.align 2, 0
_080B579C: .4byte gUnknown_08A3963C

	THUMB_FUNC_START sub_80B57A0
sub_80B57A0: @ 0x080B57A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, _080B5948  @ gProcScr_MoveUnit
	ldr r1, _080B594C  @ MU_Hide
	bl Proc_ForEachWithScript
	bl sub_80B52CC
	ldr r7, _080B5950  @ gLCDControlBuffer
	ldrb r2, [r7, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r7, #0xc]
	ldrb r2, [r7, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	mov r8, r2
	mov r3, r8
	orrs r0, r3
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	strb r1, [r7, #0x14]
	ldrb r0, [r7, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r7, #0x18]
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #2
	movs r2, #0
	bl sub_800680C
	bl ResetFaces
	movs r0, #1
	str r0, [sp]
	movs r0, #0x67
	movs r1, #0x20
	movs r2, #8
	movs r3, #3
	bl sub_8007938
	ldr r0, _080B5954  @ gUnknown_089AD934
	ldr r5, _080B5958  @ gUnknown_02020188
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	ldr r4, _080B595C  @ gBG1TilemapBuffer
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r4, #0
	adds r1, r5, #0
	bl CallARM_FillTileRect
	movs r5, #0x80
	lsls r5, r5, #2
	adds r4, r4, r5
	adds r0, r4, #0
	movs r1, #0x1e
	movs r2, #0xc
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #2
	bl BG_EnableSyncByMask
	adds r0, r6, #0
	bl sub_80B4E24
	ldrb r0, [r7, #1]
	movs r6, #0x20
	orrs r0, r6
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	movs r0, #0x34
	adds r0, r0, r7
	mov r9, r0
	ldrb r4, [r0]
	movs r5, #1
	orrs r4, r5
	mov r1, r8
	orrs r4, r1
	movs r0, #4
	orrs r4, r0
	movs r3, #8
	orrs r4, r3
	movs r0, #0x10
	orrs r4, r0
	movs r2, #0x35
	adds r2, r2, r7
	mov sl, r2
	ldrb r2, [r2]
	orrs r2, r5
	orrs r2, r1
	subs r6, #0x25
	ands r2, r6
	orrs r2, r3
	orrs r2, r0
	movs r1, #0x36
	adds r1, r1, r7
	mov ip, r1
	ldrb r1, [r1]
	orrs r1, r5
	mov r5, r8
	orrs r1, r5
	ands r1, r6
	orrs r1, r3
	orrs r1, r0
	adds r3, r7, #0
	adds r3, #0x2d
	movs r6, #0
	movs r0, #0x58
	strb r0, [r3]
	adds r3, #4
	movs r0, #0x48
	strb r0, [r3]
	adds r0, r7, #0
	adds r0, #0x2c
	movs r5, #0xf0
	strb r5, [r0]
	subs r3, #1
	movs r0, #0x98
	strb r0, [r3]
	adds r0, r7, #0
	adds r0, #0x2f
	strb r6, [r0]
	adds r3, #3
	movs r0, #8
	strb r0, [r3]
	adds r0, r7, #0
	adds r0, #0x2e
	strb r5, [r0]
	subs r3, #1
	movs r0, #0x38
	strb r0, [r3]
	subs r0, #0x59
	ands r4, r0
	mov r3, r9
	strb r4, [r3]
	movs r5, #0x20
	orrs r2, r5
	mov r3, sl
	strb r2, [r3]
	ands r1, r0
	mov r5, ip
	strb r1, [r5]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001ED0
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	ldr r4, _080B5960  @ gUnknown_089A8F94
	movs r0, #3
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r6, #0xc0
	lsls r6, r6, #0x13
	adds r1, r1, r6
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B5964  @ gBG3TilemapBuffer
	ldr r1, _080B5968  @ gUnknown_089ABB70
	movs r2, #0xc0
	lsls r2, r2, #8
	bl CallARM_FillTileRect
	ldr r0, _080B596C  @ gUnknown_089AC024
	movs r1, #0xc0
	lsls r1, r1, #1
	movs r2, #0x80
	bl CopyToPaletteBuffer
	movs r0, #8
	bl BG_EnableSyncByMask
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B5948: .4byte gProcScr_MoveUnit
_080B594C: .4byte MU_Hide
_080B5950: .4byte gLCDControlBuffer
_080B5954: .4byte gUnknown_089AD934
_080B5958: .4byte gUnknown_02020188
_080B595C: .4byte gBG1TilemapBuffer
_080B5960: .4byte gUnknown_089A8F94
_080B5964: .4byte gBG3TilemapBuffer
_080B5968: .4byte gUnknown_089ABB70
_080B596C: .4byte gUnknown_089AC024

	THUMB_FUNC_START sub_80B5970
sub_80B5970: @ 0x080B5970
	push {lr}
	ldr r0, _080B598C  @ gUnknown_0203A8F0
	ldr r0, [r0]
	ldr r1, _080B5990  @ gBattleActor
	bl UpdateUnitFromBattle
	ldr r0, _080B5994  @ gActiveUnit
	ldr r0, [r0]
	bl MU_Create
	bl MU_SetDefaultFacing_Auto
	pop {r0}
	bx r0
	.align 2, 0
_080B598C: .4byte gUnknown_0203A8F0
_080B5990: .4byte gBattleActor
_080B5994: .4byte gActiveUnit

	THUMB_FUNC_START sub_80B5998
sub_80B5998: @ 0x080B5998
	push {lr}
	adds r2, r0, #0
	ldr r0, _080B59B8  @ gUnknown_0203A8F0
	ldr r0, [r0]
	ldr r0, [r0, #0xc]
	lsrs r0, r0, #0x11
	movs r1, #7
	ands r0, r1
	cmp r0, #4
	bhi _080B59BC
	movs r0, #0x8d
	lsls r0, r0, #4
	adds r1, r2, #0
	bl sub_80B5C04
	b _080B59C4
	.align 2, 0
_080B59B8: .4byte gUnknown_0203A8F0
_080B59BC:
	ldr r0, _080B59C8  @ 0x000008D1
	adds r1, r2, #0
	bl sub_80B5C04
_080B59C4:
	pop {r0}
	bx r0
	.align 2, 0
_080B59C8: .4byte 0x000008D1

	THUMB_FUNC_START sub_80B59CC
sub_80B59CC: @ 0x080B59CC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8031ECC
	bl sub_8008A18
	ldr r0, _080B59E8  @ 0x000008D2
	adds r1, r4, #0
	bl sub_80B5C04
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B59E8: .4byte 0x000008D2

	THUMB_FUNC_START sub_80B59EC
sub_80B59EC: @ 0x080B59EC
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_8008A00
	cmp r0, #1
	beq _080B5A10
	ldr r0, _080B5A0C  @ 0x000008D4
	adds r1, r5, #0
	bl sub_80B5C04
	adds r0, r5, #0
	movs r1, #2
	bl Proc_GotoLabel
	b _080B5A2E
	.align 2, 0
_080B5A0C: .4byte 0x000008D4
_080B5A10:
	bl sub_8031ECC
	adds r4, r0, #0
	bl GetPartyGoldAmount
	cmp r4, r0
	ble _080B5A2E
	ldr r0, _080B5A34  @ 0x000008DA
	adds r1, r5, #0
	bl sub_80B5C04
	adds r0, r5, #0
	movs r1, #2
	bl Proc_GotoLabel
_080B5A2E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B5A34: .4byte 0x000008DA

	THUMB_FUNC_START sub_80B5A38
sub_80B5A38: @ 0x080B5A38
	push {r4, r5, lr}
	adds r5, r0, #0
	bl GetPartyGoldAmount
	adds r4, r0, #0
	bl sub_8031ECC
	subs r4, r4, r0
	adds r0, r4, #0
	bl SetPartyGoldAmount
	ldr r0, _080B5A74  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B5A60
	movs r0, #0xb9
	bl m4aSongNumStart
_080B5A60:
	ldr r0, _080B5A78  @ gUnknown_02022E5E
	bl sub_80B4ED4
	adds r0, r5, #0
	bl sub_80B5C48
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B5A74: .4byte gUnknown_0202BCF0
_080B5A78: .4byte gUnknown_02022E5E

	THUMB_FUNC_START sub_80B5A7C
sub_80B5A7C: @ 0x080B5A7C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B5A8C  @ 0x000008D5
	bl sub_80B5C04
	pop {r0}
	bx r0
	.align 2, 0
_080B5A8C: .4byte 0x000008D5

	THUMB_FUNC_START sub_80B5A90
sub_80B5A90: @ 0x080B5A90
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B5AA0  @ 0x000008D3
	bl sub_80B5C04
	pop {r0}
	bx r0
	.align 2, 0
_080B5AA0: .4byte 0x000008D3

	THUMB_FUNC_START sub_80B5AA4
sub_80B5AA4: @ 0x080B5AA4
	push {lr}
	movs r0, #1
	negs r0, r0
	bl Sound_FadeOut800231C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B5AB4
sub_80B5AB4: @ 0x080B5AB4
	push {r4, r5, r6, lr}
	movs r1, #7
	bl Proc_SetMark
	bl sub_8010E50
	ldr r0, _080B5AF4  @ gUnknown_08A394C0
	bl Proc_DeleteAllWithScript
	ldr r5, _080B5AF8  @ gActionData
	movs r6, #0
	movs r0, #0x19
	strb r0, [r5, #0x11]
	ldr r4, _080B5AFC  @ gActiveUnit
	ldr r0, [r4]
	ldr r1, [r0, #0xc]
	movs r2, #0x40
	orrs r1, r2
	str r1, [r0, #0xc]
	bl sub_80A44C8
	bl MU_EndAll
	strb r6, [r5, #0x15]
	ldr r0, [r4]
	bl BattleGenerateArena
	bl BeginBattleAnimations
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B5AF4: .4byte gUnknown_08A394C0
_080B5AF8: .4byte gActionData
_080B5AFC: .4byte gActiveUnit

	THUMB_FUNC_START sub_80B5B00
sub_80B5B00: @ 0x080B5B00
	push {lr}
	bl sub_8014944
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B5B0C
sub_80B5B0C: @ 0x080B5B0C
	push {lr}
	bl sub_80B57A0
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B5B18
sub_80B5B18: @ 0x080B5B18
	push {r4, r5, lr}
	adds r5, r0, #0
	bl GetPartyGoldAmount
	adds r4, r0, #0
	bl sub_8031ED8
	cmp r0, #2
	beq _080B5B5C
	cmp r0, #2
	bgt _080B5B34
	cmp r0, #1
	beq _080B5B3E
	b _080B5B90
_080B5B34:
	cmp r0, #3
	beq _080B5B6C
	cmp r0, #4
	beq _080B5B88
	b _080B5B90
_080B5B3E:
	bl sub_8031ECC
	lsls r0, r0, #1
	bl sub_8008A18
	ldr r0, _080B5B58  @ 0x000008D6
	adds r1, r5, #0
	bl sub_80B5C04
	bl sub_8031ECC
	lsls r0, r0, #1
	b _080B5B78
	.align 2, 0
_080B5B58: .4byte 0x000008D6
_080B5B5C:
	ldr r0, _080B5B68  @ 0x000008D7
	adds r1, r5, #0
	bl sub_80B5C04
	b _080B5B90
	.align 2, 0
_080B5B68: .4byte 0x000008D7
_080B5B6C:
	ldr r0, _080B5B84  @ 0x000008D9
	adds r1, r5, #0
	bl sub_80B5C04
	bl sub_8031ECC
_080B5B78:
	adds r4, r4, r0
	adds r0, r4, #0
	bl SetPartyGoldAmount
	b _080B5B90
	.align 2, 0
_080B5B84: .4byte 0x000008D9
_080B5B88:
	ldr r0, _080B5B98  @ 0x000008D8
	adds r1, r5, #0
	bl sub_80B5C04
_080B5B90:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B5B98: .4byte 0x000008D8

	THUMB_FUNC_START sub_80B5B9C
sub_80B5B9C: @ 0x080B5B9C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8031ED8
	cmp r0, #2
	beq _080B5BD6
	cmp r0, #2
	bgt _080B5BB2
	cmp r0, #1
	beq _080B5BB6
	b _080B5BD6
_080B5BB2:
	cmp r0, #3
	bne _080B5BD6
_080B5BB6:
	ldr r0, _080B5BDC  @ gUnknown_02022E5E
	bl sub_80B4ED4
	ldr r0, _080B5BE0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B5BCE
	movs r0, #0xb9
	bl m4aSongNumStart
_080B5BCE:
	adds r0, r4, #0
	movs r1, #0x3c
	bl NewBlockingTimer
_080B5BD6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B5BDC: .4byte gUnknown_02022E5E
_080B5BE0: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B5BE4
sub_80B5BE4: @ 0x080B5BE4
	push {lr}
	ldr r0, _080B5BF8  @ gUnknown_08A394C0
	bl Proc_DeleteAllWithScript
	ldr r0, _080B5BFC  @ gProcScr_MoveUnit
	ldr r1, _080B5C00  @ MU_Show
	bl Proc_ForEachWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080B5BF8: .4byte gUnknown_08A394C0
_080B5BFC: .4byte gProcScr_MoveUnit
_080B5C00: .4byte MU_Show

	THUMB_FUNC_START sub_80B5C04
sub_80B5C04: @ 0x080B5C04
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	bl sub_8006978
	bl sub_8008250
	adds r0, r4, #0
	bl GetStringFromIndex
	adds r2, r0, #0
	movs r0, #8
	movs r1, #2
	adds r3, r5, #0
	bl sub_800698C
	movs r0, #0
	bl sub_8006B10
	movs r0, #1
	bl sub_8006AA8
	movs r0, #2
	bl sub_8006AA8
	movs r0, #4
	bl sub_8006AA8
	movs r0, #1
	bl sub_8007838
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B5C48
sub_80B5C48: @ 0x080B5C48
	push {r4, r5, r6, lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	movs r0, #7
	movs r1, #9
	movs r2, #0x10
	movs r3, #6
	bl DrawUiFrame2
	movs r0, #0
	bl SetFont
	bl Font_LoadForUI
	ldr r4, _080B5CD4  @ gUnknown_02022F38
	ldr r0, _080B5CD8  @ gMid_Lv
	ldr r0, [r0]
	bl GetStringFromIndex
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl sub_801443C
	adds r0, r4, #0
	adds r0, #8
	ldr r5, _080B5CDC  @ gUnknown_0203A8F0
	ldr r1, [r5, #4]
	movs r2, #8
	ldrsb r2, [r1, r2]
	movs r1, #2
	bl sub_8004B88
	adds r6, r4, #0
	adds r6, #0x80
	ldr r0, [r5, #4]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r2, r0, #0
	adds r0, r6, #0
	movs r1, #0
	bl sub_801443C
	subs r6, #0x72
	ldr r0, [r5, #4]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r2, r0, #0
	adds r0, r6, #0
	movs r1, #0
	bl sub_801443C
	adds r4, #0x8e
	ldrh r0, [r5, #0x1c]
	bl GetItemName
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl sub_801443C
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B5CD4: .4byte gUnknown_02022F38
_080B5CD8: .4byte gMid_Lv
_080B5CDC: .4byte gUnknown_0203A8F0

	THUMB_FUNC_START sub_80B5CE0
sub_80B5CE0: @ 0x080B5CE0
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8031ED8
	cmp r0, #1
	bne _080B5D08
	ldr r0, _080B5D04  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	bne _080B5D22
	movs r0, #0x3a
	movs r1, #0
	bl Sound_PlaySong8002448
	b _080B5D22
	.align 2, 0
_080B5D04: .4byte gUnknown_0202BCF0
_080B5D08:
	ldr r0, _080B5D28  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	bne _080B5D1C
	movs r0, #0x38
	movs r1, #0
	bl Sound_PlaySong8002448
_080B5D1C:
	adds r0, r4, #0
	bl Proc_Delete
_080B5D22:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B5D28: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B5D2C
sub_80B5D2C: @ 0x080B5D2C
	push {lr}
	movs r0, #0x38
	movs r1, #0
	movs r2, #0
	bl Sound_PlaySong80024E4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B5D3C
sub_80B5D3C: @ 0x080B5D3C
	push {lr}
	bl CallSuspendPromptEvent
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B5D48
sub_80B5D48: @ 0x080B5D48
	push {lr}
	bl sub_8008A00
	cmp r0, #1
	bne _080B5D56
	movs r0, #1
	b _080B5D58
_080B5D56:
	movs r0, #0
_080B5D58:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B5D5C
sub_80B5D5C: @ 0x080B5D5C
	push {lr}
	ldr r1, _080B5D70  @ gActionData
	movs r0, #0
	strb r0, [r1, #0x16]
	movs r0, #3
	bl SaveSuspendedGame
	pop {r0}
	bx r0
	.align 2, 0
_080B5D70: .4byte gActionData

	THUMB_FUNC_START sub_80B5D74
sub_80B5D74: @ 0x080B5D74
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	bl GetGameTotalTurnCount2
	mov r9, r0
	movs r1, #0
	add r0, sp, #0xc
_080B5D8A:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge _080B5D8A
	bl GetNextChapterWinDataEntryIndex
	mov r8, r0
	movs r5, #0
	cmp r5, r8
	bge _080B5E42
	ldr r6, _080B5E68  @ gChapterDataTable
	movs r7, #0x94
	movs r0, #0x2d
	adds r0, r0, r6
	mov sl, r0
_080B5DA8:
	adds r0, r5, #0
	bl GetChapterWinDataEntry
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl DoesThisChapterCount
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B5E3C
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x39
	adds r0, r0, r1
	ldrb r1, [r0]
	ldr r0, [sp]
	adds r0, r0, r1
	str r0, [sp]
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x35
	adds r0, r0, r1
	ldrb r1, [r0]
	ldr r0, [sp, #4]
	adds r0, r0, r1
	str r0, [sp, #4]
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x31
	adds r0, r0, r1
	ldrb r1, [r0]
	ldr r0, [sp, #8]
	adds r0, r0, r1
	str r0, [sp, #8]
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	add r0, sl
	ldrb r1, [r0]
	ldr r0, [sp, #0xc]
	adds r0, r0, r1
	str r0, [sp, #0xc]
_080B5E3C:
	adds r5, #1
	cmp r5, r8
	blt _080B5DA8
_080B5E42:
	movs r5, #0
	mov r1, sp
_080B5E46:
	ldr r0, [r1]
	cmp r9, r0
	bgt _080B5E54
	adds r1, #4
	adds r5, #1
	cmp r5, #3
	ble _080B5E46
_080B5E54:
	adds r0, r5, #0
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080B5E68: .4byte gChapterDataTable

	THUMB_FUNC_START sub_80B5E6C
sub_80B5E6C: @ 0x080B5E6C
	push {lr}
	sub sp, #4
	ldr r1, _080B5EA0  @ gUnknown_08205F1C
	mov r0, sp
	movs r2, #4
	bl memcpy
	bl sub_80B622C
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
_080B5E84:
	mov r3, sp
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r2, r0
	bge _080B5E98
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _080B5E84
_080B5E98:
	adds r0, r1, #0
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
_080B5EA0: .4byte gUnknown_08205F1C

	THUMB_FUNC_START sub_80B5EA4
sub_80B5EA4: @ 0x080B5EA4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	bl sub_80A49A4
	mov r9, r0
	movs r1, #0
	add r0, sp, #0xc
_080B5EBA:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge _080B5EBA
	bl GetNextChapterWinDataEntryIndex
	mov r8, r0
	movs r5, #0
	cmp r5, r8
	bge _080B5F72
	ldr r6, _080B5F98  @ gChapterDataTable
	movs r7, #0x94
	movs r0, #0x3e
	adds r0, r0, r6
	mov sl, r0
_080B5ED8:
	adds r0, r5, #0
	bl GetChapterWinDataEntry
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl DoesThisChapterCount
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B5F6C
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x56
	adds r0, r0, r1
	ldrh r1, [r0]
	ldr r0, [sp]
	adds r0, r0, r1
	str r0, [sp]
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x4e
	adds r0, r0, r1
	ldrh r1, [r0]
	ldr r0, [sp, #4]
	adds r0, r0, r1
	str r0, [sp, #4]
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x46
	adds r0, r0, r1
	ldrh r1, [r0]
	ldr r0, [sp, #8]
	adds r0, r0, r1
	str r0, [sp, #8]
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	add r0, sl
	ldrh r1, [r0]
	ldr r0, [sp, #0xc]
	adds r0, r0, r1
	str r0, [sp, #0xc]
_080B5F6C:
	adds r5, #1
	cmp r5, r8
	blt _080B5ED8
_080B5F72:
	movs r5, #0
	mov r1, sp
_080B5F76:
	ldr r0, [r1]
	cmp r9, r0
	blt _080B5F84
	adds r1, #4
	adds r5, #1
	cmp r5, #3
	ble _080B5F76
_080B5F84:
	adds r0, r5, #0
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080B5F98: .4byte gChapterDataTable

	THUMB_FUNC_START sub_80B5F9C
sub_80B5F9C: @ 0x080B5F9C
	push {lr}
	sub sp, #4
	ldr r1, _080B5FCC  @ gUnknown_08205F20
	mov r0, sp
	movs r2, #4
	bl memcpy
	bl sub_80B6264
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
_080B5FB4:
	mov r3, sp
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r2, r0
	blt _080B5FC4
	adds r1, #1
	cmp r1, #3
	ble _080B5FB4
_080B5FC4:
	adds r0, r1, #0
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
_080B5FCC: .4byte gUnknown_08205F20

	THUMB_FUNC_START sub_80B5FD0
sub_80B5FD0: @ 0x080B5FD0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	bl GetPartyTotalGoldValue
	mov r8, r0
	movs r6, #0
	bl GetNextChapterWinDataEntryIndex
	adds r7, r0, #0
	movs r5, #0
	cmp r6, r7
	bge _080B6028
	ldr r0, _080B603C  @ gUnknown_088B08F0
	mov r9, r0
_080B5FF0:
	adds r0, r5, #0
	bl GetChapterWinDataEntry
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl DoesThisChapterCount
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B6022
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	movs r2, #0x94
	muls r1, r2, r1
	adds r0, r0, r1
	add r0, r9
	ldr r0, [r0]
	adds r6, r6, r0
_080B6022:
	adds r5, #1
	cmp r5, r7
	blt _080B5FF0
_080B6028:
	movs r0, #0x64
	mov r1, r8
	muls r1, r0, r1
	lsls r0, r6, #2
	adds r2, r0, r6
	lsls r0, r2, #4
	cmp r1, r0
	bcc _080B6040
	movs r0, #4
	b _080B6064
	.align 2, 0
_080B603C: .4byte gUnknown_088B08F0
_080B6040:
	lsls r0, r6, #4
	subs r0, r0, r6
	lsls r0, r0, #2
	cmp r1, r0
	bcc _080B604E
	movs r0, #3
	b _080B6064
_080B604E:
	lsls r0, r2, #3
	cmp r1, r0
	bcc _080B6058
	movs r0, #2
	b _080B6064
_080B6058:
	lsls r0, r2, #2
	cmp r1, r0
	bcs _080B6062
	movs r0, #0
	b _080B6064
_080B6062:
	movs r0, #1
_080B6064:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B6070
sub_80B6070: @ 0x080B6070
	push {r4, r5, r6, lr}
	ldr r5, [sp, #0x10]
	ldr r4, _080B60C0  @ gUnknown_08A3CB04
	adds r0, r0, r4
	ldrb r6, [r0]
	adds r0, r4, #5
	adds r1, r1, r0
	ldrb r0, [r1]
	adds r1, r4, #0
	adds r1, #0xa
	adds r2, r2, r1
	adds r0, r6, r0
	ldrb r2, [r2]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	adds r1, #5
	adds r3, r3, r1
	lsrs r0, r0, #0x10
	ldrb r3, [r3]
	adds r0, r0, r3
	lsls r0, r0, #0x10
	adds r4, #0x14
	adds r5, r5, r4
	lsrs r0, r0, #0x10
	ldrb r5, [r5]
	adds r0, r0, r5
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0
	ldr r1, _080B60C4  @ gUnknown_08A3CB1E
_080B60AC:
	ldrh r2, [r1]
	cmp r6, r2
	bcc _080B60BA
	adds r1, #2
	adds r0, #1
	cmp r0, #4
	ble _080B60AC
_080B60BA:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080B60C0: .4byte gUnknown_08A3CB04
_080B60C4: .4byte gUnknown_08A3CB1E

	THUMB_FUNC_START sub_80B60C8
sub_80B60C8: @ 0x080B60C8
	push {r4, lr}
	ldr r3, _080B60FC  @ gUnknown_08A3CB2A
	adds r0, r0, r3
	ldrb r4, [r0]
	adds r0, r3, #5
	adds r1, r1, r0
	ldrb r0, [r1]
	adds r3, #0xa
	adds r2, r2, r3
	adds r0, r4, r0
	ldrb r2, [r2]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	movs r0, #0
	ldr r1, _080B6100  @ gUnknown_08A3CB3A
_080B60E8:
	ldrh r2, [r1]
	cmp r4, r2
	bcc _080B60F6
	adds r1, #2
	adds r0, #1
	cmp r0, #4
	ble _080B60E8
_080B60F6:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080B60FC: .4byte gUnknown_08A3CB2A
_080B6100: .4byte gUnknown_08A3CB3A

	THUMB_FUNC_START sub_80B6104
sub_80B6104: @ 0x080B6104
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	bl sub_80B5D74
	mov r8, r0
	bl sub_80B5E6C
	adds r6, r0, #0
	bl sub_80B5FD0
	adds r5, r0, #0
	bl sub_80B5EA4
	adds r4, r0, #0
	bl sub_80B5F9C
	str r0, [sp]
	mov r0, r8
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl sub_80B6070
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B6144
sub_80B6144: @ 0x080B6144
	push {r4, r5, lr}
	sub sp, #0x10
	ldr r0, _080B61BC  @ gUnknown_0202BCF0
	ldrh r5, [r0, #0x10]
	movs r1, #0xe
	ldrsb r1, [r0, r1]
	movs r0, #0x94
	muls r1, r0, r1
	ldr r0, _080B61C0  @ gChapterDataTable
	adds r4, r1, r0
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x39
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [sp]
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x35
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [sp, #4]
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x31
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [sp, #8]
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x2d
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [sp, #0xc]
	movs r2, #0
	mov r1, sp
_080B61A4:
	ldr r0, [r1]
	cmp r5, r0
	bgt _080B61B2
	adds r1, #4
	adds r2, #1
	cmp r2, #3
	ble _080B61A4
_080B61B2:
	adds r0, r2, #0
	add sp, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080B61BC: .4byte gUnknown_0202BCF0
_080B61C0: .4byte gChapterDataTable

	THUMB_FUNC_START sub_80B61C4
sub_80B61C4: @ 0x080B61C4
	push {lr}
	sub sp, #4
	ldr r1, _080B61F8  @ gUnknown_08205F24
	mov r0, sp
	movs r2, #4
	bl memcpy
	bl sub_80B6284
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
_080B61DC:
	mov r3, sp
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r2, r0
	bge _080B61F0
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _080B61DC
_080B61F0:
	adds r0, r1, #0
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
_080B61F8: .4byte gUnknown_08205F24

	THUMB_FUNC_START sub_80B61FC
sub_80B61FC: @ 0x080B61FC
	push {lr}
	ldr r2, _080B6224  @ gUnknown_08A3CB46
	adds r0, r0, r2
	ldrb r3, [r0]
	adds r2, #5
	adds r1, r1, r2
	ldrb r0, [r1]
	adds r3, r3, r0
	movs r0, #0
	ldr r1, _080B6228  @ gUnknown_08A3CB50
_080B6210:
	ldrh r2, [r1]
	cmp r3, r2
	bcc _080B621E
	adds r1, #2
	adds r0, #1
	cmp r0, #4
	ble _080B6210
_080B621E:
	pop {r1}
	bx r1
	.align 2, 0
_080B6224: .4byte gUnknown_08A3CB46
_080B6228: .4byte gUnknown_08A3CB50

	THUMB_FUNC_START sub_80B622C
sub_80B622C: @ 0x080B622C
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_080B6232:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _080B6250
	ldr r0, [r1]
	cmp r0, #0
	beq _080B6250
	ldr r0, [r1, #0xc]
	ldr r1, _080B6260  @ 0x00010004
	ands r0, r1
	cmp r0, #4
	bne _080B6250
	adds r5, #1
_080B6250:
	adds r4, #1
	cmp r4, #0x3f
	ble _080B6232
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080B6260: .4byte 0x00010004

	THUMB_FUNC_START sub_80B6264
sub_80B6264: @ 0x080B6264
	push {r4, lr}
	bl sub_80A4904
	adds r4, r0, #0
	bl sub_80A4928
	movs r1, #0x64
	muls r0, r1, r0
	adds r1, r4, #0
	bl __divsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B6284
sub_80B6284: @ 0x080B6284
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_080B628A:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _080B62BE
	ldr r2, [r0]
	cmp r2, #0
	beq _080B62BE
	ldr r0, [r0, #0xc]
	ldr r1, _080B62D0  @ 0x00010004
	ands r0, r1
	cmp r0, #4
	bne _080B62BE
	ldrb r0, [r2, #4]
	bl BWL_GetEntry
	ldrb r1, [r0, #5]
	lsls r1, r1, #0x1a
	lsrs r1, r1, #0x1a
	ldr r0, _080B62D4  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	bne _080B62BE
	adds r5, #1
_080B62BE:
	adds r4, #1
	cmp r4, #0x3f
	ble _080B628A
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080B62D0: .4byte 0x00010004
_080B62D4: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B62D8
sub_80B62D8: @ 0x080B62D8
	bx lr

	THUMB_FUNC_START sub_80B62DC
sub_80B62DC: @ 0x080B62DC
	push {r4, r5, r6, lr}
	bl GetPartyTotalGoldValue
	ldr r1, _080B6324  @ gUnknown_0202BCF0
	ldr r5, [r1, #0x30]
	subs r5, r0, r5
	str r0, [r1, #0x30]
	bl GetNextChapterWinDataEntryIndex
	subs r0, #1
	bl GetChapterWinDataEntry
	adds r6, r0, #0
	ldr r4, _080B6328  @ gChapterDataTable
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	ldr r1, [r6]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	movs r2, #0x94
	muls r1, r2, r1
	adds r0, r0, r1
	adds r4, #0x60
	adds r0, r0, r4
	ldr r1, [r0]
	movs r0, #0x64
	muls r5, r0, r5
	lsls r0, r1, #2
	adds r2, r0, r1
	lsls r0, r2, #4
	cmp r5, r0
	blt _080B632C
	movs r0, #4
	b _080B6350
	.align 2, 0
_080B6324: .4byte gUnknown_0202BCF0
_080B6328: .4byte gChapterDataTable
_080B632C:
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r5, r0
	blt _080B633A
	movs r0, #3
	b _080B6350
_080B633A:
	lsls r0, r2, #3
	cmp r5, r0
	blt _080B6344
	movs r0, #2
	b _080B6350
_080B6344:
	lsls r0, r2, #2
	cmp r5, r0
	bge _080B634E
	movs r0, #0
	b _080B6350
_080B634E:
	movs r0, #1
_080B6350:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B6358
sub_80B6358: @ 0x080B6358
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	bl sub_80A4904
	adds r4, r0, #0
	bl sub_80A4928
	adds r5, r0, #0
	ldr r7, _080B638C  @ 0x000FFFFF
	cmp r4, r7
	ble _080B6374
	adds r4, r7, #0
_080B6374:
	cmp r5, r7
	ble _080B637A
	adds r5, r7, #0
_080B637A:
	ldr r6, _080B6390  @ gUnknown_0202BCF0
	ldr r0, [r6, #0x34]
	mov r8, r0
	lsls r0, r0, #0xc
	lsrs r2, r0, #0xc
	cmp r4, r2
	bne _080B6394
	movs r0, #0x28
	b _080B63DC
	.align 2, 0
_080B638C: .4byte 0x000FFFFF
_080B6390: .4byte gUnknown_0202BCF0
_080B6394:
	ldrh r1, [r6, #0x36]
	lsrs r1, r1, #4
	movs r3, #0x38
	adds r3, r3, r6
	mov r9, r3
	ldrb r0, [r3]
	lsls r0, r0, #0xc
	orrs r0, r1
	subs r0, r5, r0
	movs r1, #0x64
	muls r0, r1, r0
	subs r1, r4, r2
	bl __divsi3
	adds r3, r0, #0
	cmp r3, #0x64
	ble _080B63B8
	movs r3, #0x64
_080B63B8:
	ands r4, r7
	ldr r0, _080B63E8  @ 0xFFF00000
	mov r1, r8
	ands r0, r1
	orrs r0, r4
	str r0, [r6, #0x34]
	ldr r1, _080B63EC  @ 0x00000FFF
	ands r1, r5
	lsls r1, r1, #4
	ldrh r2, [r6, #0x36]
	movs r0, #0xf
	ands r0, r2
	orrs r0, r1
	strh r0, [r6, #0x36]
	lsrs r0, r5, #0xc
	mov r1, r9
	strb r0, [r1]
	adds r0, r3, #0
_080B63DC:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080B63E8: .4byte 0xFFF00000
_080B63EC: .4byte 0x00000FFF

	THUMB_FUNC_START sub_80B63F0
sub_80B63F0: @ 0x080B63F0
	push {lr}
	sub sp, #4
	ldr r1, _080B6420  @ gUnknown_08205F20
	mov r0, sp
	movs r2, #4
	bl memcpy
	bl sub_80B6358
	adds r2, r0, #0
	movs r1, #0
_080B6406:
	mov r3, sp
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r2, r0
	blt _080B6416
	adds r1, #1
	cmp r1, #3
	ble _080B6406
_080B6416:
	adds r0, r1, #0
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
_080B6420: .4byte gUnknown_08205F20

	THUMB_FUNC_START sub_80B6424
sub_80B6424: @ 0x080B6424
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	movs r1, #0
	add r0, sp, #0xc
_080B642C:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge _080B642C
	bl sub_80A49A4
	adds r1, r0, #0
	ldr r4, _080B64F4  @ 0x000FFFFF
	cmp r1, r4
	ble _080B6442
	adds r1, r4, #0
_080B6442:
	ldr r3, _080B64F8  @ gUnknown_0202BCF0
	ldr r2, [r3, #0x38]
	lsls r0, r2, #4
	lsrs r0, r0, #0xc
	subs r7, r1, r0
	ands r1, r4
	lsls r1, r1, #8
	ldr r0, _080B64FC  @ 0xF00000FF
	ands r0, r2
	orrs r0, r1
	str r0, [r3, #0x38]
	bl GetNextChapterWinDataEntryIndex
	subs r0, #1
	bl GetChapterWinDataEntry
	adds r5, r0, #0
	bl IsDifficultMode
	ldr r6, _080B6500  @ gChapterDataTable
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r5]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	movs r4, #0x94
	muls r1, r4, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x56
	adds r0, r0, r1
	ldrh r0, [r0]
	str r0, [sp]
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r5]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r4, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x4e
	adds r0, r0, r1
	ldrh r0, [r0]
	str r0, [sp, #4]
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r5]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r4, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x46
	adds r0, r0, r1
	ldrh r0, [r0]
	str r0, [sp, #8]
	bl IsDifficultMode
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r5]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r4, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x3e
	adds r0, r0, r1
	ldrh r0, [r0]
	str r0, [sp, #0xc]
	movs r2, #0
	mov r1, sp
_080B64DC:
	ldr r0, [r1]
	cmp r7, r0
	blt _080B64EA
	adds r1, #4
	adds r2, #1
	cmp r2, #3
	ble _080B64DC
_080B64EA:
	adds r0, r2, #0
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080B64F4: .4byte 0x000FFFFF
_080B64F8: .4byte gUnknown_0202BCF0
_080B64FC: .4byte 0xF00000FF
_080B6500: .4byte gChapterDataTable

	THUMB_FUNC_START ComputeChapterRankings
ComputeChapterRankings: @ 0x080B6504
	push {r4, r5, r6, lr}
	sub sp, #4
	bl GetNextChapterWinDataEntryIndex
	cmp r0, #0
	ble _080B65CE
	ldr r6, _080B65D8  @ gUnknown_0202BCF0
	ldrb r0, [r6, #0x1b]
	cmp r0, #3
	bgt _080B6586
	cmp r0, #1
	blt _080B6586
	bl sub_80B6144
	adds r5, r6, #0
	adds r5, #0x3e
	movs r4, #7
	ands r0, r4
	lsls r0, r0, #2
	ldrb r2, [r5]
	movs r1, #0x1d
	negs r1, r1
	ands r1, r2
	orrs r1, r0
	strb r1, [r5]
	bl sub_80B61C4
	lsls r0, r0, #5
	ldrb r2, [r5]
	movs r1, #0x1f
	ands r1, r2
	orrs r1, r0
	strb r1, [r5]
	bl sub_80B62DC
	movs r1, #7
	ands r1, r0
	lsls r1, r1, #0xf
	ldr r0, [r6, #0x3c]
	ldr r2, _080B65DC  @ 0xFFFC7FFF
	ands r0, r2
	orrs r0, r1
	str r0, [r6, #0x3c]
	bl sub_80B63F0
	movs r1, #7
	ands r0, r1
	lsls r0, r0, #6
	ldrh r2, [r6, #0x3c]
	ldr r1, _080B65E0  @ 0xFFFFFE3F
	ands r1, r2
	orrs r1, r0
	strh r1, [r6, #0x3c]
	bl sub_80B6424
	adds r3, r6, #0
	adds r3, #0x3d
	ands r0, r4
	lsls r0, r0, #1
	ldrb r2, [r3]
	movs r1, #0xf
	negs r1, r1
	ands r1, r2
	orrs r1, r0
	strb r1, [r3]
_080B6586:
	ldr r5, _080B65D8  @ gUnknown_0202BCF0
	adds r0, r5, #0
	adds r0, #0x3e
	ldrb r1, [r0]
	lsls r0, r1, #0x1b
	lsrs r0, r0, #0x1d
	lsrs r1, r1, #5
	ldr r2, [r5, #0x3c]
	lsls r2, r2, #0xe
	lsrs r2, r2, #0x1d
	adds r3, r5, #0
	adds r3, #0x3d
	ldrb r3, [r3]
	lsls r3, r3, #0x1c
	lsrs r3, r3, #0x1d
	ldrh r4, [r5, #0x3c]
	lsls r4, r4, #0x17
	lsrs r4, r4, #0x1d
	str r4, [sp]
	bl sub_80B6070
	ldrh r2, [r5, #0x2c]
	lsls r1, r2, #0x13
	lsrs r1, r1, #0x17
	adds r1, r1, r0
	cmp r1, #0xff
	ble _080B65BE
	movs r1, #0xff
_080B65BE:
	ldr r3, _080B65E4  @ 0x000001FF
	adds r0, r3, #0
	ands r1, r0
	lsls r1, r1, #4
	ldr r0, _080B65E8  @ 0xFFFFE00F
	ands r0, r2
	orrs r0, r1
	strh r0, [r5, #0x2c]
_080B65CE:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B65D8: .4byte gUnknown_0202BCF0
_080B65DC: .4byte 0xFFFC7FFF
_080B65E0: .4byte 0xFFFFFE3F
_080B65E4: .4byte 0x000001FF
_080B65E8: .4byte 0xFFFFE00F

	THUMB_FUNC_START sub_80B65EC
sub_80B65EC: @ 0x080B65EC
	ldr r0, _080B65F0  @ gUnknown_08A3CCEC
	bx lr
	.align 2, 0
_080B65F0: .4byte gUnknown_08A3CCEC

	THUMB_FUNC_START sub_80B65F4
sub_80B65F4: @ 0x080B65F4
	bx lr

	THUMB_FUNC_START sub_80B65F8
sub_80B65F8: @ 0x080B65F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r9, r0
	adds r7, r1, #0
	mov r8, r2
	mov sl, r3
	ldr r0, [sp, #0x20]
	bl sub_80B65EC
	adds r6, r0, #0
	movs r5, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r4, r7, r0
_080B661A:
	ldr r0, [r6]
	lsls r1, r5, #2
	adds r1, r1, r0
	ldr r0, [r1]
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	movs r2, #0x80
	lsls r2, r2, #4
	adds r4, r4, r2
	adds r5, #1
	cmp r5, #9
	ble _080B661A
	ldr r1, [r6, #4]
	mov r3, r8
	lsls r2, r3, #0xc
	lsls r0, r7, #0x11
	lsrs r0, r0, #0x16
	adds r2, r2, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r0, r9
	bl CallARM_FillTileRect
	ldr r0, [r6, #8]
	mov r2, r8
	lsls r1, r2, #5
	mov r3, sl
	lsls r2, r3, #5
	bl CopyToPaletteBuffer
	ldr r0, [sp, #0x20]
	cmp r0, #0x7f
	bgt _080B6666
	movs r0, #0
	ldr r1, [sp, #0x20]
	bl sub_80A4064
_080B6666:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B6674
sub_80B6674: @ 0x080B6674
	push {r4, r5, r6, r7, lr}
	adds r5, r3, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r7, r2, #0x10
	movs r6, #0
	bl GetStringFromIndex
	adds r1, r5, #0
	bl sub_80AEABC
	adds r5, r0, #0
	movs r0, #1
	adds r1, r5, #0
	bl sub_80AEADC
	adds r5, r0, #0
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r4
	cmp r0, #0
	beq _080B66B8
	ldr r0, _080B66B4  @ 0x00007FFF
	ands r4, r0
	adds r0, r4, #0
	bl sub_80BBA28
	b _080B6700
	.align 2, 0
_080B66B4: .4byte 0x00007FFF
_080B66B8:
	ldr r0, _080B66D0  @ 0x00007FFF
	ands r4, r0
	adds r0, r4, #0
	bl GetROMChapterStruct
	adds r0, #0x70
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r1, r0, #0
	b _080B66E8
	.align 2, 0
_080B66D0: .4byte 0x00007FFF
_080B66D4:
	cmp r2, #0x21
	bne _080B66E6
	movs r0, #1
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne _080B66E6
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_080B66E6:
	adds r1, #1
_080B66E8:
	ldrb r2, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne _080B66D4
	adds r0, r4, #0
	bl GetROMChapterStruct
	adds r0, #0x70
	ldrh r0, [r0]
	bl GetStringFromIndex
_080B6700:
	adds r1, r5, #0
	bl sub_80AEABC
	adds r5, r0, #0
	adds r0, r7, #0
	bl GetStringFromIndex
	adds r0, r0, r6
	adds r1, r5, #0
	bl sub_80AEABC
	adds r5, r0, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B6720
sub_80B6720: @ 0x080B6720
	push {lr}
	adds r2, r0, #0
	ldr r1, _080B6728  @ gUnknown_08A3D1B0
	b _080B6738
	.align 2, 0
_080B6728: .4byte gUnknown_08A3D1B0
_080B672C:
	ldrb r0, [r1]
	cmp r0, r2
	bne _080B6736
	ldr r0, [r1, #4]
	b _080B6740
_080B6736:
	adds r1, #8
_080B6738:
	ldrb r0, [r1]
	cmp r0, #0
	bne _080B672C
	movs r0, #0
_080B6740:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B6744
sub_80B6744: @ 0x080B6744
	push {lr}
	adds r2, r0, #0
	ldr r1, _080B674C  @ gUnknown_08A3D2C0
	b _080B675C
	.align 2, 0
_080B674C: .4byte gUnknown_08A3D2C0
_080B6750:
	ldrb r0, [r1]
	cmp r0, r2
	bne _080B675A
	ldrb r0, [r1, #1]
	b _080B6764
_080B675A:
	adds r1, #4
_080B675C:
	ldrb r0, [r1]
	cmp r0, #0
	bne _080B6750
	movs r0, #0
_080B6764:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B6768
sub_80B6768: @ 0x080B6768
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _080B67AC  @ gUnknown_08A3CD64
	ldr r6, [r0]
	adds r0, r4, #0
	bl sub_80B6744
	adds r5, r0, #0
	cmp r5, #4
	bne _080B6786
	movs r0, #0x7d
	bl CheckGlobalEventId
	movs r4, #0x80
	lsls r4, r4, #1
_080B6786:
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	bl BWL_GetEntry
	ldrb r1, [r0, #5]
	lsls r1, r1, #0x1a
	lsrs r1, r1, #0x1a
	ldrb r0, [r0, #0xe]
	lsrs r0, r0, #7
	lsls r0, r0, #0xf
	orrs r1, r0
	cmp r5, #2
	beq _080B67C0
	cmp r5, #2
	bgt _080B67B0
	cmp r5, #0
	beq _080B67B6
	b _080B67D8
	.align 2, 0
_080B67AC: .4byte gUnknown_08A3CD64
_080B67B0:
	cmp r5, #5
	beq _080B67D4
	b _080B67D8
_080B67B6:
	ldr r0, _080B67BC  @ 0x000007D1
	movs r2, #0x22
	b _080B67C4
	.align 2, 0
_080B67BC: .4byte 0x000007D1
_080B67C0:
	ldr r0, _080B67CC  @ 0x000007D3
	ldr r2, _080B67D0  @ 0x000007D4
_080B67C4:
	adds r3, r6, #0
	bl sub_80B6674
	b _080B67D8
	.align 2, 0
_080B67CC: .4byte 0x000007D3
_080B67D0: .4byte 0x000007D4
_080B67D4:
	movs r0, #0
	b _080B67DC
_080B67D8:
	ldr r0, _080B67E4  @ gUnknown_08A3CD64
	ldr r0, [r0]
_080B67DC:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080B67E4: .4byte gUnknown_08A3CD64

	THUMB_FUNC_START sub_80B67E8
sub_80B67E8: @ 0x080B67E8
	push {lr}
	ldr r0, _080B6800  @ gUnknown_08A3F750
	ldr r1, _080B6804  @ 0x06004C00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B6808  @ gUnknown_08B12DB4
	ldr r1, _080B680C  @ 0x06008000
	bl CopyDataWithPossibleUncomp
	pop {r0}
	bx r0
	.align 2, 0
_080B6800: .4byte gUnknown_08A3F750
_080B6804: .4byte 0x06004C00
_080B6808: .4byte gUnknown_08B12DB4
_080B680C: .4byte 0x06008000

	THUMB_FUNC_START sub_80B6810
sub_80B6810: @ 0x080B6810
	push {r4, r5, lr}
	ldr r0, _080B687C  @ gUnknown_08A3F710
	movs r1, #0xc0
	lsls r1, r1, #1
	movs r2, #0x40
	bl CopyToPaletteBuffer
	ldr r0, _080B6880  @ gUnknown_08B1754C
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x40
	bl CopyToPaletteBuffer
	ldr r4, _080B6884  @ gBG3TilemapBuffer
	movs r0, #3
	bl GetBackgroundTileDataOffset
	movs r1, #0x80
	lsls r1, r1, #8
	subs r1, r1, r0
	lsls r1, r1, #0xf
	lsrs r1, r1, #0x14
	movs r0, #0xe0
	lsls r0, r0, #8
	adds r1, r1, r0
	movs r2, #0
	ldr r3, _080B6888  @ 0x0000027F
_080B6846:
	adds r0, r2, r1
	strh r0, [r4]
	adds r4, #2
	adds r2, #1
	cmp r2, r3
	ble _080B6846
	ldr r4, _080B688C  @ gBG2TilemapBuffer
	ldr r1, _080B6890  @ gUnknown_08A3FFEC
	ldr r5, _080B6894  @ 0x0000C260
	adds r0, r4, #0
	adds r2, r5, #0
	bl CallARM_FillTileRect
	movs r0, #0x90
	lsls r0, r0, #3
	adds r4, r4, r0
	ldr r1, _080B6898  @ gUnknown_08A40068
	adds r0, r4, #0
	adds r2, r5, #0
	bl CallARM_FillTileRect
	movs r0, #0xc
	bl BG_EnableSyncByMask
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B687C: .4byte gUnknown_08A3F710
_080B6880: .4byte gUnknown_08B1754C
_080B6884: .4byte gBG3TilemapBuffer
_080B6888: .4byte 0x0000027F
_080B688C: .4byte gBG2TilemapBuffer
_080B6890: .4byte gUnknown_08A3FFEC
_080B6894: .4byte 0x0000C260
_080B6898: .4byte gUnknown_08A40068

	THUMB_FUNC_START sub_80B689C
sub_80B689C: @ 0x080B689C
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #0x10
	adds r6, r0, #0
	mov r9, r1
	ldr r0, _080B6918  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r5, _080B691C  @ gUnknown_08A3D348
	ldr r0, [r5, #8]
	str r6, [sp]
	movs r1, #2
	add r1, r9
	mov r8, r1
	str r1, [sp, #4]
	movs r4, #0x1e
	str r4, [sp, #8]
	movs r1, #0x10
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #1
	movs r3, #2
	bl sub_80AC844
	ldr r0, [r5, #4]
	str r6, [sp]
	mov r1, r8
	str r1, [sp, #4]
	str r4, [sp, #8]
	movs r1, #0x12
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_80AC844
	ldr r0, [r5]
	str r6, [sp]
	mov r1, r9
	str r1, [sp, #4]
	str r4, [sp, #8]
	movs r1, #0x14
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_80AC844
	movs r0, #7
	bl BG_EnableSyncByMask
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B6918: .4byte gBG1TilemapBuffer
_080B691C: .4byte gUnknown_08A3D348

	THUMB_FUNC_START sub_80B6920
sub_80B6920: @ 0x080B6920
	push {r4, r5, r6, r7, lr}
	bl Font_InitForUIDefault
	ldr r7, _080B6968  @ gUnknown_08A3D358
	movs r6, #0x38
	movs r5, #0x28
	movs r4, #1
_080B692E:
	ldr r0, [r7]
	adds r0, r0, r5
	movs r1, #0xf
	bl Text_Init
	ldr r0, [r7]
	adds r0, r0, r6
	movs r1, #0xa
	bl Text_Init
	adds r6, #8
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _080B692E
	movs r4, #0
	ldr r5, _080B6968  @ gUnknown_08A3D358
_080B6950:
	lsls r1, r4, #3
	ldr r0, [r5]
	adds r0, r0, r1
	movs r1, #0x1a
	bl Text_Init
	adds r4, #1
	cmp r4, #4
	ble _080B6950
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B6968: .4byte gUnknown_08A3D358

	THUMB_FUNC_START sub_80B696C
sub_80B696C: @ 0x080B696C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0
	bl SetupBackgrounds
	bl ResetFaces
	bl sub_80B67E8
	bl SetDefaultColorEffects
	movs r1, #0
	strh r1, [r4, #0x2e]
	mov r0, sp
	strh r1, [r0]
	adds r1, r4, #0
	adds r1, #0x40
	ldr r2, _080B69A8  @ 0x01000010
	bl CpuSet
	ldr r0, _080B69AC  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0x1b]
	cmp r0, #1
	blt _080B69C2
	cmp r0, #2
	ble _080B69B0
	cmp r0, #3
	beq _080B69BC
	b _080B69C2
	.align 2, 0
_080B69A8: .4byte 0x01000010
_080B69AC: .4byte gUnknown_0202BCF0
_080B69B0:
	ldr r0, _080B69B8  @ gUnknown_08A3D1A8
	ldr r0, [r0]
	b _080B69C0
	.align 2, 0
_080B69B8: .4byte gUnknown_08A3D1A8
_080B69BC:
	ldr r0, _080B69D0  @ gUnknown_08A3D1A8
	ldr r0, [r0, #4]
_080B69C0:
	str r0, [r4, #0x30]
_080B69C2:
	ldr r0, [r4, #0x30]
	str r0, [r4, #0x34]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B69D0: .4byte gUnknown_08A3D1A8

	THUMB_FUNC_START sub_80B69D4
sub_80B69D4: @ 0x080B69D4
	push {lr}
	ldr r0, _080B6A04  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B6A08  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B6A0C  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	bl sub_8010E50
	bl sub_80B744C
	bl sub_80B6810
	movs r0, #7
	bl BG_EnableSyncByMask
	pop {r0}
	bx r0
	.align 2, 0
_080B6A04: .4byte gBG0TilemapBuffer
_080B6A08: .4byte gBG1TilemapBuffer
_080B6A0C: .4byte gBG2TilemapBuffer

	THUMB_FUNC_START sub_80B6A10
sub_80B6A10: @ 0x080B6A10
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #1
_080B6A16:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _080B6A3E
	ldr r0, [r2]
	cmp r0, #0
	beq _080B6A3E
	ldrb r0, [r0, #4]
	cmp r0, r5
	bne _080B6A3E
	ldr r0, [r2, #0xc]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	bne _080B6A44
	adds r0, r2, #0
	b _080B6A46
_080B6A3E:
	adds r4, #1
	cmp r4, #0x3f
	ble _080B6A16
_080B6A44:
	movs r0, #0
_080B6A46:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B6A4C
sub_80B6A4C: @ 0x080B6A4C
	push {r4, r5, lr}
	adds r5, r0, #0
	cmp r5, #0
	bne _080B6A64
	b _080B6A78
_080B6A56:
	adds r0, r5, #0
	adds r1, r4, #0
	bl GetUnitSupporterCharacter
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	b _080B6A7A
_080B6A64:
	movs r4, #0
_080B6A66:
	adds r0, r5, #0
	adds r1, r4, #0
	bl GetUnitSupportLevel
	cmp r0, #3
	beq _080B6A56
	adds r4, #1
	cmp r4, #6
	ble _080B6A66
_080B6A78:
	movs r0, #0
_080B6A7A:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B6A80
sub_80B6A80: @ 0x080B6A80
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r0, r1, #0
	ldr r1, [r0]
	ldrb r6, [r1, #4]
	bl sub_80B6A4C
	adds r5, r0, #0
	cmp r5, #0
	beq _080B6AD8
	adds r0, r6, #0
	bl GetUnitFromCharId
	ldr r0, [r0, #0xc]
	movs r7, #4
	ands r0, r7
	cmp r0, #0
	bne _080B6AD8
	adds r0, r5, #0
	bl GetUnitFromCharId
	ldr r0, [r0, #0xc]
	ands r0, r7
	cmp r0, #0
	beq _080B6AD2
	b _080B6AD8
_080B6AB4:
	movs r0, #1
	b _080B6ADA
_080B6AB8:
	ldrb r0, [r4, #1]
	adds r1, r0, #0
	cmp r1, r6
	bne _080B6AC6
	ldrb r0, [r4, #2]
	cmp r0, r5
	beq _080B6AB4
_080B6AC6:
	cmp r1, r5
	bne _080B6AD0
	ldrb r0, [r4, #2]
	cmp r0, r6
	beq _080B6AB4
_080B6AD0:
	adds r4, #8
_080B6AD2:
	ldrb r0, [r4, #1]
	cmp r0, #0
	bne _080B6AB8
_080B6AD8:
	movs r0, #0
_080B6ADA:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B6AE0
sub_80B6AE0: @ 0x080B6AE0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r0, #0
	str r0, [r4, #0x3c]
	str r0, [r4, #0x38]
_080B6AEA:
	ldr r3, [r4, #0x30]
	ldrb r0, [r3]
	cmp r0, #0
	bne _080B6AFC
	adds r0, r4, #0
	movs r1, #0x64
	bl Proc_GotoLabel
	b _080B6BD2
_080B6AFC:
	ldrb r2, [r3, #1]
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r0, r0, r4
	movs r6, #0x1f
	adds r1, r6, #0
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r5, #1
	ands r0, r5
	cmp r0, #0
	bne _080B6BCA
	ldrb r2, [r3, #2]
	lsls r0, r2, #0x18
	cmp r0, #0
	beq _080B6B32
	lsrs r0, r0, #0x1d
	lsls r0, r0, #2
	adds r0, r0, r4
	adds r1, r6, #0
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	ands r0, r5
	cmp r0, #0
	bne _080B6BCA
_080B6B32:
	ldrb r0, [r3, #1]
	bl sub_80B6A10
	adds r1, r0, #0
	str r1, [r4, #0x38]
	cmp r1, #0
	beq _080B6BCA
	ldr r0, [r4, #0x30]
	ldrb r2, [r0]
	adds r3, r0, #0
	cmp r2, #1
	beq _080B6B50
	cmp r2, #2
	beq _080B6B60
	b _080B6B92
_080B6B50:
	ldr r0, [r4, #0x34]
	bl sub_80B6A80
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080B6BCA
	ldr r3, [r4, #0x30]
	b _080B6B92
_080B6B60:
	ldrb r0, [r3, #2]
	bl sub_80B6A10
	str r0, [r4, #0x3c]
	cmp r0, #0
	beq _080B6BCA
	ldr r0, [r4, #0x38]
	bl sub_80B6A4C
	ldr r1, [r4, #0x30]
	ldrb r2, [r1, #2]
	cmp r0, r2
	bne _080B6BCA
	ldr r0, [r4, #0x38]
	ldr r0, [r0, #0xc]
	movs r2, #4
	ands r0, r2
	cmp r0, #0
	bne _080B6BCA
	ldr r0, [r4, #0x3c]
	ldr r0, [r0, #0xc]
	ands r0, r2
	adds r3, r1, #0
	cmp r0, #0
	bne _080B6BCA
_080B6B92:
	ldrb r1, [r3, #1]
	lsrs r2, r1, #5
	lsls r2, r2, #2
	adds r2, r2, r4
	movs r6, #0x1f
	adds r0, r6, #0
	ands r0, r1
	movs r5, #1
	adds r1, r5, #0
	lsls r1, r0
	ldr r0, [r2, #0x40]
	orrs r0, r1
	str r0, [r2, #0x40]
	ldrb r1, [r3, #2]
	lsls r2, r1, #0x18
	cmp r2, #0
	beq _080B6BD2
	lsrs r2, r2, #0x1d
	lsls r2, r2, #2
	adds r2, r2, r4
	adds r0, r6, #0
	ands r0, r1
	adds r1, r5, #0
	lsls r1, r0
	ldr r0, [r2, #0x40]
	orrs r0, r1
	str r0, [r2, #0x40]
	b _080B6BD2
_080B6BCA:
	ldr r0, [r4, #0x30]
	adds r0, #8
	str r0, [r4, #0x30]
	b _080B6AEA
_080B6BD2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B6BD8
sub_80B6BD8: @ 0x080B6BD8
	push {lr}
	adds r3, r0, #0
	ldr r0, [r3, #0x30]
	ldrb r1, [r0]
	cmp r1, #1
	beq _080B6BEA
	cmp r1, #2
	beq _080B6BF4
	b _080B6BFC
_080B6BEA:
	ldr r1, [r3, #0x38]
	adds r2, r3, #0
	bl sub_80B6F14
	b _080B6BFC
_080B6BF4:
	ldr r1, [r3, #0x38]
	ldr r2, [r3, #0x3c]
	bl sub_80B72A4
_080B6BFC:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B6C00
sub_80B6C00: @ 0x080B6C00
	push {lr}
	adds r3, r0, #0
	ldr r0, [r3, #0x30]
	ldr r1, [r3, #0x38]
	ldr r2, [r3, #0x3c]
	bl sub_80B742C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B6C14
sub_80B6C14: @ 0x080B6C14
	push {lr}
	sub sp, #4
	movs r0, #0
	bl SetupBackgrounds
	bl sub_8010E50
	bl sub_80B744C
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	ldr r2, _080B6C70  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080B6C70: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B6C74
sub_80B6C74: @ 0x080B6C74
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x30]
	adds r1, r0, #0
	adds r1, #8
	str r1, [r2, #0x30]
	ldrb r0, [r0, #8]
	cmp r0, #0
	bne _080B6C8E
	adds r0, r2, #0
	movs r1, #0x64
	bl Proc_GotoLabel
_080B6C8E:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B6C94
sub_80B6C94: @ 0x080B6C94
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B6CA4  @ gUnknown_08A3D35C
	bl Proc_CreateBlockingChild
	pop {r0}
	bx r0
	.align 2, 0
_080B6CA4: .4byte gUnknown_08A3D35C

	THUMB_FUNC_START sub_80B6CA8
sub_80B6CA8: @ 0x080B6CA8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #0
	mov r8, r0
_080B6CB4:
	mov r0, r8
	lsls r1, r0, #2
	adds r0, r7, #0
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, #0
	beq _080B6D0C
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl BWL_GetEntry
	adds r3, r0, #0
	mov r0, r8
	lsls r4, r0, #1
	adds r0, r7, #0
	adds r0, #0x3c
	adds r1, r0, r4
	ldrh r0, [r3, #0xc]
	lsls r0, r0, #0x12
	lsrs r0, r0, #0x14
	ldr r5, _080B6D20  @ 0x000003E7
	cmp r0, r5
	ble _080B6CE6
	adds r0, r5, #0
_080B6CE6:
	strh r0, [r1]
	adds r0, r7, #0
	adds r0, #0x40
	adds r6, r0, r4
	ldrb r2, [r3, #0xb]
	ldrb r0, [r3, #0xc]
	movs r1, #3
	ands r0, r1
	lsls r0, r0, #8
	orrs r0, r2
	cmp r0, r5
	ble _080B6D00
	adds r0, r5, #0
_080B6D00:
	strh r0, [r6]
	adds r0, r7, #0
	adds r0, #0x44
	adds r0, r0, r4
	ldrb r1, [r3]
	strh r1, [r0]
_080B6D0C:
	movs r0, #1
	add r8, r0
	mov r0, r8
	cmp r0, #1
	ble _080B6CB4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B6D20: .4byte 0x000003E7

	THUMB_FUNC_START sub_80B6D24
sub_80B6D24: @ 0x080B6D24
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r7, r0, #0
	bl sub_80B6920
	adds r0, r7, #0
	bl sub_80B6CA8
	ldr r5, _080B6EA8  @ gUnknown_08A3D348
	ldr r0, [r5]
	movs r1, #0
	bl BG_Fill
	ldr r0, [r5, #4]
	movs r1, #0
	bl BG_Fill
	ldr r0, [r5, #8]
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B6EAC  @ gUnknown_08A40204
	ldr r4, _080B6EB0  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, [r5, #8]
	ldr r6, _080B6EB4  @ 0x0000C260
	adds r1, r4, #0
	adds r2, r6, #0
	bl CallARM_FillTileRect
	ldr r0, _080B6EB8  @ gUnknown_08A400E4
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, [r5, #4]
	adds r1, r4, #0
	adds r2, r6, #0
	bl CallARM_FillTileRect
	ldr r0, [r7, #0x38]
	ldrb r0, [r0, #1]
	bl sub_80B6720
	bl GetStringFromIndex
	adds r4, r0, #0
	movs r0, #0x78
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	ldr r6, _080B6EBC  @ gUnknown_08A3D358
	ldr r0, [r6]
	adds r0, #0x28
	ldr r1, [r5]
	adds r1, #0xc2
	movs r2, #0
	mov r8, r2
	str r2, [sp]
	str r4, [sp, #4]
	bl DrawTextInline
	ldr r0, _080B6EC0  @ 0x0000051F
	bl GetStringFromIndex
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x40
	ldr r1, [r5]
	adds r1, #0x62
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	movs r0, #0xa4
	lsls r0, r0, #3
	bl GetStringFromIndex
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x40
	ldr r1, [r5]
	adds r1, #0x62
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0x20
	bl DrawTextInline
	ldr r0, _080B6EC4  @ 0x00000521
	bl GetStringFromIndex
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x40
	ldr r1, [r5]
	adds r1, #0x62
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0x40
	bl DrawTextInline
	ldrh r0, [r7, #0x3c]
	bl sub_80AEBEC
	lsls r0, r0, #1
	adds r0, #0x62
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r7, #0x3c]
	adds r0, r1, #0
	movs r1, #2
	bl sub_8004B88
	adds r4, r7, #0
	adds r4, #0x40
	ldrh r0, [r4]
	bl sub_80AEBEC
	lsls r0, r0, #1
	adds r0, #0x6a
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r4]
	adds r0, r1, #0
	movs r1, #2
	bl sub_8004B88
	adds r4, #4
	ldrh r0, [r4]
	bl sub_80AEBEC
	lsls r0, r0, #1
	adds r0, #0x72
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r4]
	adds r0, r1, #0
	movs r1, #2
	bl sub_8004B88
	ldr r2, _080B6EC8  @ gCharacterData
	ldr r0, [r7, #0x38]
	ldrb r0, [r0, #1]
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r2
	ldrh r1, [r0, #6]
	movs r2, #0xd0
	lsls r2, r2, #1
	ldr r0, _080B6ECC  @ 0x00000502
	str r0, [sp]
	movs r0, #0
	movs r3, #0x38
	bl sub_80064F4
	ldr r0, [r7, #0x2c]
	ldr r0, [r0, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _080B6E92
	movs r0, #0x16
	bl ArchivePalette
	movs r3, #0x80
	lsls r3, r3, #0xf
	movs r0, #0xc0
	movs r1, #0xc0
	movs r2, #0xc0
	bl WriteFadedPaletteFromArchive
_080B6E92:
	mov r0, r8
	str r0, [r7, #0x34]
	bl SetDefaultColorEffects
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B6EA8: .4byte gUnknown_08A3D348
_080B6EAC: .4byte gUnknown_08A40204
_080B6EB0: .4byte gUnknown_02020188
_080B6EB4: .4byte 0x0000C260
_080B6EB8: .4byte gUnknown_08A400E4
_080B6EBC: .4byte gUnknown_08A3D358
_080B6EC0: .4byte 0x0000051F
_080B6EC4: .4byte 0x00000521
_080B6EC8: .4byte gCharacterData
_080B6ECC: .4byte 0x00000502

	THUMB_FUNC_START sub_80B6ED0
sub_80B6ED0: @ 0x080B6ED0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r4, #0x1e
	ldr r0, _080B6F0C  @ gUnknown_08A3D40C
	ldr r1, [r6, #0x34]
	adds r0, r1, r0
	ldrb r5, [r0]
	adds r1, #1
	str r1, [r6, #0x34]
	subs r4, r4, r5
	lsls r1, r4, #3
	adds r1, #0xb0
	ldr r0, _080B6F10  @ 0x000001FF
	ands r1, r0
	movs r0, #0
	movs r2, #0x38
	bl sub_8006618
	adds r0, r4, #0
	movs r1, #0
	bl sub_80B689C
	cmp r5, #0x1e
	bne _080B6F06
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
_080B6F06:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B6F0C: .4byte gUnknown_08A3D40C
_080B6F10: .4byte 0x000001FF

	THUMB_FUNC_START sub_80B6F14
sub_80B6F14: @ 0x080B6F14
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r1, r2, #0
	ldr r0, _080B6F30  @ gUnknown_08A3D420
	bl Proc_CreateBlockingChild
	str r4, [r0, #0x2c]
	movs r1, #0
	str r1, [r0, #0x30]
	str r5, [r0, #0x38]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B6F30: .4byte gUnknown_08A3D420

	THUMB_FUNC_START sub_80B6F34
sub_80B6F34: @ 0x080B6F34
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	bl sub_80B6920
	adds r0, r7, #0
	bl sub_80B6CA8
	ldr r5, _080B71A0  @ gUnknown_08A3D348
	ldr r0, [r5]
	movs r1, #0
	bl BG_Fill
	ldr r0, [r5, #4]
	movs r1, #0
	bl BG_Fill
	ldr r0, [r5, #8]
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B71A4  @ gUnknown_08A40470
	ldr r4, _080B71A8  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, [r5, #8]
	ldr r6, _080B71AC  @ 0x0000C260
	adds r1, r4, #0
	adds r2, r6, #0
	bl CallARM_FillTileRect
	ldr r0, _080B71B0  @ gUnknown_08A4034C
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, [r5, #4]
	adds r1, r4, #0
	adds r2, r6, #0
	bl CallARM_FillTileRect
	ldr r0, [r7, #0x38]
	ldrb r0, [r0, #1]
	bl sub_80B6720
	bl GetStringFromIndex
	adds r4, r0, #0
	movs r0, #0x78
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	ldr r6, _080B71B4  @ gUnknown_08A3D358
	ldr r0, [r6]
	adds r0, #0x28
	ldr r1, [r5]
	adds r1, #0xc2
	movs r2, #0
	mov r8, r2
	str r2, [sp]
	str r4, [sp, #4]
	bl DrawTextInline
	ldr r3, _080B71B8  @ 0x0000051F
	mov sl, r3
	mov r0, sl
	bl GetStringFromIndex
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x38
	ldr r1, [r5]
	adds r1, #0x62
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	movs r0, #0xa4
	lsls r0, r0, #3
	bl GetStringFromIndex
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x38
	ldr r1, [r5]
	adds r1, #0x62
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0x20
	bl DrawTextInline
	ldr r0, _080B71BC  @ 0x00000521
	mov r9, r0
	bl GetStringFromIndex
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x38
	ldr r1, [r5]
	adds r1, #0x62
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0x40
	bl DrawTextInline
	ldrh r0, [r7, #0x3c]
	bl sub_80AEBEC
	lsls r0, r0, #1
	adds r0, #0x62
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r7, #0x3c]
	adds r0, r1, #0
	movs r1, #2
	bl sub_8004B88
	adds r4, r7, #0
	adds r4, #0x40
	ldrh r0, [r4]
	bl sub_80AEBEC
	lsls r0, r0, #1
	adds r0, #0x6a
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r4]
	adds r0, r1, #0
	movs r1, #2
	bl sub_8004B88
	adds r4, #4
	ldrh r0, [r4]
	bl sub_80AEBEC
	lsls r0, r0, #1
	adds r0, #0x72
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r4]
	adds r0, r1, #0
	movs r1, #2
	bl sub_8004B88
	ldr r0, [r7, #0x38]
	ldrb r0, [r0, #2]
	bl sub_80B6720
	bl GetStringFromIndex
	adds r4, r0, #0
	movs r0, #0x78
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	ldr r0, [r6]
	adds r0, #0x30
	ldr r1, [r5]
	ldr r2, _080B71C0  @ 0x0000045C
	adds r1, r1, r2
	mov r2, r8
	str r2, [sp]
	str r4, [sp, #4]
	movs r2, #0
	bl DrawTextInline
	mov r0, sl
	bl GetStringFromIndex
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x40
	ldr r1, [r5]
	ldr r4, _080B71C4  @ 0x00000442
	adds r1, r1, r4
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	movs r0, #0xa4
	lsls r0, r0, #3
	bl GetStringFromIndex
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x40
	ldr r1, [r5]
	adds r1, r1, r4
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0x20
	bl DrawTextInline
	mov r0, r9
	bl GetStringFromIndex
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x40
	ldr r1, [r5]
	adds r1, r1, r4
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0x40
	bl DrawTextInline
	ldrh r0, [r7, #0x3e]
	bl sub_80AEBEC
	lsls r0, r0, #1
	adds r0, r0, r4
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r7, #0x3e]
	adds r0, r1, #0
	movs r1, #2
	bl sub_8004B88
	adds r4, r7, #0
	adds r4, #0x42
	ldrh r0, [r4]
	bl sub_80AEBEC
	lsls r0, r0, #1
	ldr r1, _080B71C8  @ 0x0000044A
	adds r0, r0, r1
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r4]
	adds r0, r1, #0
	movs r1, #2
	bl sub_8004B88
	adds r4, #4
	ldrh r0, [r4]
	bl sub_80AEBEC
	lsls r0, r0, #1
	ldr r2, _080B71CC  @ 0x00000452
	adds r0, r0, r2
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r4]
	adds r0, r1, #0
	movs r1, #2
	bl sub_8004B88
	mov r3, r8
	str r3, [r7, #0x34]
	bl SetDefaultColorEffects
	ldr r5, _080B71D0  @ gCharacterData
	ldr r0, [r7, #0x38]
	ldrb r0, [r0, #1]
	subs r0, #1
	movs r4, #0x34
	muls r0, r4, r0
	adds r0, r0, r5
	ldrh r1, [r0, #6]
	movs r2, #0x98
	lsls r2, r2, #1
	ldr r0, _080B71D4  @ 0x00000503
	str r0, [sp]
	movs r0, #0
	movs r3, #0x30
	bl sub_80064F4
	ldr r0, [r7, #0x38]
	ldrb r0, [r0, #2]
	subs r0, #1
	muls r0, r4, r0
	adds r0, r0, r5
	ldrh r1, [r0, #6]
	movs r2, #0xd0
	lsls r2, r2, #1
	ldr r0, _080B71D8  @ 0x00000502
	str r0, [sp]
	movs r0, #1
	movs r3, #0x30
	bl sub_80064F4
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B71A0: .4byte gUnknown_08A3D348
_080B71A4: .4byte gUnknown_08A40470
_080B71A8: .4byte gUnknown_02020188
_080B71AC: .4byte 0x0000C260
_080B71B0: .4byte gUnknown_08A4034C
_080B71B4: .4byte gUnknown_08A3D358
_080B71B8: .4byte 0x0000051F
_080B71BC: .4byte 0x00000521
_080B71C0: .4byte 0x0000045C
_080B71C4: .4byte 0x00000442
_080B71C8: .4byte 0x0000044A
_080B71CC: .4byte 0x00000452
_080B71D0: .4byte gCharacterData
_080B71D4: .4byte 0x00000503
_080B71D8: .4byte 0x00000502

	THUMB_FUNC_START sub_80B71DC
sub_80B71DC: @ 0x080B71DC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r5, #0x1e
	ldr r0, _080B7234  @ gUnknown_08A3D40C
	ldr r1, [r7, #0x34]
	adds r0, r1, r0
	ldrb r0, [r0]
	mov r8, r0
	adds r1, #1
	str r1, [r7, #0x34]
	subs r5, r5, r0
	lsls r4, r5, #3
	adds r1, r4, #0
	adds r1, #0x40
	ldr r6, _080B7238  @ 0x000001FF
	ands r1, r6
	movs r0, #0
	movs r2, #0x30
	bl sub_8006618
	adds r4, #0xb0
	ands r4, r6
	movs r0, #1
	adds r1, r4, #0
	movs r2, #0x30
	bl sub_8006618
	adds r0, r5, #0
	movs r1, #0
	bl sub_80B689C
	mov r0, r8
	cmp r0, #0x1e
	bne _080B722A
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
_080B722A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B7234: .4byte gUnknown_08A3D40C
_080B7238: .4byte 0x000001FF

	THUMB_FUNC_START sub_80B723C
sub_80B723C: @ 0x080B723C
	push {r4, lr}
	sub sp, #4
	movs r4, #0
	str r4, [r0, #0x34]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001F0C
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B7274
sub_80B7274: @ 0x080B7274
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x34]
	asrs r4, r0, #2
	adds r0, #1
	str r0, [r5, #0x34]
	movs r1, #0x10
	subs r1, r1, r4
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r4, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	cmp r4, #8
	bne _080B729E
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080B729E:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B72A4
sub_80B72A4: @ 0x080B72A4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r1, r3, #0
	ldr r0, _080B72C0  @ gUnknown_08A3D440
	bl Proc_CreateBlockingChild
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x38]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B72C0: .4byte gUnknown_08A3D440

	THUMB_FUNC_START sub_80B72C4
sub_80B72C4: @ 0x080B72C4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r4, _080B7344  @ gUnknown_08A3D358
	ldr r0, [r4]
	str r0, [r6, #0x48]
	movs r1, #4
	str r1, [r6, #0x40]
	str r1, [r6, #0x3c]
	movs r1, #0
	bl Text_SetXCursor
	ldr r0, [r6, #0x48]
	movs r1, #0
	bl Text_SetColorId
	movs r5, #0
	mov r8, r4
	movs r7, #0xc0
	lsls r7, r7, #1
_080B72EE:
	lsls r4, r5, #3
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r4
	bl Text_Clear
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r4
	ldr r1, _080B7348  @ gUnknown_02022CAC
	adds r1, r7, r1
	bl Text_Draw
	adds r7, #0x80
	adds r5, #1
	cmp r5, #4
	ble _080B72EE
	movs r0, #1
	bl BG_EnableSyncByMask
	ldr r2, [r6, #0x30]
	ldr r0, [r2, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _080B7330
	ldr r0, [r2]
	ldrb r0, [r0, #4]
	bl sub_80B6768
	str r0, [r6, #0x44]
	cmp r0, #0
	bne _080B733A
_080B7330:
	ldr r0, [r6, #0x2c]
	ldr r0, [r0, #4]
	bl GetStringFromIndex
	str r0, [r6, #0x44]
_080B733A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B7344: .4byte gUnknown_08A3D358
_080B7348: .4byte gUnknown_02022CAC

	THUMB_FUNC_START sub_80B734C
sub_80B734C: @ 0x080B734C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080B7378  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080B737C
	bl sub_80A4CB4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B737C
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	ldr r0, [r4, #0x14]
	movs r1, #0x64
	bl Proc_GotoLabel
	b _080B7424
	.align 2, 0
_080B7378: .4byte gKeyStatusPtr
_080B737C:
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	beq _080B7386
	subs r0, #1
	b _080B7422
_080B7386:
	movs r0, #0
	bl SetFont
	ldr r0, [r4, #0x44]
	ldrb r0, [r0]
	cmp r0, #7
	bhi _080B7416
	lsls r0, r0, #2
	ldr r1, _080B73A0  @ _080B73A4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080B73A0: .4byte _080B73A4
_080B73A4: @ jump table
	.4byte _080B73C4 @ case 0
	.4byte _080B73CC @ case 1
	.4byte _080B7416 @ case 2
	.4byte _080B7416 @ case 3
	.4byte _080B73EE @ case 4
	.4byte _080B73F8 @ case 5
	.4byte _080B7402 @ case 6
	.4byte _080B740C @ case 7
_080B73C4:
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080B7420
_080B73CC:
	ldr r0, [r4, #0x44]
	adds r0, #1
	str r0, [r4, #0x44]
	ldr r0, [r4, #0x48]
	adds r0, #8
	str r0, [r4, #0x48]
	ldr r1, [r4, #0x3c]
	adds r1, #0x10
	str r1, [r4, #0x3c]
	movs r1, #0
	bl Text_SetXCursor
	ldr r0, [r4, #0x48]
	movs r1, #0
	bl Text_SetColorId
	b _080B7420
_080B73EE:
	movs r0, #8
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	adds r0, #1
	b _080B741E
_080B73F8:
	movs r0, #0x10
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	adds r0, #1
	b _080B741E
_080B7402:
	movs r0, #0x20
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	adds r0, #1
	b _080B741E
_080B740C:
	movs r0, #0x40
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	adds r0, #1
	b _080B741E
_080B7416:
	ldr r0, [r4, #0x48]
	ldr r1, [r4, #0x44]
	bl Text_AppendChar
_080B741E:
	str r0, [r4, #0x44]
_080B7420:
	ldr r0, [r4, #0x40]
_080B7422:
	str r0, [r4, #0x3c]
_080B7424:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B742C
sub_80B742C: @ 0x080B742C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, _080B7448  @ gUnknown_08A3D478
	bl Proc_CreateBlockingChild
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x34]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B7448: .4byte gUnknown_08A3D478

	THUMB_FUNC_START sub_80B744C
sub_80B744C: @ 0x080B744C
	push {lr}
	ldr r0, _080B7458  @ gUnknown_08A3D478
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080B7458: .4byte gUnknown_08A3D478

	THUMB_FUNC_START sub_80B745C
sub_80B745C: @ 0x080B745C
	push {r4, lr}
	ldr r0, _080B7494  @ gUnknown_08A405B4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080B7498  @ gUnknown_08A405D4
	ldr r1, _080B749C  @ 0x06001000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B74A0  @ gUnknown_08A409D0
	ldr r4, _080B74A4  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B74A8  @ gBG2TilemapBuffer
	ldr r2, _080B74AC  @ 0x0000E080
	adds r1, r4, #0
	bl CallARM_FillTileRect
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B7494: .4byte gUnknown_08A405B4
_080B7498: .4byte gUnknown_08A405D4
_080B749C: .4byte 0x06001000
_080B74A0: .4byte gUnknown_08A409D0
_080B74A4: .4byte gUnknown_02020188
_080B74A8: .4byte gBG2TilemapBuffer
_080B74AC: .4byte 0x0000E080

	THUMB_FUNC_START sub_80B74B0
sub_80B74B0: @ 0x080B74B0
	push {lr}
	adds r2, r0, #0
	adds r2, #0x4c
	movs r1, #0
	strh r1, [r2]
	str r1, [r0, #0x58]
	movs r0, #0
	bl SetupBackgrounds
	bl sub_80B745C
	movs r0, #0x56
	movs r1, #7
	movs r2, #0
	bl Sound_PlaySong8002574
	bl SetDefaultColorEffects
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B74D8
sub_80B74D8: @ 0x080B74D8
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x58]
	adds r0, #1
	str r0, [r2, #0x58]
	ldr r0, _080B74FC  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #9
	ands r0, r1
	cmp r0, #0
	beq _080B74F6
	adds r0, r2, #0
	bl Proc_ClearNativeCallback
_080B74F6:
	pop {r0}
	bx r0
	.align 2, 0
_080B74FC: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_80B7500
sub_80B7500: @ 0x080B7500
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	adds r5, #0x4c
	strh r4, [r5]
	bl sub_80B745C
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B7540
sub_80B7540: @ 0x080B7540
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x4c
	ldrh r4, [r5]
	adds r0, r4, #1
	strh r0, [r5]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x12
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	cmp r4, #0x10
	bne _080B756E
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	movs r0, #0
	strh r0, [r5]
_080B756E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B7574
sub_80B7574: @ 0x080B7574
	push {lr}
	sub sp, #4
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B7598
sub_80B7598: @ 0x080B7598
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B75A8  @ gUnknown_08A3D498
	bl Proc_CreateBlockingChild
	pop {r0}
	bx r0
	.align 2, 0
_080B75A8: .4byte gUnknown_08A3D498

	THUMB_FUNC_START sub_80B75AC
sub_80B75AC: @ 0x080B75AC
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _080B75FC  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r0, _080B7600  @ gUnknown_08A09A5C
	movs r1, #0xa0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080B7604  @ gUnknown_08A07DD8
	ldr r1, _080B7608  @ 0x06004000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B760C  @ gBG2TilemapBuffer
	ldr r1, _080B7610  @ gUnknown_085A647C
	movs r2, #0xa4
	lsls r2, r2, #7
	bl CallARM_FillTileRect
	movs r0, #4
	bl BG_EnableSyncByMask
	adds r4, #0x4c
	movs r0, #0
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B75FC: .4byte gLCDControlBuffer
_080B7600: .4byte gUnknown_08A09A5C
_080B7604: .4byte gUnknown_08A07DD8
_080B7608: .4byte 0x06004000
_080B760C: .4byte gBG2TilemapBuffer
_080B7610: .4byte gUnknown_085A647C

	THUMB_FUNC_START sub_80B7614
sub_80B7614: @ 0x080B7614
	push {lr}
	adds r0, #0x4c
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	movs r1, #0
	ldrsh r2, [r0, r1]
	lsls r0, r2, #1
	adds r0, r0, r2
	cmp r0, #0
	bge _080B762C
	adds r0, #7
_080B762C:
	lsls r0, r0, #0xd
	lsrs r1, r0, #0x10
	adds r0, r2, #0
	cmp r0, #0
	bge _080B7638
	adds r0, #3
_080B7638:
	lsls r2, r0, #0xe
	lsrs r2, r2, #0x10
	movs r0, #2
	bl BG_SetPosition
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B7648
sub_80B7648: @ 0x080B7648
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, r9
	mov r4, r8
	push {r4, r5, r6}
	adds r4, r0, #0
	movs r1, #0
	str r1, [r4, #0x30]
	movs r0, #0x20
	str r0, [r4, #0x34]
	adds r0, r4, #0
	adds r0, #0x39
	strb r1, [r0]
	str r1, [r4, #0x2c]
	bl GetNextChapterWinDataEntryIndex
	adds r4, #0x38
	strb r0, [r4]
	ldr r5, _080B76FC  @ gLCDControlBuffer
	ldrb r1, [r5, #1]
	movs r4, #2
	negs r4, r4
	adds r0, r4, #0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	mov sl, r1
	ands r0, r1
	subs r1, #2
	mov r9, r1
	ands r0, r1
	subs r1, #4
	mov r8, r1
	ands r0, r1
	movs r6, #0x11
	negs r6, r6
	ands r0, r6
	strb r0, [r5, #1]
	movs r0, #0
	bl SetPrimaryHBlankHandler
	movs r0, #0
	bl SetupBackgrounds
	ldrb r0, [r5, #1]
	ands r4, r0
	mov r0, sl
	ands r4, r0
	mov r1, r9
	ands r4, r1
	mov r0, r8
	ands r4, r0
	ands r4, r6
	strb r4, [r5, #1]
	bl SetDefaultColorEffects
	bl Font_InitForUIDefault
	ldrb r1, [r5, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	ldr r0, _080B7700  @ gUnknown_08A40AD4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x40
	bl CopyToPaletteBuffer
	ldr r0, _080B7704  @ gBG3TilemapBuffer
	ldr r1, _080B7708  @ gUnknown_08A40B14
	movs r2, #0xe0
	lsls r2, r2, #8
	bl CallARM_FillTileRect
	movs r0, #8
	bl BG_EnableSyncByMask
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B76FC: .4byte gLCDControlBuffer
_080B7700: .4byte gUnknown_08A40AD4
_080B7704: .4byte gBG3TilemapBuffer
_080B7708: .4byte gUnknown_08A40B14

	THUMB_FUNC_START sub_80B770C
sub_80B770C: @ 0x080B770C
	push {r4, r5, r6, lr}
	ldr r2, _080B77EC  @ 0x0000FF78
	movs r0, #1
	movs r1, #0
	bl BG_SetPosition
	ldr r0, _080B77F0  @ gLCDControlBuffer
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x18
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x88
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r5, #4
	orrs r0, r5
	movs r4, #8
	orrs r0, r4
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r2]
	adds r2, #2
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	strb r0, [r2]
	movs r4, #0
	ldr r6, _080B77F4  @ gUnknown_08A3D674
	movs r5, #0x48
_080B7782:
	lsls r1, r4, #3
	ldr r0, [r6]
	adds r0, r0, r1
	movs r1, #5
	bl Text_Init
	ldr r0, [r6]
	adds r0, r0, r5
	movs r1, #0xd
	bl Text_Init
	adds r5, #8
	adds r4, #1
	cmp r4, #8
	ble _080B7782
	ldr r5, _080B77F4  @ gUnknown_08A3D674
	ldr r0, [r5]
	adds r0, #0x90
	movs r1, #4
	bl Text_Init
	ldr r0, [r5]
	adds r0, #0x98
	movs r1, #2
	bl Text_Init
	ldr r4, [r5]
	adds r4, #0x90
	ldr r0, _080B77F8  @ 0x0000015D
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_AppendString
	ldr r0, [r5]
	adds r0, #0x98
	movs r1, #3
	bl Text_SetColorId
	ldr r4, [r5]
	adds r4, #0x98
	ldr r0, _080B77FC  @ 0x00000157
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_AppendString
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B77EC: .4byte 0x0000FF78
_080B77F0: .4byte gLCDControlBuffer
_080B77F4: .4byte gUnknown_08A3D674
_080B77F8: .4byte 0x0000015D
_080B77FC: .4byte 0x00000157

	THUMB_FUNC_START sub_80B7800
sub_80B7800: @ 0x080B7800
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	str r0, [sp, #8]
	adds r4, r1, #0
	movs r0, #0
	str r0, [sp, #0x10]
	adds r0, r4, #0
	movs r1, #9
	bl __modsi3
	str r0, [sp, #0xc]
	lsls r7, r4, #1
	movs r0, #0x1f
	ands r7, r0
	lsls r6, r7, #5
	lsls r0, r7, #6
	ldr r1, _080B78B8  @ gBG1TilemapBuffer
	mov r9, r1
	add r0, r9
	movs r1, #0x1f
	movs r2, #1
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #2
	bl BG_EnableSyncByMask
	ldr r3, _080B78BC  @ gUnknown_08A3D674
	mov r8, r3
	ldr r0, [sp, #0xc]
	lsls r4, r0, #3
	ldr r0, [r3]
	adds r0, r0, r4
	bl Text_Clear
	adds r5, r4, #0
	adds r5, #0x48
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r5
	bl Text_Clear
	movs r0, #1
	negs r0, r0
	ldr r3, [sp, #8]
	cmp r3, r0
	bne _080B78C4
	bl GetGameTotalTurnCount
	adds r4, r0, #0
	ldr r0, _080B78C0  @ 0x0000015F
	bl GetStringFromIndex
	adds r2, r0, #0
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r5
	adds r1, r6, #0
	adds r1, #0xc
	lsls r1, r1, #1
	add r1, r9
	ldr r3, [sp, #0x10]
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	adds r0, r6, #0
	adds r0, #0x17
	lsls r0, r0, #1
	add r0, r9
	movs r1, #2
	adds r2, r4, #0
	bl sub_8004B88
	mov r1, r8
	ldr r0, [r1]
	adds r0, #0x90
	adds r1, r6, #0
	adds r1, #0x18
	lsls r1, r1, #1
	add r1, r9
	bl Text_Draw
	movs r0, #0
	b _080B7B18
	.align 2, 0
_080B78B8: .4byte gBG1TilemapBuffer
_080B78BC: .4byte gUnknown_08A3D674
_080B78C0: .4byte 0x0000015F
_080B78C4:
	ldr r3, [sp, #8]
	cmp r3, #0
	bne _080B78CC
	b _080B7B16
_080B78CC:
	ldr r0, [r3]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	mov sl, r0
	bl GetROMChapterStruct
	adds r0, #0x80
	ldrb r0, [r0]
	lsrs r0, r0, #1
	mov r9, r0
	mov r0, sl
	cmp r0, #0x23
	bls _080B78E8
	b _080B7A40
_080B78E8:
	lsls r0, r0, #2
	ldr r1, _080B78F4  @ _080B78F8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080B78F4: .4byte _080B78F8
_080B78F8: @ jump table
	.4byte _080B7988 @ case 0
	.4byte _080B7A40 @ case 1
	.4byte _080B7A40 @ case 2
	.4byte _080B7A40 @ case 3
	.4byte _080B7A40 @ case 4
	.4byte _080B79CC @ case 5
	.4byte _080B7A40 @ case 6
	.4byte _080B7A40 @ case 7
	.4byte _080B7A40 @ case 8
	.4byte _080B7A40 @ case 9
	.4byte _080B7A40 @ case 10
	.4byte _080B7A40 @ case 11
	.4byte _080B7A40 @ case 12
	.4byte _080B7A40 @ case 13
	.4byte _080B7A40 @ case 14
	.4byte _080B7A40 @ case 15
	.4byte _080B7A40 @ case 16
	.4byte _080B7A40 @ case 17
	.4byte _080B7A40 @ case 18
	.4byte _080B7A40 @ case 19
	.4byte _080B7A40 @ case 20
	.4byte _080B798E @ case 21
	.4byte _080B798E @ case 22
	.4byte _080B7A40 @ case 23
	.4byte _080B7A40 @ case 24
	.4byte _080B7A40 @ case 25
	.4byte _080B7A40 @ case 26
	.4byte _080B7A40 @ case 27
	.4byte _080B7A40 @ case 28
	.4byte _080B7A40 @ case 29
	.4byte _080B7A40 @ case 30
	.4byte _080B7A40 @ case 31
	.4byte _080B7A40 @ case 32
	.4byte _080B7A40 @ case 33
	.4byte _080B798E @ case 34
	.4byte _080B798E @ case 35
_080B7988:
	movs r0, #0xad
	lsls r0, r0, #1
	b _080B7990
_080B798E:
	ldr r0, _080B79C0  @ 0x00000159
_080B7990:
	bl GetStringFromIndex
	adds r3, r0, #0
	ldr r0, _080B79C4  @ gUnknown_08A3D674
	ldr r1, [sp, #0xc]
	lsls r5, r1, #3
	ldr r0, [r0]
	adds r0, r0, r5
	lsls r4, r7, #5
	adds r1, r4, #3
	lsls r1, r1, #1
	ldr r2, _080B79C8  @ gBG1TilemapBuffer
	adds r1, r1, r2
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	mov r8, r4
	adds r6, r5, #0
	b _080B7A84
	.align 2, 0
_080B79C0: .4byte 0x00000159
_080B79C4: .4byte gUnknown_08A3D674
_080B79C8: .4byte gBG1TilemapBuffer
_080B79CC:
	ldr r3, _080B7A38  @ gUnknown_08A3D674
	mov r8, r3
	ldr r0, [r3]
	adds r0, #0x98
	lsls r6, r7, #5
	adds r1, r6, #3
	lsls r1, r1, #1
	ldr r5, _080B7A3C  @ gBG1TilemapBuffer
	adds r1, r1, r5
	bl Text_Draw
	mov r0, r9
	bl sub_80AEBEC
	adds r0, #1
	adds r0, #3
	adds r0, r6, r0
	lsls r0, r0, #1
	adds r0, r0, r5
	movs r1, #2
	mov r2, r9
	bl sub_8004B88
	mov r0, r9
	bl sub_80AEBEC
	adds r4, r0, #0
	adds r4, #2
	adds r4, #3
	adds r4, r6, r4
	lsls r4, r4, #1
	adds r4, r4, r5
	movs r0, #0xac
	lsls r0, r0, #1
	bl GetStringFromIndex
	adds r2, r0, #0
	ldr r0, [sp, #0xc]
	lsls r5, r0, #3
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r5
	movs r1, #0
	str r1, [sp]
	str r2, [sp, #4]
	adds r1, r4, #0
	movs r2, #2
	movs r3, #0
	bl DrawTextInline
	mov r8, r6
	adds r6, r5, #0
	b _080B7A84
	.align 2, 0
_080B7A38: .4byte gUnknown_08A3D674
_080B7A3C: .4byte gBG1TilemapBuffer
_080B7A40:
	ldr r0, _080B7AAC  @ 0x00000157
	bl GetStringFromIndex
	adds r3, r0, #0
	ldr r0, _080B7AB0  @ gUnknown_08A3D674
	ldr r1, [sp, #0xc]
	lsls r6, r1, #3
	ldr r0, [r0]
	adds r0, r0, r6
	lsls r4, r7, #5
	adds r1, r4, #3
	lsls r1, r1, #1
	ldr r5, _080B7AB4  @ gBG1TilemapBuffer
	adds r1, r1, r5
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl DrawTextInline
	mov r0, r9
	bl sub_80AEBEC
	adds r0, #1
	adds r0, #3
	adds r0, r4, r0
	lsls r0, r0, #1
	adds r0, r0, r5
	movs r1, #2
	mov r2, r9
	bl sub_8004B88
	mov r8, r4
_080B7A84:
	mov r3, sl
	cmp r3, #0x15
	blt _080B7AB8
	cmp r3, #0x16
	ble _080B7A96
	cmp r3, #0x23
	bgt _080B7AB8
	cmp r3, #0x22
	blt _080B7AB8
_080B7A96:
	ldr r1, [sp, #8]
	ldm r1!, {r0}
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x17
	ldr r0, [r1]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x17
	adds r7, r7, r0
	movs r3, #1
	str r3, [sp, #0x10]
	b _080B7AC0
	.align 2, 0
_080B7AAC: .4byte 0x00000157
_080B7AB0: .4byte gUnknown_08A3D674
_080B7AB4: .4byte gBG1TilemapBuffer
_080B7AB8:
	ldr r1, [sp, #8]
	ldr r0, [r1]
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x17
_080B7AC0:
	mov r0, sl
	bl GetROMChapterStruct
	adds r0, #0x70
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r3, r0, #0
	ldr r5, _080B7B28  @ gUnknown_08A3D674
	adds r1, r6, #0
	adds r1, #0x48
	ldr r0, [r5]
	adds r0, r0, r1
	mov r1, r8
	adds r1, #5
	adds r1, #3
	lsls r1, r1, #1
	ldr r4, _080B7B2C  @ gBG1TilemapBuffer
	adds r1, r1, r4
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	movs r3, #0
	bl DrawTextInline
	mov r0, r8
	adds r0, #0x14
	adds r0, #3
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #2
	adds r2, r7, #0
	bl sub_8004B88
	ldr r0, [r5]
	adds r0, #0x90
	mov r1, r8
	adds r1, #0x15
	adds r1, #3
	lsls r1, r1, #1
	adds r1, r1, r4
	bl Text_Draw
_080B7B16:
	ldr r0, [sp, #0x10]
_080B7B18:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080B7B28: .4byte gUnknown_08A3D674
_080B7B2C: .4byte gBG1TilemapBuffer

	THUMB_FUNC_START sub_80B7B30
sub_80B7B30: @ 0x080B7B30
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	asrs r5, r0, #6
	adds r2, r5, #0
	subs r2, #0x88
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #1
	movs r1, #0
	bl BG_SetPosition
	movs r0, #0xf
	ands r0, r5
	cmp r0, #0
	bne _080B7BB2
	adds r0, r4, #0
	adds r0, #0x39
	ldrb r1, [r0]
	adds r2, r5, #0
	adds r5, r0, #0
	cmp r2, #0
	bge _080B7B60
	adds r2, #0xf
_080B7B60:
	asrs r0, r2, #4
	cmp r1, r0
	bne _080B7BB2
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r2, [r0]
	ldr r0, [r4, #0x2c]
	cmp r0, r2
	blt _080B7B96
	subs r0, r0, r2
	cmp r0, #1
	bne _080B7B82
	movs r0, #1
	negs r0, r0
	bl sub_80B7800
	b _080B7BA6
_080B7B82:
	cmp r0, #2
	ble _080B7B8E
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080B7BA6
_080B7B8E:
	movs r0, #0
	bl sub_80B7800
	b _080B7BA6
_080B7B96:
	bl GetChapterWinDataEntry
	ldrb r1, [r5]
	bl sub_80B7800
	ldr r1, [r4, #0x2c]
	adds r1, r1, r0
	str r1, [r4, #0x2c]
_080B7BA6:
	ldr r0, [r4, #0x2c]
	adds r0, #1
	str r0, [r4, #0x2c]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_080B7BB2:
	ldr r0, _080B7BD4  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #1
	ands r0, r1
	ldr r1, [r4, #0x34]
	cmp r0, #0
	beq _080B7BC8
	ldr r0, [r4, #0x30]
	adds r0, r0, r1
	str r0, [r4, #0x30]
_080B7BC8:
	ldr r0, [r4, #0x30]
	adds r0, r0, r1
	str r0, [r4, #0x30]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B7BD4: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_80B7BD8
sub_80B7BD8: @ 0x080B7BD8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp, #4]
	ldr r3, _080B7DC8  @ gUnknown_08A3D540
	ldr r0, _080B7DCC  @ 0x00009480
	str r0, [sp]
	movs r0, #2
	movs r1, #0x18
	movs r2, #0x14
	bl RegisterObjectAttributes
	ldr r3, _080B7DD0  @ gUnknown_08A3D5B4
	movs r0, #0xc9
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x80
	bl RegisterObjectAttributes
	ldr r0, _080B7DD4  @ gUnknown_0202BCF0
	ldrb r1, [r0, #0x14]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _080B7C16
	b _080B7E00
_080B7C16:
	ldr r3, _080B7DD8  @ gUnknown_08A3D560
	ldr r4, _080B7DDC  @ 0x00008480
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x38
	bl RegisterObjectAttributes
	ldr r3, _080B7DE0  @ gUnknown_08A3D56E
	str r4, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x38
	bl RegisterObjectAttributes
	ldr r3, _080B7DE4  @ gUnknown_08A3D58A
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x58
	bl RegisterObjectAttributes
	ldr r3, _080B7DE8  @ gUnknown_08A3D5A6
	movs r0, #0xe9
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x58
	bl RegisterObjectAttributes
	movs r7, #0
	ldr r0, [sp, #4]
	adds r0, #0x4c
	mov sl, r0
	ldr r1, _080B7DEC  @ gSinLookup
	mov r9, r1
	mov r8, sl
_080B7C62:
	mov r2, r8
	ldrh r0, [r2]
	cmp r0, #0x10
	bls _080B7D10
	ldr r4, _080B7DF0  @ gCosLookup
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	ldrh r1, [r2]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r2, r9
	movs r4, #0
	ldrsh r0, [r2, r4]
	negs r0, r0
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r4, r8
	ldrh r1, [r4]
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r1, _080B7DF0  @ gCosLookup
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl WriteOAMRotScaleData
	movs r0, #1
	ands r0, r7
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	lsls r0, r7, #9
	adds r0, #0x50
	adds r1, r1, r0
	asrs r2, r7, #1
	lsls r2, r2, #5
	movs r4, #0x98
	lsls r4, r4, #1
	adds r2, r2, r4
	ldr r3, _080B7DF4  @ gUnknown_08A3D624
	ldr r0, [sp, #4]
	adds r0, #0x40
	adds r0, r0, r7
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	adds r0, r7, #0
	adds r0, #0xa
	movs r4, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	movs r4, #0x90
	lsls r4, r4, #3
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #2
	bl RegisterObjectAttributes
_080B7D10:
	movs r0, #2
	add r8, r0
	adds r7, #1
	cmp r7, #2
	ble _080B7C62
	lsls r0, r7, #1
	add sl, r0
	mov r1, sl
	ldrh r0, [r1]
	cmp r0, #0x10
	bhi _080B7D28
	b _080B7FD2
_080B7D28:
	ldr r4, _080B7DEC  @ gSinLookup
	movs r2, #0x80
	adds r2, r2, r4
	mov r9, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrh r1, [r2]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrh r1, [r2]
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl WriteOAMRotScaleData
	movs r0, #1
	ands r0, r7
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	lsls r0, r7, #9
	adds r0, #0x50
	adds r1, r1, r0
	asrs r2, r7, #1
	lsls r2, r2, #5
	movs r4, #0x98
	lsls r4, r4, #1
	adds r2, r2, r4
	ldr r3, _080B7DF8  @ gUnknown_08A3D63C
	ldr r0, [sp, #4]
	adds r0, #0x40
	adds r0, r0, r7
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	ldr r0, _080B7DFC  @ 0x0000F480
	str r0, [sp]
	movs r0, #2
	bl RegisterObjectAttributes
	b _080B7FD2
	.align 2, 0
_080B7DC8: .4byte gUnknown_08A3D540
_080B7DCC: .4byte 0x00009480
_080B7DD0: .4byte gUnknown_08A3D5B4
_080B7DD4: .4byte gUnknown_0202BCF0
_080B7DD8: .4byte gUnknown_08A3D560
_080B7DDC: .4byte 0x00008480
_080B7DE0: .4byte gUnknown_08A3D56E
_080B7DE4: .4byte gUnknown_08A3D58A
_080B7DE8: .4byte gUnknown_08A3D5A6
_080B7DEC: .4byte gSinLookup
_080B7DF0: .4byte gCosLookup
_080B7DF4: .4byte gUnknown_08A3D624
_080B7DF8: .4byte gUnknown_08A3D63C
_080B7DFC: .4byte 0x0000F480
_080B7E00:
	ldr r3, _080B7FE4  @ gUnknown_08A3D560
	ldr r4, _080B7FE8  @ 0x00008480
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x30
	bl RegisterObjectAttributes
	ldr r3, _080B7FEC  @ gUnknown_08A3D56E
	str r4, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x30
	bl RegisterObjectAttributes
	ldr r3, _080B7FF0  @ gUnknown_08A3D598
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x48
	bl RegisterObjectAttributes
	ldr r3, _080B7FF4  @ gUnknown_08A3D57C
	str r4, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x48
	bl RegisterObjectAttributes
	ldr r3, _080B7FF8  @ gUnknown_08A3D58A
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x60
	bl RegisterObjectAttributes
	ldr r3, _080B7FFC  @ gUnknown_08A3D5A6
	movs r0, #0xe9
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x60
	bl RegisterObjectAttributes
	movs r7, #0
	ldr r0, [sp, #4]
	adds r0, #0x4c
	mov sl, r0
	ldr r1, _080B8000  @ gSinLookup
	mov r9, r1
	mov r8, sl
_080B7E68:
	mov r2, r8
	ldrh r0, [r2]
	cmp r0, #0x10
	bls _080B7F1A
	ldr r4, _080B8004  @ gCosLookup
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	ldrh r1, [r2]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r2, r9
	movs r4, #0
	ldrsh r0, [r2, r4]
	negs r0, r0
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r4, r8
	ldrh r1, [r4]
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r1, _080B8004  @ gCosLookup
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl WriteOAMRotScaleData
	movs r0, #1
	ands r0, r7
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	lsls r0, r7, #9
	adds r0, #0x50
	adds r1, r1, r0
	asrs r0, r7, #1
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	movs r4, #0x94
	lsls r4, r4, #1
	adds r2, r2, r4
	ldr r3, _080B8008  @ gUnknown_08A3D624
	ldr r0, [sp, #4]
	adds r0, #0x40
	adds r0, r0, r7
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	adds r0, r7, #0
	adds r0, #0xa
	movs r4, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	movs r4, #0x90
	lsls r4, r4, #3
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #2
	bl RegisterObjectAttributes
_080B7F1A:
	movs r0, #2
	add r8, r0
	adds r7, #1
	cmp r7, #4
	ble _080B7E68
	lsls r0, r7, #1
	add sl, r0
	mov r1, sl
	ldrh r0, [r1]
	cmp r0, #0x10
	bls _080B7FD2
	ldr r4, _080B8000  @ gSinLookup
	movs r2, #0x80
	adds r2, r2, r4
	mov r9, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrh r1, [r2]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrh r1, [r2]
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl WriteOAMRotScaleData
	movs r0, #1
	ands r0, r7
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	lsls r0, r7, #9
	adds r0, #0x50
	adds r1, r1, r0
	asrs r0, r7, #1
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	movs r4, #0x94
	lsls r4, r4, #1
	adds r2, r2, r4
	ldr r3, _080B800C  @ gUnknown_08A3D63C
	ldr r0, [sp, #4]
	adds r0, #0x40
	adds r0, r0, r7
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	ldr r0, _080B8010  @ 0x0000F480
	str r0, [sp]
	movs r0, #2
	bl RegisterObjectAttributes
_080B7FD2:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B7FE4: .4byte gUnknown_08A3D560
_080B7FE8: .4byte 0x00008480
_080B7FEC: .4byte gUnknown_08A3D56E
_080B7FF0: .4byte gUnknown_08A3D598
_080B7FF4: .4byte gUnknown_08A3D57C
_080B7FF8: .4byte gUnknown_08A3D58A
_080B7FFC: .4byte gUnknown_08A3D5A6
_080B8000: .4byte gSinLookup
_080B8004: .4byte gCosLookup
_080B8008: .4byte gUnknown_08A3D624
_080B800C: .4byte gUnknown_08A3D63C
_080B8010: .4byte 0x0000F480

	THUMB_FUNC_START sub_80B8014
sub_80B8014: @ 0x080B8014
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, _080B8134  @ gBG2TilemapBuffer
	adds r0, r6, #0
	movs r1, #0
	bl BG_Fill
	ldr r5, _080B8138  @ gBG3TilemapBuffer
	adds r0, r5, #0
	movs r1, #0
	bl BG_Fill
	ldr r2, _080B813C  @ gLCDControlBuffer
	ldrb r3, [r2, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	strb r0, [r2, #0xc]
	ldrb r3, [r2, #0x10]
	adds r0, r1, #0
	ands r0, r3
	movs r4, #1
	orrs r0, r4
	strb r0, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	ands r1, r0
	movs r3, #2
	orrs r1, r3
	strb r1, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x18]
	ldrb r0, [r2, #1]
	orrs r0, r4
	orrs r0, r3
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	movs r0, #1
	movs r1, #6
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	ldr r4, _080B8140  @ gUnknown_08A21658
	movs r0, #3
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B8144  @ gUnknown_08A25DCC
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	bl CopyToPaletteBuffer
	ldr r1, _080B8148  @ gUnknown_08A25ECC
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r5, #0
	bl CallARM_FillTileRect
	ldr r4, _080B814C  @ gUnknown_08A26380
	movs r0, #2
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r0, _080B8150  @ 0x06004C00
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B8154  @ gUnknown_08A268F8
	ldr r4, _080B8158  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B815C  @ gUnknown_08A268D8
	movs r1, #0xe0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r2, _080B8160  @ 0x00007260
	adds r0, r6, #0
	adds r1, r4, #0
	bl CallARM_FillTileRect
	movs r0, #0xc
	bl BG_EnableSyncByMask
	ldr r0, _080B8164  @ gUnknown_02000000
	bl sub_80AB760
	movs r0, #0x46
	movs r1, #0
	bl Sound_PlaySong80024D4
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B8134: .4byte gBG2TilemapBuffer
_080B8138: .4byte gBG3TilemapBuffer
_080B813C: .4byte gLCDControlBuffer
_080B8140: .4byte gUnknown_08A21658
_080B8144: .4byte gUnknown_08A25DCC
_080B8148: .4byte gUnknown_08A25ECC
_080B814C: .4byte gUnknown_08A26380
_080B8150: .4byte 0x06004C00
_080B8154: .4byte gUnknown_08A268F8
_080B8158: .4byte gUnknown_02020188
_080B815C: .4byte gUnknown_08A268D8
_080B8160: .4byte 0x00007260
_080B8164: .4byte gUnknown_02000000

	THUMB_FUNC_START sub_80B8168
sub_80B8168: @ 0x080B8168
	push {lr}
	bl sub_80AB77C
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B8174
sub_80B8174: @ 0x080B8174
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B8184  @ gUnknown_08A3D678
	bl Proc_CreateBlockingChild
	pop {r0}
	bx r0
	.align 2, 0
_080B8184: .4byte gUnknown_08A3D678

	THUMB_FUNC_START sub_80B8188
sub_80B8188: @ 0x080B8188
	bx lr

	THUMB_FUNC_START nullsub_7
nullsub_7: @ 0x080B818C
	bx lr

	THUMB_FUNC_START sub_80B8190
sub_80B8190: @ 0x080B8190
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	adds r4, r1, #0
	lsls r2, r2, #0x18
	lsrs r3, r2, #0x18
	movs r0, #0x1f
	mov r8, r0
	movs r2, #0xf8
	lsls r2, r2, #2
	mov ip, r2
	movs r7, #0xf8
	lsls r7, r7, #7
	mov r9, r7
	movs r6, #0xf
_080B81B2:
	ldrh r2, [r4]
	movs r0, #0x1f
	ands r0, r2
	adds r1, r0, #0
	muls r1, r3, r1
	asrs r1, r1, #5
	mov r0, r8
	ands r1, r0
	mov r0, ip
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r7, ip
	ands r0, r7
	adds r1, r1, r0
	mov r0, r9
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r2, r9
	ands r0, r2
	adds r1, r1, r0
	strh r1, [r5]
	adds r5, #2
	adds r4, #2
	subs r6, #1
	cmp r6, #0
	bge _080B81B2
	bl EnablePaletteSync
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START nullsub_5
nullsub_5: @ 0x080B81FC
	bx lr

	THUMB_FUNC_START sub_80B8200
sub_80B8200: @ 0x080B8200
	push {lr}
	movs r0, #4
	bl Sound_FadeOut800231C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B820C
sub_80B820C: @ 0x080B820C
	push {r4, lr}
	movs r2, #0
	ldr r1, _080B8238  @ 0x0000FFFF
	adds r4, r1, #0
	adds r1, r0, #0
	adds r1, #0x2c
	movs r3, #1
_080B821A:
	str r2, [r1, #4]
	strb r2, [r1, #0xa]
	strh r2, [r1, #2]
	strh r2, [r1]
	ldrh r0, [r1, #8]
	orrs r0, r4
	strh r0, [r1, #8]
	adds r1, #0xc
	subs r3, #1
	cmp r3, #0
	bge _080B821A
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B8238: .4byte 0x0000FFFF

	THUMB_FUNC_START sub_80B823C
sub_80B823C: @ 0x080B823C
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	movs r0, #0
	strh r0, [r5, #0x2a]
	ldr r0, _080B8268  @ gUnknown_08A3D6E0
	adds r1, r5, #0
	bl Proc_Create
	str r0, [r5, #0x2c]
	adds r0, r5, #0
	adds r0, #0x30
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #2
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B8268: .4byte gUnknown_08A3D6E0

	THUMB_FUNC_START sub_80B826C
sub_80B826C: @ 0x080B826C
	push {lr}
	adds r3, r0, #0
	adds r2, r3, #0
	subs r2, #0x30
	adds r0, r2, #0
	cmp r2, #0
	bge _080B827E
	adds r0, r3, #0
	subs r0, #0x29
_080B827E:
	asrs r3, r0, #3
	lsls r0, r3, #3
	subs r0, r0, r2
	str r0, [r1]
	adds r0, r3, #0
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B828C
sub_80B828C: @ 0x080B828C
	push {lr}
	ldr r0, _080B82A4  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	movs r1, #1
	cmp r0, #0
	beq _080B829E
	movs r1, #2
_080B829E:
	adds r0, r1, #0
	pop {r1}
	bx r1
	.align 2, 0
_080B82A4: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80B82A8
sub_80B82A8: @ 0x080B82A8
	push {lr}
	ldr r0, _080B82C4  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	movs r1, #0xc0
	lsls r1, r1, #5
	cmp r0, #0
	beq _080B82BE
	movs r1, #0xa0
	lsls r1, r1, #7
_080B82BE:
	adds r0, r1, #0
	pop {r1}
	bx r1
	.align 2, 0
_080B82C4: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80B82C8
sub_80B82C8: @ 0x080B82C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	mov sl, r1
	adds r0, r2, #0
	adds r6, r3, #0
	ldr r1, [sp, #0x24]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r9, r1
	mov r1, sp
	bl sub_80B826C
	mov r8, r0
	adds r4, r6, #0
	cmp r6, #0
	bge _080B82F4
	adds r4, r6, #7
_080B82F4:
	asrs r4, r4, #3
	lsls r5, r4, #3
	subs r5, r5, r6
	adds r0, r7, #0
	bl BG_GetMapBuffer
	lsls r4, r4, #6
	adds r0, r0, r4
	mov r2, r8
	lsls r1, r2, #1
	adds r0, r0, r1
	mov r3, sl
	lsrs r1, r3, #5
	movs r2, #0x80
	lsls r2, r2, #7
	adds r1, r1, r2
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r3, r9
	lsls r2, r3, #0x18
	asrs r2, r2, #0x18
	bl sub_8006738
	movs r0, #1
	lsls r0, r7
	bl BG_EnableSyncByMask
	lsls r0, r7, #0x10
	lsrs r0, r0, #0x10
	ldr r1, [sp]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	adds r2, r5, #0
	bl BG_SetPosition
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B8350
sub_80B8350: @ 0x080B8350
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	adds r4, r7, #0
	adds r4, #0x31
	ldrb r1, [r4]
	lsrs r1, r1, #1
	movs r2, #0x10
	subs r2, r2, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r1, r7, #0
	adds r1, #0x30
	ldrb r0, [r1]
	ldrb r2, [r4]
	adds r0, r0, r2
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080B83D2
	movs r6, #0
	mov r8, r1
	movs r0, #1
	negs r0, r0
	mov r9, r0
	movs r4, #0
	movs r5, #0
_080B8392:
	ldr r1, [r7, #0x2c]
	adds r0, r1, #0
	adds r0, #0x30
	adds r0, r0, r4
	ldr r0, [r0]
	cmp r0, #0
	beq _080B83C4
	adds r0, r1, r4
	adds r0, #0x36
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r9
	bne _080B83C4
	adds r0, r6, #0
	bl DeleteFaceByIndex
	ldr r0, [r7, #0x2c]
	adds r0, r0, r4
	adds r0, #0x36
	strb r5, [r0]
	ldr r0, [r7, #0x2c]
	adds r0, #0x30
	adds r0, r0, r4
	str r5, [r0]
_080B83C4:
	adds r4, #0xc
	adds r6, #1
	cmp r6, #1
	ble _080B8392
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
_080B83D2:
	adds r0, r7, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0x20
	bne _080B842A
	movs r2, #0x30
	adds r2, r2, r7
	mov r8, r2
	movs r5, #0
	movs r6, #1
_080B83E6:
	ldr r1, [r7, #0x2c]
	adds r0, r1, #0
	adds r0, #0x30
	adds r0, r0, r5
	ldr r4, [r0]
	cmp r4, #0
	beq _080B841C
	adds r0, r1, r5
	adds r0, #0x36
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _080B841C
	adds r0, r4, #0
	bl sub_80057A4
	ldr r1, _080B8438  @ 0xFFFFFBFF
	ands r1, r0
	adds r0, r4, #0
	bl sub_8005770
	ldr r0, [r7, #0x2c]
	adds r0, r0, r5
	adds r0, #0x36
	movs r1, #0
	strb r1, [r0]
_080B841C:
	adds r5, #0xc
	subs r6, #1
	cmp r6, #0
	bge _080B83E6
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
_080B842A:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B8438: .4byte 0xFFFFFBFF

	THUMB_FUNC_START sub_80B843C
sub_80B843C: @ 0x080B843C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	ldr r0, [r0, #0x2c]
	str r0, [sp, #8]
	bl sub_80B828C
	mov sl, r0
	ldr r0, [sp, #8]
	adds r0, #0x2e
	mov r9, r0
	ldr r1, [sp, #8]
	adds r1, #0x2c
	str r1, [sp, #0xc]
	movs r2, #0
	str r2, [sp, #0x10]
	movs r3, #1
	str r3, [sp, #4]
_080B8466:
	movs r7, #0
	ldr r0, [sp, #8]
	adds r0, #0x30
	ldr r1, [sp, #0x10]
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, #0
	bne _080B8478
	b _080B8602
_080B8478:
	adds r6, r0, #0
	ldr r2, [sp, #0xc]
	movs r3, #0
	ldrsh r4, [r2, r3]
	mov r5, r9
	ldrh r2, [r5]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	beq _080B850C
	movs r1, #0xff
	ands r1, r2
	cmp r1, #0xf
	bhi _080B850C
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r3, #0
	ands r0, r2
	cmp r0, #0
	beq _080B84BA
	movs r0, #0x10
	subs r0, r0, r1
	lsls r1, r0, #5
	muls r0, r1, r0
	cmp r0, #0
	bge _080B84B2
	adds r0, #0xff
_080B84B2:
	asrs r0, r0, #8
	adds r0, r4, r0
	strh r0, [r6, #0x34]
	movs r7, #1
_080B84BA:
	ldrh r1, [r5]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _080B84E2
	movs r0, #0xff
	ands r0, r1
	movs r1, #0x10
	subs r1, r1, r0
	lsls r0, r1, #5
	muls r0, r1, r0
	cmp r0, #0
	bge _080B84DA
	adds r0, #0xff
_080B84DA:
	asrs r0, r0, #8
	subs r0, r4, r0
	strh r0, [r6, #0x34]
	movs r7, #1
_080B84E2:
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	movs r3, #0xff
	ands r0, r3
	cmp r0, #0xf
	bls _080B850C
	movs r7, #2
	adds r0, r6, #0
	bl sub_80057A4
	ldr r1, _080B85AC  @ 0xFFFFBFFF
	ands r1, r0
	adds r0, r6, #0
	bl sub_8005770
	ldrh r0, [r5]
	ldr r2, _080B85B0  @ 0x0000F7FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r5]
_080B850C:
	ldrh r1, [r5]
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _080B85A2
	movs r0, #0xff
	mov r8, r0
	ands r0, r1
	cmp r0, #0xf
	bhi _080B85A2
	cmp r0, #0
	bne _080B853A
	adds r0, r6, #0
	bl sub_80057A4
	movs r1, #0x80
	lsls r1, r1, #7
	orrs r1, r0
	adds r0, r6, #0
	bl sub_8005770
_080B853A:
	ldrh r1, [r5]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _080B8566
	adds r2, r4, #0
	subs r2, #0x20
	mov r0, r8
	ands r0, r1
	movs r1, #0x10
	subs r1, r1, r0
	lsls r0, r1, #5
	muls r0, r1, r0
	cmp r0, #0
	bge _080B855E
	adds r0, #0xff
_080B855E:
	asrs r0, r0, #8
	adds r0, r2, r0
	strh r0, [r6, #0x34]
	movs r7, #1
_080B8566:
	ldrh r1, [r5]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _080B8592
	adds r2, r4, #0
	adds r2, #0x20
	movs r0, #0xff
	ands r0, r1
	movs r1, #0x10
	subs r1, r1, r0
	lsls r0, r1, #5
	muls r0, r1, r0
	cmp r0, #0
	bge _080B858A
	adds r0, #0xff
_080B858A:
	asrs r0, r0, #8
	subs r0, r2, r0
	strh r0, [r6, #0x34]
	movs r7, #1
_080B8592:
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	movs r1, #0xff
	ands r0, r1
	cmp r0, #0xf
	bls _080B85A2
	movs r7, #2
_080B85A2:
	cmp r7, #1
	beq _080B85B4
	cmp r7, #2
	beq _080B85EC
	b _080B8602
	.align 2, 0
_080B85AC: .4byte 0xFFFFBFFF
_080B85B0: .4byte 0x0000F7FF
_080B85B4:
	mov r0, sl
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	bl sub_80B828C
	adds r4, r0, #0
	bl sub_80B82A8
	adds r1, r0, #0
	movs r3, #0x34
	ldrsh r2, [r6, r3]
	ldrh r0, [r5]
	lsrs r0, r0, #0xa
	ands r0, r7
	str r0, [sp]
	adds r0, r4, #0
	movs r3, #0x1c
	bl sub_80B82C8
	mov r0, sl
	lsls r7, r0
	adds r0, r7, #0
	bl BG_EnableSyncByMask
	b _080B8602
_080B85EC:
	mov r0, sl
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #1
	mov r1, sl
	lsls r0, r1
	bl BG_EnableSyncByMask
_080B8602:
	movs r2, #0xc
	add r9, r2
	ldr r3, [sp, #0xc]
	adds r3, #0xc
	str r3, [sp, #0xc]
	ldr r0, [sp, #0x10]
	adds r0, #0xc
	str r0, [sp, #0x10]
	ldr r1, [sp, #4]
	subs r1, #1
	str r1, [sp, #4]
	cmp r1, #0
	blt _080B861E
	b _080B8466
_080B861E:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B8630
sub_80B8630: @ 0x080B8630
	push {r4, lr}
	sub sp, #0x38
	adds r4, r0, #0
	ldr r1, _080B8678  @ gUnknown_08205F28
	mov r0, sp
	movs r2, #0x37
	bl memcpy
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	ldrh r0, [r4, #0x2a]
	add r0, sp
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080B8654
	movs r0, #0
	strh r0, [r4, #0x2a]
_080B8654:
	adds r0, r4, #0
	bl sub_80B843C
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080B866E
	adds r0, r4, #0
	bl sub_80B8350
_080B866E:
	add sp, #0x38
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B8678: .4byte gUnknown_08205F28

	THUMB_FUNC_START nullsub_57
nullsub_57: @ 0x080B867C
	bx lr

	THUMB_FUNC_START sub_80B8680
sub_80B8680: @ 0x080B8680
	push {lr}
	adds r1, r0, #0
	ldr r0, _080B8690  @ gUnknown_08A3D700
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080B8690: .4byte gUnknown_08A3D700

	THUMB_FUNC_START sub_80B8694
sub_80B8694: @ 0x080B8694
	push {lr}
	ldr r0, _080B86A0  @ gUnknown_08A3D700
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080B86A0: .4byte gUnknown_08A3D700

	THUMB_FUNC_START sub_80B86A4
sub_80B86A4: @ 0x080B86A4
	push {r4, lr}
	ldr r4, _080B86BC  @ gUnknown_08A3D700
	adds r0, r4, #0
	bl Proc_Find
	adds r0, r4, #0
	bl Proc_Find
	cmp r0, #0
	bne _080B86C0
	movs r0, #0x10
	b _080B86C6
	.align 2, 0
_080B86BC: .4byte gUnknown_08A3D700
_080B86C0:
	adds r0, #0x31
	ldrb r0, [r0]
	lsrs r0, r0, #1
_080B86C6:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B86CC
sub_80B86CC: @ 0x080B86CC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r8, r0
	adds r6, r1, #0
	lsls r2, r2, #0x10
	lsrs r4, r2, #0x10
	ldr r0, _080B8728  @ gUnknown_08A3D700
	bl Proc_Find
	mov r9, r0
	mov r1, r8
	lsls r0, r1, #1
	add r0, r8
	lsls r0, r0, #2
	adds r0, #0x2c
	mov r2, r9
	ldr r1, [r2, #0x2c]
	adds r5, r1, r0
	ldr r0, _080B872C  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	beq _080B8730
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	b _080B874E
	.align 2, 0
_080B8728: .4byte gUnknown_08A3D700
_080B872C: .4byte gUnknown_03005280
_080B8730:
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
_080B874E:
	bl sub_80B828C
	adds r7, r0, #0
	bl sub_80B82A8
	adds r1, r0, #0
	ldr r0, [r5, #4]
	cmp r0, #0
	bne _080B8834
	strh r6, [r5, #8]
	movs r0, #0xff
	ands r0, r4
	strh r0, [r5]
	movs r0, #0xff
	lsls r0, r0, #8
	ands r0, r4
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r0, r2
	strh r0, [r5, #2]
	lsrs r0, r1, #5
	adds r1, r6, #0
	bl sub_80066FC
	movs r0, #4
	adds r1, r6, #0
	bl sub_800671C
	adds r0, r7, #0
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0
	ldrsh r2, [r5, r0]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r4
	ldr r1, _080B87D8  @ 0x00004482
	cmp r0, #0
	beq _080B87A4
	adds r1, #1
_080B87A4:
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r4
	cmp r0, #0
	beq _080B87B4
	movs r0, #0x80
	lsls r0, r0, #6
	orrs r1, r0
_080B87B4:
	str r1, [sp]
	mov r0, r8
	adds r1, r6, #0
	movs r3, #0x1c
	bl sub_80064F4
	adds r2, r0, #0
	str r2, [r5, #4]
	movs r1, #0xc0
	lsls r1, r1, #7
	adds r0, r4, #0
	ands r0, r1
	cmp r0, r1
	bne _080B87DC
	adds r1, r2, #0
	adds r1, #0x41
	movs r0, #6
	b _080B8806
	.align 2, 0
_080B87D8: .4byte 0x00004482
_080B87DC:
	movs r0, #0x80
	lsls r0, r0, #7
	ands r0, r4
	cmp r0, #0
	beq _080B87EE
	adds r1, r2, #0
	adds r1, #0x41
	movs r0, #5
	b _080B8806
_080B87EE:
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r4
	cmp r0, #0
	beq _080B8800
	adds r1, r2, #0
	adds r1, #0x41
	movs r0, #4
	b _080B8806
_080B8800:
	adds r1, r2, #0
	adds r1, #0x41
	movs r0, #3
_080B8806:
	strb r0, [r1]
	mov r0, r8
	movs r1, #5
	bl sub_8006458
	movs r0, #1
	strb r0, [r5, #0xa]
	mov r1, r9
	adds r1, #0x30
	movs r0, #2
	strb r0, [r1]
	adds r1, #1
	ldrb r0, [r1]
	cmp r0, #0x20
	bne _080B8834
	movs r0, #0
	strb r0, [r1]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
_080B8834:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B8844
sub_80B8844: @ 0x080B8844
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	ldr r0, _080B8894  @ gUnknown_08A3D700
	bl Proc_Find
	adds r6, r0, #0
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, #0x2c
	ldr r1, [r6, #0x2c]
	adds r4, r1, r0
	ldr r0, _080B8898  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	beq _080B889C
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	b _080B88BA
	.align 2, 0
_080B8894: .4byte gUnknown_08A3D700
_080B8898: .4byte gUnknown_03005280
_080B889C:
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
_080B88BA:
	bl sub_80B828C
	adds r5, r0, #0
	bl sub_80B82A8
	adds r2, r0, #0
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _080B894E
	ldrh r1, [r4, #2]
	movs r0, #0x80
	lsls r0, r0, #5
	ands r0, r1
	cmp r0, #0
	bne _080B894E
	lsrs r0, r2, #5
	movs r2, #8
	ldrsh r1, [r4, r2]
	bl sub_80066FC
	movs r0, #8
	ldrsh r1, [r4, r0]
	movs r0, #4
	bl sub_800671C
	adds r0, r5, #0
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	ldrh r0, [r4, #2]
	ldr r1, _080B8910  @ 0xFFFFFF00
	ands r1, r0
	movs r2, #0xc0
	lsls r2, r2, #2
	ands r2, r7
	cmp r2, #0
	beq _080B8918
	ldr r0, _080B8914  @ 0x0000FCFF
	ands r1, r0
	orrs r1, r2
	b _080B891C
	.align 2, 0
_080B8910: .4byte 0xFFFFFF00
_080B8914: .4byte 0x0000FCFF
_080B8918:
	ldr r0, _080B8958  @ 0x0000FCFF
	ands r1, r0
_080B891C:
	movs r0, #0xff
	lsls r0, r0, #8
	ands r1, r0
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r1, r2
	strh r0, [r4, #2]
	movs r0, #0xff
	strb r0, [r4, #0xa]
	adds r1, r6, #0
	adds r1, #0x30
	movs r0, #0xfe
	strb r0, [r1]
	adds r1, #1
	ldrb r0, [r1]
	cmp r0, #0
	bne _080B894E
	movs r0, #0x20
	strb r0, [r1]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
_080B894E:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B8958: .4byte 0x0000FCFF

	THUMB_FUNC_START sub_80B895C
sub_80B895C: @ 0x080B895C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	ldr r0, _080B8A10  @ gUnknown_08A3D700
	bl Proc_Find
	adds r7, r0, #0
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0x2c
	mov r9, r0
	movs r1, #1
	mov r8, r1
_080B8994:
	ldr r0, [r7, #0x2c]
	mov r2, r9
	adds r5, r0, r2
	ldr r4, [r5, #4]
	cmp r4, #0
	beq _080B89F0
	ldrh r1, [r5, #2]
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne _080B89F0
	adds r0, r4, #0
	bl sub_80057A4
	movs r1, #0x80
	lsls r1, r1, #7
	orrs r1, r0
	adds r0, r4, #0
	bl sub_8005770
	ldrh r0, [r5, #2]
	ldr r2, _080B8A14  @ 0xFFFFFF00
	adds r1, r2, #0
	ands r0, r1
	adds r0, r0, r6
	strh r0, [r5, #2]
	movs r0, #0xff
	strb r0, [r5, #0xa]
	adds r1, r7, #0
	adds r1, #0x30
	movs r0, #0xfe
	strb r0, [r1]
	adds r1, #1
	ldrb r0, [r1]
	cmp r0, #0
	bne _080B89F0
	movs r0, #0x20
	strb r0, [r1]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
_080B89F0:
	movs r0, #0xc
	add r9, r0
	movs r1, #1
	negs r1, r1
	add r8, r1
	mov r2, r8
	cmp r2, #0
	bge _080B8994
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B8A10: .4byte gUnknown_08A3D700
_080B8A14: .4byte 0xFFFFFF00

	THUMB_FUNC_START WorldMap_Destruct
WorldMap_Destruct: @ 0x080B8A18
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x50]
	bl Proc_Delete
	ldr r0, [r4, #0x44]
	bl Proc_Delete
	ldr r0, [r4, #0x48]
	bl Proc_Delete
	movs r0, #0
	bl SetSecondaryHBlankHandler
	bl sub_80C1D70
	movs r0, #0
	bl SetPrimaryHBlankHandler
	bl sub_8006A7C
	bl sub_8008250
	bl SMS_ClearUsageTable
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	bl sub_80BF15C
	bl sub_80C3E94
	ldr r2, _080B8A78  @ gUnknown_03005280
	ldrb r1, [r2]
	movs r0, #0x41
	negs r0, r0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	subs r1, #0x81
	ands r0, r1
	strb r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B8A78: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80B8A7C
sub_80B8A7C: @ 0x080B8A7C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	adds r7, r0, #0
	adds r0, #0x40
	movs r2, #0
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r3, r7, #0
	adds r3, #0x29
	ldrb r0, [r3]
	movs r1, #2
	orrs r0, r1
	strb r0, [r3]
	ldr r0, _080B8B00  @ gUnknown_03005280
	mov r8, r0
	strb r2, [r0, #1]
	ldr r0, [r7, #0x54]
	mov r4, sp
	adds r4, #0xa
	movs r1, #0
	add r2, sp, #8
	adds r3, r4, #0
	bl sub_80BE0A4
	add r0, sp, #8
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r1, #0xe
	add r5, sp, #0xc
	mov r6, sp
	adds r6, #0xe
	adds r2, r5, #0
	adds r3, r6, #0
	bl GetWMCenteredCameraPosition
	mov r3, r8
	movs r4, #2
	ldrsh r0, [r3, r4]
	movs r2, #4
	ldrsh r1, [r3, r2]
	movs r3, #0
	ldrsh r2, [r5, r3]
	movs r4, #0
	ldrsh r3, [r6, r4]
	movs r4, #2
	str r4, [sp]
	bl sub_80C0834
	asrs r0, r0, #2
	cmp r0, #1
	bgt _080B8B04
	ldrh r0, [r5]
	mov r1, r8
	strh r0, [r1, #2]
	ldrh r0, [r6]
	strh r0, [r1, #4]
	adds r0, r7, #0
	movs r1, #7
	bl Proc_GotoLabel
	b _080B8B2E
	.align 2, 0
_080B8B00: .4byte gUnknown_03005280
_080B8B04:
	cmp r0, #0xf
	bgt _080B8B0C
	movs r0, #0x10
	b _080B8B12
_080B8B0C:
	cmp r0, #0x4b
	ble _080B8B12
	movs r0, #0x4b
_080B8B12:
	movs r1, #1
	negs r1, r1
	movs r3, #0
	ldrsh r2, [r5, r3]
	movs r4, #0
	ldrsh r3, [r6, r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	adds r0, r1, #0
	bl sub_80BF404
_080B8B2E:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B8B3C
sub_80B8B3C: @ 0x080B8B3C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80BF490
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080B8B58
	adds r1, r4, #0
	adds r1, #0x41
	movs r0, #0x14
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080B8B58:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B8B60
sub_80B8B60: @ 0x080B8B60
	push {r4, lr}
	adds r3, r0, #0
	ldr r4, _080B8B90  @ gUnknown_03005280
	lsls r0, r3, #2
	adds r0, r0, r4
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080B8B9C
	movs r2, #4
	adds r1, r4, #0
	adds r1, #0x10
_080B8B7C:
	movs r4, #0x12
	ldrsh r0, [r1, r4]
	cmp r0, #0
	beq _080B8B94
	ldrb r0, [r1, #0x11]
	cmp r0, r3
	bne _080B8B94
	movs r0, #1
	b _080B8B9E
	.align 2, 0
_080B8B90: .4byte gUnknown_03005280
_080B8B94:
	adds r1, #4
	adds r2, #1
	cmp r2, #6
	ble _080B8B7C
_080B8B9C:
	movs r0, #0
_080B8B9E:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B8BA4
sub_80B8BA4: @ 0x080B8BA4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	adds r6, r0, #0
	ldr r0, [r6, #0x54]
	movs r1, #0
	bl sub_80BE12C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B8BBE
	b _080B8D50
_080B8BBE:
	adds r5, r6, #0
	adds r5, #0x40
	movs r4, #0
	ldrsb r4, [r5, r4]
	bl sub_80BD29C
	subs r0, #1
	mov r8, r5
	cmp r4, r0
	blt _080B8BD4
	b _080B8CEC
_080B8BD4:
	bl sub_80BD29C
	movs r1, #0
	ldrsb r1, [r5, r1]
	subs r0, r0, r1
	cmp r0, #2
	beq _080B8BFA
	adds r0, r1, #1
	bl sub_80BD28C
	bl sub_80BCA1C
	cmp r0, #0
	blt _080B8C40
	adds r0, r6, #0
	movs r1, #0x11
	bl Proc_GotoLabel
	b _080B8D50
_080B8BFA:
	adds r0, r1, #1
	bl sub_80BD28C
	ldr r1, _080B8CB8  @ gUnknown_03005280
	lsls r0, r0, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B8C40
	movs r0, #0
	ldrsb r0, [r5, r0]
	adds r0, #1
	bl sub_80BD28C
	lsls r0, r0, #5
	ldr r1, _080B8CBC  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #3
	beq _080B8C40
	movs r0, #0
	ldrsb r0, [r5, r0]
	adds r0, #1
	bl sub_80BD28C
	adds r1, r6, #0
	adds r1, #0x3e
	strb r0, [r1]
	adds r0, r6, #0
	movs r1, #0xe
	bl Proc_GotoLabel
_080B8C40:
	adds r0, r6, #0
	adds r0, #0x41
	ldrb r2, [r0]
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r7, r0, #0
	cmp r1, #0
	bgt _080B8CC0
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	bl sub_80BD28C
	adds r5, r0, #0
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	adds r0, #1
	bl sub_80BD28C
	adds r4, r0, #0
	ldr r0, [r6, #0x54]
	movs r1, #0
	movs r2, #1
	bl MapMU_80BE108
	mov r0, sp
	movs r2, #0
	strb r2, [r0]
	strh r5, [r0, #6]
	strh r4, [r0, #8]
	movs r0, #1
	negs r0, r0
	str r0, [sp, #0xc]
	mov r1, sp
	adds r0, r6, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	lsrs r0, r0, #0x1f
	strb r0, [r1, #1]
	mov r0, sp
	strh r2, [r0, #0xa]
	movs r0, #1
	strb r0, [r1, #2]
	movs r0, #0xff
	strb r0, [r1, #3]
	movs r0, #4
	strb r0, [r1, #4]
	ldr r0, [r6, #0x54]
	bl sub_80BDEB4
	movs r0, #8
	strb r0, [r7]
	mov r1, r8
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	b _080B8D50
	.align 2, 0
_080B8CB8: .4byte gUnknown_03005280
_080B8CBC: .4byte gUnknown_082060B0
_080B8CC0:
	adds r0, r6, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B8CE0
	ldr r0, _080B8CE8  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B8CE0
	subs r0, r2, #2
	strb r0, [r7]
_080B8CE0:
	ldrb r0, [r7]
	subs r0, #1
	strb r0, [r7]
	b _080B8D50
	.align 2, 0
_080B8CE8: .4byte gKeyStatusPtr
_080B8CEC:
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	movs r0, #0
	ldrsb r0, [r5, r0]
	bl sub_80BD28C
	ldr r4, _080B8D28  @ gUnknown_03005280
	strb r0, [r4, #0x11]
	ldr r0, [r6, #0x54]
	movs r1, #0
	movs r2, #0
	bl MapMU_80BE108
	ldrb r2, [r4, #0x11]
	lsls r0, r2, #5
	ldr r1, _080B8D2C  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #3
	bne _080B8D30
	adds r0, r6, #0
	movs r1, #0xe
	bl Proc_GotoLabel
	b _080B8D50
	.align 2, 0
_080B8D28: .4byte gUnknown_03005280
_080B8D2C: .4byte gUnknown_082060B0
_080B8D30:
	adds r0, r2, #0
	bl sub_80B8B60
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B8D46
	adds r0, r6, #0
	movs r1, #0x10
	bl Proc_GotoLabel
	b _080B8D50
_080B8D46:
	movs r0, #1
	strb r0, [r4, #1]
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
_080B8D50:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START SetupGraphicSystemsForWorldMap
SetupGraphicSystemsForWorldMap: @ 0x080B8D5C
	push {r4, lr}
	movs r0, #0
	bl SetupBackgrounds
	ldr r4, _080B8DF8  @ gLCDControlBuffer
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	ldr r0, _080B8DFC  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B8E00  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B8E04  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B8E08  @ gBG3TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r0, [r4, #0x10]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #6
	bl GetSaveDataLocation
	bl LoadLegacyUiFrameGraphics
	bl Font_InitForUIDefault
	bl ResetFaces
	ldr r0, _080B8E0C  @ gUnknown_08A3D728
	bl SetupFaceGfxData
	bl SMS_ClearUsageTable
	bl MU_Init
	bl SetupMapSpritesPalettes
	ldr r1, _080B8E10  @ gUnknown_0202BCB0
	movs r0, #0
	strh r0, [r1, #0xc]
	strh r0, [r1, #0xe]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B8DF8: .4byte gLCDControlBuffer
_080B8DFC: .4byte gBG0TilemapBuffer
_080B8E00: .4byte gBG1TilemapBuffer
_080B8E04: .4byte gBG2TilemapBuffer
_080B8E08: .4byte gBG3TilemapBuffer
_080B8E0C: .4byte gUnknown_08A3D728
_080B8E10: .4byte gUnknown_0202BCB0

	THUMB_FUNC_START sub_80B8E14
sub_80B8E14: @ 0x080B8E14
	push {r4, lr}
	ldr r0, _080B8E48  @ gUnknown_08A97A40
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x40
	bl CopyToPaletteBuffer
	ldr r0, _080B8E4C  @ gUnknown_08A96308
	ldr r1, _080B8E50  @ 0x06011000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080B8E54  @ gUnknown_08A97410
	ldr r4, _080B8E58  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r1, _080B8E5C  @ 0x06010280
	adds r0, r4, #0
	movs r2, #0xc
	movs r3, #4
	bl CopyTileGfxForObj
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B8E48: .4byte gUnknown_08A97A40
_080B8E4C: .4byte gUnknown_08A96308
_080B8E50: .4byte 0x06011000
_080B8E54: .4byte gUnknown_08A97410
_080B8E58: .4byte gUnknown_02020188
_080B8E5C: .4byte 0x06010280

	THUMB_FUNC_START sub_80B8E60
sub_80B8E60: @ 0x080B8E60
	push {r4, r5, lr}
	sub sp, #4
	movs r5, #0
	strh r5, [r0, #0x3a]
	bl SetDefaultColorEffects
	ldr r0, _080B8F74  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B8F78  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B8F7C  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080B8F80  @ gBG3TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0xf
	bl BG_EnableSyncByMask
	ldr r4, _080B8F84  @ gUnknown_0859ED70
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x40
	bl CopyToPaletteBuffer
	movs r1, #0xd8
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080B8F88  @ gUnknown_08AA11D0
	ldr r4, _080B8F8C  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r1, _080B8F90  @ 0x06015300
	adds r0, r4, #0
	movs r2, #8
	movs r3, #2
	bl CopyTileGfxForObj
	bl sub_80B8E14
	ldr r0, _080B8F94  @ gUnknown_08A97FA4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080B8F98  @ gUnknown_08A97ED8
	ldr r1, _080B8F9C  @ 0x06005000
	bl CopyDataWithPossibleUncomp
	bl LoadUiFrameGraphics
	bl Font_InitForUIDefault
	bl sub_8003D20
	ldr r4, _080B8FA0  @ gLCDControlBuffer
	ldrb r1, [r4, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	movs r0, #0x36
	adds r0, r0, r4
	mov ip, r0
	ldrb r1, [r0]
	movs r0, #1
	orrs r1, r0
	movs r0, #2
	orrs r1, r0
	movs r0, #4
	orrs r1, r0
	movs r0, #8
	orrs r1, r0
	movs r0, #0x10
	orrs r1, r0
	adds r3, r4, #0
	adds r3, #0x34
	ldrb r0, [r3]
	movs r2, #0x20
	orrs r0, r2
	strb r0, [r3]
	adds r3, #1
	ldrb r0, [r3]
	orrs r0, r2
	strb r0, [r3]
	orrs r1, r2
	mov r0, ip
	strb r1, [r0]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl sub_80AE168
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	bl sub_80C1D00
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B8F74: .4byte gBG0TilemapBuffer
_080B8F78: .4byte gBG1TilemapBuffer
_080B8F7C: .4byte gBG2TilemapBuffer
_080B8F80: .4byte gBG3TilemapBuffer
_080B8F84: .4byte gUnknown_0859ED70
_080B8F88: .4byte gUnknown_08AA11D0
_080B8F8C: .4byte gUnknown_02020188
_080B8F90: .4byte 0x06015300
_080B8F94: .4byte gUnknown_08A97FA4
_080B8F98: .4byte gUnknown_08A97ED8
_080B8F9C: .4byte 0x06005000
_080B8FA0: .4byte gLCDControlBuffer

	THUMB_FUNC_START DeployEveryUnit
DeployEveryUnit: @ 0x080B8FA4
	push {r4, lr}
	movs r4, #1
_080B8FA8:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _080B8FC4
	ldr r0, [r2]
	cmp r0, #0
	beq _080B8FC4
	ldr r0, [r2, #0xc]
	movs r1, #9
	negs r1, r1
	ands r0, r1
	str r0, [r2, #0xc]
_080B8FC4:
	adds r4, #1
	cmp r4, #0x3f
	ble _080B8FA8
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START nullsub_22
nullsub_22: @ 0x080B8FD0
	bx lr

	THUMB_FUNC_START sub_80B8FD4
sub_80B8FD4: @ 0x080B8FD4
	ldr r2, _080B8FE8  @ gUnknown_03005280
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	strb r0, [r2]
	bx lr
	.align 2, 0
_080B8FE8: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80B8FEC
sub_80B8FEC: @ 0x080B8FEC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080B9010  @ gUnknown_03005280
	bl sub_80BD014
	adds r1, r0, #0
	cmp r1, #0
	blt _080B9014
	ldr r0, [r4, #0x48]
	adds r0, #0x33
	strb r1, [r0]
	ldr r1, [r4, #0x48]
	adds r1, #0x32
	ldrb r0, [r1]
	movs r2, #2
	orrs r0, r2
	strb r0, [r1]
	b _080B9022
	.align 2, 0
_080B9010: .4byte gUnknown_03005280
_080B9014:
	ldr r0, [r4, #0x48]
	adds r0, #0x32
	ldrb r2, [r0]
	movs r1, #3
	negs r1, r1
	ands r1, r2
	strb r1, [r0]
_080B9022:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9028
sub_80B9028: @ 0x080B9028
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r5, r0, #0
	movs r6, #0
	add r0, sp, #4
	mov r8, r0
	ldr r4, _080B906C  @ gUnknown_03005280
	ldr r1, _080B9070  @ gUnknown_082060B0
	mov r9, r1
	mov r7, sp
	adds r7, #6
_080B9044:
	movs r3, #0x12
	ldrsh r0, [r4, r3]
	cmp r0, #0
	beq _080B90B6
	ldrb r1, [r4, #0x10]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B9074
	ldr r0, [r5, #0x54]
	movs r1, #0x12
	ldrsh r2, [r4, r1]
	ldrb r1, [r4, #0x11]
	str r1, [sp]
	adds r1, r6, #0
	movs r3, #1
	negs r3, r3
	bl MapMU_SetUnitClass
	b _080B9088
	.align 2, 0
_080B906C: .4byte gUnknown_03005280
_080B9070: .4byte gUnknown_082060B0
_080B9074:
	ldr r0, [r5, #0x54]
	movs r3, #0x12
	ldrsh r2, [r4, r3]
	ldrb r1, [r4, #0x11]
	str r1, [sp]
	adds r1, r6, #0
	movs r3, #1
	negs r3, r3
	bl MapMU_SetUnitChar
_080B9088:
	ldrb r0, [r4, #0x11]
	lsls r0, r0, #5
	add r0, r9
	ldrh r0, [r0, #0x18]
	mov r1, r8
	strh r0, [r1]
	ldrb r0, [r4, #0x11]
	lsls r0, r0, #5
	add r0, r9
	ldrh r0, [r0, #0x1a]
	strh r0, [r7]
	ldr r0, [r5, #0x54]
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #0
	ldrsh r3, [r7, r1]
	adds r1, r6, #0
	bl sub_80BE35C
	ldr r0, [r5, #0x54]
	adds r1, r6, #0
	bl sub_80BDDC4
_080B90B6:
	adds r4, #4
	adds r6, #1
	cmp r6, #6
	ble _080B9044
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B90CC
sub_80B90CC: @ 0x080B90CC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r2, _080B9110  @ gUnknown_03005280
	ldrb r1, [r2]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080B9102
	movs r5, #4
	adds r4, r2, #0
	adds r4, #0x20
_080B90E2:
	ldr r0, [r6, #0x54]
	adds r1, r5, #0
	bl MapMU_RemoveUnit
	movs r0, #0
	strh r0, [r4, #2]
	ldrb r1, [r4]
	movs r0, #0xfd
	ands r0, r1
	movs r1, #0xfe
	ands r0, r1
	strb r0, [r4]
	adds r4, #4
	adds r5, #1
	cmp r5, #6
	ble _080B90E2
_080B9102:
	adds r0, r6, #0
	bl sub_80B9028
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B9110: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80B9114
sub_80B9114: @ 0x080B9114
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r2, #0
	ldr r0, _080B9140  @ gUnknown_03005280
	movs r6, #2
	adds r3, r0, #0
	adds r3, #0x30
	movs r5, #2
_080B9124:
	ldrb r1, [r3]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _080B9144
	ldr r0, [r4, #0x48]
	adds r0, #0x33
	strb r2, [r0]
	ldr r1, [r4, #0x48]
	adds r1, #0x32
	ldrb r0, [r1]
	orrs r0, r6
	strb r0, [r1]
	b _080B914C
	.align 2, 0
_080B9140: .4byte gUnknown_03005280
_080B9144:
	adds r3, #4
	adds r2, #1
	cmp r2, #0x1c
	ble _080B9124
_080B914C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9154
sub_80B9154: @ 0x080B9154
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	bl SetupGraphicSystemsForWorldMap
	adds r0, r5, #0
	bl sub_80B8E60
	adds r0, r5, #0
	bl DeployEveryUnit
	movs r0, #5
	bl NewMapScreen
	str r0, [r5, #0x44]
	str r0, [sp]
	movs r0, #5
	movs r1, #0
	movs r2, #3
	movs r3, #0xa
	bl sub_80BB9A4
	str r0, [r5, #0x48]
	ldr r0, [r5, #0x44]
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0xc
	bl NewGmapUnitContainer
	str r0, [r5, #0x4c]
	movs r1, #0x96
	lsls r1, r1, #5
	ldr r3, [r5, #0x44]
	movs r0, #5
	movs r2, #4
	bl NewGmapCursor
	str r0, [r5, #0x50]
	adds r0, r5, #0
	bl NewMapMU
	str r0, [r5, #0x54]
	ldr r4, _080B9210  @ gUnknown_03005280
	adds r0, r4, #0
	bl sub_80BCA0C
	adds r0, r5, #0
	bl sub_80C368C
	adds r0, r5, #0
	bl sub_80B8FEC
	adds r0, r5, #0
	bl sub_80B90CC
	ldrb r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B91D2
	adds r0, r5, #0
	bl sub_80B9114
_080B91D2:
	ldr r0, [r5, #0x44]
	ldr r1, [r0, #0x4c]
	adds r1, #0x31
	ldrb r2, [r1]
	movs r0, #3
	orrs r0, r2
	strb r0, [r1]
	ldr r0, _080B9214  @ gUnknown_0202BCF0
	ldrb r1, [r0, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080B91FE
	bl sub_80BCFB4
	ldr r0, [r5, #0x48]
	adds r0, #0x32
	ldrb r2, [r0]
	movs r1, #3
	negs r1, r1
	ands r1, r2
	strb r1, [r0]
_080B91FE:
	adds r1, r5, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B9210: .4byte gUnknown_03005280
_080B9214: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B9218
sub_80B9218: @ 0x080B9218
	push {r4, r5, r6, lr}
	sub sp, #8
	mov r2, sp
	ldr r1, _080B9260  @ gUnknown_03005280
	ldr r0, [r1, #8]
	asrs r0, r0, #8
	strh r0, [r2]
	mov r4, sp
	adds r4, #2
	ldr r0, [r1, #0xc]
	asrs r0, r0, #8
	strh r0, [r4]
	add r2, sp, #4
	ldrh r0, [r1, #2]
	strh r0, [r2]
	mov r3, sp
	adds r3, #6
	ldrh r0, [r1, #4]
	strh r0, [r3]
	mov r0, sp
	ldrh r5, [r0]
	ldrh r0, [r2]
	subs r0, r5, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r6, r1, #0
	cmp r0, #0x1f
	bgt _080B9268
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1f
	ble _080B9264
	adds r0, r5, #0
	subs r0, #0x20
	b _080B9282
	.align 2, 0
_080B9260: .4byte gUnknown_03005280
_080B9264:
	movs r0, #0
	b _080B9282
_080B9268:
	cmp r0, #0xd0
	ble _080B9284
	lsls r1, r5, #0x10
	ldr r0, _080B927C  @ 0x01BF0000
	cmp r1, r0
	bgt _080B9280
	adds r0, r5, #0
	subs r0, #0xd0
	b _080B9282
	.align 2, 0
_080B927C: .4byte 0x01BF0000
_080B9280:
	movs r0, #0xf0
_080B9282:
	strh r0, [r2]
_080B9284:
	ldrh r4, [r4]
	ldrh r0, [r3]
	subs r0, r4, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1f
	bgt _080B92A4
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1f
	ble _080B92A0
	adds r0, r4, #0
	subs r0, #0x20
	b _080B92BE
_080B92A0:
	movs r0, #0
	b _080B92BE
_080B92A4:
	cmp r0, #0x80
	ble _080B92C0
	lsls r1, r4, #0x10
	ldr r0, _080B92B8  @ 0x011F0000
	cmp r1, r0
	bgt _080B92BC
	adds r0, r4, #0
	subs r0, #0x80
	b _080B92BE
	.align 2, 0
_080B92B8: .4byte 0x011F0000
_080B92BC:
	movs r0, #0xa0
_080B92BE:
	strh r0, [r3]
_080B92C0:
	ldrh r0, [r2]
	strh r0, [r6, #2]
	ldrh r0, [r3]
	strh r0, [r6, #4]
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B92D0
sub_80B92D0: @ 0x080B92D0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r7, _080B930C  @ gUnknown_03005280
	ldrb r0, [r7, #0x11]
	cmp r0, r4
	bne _080B9356
	lsls r0, r4, #2
	adds r0, r0, r7
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080B9344
	lsls r0, r4, #5
	ldr r1, _080B9310  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #3
	beq _080B9344
	adds r0, r4, #0
	bl sub_80BCA1C
	cmp r0, #0
	blt _080B9314
	adds r0, r5, #0
	movs r1, #0x10
	b _080B934E
	.align 2, 0
_080B930C: .4byte gUnknown_03005280
_080B9310: .4byte gUnknown_082060B0
_080B9314:
	adds r0, r7, #0
	bl sub_80BD014
	adds r3, r0, #0
	ldr r2, _080B9340  @ gUnknown_0202BCF0
	ldrb r1, [r2, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _080B9338
	adds r0, r2, #0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	cmp r0, #0
	blt _080B9338
	cmp r3, #2
	beq _080B93D6
_080B9338:
	adds r0, r5, #0
	movs r1, #0x12
	b _080B934E
	.align 2, 0
_080B9340: .4byte gUnknown_0202BCF0
_080B9344:
	adds r0, r5, #0
	adds r0, #0x3e
	strb r4, [r0]
	adds r0, r5, #0
	movs r1, #0xe
_080B934E:
	bl Proc_GotoLabel
_080B9352:
	movs r0, #1
	b _080B93D8
_080B9356:
	movs r0, #0x11
	ldrsb r0, [r7, r0]
	lsls r1, r4, #0x18
	asrs r6, r1, #0x18
	adds r1, r6, #0
	movs r2, #0
	bl sub_80BCCFC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B938A
	bl sub_80BD29C
	adds r1, r0, #0
	cmp r1, #2
	bne _080B9384
	lsls r0, r4, #2
	adds r0, r0, r7
	adds r0, #0x30
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	bne _080B9344
_080B9384:
	adds r0, r5, #0
	movs r1, #6
	b _080B934E
_080B938A:
	movs r0, #0x11
	ldrsb r0, [r7, r0]
	adds r1, r6, #0
	movs r2, #1
	bl sub_80BCCFC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B93D6
	bl sub_80BD29C
	adds r2, r0, #0
	cmp r2, #2
	bne _080B93CC
	lsls r0, r4, #5
	ldr r1, _080B93C8  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #3
	beq _080B93C0
	lsls r0, r4, #2
	adds r0, r0, r7
	adds r0, #0x30
	ldrb r0, [r0]
	ands r2, r0
	cmp r2, #0
	bne _080B9344
_080B93C0:
	adds r0, r5, #0
	movs r1, #6
	b _080B934E
	.align 2, 0
_080B93C8: .4byte gUnknown_082060B0
_080B93CC:
	adds r0, r5, #0
	movs r1, #6
	bl Proc_GotoLabel
	b _080B9352
_080B93D6:
	movs r0, #0
_080B93D8:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B93E0
sub_80B93E0: @ 0x080B93E0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r7, r0, #0
	ldr r0, _080B9408  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B940C
	movs r0, #2
	mov r8, r0
	adds r1, r7, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
	adds r6, r1, #0
	b _080B9414
	.align 2, 0
_080B9408: .4byte gKeyStatusPtr
_080B940C:
	movs r2, #4
	mov r8, r2
	adds r6, r7, #0
	adds r6, #0x2a
_080B9414:
	adds r5, r6, #0
	ldrb r1, [r5]
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	ble _080B9426
	subs r0, r1, #1
	strb r0, [r5]
	b _080B954A
_080B9426:
	bl sub_80BF294
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B9432
	b _080B954A
_080B9432:
	ldr r0, _080B944C  @ gKeyStatusPtr
	ldr r3, [r0]
	ldrh r2, [r3, #4]
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _080B9450
	movs r3, #0xf0
	ands r3, r2
	movs r0, #0xa
	strb r0, [r5]
	b _080B946E
	.align 2, 0
_080B944C: .4byte gKeyStatusPtr
_080B9450:
	ldrh r0, [r3, #8]
	movs r4, #0xf0
	adds r1, r4, #0
	ands r1, r0
	cmp r1, #0
	beq _080B9468
	movs r0, #0xa
	strb r0, [r5]
	ldrh r0, [r3, #8]
	adds r3, r4, #0
	ands r3, r0
	b _080B946E
_080B9468:
	adds r3, r4, #0
	ands r3, r2
	strb r1, [r6]
_080B946E:
	cmp r3, #0
	beq _080B954A
	ldr r2, _080B94A8  @ gUnknown_03005280
	ldr r0, [r2, #8]
	asrs r0, r0, #8
	cmp r0, #0
	bge _080B947E
	adds r0, #0xf
_080B947E:
	lsls r0, r0, #0xc
	lsrs r1, r0, #0x10
	ldr r0, [r2, #0xc]
	asrs r0, r0, #8
	cmp r0, #0
	bge _080B948C
	adds r0, #0xf
_080B948C:
	lsls r0, r0, #0xc
	lsrs r6, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r2, r1, #0x10
	adds r4, r6, #0
	movs r0, #0x10
	ands r0, r3
	cmp r0, #0
	beq _080B94AC
	lsls r0, r2, #0x10
	movs r2, #0x80
	lsls r2, r2, #9
	b _080B94B8
	.align 2, 0
_080B94A8: .4byte gUnknown_03005280
_080B94AC:
	movs r0, #0x20
	ands r0, r3
	cmp r0, #0
	beq _080B94BC
	lsls r0, r2, #0x10
	ldr r2, _080B94CC  @ 0xFFFF0000
_080B94B8:
	adds r0, r0, r2
	lsrs r2, r0, #0x10
_080B94BC:
	movs r0, #0x80
	ands r0, r3
	cmp r0, #0
	beq _080B94D0
	lsls r0, r4, #0x10
	movs r3, #0x80
	lsls r3, r3, #9
	b _080B94DC
	.align 2, 0
_080B94CC: .4byte 0xFFFF0000
_080B94D0:
	movs r0, #0x40
	ands r3, r0
	cmp r3, #0
	beq _080B94E0
	lsls r0, r4, #0x10
	ldr r3, _080B94EC  @ 0xFFFF0000
_080B94DC:
	adds r0, r0, r3
	lsrs r4, r0, #0x10
_080B94E0:
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bgt _080B94F0
	movs r2, #1
	b _080B94F6
	.align 2, 0
_080B94EC: .4byte 0xFFFF0000
_080B94F0:
	cmp r0, #0x1c
	ble _080B94F6
	movs r2, #0x1c
_080B94F6:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bgt _080B9502
	movs r4, #1
	b _080B9508
_080B9502:
	cmp r0, #0x12
	ble _080B9508
	movs r4, #0x12
_080B9508:
	lsls r0, r2, #0x10
	asrs r5, r0, #0x10
	lsls r4, r4, #0x10
	cmp r1, r0
	bne _080B9518
	lsls r0, r6, #0x10
	cmp r0, r4
	beq _080B954A
_080B9518:
	ldr r0, _080B9558  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B952A
	movs r0, #0x65
	bl m4aSongNumStart
_080B952A:
	lsls r0, r5, #4
	adds r0, #8
	lsls r0, r0, #0x10
	asrs r1, r4, #0xc
	adds r1, #8
	lsls r1, r1, #0x10
	lsrs r0, r0, #0x10
	orrs r0, r1
	str r0, [sp, #4]
	str r7, [sp]
	movs r0, #0
	add r1, sp, #4
	mov r2, r8
	movs r3, #0
	bl sub_80BF210
_080B954A:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B9558: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B955C
sub_80B955C: @ 0x080B955C
	push {r4, r5, r6, lr}
	adds r4, r1, #0
	movs r5, #0
	b _080B9566
_080B9564:
	adds r5, #1
_080B9566:
	cmp r5, #0x1c
	bgt _080B9574
	adds r0, r5, #0
	bl sub_80BBA4C
	cmp r0, r4
	bne _080B9564
_080B9574:
	movs r4, #1
	ldr r6, _080B959C  @ gUnknown_03005280
_080B9578:
	adds r0, r5, r4
	cmp r0, #0x1c
	ble _080B9580
	subs r0, #0x1d
_080B9580:
	bl sub_80BBA4C
	adds r2, r0, #0
	lsls r0, r2, #2
	adds r0, r0, r6
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B95A0
	adds r0, r2, #0
	b _080B95AA
	.align 2, 0
_080B959C: .4byte gUnknown_03005280
_080B95A0:
	adds r4, #1
	cmp r4, #0x1c
	ble _080B9578
	movs r0, #1
	negs r0, r0
_080B95AA:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80B95B0
sub_80B95B0: @ 0x080B95B0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	ldr r0, _080B9614  @ gUnknown_03005280
	ldr r1, [r0, #8]
	asrs r1, r1, #8
	mov r8, r1
	ldr r0, [r0, #0xc]
	asrs r7, r0, #8
	movs r5, #0xf0
	lsls r5, r5, #7
	movs r6, #0
	movs r4, #0
_080B95CC:
	ldr r1, _080B9614  @ gUnknown_03005280
	lsls r0, r4, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B9600
	lsls r1, r4, #5
	ldr r0, _080B9618  @ gUnknown_082060B0
	adds r1, r1, r0
	movs r0, #0x18
	ldrsh r2, [r1, r0]
	movs r0, #0x1a
	ldrsh r3, [r1, r0]
	movs r0, #5
	str r0, [sp]
	mov r0, r8
	adds r1, r7, #0
	bl sub_80C0834
	cmp r0, r5
	bge _080B9600
	adds r6, r4, #0
	adds r5, r0, #0
_080B9600:
	adds r4, #1
	cmp r4, #0x1c
	ble _080B95CC
	adds r0, r6, #0
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080B9614: .4byte gUnknown_03005280
_080B9618: .4byte gUnknown_082060B0

	THUMB_FUNC_START sub_80B961C
sub_80B961C: @ 0x080B961C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	mov r8, r0
	add r2, sp, #8
	lsls r1, r1, #5
	ldr r0, _080B96D0  @ gUnknown_082060B0
	adds r1, r1, r0
	ldrh r0, [r1, #0x18]
	strh r0, [r2]
	adds r2, #2
	ldrh r0, [r1, #0x1a]
	strh r0, [r2]
	ldr r7, _080B96D4  @ gUnknown_03005280
	add r0, sp, #8
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #8
	str r0, [r7, #8]
	movs r3, #0
	ldrsh r0, [r2, r3]
	lsls r0, r0, #8
	str r0, [r7, #0xc]
	add r0, sp, #8
	movs r4, #0
	ldrsh r0, [r0, r4]
	movs r3, #0
	ldrsh r1, [r2, r3]
	add r5, sp, #0xc
	mov r6, sp
	adds r6, #0xe
	adds r2, r5, #0
	adds r3, r6, #0
	bl GetWMCenteredCameraPosition
	add r2, sp, #0x10
	ldrh r0, [r7, #2]
	strh r0, [r2]
	mov r1, sp
	adds r1, #0x12
	ldrh r0, [r7, #4]
	strh r0, [r1]
	movs r4, #0
	ldrsh r0, [r2, r4]
	movs r2, #0
	ldrsh r1, [r1, r2]
	movs r3, #0
	ldrsh r2, [r5, r3]
	movs r4, #0
	ldrsh r3, [r6, r4]
	movs r4, #4
	str r4, [sp]
	bl sub_80C0834
	cmp r0, #0
	bge _080B9692
	ldr r1, _080B96D8  @ 0x000001FF
	adds r0, r0, r1
_080B9692:
	asrs r0, r0, #9
	adds r0, #6
	cmp r0, #0xa
	ble _080B969C
	movs r0, #0xa
_080B969C:
	movs r1, #1
	negs r1, r1
	movs r3, #0
	ldrsh r2, [r5, r3]
	movs r4, #0
	ldrsh r3, [r6, r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r4, #0
	str r4, [sp, #4]
	adds r0, r1, #0
	bl sub_80BF404
	strb r4, [r7, #1]
	mov r0, r8
	movs r1, #8
	bl Proc_GotoLabel
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B96D0: .4byte gUnknown_082060B0
_080B96D4: .4byte gUnknown_03005280
_080B96D8: .4byte 0x000001FF

	THUMB_FUNC_START sub_80B96DC
sub_80B96DC: @ 0x080B96DC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80BF3F4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080B96F0
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080B96F0:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B96F8
sub_80B96F8: @ 0x080B96F8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r2, _080B9728  @ gUnknown_03005280
	ldr r5, [r2, #8]
	ldr r6, [r2, #0xc]
	ldr r0, _080B972C  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r3, #4
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _080B9736
	ldrb r1, [r2]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _080B9730
	movs r0, #5
	negs r0, r0
	ands r0, r1
	b _080B9734
	.align 2, 0
_080B9728: .4byte gUnknown_03005280
_080B972C: .4byte gKeyStatusPtr
_080B9730:
	movs r0, #4
	orrs r0, r1
_080B9734:
	strb r0, [r2]
_080B9736:
	ldr r0, [r4, #0x48]
	asrs r1, r5, #8
	asrs r2, r6, #8
	movs r3, #0
	str r3, [sp]
	bl sub_80BB628
	adds r1, r0, #0
	cmp r1, #0
	blt _080B9798
	ldr r0, _080B9778  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _080B9780
	adds r0, r4, #0
	bl sub_80B92D0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080B97BC
	ldr r0, _080B977C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080B97EA
	movs r0, #0x6a
	bl m4aSongNumStart
	b _080B97EA
	.align 2, 0
_080B9778: .4byte gKeyStatusPtr
_080B977C: .4byte gUnknown_0202BCF0
_080B9780:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r2
	cmp r0, #0
	beq _080B97BC
	adds r0, r4, #0
	bl sub_80B955C
	adds r1, r0, #0
	cmp r1, #0
	blt _080B97BC
	b _080B97AE
_080B9798:
	ldr r0, _080B97B8  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080B97BC
	bl sub_80B95B0
	adds r1, r0, #0
_080B97AE:
	adds r0, r4, #0
	bl sub_80B961C
	b _080B97EA
	.align 2, 0
_080B97B8: .4byte gKeyStatusPtr
_080B97BC:
	ldr r0, _080B97D4  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080B97D8
	adds r0, r4, #0
	movs r1, #5
	bl Proc_GotoLabel
	b _080B97EA
	.align 2, 0
_080B97D4: .4byte gKeyStatusPtr
_080B97D8:
	adds r0, r4, #0
	bl sub_80B93E0
	ldr r0, _080B97F4  @ gUnknown_03005280
	str r5, [r0, #8]
	str r6, [r0, #0xc]
	adds r0, r4, #0
	bl sub_80B9218
_080B97EA:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B97F4: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80B97F8
sub_80B97F8: @ 0x080B97F8
	ldr r1, _080B9800  @ gUnknown_03005280
	movs r0, #1
	strb r0, [r1, #1]
	bx lr
	.align 2, 0
_080B9800: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80B9804
sub_80B9804: @ 0x080B9804
	push {lr}
	bl sub_80B96F8
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9810
sub_80B9810: @ 0x080B9810
	push {lr}
	bl sub_80C1D70
	movs r0, #8
	bl Proc_DeleteEachWithMark
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9820
sub_80B9820: @ 0x080B9820
	push {lr}
	bl sub_8092194
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B982C
sub_80B982C: @ 0x080B982C
	push {r4, lr}
	ldr r3, [r0, #0x44]
	movs r1, #0x2a
	adds r1, r1, r3
	mov ip, r1
	ldrb r1, [r1]
	movs r4, #1
	orrs r1, r4
	movs r2, #6
	orrs r1, r2
	mov r2, ip
	strb r1, [r2]
	ldr r2, [r3, #0x4c]
	adds r2, #0x31
	ldrb r3, [r2]
	movs r1, #3
	orrs r1, r3
	strb r1, [r2]
	ldr r0, [r0, #0x4c]
	movs r1, #1
	negs r1, r1
	bl MapUnitC_MarkSomething
	ldr r2, _080B9878  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	orrs r0, r4
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B9878: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B987C
sub_80B987C: @ 0x080B987C
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #8
	bl Proc_BlockEachWithMark
	ldr r0, _080B9898  @ gUnknown_08B12D1C
	adds r1, r4, #0
	bl Proc_CreateBlockingChild
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080B9898: .4byte gUnknown_08B12D1C

	THUMB_FUNC_START sub_80B989C
sub_80B989C: @ 0x080B989C
	push {lr}
	movs r0, #8
	bl Proc_UnblockEachWithMark
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B98A8
sub_80B98A8: @ 0x080B98A8
	push {r4, lr}
	ldr r3, [r0, #0x44]
	movs r1, #0x2a
	adds r1, r1, r3
	mov ip, r1
	ldrb r1, [r1]
	movs r4, #1
	orrs r1, r4
	movs r2, #6
	orrs r1, r2
	mov r2, ip
	strb r1, [r2]
	ldr r2, [r3, #0x4c]
	adds r2, #0x31
	ldrb r3, [r2]
	movs r1, #3
	orrs r1, r3
	strb r1, [r2]
	ldr r0, [r0, #0x4c]
	movs r1, #1
	negs r1, r1
	bl MapUnitC_MarkSomething
	ldr r2, _080B98F4  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	orrs r0, r4
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B98F4: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B98F8
sub_80B98F8: @ 0x080B98F8
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #8
	bl Proc_BlockEachWithMark
	ldr r0, _080B9914  @ gUnknown_08A2EE00
	adds r1, r4, #0
	bl Proc_CreateBlockingChild
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080B9914: .4byte gUnknown_08A2EE00

	THUMB_FUNC_START sub_80B9918
sub_80B9918: @ 0x080B9918
	push {lr}
	movs r0, #8
	bl Proc_UnblockEachWithMark
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9924
sub_80B9924: @ 0x080B9924
	push {r4, lr}
	ldr r3, [r0, #0x44]
	movs r1, #0x2a
	adds r1, r1, r3
	mov ip, r1
	ldrb r1, [r1]
	movs r4, #1
	orrs r1, r4
	movs r2, #6
	orrs r1, r2
	mov r2, ip
	strb r1, [r2]
	ldr r2, [r3, #0x4c]
	adds r2, #0x31
	ldrb r3, [r2]
	movs r1, #3
	orrs r1, r3
	strb r1, [r2]
	ldr r0, [r0, #0x4c]
	movs r1, #1
	negs r1, r1
	bl MapUnitC_MarkSomething
	ldr r2, _080B9970  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	orrs r0, r4
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B9970: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B9974
sub_80B9974: @ 0x080B9974
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #8
	bl Proc_BlockEachWithMark
	ldr r0, _080B9990  @ gUnknown_08A3E8B8
	adds r1, r4, #0
	bl Proc_CreateBlockingChild
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080B9990: .4byte gUnknown_08A3E8B8

	THUMB_FUNC_START sub_80B9994
sub_80B9994: @ 0x080B9994
	push {lr}
	movs r0, #8
	bl Proc_UnblockEachWithMark
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B99A0
sub_80B99A0: @ 0x080B99A0
	push {r4, lr}
	ldr r3, [r0, #0x44]
	movs r1, #0x2a
	adds r1, r1, r3
	mov ip, r1
	ldrb r1, [r1]
	movs r4, #1
	orrs r1, r4
	movs r2, #6
	orrs r1, r2
	mov r2, ip
	strb r1, [r2]
	ldr r2, [r3, #0x4c]
	adds r2, #0x31
	ldrb r3, [r2]
	movs r1, #3
	orrs r1, r3
	strb r1, [r2]
	ldr r0, [r0, #0x4c]
	movs r1, #1
	negs r1, r1
	bl MapUnitC_MarkSomething
	ldr r2, _080B99EC  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	orrs r0, r4
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B99EC: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B99F0
sub_80B99F0: @ 0x080B99F0
	ldr r2, _080B9A0C  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_080B9A0C: .4byte gLCDControlBuffer

	THUMB_FUNC_START WorldMap_HideEverything
WorldMap_HideEverything: @ 0x080B9A10
	ldr r2, _080B9A30  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_080B9A30: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B9A34
sub_80B9A34: @ 0x080B9A34
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x2c]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080B9A52
	movs r0, #0x45
	negs r0, r0
	ands r1, r0
	str r1, [r2, #0x2c]
	movs r0, #4
	movs r1, #0
	bl NewFadeIn
_080B9A52:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9A58
sub_80B9A58: @ 0x080B9A58
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x54]
	movs r1, #0
	movs r2, #0
	bl MapMU_80BE108
	ldr r4, _080B9A8C  @ gUnknown_03005280
	ldrb r0, [r4, #0x11]
	bl WMLoc_GetChapterId
	ldr r1, _080B9A90  @ gUnknown_0202BCF0
	movs r2, #0
	strb r0, [r1, #0xe]
	strb r2, [r4, #1]
	ldrb r0, [r4, #0x11]
	bl sub_80BCA1C
	adds r1, r0, #0
	movs r0, #0
	adds r2, r5, #0
	bl sub_80C07D4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B9A8C: .4byte gUnknown_03005280
_080B9A90: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80B9A94
sub_80B9A94: @ 0x080B9A94
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C081C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080B9AA8
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080B9AA8:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9AB0
sub_80B9AB0: @ 0x080B9AB0
	push {lr}
	movs r0, #4
	bl Sound_FadeOut800231C
	ldr r2, _080B9AE8  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bl sub_80B895C
	bl sub_80C3660
	bl sub_80B8694
	pop {r0}
	bx r0
	.align 2, 0
_080B9AE8: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B9AEC
sub_80B9AEC: @ 0x080B9AEC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r4, #4
	ldr r6, _080B9B34  @ gUnknown_03005280
	movs r0, #0xcc
	adds r0, r0, r6
	mov r8, r0
	adds r5, r6, #0
	adds r5, #0x10
_080B9B02:
	movs r1, #0x12
	ldrsh r0, [r5, r1]
	cmp r0, #0
	beq _080B9B20
	ldrb r0, [r6, #0x11]
	ldrb r1, [r5, #0x11]
	cmp r0, r1
	bne _080B9B20
	subs r0, r4, #4
	mov r1, r8
	strb r0, [r1]
	ldr r0, [r7, #0x54]
	adds r1, r4, #0
	bl MapMU_RemoveUnit
_080B9B20:
	adds r5, #4
	adds r4, #1
	cmp r4, #6
	ble _080B9B02
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080B9B34: .4byte gUnknown_03005280

	THUMB_FUNC_START WorldMap_InitChapterTransition
WorldMap_InitChapterTransition: @ 0x080B9B38
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x54]
	movs r1, #0
	movs r2, #0
	bl MapMU_80BE108
	ldr r5, _080B9B70  @ gUnknown_03005280
	ldrb r2, [r5, #0x11]
	lsls r0, r2, #5
	ldr r1, _080B9B74  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #3
	beq _080B9B7C
	adds r0, r4, #0
	adds r0, #0x3e
	ldrb r0, [r0]
	bl WMLoc_GetChapterId
	ldr r1, _080B9B78  @ gUnknown_0202BCF0
	strb r0, [r1, #0xe]
	ldrb r1, [r5]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r5]
	b _080B9B86
	.align 2, 0
_080B9B70: .4byte gUnknown_03005280
_080B9B74: .4byte gUnknown_082060B0
_080B9B78: .4byte gUnknown_0202BCF0
_080B9B7C:
	adds r0, r2, #0
	bl WMLoc_GetChapterId
	ldr r1, _080B9B9C  @ gUnknown_0202BCF0
	strb r0, [r1, #0xe]
_080B9B86:
	adds r0, r4, #0
	bl CallChapterWMIntroEvents
	ldr r1, _080B9BA0  @ gUnknown_03005280
	movs r0, #0
	strb r0, [r1, #1]
	bl sub_80C1AB0
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080B9B9C: .4byte gUnknown_0202BCF0
_080B9BA0: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80B9BA4
sub_80B9BA4: @ 0x080B9BA4
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	bl EventEngineExists
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080B9CA4
	ldr r0, [r6, #0x44]
	ldr r0, [r0, #0x4c]
	bl MapRoute_80BC2DC
	ldr r0, _080B9C04  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0
	bne _080B9C08
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	b _080B9C26
	.align 2, 0
_080B9C04: .4byte gUnknown_03005280
_080B9C08:
	ldr r2, _080B9C68  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
_080B9C26:
	bl sub_80B895C
	bl sub_80C3660
	bl sub_80B8694
	bl sub_80C0200
	bl sub_80C2460
	bl sub_80C1F5C
	ldr r5, _080B9C6C  @ gUnknown_03005280
	ldrb r1, [r5]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _080B9C70
	movs r0, #1
	bl Sound_FadeOut800231C
	movs r0, #1
	bl SoundStuff_80023E0
	ldrb r0, [r5, #0x11]
	adds r2, r6, #0
	adds r2, #0x3e
	strb r0, [r2]
	adds r0, r6, #0
	movs r1, #0xf
	bl Proc_GotoLabel
	b _080B9CA4
	.align 2, 0
_080B9C68: .4byte gLCDControlBuffer
_080B9C6C: .4byte gUnknown_03005280
_080B9C70:
	ldrb r1, [r5, #0x11]
	lsls r1, r1, #5
	ldr r0, _080B9CAC  @ gUnknown_082060B0
	adds r1, r1, r0
	movs r2, #0x18
	ldrsh r0, [r1, r2]
	movs r2, #0x1a
	ldrsh r1, [r1, r2]
	lsls r2, r0, #8
	str r2, [r5, #8]
	lsls r2, r1, #8
	str r2, [r5, #0xc]
	mov r4, sp
	adds r4, #6
	add r2, sp, #4
	adds r3, r4, #0
	bl GetWMCenteredCameraPosition
	add r0, sp, #4
	ldrh r0, [r0]
	strh r0, [r5, #2]
	ldrh r0, [r4]
	strh r0, [r5, #4]
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
_080B9CA4:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080B9CAC: .4byte gUnknown_082060B0

	THUMB_FUNC_START WorldMap_WaitForChapterIntroEvents
WorldMap_WaitForChapterIntroEvents: @ 0x080B9CB0
	push {r4, lr}
	adds r4, r0, #0
	bl EventEngineExists
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080B9CFA
	ldr r2, _080B9D00  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bl sub_80B895C
	bl sub_80C3660
	bl sub_80B8694
	bl sub_80C0200
	bl sub_80C2460
	bl sub_80C1F5C
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080B9CFA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B9D00: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80B9D04
sub_80B9D04: @ 0x080B9D04
	ldr r0, _080B9D10  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	strb r1, [r0]
	bx lr
	.align 2, 0
_080B9D10: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80B9D14
sub_80B9D14: @ 0x080B9D14
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r4, #0
	ldr r3, _080B9D2C  @ gUnknown_03005280
	ldrb r1, [r3]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080B9D30
	movs r4, #1
	b _080B9D96
	.align 2, 0
_080B9D2C: .4byte gUnknown_03005280
_080B9D30:
	ldr r0, _080B9D44  @ gUnknown_0202BCF0
	ldrb r1, [r0, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080B9D60
	movs r2, #4
	adds r1, r3, #0
	adds r1, #0x10
	b _080B9D50
	.align 2, 0
_080B9D44: .4byte gUnknown_0202BCF0
_080B9D48:
	adds r1, #4
	adds r2, #1
	cmp r2, #6
	bgt _080B9D58
_080B9D50:
	movs r3, #0x12
	ldrsh r0, [r1, r3]
	cmp r0, #0
	beq _080B9D48
_080B9D58:
	cmp r2, #7
	bne _080B9D92
	movs r4, #1
	b _080B9D96
_080B9D60:
	ldrb r0, [r3, #0x11]
	lsls r0, r0, #5
	ldr r1, _080B9D78  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #3
	bne _080B9D92
	movs r2, #4
	adds r1, r3, #0
	adds r1, #0x10
	b _080B9D84
	.align 2, 0
_080B9D78: .4byte gUnknown_082060B0
_080B9D7C:
	adds r1, #4
	adds r2, #1
	cmp r2, #6
	bgt _080B9D8C
_080B9D84:
	movs r3, #0x12
	ldrsh r0, [r1, r3]
	cmp r0, #0
	beq _080B9D7C
_080B9D8C:
	cmp r2, #7
	bne _080B9D92
	movs r4, #1
_080B9D92:
	cmp r4, #0
	beq _080B9DAC
_080B9D96:
	movs r0, #0
	mov r1, sp
	bl sub_80C1A74
	ldr r0, [sp]
	cmp r0, #0
	ble _080B9DAC
	adds r0, r5, #0
	movs r1, #2
	bl Proc_GotoLabel
_080B9DAC:
	bl sub_80C1AF8
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9DB8
sub_80B9DB8: @ 0x080B9DB8
	push {lr}
	bl sub_80C1ADC
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9DC4
sub_80B9DC4: @ 0x080B9DC4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C1BE0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080B9DD8
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080B9DD8:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9DE0
sub_80B9DE0: @ 0x080B9DE0
	push {r4, lr}
	sub sp, #4
	ldr r0, [r0, #0x54]
	mov r4, sp
	adds r4, #2
	movs r1, #0
	mov r2, sp
	adds r3, r4, #0
	bl sub_80BE3A0
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	bl sub_80C168C
	mov r3, sp
	ldr r1, _080B9E38  @ gUnknown_03005280
	ldrb r0, [r1, #0x11]
	lsls r0, r0, #5
	ldr r2, _080B9E3C  @ gUnknown_082060B0
	adds r0, r0, r2
	ldrh r0, [r0, #0x18]
	strh r0, [r3]
	ldrb r0, [r1, #0x11]
	lsls r0, r0, #5
	adds r0, r0, r2
	ldrh r0, [r0, #0x1a]
	strh r0, [r4]
	mov r0, sp
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r0, r0, #8
	str r0, [r1, #8]
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #8
	str r0, [r1, #0xc]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B9E38: .4byte gUnknown_03005280
_080B9E3C: .4byte gUnknown_082060B0

	THUMB_FUNC_START sub_80B9E40
sub_80B9E40: @ 0x080B9E40
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C16DC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080B9E5A
	ldr r1, _080B9E60  @ gUnknown_03005280
	movs r0, #1
	strb r0, [r1, #1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080B9E5A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080B9E60: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80B9E64
sub_80B9E64: @ 0x080B9E64
	push {lr}
	sub sp, #4
	bl sub_80B895C
	bl sub_80C3660
	bl sub_80B8694
	mov r2, sp
	ldr r1, _080B9EA0  @ gUnknown_03005280
	ldrh r0, [r1, #2]
	strh r0, [r2]
	adds r2, #2
	ldrh r0, [r1, #4]
	strh r0, [r2]
	mov r0, sp
	movs r3, #0
	ldrsh r0, [r0, r3]
	adds r0, #0x78
	lsls r0, r0, #8
	str r0, [r1, #8]
	movs r3, #0
	ldrsh r0, [r2, r3]
	adds r0, #0x50
	lsls r0, r0, #8
	str r0, [r1, #0xc]
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080B9EA0: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80B9EA4
sub_80B9EA4: @ 0x080B9EA4
	push {lr}
	sub sp, #4
	ldr r2, _080B9F04  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	movs r0, #1
	bl Sound_FadeOut800231C
	movs r0, #1
	bl SoundStuff_80023E0
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080B9F04: .4byte gLCDControlBuffer

	THUMB_FUNC_START DoNothing
DoNothing: @ 0x080B9F08
	push {lr}
	bl nullsub_22
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9F14
sub_80B9F14: @ 0x080B9F14
	push {lr}
	adds r1, r0, #0
	movs r0, #0
	bl sub_80C400C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9F24
sub_80B9F24: @ 0x080B9F24
	push {lr}
	adds r1, r0, #0
	movs r0, #1
	bl sub_80C400C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9F34
sub_80B9F34: @ 0x080B9F34
	push {lr}
	adds r1, r0, #0
	movs r0, #2
	bl sub_80C400C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9F44
sub_80B9F44: @ 0x080B9F44
	push {lr}
	adds r1, r0, #0
	movs r0, #3
	bl sub_80C400C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9F54
sub_80B9F54: @ 0x080B9F54
	push {r4, lr}
	ldr r4, _080B9F68  @ gUnknown_0202BCF0
	ldrb r1, [r4, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080B9F6C
	movs r4, #8
	b _080B9FAA
	.align 2, 0
_080B9F68: .4byte gUnknown_0202BCF0
_080B9F6C:
	ldr r0, _080B9F90  @ gUnknown_03005280
	bl sub_80BD014
	cmp r0, #0
	blt _080B9FA8
	ldrb r1, [r4, #0x1b]
	cmp r1, #1
	blt _080B9F84
	cmp r1, #2
	ble _080B9F84
	cmp r1, #3
	beq _080B9F98
_080B9F84:
	ldr r1, _080B9F94  @ gUnknown_08A3DD88
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r4, [r0]
	b _080B9FAA
	.align 2, 0
_080B9F90: .4byte gUnknown_03005280
_080B9F94: .4byte gUnknown_08A3DD88
_080B9F98:
	ldr r1, _080B9FA4  @ gUnknown_08A3DD88
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r4, [r0, #2]
	b _080B9FAA
	.align 2, 0
_080B9FA4: .4byte gUnknown_08A3DD88
_080B9FA8:
	movs r4, #4
_080B9FAA:
	bl Sound_GetCurrentSong
	cmp r0, r4
	beq _080B9FB8
	adds r0, r4, #0
	bl sub_8002620
_080B9FB8:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80B9FC0
sub_80B9FC0: @ 0x080B9FC0
	push {lr}
	ldr r0, _080B9FD0  @ gUnknown_08A3D748
	bl Proc_Find
	bl sub_80B9F54
	pop {r0}
	bx r0
	.align 2, 0
_080B9FD0: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80B9FD4
sub_80B9FD4: @ 0x080B9FD4
	push {lr}
	ldr r0, _080BA000  @ gUnknown_03005280
	bl sub_80BD014
	cmp r0, #0
	bge _080B9FE2
	movs r0, #0
_080B9FE2:
	bl WMLoc_GetChapterId
	ldr r2, _080BA004  @ gUnknown_0202BCF0
	strb r0, [r2, #0xe]
	adds r2, #0x4a
	ldrb r1, [r2]
	movs r0, #0xf
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
_080BA000: .4byte gUnknown_03005280
_080BA004: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80BA008
sub_80BA008: @ 0x080BA008
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080BA020  @ gUnknown_08A3D748
	bl Proc_Find
	str r4, [r0, #0x2c]
	movs r1, #0
	bl Proc_GotoLabel
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BA020: .4byte gUnknown_08A3D748

	THUMB_FUNC_START EndWM
EndWM: @ 0x080BA024
	push {lr}
	ldr r0, _080BA04C  @ gUnknown_08A20DA4
	bl Proc_Find
	bl Proc_Delete
	ldr r0, _080BA050  @ gUnknown_08A3D748
	bl Proc_Find
	bl Proc_Delete
	bl sub_8010E50
	bl APProc_DeleteAll
	movs r0, #0
	bl SetupBackgrounds
	pop {r0}
	bx r0
	.align 2, 0
_080BA04C: .4byte gUnknown_08A20DA4
_080BA050: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BA054
sub_80BA054: @ 0x080BA054
	push {lr}
	ldr r0, _080BA068  @ gUnknown_08A3D748
	bl Proc_Find
	cmp r0, #0
	beq _080BA062
	movs r0, #1
_080BA062:
	pop {r1}
	bx r1
	.align 2, 0
_080BA068: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BA06C
sub_80BA06C: @ 0x080BA06C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	cmp r0, #0
	ble _080BA07C
	subs r0, #1
	str r0, [r4, #0x2c]
	b _080BA0AE
_080BA07C:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #6
	beq _080BA08C
	cmp r0, #7
	beq _080BA09C
	b _080BA0A8
_080BA08C:
	ldr r0, [r4, #0x34]
	ldr r1, [r4, #0x40]
	ldr r2, [r4, #0x44]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl sub_80B86CC
	b _080BA0A8
_080BA09C:
	ldr r0, [r4, #0x34]
	ldr r1, [r4, #0x44]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_80B8844
_080BA0A8:
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080BA0AE:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BA0B4
sub_80BA0B4: @ 0x080BA0B4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x18]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080BA0F8  @ gUnknown_08A3D748
	bl Proc_Find
	adds r1, r0, #0
	ldr r0, _080BA0FC  @ gUnknown_08A3DD08
	bl Proc_Create
	str r5, [r0, #0x2c]
	adds r1, r0, #0
	adds r1, #0x30
	strb r4, [r1]
	str r6, [r0, #0x34]
	mov r1, r8
	str r1, [r0, #0x40]
	str r7, [r0, #0x38]
	ldr r1, [sp, #0x1c]
	str r1, [r0, #0x3c]
	ldr r1, [sp, #0x20]
	str r1, [r0, #0x44]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BA0F8: .4byte gUnknown_08A3D748
_080BA0FC: .4byte gUnknown_08A3DD08

	THUMB_FUNC_START sub_80BA100
sub_80BA100: @ 0x080BA100
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	ldr r0, [r6, #0x30]
	lsls r0, r0, #5
	ldr r1, _080BA194  @ gUnknown_020228AA
	adds r5, r0, r1
	adds r4, r6, #0
	adds r4, #0x34
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	movs r1, #0x1f
	mov r9, r1
	movs r1, #0x20
	subs r3, r1, r0
	movs r2, #0xf8
	lsls r2, r2, #2
	mov r8, r2
	movs r7, #0xf8
	lsls r7, r7, #7
	mov ip, r7
	movs r0, #0xe
	mov sl, r0
_080BA136:
	ldrh r2, [r4]
	movs r0, #0x1f
	ands r0, r2
	adds r1, r0, #0
	muls r1, r3, r1
	asrs r1, r1, #5
	mov r7, r9
	ands r1, r7
	mov r0, r8
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r7, r8
	ands r0, r7
	adds r1, r1, r0
	mov r0, ip
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r2, ip
	ands r0, r2
	adds r1, r1, r0
	strh r1, [r5]
	adds r4, #2
	adds r5, #2
	movs r7, #1
	negs r7, r7
	add sl, r7
	mov r0, sl
	cmp r0, #0
	bge _080BA136
	bl EnablePaletteSync
	ldr r0, [r6, #0x2c]
	cmp r0, #0x20
	bne _080BA184
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
_080BA184:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BA194: .4byte gUnknown_020228AA

	THUMB_FUNC_START sub_80BA198
sub_80BA198: @ 0x080BA198
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080BA1E4  @ gUnknown_08A3D748
	bl Proc_Find
	adds r1, r0, #0
	ldr r0, _080BA1E8  @ gUnknown_08A3DD20
	bl Proc_Create
	adds r5, r0, #0
	movs r0, #0x1f
	ands r4, r0
	str r4, [r5, #0x30]
	movs r0, #0
	str r0, [r5, #0x2c]
	ldr r0, _080BA1EC  @ unit_icon_pal_player
	movs r1, #0xe0
	lsls r1, r1, #2
	movs r2, #0x80
	bl CopyToPaletteBuffer
	ldr r0, _080BA1F0  @ gPaletteBuffer
	lsls r4, r4, #5
	adds r4, r4, r0
	adds r4, #2
	adds r5, #0x34
	movs r1, #0xe
_080BA1CE:
	ldrh r0, [r4]
	strh r0, [r5]
	adds r4, #2
	adds r5, #2
	subs r1, #1
	cmp r1, #0
	bge _080BA1CE
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BA1E4: .4byte gUnknown_08A3D748
_080BA1E8: .4byte gUnknown_08A3DD20
_080BA1EC: .4byte unit_icon_pal_player
_080BA1F0: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80BA1F4
sub_80BA1F4: @ 0x080BA1F4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	ldr r0, [r6, #0x30]
	lsls r0, r0, #5
	ldr r1, _080BA284  @ gUnknown_020228AA
	adds r5, r0, r1
	adds r4, r6, #0
	adds r4, #0x34
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	movs r1, #0x1f
	mov r9, r1
	adds r3, r0, #0
	movs r2, #0xf8
	lsls r2, r2, #2
	mov r8, r2
	movs r7, #0xf8
	lsls r7, r7, #7
	mov ip, r7
	movs r0, #0xe
	mov sl, r0
_080BA228:
	ldrh r2, [r4]
	movs r0, #0x1f
	ands r0, r2
	adds r1, r0, #0
	muls r1, r3, r1
	asrs r1, r1, #5
	mov r7, r9
	ands r1, r7
	mov r0, r8
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r7, r8
	ands r0, r7
	adds r1, r1, r0
	mov r0, ip
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r2, ip
	ands r0, r2
	adds r1, r1, r0
	strh r1, [r5]
	adds r4, #2
	adds r5, #2
	movs r7, #1
	negs r7, r7
	add sl, r7
	mov r0, sl
	cmp r0, #0
	bge _080BA228
	bl EnablePaletteSync
	ldr r0, [r6, #0x2c]
	cmp r0, #0x20
	bne _080BA276
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
_080BA276:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BA284: .4byte gUnknown_020228AA

	THUMB_FUNC_START sub_80BA288
sub_80BA288: @ 0x080BA288
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080BA2D4  @ gUnknown_08A3D748
	bl Proc_Find
	adds r1, r0, #0
	ldr r0, _080BA2D8  @ gUnknown_08A3DD38
	bl Proc_Create
	adds r5, r0, #0
	movs r0, #0x1f
	ands r4, r0
	str r4, [r5, #0x30]
	movs r0, #0
	str r0, [r5, #0x2c]
	ldr r0, _080BA2DC  @ unit_icon_pal_player
	movs r1, #0xe0
	lsls r1, r1, #2
	movs r2, #0x80
	bl CopyToPaletteBuffer
	ldr r0, _080BA2E0  @ gPaletteBuffer
	lsls r4, r4, #5
	adds r4, r4, r0
	adds r4, #2
	adds r5, #0x34
	movs r1, #0xe
_080BA2BE:
	ldrh r0, [r4]
	strh r0, [r5]
	adds r4, #2
	adds r5, #2
	subs r1, #1
	cmp r1, #0
	bge _080BA2BE
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BA2D4: .4byte gUnknown_08A3D748
_080BA2D8: .4byte gUnknown_08A3DD38
_080BA2DC: .4byte unit_icon_pal_player
_080BA2E0: .4byte gPaletteBuffer

	THUMB_FUNC_START NewWorldMap
NewWorldMap: @ 0x080BA2E4
	push {lr}
	ldr r0, _080BA310  @ gUnknown_08A3D748
	movs r1, #3
	bl Proc_Create
	adds r3, r0, #0
	adds r2, r3, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	ldr r0, _080BA314  @ gUnknown_0202BCF0
	ldrb r1, [r0, #0x14]
	movs r2, #4
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _080BA318
	str r2, [r3, #0x2c]
	b _080BA330
	.align 2, 0
_080BA310: .4byte gUnknown_08A3D748
_080BA314: .4byte gUnknown_0202BCF0
_080BA318:
	ldr r0, _080BA328  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080BA32C
	movs r0, #0xc
	b _080BA32E
	.align 2, 0
_080BA328: .4byte gUnknown_03005280
_080BA32C:
	movs r0, #0x10
_080BA32E:
	str r0, [r3, #0x2c]
_080BA330:
	pop {r0}
	bx r0

	THUMB_FUNC_START WorldMap_SetupChapterStuff
WorldMap_SetupChapterStuff: @ 0x080BA334
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r0, #4
	bl Sound_FadeOut800231C
	ldr r2, _080BA360  @ gUnknown_03005280
	ldrb r1, [r2]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080BA356
	ldr r6, _080BA364  @ gUnknown_0202BCF0
	ldrb r1, [r6, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080BA368
_080BA356:
	ldr r0, [r5, #0x2c]
	bl sub_80BA008
	b _080BA3BC
	.align 2, 0
_080BA360: .4byte gUnknown_03005280
_080BA364: .4byte gUnknown_0202BCF0
_080BA368:
	ldrb r0, [r2, #0x11]
	adds r1, r2, #0
	adds r1, #0xc8
	strb r0, [r1]
	bl WMLoc_GetNextLocId
	cmp r0, #0
	blt _080BA3BC
	bl WMLoc_GetChapterId
	adds r4, r0, #0
	strb r4, [r6, #0xe]
	ldr r6, _080BA3D0  @ gUnknown_088B39EC
	bl GetROMChapterStruct
	adds r0, #0x75
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r6
	ldr r0, [r0]
	cmp r0, #0
	beq _080BA3C8
	bl sub_80BCFB4
	ldr r1, [r5, #0x48]
	adds r1, #0x32
	ldrb r2, [r1]
	movs r0, #3
	negs r0, r0
	ands r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	bl GetROMChapterStruct
	adds r0, #0x75
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r6
	ldr r0, [r0]
	movs r1, #0
	bl CallEvent
_080BA3BC:
	adds r0, r5, #0
	bl sub_80B8680
	movs r0, #0
	bl NewMapMuEntry
_080BA3C8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BA3D0: .4byte gUnknown_088B39EC

	THUMB_FUNC_START CallChapterWMIntroEvents
CallChapterWMIntroEvents: @ 0x080BA3D4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r6, _080BA41C  @ gUnknown_088B3AD8
	ldr r4, _080BA420  @ gUnknown_0202BCF0
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetROMChapterStruct
	adds r0, #0x75
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r6
	ldr r0, [r0]
	cmp r0, #0
	beq _080BA416
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetROMChapterStruct
	adds r0, #0x75
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r6
	ldr r0, [r0]
	movs r1, #0
	bl CallEvent
	adds r0, r5, #0
	bl sub_80B8680
	movs r0, #0
	bl NewMapMuEntry
_080BA416:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BA41C: .4byte gUnknown_088B3AD8
_080BA420: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80BA424
sub_80BA424: @ 0x080BA424
	push {r4, lr}
	bl sub_8002AC8
	ldr r4, _080BA454  @ gUnknown_08A3D748
	adds r0, r4, #0
	bl Proc_Find
	ldr r0, [r0, #0x44]
	ldr r0, [r0, #0x4c]
	bl MapRoute_80BC2DC
	adds r0, r4, #0
	bl Proc_Find
	ldr r0, [r0, #0x44]
	ldr r1, [r0, #0x4c]
	adds r1, #0x31
	ldrb r2, [r1]
	movs r0, #3
	orrs r0, r2
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BA454: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BA458
sub_80BA458: @ 0x080BA458
	push {r4, r5, r6, lr}
	ldr r4, _080BA48C  @ gBG3TilemapBuffer
	movs r3, #0
	movs r1, #0
	movs r2, #0x90
	lsls r2, r2, #8
	adds r6, r2, #0
_080BA466:
	adds r5, r1, #1
	movs r2, #0x1f
_080BA46A:
	adds r1, r3, #0
	orrs r1, r6
	strh r1, [r4]
	adds r1, r3, #1
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	adds r4, #2
	subs r2, #1
	cmp r2, #0
	bge _080BA46A
	adds r1, r5, #0
	cmp r1, #0x1f
	ble _080BA466
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080BA48C: .4byte gBG3TilemapBuffer

	THUMB_FUNC_START sub_80BA490
sub_80BA490: @ 0x080BA490
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r6, _080BA4CC  @ 0x06008000
	movs r5, #0
	movs r4, #0x1f
_080BA49A:
	ldr r0, [r7, #0x3c]
	adds r0, r0, r5
	adds r1, r6, #0
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	movs r0, #0x80
	lsls r0, r0, #3
	adds r6, r6, r0
	movs r0, #0xf0
	lsls r0, r0, #3
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bge _080BA49A
	bl sub_80BA458
	movs r0, #8
	bl BG_EnableSyncByMask
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BA4CC: .4byte 0x06008000

	THUMB_FUNC_START sub_80BA4D0
sub_80BA4D0: @ 0x080BA4D0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	ldr r1, [r0, #0x40]
	str r1, [sp]
	ldr r3, [r0, #0x44]
	adds r5, r0, #0
	adds r5, #0x2e
	movs r2, #0
	ldrsb r2, [r5, r2]
	lsls r2, r2, #5
	adds r4, r0, #0
	adds r4, #0x2d
	movs r0, #0
	ldrsb r0, [r4, r0]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	adds r2, r2, r0
	adds r3, r3, r2
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080BA588
	movs r1, #0
	str r5, [sp, #4]
	mov sl, r4
	movs r2, #0x1f
	mov r9, r2
_080BA512:
	adds r5, r3, #0
	ldr r2, [sp, #4]
	movs r0, #0
	ldrsb r0, [r2, r0]
	adds r0, r1, r0
	mov r2, r9
	ands r0, r2
	movs r6, #0
	movs r2, #0x20
	adds r2, r2, r5
	mov r8, r2
	adds r1, #1
	mov ip, r1
	lsls r0, r0, #6
	ldr r1, [sp]
	adds r7, r0, r1
_080BA532:
	lsls r1, r6, #1
	mov r2, sl
	movs r0, #0
	ldrsb r0, [r2, r0]
	adds r4, r1, r0
	mov r0, r9
	ands r4, r0
	lsls r3, r4, #1
	adds r3, r3, r7
	ldrh r0, [r3]
	ldr r1, _080BA584  @ 0x00000FFF
	ands r1, r0
	ldrb r2, [r5]
	movs r0, #0xf0
	ands r0, r2
	adds r0, #0x90
	lsls r0, r0, #8
	orrs r1, r0
	strh r1, [r3]
	adds r5, #1
	adds r2, r4, #1
	mov r1, r9
	ands r2, r1
	lsls r2, r2, #1
	adds r2, r2, r7
	ldrh r0, [r2]
	ldr r1, _080BA584  @ 0x00000FFF
	ands r1, r0
	ldrb r0, [r5]
	adds r0, #9
	lsls r0, r0, #0xc
	orrs r1, r0
	strh r1, [r2]
	adds r6, #1
	cmp r6, #0xf
	ble _080BA532
	mov r3, r8
	mov r1, ip
	cmp r1, #0x15
	ble _080BA512
	b _080BA602
	.align 2, 0
_080BA584: .4byte 0x00000FFF
_080BA588:
	movs r1, #0
	str r5, [sp, #4]
	mov sl, r4
	movs r2, #0x1f
	mov r9, r2
_080BA592:
	adds r5, r3, #0
	ldr r2, [sp, #4]
	movs r0, #0
	ldrsb r0, [r2, r0]
	adds r0, r1, r0
	mov r2, r9
	ands r0, r2
	movs r6, #0
	movs r2, #0x20
	adds r2, r2, r5
	mov r8, r2
	adds r1, #1
	mov ip, r1
	lsls r0, r0, #6
	ldr r1, [sp]
	adds r7, r0, r1
_080BA5B2:
	lsls r1, r6, #1
	mov r2, sl
	movs r0, #0
	ldrsb r0, [r2, r0]
	adds r4, r1, r0
	mov r0, r9
	ands r4, r0
	lsls r2, r4, #1
	adds r2, r2, r7
	ldrh r0, [r2]
	ldr r1, _080BA618  @ 0x00000FFF
	ands r1, r0
	ldrb r0, [r5]
	adds r0, #9
	lsls r0, r0, #0xc
	orrs r1, r0
	strh r1, [r2]
	adds r2, r4, #1
	mov r1, r9
	ands r2, r1
	lsls r2, r2, #1
	adds r2, r2, r7
	ldrh r0, [r2]
	ldr r1, _080BA618  @ 0x00000FFF
	ands r1, r0
	ldrb r3, [r5]
	movs r0, #0xf0
	ands r0, r3
	adds r0, #0x90
	lsls r0, r0, #8
	orrs r1, r0
	strh r1, [r2]
	adds r5, #1
	adds r6, #1
	cmp r6, #0xf
	ble _080BA5B2
	mov r3, r8
	mov r1, ip
	cmp r1, #0x15
	ble _080BA592
_080BA602:
	movs r0, #8
	bl BG_EnableSyncByMask
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BA618: .4byte 0x00000FFF

	THUMB_FUNC_START sub_80BA61C
sub_80BA61C: @ 0x080BA61C
	movs r1, #0
	strh r1, [r0, #0x38]
	adds r0, #0x40
	strh r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80BA628
sub_80BA628: @ 0x080BA628
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	movs r1, #0x38
	ldrsh r0, [r6, r1]
	cmp r0, #0
	beq _080BA6C8
	movs r2, #0
	cmp r2, r0
	bge _080BA6C4
_080BA642:
	lsls r1, r2, #3
	ldr r0, [r6, #0x3c]
	adds r4, r0, r1
	movs r0, #0
	ldrsb r0, [r4, r0]
	lsls r0, r0, #3
	mov r9, r0
	ldrb r0, [r4, #2]
	movs r1, #0x1f
	ands r1, r0
	movs r0, #4
	ldrsb r0, [r4, r0]
	lsls r0, r0, #5
	mov r8, r0
	movs r3, #0
	movs r0, #5
	ldrsb r0, [r4, r0]
	adds r2, #1
	mov sl, r2
	cmp r3, r0
	bge _080BA6BA
	lsls r0, r1, #5
	ldr r1, _080BA6D8  @ 0x06008000
	adds r7, r0, r1
_080BA672:
	movs r2, #3
	ldrsb r2, [r4, r2]
	lsls r0, r3, #0x18
	asrs r5, r0, #0x18
	adds r2, r2, r5
	movs r0, #0x1f
	ands r2, r0
	movs r1, #1
	ldrsb r1, [r4, r1]
	adds r1, r1, r5
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #7
	ldr r1, [r6, #0x2c]
	adds r1, r1, r0
	mov r3, r9
	lsls r0, r3, #2
	adds r0, r1, r0
	lsls r2, r2, #0xa
	adds r1, r2, r7
	mov r2, r8
	cmp r2, #0
	bge _080BA6A2
	adds r2, #3
_080BA6A2:
	lsls r2, r2, #9
	lsrs r2, r2, #0xb
	bl CpuFastSet
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #5
	ldrsb r1, [r4, r1]
	cmp r0, r1
	blt _080BA672
_080BA6BA:
	mov r2, sl
	movs r1, #0x38
	ldrsh r0, [r6, r1]
	cmp r2, r0
	blt _080BA642
_080BA6C4:
	movs r0, #0
	strh r0, [r6, #0x38]
_080BA6C8:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BA6D8: .4byte 0x06008000

	THUMB_FUNC_START sub_80BA6DC
sub_80BA6DC: @ 0x080BA6DC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r1, #0x38
	ldrsh r0, [r4, r1]
	cmp r0, #7
	bgt _080BA70E
	adds r1, r0, #0
	lsls r1, r1, #3
	ldr r0, [r4, #0x3c]
	adds r0, r0, r1
	strb r5, [r0]
	strb r2, [r0, #1]
	strb r3, [r0, #2]
	ldr r1, [sp, #0xc]
	strb r1, [r0, #3]
	ldr r1, [sp, #0x10]
	strb r1, [r0, #4]
	ldr r1, [sp, #0x14]
	strb r1, [r0, #5]
	ldrh r0, [r4, #0x38]
	adds r0, #1
	strh r0, [r4, #0x38]
	movs r0, #0
	b _080BA710
_080BA70E:
	movs r0, #1
_080BA710:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START NewMapScreenVSynce
NewMapScreenVSynce: @ 0x080BA718
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, _080BA74C  @ gUnknown_08A3DDF4
	movs r1, #0
	bl Proc_Create
	adds r2, r0, #0
	cmp r2, #0
	beq _080BA750
	str r4, [r2, #0x2c]
	str r5, [r2, #0x30]
	str r6, [r2, #0x34]
	movs r0, #0
	strh r0, [r2, #0x38]
	str r7, [r2, #0x3c]
	adds r1, r2, #0
	adds r1, #0x40
	strh r0, [r1]
	ldr r0, [sp, #0x14]
	str r0, [r2, #0x44]
	adds r0, r2, #0
	b _080BA752
	.align 2, 0
_080BA74C: .4byte gUnknown_08A3DDF4
_080BA750:
	movs r0, #0
_080BA752:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START MapScreen_OnDelete
MapScreen_OnDelete: @ 0x080BA758
	push {lr}
	ldr r0, [r0, #0x48]
	bl Proc_Delete
	pop {r0}
	bx r0

	THUMB_FUNC_START MapScreen_Init
MapScreen_Init: @ 0x080BA764
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	adds r1, r6, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
	movs r4, #0
	strh r0, [r6, #0x36]
	strh r0, [r6, #0x34]
	strh r0, [r6, #0x3a]
	strh r0, [r6, #0x38]
	ldr r0, _080BA7FC  @ gUnknown_08A83364
	str r0, [r6, #0x3c]
	movs r0, #3
	bl BG_GetMapBuffer
	str r0, [r6, #0x40]
	ldr r0, _080BA800  @ gUnknown_08A96064
	ldr r5, _080BA804  @ gUnknown_020087A0
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	str r5, [r6, #0x44]
	adds r0, r6, #0
	adds r0, #0x2c
	strb r4, [r0]
	subs r0, #1
	strb r4, [r0]
	adds r0, #3
	strb r4, [r0]
	subs r0, #1
	strb r4, [r0]
	adds r0, #3
	strb r4, [r0]
	subs r0, #1
	strb r4, [r0]
	adds r0, #3
	strb r4, [r0]
	subs r0, #1
	strb r4, [r0]
	ldr r0, _080BA808  @ gUnknown_08A95FE4
	movs r1, #0x90
	lsls r1, r1, #1
	movs r2, #0x80
	bl CopyToPaletteBuffer
	bl EnablePaletteSync
	ldr r0, _080BA80C  @ gBG3TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #8
	bl BG_EnableSyncByMask
	ldr r0, [r6, #0x3c]
	ldr r1, [r6, #0x40]
	ldr r2, [r6, #0x44]
	ldr r3, _080BA810  @ gUnknown_03001DA8
	ldr r4, _080BA814  @ gUnknown_03001DE8
	str r4, [sp]
	bl NewMapScreenVSynce
	str r0, [r6, #0x48]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BA7FC: .4byte gUnknown_08A83364
_080BA800: .4byte gUnknown_08A96064
_080BA804: .4byte gUnknown_020087A0
_080BA808: .4byte gUnknown_08A95FE4
_080BA80C: .4byte gBG3TilemapBuffer
_080BA810: .4byte gUnknown_03001DA8
_080BA814: .4byte gUnknown_03001DE8

	THUMB_FUNC_START sub_80BA818
sub_80BA818: @ 0x080BA818
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov sl, r0
	mov r8, r1
	adds r6, r2, #0
	mov r0, r8
	movs r1, #0x3c
	bl __modsi3
	adds r7, r0, #0
	adds r0, r6, #0
	movs r1, #0x28
	bl __modsi3
	mov r9, r0
	adds r0, r7, #0
	adds r0, #0x20
	cmp r0, #0x20
	ble _080BA878
	movs r5, #0x20
	subs r4, r5, r7
	str r6, [sp]
	str r4, [sp, #4]
	movs r0, #0x16
	str r0, [sp, #8]
	mov r0, sl
	adds r1, r7, #0
	mov r2, r9
	mov r3, r8
	bl sub_80BA6DC
	adds r1, r7, r4
	mov r0, r8
	adds r3, r0, r4
	str r6, [sp]
	subs r5, r5, r4
	str r5, [sp, #4]
	movs r0, #0x16
	str r0, [sp, #8]
	mov r0, sl
	mov r2, r9
	bl sub_80BA6DC
	b _080BA88E
_080BA878:
	str r6, [sp]
	movs r0, #0x20
	str r0, [sp, #4]
	movs r0, #0x16
	str r0, [sp, #8]
	mov r0, sl
	adds r1, r7, #0
	mov r2, r9
	mov r3, r8
	bl sub_80BA6DC
_080BA88E:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BA8A0
sub_80BA8A0: @ 0x080BA8A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r7, r0, #0
	adds r5, r7, #0
	adds r5, #0x2b
	adds r4, r7, #0
	adds r4, #0x2d
	movs r1, #0
	ldrsb r1, [r5, r1]
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r1, r0
	beq _080BA9A6
	adds r0, r7, #0
	bl sub_80BA4D0
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r0, #0
	ldrsb r0, [r5, r0]
	subs r1, r2, r0
	cmp r1, #0
	blt _080BA8DC
	cmp r1, #1
	bgt _080BA8E2
	b _080BA90A
_080BA8DC:
	subs r0, r0, r2
	cmp r0, #1
	ble _080BA90A
_080BA8E2:
	ldr r0, [r7, #0x48]
	adds r4, r7, #0
	adds r4, #0x2d
	movs r1, #0
	ldrsb r1, [r4, r1]
	adds r5, r7, #0
	adds r5, #0x2e
	movs r2, #0
	ldrsb r2, [r5, r2]
	bl sub_80BA818
	ldrb r0, [r4]
	adds r1, r7, #0
	adds r1, #0x2b
	strb r0, [r1]
	ldrb r1, [r5]
	adds r0, r7, #0
	adds r0, #0x2c
	strb r1, [r0]
	b _080BAAEE
_080BA90A:
	adds r2, r7, #0
	adds r2, #0x2d
	adds r0, r7, #0
	adds r0, #0x2b
	movs r3, #0
	ldrsb r3, [r2, r3]
	movs r1, #0
	ldrsb r1, [r0, r1]
	mov sl, r0
	mov r8, r2
	cmp r3, r1
	ble _080BA938
	adds r0, r3, #0
	adds r0, #0x1e
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #0x3c
	bl __modsi3
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	b _080BA944
_080BA938:
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	adds r4, r6, #0
_080BA944:
	adds r0, r7, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0x28
	bl __modsi3
	lsls r0, r0, #0x18
	asrs r0, r0, #8
	lsrs r5, r0, #0x10
	asrs r1, r0, #0x10
	adds r0, r1, #0
	adds r0, #0x15
	cmp r0, #0x27
	bgt _080BA96A
	movs r2, #0x15
	mov r9, r2
	b _080BA974
_080BA96A:
	movs r0, #0x28
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r9, r0
_080BA974:
	ldr r0, [r7, #0x48]
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	lsls r2, r5, #0x10
	asrs r2, r2, #0x10
	lsls r3, r4, #0x10
	asrs r3, r3, #0x10
	adds r4, r7, #0
	adds r4, #0x2e
	ldrb r4, [r4]
	lsls r4, r4, #0x18
	asrs r4, r4, #0x18
	str r4, [sp]
	movs r4, #1
	str r4, [sp, #4]
	mov r5, r9
	lsls r4, r5, #0x10
	asrs r4, r4, #0x10
	str r4, [sp, #8]
	bl sub_80BA6DC
	mov r1, r8
	ldrb r0, [r1]
	mov r2, sl
	strb r0, [r2]
_080BA9A6:
	adds r2, r7, #0
	adds r2, #0x2c
	adds r0, r7, #0
	adds r0, #0x2e
	movs r3, #0
	ldrsb r3, [r2, r3]
	movs r1, #0
	ldrsb r1, [r0, r1]
	str r0, [sp, #0x10]
	str r2, [sp, #0xc]
	cmp r3, r1
	bne _080BA9C0
	b _080BAAEE
_080BA9C0:
	adds r0, r7, #0
	bl sub_80BA4D0
	ldr r3, [sp, #0x10]
	movs r2, #0
	ldrsb r2, [r3, r2]
	ldr r4, [sp, #0xc]
	movs r0, #0
	ldrsb r0, [r4, r0]
	subs r1, r2, r0
	cmp r1, #0
	blt _080BA9DE
	cmp r1, #1
	bgt _080BA9E4
	b _080BAA08
_080BA9DE:
	subs r0, r0, r2
	cmp r0, #1
	ble _080BAA08
_080BA9E4:
	ldr r0, [r7, #0x48]
	adds r4, r7, #0
	adds r4, #0x2d
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldr r5, [sp, #0x10]
	movs r2, #0
	ldrsb r2, [r5, r2]
	bl sub_80BA818
	ldrb r1, [r4]
	adds r0, r7, #0
	adds r0, #0x2b
	strb r1, [r0]
	ldrb r0, [r5]
	ldr r1, [sp, #0xc]
	strb r0, [r1]
	b _080BAAEE
_080BAA08:
	ldr r2, [sp, #0x10]
	movs r1, #0
	ldrsb r1, [r2, r1]
	ldr r3, [sp, #0xc]
	movs r0, #0
	ldrsb r0, [r3, r0]
	cmp r1, r0
	ble _080BAA30
	adds r0, r1, #0
	adds r0, #0x14
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	mov r9, r4
	asrs r0, r0, #0x10
	movs r1, #0x28
	bl __modsi3
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	b _080BAA3C
_080BAA30:
	ldr r5, [sp, #0x10]
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	mov r9, r5
_080BAA3C:
	adds r0, r7, #0
	adds r0, #0x2d
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	cmp r1, #0
	bge _080BAA4C
	adds r0, #0x1f
_080BAA4C:
	asrs r0, r0, #5
	lsls r0, r0, #5
	subs r0, r1, r0
	lsls r0, r0, #0x18
	asrs r0, r0, #8
	lsrs r4, r0, #0x10
	adds r0, r1, #0
	movs r1, #0x3c
	bl __modsi3
	lsls r0, r0, #0x18
	asrs r0, r0, #8
	lsrs r6, r0, #0x10
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	mov sl, r0
	cmp r0, #0
	bgt _080BAA92
	ldr r0, [r7, #0x48]
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	lsls r2, r5, #0x10
	asrs r2, r2, #0x10
	mov r4, r9
	lsls r3, r4, #0x10
	asrs r3, r3, #0x10
	str r3, [sp]
	movs r3, #0x1f
	str r3, [sp, #4]
	movs r3, #1
	str r3, [sp, #8]
	mov r3, sl
	bl sub_80BA6DC
	b _080BAAE6
_080BAA92:
	movs r4, #0x20
	mov r0, sl
	subs r4, r4, r0
	ldr r0, [r7, #0x48]
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	lsls r5, r5, #0x10
	mov r8, r5
	mov r1, r8
	asrs r1, r1, #0x10
	mov r8, r1
	mov r2, r9
	lsls r5, r2, #0x10
	asrs r5, r5, #0x10
	str r5, [sp]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	str r4, [sp, #4]
	movs r3, #1
	mov r9, r3
	str r3, [sp, #8]
	adds r1, r6, #0
	mov r2, r8
	mov r3, sl
	bl sub_80BA6DC
	movs r1, #0x1f
	subs r1, r1, r4
	ldr r0, [r7, #0x48]
	adds r6, r6, r4
	add r4, sl
	str r5, [sp]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #4]
	mov r5, r9
	str r5, [sp, #8]
	adds r1, r6, #0
	mov r2, r8
	adds r3, r4, #0
	bl sub_80BA6DC
_080BAAE6:
	ldr r1, [sp, #0x10]
	ldrb r0, [r1]
	ldr r2, [sp, #0xc]
	strb r0, [r2]
_080BAAEE:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BAB00
sub_80BAB00: @ 0x080BAB00
	ldr r1, _080BAB08  @ gUnknown_03001E30
	movs r0, #0
	strb r0, [r1]
	bx lr
	.align 2, 0
_080BAB08: .4byte gUnknown_03001E30

	THUMB_FUNC_START sub_80BAB0C
sub_80BAB0C: @ 0x080BAB0C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080BABE6
	ldr r0, _080BAB34  @ gUnknown_03005280
	ldrh r1, [r0, #2]
	strh r1, [r4, #0x34]
	ldrh r0, [r0, #4]
	strh r0, [r4, #0x36]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #0
	bge _080BAB38
	movs r0, #0
	b _080BAB3E
	.align 2, 0
_080BAB34: .4byte gUnknown_03005280
_080BAB38:
	cmp r1, #0xf0
	ble _080BAB40
	movs r0, #0xf0
_080BAB3E:
	strh r0, [r4, #0x34]
_080BAB40:
	movs r1, #0x36
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge _080BAB4C
	movs r0, #0
	strh r0, [r4, #0x36]
_080BAB4C:
	movs r1, #0x34
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge _080BAB56
	adds r0, #7
_080BAB56:
	asrs r0, r0, #3
	adds r7, r4, #0
	adds r7, #0x2d
	strb r0, [r7]
	movs r1, #0x36
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge _080BAB68
	adds r0, #7
_080BAB68:
	asrs r0, r0, #3
	adds r6, r4, #0
	adds r6, #0x2e
	strb r0, [r6]
	adds r5, r4, #0
	adds r5, #0x2a
	ldrb r1, [r5]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080BAB92
	ldr r0, _080BABEC  @ gUnknown_08A95FE4
	movs r1, #0x90
	lsls r1, r1, #1
	movs r2, #0x80
	bl CopyToPaletteBuffer
	ldrb r1, [r5]
	movs r0, #0xfb
	ands r0, r1
	strb r0, [r5]
_080BAB92:
	ldrb r1, [r5]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080BABB2
	ldr r0, [r4, #0x48]
	movs r1, #0
	ldrsb r1, [r7, r1]
	movs r2, #0
	ldrsb r2, [r6, r2]
	bl sub_80BA818
	ldrb r1, [r5]
	movs r0, #0xfd
	ands r0, r1
	strb r0, [r5]
_080BABB2:
	ldrb r1, [r5]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080BABCE
	bl sub_80BA458
	adds r0, r4, #0
	bl sub_80BA4D0
	ldrb r1, [r5]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r5]
_080BABCE:
	adds r0, r4, #0
	bl sub_80BA8A0
	ldrh r1, [r4, #0x34]
	ldrh r2, [r4, #0x36]
	movs r0, #3
	bl BG_SetPosition
	ldrh r0, [r4, #0x34]
	strh r0, [r4, #0x38]
	ldrh r0, [r4, #0x36]
	strh r0, [r4, #0x3a]
_080BABE6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BABEC: .4byte gUnknown_08A95FE4

	THUMB_FUNC_START NewMapScreen
NewMapScreen: @ 0x080BABF0
	push {r4, lr}
	adds r1, r0, #0
	ldr r0, _080BAC14  @ gUnknown_08A3DE84
	bl Proc_Create
	adds r4, r0, #0
	ldr r1, _080BAC18  @ gUnknown_03005324
	movs r2, #0xa0
	lsls r2, r2, #7
	movs r3, #0xe
	bl NewMapRoute
	str r0, [r4, #0x4c]
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080BAC14: .4byte gUnknown_08A3DE84
_080BAC18: .4byte gUnknown_03005324

.equ gMMSDataTable, unit_icon_move_table

	THUMB_FUNC_START MMS_GetGfx
MMS_GetGfx: @ 0x080BAC1C
	lsls r0, r0, #0x10
	ldr r1, _080BAC2C  @ gMMSDataTable
	lsrs r0, r0, #0xd
	subs r0, #8
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
_080BAC2C: .4byte gMMSDataTable

	THUMB_FUNC_START MMS_GetROMTCS2
MMS_GetROMTCS2: @ 0x080BAC30
	lsls r0, r0, #0x10
	ldr r1, _080BAC40  @ gMMSDataTable
	lsrs r0, r0, #0xd
	adds r1, r1, r0
	subs r1, #4
	ldr r0, [r1]
	bx lr
	.align 2, 0
_080BAC40: .4byte gMMSDataTable

	THUMB_FUNC_START GetMapUnitMMSGfxBuffer
GetMapUnitMMSGfxBuffer: @ 0x080BAC44
	adds r1, r0, #0
	lsls r0, r1, #4
	adds r0, r0, r1
	lsls r0, r0, #9
	ldr r1, _080BAC54  @ gUnknown_0200AF00
	adds r0, r0, r1
	bx lr
	.align 2, 0
_080BAC54: .4byte gUnknown_0200AF00

	THUMB_FUNC_START GmapUnit_Destruct
GmapUnit_Destruct: @ 0x080BAC58
	push {lr}
	ldr r0, [r0, #0x40]
	bl AP_Delete
	pop {r0}
	bx r0

	THUMB_FUNC_START GmapUnit_Init
GmapUnit_Init: @ 0x080BAC64
	movs r2, #0
	strh r2, [r0, #0x2a]
	adds r3, r0, #0
	adds r3, #0x37
	movs r1, #4
	strb r1, [r3]
	strh r2, [r0, #0x3e]
	strh r2, [r0, #0x3c]
	bx lr

	THUMB_FUNC_START GmapUnit_Loop
GmapUnit_Loop: @ 0x080BAC78
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	ldrh r1, [r7, #0x2a]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080BAC90
	b _080BADC2
_080BAC90:
	ldr r0, _080BACAC  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080BACB0
	mov r4, sp
	adds r4, #0xa
	add r0, sp, #8
	adds r1, r4, #0
	bl GetWMDisplayPosition
	b _080BACC0
	.align 2, 0
_080BACAC: .4byte gUnknown_03005280
_080BACB0:
	add r1, sp, #8
	ldr r2, [r7, #0x14]
	ldrh r0, [r2, #0x34]
	strh r0, [r1]
	adds r1, #2
	ldrh r0, [r2, #0x36]
	strh r0, [r1]
	adds r4, r1, #0
_080BACC0:
	add r1, sp, #8
	ldrh r0, [r7, #0x3c]
	ldrh r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	ldrh r0, [r7, #0x3e]
	ldrh r1, [r4]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	movs r1, #0x80
	lsls r1, r1, #0xe
	adds r0, r0, r1
	lsrs r0, r0, #0x10
	cmp r0, #0xdf
	bhi _080BADC2
	lsls r0, r3, #0x10
	asrs r2, r0, #0x10
	movs r3, #0x80
	lsls r3, r3, #0xd
	adds r0, r0, r3
	ldr r1, _080BAD6C  @ 0x010F0000
	cmp r0, r1
	bhi _080BADC2
	ldr r0, _080BAD70  @ 0x000001FF
	mov r8, r0
	mov r1, r8
	ands r1, r2
	mov r8, r1
	mov r3, r8
	movs r2, #0xff
	mov r9, r2
	mov r0, r9
	ands r0, r4
	mov r9, r0
	adds r0, r7, #0
	adds r0, #0x37
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #4
	bne _080BAD7C
	ldr r6, _080BAD74  @ gUnknown_08205F7C
	adds r5, r7, #0
	adds r5, #0x34
	movs r0, #0
	ldrsb r0, [r5, r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	ldr r1, [r7, #0x30]
	lsls r1, r1, #5
	ldr r2, _080BAD78  @ 0x06010000
	adds r1, r1, r2
	bl sub_80270DC
	adds r0, r7, #0
	adds r0, #0x36
	ldrb r0, [r0]
	movs r1, #0xf
	ands r1, r0
	lsls r1, r1, #0xc
	ldr r4, [r7, #0x30]
	movs r0, #0
	ldrsb r0, [r5, r0]
	adds r0, r0, r6
	adds r4, r4, r1
	ldrb r0, [r0]
	adds r4, r4, r0
	ldrh r0, [r7, #0x2e]
	adds r4, r4, r0
	ldrh r0, [r7, #0x38]
	ldrh r1, [r7, #0x2c]
	mov r2, r8
	mov r3, r9
	str r4, [sp]
	ldrh r5, [r7, #0x2a]
	movs r4, #2
	ands r4, r5
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	str r4, [sp, #4]
	bl SMS_DisplayOne
	b _080BADC2
	.align 2, 0
_080BAD6C: .4byte 0x010F0000
_080BAD70: .4byte 0x000001FF
_080BAD74: .4byte gUnknown_08205F7C
_080BAD78: .4byte 0x06010000
_080BAD7C:
	ldrh r2, [r7, #0x2a]
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _080BAD9A
	movs r4, #0x80
	lsls r4, r4, #3
	adds r1, r4, #0
	mov r4, r9
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r9, r0
_080BAD9A:
	movs r0, #4
	ands r0, r2
	cmp r0, #0
	beq _080BADB2
	ldr r0, [r7, #0x40]
	adds r0, #0x20
	movs r1, #1
	strb r1, [r0]
	ldrh r1, [r7, #0x2a]
	ldr r0, _080BADD0  @ 0x0000FFFB
	ands r0, r1
	strh r0, [r7, #0x2a]
_080BADB2:
	ldr r0, [r7, #0x40]
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	mov r3, r9
	lsls r2, r3, #0x10
	asrs r2, r2, #0x10
	bl AP_Update
_080BADC2:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BADD0: .4byte 0x0000FFFB

	THUMB_FUNC_START GetPaletteIdForAllegience
GetPaletteIdForAllegience: @ 0x080BADD4
	push {lr}
	cmp r0, #1
	beq _080BADE6
	cmp r0, #1
	ble _080BADE2
	cmp r0, #2
	beq _080BADEA
_080BADE2:
	movs r0, #0xc
	b _080BADEC
_080BADE6:
	movs r0, #0xd
	b _080BADEC
_080BADEA:
	movs r0, #0xe
_080BADEC:
	pop {r1}
	bx r1

	THUMB_FUNC_START NewMapUnit
NewMapUnit: @ 0x080BADF0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r9, r0
	adds r4, r2, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r8, r1
	movs r7, #0
	ldr r0, [r0, #0x34]
	cmp r0, #0
	beq _080BAE1E
	mov r1, r9
	adds r1, #0x34
_080BAE10:
	adds r1, #4
	adds r7, #1
	cmp r7, #6
	bgt _080BAE1E
	ldr r0, [r1]
	cmp r0, #0
	bne _080BAE10
_080BAE1E:
	cmp r7, #7
	bne _080BAE28
	movs r0, #1
	negs r0, r0
	b _080BAEFA
_080BAE28:
	mov r0, r9
	ldr r1, [r0, #0x14]
	ldr r0, _080BAE40  @ gUnknown_08A3DECC
	bl Proc_Create
	adds r5, r0, #0
	cmp r5, #0
	bne _080BAE44
	movs r0, #2
	negs r0, r0
	b _080BAEFA
	.align 2, 0
_080BAE40: .4byte gUnknown_08A3DECC
_080BAE44:
	movs r0, #0x80
	lsls r0, r0, #4
	strh r0, [r5, #0x2e]
	adds r0, r5, #0
	adds r0, #0x35
	strb r4, [r0]
	ldrb r0, [r0]
	bl GetPaletteIdForAllegience
	movs r1, #0x36
	adds r1, r1, r5
	mov sl, r1
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x34
	strb r7, [r4]
	mov r0, r8
	strh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	mov r0, r8
	bl GetClassSMSId
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldr r2, _080BAEEC  @ gUnknown_08205F7C
	adds r2, r1, r2
	ldrb r2, [r2]
	bl SMS_SomethingGmapUnit
	movs r0, #8
	strh r0, [r5, #0x2c]
	mov r0, r8
	bl MMS_GetROMTCS2
	movs r1, #8
	bl AP_Create
	adds r6, r0, #0
	cmp r6, #0
	beq _080BAEF0
	adds r0, r5, #0
	adds r0, #0x37
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r6, #0
	bl AP_SwitchAnimation
	mov r0, r8
	bl MMS_GetGfx
	adds r4, r0, #0
	adds r0, r7, #0
	bl GetMapUnitMMSGfxBuffer
	adds r1, r0, #0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	adds r0, r7, #0
	bl GetMapUnitMMSGfxBuffer
	str r0, [r6, #0x24]
	mov r1, r9
	ldr r0, [r1, #0x2c]
	str r0, [r5, #0x30]
	lsls r3, r7, #2
	ldr r1, [r1, #0x2c]
	adds r1, r1, r3
	mov r0, sl
	ldrb r2, [r0]
	movs r0, #0xf
	ands r0, r2
	lsls r0, r0, #0xc
	adds r1, r1, r0
	ldrh r0, [r5, #0x2e]
	adds r1, r1, r0
	strh r1, [r6, #0x22]
	str r6, [r5, #0x40]
	mov r0, r9
	adds r0, #0x34
	adds r0, r0, r3
	str r5, [r0]
	adds r0, r7, #0
	b _080BAEFA
	.align 2, 0
_080BAEEC: .4byte gUnknown_08205F7C
_080BAEF0:
	ldr r0, _080BAF08  @ gUnknown_08A3DECC
	bl Proc_Delete
	movs r0, #3
	negs r0, r0
_080BAEFA:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080BAF08: .4byte gUnknown_08A3DECC

	THUMB_FUNC_START MapUnitC_DeleteGmapUnit
MapUnitC_DeleteGmapUnit: @ 0x080BAF0C
	push {r4, r5, r6, lr}
	lsls r1, r1, #2
	adds r0, #0x34
	adds r6, r0, r1
	ldr r5, [r6]
	cmp r5, #0
	beq _080BAF2C
	ldr r0, [r5, #0x40]
	bl AP_Delete
	movs r4, #0
	str r4, [r5, #0x40]
	adds r0, r5, #0
	bl Proc_Delete
	str r4, [r6]
_080BAF2C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START MapUnitC_SetPosition
MapUnitC_SetPosition: @ 0x080BAF34
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	strh r2, [r0, #0x3c]
	strh r3, [r0, #0x3e]
	bx lr

	THUMB_FUNC_START sub_80BAF44
sub_80BAF44: @ 0x080BAF44
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	ldrh r0, [r1, #0x3c]
	strh r0, [r2]
	ldrh r0, [r1, #0x3e]
	strh r0, [r3]
	bx lr

	THUMB_FUNC_START sub_80BAF58
sub_80BAF58: @ 0x080BAF58
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	ldrh r0, [r1, #0x3c]
	adds r0, r0, r2
	strh r0, [r1, #0x3c]
	ldrh r0, [r1, #0x3e]
	adds r0, r0, r3
	strh r0, [r1, #0x3e]
	bx lr

	THUMB_FUNC_START sub_80BAF70
sub_80BAF70: @ 0x080BAF70
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, #0x37
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr

	THUMB_FUNC_START MapUnitC_SetTCSAnim
MapUnitC_SetTCSAnim: @ 0x080BAF84
	push {lr}
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r0, #0
	adds r1, #0x37
	strb r2, [r1]
	ldr r0, [r0, #0x40]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl AP_SwitchAnimation
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BAFA4
sub_80BAFA4: @ 0x080BAFA4
	push {lr}
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r3, [r0]
	lsls r2, r2, #0x18
	cmp r2, #0
	beq _080BAFBC
	ldrh r1, [r3, #0x2a]
	movs r0, #1
	orrs r0, r1
	b _080BAFC2
_080BAFBC:
	ldrh r1, [r3, #0x2a]
	ldr r0, _080BAFC8  @ 0x0000FFFE
	ands r0, r1
_080BAFC2:
	strh r0, [r3, #0x2a]
	pop {r0}
	bx r0
	.align 2, 0
_080BAFC8: .4byte 0x0000FFFE

	THUMB_FUNC_START sub_80BAFCC
sub_80BAFCC: @ 0x080BAFCC
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	ldrh r1, [r0, #0x2a]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr

	THUMB_FUNC_START sub_80BAFE0
sub_80BAFE0: @ 0x080BAFE0
	push {lr}
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r3, [r0]
	lsls r2, r2, #0x18
	cmp r2, #0
	beq _080BAFF8
	ldrh r1, [r3, #0x2a]
	movs r0, #2
	orrs r0, r1
	b _080BAFFE
_080BAFF8:
	ldrh r1, [r3, #0x2a]
	ldr r0, _080BB004  @ 0x0000FFFD
	ands r0, r1
_080BAFFE:
	strh r0, [r3, #0x2a]
	pop {r0}
	bx r0
	.align 2, 0
_080BB004: .4byte 0x0000FFFD

	THUMB_FUNC_START sub_80BB008
sub_80BB008: @ 0x080BB008
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0, #0x40]
	ldrh r0, [r0, #0x1e]
	bx lr

	THUMB_FUNC_START MapUnitC_SetTCSOAMIndex
MapUnitC_SetTCSOAMIndex: @ 0x080BB018
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1, #0x40]
	strh r2, [r0, #0x1e]
	strh r2, [r1, #0x2c]
	bx lr

	THUMB_FUNC_START sub_80BB028
sub_80BB028: @ 0x080BB028
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, #0x35
	ldrb r0, [r0]
	bx lr

	THUMB_FUNC_START MapUnitC_SetAllegienceColorIndex
MapUnitC_SetAllegienceColorIndex: @ 0x080BB038
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	lsls r5, r1, #2
	adds r0, #0x34
	adds r0, r0, r5
	ldr r4, [r0]
	cmp r2, #0
	blt _080BB04E
	adds r0, r4, #0
	adds r0, #0x35
	strb r2, [r0]
_080BB04E:
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	bl GetPaletteIdForAllegience
	adds r1, r4, #0
	adds r1, #0x36
	strb r0, [r1]
	ldr r3, [r4, #0x40]
	ldr r2, [r6, #0x2c]
	adds r2, r2, r5
	movs r1, #0xf
	ands r1, r0
	lsls r1, r1, #0xc
	adds r2, r2, r1
	ldrh r4, [r4, #0x2e]
	adds r2, r2, r4
	strh r2, [r3, #0x22]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BB078
sub_80BB078: @ 0x080BB078
	push {r4, r5, lr}
	lsls r1, r1, #2
	adds r3, r0, #0
	adds r3, #0x34
	adds r3, r3, r1
	ldr r4, [r3]
	adds r3, r4, #0
	adds r3, #0x36
	strb r2, [r3]
	ldr r5, [r4, #0x40]
	ldr r3, [r0, #0x2c]
	adds r3, r3, r1
	movs r0, #0xf
	ands r0, r2
	lsls r0, r0, #0xc
	adds r3, r3, r0
	ldrh r4, [r4, #0x2e]
	adds r3, r3, r4
	strh r3, [r5, #0x22]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START MapUnitC_MarkSomething
MapUnitC_MarkSomething: @ 0x080BB0A4
	push {r4, r5, lr}
	cmp r1, #0
	blt _080BB0BC
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r2, [r0]
	ldrh r1, [r2, #0x2a]
	movs r0, #4
	orrs r0, r1
	strh r0, [r2, #0x2a]
	b _080BB0D8
_080BB0BC:
	movs r4, #4
	adds r1, r0, #0
	adds r1, #0x34
	movs r3, #6
_080BB0C4:
	ldr r2, [r1]
	cmp r2, #0
	beq _080BB0D0
	ldrh r0, [r2, #0x2a]
	orrs r0, r4
	strh r0, [r2, #0x2a]
_080BB0D0:
	adds r1, #4
	subs r3, #1
	cmp r3, #0
	bge _080BB0C4
_080BB0D8:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BB0E0
sub_80BB0E0: @ 0x080BB0E0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	mov r8, r0
	adds r7, r1, #0
	adds r4, r2, #0
	lsls r0, r7, #2
	mov r9, r0
	mov r0, r8
	adds r0, #0x34
	add r0, r9
	ldr r5, [r0]
	ldr r0, [r5, #0x40]
	cmp r0, #0
	beq _080BB104
	bl AP_Delete
_080BB104:
	adds r2, r4, #0
	cmp r2, #0
	bne _080BB10C
	ldrh r2, [r5, #0x38]
_080BB10C:
	ldrh r1, [r5, #0x3a]
	cmp r2, r1
	beq _080BB17A
	strh r2, [r5, #0x3a]
	lsls r0, r2, #0x10
	lsrs r4, r0, #0x10
	adds r0, r4, #0
	bl MMS_GetROMTCS2
	movs r1, #8
	bl AP_Create
	adds r6, r0, #0
	cmp r6, #0
	bne _080BB12E
	movs r0, #0
	b _080BB17C
_080BB12E:
	adds r0, r5, #0
	adds r0, #0x37
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r6, #0
	bl AP_SwitchAnimation
	adds r0, r4, #0
	bl MMS_GetGfx
	adds r4, r0, #0
	adds r0, r7, #0
	bl GetMapUnitMMSGfxBuffer
	adds r1, r0, #0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	adds r0, r7, #0
	bl GetMapUnitMMSGfxBuffer
	str r0, [r6, #0x24]
	mov r1, r8
	ldr r0, [r1, #0x2c]
	str r0, [r5, #0x30]
	ldr r1, [r1, #0x2c]
	add r1, r9
	adds r0, r5, #0
	adds r0, #0x36
	ldrb r2, [r0]
	movs r0, #0xf
	ands r0, r2
	lsls r0, r0, #0xc
	adds r1, r1, r0
	ldrh r0, [r5, #0x2e]
	adds r1, r1, r0
	strh r1, [r6, #0x22]
	str r6, [r5, #0x40]
_080BB17A:
	movs r0, #1
_080BB17C:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BB188
sub_80BB188: @ 0x080BB188
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	ldrh r0, [r0, #0x38]
	bx lr

	THUMB_FUNC_START sub_80BB194
sub_80BB194: @ 0x080BB194
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	ldrh r0, [r0, #0x3a]
	bx lr

	THUMB_FUNC_START GmapUnitContainer_Destruct
GmapUnitContainer_Destruct: @ 0x080BB1A0
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r4, #0x34
	adds r6, r4, #0
	movs r7, #0
	movs r5, #6
_080BB1AC:
	cmp r6, #0
	beq _080BB1B8
	ldr r0, [r4]
	bl Proc_Delete
	str r7, [r4]
_080BB1B8:
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge _080BB1AC
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START GmapUnitContainer_Init
GmapUnitContainer_Init: @ 0x080BB1C8
	push {lr}
	sub sp, #4
	adds r1, r0, #0
	movs r0, #0
	str r0, [sp]
	adds r1, #0x34
	ldr r2, _080BB1E4  @ 0x05000007
	mov r0, sp
	bl CpuSet
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080BB1E4: .4byte 0x05000007

	THUMB_FUNC_START NewGmapUnitContainer
NewGmapUnitContainer: @ 0x080BB1E8
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r0, _080BB208  @ gUnknown_08A3DEFC
	adds r1, r3, #0
	bl Proc_Create
	str r4, [r0, #0x2c]
	adds r1, r0, #0
	adds r1, #0x30
	strb r5, [r1]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080BB208: .4byte gUnknown_08A3DEFC

	THUMB_FUNC_START GmapUnitFade_Destruct
GmapUnitFade_Destruct: @ 0x080BB20C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	b _080BB250
_080BB214:
	adds r0, r5, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r4, r5, #0
	adds r4, #0x30
	cmp r0, #0
	bge _080BB238
	ldr r0, _080BB260  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x4c]
	adds r1, r4, r6
	ldrb r1, [r1]
	movs r2, #0
	bl sub_80BAFA4
_080BB238:
	ldr r0, _080BB260  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x4c]
	adds r1, r4, r6
	ldrb r1, [r1]
	movs r2, #1
	negs r2, r2
	bl MapUnitC_SetAllegienceColorIndex
	adds r6, #1
	adds r0, r5, #0
_080BB250:
	adds r0, #0x37
	ldrb r0, [r0]
	cmp r6, r0
	blt _080BB214
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BB260: .4byte gUnknown_08A3D748

	THUMB_FUNC_START GmapUnitFade_Init
GmapUnitFade_Init: @ 0x080BB264
	movs r1, #0
	strh r1, [r0, #0x2e]
	bx lr

	THUMB_FUNC_START sub_80BB26C
sub_80BB26C: @ 0x080BB26C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r4, r2, #0
	adds r5, r3, #0
	cmp r0, #0
	blt _080BB2B0
	ldr r2, _080BB2AC  @ gPaletteBuffer
	lsls r0, r0, #4
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r1, r3
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r3, #0x1f
	ands r3, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r1
	lsrs r0, r0, #5
	mov r8, r0
	movs r0, #0xf8
	lsls r0, r0, #7
	ands r1, r0
	lsrs r1, r1, #0xa
	mov r9, r1
	b _080BB2B8
	.align 2, 0
_080BB2AC: .4byte gPaletteBuffer
_080BB2B0:
	movs r0, #0
	mov r9, r0
	mov r8, r0
	movs r3, #0
_080BB2B8:
	cmp r4, #0
	blt _080BB2E8
	ldr r2, _080BB2E4  @ gPaletteBuffer
	lsls r0, r4, #4
	movs r4, #0x80
	lsls r4, r4, #1
	adds r1, r5, r4
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r2, #0x1f
	ands r2, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r1
	lsrs r4, r0, #5
	movs r0, #0xf8
	lsls r0, r0, #7
	ands r1, r0
	lsrs r7, r1, #0xa
	b _080BB2EE
	.align 2, 0
_080BB2E4: .4byte gPaletteBuffer
_080BB2E8:
	movs r7, #0
	movs r4, #0
	movs r2, #0
_080BB2EE:
	movs r5, #0x80
	lsls r5, r5, #5
	subs r0, r2, r3
	ldr r2, [sp, #0x20]
	adds r1, r0, #0
	muls r1, r2, r1
	adds r0, r5, #0
	str r3, [sp]
	bl DivArm
	adds r6, r0, #0
	ldr r3, [sp]
	adds r6, r3, r6
	mov r3, r8
	subs r0, r4, r3
	ldr r4, [sp, #0x20]
	adds r1, r0, #0
	muls r1, r4, r1
	adds r0, r5, #0
	bl DivArm
	adds r4, r0, #0
	add r4, r8
	mov r1, r9
	subs r0, r7, r1
	ldr r2, [sp, #0x20]
	adds r1, r0, #0
	muls r1, r2, r1
	adds r0, r5, #0
	bl DivArm
	add r0, r9
	lsls r0, r0, #0xa
	lsls r4, r4, #5
	adds r0, r0, r4
	adds r0, r0, r6
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START GmapUnitFade_Loop
GmapUnitFade_Loop: @ 0x080BB348
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
	ldr r6, _080BB398  @ gUnknown_02022BE8
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r5, #0x2c]
	cmp r0, r1
	bcs _080BB39C
	ldrh r0, [r5, #0x2e]
	ldrh r1, [r5, #0x2c]
	movs r2, #0
	bl sub_800B7E0
	mov r8, r0
	movs r4, #0
	adds r7, r5, #0
	adds r7, #0x29
	adds r5, #0x2a
_080BB378:
	movs r0, #0
	ldrsb r0, [r7, r0]
	movs r2, #0
	ldrsb r2, [r5, r2]
	mov r1, r8
	str r1, [sp]
	adds r1, r4, #0
	adds r3, r4, #0
	bl sub_80BB26C
	strh r0, [r6]
	adds r6, #2
	adds r4, #1
	cmp r4, #0xf
	ble _080BB378
	b _080BB3D4
	.align 2, 0
_080BB398: .4byte gUnknown_02022BE8
_080BB39C:
	adds r1, r5, #0
	adds r1, #0x2a
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt _080BB3C0
	lsls r0, r0, #5
	ldr r2, _080BB3BC  @ 0xFFFFFEC0
	adds r1, r6, r2
	adds r0, r0, r1
	adds r1, r6, #0
	movs r2, #0x10
	bl CpuSet
	b _080BB3CE
	.align 2, 0
_080BB3BC: .4byte 0xFFFFFEC0
_080BB3C0:
	add r0, sp, #4
	movs r1, #0
	strh r1, [r0]
	ldr r2, _080BB3E4  @ 0x01000010
	adds r1, r6, #0
	bl CpuSet
_080BB3CE:
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080BB3D4:
	bl EnablePaletteSync
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BB3E4: .4byte 0x01000010

	THUMB_FUNC_START sub_80BB3E8
sub_80BB3E8: @ 0x080BB3E8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r1, [sp, #0x1c]
	cmp r1, #0
	beq _080BB40C
	ldr r0, _080BB408  @ gUnknown_08A3DF2C
	bl Proc_CreateBlockingChild
	b _080BB414
	.align 2, 0
_080BB408: .4byte gUnknown_08A3DF2C
_080BB40C:
	ldr r0, _080BB43C  @ gUnknown_08A3DF2C
	movs r1, #3
	bl Proc_Create
_080BB414:
	adds r4, r0, #0
	adds r0, r4, #0
	adds r0, #0x29
	strb r5, [r0]
	adds r0, #1
	strb r6, [r0]
	strh r7, [r4, #0x2c]
	cmp r5, #0
	blt _080BB444
	lsls r0, r5, #5
	ldr r1, _080BB440  @ gUnknown_02022AA8
	adds r0, r0, r1
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r1, r1, r2
	movs r2, #0x10
	bl CpuSet
	b _080BB454
	.align 2, 0
_080BB43C: .4byte gUnknown_08A3DF2C
_080BB440: .4byte gUnknown_02022AA8
_080BB444:
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r1, _080BB474  @ gUnknown_02022BE8
	ldr r2, _080BB478  @ 0x01000010
	mov r0, sp
	bl CpuSet
_080BB454:
	bl EnablePaletteSync
	adds r0, r4, #0
	adds r0, #0x30
	mov r1, r8
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x37
	movs r0, #1
	strb r0, [r1]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080BB474: .4byte gUnknown_02022BE8
_080BB478: .4byte 0x01000010

	THUMB_FUNC_START sub_80BB47C
sub_80BB47C: @ 0x080BB47C
	push {lr}
	ldr r0, _080BB488  @ gUnknown_08A3DF2C
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080BB488: .4byte gUnknown_08A3DF2C

	THUMB_FUNC_START sub_80BB48C
sub_80BB48C: @ 0x080BB48C
	push {lr}
	ldr r0, _080BB498  @ gUnknown_08A3DF2C
	bl Proc_Find
	pop {r1}
	bx r1
	.align 2, 0
_080BB498: .4byte gUnknown_08A3DF2C

	THUMB_FUNC_START sub_80BB49C
sub_80BB49C: @ 0x080BB49C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80BB48C
	cmp r0, #0
	beq _080BB4BA
	adds r1, r0, #0
	adds r1, #0x37
	adds r0, #0x30
	ldrb r2, [r1]
	adds r0, r0, r2
	strb r4, [r0]
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_080BB4BA:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BB4C0
sub_80BB4C0: @ 0x080BB4C0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r5, r0, #0
	mov r8, r1
	adds r7, r2, #0
	ldr r0, _080BB504  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r6, [r0, #0x4c]
	lsls r1, r5, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r4, [r0]
	bl sub_80BB48C
	cmp r0, #0
	bne _080BB508
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	bl GetPaletteIdForAllegience
	adds r2, r0, #0
	movs r1, #1
	negs r1, r1
	str r7, [sp]
	adds r0, r5, #0
	mov r3, r8
	bl sub_80BB3E8
	b _080BB50E
	.align 2, 0
_080BB504: .4byte gUnknown_08A3D748
_080BB508:
	adds r0, r5, #0
	bl sub_80BB49C
_080BB50E:
	adds r0, r6, #0
	adds r1, r5, #0
	movs r2, #0xa
	bl sub_80BB078
	ldr r0, _080BB534  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x4c]
	adds r1, r5, #0
	movs r2, #1
	bl sub_80BAFA4
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BB534: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BB538
sub_80BB538: @ 0x080BB538
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r5, r0, #0
	mov r8, r1
	adds r7, r2, #0
	ldr r0, _080BB57C  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r6, [r0, #0x4c]
	lsls r1, r5, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r4, [r0]
	bl sub_80BB48C
	cmp r0, #0
	bne _080BB580
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	bl GetPaletteIdForAllegience
	adds r1, r0, #0
	movs r2, #1
	negs r2, r2
	str r7, [sp]
	adds r0, r5, #0
	mov r3, r8
	bl sub_80BB3E8
	b _080BB586
	.align 2, 0
_080BB57C: .4byte gUnknown_08A3D748
_080BB580:
	adds r0, r5, #0
	bl sub_80BB49C
_080BB586:
	adds r0, r6, #0
	adds r1, r5, #0
	movs r2, #0xa
	bl sub_80BB078
	ldr r0, _080BB5AC  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x4c]
	adds r1, r5, #0
	movs r2, #1
	bl sub_80BAFA4
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BB5AC: .4byte gUnknown_08A3D748

	THUMB_FUNC_START WMLoc_GetChapterId
WMLoc_GetChapterId: @ 0x080BB5B0
	push {lr}
	adds r1, r0, #0
	ldr r0, _080BB5CC  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq _080BB5C0
	cmp r0, #3
	beq _080BB5D4
_080BB5C0:
	lsls r0, r1, #5
	ldr r1, _080BB5D0  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0, #4]
	b _080BB5DC
	.align 2, 0
_080BB5CC: .4byte gUnknown_0202BCF0
_080BB5D0: .4byte gUnknown_082060B0
_080BB5D4:
	lsls r0, r1, #5
	ldr r1, _080BB5E0  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0, #5]
_080BB5DC:
	pop {r1}
	bx r1
	.align 2, 0
_080BB5E0: .4byte gUnknown_082060B0

	THUMB_FUNC_START WMLoc_GetNextLocId
WMLoc_GetNextLocId: @ 0x080BB5E4
	push {r4, lr}
	lsls r0, r0, #5
	ldr r1, _080BB614  @ gUnknown_082060B0
	adds r4, r0, r1
	movs r1, #6
	ldrsh r0, [r4, r1]
	bl CheckEventId
	lsls r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #8
	cmp r0, #0
	beq _080BB600
	adds r1, #2
_080BB600:
	ldr r0, _080BB618  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq _080BB60C
	cmp r0, #3
	beq _080BB61C
_080BB60C:
	movs r0, #0
	ldrsb r0, [r1, r0]
	b _080BB620
	.align 2, 0
_080BB614: .4byte gUnknown_082060B0
_080BB618: .4byte gUnknown_0202BCF0
_080BB61C:
	movs r0, #1
	ldrsb r0, [r1, r0]
_080BB620:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BB628
sub_80BB628: @ 0x080BB628
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r1, [sp]
	str r2, [sp, #4]
	mov sl, r3
	movs r0, #0
	mov r9, r0
	ldr r1, _080BB66C  @ gUnknown_082060B0
	mov ip, r1
_080BB642:
	mov r2, r9
	lsls r0, r2, #2
	ldr r3, _080BB670  @ gUnknown_03005280
	adds r0, r0, r3
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080BB6D8
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080BB678
	mov r4, ip
	ldrb r0, [r4, #2]
	lsls r0, r0, #4
	ldr r6, _080BB674  @ gUnknown_08205FA0
	adds r0, r0, r6
	b _080BB682
	.align 2, 0
_080BB66C: .4byte gUnknown_082060B0
_080BB670: .4byte gUnknown_03005280
_080BB674: .4byte gUnknown_08205FA0
_080BB678:
	mov r7, ip
	ldrb r0, [r7, #3]
	lsls r0, r0, #4
	ldr r1, _080BB6D4  @ gUnknown_08205FA0
	adds r0, r0, r1
_080BB682:
	mov r3, ip
	movs r4, #0x18
	ldrsh r2, [r3, r4]
	movs r6, #0xa
	ldrsb r6, [r0, r6]
	mov r8, r6
	movs r5, #8
	ldrsb r5, [r0, r5]
	subs r3, r2, r5
	mov r7, sl
	subs r3, r3, r7
	mov r4, ip
	movs r6, #0x1a
	ldrsh r1, [r4, r6]
	movs r6, #0xb
	ldrsb r6, [r0, r6]
	movs r4, #9
	ldrsb r4, [r0, r4]
	subs r0, r1, r4
	ldr r7, [sp, #0x2c]
	subs r0, r0, r7
	str r0, [sp, #8]
	add r2, r8
	subs r2, r2, r5
	add r2, sl
	adds r1, r1, r6
	subs r1, r1, r4
	adds r0, r1, r7
	ldr r1, [sp]
	cmp r1, r3
	blt _080BB6D8
	cmp r1, r2
	bge _080BB6D8
	ldr r2, [sp, #4]
	ldr r3, [sp, #8]
	cmp r2, r3
	blt _080BB6D8
	cmp r2, r0
	bge _080BB6D8
	mov r0, r9
	b _080BB6EA
	.align 2, 0
_080BB6D4: .4byte gUnknown_08205FA0
_080BB6D8:
	movs r4, #0x20
	add ip, r4
	movs r6, #1
	add r9, r6
	mov r7, r9
	cmp r7, #0x1c
	ble _080BB642
	movs r0, #1
	negs r0, r0
_080BB6EA:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BB6FC
sub_80BB6FC: @ 0x080BB6FC
	adds r0, #0x32
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80BB708
sub_80BB708: @ 0x080BB708
	adds r0, #0x32
	ldrb r2, [r0]
	movs r1, #2
	negs r1, r1
	ands r1, r2
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START GmapScreen2_Destruct
GmapScreen2_Destruct: @ 0x080BB718
	push {lr}
	ldr r0, [r0, #0x38]
	bl AP_Delete
	pop {r0}
	bx r0

	THUMB_FUNC_START GmapScreen2_Init
GmapScreen2_Init: @ 0x080BB724
	push {lr}
	movs r1, #0
	movs r3, #0
	adds r2, r0, #0
	adds r2, #0x34
_080BB72E:
	stm r2!, {r3}
	adds r1, #1
	cmp r1, #0
	beq _080BB72E
	adds r0, #0x32
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	strb r1, [r0]
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BB744
sub_80BB744: @ 0x080BB744
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r3, #0
	ldr r5, [sp, #0x14]
	mov r4, sp
	ldrh r3, [r0, #0x34]
	strh r3, [r4]
	mov r3, sp
	adds r3, #2
	ldrh r4, [r0, #0x36]
	strh r4, [r3]
	mov r0, sp
	ldrh r0, [r0]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	subs r1, r1, r0
	strh r1, [r6]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	subs r2, r2, r4
	strh r2, [r5]
	adds r2, #0x20
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	cmp r2, #0xdf
	bhi _080BB78C
	ldrh r0, [r6]
	adds r0, #0x20
	lsls r0, r0, #0x10
	ldr r1, _080BB788  @ 0x012F0000
	cmp r0, r1
	bhi _080BB78C
	movs r0, #1
	b _080BB78E
	.align 2, 0
_080BB788: .4byte 0x012F0000
_080BB78C:
	movs r0, #0
_080BB78E:
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START GmapScreen2_Loop
GmapScreen2_Loop: @ 0x080BB798
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r0
	mov r2, r8
	adds r2, #0x32
	ldrb r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080BB7B6
	b _080BB988
_080BB7B6:
	mov r1, r8
	ldr r0, [r1, #0x2c]
	lsrs r0, r0, #5
	mov sl, r0
	movs r7, #0
	str r2, [sp, #0xc]
	add r2, sp, #4
	mov r9, r2
_080BB7C6:
	ldr r0, _080BB7EC  @ gUnknown_03005280
	lsls r1, r7, #2
	adds r1, r1, r0
	adds r1, #0x30
	ldrb r2, [r1]
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _080BB894
	lsls r1, r7, #5
	ldr r0, _080BB7F0  @ gUnknown_082060B0
	adds r6, r1, r0
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _080BB7F4
	ldrb r0, [r6, #2]
	b _080BB7F6
	.align 2, 0
_080BB7EC: .4byte gUnknown_03005280
_080BB7F0: .4byte gUnknown_082060B0
_080BB7F4:
	ldrb r0, [r6, #3]
_080BB7F6:
	lsls r0, r0, #4
	ldr r1, _080BB8D0  @ gUnknown_08205FA0
	adds r5, r0, r1
	movs r0, #8
	ldrsb r0, [r5, r0]
	ldrh r1, [r6, #0x18]
	subs r1, r1, r0
	movs r0, #9
	ldrsb r0, [r5, r0]
	ldrh r2, [r6, #0x1a]
	subs r2, r2, r0
	mov r3, r8
	ldr r0, [r3, #0x3c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	mov r4, sp
	adds r4, #6
	str r4, [sp]
	add r3, sp, #4
	bl sub_80BB744
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080BB894
	mov r1, r9
	ldrh r0, [r1]
	ldr r2, _080BB8D4  @ 0x000001FF
	adds r1, r2, #0
	ands r0, r1
	mov r3, r9
	strh r0, [r3]
	ldrb r3, [r4]
	strh r3, [r4]
	adds r0, r7, #0
	cmp r7, #0
	bge _080BB844
	adds r0, #0x1f
_080BB844:
	asrs r0, r0, #5
	lsls r0, r0, #2
	mov r2, r8
	adds r2, #0x34
	adds r2, r2, r0
	movs r0, #0x1f
	ands r0, r7
	movs r1, #1
	lsls r1, r0
	ldr r0, [r2]
	ands r0, r1
	cmp r0, #0
	beq _080BB868
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r1, #0
	orrs r3, r0
	strh r3, [r4]
_080BB868:
	mov r2, r9
	movs r3, #0
	ldrsh r1, [r2, r3]
	movs r0, #0
	ldrsh r2, [r4, r0]
	ldr r3, [r5, #4]
	ldrh r4, [r5]
	add r4, sl
	mov r0, r8
	adds r0, #0x30
	ldrb r5, [r0]
	movs r0, #0xf
	ands r0, r5
	lsls r0, r0, #0xc
	adds r4, r4, r0
	movs r0, #0x80
	lsls r0, r0, #4
	adds r4, r4, r0
	str r4, [sp]
	movs r0, #0xc
	bl RegisterObjectAttributes
_080BB894:
	adds r7, #1
	cmp r7, #0x1c
	ble _080BB7C6
	ldr r2, [sp, #0xc]
	ldrb r1, [r2]
	movs r4, #2
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _080BB988
	mov r3, r8
	adds r3, #0x33
	ldrb r0, [r3]
	lsls r2, r0, #5
	ldr r1, _080BB8D8  @ gUnknown_082060B0
	adds r6, r2, r1
	ldr r2, _080BB8DC  @ gUnknown_03005280
	lsls r0, r0, #2
	adds r0, r0, r2
	adds r0, #0x30
	ldrb r1, [r0]
	adds r0, r4, #0
	ands r0, r1
	mov r9, r2
	adds r7, r3, #0
	cmp r0, #0
	beq _080BB8E0
	ldrb r0, [r6, #2]
	b _080BB8E2
	.align 2, 0
_080BB8D0: .4byte gUnknown_08205FA0
_080BB8D4: .4byte 0x000001FF
_080BB8D8: .4byte gUnknown_082060B0
_080BB8DC: .4byte gUnknown_03005280
_080BB8E0:
	ldrb r0, [r6, #3]
_080BB8E2:
	lsls r0, r0, #4
	ldr r1, _080BB998  @ gUnknown_08205FA0
	adds r5, r0, r1
	add r3, sp, #8
	mov r0, r8
	ldr r1, [r0, #0x3c]
	ldrh r0, [r1, #0x34]
	strh r0, [r3]
	mov r4, sp
	adds r4, #0xa
	ldrh r0, [r1, #0x36]
	strh r0, [r4]
	add r2, sp, #4
	movs r0, #8
	ldrsb r0, [r5, r0]
	ldrh r1, [r6, #0x18]
	subs r1, r1, r0
	movs r0, #0xc
	ldrsb r0, [r5, r0]
	adds r0, r0, r1
	ldrh r1, [r3]
	subs r0, r0, r1
	strh r0, [r2]
	adds r2, #2
	movs r0, #9
	ldrsb r0, [r5, r0]
	ldrh r1, [r6, #0x1a]
	subs r1, r1, r0
	movs r0, #0xd
	ldrsb r0, [r5, r0]
	adds r0, r0, r1
	ldrh r1, [r4]
	subs r0, r0, r1
	strh r0, [r2]
	adds r0, #0x20
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xdf
	bhi _080BB988
	add r0, sp, #4
	ldrh r0, [r0]
	adds r0, #0x20
	lsls r0, r0, #0x10
	ldr r1, _080BB99C  @ 0x012F0000
	cmp r0, r1
	bhi _080BB988
	ldrb r0, [r7]
	lsls r0, r0, #2
	add r0, r9
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	add r0, sp, #4
	ldrh r0, [r0]
	ldr r5, _080BB9A0  @ 0x000001FF
	ands r5, r0
	ldrb r4, [r2]
	ldrb r3, [r7]
	lsrs r0, r3, #5
	lsls r0, r0, #2
	mov r2, r8
	adds r2, #0x34
	adds r2, r2, r0
	movs r0, #0x1f
	ands r3, r0
	movs r1, #1
	lsls r1, r3
	ldr r0, [r2]
	ands r0, r1
	cmp r0, #0
	beq _080BB97A
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r1, #0
	orrs r4, r0
_080BB97A:
	mov r2, r8
	ldr r0, [r2, #0x38]
	adds r1, r5, #0
	lsls r2, r4, #0x10
	asrs r2, r2, #0x10
	bl AP_Update
_080BB988:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BB998: .4byte gUnknown_08205FA0
_080BB99C: .4byte 0x012F0000
_080BB9A0: .4byte 0x000001FF

	THUMB_FUNC_START sub_80BB9A4
sub_80BB9A4: @ 0x080BB9A4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r0, _080BBA20  @ gUnknown_08A3DF64
	adds r1, r4, #0
	bl Proc_Create
	adds r7, r0, #0
	str r5, [r7, #0x2c]
	adds r4, r7, #0
	adds r4, #0x30
	movs r2, #0
	strb r6, [r4]
	adds r0, #0x31
	mov r1, r8
	strb r1, [r0]
	ldr r0, [sp, #0x18]
	str r0, [r7, #0x3c]
	adds r3, r7, #0
	adds r3, #0x32
	ldrb r1, [r3]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r3]
	adds r0, r7, #0
	adds r0, #0x33
	strb r2, [r0]
	ldr r0, _080BBA24  @ gUnknown_08A97AEC
	movs r1, #0xb
	bl AP_Create
	str r0, [r7, #0x38]
	movs r1, #1
	bl AP_SwitchAnimation
	ldr r3, [r7, #0x38]
	ldr r1, [r7, #0x2c]
	movs r0, #0x80
	lsls r0, r0, #5
	adds r1, r1, r0
	lsrs r1, r1, #5
	ldrb r2, [r4]
	movs r0, #0xf
	ands r0, r2
	lsls r0, r0, #0xc
	adds r1, r1, r0
	movs r0, #0x80
	lsls r0, r0, #4
	adds r1, r1, r0
	strh r1, [r3, #0x22]
	adds r0, r7, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080BBA20: .4byte gUnknown_08A3DF64
_080BBA24: .4byte gUnknown_08A97AEC

	THUMB_FUNC_START sub_80BBA28
sub_80BBA28: @ 0x080BBA28
	push {lr}
	cmp r0, #0x1c
	bls _080BBA38
	ldr r0, _080BBA34  @ 0x0000066D
	b _080BBA40
	.align 2, 0
_080BBA34: .4byte 0x0000066D
_080BBA38:
	lsls r0, r0, #5
	ldr r1, _080BBA48  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrh r0, [r0, #0x1c]
_080BBA40:
	bl GetStringFromIndex
	pop {r1}
	bx r1
	.align 2, 0
_080BBA48: .4byte gUnknown_082060B0

	THUMB_FUNC_START sub_80BBA4C
sub_80BBA4C: @ 0x080BBA4C
	push {lr}
	adds r3, r0, #0
	ldr r0, _080BBA60  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq _080BBA5C
	cmp r0, #3
	beq _080BBA64
_080BBA5C:
	movs r2, #0
	b _080BBA66
	.align 2, 0
_080BBA60: .4byte gUnknown_0202BCF0
_080BBA64:
	movs r2, #1
_080BBA66:
	ldr r0, _080BBA7C  @ gUnknown_08206450
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r2
	adds r1, r3, r1
	adds r1, r1, r0
	ldrb r0, [r1]
	pop {r1}
	bx r1
	.align 2, 0
_080BBA7C: .4byte gUnknown_08206450

	THUMB_FUNC_START nullsub_59
nullsub_59: @ 0x080BBA80
	bx lr

	THUMB_FUNC_START GmapCursor_Init
GmapCursor_Init: @ 0x080BBA84
	push {lr}
	adds r3, r0, #0
	adds r1, r3, #0
	adds r1, #0x31
	movs r0, #0
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	str r0, [r3, #0x3c]
	str r0, [r3, #0x38]
	str r0, [r3, #0x44]
	str r0, [r3, #0x40]
	adds r1, #0x15
	movs r2, #0
	movs r0, #0xc0
	lsls r0, r0, #2
	strh r0, [r1]
	adds r0, r3, #0
	adds r0, #0x34
	strb r2, [r0]
	subs r1, #0x13
	movs r0, #4
	strb r0, [r1]
	ldr r0, _080BBACC  @ gPaletteBuffer
	ldr r1, _080BBAD0  @ gUnknown_08A97ACC
	ldrh r1, [r1]
	movs r2, #0xa7
	lsls r2, r2, #2
	adds r0, r0, r2
	strh r1, [r0]
	bl EnablePaletteSync
	pop {r0}
	bx r0
	.align 2, 0
_080BBACC: .4byte gPaletteBuffer
_080BBAD0: .4byte gUnknown_08A97ACC

	THUMB_FUNC_START GmapCursor_Destruct
GmapCursor_Destruct: @ 0x080BBAD4
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, _080BBBB4  @ gUnknown_03005280
	ldrb r1, [r0, #1]
	adds r2, r6, #0
	adds r2, #0x32
	strb r1, [r2]
	ldr r7, [r0, #8]
	str r7, [r6, #0x38]
	ldr r0, [r0, #0xc]
	mov ip, r0
	str r0, [r6, #0x3c]
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	ble _080BBBAA
	ldr r5, [r6, #0x2c]
	adds r0, r6, #0
	adds r0, #0x33
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r4, r0, #1
	adds r4, r4, r0
	lsls r4, r4, #2
	ldr r0, _080BBBB8  @ gUnknown_08206498
	adds r4, r4, r0
	add r2, sp, #4
	ldr r1, [r6, #0x4c]
	ldrh r0, [r1, #0x34]
	strh r0, [r2]
	mov r3, sp
	adds r3, #6
	ldrh r0, [r1, #0x36]
	strh r0, [r3]
	asrs r1, r7, #8
	adds r0, r2, #0
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r1, r1, r0
	movs r0, #8
	ldrsb r0, [r4, r0]
	subs r1, r1, r0
	mov r7, ip
	asrs r2, r7, #8
	movs r7, #0
	ldrsh r0, [r3, r7]
	subs r2, r2, r0
	movs r0, #9
	ldrsb r0, [r4, r0]
	subs r2, r2, r0
	ldr r3, [r4, #4]
	lsrs r5, r5, #5
	ldrh r4, [r4]
	adds r5, r5, r4
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r4, [r0]
	movs r0, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	adds r5, r5, r0
	movs r0, #0x80
	lsls r0, r0, #4
	adds r5, r5, r0
	str r5, [sp]
	movs r0, #4
	bl RegisterObjectAttributes_SafeMaybe
	adds r4, r6, #0
	adds r4, #0x35
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne _080BBBA2
	adds r1, r6, #0
	adds r1, #0x34
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xf
	bls _080BBB86
	strb r2, [r1]
_080BBB86:
	ldr r2, _080BBBBC  @ gPaletteBuffer
	ldrb r0, [r1]
	lsls r0, r0, #1
	ldr r1, _080BBBC0  @ gUnknown_08A97ACC
	adds r0, r0, r1
	ldrh r0, [r0]
	movs r1, #0xa7
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePaletteSync
	movs r0, #4
	strb r0, [r4]
_080BBBA2:
	ldr r0, [r6, #0x38]
	str r0, [r6, #0x40]
	ldr r0, [r6, #0x3c]
	str r0, [r6, #0x44]
_080BBBAA:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BBBB4: .4byte gUnknown_03005280
_080BBBB8: .4byte gUnknown_08206498
_080BBBBC: .4byte gPaletteBuffer
_080BBBC0: .4byte gUnknown_08A97ACC

	THUMB_FUNC_START NewGmapCursor
NewGmapCursor: @ 0x080BBBC4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r0, _080BBBF0  @ gUnknown_08A3DF94
	adds r1, r4, #0
	bl Proc_Create
	str r5, [r0, #0x2c]
	adds r1, r0, #0
	adds r1, #0x30
	strb r6, [r1]
	mov r1, r8
	str r1, [r0, #0x4c]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080BBBF0: .4byte gUnknown_08A3DF94

	THUMB_FUNC_START sub_80BBBF4
sub_80BBBF4: @ 0x080BBBF4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	mov r8, r1
	mov ip, r2
	lsls r3, r3, #0x10
	lsrs r7, r3, #0x10
	b _080BBC44
_080BBC06:
	ldrb r0, [r4, #1]
	mov r1, ip
	muls r1, r0, r1
	adds r0, r1, #0
	ldrb r1, [r4]
	adds r0, r0, r1
	lsls r0, r0, #1
	mov r1, r8
	adds r3, r1, r0
	ldrb r5, [r4, #2]
	ldrb r6, [r4, #3]
	adds r2, r4, #4
	movs r0, #0
	cmp r0, r6
	bge _080BBC42
_080BBC24:
	adds r4, r0, #1
	cmp r5, #0
	beq _080BBC3C
	adds r1, r5, #0
_080BBC2C:
	ldrh r0, [r2]
	adds r0, r7, r0
	strh r0, [r3]
	adds r2, #2
	adds r3, #2
	subs r1, #1
	cmp r1, #0
	bne _080BBC2C
_080BBC3C:
	adds r0, r4, #0
	cmp r0, r6
	blt _080BBC24
_080BBC42:
	adds r4, r2, #0
_080BBC44:
	ldrb r0, [r4]
	cmp r0, #0xff
	bne _080BBC06
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BBC54
sub_80BBC54: @ 0x080BBC54
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, [r5, #0x2c]
	lsrs r1, r1, #5
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0xc
	orrs r1, r0
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r1, _080BBC80  @ gUnknown_02019D00
	ldr r2, _080BBC84  @ 0x01000960
	mov r0, sp
	bl CpuSet
	movs r4, #0
	b _080BBCA6
	.align 2, 0
_080BBC80: .4byte gUnknown_02019D00
_080BBC84: .4byte 0x01000960
_080BBC88:
	adds r0, r1, r4
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _080BBCC0  @ gUnknown_08206674
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r1, _080BBCC4  @ gUnknown_02019D00
	movs r2, #0x3c
	adds r3, r6, #0
	bl sub_80BBBF4
	adds r4, #1
_080BBCA6:
	ldr r1, [r5, #0x40]
	adds r0, r1, #0
	adds r0, #0x20
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r4, r0
	blt _080BBC88
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BBCC0: .4byte gUnknown_08206674
_080BBCC4: .4byte gUnknown_02019D00

	THUMB_FUNC_START sub_80BBCC8
sub_80BBCC8: @ 0x080BBCC8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	cmp r4, #0x12
	bgt _080BBCE6
	adds r0, r4, #0
	adds r0, #0x15
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	b _080BBCE8
_080BBCE6:
	movs r0, #0x28
_080BBCE8:
	mov r9, r0
	movs r0, #0x1f
	adds r7, r5, #0
	ands r7, r0
	movs r0, #0x20
	subs r0, r0, r7
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	adds r0, r2, #0
	bl BG_GetMapBuffer
	mov sl, r0
	lsls r0, r4, #4
	subs r0, r0, r4
	lsls r0, r0, #2
	adds r0, r0, r5
	lsls r0, r0, #1
	ldr r1, _080BBD44  @ gUnknown_02019D00
	adds r6, r0, r1
	mov r1, r8
	cmp r1, #0x1e
	bls _080BBD48
	lsls r0, r4, #0x10
	lsrs r5, r0, #0x10
	cmp r5, r9
	bcs _080BBD8E
_080BBD1E:
	movs r0, #0x1f
	ands r0, r5
	lsls r0, r0, #5
	adds r0, r0, r7
	lsls r0, r0, #1
	mov r3, sl
	adds r4, r3, r0
	adds r0, r6, #0
	adds r1, r4, #0
	movs r2, #0x1f
	bl CpuSet
	adds r6, #0x78
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, r9
	bcc _080BBD1E
	b _080BBD8E
	.align 2, 0
_080BBD44: .4byte gUnknown_02019D00
_080BBD48:
	lsls r0, r4, #0x10
	lsrs r5, r0, #0x10
	cmp r5, r9
	bcs _080BBD8E
	mov r1, r8
	movs r0, #0x1f
	subs r1, r0, r1
	str r1, [sp]
_080BBD58:
	adds r0, r5, #0
	movs r3, #0x1f
	ands r0, r3
	lsls r0, r0, #6
	mov r1, sl
	adds r4, r1, r0
	lsls r1, r7, #1
	adds r1, r4, r1
	adds r0, r6, #0
	mov r2, r8
	bl CpuSet
	mov r3, r8
	lsls r0, r3, #1
	adds r0, r6, r0
	adds r1, r4, #0
	ldr r2, [sp]
	ldr r3, _080BBDA0  @ 0x001FFFFF
	ands r2, r3
	bl CpuSet
	adds r6, #0x78
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, r9
	bcc _080BBD58
_080BBD8E:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BBDA0: .4byte 0x001FFFFF

	THUMB_FUNC_START sub_80BBDA4
sub_80BBDA4: @ 0x080BBDA4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	mov r8, r1
	adds r4, r2, #0
	mov r9, r3
	ldr r0, [sp, #0x20]
	bl BG_GetMapBuffer
	mov ip, r0
	cmp r6, r4
	beq _080BBE16
	cmp r6, r4
	ble _080BBDD4
	adds r0, r6, #0
	adds r0, #0x1e
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	mov r2, r8
	lsls r0, r2, #0x10
	b _080BBDDC
_080BBDD4:
	lsls r0, r6, #0x10
	lsrs r1, r0, #0x10
	mov r3, r8
	lsls r0, r3, #0x10
_080BBDDC:
	lsrs r2, r0, #0x10
	movs r7, #0x1f
	ands r7, r1
	lsls r0, r2, #4
	subs r0, r0, r2
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _080BBE2C  @ gUnknown_02019D00
	adds r5, r0, r1
	movs r1, #0
	movs r0, #0x1f
	mov sl, r0
_080BBDF6:
	adds r0, r2, r1
	mov r3, sl
	ands r0, r3
	lsls r0, r0, #5
	adds r0, r0, r7
	lsls r0, r0, #1
	mov r3, ip
	adds r4, r3, r0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r5, #0x78
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0x14
	bls _080BBDF6
_080BBE16:
	cmp r8, r9
	beq _080BBEA0
	cmp r8, r9
	ble _080BBE30
	lsls r0, r6, #0x10
	lsrs r1, r0, #0x10
	mov r0, r8
	adds r0, #0x14
	lsls r0, r0, #0x10
	b _080BBE38
	.align 2, 0
_080BBE2C: .4byte gUnknown_02019D00
_080BBE30:
	lsls r0, r6, #0x10
	lsrs r1, r0, #0x10
	mov r2, r8
	lsls r0, r2, #0x10
_080BBE38:
	lsrs r2, r0, #0x10
	movs r3, #0x1f
	mov r8, r3
	adds r7, r1, #0
	ands r7, r3
	adds r3, r2, #0
	mov r0, r8
	ands r3, r0
	lsls r0, r2, #4
	subs r0, r0, r2
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _080BBE78  @ gUnknown_02019D00
	adds r5, r0, r1
	movs r0, #0x20
	subs r0, r0, r7
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	cmp r6, #0x1e
	bls _080BBE7C
	lsls r0, r3, #5
	adds r0, r0, r7
	lsls r0, r0, #1
	mov r1, ip
	adds r4, r1, r0
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0x1f
	bl CpuSet
	b _080BBEA0
	.align 2, 0
_080BBE78: .4byte gUnknown_02019D00
_080BBE7C:
	lsls r0, r3, #6
	mov r2, ip
	adds r4, r2, r0
	lsls r1, r7, #1
	adds r1, r4, r1
	adds r0, r5, #0
	adds r2, r6, #0
	bl CpuSet
	lsls r0, r6, #1
	adds r0, r5, r0
	mov r3, r8
	subs r2, r3, r6
	ldr r1, _080BBEB0  @ 0x001FFFFF
	ands r2, r1
	adds r1, r4, #0
	bl CpuSet
_080BBEA0:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BBEB0: .4byte 0x001FFFFF

	THUMB_FUNC_START nullsub_38
nullsub_38: @ 0x080BBEB4
	bx lr

	THUMB_FUNC_START sub_80BBEB8
sub_80BBEB8: @ 0x080BBEB8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x31
	movs r1, #0
	movs r0, #4
	strb r0, [r5]
	adds r0, r4, #0
	adds r0, #0x32
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #0xff
	strb r0, [r1]
	adds r1, #1
	movs r0, #2
	strb r0, [r1]
	adds r1, #1
	movs r0, #1
	strb r0, [r1]
	bl BG_GetPriority
	adds r1, r4, #0
	adds r1, #0x3a
	strb r0, [r1]
	subs r1, #4
	ldr r0, [r4, #0x14]
	ldrh r0, [r0, #0x34]
	strb r0, [r1]
	adds r1, #1
	ldr r0, [r4, #0x14]
	ldrh r0, [r0, #0x36]
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x39
	movs r1, #0xfe
	strb r1, [r0]
	subs r0, #1
	strb r1, [r0]
	adds r0, r4, #0
	bl sub_80BBC54
	ldrb r1, [r5]
	movs r0, #3
	orrs r0, r1
	strb r0, [r5]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BBF1C
sub_80BBF1C: @ 0x080BBF1C
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	cmp r2, #0
	ble _080BBF50
	ldr r0, _080BBF58  @ 0x0000F3FF
	mov ip, r0
	ldr r0, _080BBF5C  @ 0xFFFFF3FF
	adds r6, r0, #0
	movs r7, #0xc0
	lsls r7, r7, #4
	adds r4, r2, #0
_080BBF36:
	ldrh r2, [r3]
	mov r1, ip
	ands r1, r2
	adds r1, r5, r1
	ands r1, r6
	adds r0, r7, #0
	ands r0, r2
	orrs r1, r0
	strh r1, [r3]
	adds r3, #2
	subs r4, #1
	cmp r4, #0
	bne _080BBF36
_080BBF50:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BBF58: .4byte 0x0000F3FF
_080BBF5C: .4byte 0xFFFFF3FF

	THUMB_FUNC_START sub_80BBF60
sub_80BBF60: @ 0x080BBF60
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _080BBF7A
	b _080BC0AA
_080BBF7A:
	adds r6, r7, #0
	adds r6, #0x36
	ldrb r0, [r6]
	adds r5, r7, #0
	adds r5, #0x38
	strb r0, [r5]
	adds r4, r7, #0
	adds r4, #0x37
	ldrb r0, [r4]
	adds r3, r7, #0
	adds r3, #0x39
	strb r0, [r3]
	add r2, sp, #4
	ldr r1, [r7, #0x14]
	ldrh r0, [r1, #0x34]
	strh r0, [r2]
	adds r2, #2
	ldrh r0, [r1, #0x36]
	strh r0, [r2]
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	mov r8, r6
	mov ip, r5
	adds r6, r4, #0
	mov r9, r2
	cmp r0, #0
	bge _080BBFB4
	adds r0, #7
_080BBFB4:
	asrs r0, r0, #3
	mov r2, r8
	strb r0, [r2]
	mov r4, r9
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge _080BBFC6
	adds r0, #7
_080BBFC6:
	asrs r0, r0, #3
	strb r0, [r6]
	ldrh r0, [r7, #0x36]
	adds r5, r7, #0
	adds r5, #0x34
	ldrh r2, [r7, #0x38]
	cmp r0, r2
	beq _080BC054
	mov r4, r8
	movs r2, #0
	ldrsb r2, [r4, r2]
	mov r1, ip
	movs r0, #0
	ldrsb r0, [r1, r0]
	subs r1, r2, r0
	cmp r1, #0
	blt _080BBFEE
	cmp r1, #1
	bgt _080BC00E
	b _080BBFF4
_080BBFEE:
	subs r0, r0, r2
	cmp r0, #1
	bgt _080BC00E
_080BBFF4:
	movs r2, #0
	ldrsb r2, [r6, r2]
	movs r0, #0
	ldrsb r0, [r3, r0]
	subs r1, r2, r0
	cmp r1, #0
	blt _080BC008
	cmp r1, #1
	bgt _080BC00E
	b _080BC02C
_080BC008:
	subs r0, r0, r2
	cmp r0, #1
	ble _080BC02C
_080BC00E:
	mov r2, r8
	movs r0, #0
	ldrsb r0, [r2, r0]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r4, r7, #0
	adds r4, #0x34
	ldrb r2, [r4]
	bl sub_80BBCC8
	ldrb r0, [r4]
	bl BG_EnableSync
	adds r5, r4, #0
	b _080BC054
_080BC02C:
	mov r4, r8
	movs r0, #0
	ldrsb r0, [r4, r0]
	movs r1, #0
	ldrsb r1, [r6, r1]
	mov r4, ip
	movs r2, #0
	ldrsb r2, [r4, r2]
	ldrb r3, [r3]
	lsls r3, r3, #0x18
	asrs r3, r3, #0x18
	adds r5, r7, #0
	adds r5, #0x34
	ldrb r4, [r5]
	str r4, [sp]
	bl sub_80BBDA4
	ldrb r0, [r5]
	bl BG_EnableSync
_080BC054:
	adds r4, r7, #0
	adds r4, #0x31
	ldrb r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080BC070
	adds r0, r7, #0
	bl sub_80BBC54
	ldrb r1, [r4]
	movs r0, #0xfd
	ands r0, r1
	strb r0, [r4]
_080BC070:
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080BC098
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	movs r1, #0
	ldrsb r1, [r6, r1]
	ldrb r2, [r5]
	bl sub_80BBCC8
	ldrb r0, [r5]
	bl BG_EnableSync
	ldrb r1, [r4]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r4]
_080BC098:
	ldrb r0, [r5]
	add r1, sp, #4
	ldrh r2, [r1]
	ldr r1, _080BC0B8  @ 0x000001FF
	ands r1, r2
	mov r3, r9
	ldrb r2, [r3]
	bl BG_SetPosition
_080BC0AA:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BC0B8: .4byte 0x000001FF

	THUMB_FUNC_START MapRoute_StartTransition
MapRoute_StartTransition: @ 0x080BC0BC
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x35
	ldrb r0, [r4]
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	ldrb r0, [r4]
	bl BG_EnableSync
	ldr r0, _080BC0F0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080BC0E8
	movs r0, #0xc4
	lsls r0, r0, #2
	bl m4aSongNumStart
_080BC0E8:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080BC0F0: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80BC0F4
sub_80BC0F4: @ 0x080BC0F4
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	ldr r2, _080BC174  @ gUnknown_030030BC
	ldrh r0, [r2]
	ldr r1, _080BC178  @ 0x0000FFC0
	ands r1, r0
	adds r5, r4, #0
	adds r5, #0x35
	movs r0, #1
	ldrb r3, [r5]
	lsls r0, r3
	orrs r1, r0
	ldr r0, _080BC17C  @ 0x0000C0FF
	ands r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r3, #0
	orrs r1, r0
	strh r1, [r2]
	adds r0, r4, #0
	bl sub_80BBC54
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x37
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldrb r2, [r5]
	bl sub_80BBCC8
	mov r2, sp
	ldr r1, [r4, #0x14]
	ldrh r0, [r1, #0x34]
	strh r0, [r2]
	mov r0, sp
	adds r0, #2
	ldrh r3, [r1, #0x36]
	strh r3, [r0]
	ldrb r0, [r5]
	mov r1, sp
	ldrh r2, [r1]
	ldr r1, _080BC180  @ 0x000001FF
	ands r1, r2
	movs r2, #0xff
	ands r2, r3
	bl BG_SetPosition
	movs r0, #0
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080BC174: .4byte gUnknown_030030BC
_080BC178: .4byte 0x0000FFC0
_080BC17C: .4byte 0x0000C0FF
_080BC180: .4byte 0x000001FF

	THUMB_FUNC_START MapRoute_EnableBGSyncs
MapRoute_EnableBGSyncs: @ 0x080BC184
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x35
	ldrb r5, [r6]
	movs r0, #3
	bl BG_GetPriority
	adds r1, r0, #0
	adds r0, r5, #0
	bl BG_SetPriority
	movs r1, #1
	adds r0, r1, #0
	ldrb r6, [r6]
	lsls r0, r6
	adds r4, #0x34
	ldrb r4, [r4]
	lsls r1, r4
	orrs r0, r1
	bl BG_EnableSyncByMask
	movs r0, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START MapRoute_TransitionLoop
MapRoute_TransitionLoop: @ 0x080BC1B8
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldrh r0, [r6, #0x3e]
	adds r0, #1
	strh r0, [r6, #0x3e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x3c
	ldrsh r1, [r6, r2]
	cmp r0, r1
	bge _080BC1F2
	movs r1, #0x3e
	ldrsh r0, [r6, r1]
	lsls r0, r0, #4
	movs r2, #0x3c
	ldrsh r1, [r6, r2]
	bl __divsi3
	lsls r1, r0, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	b _080BC220
_080BC1F2:
	adds r0, r6, #0
	adds r0, #0x35
	ldrb r0, [r0]
	bl BG_GetMapBuffer
	adds r5, r0, #0
	adds r4, r6, #0
	adds r4, #0x34
	ldrb r0, [r4]
	bl BG_GetMapBuffer
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r5, #0
	bl CpuFastSet
	ldrb r0, [r4]
	bl BG_EnableSync
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
_080BC220:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START MapRoute_TransitionEnd
MapRoute_TransitionEnd: @ 0x080BC228
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x35
	ldrb r0, [r4]
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldrb r0, [r4]
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	ldrb r0, [r4]
	adds r1, r5, #0
	adds r1, #0x3a
	ldrb r1, [r1]
	bl BG_SetPriority
	adds r2, r5, #0
	adds r2, #0x34
	movs r1, #1
	adds r0, r1, #0
	ldrb r2, [r2]
	lsls r0, r2
	ldrb r4, [r4]
	lsls r1, r4
	orrs r0, r1
	bl BG_EnableSyncByMask
	bl SetDefaultColorEffects
	ldr r2, _080BC290  @ gUnknown_030030BC
	ldrh r1, [r2]
	ldr r0, _080BC294  @ 0x0000FFC0
	ands r0, r1
	ldr r1, _080BC298  @ 0x0000C0FF
	ands r0, r1
	strh r0, [r2]
	adds r2, r5, #0
	adds r2, #0x32
	ldrb r1, [r2]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r2]
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080BC290: .4byte gUnknown_030030BC
_080BC294: .4byte 0x0000FFC0
_080BC298: .4byte 0x0000C0FF

	THUMB_FUNC_START MapRoute_BeginRouteTransition
MapRoute_BeginRouteTransition: @ 0x080BC29C
	push {lr}
	adds r2, r0, #0
	cmp r1, #1
	bgt _080BC2BC
	adds r3, r2, #0
	adds r3, #0x31
	ldrb r1, [r3]
	movs r0, #3
	orrs r0, r1
	strb r0, [r3]
	adds r2, #0x32
	ldrb r1, [r2]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r2]
	b _080BC2D6
_080BC2BC:
	movs r0, #0
	strh r1, [r2, #0x3c]
	strh r0, [r2, #0x3e]
	adds r3, r2, #0
	adds r3, #0x32
	ldrb r1, [r3]
	movs r0, #1
	orrs r0, r1
	strb r0, [r3]
	adds r0, r2, #0
	movs r1, #1
	bl Proc_GotoLabel
_080BC2D6:
	pop {r0}
	bx r0

	THUMB_FUNC_START MapRoute_80BC2DC
MapRoute_80BC2DC: @ 0x080BC2DC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r6, #0
	adds r7, #0x32
	ldrb r1, [r7]
	movs r0, #1
	mov r8, r0
	ands r0, r1
	cmp r0, #0
	beq _080BC38A
	mov r2, sp
	ldr r1, [r6, #0x14]
	ldrh r0, [r1, #0x34]
	strh r0, [r2]
	mov r4, sp
	adds r4, #2
	ldrh r0, [r1, #0x36]
	strh r0, [r4]
	adds r0, r6, #0
	bl sub_80BBC54
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bge _080BC318
	adds r0, #7
_080BC318:
	asrs r0, r0, #3
	movs r2, #0
	ldrsh r1, [r4, r2]
	cmp r1, #0
	bge _080BC324
	adds r1, #7
_080BC324:
	asrs r1, r1, #3
	adds r4, r6, #0
	adds r4, #0x34
	ldrb r2, [r4]
	bl sub_80BBCC8
	adds r5, r6, #0
	adds r5, #0x35
	ldrb r0, [r5]
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldrb r0, [r5]
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	ldrb r0, [r5]
	adds r1, r6, #0
	adds r1, #0x3a
	ldrb r1, [r1]
	bl BG_SetPriority
	mov r0, r8
	ldrb r4, [r4]
	lsls r0, r4
	mov r1, r8
	ldrb r5, [r5]
	lsls r1, r5
	orrs r0, r1
	bl BG_EnableSyncByMask
	bl SetDefaultColorEffects
	ldr r2, _080BC398  @ gUnknown_030030BC
	ldrh r1, [r2]
	ldr r0, _080BC39C  @ 0x0000FFC0
	ands r0, r1
	ldr r1, _080BC3A0  @ 0x0000C0FF
	ands r0, r1
	strh r0, [r2]
	ldrb r1, [r7]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r7]
	adds r0, r6, #0
	movs r1, #0
	bl Proc_GotoLabel
_080BC38A:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BC398: .4byte gUnknown_030030BC
_080BC39C: .4byte 0x0000FFC0
_080BC3A0: .4byte 0x0000C0FF

	THUMB_FUNC_START NewMapRoute
NewMapRoute: @ 0x080BC3A4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	mov r8, r1
	adds r5, r2, #0
	adds r6, r3, #0
	ldr r0, _080BC3D0  @ gUnknown_08A3DFC4
	adds r1, r4, #0
	bl Proc_Create
	str r5, [r0, #0x2c]
	adds r1, r0, #0
	adds r1, #0x30
	strb r6, [r1]
	mov r1, r8
	str r1, [r0, #0x40]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080BC3D0: .4byte gUnknown_08A3DFC4

	THUMB_FUNC_START sub_80BC3D4
sub_80BC3D4: @ 0x080BC3D4
	push {lr}
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	ldr r0, _080BC3EC  @ gUnknown_08206674
	adds r1, r1, r0
	ldr r1, [r1, #8]
	cmp r1, #0
	bne _080BC3F0
	movs r0, #0
	b _080BC400
	.align 2, 0
_080BC3EC: .4byte gUnknown_08206674
_080BC3F0:
	movs r2, #0
	b _080BC3F8
_080BC3F4:
	adds r1, #8
	adds r2, #1
_080BC3F8:
	ldr r0, [r1]
	cmp r0, #0
	bge _080BC3F4
	adds r0, r2, #0
_080BC400:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BC404
sub_80BC404: @ 0x080BC404
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x34
	ldrb r0, [r4]
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #1
	ldrb r4, [r4]
	lsls r0, r4
	bl BG_EnableSyncByMask
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BC428
sub_80BC428: @ 0x080BC428
	push {r4, r5, r6, lr}
	movs r4, #0
	adds r1, r0, #0
	adds r1, #0x60
	ldrb r2, [r1]
	cmp r4, r2
	bge _080BC44E
	adds r6, r0, #0
	adds r6, #0x34
	adds r5, r1, #0
_080BC43C:
	ldm r6!, {r0}
	adds r0, #0x34
	movs r1, #0
	bl Text_SetXCursor
	adds r4, #1
	ldrb r0, [r5]
	cmp r4, r0
	blt _080BC43C
_080BC44E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BC454
sub_80BC454: @ 0x080BC454
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080BC47C  @ gUnknown_03005280
	movs r0, #0
	strb r0, [r1, #1]
	ldr r0, _080BC480  @ gUnknown_0201AFC0
	ldr r1, _080BC484  @ 0x06001000
	movs r2, #0x80
	movs r3, #0
	bl Font_InitForUI
	ldr r0, _080BC488  @ gUnknown_08A3E124
	ldr r1, _080BC48C  @ gUnknown_08A3E148
	ldr r1, [r1]
	adds r2, r4, #0
	bl StartMenuAt
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080BC47C: .4byte gUnknown_03005280
_080BC480: .4byte gUnknown_0201AFC0
_080BC484: .4byte 0x06001000
_080BC488: .4byte gUnknown_08A3E124
_080BC48C: .4byte gUnknown_08A3E148

	THUMB_FUNC_START sub_80BC490
sub_80BC490: @ 0x080BC490
	push {lr}
	movs r0, #1
	bl BG_EnableSyncByMask
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BC4A0
sub_80BC4A0: @ 0x080BC4A0
	push {lr}
	bl ClearBg0Bg1
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BC4AC
sub_80BC4AC: @ 0x080BC4AC
	push {lr}
	ldr r0, _080BC4C0  @ gUnknown_08A3D748
	bl Proc_Find
	movs r1, #3
	bl Proc_GotoLabel
	movs r0, #0x1b
	pop {r1}
	bx r1
	.align 2, 0
_080BC4C0: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BC4C4
sub_80BC4C4: @ 0x080BC4C4
	push {lr}
	ldr r0, _080BC4D8  @ gUnknown_08A3D748
	bl Proc_Find
	movs r1, #9
	bl Proc_GotoLabel
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
_080BC4D8: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BC4DC
sub_80BC4DC: @ 0x080BC4DC
	push {lr}
	ldr r0, _080BC4F0  @ gUnknown_08A3D748
	bl Proc_Find
	movs r1, #0xc
	bl Proc_GotoLabel
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
_080BC4F0: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BC4F4
sub_80BC4F4: @ 0x080BC4F4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	adds r1, r6, #0
	adds r1, #0x63
	ldrb r2, [r1]
	movs r1, #8
	ands r1, r2
	cmp r1, #0
	bne _080BC566
	bl sub_80CF480
	lsls r0, r0, #0x18
	adds r4, r5, #0
	adds r4, #0x34
	cmp r0, #0
	bne _080BC51E
	adds r0, r4, #0
	movs r1, #4
	bl Text_SetColorId
_080BC51E:
	adds r0, r5, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	cmp r0, #2
	bne _080BC530
	adds r0, r4, #0
	movs r1, #1
	bl Text_SetColorId
_080BC530:
	ldr r0, [r5, #0x30]
	ldrh r0, [r0, #4]
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_AppendString
	adds r0, r6, #0
	adds r0, #0x64
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1e
	bl BG_GetMapBuffer
	adds r1, r0, #0
	movs r2, #0x2c
	ldrsh r0, [r5, r2]
	lsls r0, r0, #5
	movs r3, #0x2a
	ldrsh r2, [r5, r3]
	adds r0, r0, r2
	lsls r0, r0, #1
	adds r1, r1, r0
	adds r0, r4, #0
	bl Text_Draw
_080BC566:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BC56C
sub_80BC56C: @ 0x080BC56C
	push {lr}
	ldr r0, _080BC580  @ gUnknown_08A3D748
	bl Proc_Find
	movs r1, #0xa
	bl Proc_GotoLabel
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
_080BC580: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BC584
sub_80BC584: @ 0x080BC584
	push {lr}
	ldr r0, _080BC598  @ gUnknown_08A3D748
	bl Proc_Find
	movs r1, #0xb
	bl Proc_GotoLabel
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
_080BC598: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BC59C
sub_80BC59C: @ 0x080BC59C
	push {lr}
	ldr r0, _080BC5B0  @ gUnknown_08A3D748
	bl Proc_Find
	movs r1, #0xd
	bl Proc_GotoLabel
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
_080BC5B0: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BC5B4
sub_80BC5B4: @ 0x080BC5B4
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080BC5E0  @ gUnknown_03005280
	movs r0, #0
	strb r0, [r4, #1]
	ldr r0, _080BC5E4  @ gUnknown_0201AFC0
	ldr r1, _080BC5E8  @ 0x06001000
	movs r2, #0x80
	movs r3, #0
	bl Font_InitForUI
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	movs r2, #2
	ldrsh r1, [r4, r2]
	subs r0, r0, r1
	cmp r0, #0x97
	bgt _080BC5F4
	ldr r0, _080BC5EC  @ gUnknown_08A3E200
	ldr r1, _080BC5F0  @ gUnknown_08A3E224
	b _080BC5F8
	.align 2, 0
_080BC5E0: .4byte gUnknown_03005280
_080BC5E4: .4byte gUnknown_0201AFC0
_080BC5E8: .4byte 0x06001000
_080BC5EC: .4byte gUnknown_08A3E200
_080BC5F0: .4byte gUnknown_08A3E224
_080BC5F4:
	ldr r0, _080BC618  @ gUnknown_08A3E200
	ldr r1, _080BC61C  @ gUnknown_08A3E228
_080BC5F8:
	ldr r1, [r1]
	adds r2, r5, #0
	bl StartMenuAt
	adds r3, r0, #0
	ldr r0, _080BC620  @ gUnknown_03005280
	adds r0, #0xcd
	adds r1, r3, #0
	adds r1, #0x60
	ldrb r2, [r0]
	ldrb r0, [r1]
	cmp r2, r0
	bcs _080BC624
	adds r1, #1
	strb r2, [r1]
	b _080BC62C
	.align 2, 0
_080BC618: .4byte gUnknown_08A3E200
_080BC61C: .4byte gUnknown_08A3E228
_080BC620: .4byte gUnknown_03005280
_080BC624:
	subs r0, #1
	adds r2, r3, #0
	adds r2, #0x61
	strb r0, [r2]
_080BC62C:
	adds r0, r3, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BC634
sub_80BC634: @ 0x080BC634
	push {lr}
	movs r0, #1
	bl BG_EnableSyncByMask
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BC644
sub_80BC644: @ 0x080BC644
	push {lr}
	bl ClearBg0Bg1
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BC650
sub_80BC650: @ 0x080BC650
	push {lr}
	ldr r0, _080BC66C  @ gUnknown_03005280
	adds r0, #0xcd
	movs r1, #0
	strb r1, [r0]
	ldr r0, _080BC670  @ gUnknown_08A3D748
	bl Proc_Find
	movs r1, #3
	bl Proc_GotoLabel
	movs r0, #0x1b
	pop {r1}
	bx r1
	.align 2, 0
_080BC66C: .4byte gUnknown_03005280
_080BC670: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BC674
sub_80BC674: @ 0x080BC674
	push {lr}
	ldr r1, _080BC69C  @ gUnknown_03005280
	ldrb r2, [r1, #0x11]
	lsls r0, r2, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080BC6A4
	lsls r0, r2, #5
	ldr r1, _080BC6A0  @ gUnknown_082060B0
	adds r0, r0, r1
	ldr r0, [r0, #0xc]
	ldrh r0, [r0]
	cmp r0, #0
	beq _080BC6A4
	movs r0, #1
	b _080BC6A6
	.align 2, 0
_080BC69C: .4byte gUnknown_03005280
_080BC6A0: .4byte gUnknown_082060B0
_080BC6A4:
	movs r0, #3
_080BC6A6:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BC6AC
sub_80BC6AC: @ 0x080BC6AC
	push {lr}
	ldr r1, _080BC6D4  @ gUnknown_03005280
	ldrb r2, [r1, #0x11]
	lsls r0, r2, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080BC6DC
	lsls r0, r2, #5
	ldr r1, _080BC6D8  @ gUnknown_082060B0
	adds r0, r0, r1
	ldr r0, [r0, #0x10]
	ldrh r0, [r0]
	cmp r0, #0
	beq _080BC6DC
	movs r0, #1
	b _080BC6DE
	.align 2, 0
_080BC6D4: .4byte gUnknown_03005280
_080BC6D8: .4byte gUnknown_082060B0
_080BC6DC:
	movs r0, #3
_080BC6DE:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BC6E4
sub_80BC6E4: @ 0x080BC6E4
	push {lr}
	ldr r1, _080BC718  @ gUnknown_03005280
	ldrb r2, [r1, #0x11]
	lsls r0, r2, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080BC724
	lsls r0, r2, #5
	ldr r1, _080BC71C  @ gUnknown_082060B0
	adds r0, r0, r1
	ldr r0, [r0, #0x14]
	ldrh r0, [r0]
	cmp r0, #0
	beq _080BC724
	ldr r0, _080BC720  @ gUnknown_0202BCF0
	ldrb r1, [r0, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080BC724
	movs r0, #1
	b _080BC726
	.align 2, 0
_080BC718: .4byte gUnknown_03005280
_080BC71C: .4byte gUnknown_082060B0
_080BC720: .4byte gUnknown_0202BCF0
_080BC724:
	movs r0, #3
_080BC726:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BC72C
sub_80BC72C: @ 0x080BC72C
	push {lr}
	ldr r1, _080BC748  @ gUnknown_03005280
	ldrb r0, [r1, #0x11]
	lsls r0, r0, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080BC74C
	movs r0, #3
	b _080BC74E
	.align 2, 0
_080BC748: .4byte gUnknown_03005280
_080BC74C:
	movs r0, #1
_080BC74E:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BC754
sub_80BC754: @ 0x080BC754
	push {lr}
	ldr r1, _080BC770  @ gUnknown_03005280
	ldrb r0, [r1, #0x11]
	lsls r0, r0, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080BC774
	movs r0, #3
	b _080BC776
	.align 2, 0
_080BC770: .4byte gUnknown_03005280
_080BC774:
	movs r0, #1
_080BC776:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BC77C
sub_80BC77C: @ 0x080BC77C
	push {lr}
	ldr r1, _080BC79C  @ gUnknown_03005280
	adds r0, #0x61
	ldrb r0, [r0]
	adds r1, #0xcd
	strb r0, [r1]
	ldr r0, _080BC7A0  @ gUnknown_08A3D748
	bl Proc_Find
	movs r1, #0x13
	bl Proc_GotoLabel
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
_080BC79C: .4byte gUnknown_03005280
_080BC7A0: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BC7A4
sub_80BC7A4: @ 0x080BC7A4
	push {lr}
	ldr r1, _080BC7C4  @ gUnknown_03005280
	adds r0, #0x61
	ldrb r0, [r0]
	adds r1, #0xcd
	strb r0, [r1]
	ldr r0, _080BC7C8  @ gUnknown_08A3D748
	bl Proc_Find
	movs r1, #0x14
	bl Proc_GotoLabel
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
_080BC7C4: .4byte gUnknown_03005280
_080BC7C8: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BC7CC
sub_80BC7CC: @ 0x080BC7CC
	push {lr}
	ldr r1, _080BC7EC  @ gUnknown_03005280
	adds r0, #0x61
	ldrb r0, [r0]
	adds r1, #0xcd
	strb r0, [r1]
	ldr r0, _080BC7F0  @ gUnknown_08A3D748
	bl Proc_Find
	movs r1, #0x15
	bl Proc_GotoLabel
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
_080BC7EC: .4byte gUnknown_03005280
_080BC7F0: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BC7F4
sub_80BC7F4: @ 0x080BC7F4
	push {lr}
	ldr r1, _080BC814  @ gUnknown_03005280
	adds r0, #0x61
	ldrb r0, [r0]
	adds r1, #0xcd
	strb r0, [r1]
	ldr r0, _080BC818  @ gUnknown_08A3D748
	bl Proc_Find
	movs r1, #0x16
	bl Proc_GotoLabel
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
_080BC814: .4byte gUnknown_03005280
_080BC818: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BC81C
sub_80BC81C: @ 0x080BC81C
	push {r4, r5, r6, lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	ldr r4, _080BC890  @ gUnknown_03005280
	ldr r2, _080BC894  @ 0x05000035
	mov r0, sp
	adds r1, r4, #0
	bl CpuSet
	adds r0, r4, #0
	adds r0, #0xa4
	bl sub_80BC898
	movs r5, #0
	movs r6, #0xfd
	adds r2, r4, #0
	adds r2, #0x10
	movs r3, #6
_080BC842:
	strh r5, [r2, #2]
	ldrb r1, [r2]
	adds r0, r6, #0
	ands r0, r1
	strb r0, [r2]
	adds r2, #4
	subs r3, #1
	cmp r3, #0
	bge _080BC842
	movs r3, #0
	movs r0, #1
	strh r0, [r4, #0x12]
	ldrb r1, [r4, #0x10]
	movs r0, #0xfd
	ands r0, r1
	strb r0, [r4, #0x10]
	strb r3, [r4, #0x11]
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r1, [r2]
	movs r0, #2
	orrs r0, r1
	strb r0, [r2]
	ldrb r0, [r4]
	movs r1, #4
	orrs r0, r1
	movs r1, #0x30
	orrs r0, r1
	strb r0, [r4]
	adds r0, r4, #0
	adds r0, #0xcd
	strb r3, [r0]
	adds r0, #1
	bl StoreRNState
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BC890: .4byte gUnknown_03005280
_080BC894: .4byte 0x05000035

	THUMB_FUNC_START sub_80BC898
sub_80BC898: @ 0x080BC898
	push {r4, lr}
	adds r3, r0, #0
	movs r2, #0
	movs r4, #0xff
_080BC8A0:
	adds r1, r3, r2
	ldrb r0, [r1]
	orrs r0, r4
	strb r0, [r1]
	adds r2, #1
	cmp r2, #0x1f
	bls _080BC8A0
	adds r1, r3, #0
	adds r1, #0x20
	movs r0, #0
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START SetupNewWMRoute
SetupNewWMRoute: @ 0x080BC8BC
	push {r4, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	adds r3, #0x20
	ldrb r0, [r3]
	cmp r0, #0x1f
	bls _080BC8CE
	movs r0, #1
	b _080BC8E4
_080BC8CE:
	movs r0, #0
	ldrsb r0, [r3, r0]
	adds r0, r1, r0
	strb r2, [r0]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	adds r0, r4, #0
	bl sub_80BCA0C
	movs r0, #0
_080BC8E4:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START WM_RemovePath
WM_RemovePath: @ 0x080BC8EC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	adds r4, r2, #0
	adds r1, #0x20
	ldrb r2, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _080BC966
	cmp r4, #0
	bge _080BC914
	subs r0, r2, #1
	strb r0, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	adds r0, r5, r0
	movs r1, #0xff
	strb r1, [r0]
	b _080BC952
_080BC914:
	movs r3, #0
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r3, r0
	bge _080BC966
	adds r2, r1, #0
_080BC920:
	adds r1, r5, r3
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, r4
	bne _080BC95C
	adds r4, r2, #0
	movs r0, #0
	ldrsb r0, [r4, r0]
	subs r0, #1
	adds r5, #0x20
	cmp r3, r0
	bge _080BC94C
	adds r2, r1, #0
_080BC93A:
	ldrb r0, [r2, #1]
	strb r0, [r2]
	adds r2, #1
	adds r3, #1
	movs r0, #0
	ldrsb r0, [r4, r0]
	subs r0, #1
	cmp r3, r0
	blt _080BC93A
_080BC94C:
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
_080BC952:
	adds r0, r6, #0
	bl sub_80BCA0C
	movs r0, #0
	b _080BC968
_080BC95C:
	adds r3, #1
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r3, r0
	blt _080BC920
_080BC966:
	movs r0, #1
_080BC968:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BC970
sub_80BC970: @ 0x080BC970
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	mov r8, r1
	movs r0, #0
	str r0, [sp]
	ldr r2, _080BCA04  @ 0x0500003A
	mov r0, sp
	bl CpuSet
	movs r2, #0
	adds r0, r4, #0
	adds r0, #0xa4
	adds r4, #0xc4
	movs r1, #0
	ldrsb r1, [r4, r1]
	cmp r2, r1
	bge _080BC9F4
	mov r9, r0
	ldr r3, _080BCA08  @ gUnknown_08206674
	mov sl, r3
	mov ip, r1
_080BC9A4:
	adds r0, r0, r2
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r5, #0
	adds r7, r2, #1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	add r0, sl
	adds r6, r0, #4
	adds r4, r0, #5
_080BC9BA:
	adds r0, r6, r5
	movs r2, #0
	ldrsb r2, [r0, r2]
	lsls r0, r2, #3
	mov r1, r8
	adds r3, r1, r0
	movs r0, #0
	ldrsb r0, [r3, r0]
	adds r0, r3, r0
	ldrb r1, [r4]
	strb r1, [r0, #1]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	cmp r2, #0
	bne _080BC9E4
	movs r0, #0
	ldrsb r0, [r3, r0]
	adds r0, r3, r0
	ldrb r1, [r4]
	strb r1, [r0, #1]
_080BC9E4:
	subs r4, #1
	adds r5, #1
	cmp r5, #1
	ble _080BC9BA
	adds r2, r7, #0
	mov r0, r9
	cmp r2, ip
	blt _080BC9A4
_080BC9F4:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BCA04: .4byte 0x0500003A
_080BCA08: .4byte gUnknown_08206674

	THUMB_FUNC_START sub_80BCA0C
sub_80BCA0C: @ 0x080BCA0C
	push {lr}
	ldr r1, _080BCA18  @ gUnknown_0201AFF0
	bl sub_80BC970
	pop {r0}
	bx r0
	.align 2, 0
_080BCA18: .4byte gUnknown_0201AFF0

	THUMB_FUNC_START sub_80BCA1C
sub_80BCA1C: @ 0x080BCA1C
	push {r4, lr}
	adds r3, r0, #0
	movs r2, #4
	ldr r0, _080BCA3C  @ gUnknown_03005280
	adds r1, r0, #0
	adds r1, #0x10
_080BCA28:
	movs r4, #0x12
	ldrsh r0, [r1, r4]
	cmp r0, #0
	beq _080BCA40
	ldrb r0, [r1, #0x11]
	cmp r3, r0
	bne _080BCA40
	adds r0, r2, #0
	b _080BCA4C
	.align 2, 0
_080BCA3C: .4byte gUnknown_03005280
_080BCA40:
	adds r1, #4
	adds r2, #1
	cmp r2, #6
	ble _080BCA28
	movs r0, #1
	negs r0, r0
_080BCA4C:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BCA54
sub_80BCA54: @ 0x080BCA54
	push {r4, r5, lr}
	adds r2, r0, #0
	movs r0, #0
	strb r0, [r2]
	ldr r0, _080BCA8C  @ gUnknown_03005280
	adds r5, r2, #1
	adds r3, r0, #0
	adds r3, #0x10
	movs r4, #2
_080BCA66:
	movs r1, #0x12
	ldrsh r0, [r3, r1]
	cmp r0, #0
	beq _080BCA7C
	ldrb r0, [r2]
	adds r0, r5, r0
	ldrb r1, [r3, #0x11]
	strb r1, [r0]
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
_080BCA7C:
	adds r3, #4
	subs r4, #1
	cmp r4, #0
	bge _080BCA66
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BCA8C: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BCA90
sub_80BCA90: @ 0x080BCA90
	push {r4, lr}
	adds r4, r1, #0
	movs r2, #0
	ldrb r3, [r0]
	cmp r2, r3
	bge _080BCAB0
	adds r1, r0, #1
_080BCA9E:
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r0, r4
	bne _080BCAAA
	movs r0, #1
	b _080BCAB2
_080BCAAA:
	adds r2, #1
	cmp r2, r3
	blt _080BCA9E
_080BCAB0:
	movs r0, #0
_080BCAB2:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BCAB8
sub_80BCAB8: @ 0x080BCAB8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r7, r0, #0
	str r1, [sp, #8]
	ldr r0, [sp, #0x3c]
	ldr r1, [sp, #0x40]
	mov r8, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp, #0xc]
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x10]
	ldr r0, [r7, #0x20]
	cmp r8, r0
	bge _080BCB98
	lsls r0, r3, #0x18
	asrs r1, r0, #0x15
	ldr r2, [sp, #8]
	adds r2, r2, r1
	mov sl, r2
	movs r3, #0
	mov r9, r3
	movs r1, #0
	ldrsb r1, [r2, r1]
	str r0, [sp, #0x18]
	cmp r9, r1
	bge _080BCB98
	adds r0, r7, #0
	adds r0, #0x10
	add r0, r8
	str r0, [sp, #0x14]
	mov r4, sl
	adds r4, #1
_080BCB08:
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldr r5, [sp, #0xc]
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	beq _080BCB88
	movs r2, #0
	ldr r3, [sp, #0x10]
	lsls r0, r3, #0x18
	asrs r6, r0, #0x18
	cmp r1, r6
	bne _080BCB24
	movs r2, #1
_080BCB24:
	adds r5, r2, #0
	cmp r5, #0
	bne _080BCB3A
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldr r0, _080BCB6C  @ gUnknown_0201B100
	bl sub_80BCA90
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080BCB88
_080BCB3A:
	ldrb r0, [r4]
	ldr r1, [sp, #0x14]
	strb r0, [r1]
	adds r1, r7, #0
	adds r1, #0x10
	cmp r5, #0
	beq _080BCB70
	ldr r0, [r7, #0x20]
	cmp r8, r0
	bge _080BCB68
	movs r2, #1
	cmp r2, r8
	bgt _080BCB64
	adds r3, r1, #0
_080BCB56:
	adds r0, r7, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, r8
	ble _080BCB56
_080BCB64:
	mov r2, r8
	str r2, [r7, #0x20]
_080BCB68:
	movs r0, #1
	b _080BCB9A
	.align 2, 0
_080BCB6C: .4byte gUnknown_0201B100
_080BCB70:
	movs r3, #0
	ldrsb r3, [r4, r3]
	str r6, [sp]
	mov r0, r8
	adds r0, #1
	str r0, [sp, #4]
	adds r0, r7, #0
	ldr r1, [sp, #8]
	ldr r5, [sp, #0x18]
	asrs r2, r5, #0x18
	bl sub_80BCAB8
_080BCB88:
	adds r4, #1
	movs r0, #1
	add r9, r0
	mov r1, sl
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r9, r0
	blt _080BCB08
_080BCB98:
	movs r0, #0
_080BCB9A:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BCBAC
sub_80BCBAC: @ 0x080BCBAC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r6, r0, #0
	mov r8, r1
	ldr r0, [sp, #0x3c]
	ldr r7, [sp, #0x40]
	ldr r1, [sp, #0x44]
	mov r9, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp, #0xc]
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x10]
	ldr r0, [r6, #0x20]
	cmp r7, r0
	blt _080BCBDC
	b _080BCCE8
_080BCBDC:
	lsls r0, r3, #0x18
	asrs r1, r0, #0x15
	add r1, r8
	str r1, [sp, #0x18]
	movs r2, #0
	str r2, [sp, #0x14]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	mov sl, r0
	cmp r2, r1
	blt _080BCBF6
	b _080BCCE8
_080BCBF6:
	ldr r5, [sp, #0x18]
	adds r5, #1
_080BCBFA:
	ldrb r3, [r5]
	movs r1, #0
	ldrsb r1, [r5, r1]
	ldr r4, [sp, #0xc]
	lsls r0, r4, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	beq _080BCCD4
	movs r2, #0
	ldr r4, [sp, #0x10]
	lsls r0, r4, #0x18
	asrs r4, r0, #0x18
	cmp r1, r4
	bne _080BCC18
	movs r2, #1
_080BCC18:
	adds r1, r6, #0
	adds r1, #0x10
	adds r0, r1, r7
	strb r3, [r0]
	adds r3, r1, #0
	mov r0, r9
	cmp r0, #0
	blt _080BCC62
	cmp r2, #0
	beq _080BCC76
	movs r2, #0
	ldr r0, [r6, #0x24]
	cmp r9, r0
	bge _080BCC3C
	mov r1, r9
	str r1, [r6, #0x24]
	movs r2, #1
	b _080BCC4C
_080BCC3C:
	cmp r9, r0
	bne _080BCC48
	ldr r0, [r6, #0x20]
	cmp r7, r0
	bge _080BCC48
	movs r2, #1
_080BCC48:
	cmp r2, #0
	beq _080BCCB6
_080BCC4C:
	movs r2, #1
	cmp r2, r7
	bgt _080BCCB4
_080BCC52:
	adds r0, r6, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, r7
	ble _080BCC52
	b _080BCCB4
_080BCC62:
	cmp r2, #0
	bne _080BCC98
	movs r1, #0
	ldrsb r1, [r5, r1]
	ldr r0, _080BCC94  @ gUnknown_0201B100
	bl sub_80BCA90
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080BCCBA
_080BCC76:
	movs r3, #0
	ldrsb r3, [r5, r3]
	str r4, [sp]
	adds r0, r7, #1
	str r0, [sp, #4]
	mov r0, r9
	adds r0, #1
	str r0, [sp, #8]
	adds r0, r6, #0
	mov r1, r8
	mov r4, sl
	asrs r2, r4, #0x18
	bl sub_80BCBAC
	b _080BCCD4
	.align 2, 0
_080BCC94: .4byte gUnknown_0201B100
_080BCC98:
	ldr r0, [r6, #0x20]
	cmp r7, r0
	bge _080BCCB6
	movs r2, #1
	cmp r2, r7
	bgt _080BCCB4
	adds r3, r1, #0
_080BCCA6:
	adds r0, r6, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, r7
	ble _080BCCA6
_080BCCB4:
	str r7, [r6, #0x20]
_080BCCB6:
	movs r0, #1
	b _080BCCEA
_080BCCBA:
	movs r3, #0
	ldrsb r3, [r5, r3]
	str r4, [sp]
	adds r0, r7, #1
	str r0, [sp, #4]
	mov r0, r9
	str r0, [sp, #8]
	adds r0, r6, #0
	mov r1, r8
	mov r4, sl
	asrs r2, r4, #0x18
	bl sub_80BCBAC
_080BCCD4:
	adds r5, #1
	ldr r0, [sp, #0x14]
	adds r0, #1
	str r0, [sp, #0x14]
	ldr r1, [sp, #0x18]
	movs r0, #0
	ldrsb r0, [r1, r0]
	ldr r2, [sp, #0x14]
	cmp r2, r0
	blt _080BCBFA
_080BCCE8:
	movs r0, #0
_080BCCEA:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BCCFC
sub_80BCCFC: @ 0x080BCCFC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r4, r2, #0
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	str r7, [sp, #0x14]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r9, r1
	mov sl, r9
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080BCD80  @ gUnknown_0201B100
	bl sub_80BCA54
	lsls r4, r4, #0x18
	asrs r4, r4, #0x18
	mov r8, r4
	cmp r4, #0
	beq _080BCD32
	ldr r1, _080BCD84  @ gUnknown_0201B0D8
	movs r0, #0x10
	str r0, [r1, #0x24]
_080BCD32:
	ldr r6, _080BCD84  @ gUnknown_0201B0D8
	movs r0, #0x10
	str r0, [r6, #0x20]
	movs r4, #0
	str r4, [sp, #0xc]
	ldr r5, _080BCD88  @ 0x05000004
	add r0, sp, #0xc
	adds r1, r6, #0
	adds r2, r5, #0
	bl CpuSet
	str r4, [sp, #0x10]
	add r0, sp, #0x10
	adds r1, r6, #0
	adds r1, #0x10
	adds r2, r5, #0
	bl CpuSet
	strb r7, [r6]
	strb r7, [r6, #0x10]
	mov r0, r8
	cmp r0, #0
	beq _080BCD90
	ldr r1, _080BCD8C  @ gUnknown_0201AFF0
	movs r2, #1
	negs r2, r2
	lsls r3, r7, #0x18
	asrs r3, r3, #0x18
	mov r4, r9
	lsls r0, r4, #0x18
	asrs r0, r0, #0x18
	str r0, [sp]
	movs r4, #1
	str r4, [sp, #4]
	str r2, [sp, #8]
	adds r0, r6, #0
	bl sub_80BCBAC
	b _080BCDAE
	.align 2, 0
_080BCD80: .4byte gUnknown_0201B100
_080BCD84: .4byte gUnknown_0201B0D8
_080BCD88: .4byte 0x05000004
_080BCD8C: .4byte gUnknown_0201AFF0
_080BCD90:
	ldr r1, _080BCDBC  @ gUnknown_0201AFF0
	movs r2, #1
	negs r2, r2
	ldr r0, [sp, #0x14]
	lsls r3, r0, #0x18
	asrs r3, r3, #0x18
	mov r4, sl
	lsls r0, r4, #0x18
	asrs r0, r0, #0x18
	str r0, [sp]
	movs r4, #1
	str r4, [sp, #4]
	adds r0, r6, #0
	bl sub_80BCAB8
_080BCDAE:
	cmp r0, #0
	beq _080BCDC0
	ldrb r0, [r6, #0x11]
	strb r0, [r6, #1]
	str r4, [r6, #0x20]
	movs r0, #1
	b _080BCDCE
	.align 2, 0
_080BCDBC: .4byte gUnknown_0201AFF0
_080BCDC0:
	movs r1, #0
	ldr r0, _080BCDE0  @ gUnknown_0201B0D8
	ldr r0, [r0, #0x20]
	cmp r0, #0xf
	bgt _080BCDCC
	movs r1, #1
_080BCDCC:
	adds r0, r1, #0
_080BCDCE:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080BCDE0: .4byte gUnknown_0201B0D8

	THUMB_FUNC_START sub_80BCDE4
sub_80BCDE4: @ 0x080BCDE4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	movs r1, #0
	ldr r3, _080BCE04  @ gUnknown_08206674
_080BCDEE:
	movs r0, #4
	ldrsb r0, [r3, r0]
	cmp r5, r0
	bne _080BCE08
	movs r0, #5
	ldrsb r0, [r3, r0]
	cmp r4, r0
	bne _080BCE08
	movs r0, #0
	b _080BCE1A
	.align 2, 0
_080BCE04: .4byte gUnknown_08206674
_080BCE08:
	movs r0, #5
	ldrsb r0, [r3, r0]
	cmp r5, r0
	bne _080BCE20
	movs r0, #4
	ldrsb r0, [r3, r0]
	cmp r4, r0
	bne _080BCE20
	movs r0, #1
_080BCE1A:
	str r0, [r2]
	adds r0, r1, #0
	b _080BCE2C
_080BCE20:
	adds r3, #0xc
	adds r1, #1
	cmp r1, #0x1f
	bls _080BCDEE
	movs r0, #1
	negs r0, r0
_080BCE2C:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BCE34
sub_80BCE34: @ 0x080BCE34
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r6, r3, #0
	ldr r5, [sp, #0x3c]
	ldr r3, [sp, #0x40]
	mov r9, r3
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	str r2, [sp, #4]
	mov r2, sp
	bl sub_80BCDE4
	mov sl, r0
	cmp r0, #0
	bge _080BCE5E
	movs r0, #0
	b _080BCF9A
_080BCE5E:
	movs r0, #0
	strh r0, [r6]
	mov r0, sl
	lsls r4, r0, #1
	adds r0, r4, r0
	lsls r0, r0, #2
	ldr r1, _080BCF00  @ gUnknown_08206674
	adds r0, r0, r1
	mov r8, r0
	adds r0, #4
	ldr r1, [sp]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r0, #5
	ldr r0, _080BCF04  @ gUnknown_082060B0
	adds r1, r1, r0
	movs r2, #0x18
	ldrsh r0, [r1, r2]
	mov r3, r9
	lsls r0, r3
	str r0, [r5]
	movs r2, #0x1a
	ldrsh r0, [r1, r2]
	lsls r0, r3
	str r0, [r5, #4]
	adds r6, #2
	adds r5, #8
	mov r0, sl
	bl sub_80BC3D4
	adds r3, r0, #0
	ldr r0, [sp]
	str r4, [sp, #0x10]
	cmp r0, #0
	bne _080BCF08
	movs r7, #0
	adds r0, r3, #2
	str r0, [sp, #0xc]
	cmp r7, r3
	bge _080BCF60
	mov r2, r8
	ldr r1, [sp, #4]
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
_080BCEBC:
	ldr r0, [r2, #8]
	lsls r4, r7, #3
	adds r0, r4, r0
	ldr r0, [r0]
	mov r1, r8
	muls r1, r0, r1
	movs r0, #0x80
	lsls r0, r0, #5
	str r2, [sp, #0x14]
	str r3, [sp, #0x18]
	bl DivArm
	strh r0, [r6]
	ldr r2, [sp, #0x14]
	ldr r0, [r2, #8]
	adds r4, r4, r0
	movs r1, #4
	ldrsh r0, [r4, r1]
	mov r1, r9
	lsls r0, r1
	str r0, [r5]
	movs r1, #6
	ldrsh r0, [r4, r1]
	mov r1, r9
	lsls r0, r1
	str r0, [r5, #4]
	adds r6, #2
	adds r5, #8
	adds r7, #1
	ldr r3, [sp, #0x18]
	cmp r7, r3
	blt _080BCEBC
	b _080BCF60
	.align 2, 0
_080BCF00: .4byte gUnknown_08206674
_080BCF04: .4byte gUnknown_082060B0
_080BCF08:
	subs r7, r3, #1
	adds r3, #2
	str r3, [sp, #0xc]
	cmp r7, #0
	blt _080BCF60
	ldr r2, [sp, #4]
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	str r0, [sp, #8]
	mov r2, r8
_080BCF1C:
	ldr r0, [r2, #8]
	lsls r4, r7, #3
	adds r0, r4, r0
	ldr r0, [r0]
	movs r3, #0x80
	lsls r3, r3, #5
	subs r0, r3, r0
	ldr r3, [sp, #8]
	adds r1, r3, #0
	muls r1, r0, r1
	mov r8, r1
	movs r0, #0x80
	lsls r0, r0, #5
	str r2, [sp, #0x14]
	bl DivArm
	strh r0, [r6]
	ldr r2, [sp, #0x14]
	ldr r0, [r2, #8]
	adds r4, r4, r0
	movs r1, #4
	ldrsh r0, [r4, r1]
	mov r3, r9
	lsls r0, r3
	str r0, [r5]
	movs r1, #6
	ldrsh r0, [r4, r1]
	lsls r0, r3
	str r0, [r5, #4]
	adds r6, #2
	adds r5, #8
	subs r7, #1
	cmp r7, #0
	bge _080BCF1C
_080BCF60:
	mov r2, sp
	ldrh r2, [r2, #4]
	strh r2, [r6]
	ldr r0, [sp, #0x10]
	add r0, sl
	lsls r0, r0, #2
	ldr r1, _080BCFAC  @ gUnknown_08206674
	adds r0, r0, r1
	ldr r2, [sp]
	movs r1, #1
	subs r1, r1, r2
	adds r0, #4
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r0, #5
	ldr r0, _080BCFB0  @ gUnknown_082060B0
	adds r1, r1, r0
	movs r3, #0x18
	ldrsh r0, [r1, r3]
	mov r2, r9
	lsls r0, r2
	str r0, [r5]
	movs r3, #0x1a
	ldrsh r0, [r1, r3]
	lsls r0, r2
	str r0, [r5, #4]
	ldr r0, [sp, #0xc]
_080BCF9A:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080BCFAC: .4byte gUnknown_08206674
_080BCFB0: .4byte gUnknown_082060B0

	THUMB_FUNC_START sub_80BCFB4
sub_80BCFB4: @ 0x080BCFB4
	push {r4, lr}
	ldr r0, _080BCFD8  @ gUnknown_03005280
	movs r4, #0xfd
	adds r2, r0, #0
	adds r2, #0x30
	movs r3, #0x1c
_080BCFC0:
	ldrb r1, [r2]
	adds r0, r4, #0
	ands r0, r1
	strb r0, [r2]
	adds r2, #4
	subs r3, #1
	cmp r3, #0
	bge _080BCFC0
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BCFD8: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BCFDC
sub_80BCFDC: @ 0x080BCFDC
	push {r4, r5, lr}
	adds r5, r0, #0
	subs r0, #0x25
	cmp r0, #8
	bhi _080BCFEE
	movs r5, #0x24
	b _080BCFF8
_080BCFEA:
	adds r0, r4, #0
	b _080BD00E
_080BCFEE:
	adds r0, r5, #0
	subs r0, #0x2f
	cmp r0, #8
	bhi _080BCFF8
	movs r5, #0x2e
_080BCFF8:
	movs r4, #0
_080BCFFA:
	adds r0, r4, #0
	bl WMLoc_GetChapterId
	cmp r5, r0
	beq _080BCFEA
	adds r4, #1
	cmp r4, #0x1c
	ble _080BCFFA
	movs r0, #1
	negs r0, r0
_080BD00E:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BD014
sub_80BD014: @ 0x080BD014
	push {r4, r5, lr}
	movs r3, #0
	movs r5, #1
	movs r4, #2
	adds r2, r0, #0
	adds r2, #0x30
_080BD020:
	ldrb r1, [r2]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _080BD036
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _080BD036
	adds r0, r3, #0
	b _080BD042
_080BD036:
	adds r2, #4
	adds r3, #1
	cmp r3, #0x1c
	ble _080BD020
	movs r0, #1
	negs r0, r0
_080BD042:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BD048
sub_80BD048: @ 0x080BD048
	push {lr}
	ldr r0, _080BD05C  @ gUnknown_03005280
	bl sub_80BD014
	cmp r0, #0
	blt _080BD060
	bl WMLoc_GetChapterId
	b _080BD064
	.align 2, 0
_080BD05C: .4byte gUnknown_03005280
_080BD060:
	movs r0, #1
	negs r0, r0
_080BD064:
	pop {r1}
	bx r1

	THUMB_FUNC_START GetChapterThing
GetChapterThing: @ 0x080BD068
	push {r4, r5, r6, lr}
	ldr r0, _080BD080  @ gUnknown_0202BCF0
	movs r5, #0xe
	ldrsb r5, [r0, r5]
	cmp r5, #0x47
	bls _080BD076
	b _080BD1A8
_080BD076:
	lsls r0, r5, #2
	ldr r1, _080BD084  @ _080BD088
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080BD080: .4byte gUnknown_0202BCF0
_080BD084: .4byte _080BD088
_080BD088: @ jump table
	.4byte _080BD1E4 @ case 0
	.4byte _080BD1E4 @ case 1
	.4byte _080BD1A8 @ case 2
	.4byte _080BD1A8 @ case 3
	.4byte _080BD1A8 @ case 4
	.4byte _080BD1E4 @ case 5
	.4byte _080BD1A8 @ case 6
	.4byte _080BD1A8 @ case 7
	.4byte _080BD1A8 @ case 8
	.4byte _080BD1A8 @ case 9
	.4byte _080BD1A8 @ case 10
	.4byte _080BD1A8 @ case 11
	.4byte _080BD1E4 @ case 12
	.4byte _080BD1A8 @ case 13
	.4byte _080BD1A8 @ case 14
	.4byte _080BD1A8 @ case 15
	.4byte _080BD1A8 @ case 16
	.4byte _080BD1A8 @ case 17
	.4byte _080BD1A8 @ case 18
	.4byte _080BD1A8 @ case 19
	.4byte _080BD1A8 @ case 20
	.4byte _080BD1E4 @ case 21
	.4byte _080BD1E4 @ case 22
	.4byte _080BD1A8 @ case 23
	.4byte _080BD1A8 @ case 24
	.4byte _080BD1E4 @ case 25
	.4byte _080BD1A8 @ case 26
	.4byte _080BD1A8 @ case 27
	.4byte _080BD1A8 @ case 28
	.4byte _080BD1A8 @ case 29
	.4byte _080BD1A8 @ case 30
	.4byte _080BD1A8 @ case 31
	.4byte _080BD1A8 @ case 32
	.4byte _080BD1A8 @ case 33
	.4byte _080BD1E4 @ case 34
	.4byte _080BD1E4 @ case 35
	.4byte _080BD1A8 @ case 36
	.4byte _080BD1A8 @ case 37
	.4byte _080BD1A8 @ case 38
	.4byte _080BD1A8 @ case 39
	.4byte _080BD1A8 @ case 40
	.4byte _080BD1A8 @ case 41
	.4byte _080BD1A8 @ case 42
	.4byte _080BD1A8 @ case 43
	.4byte _080BD1A8 @ case 44
	.4byte _080BD1A8 @ case 45
	.4byte _080BD1A8 @ case 46
	.4byte _080BD1A8 @ case 47
	.4byte _080BD1A8 @ case 48
	.4byte _080BD1A8 @ case 49
	.4byte _080BD1A8 @ case 50
	.4byte _080BD1A8 @ case 51
	.4byte _080BD1A8 @ case 52
	.4byte _080BD1A8 @ case 53
	.4byte _080BD1A8 @ case 54
	.4byte _080BD1A8 @ case 55
	.4byte _080BD1E4 @ case 56
	.4byte _080BD1A8 @ case 57
	.4byte _080BD1A8 @ case 58
	.4byte _080BD1E4 @ case 59
	.4byte _080BD1E4 @ case 60
	.4byte _080BD1A8 @ case 61
	.4byte _080BD1A8 @ case 62
	.4byte _080BD1E4 @ case 63
	.4byte _080BD1E4 @ case 64
	.4byte _080BD1E4 @ case 65
	.4byte _080BD1E4 @ case 66
	.4byte _080BD1E4 @ case 67
	.4byte _080BD1E4 @ case 68
	.4byte _080BD1E4 @ case 69
	.4byte _080BD1E4 @ case 70
	.4byte _080BD1E4 @ case 71
_080BD1A8:
	adds r0, r5, #0
	subs r0, #0x25
	cmp r0, #8
	bhi _080BD1B4
	movs r5, #0x24
	b _080BD1BE
_080BD1B4:
	adds r0, r5, #0
	subs r0, #0x2f
	cmp r0, #8
	bhi _080BD1BE
	movs r5, #0x2e
_080BD1BE:
	movs r4, #0
	ldr r6, _080BD1E8  @ gUnknown_082060B0
_080BD1C2:
	adds r0, r4, #0
	bl WMLoc_GetChapterId
	cmp r5, r0
	bne _080BD1FA
	ldr r1, _080BD1EC  @ gUnknown_03005280
	lsls r0, r4, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080BD1F0
	ldrb r0, [r6]
	cmp r0, #3
	beq _080BD1F6
_080BD1E4:
	movs r0, #0
	b _080BD204
	.align 2, 0
_080BD1E8: .4byte gUnknown_082060B0
_080BD1EC: .4byte gUnknown_03005280
_080BD1F0:
	ldrb r0, [r6, #1]
	cmp r0, #3
	bne _080BD202
_080BD1F6:
	movs r0, #1
	b _080BD204
_080BD1FA:
	adds r6, #0x20
	adds r4, #1
	cmp r4, #0x1c
	ble _080BD1C2
_080BD202:
	movs r0, #2
_080BD204:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BD20C
sub_80BD20C: @ 0x080BD20C
	push {lr}
	adds r1, r0, #0
	cmp r1, #6
	ble _080BD216
	movs r1, #0
_080BD216:
	ldr r0, _080BD220  @ gUnknown_08206868
	adds r0, r1, r0
	ldrb r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
_080BD220: .4byte gUnknown_08206868

	THUMB_FUNC_START sub_80BD224
sub_80BD224: @ 0x080BD224
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r5, #0
	bl sub_80BD014
	adds r1, r0, #0
	ldrb r0, [r4, #0x11]
	cmp r0, r1
	bne _080BD242
	cmp r1, #0
	blt _080BD258
	adds r0, r1, #0
	bl WMLoc_GetNextLocId
	b _080BD252
_080BD242:
	adds r0, r4, #0
	bl sub_80BD014
	adds r1, r0, #0
	cmp r1, #0
	bge _080BD250
	movs r1, #0
_080BD250:
	adds r0, r1, #0
_080BD252:
	bl WMLoc_GetChapterId
	adds r5, r0, #0
_080BD258:
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BD260
sub_80BD260: @ 0x080BD260
	push {lr}
	adds r0, #0xce
	movs r2, #3
	bl CpuSet
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BD270
sub_80BD270: @ 0x080BD270
	push {lr}
	adds r2, r0, #0
	adds r0, r1, #0
	adds r2, #0xce
	adds r1, r2, #0
	movs r2, #3
	bl CpuSet
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BD284
sub_80BD284: @ 0x080BD284
	ldr r0, _080BD288  @ gUnknown_0201B0D8
	bx lr
	.align 2, 0
_080BD288: .4byte gUnknown_0201B0D8

	THUMB_FUNC_START sub_80BD28C
sub_80BD28C: @ 0x080BD28C
	ldr r1, _080BD298  @ gUnknown_0201B0D8
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr
	.align 2, 0
_080BD298: .4byte gUnknown_0201B0D8

	THUMB_FUNC_START sub_80BD29C
sub_80BD29C: @ 0x080BD29C
	ldr r0, _080BD2A4  @ gUnknown_0201B0D8
	ldr r0, [r0, #0x20]
	adds r0, #1
	bx lr
	.align 2, 0
_080BD2A4: .4byte gUnknown_0201B0D8

	THUMB_FUNC_START nullsub_37
nullsub_37: @ 0x080BD2A8
	bx lr

	THUMB_FUNC_START GetCharacterClassId
GetCharacterClassId: @ 0x080BD2AC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #1
_080BD2B2:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _080BD2D0
	ldr r0, [r1]
	cmp r0, #0
	beq _080BD2D0
	ldrb r0, [r0, #4]
	cmp r0, r5
	bne _080BD2D0
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	b _080BD2E2
_080BD2D0:
	adds r4, #1
	cmp r4, #0xbf
	ble _080BD2B2
	ldr r2, _080BD2E8  @ gCharacterData
	subs r1, r5, #1
	movs r0, #0x34
	muls r0, r1, r0
	adds r0, r0, r2
	ldrb r0, [r0, #5]
_080BD2E2:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080BD2E8: .4byte gCharacterData

	THUMB_FUNC_START MapMUPrim_MakeUnitForChar
MapMUPrim_MakeUnitForChar: @ 0x080BD2EC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	adds r5, r6, #0
	adds r5, #0x2b
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	blt _080BD314
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r5, r1]
	bl MapUnitC_DeleteGmapUnit
	movs r0, #0xff
	strb r0, [r5]
_080BD314:
	ldr r0, [r6, #0x14]
	ldr r4, [r0, #0x4c]
	adds r0, r7, #0
	bl GetCharacterClassId
	adds r1, r0, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	adds r0, r4, #0
	movs r2, #0
	bl NewMapUnit
	strb r0, [r5]
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r5, r1]
	mov r2, r8
	lsls r3, r2, #5
	ldr r2, _080BD370  @ gUnknown_082060B0
	adds r3, r3, r2
	movs r4, #0x18
	ldrsh r2, [r3, r4]
	movs r4, #0x1a
	ldrsh r3, [r3, r4]
	adds r3, #6
	bl MapUnitC_SetPosition
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r5, r1]
	movs r2, #4
	bl MapUnitC_SetTCSAnim
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r5, r1]
	bl MapUnitC_MarkSomething
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BD370: .4byte gUnknown_082060B0

	THUMB_FUNC_START MapMUPrim_MakeUnitForClass
MapMUPrim_MakeUnitForClass: @ 0x080BD374
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	adds r4, r5, #0
	adds r4, #0x2b
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	blt _080BD398
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	bl MapUnitC_DeleteGmapUnit
	movs r0, #0xff
	strb r0, [r4]
_080BD398:
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #0x4c]
	lsls r1, r6, #0x10
	lsrs r1, r1, #0x10
	movs r2, #0
	bl NewMapUnit
	strb r0, [r4]
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	lsls r3, r7, #5
	ldr r2, _080BD3E4  @ gUnknown_082060B0
	adds r3, r3, r2
	movs r6, #0x18
	ldrsh r2, [r3, r6]
	movs r6, #0x1a
	ldrsh r3, [r3, r6]
	adds r3, #6
	bl MapUnitC_SetPosition
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r2, #4
	bl MapUnitC_SetTCSAnim
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	bl MapUnitC_MarkSomething
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BD3E4: .4byte gUnknown_082060B0

	THUMB_FUNC_START MapMUPrim_RemoveLinkedMapUnit
MapMUPrim_RemoveLinkedMapUnit: @ 0x080BD3E8
	push {r4, lr}
	adds r1, r0, #0
	adds r4, r1, #0
	adds r4, #0x2b
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	blt _080BD408
	ldr r0, [r1, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	bl MapUnitC_DeleteGmapUnit
	movs r0, #0xff
	strb r0, [r4]
_080BD408:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BD410
sub_80BD410: @ 0x080BD410
	adds r0, #0x2b
	movs r1, #0xff
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START nullsub_70
nullsub_70: @ 0x080BD418
	bx lr

	THUMB_FUNC_START sub_80BD41C
sub_80BD41C: @ 0x080BD41C
	push {lr}
	adds r2, r0, #0
	muls r2, r0, r2
	adds r0, r2, #0
	adds r2, r1, #0
	muls r2, r1, r2
	adds r1, r2, #0
	adds r0, r0, r1
	lsls r0, r0, #4
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #5
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BD444
sub_80BD444: @ 0x080BD444
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x50]
	cmp r0, #0
	bge _080BD48E
	adds r0, r6, #0
	adds r0, #0x2e
	movs r3, #0
	ldrsb r3, [r0, r3]
	lsls r3, r3, #5
	ldr r1, _080BD5A0  @ gUnknown_082060B0
	adds r3, r3, r1
	movs r2, #0x18
	ldrsh r0, [r3, r2]
	adds r2, r6, #0
	adds r2, #0x2d
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	lsls r2, r2, #5
	adds r2, r2, r1
	movs r4, #0x18
	ldrsh r1, [r2, r4]
	subs r0, r0, r1
	movs r5, #0x1a
	ldrsh r1, [r3, r5]
	movs r3, #0x1a
	ldrsh r2, [r2, r3]
	subs r1, r1, r2
	bl sub_80BD41C
	str r0, [r6, #0x50]
_080BD48E:
	adds r2, r6, #0
	adds r2, #0x2d
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsls r0, r0, #5
	ldr r3, _080BD5A0  @ gUnknown_082060B0
	adds r0, r0, r3
	ldrb r1, [r0, #0x1e]
	movs r4, #1
	adds r0, r4, #0
	ands r0, r1
	movs r5, #0x2e
	adds r5, r5, r6
	mov r8, r5
	mov r9, r2
	adds r7, r6, #0
	adds r7, #0x2b
	cmp r0, #0
	beq _080BD4D4
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #5
	adds r0, r0, r3
	ldrb r1, [r0, #0x1e]
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _080BD4D4
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	movs r2, #0x50
	bl sub_80BB0E0
_080BD4D4:
	adds r1, r6, #0
	adds r1, #0x2a
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsls r5, r0, #2
	adds r5, r5, r0
	lsls r5, r5, #2
	ldr r0, _080BD5A4  @ gUnknown_0201B3A4
	adds r5, r5, r0
	movs r0, #0
	mov sl, r0
	movs r0, #2
	strh r0, [r5]
	movs r3, #0
	ldrsb r3, [r1, r3]
	lsls r3, r3, #5
	ldr r0, _080BD5A8  @ gUnknown_0201B104
	adds r3, r3, r0
	str r3, [r5, #4]
	movs r4, #0
	ldrsb r4, [r1, r4]
	lsls r4, r4, #6
	ldr r0, _080BD5AC  @ gUnknown_0201B1E4
	adds r4, r4, r0
	str r4, [r5, #8]
	ldr r0, _080BD5B0  @ gUnknown_08A3E22C
	str r0, [r5, #0xc]
	ldr r0, _080BD5B4  @ gUnknown_08A3E23C
	str r0, [r5, #0x10]
	mov r1, r9
	movs r0, #0
	ldrsb r0, [r1, r0]
	mov r2, r8
	movs r1, #0
	ldrsb r1, [r2, r1]
	ldr r2, [r6, #0x50]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	str r4, [sp]
	movs r4, #4
	str r4, [sp, #4]
	bl sub_80BCE34
	strh r0, [r5, #2]
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	adds r4, r7, #0
	movs r1, #0
	ldrsb r1, [r4, r1]
	mov r5, r9
	movs r3, #0
	ldrsb r3, [r5, r3]
	lsls r3, r3, #5
	ldr r2, _080BD5A0  @ gUnknown_082060B0
	adds r3, r3, r2
	movs r5, #0x18
	ldrsh r2, [r3, r5]
	movs r5, #0x1a
	ldrsh r3, [r3, r5]
	adds r3, #6
	bl MapUnitC_SetPosition
	adds r2, r6, #0
	adds r2, #0x31
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	blt _080BD56E
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl MapUnitC_SetTCSAnim
_080BD56E:
	mov r0, sl
	str r0, [r6, #0x54]
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	adds r2, r6, #0
	adds r2, #0x44
	adds r3, r6, #0
	adds r3, #0x46
	bl sub_80BAF44
	adds r0, r6, #0
	adds r0, #0x40
	mov r1, sl
	strh r1, [r0]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BD5A0: .4byte gUnknown_082060B0
_080BD5A4: .4byte gUnknown_0201B3A4
_080BD5A8: .4byte gUnknown_0201B104
_080BD5AC: .4byte gUnknown_0201B1E4
_080BD5B0: .4byte gUnknown_08A3E22C
_080BD5B4: .4byte gUnknown_08A3E23C

	THUMB_FUNC_START sub_80BD5B8
sub_80BD5B8: @ 0x080BD5B8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, r5, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	mov r4, sp
	adds r4, #2
	mov r2, sp
	adds r3, r4, #0
	bl sub_80BAF44
	mov r0, sp
	adds r1, r5, #0
	adds r1, #0x44
	ldrh r0, [r0]
	ldrh r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r3, r0, #0
	adds r1, r5, #0
	adds r1, #0x46
	ldrh r0, [r4]
	ldrh r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r6, r0, #0
	cmp r3, #0
	bne _080BD602
	cmp r0, #0
	beq _080BD656
_080BD602:
	adds r1, r5, #0
	adds r1, #0x40
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #2
	ble _080BD634
	movs r2, #0
	adds r4, r5, #0
	adds r4, #0x3c
	movs r0, #0x3d
	adds r0, r0, r5
	mov ip, r0
	subs r1, #0xc
_080BD61C:
	ldrb r0, [r1, #4]
	strb r0, [r1]
	ldrb r0, [r1, #5]
	strb r0, [r1, #1]
	adds r1, #4
	adds r2, #1
	cmp r2, #1
	ble _080BD61C
	strb r3, [r4]
	mov r2, ip
	strb r6, [r2]
	b _080BD652
_080BD634:
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #2
	adds r0, r5, r0
	adds r0, #0x34
	strb r3, [r0]
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #2
	adds r0, r5, r0
	adds r0, #0x35
	strb r6, [r0]
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
_080BD652:
	movs r0, #1
	b _080BD658
_080BD656:
	movs r0, #0
_080BD658:
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BD660
sub_80BD660: @ 0x080BD660
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	adds r3, r1, #0
	movs r2, #0x9a
	lsls r2, r2, #7
	adds r0, r1, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _080BD67C  @ 0x000019FF
	cmp r0, r2
	bhi _080BD680
	movs r0, #3
	b _080BD69C
	.align 2, 0
_080BD67C: .4byte 0x000019FF
_080BD680:
	ldr r4, _080BD690  @ 0xFFFFCD00
	adds r0, r1, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r2
	bhi _080BD694
	movs r0, #2
	b _080BD69C
	.align 2, 0
_080BD690: .4byte 0xFFFFCD00
_080BD694:
	ldr r1, _080BD6A4  @ 0xFFFFC000
	adds r0, r3, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x1f
_080BD69C:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080BD6A4: .4byte 0xFFFFC000

	THUMB_FUNC_START sub_80BD6A8
sub_80BD6A8: @ 0x080BD6A8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	movs r0, #0
	mov sl, r0
	mov r9, r0
	movs r7, #0
	mov r0, r8
	adds r0, #0x40
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r7, r0
	bge _080BD72C
	mov r6, r8
	adds r6, #0x34
_080BD6CE:
	movs r0, #0
	ldrsb r0, [r6, r0]
	mov r2, r9
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	adds r1, r1, r0
	lsls r1, r1, #0x10
	movs r2, #1
	ldrsb r2, [r6, r2]
	mov r3, sl
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r2, r1, #0x10
	mov r9, r2
	asrs r5, r1, #0x10
	lsrs r3, r0, #0x10
	mov sl, r3
	asrs r4, r0, #0x10
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl sub_80C0834
	cmp r0, #0x23
	bls _080BD71C
	adds r0, r5, #0
	adds r1, r4, #0
	bl ArcTan2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_80BD660
	b _080BD730
_080BD71C:
	adds r6, #4
	adds r7, #1
	mov r0, r8
	adds r0, #0x40
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r7, r0
	blt _080BD6CE
_080BD72C:
	movs r0, #1
	negs r0, r0
_080BD730:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BD740
sub_80BD740: @ 0x080BD740
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	bl sub_80BD5B8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080BD81E
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #0x20
	ands r0, r1
	adds r5, r2, #0
	cmp r0, #0
	beq _080BD784
	adds r0, r6, #0
	bl sub_80BE45C
	ldrb r1, [r5]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080BD784
	ldr r0, _080BD828  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080BD784
	adds r0, r6, #0
	bl sub_80BE45C
_080BD784:
	adds r0, r6, #0
	bl sub_80BD6A8
	adds r4, r0, #0
	adds r7, r6, #0
	adds r7, #0x2b
	cmp r4, #0
	blt _080BD7C8
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	bl sub_80BAF70
	cmp r0, r4
	beq _080BD7C8
	ldrb r1, [r5]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080BD7C8
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	adds r2, r4, #0
	bl MapUnitC_SetTCSAnim
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	bl MapUnitC_MarkSomething
_080BD7C8:
	ldrb r1, [r5]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080BD80A
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	mov r4, sp
	adds r4, #2
	mov r2, sp
	adds r3, r4, #0
	bl sub_80BAF44
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r1, #0xe
	add r4, sp, #4
	mov r5, sp
	adds r5, #6
	adds r2, r4, #0
	adds r3, r5, #0
	bl GetWMCenteredCameraPosition
	ldr r1, _080BD82C  @ gUnknown_03005280
	ldrh r0, [r4]
	strh r0, [r1, #2]
	ldrh r0, [r5]
	strh r0, [r1, #4]
_080BD80A:
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	adds r2, r6, #0
	adds r2, #0x44
	adds r3, r6, #0
	adds r3, #0x46
	bl sub_80BAF44
_080BD81E:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BD828: .4byte gKeyStatusPtr
_080BD82C: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BD830
sub_80BD830: @ 0x080BD830
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	adds r6, r0, #0
	adds r0, #0x29
	ldrb r3, [r0]
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _080BD848
	b _080BD9C4
_080BD848:
	adds r1, r6, #0
	adds r1, #0x42
	ldrh r2, [r1]
	movs r4, #0
	ldrsh r0, [r1, r4]
	cmp r0, #0
	ble _080BD85C
	subs r0, r2, #1
	strh r0, [r1]
	b _080BD9C4
_080BD85C:
	movs r0, #4
	ands r0, r3
	cmp r0, #0
	beq _080BD878
	ldr r0, _080BD8C4  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080BD878
	ldr r0, [r6, #0x54]
	adds r0, #2
	str r0, [r6, #0x54]
_080BD878:
	ldr r0, [r6, #0x54]
	adds r2, r0, #1
	str r2, [r6, #0x54]
	ldr r0, [r6, #0x50]
	cmp r2, r0
	bge _080BD8CC
	adds r0, r6, #0
	adds r0, #0x2a
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _080BD8C8  @ gUnknown_0201B3A4
	adds r0, r0, r1
	lsls r1, r2, #0xc
	add r4, sp, #8
	adds r2, r4, #0
	bl sub_800A950
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, r6, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldr r2, [sp, #8]
	asrs r2, r2, #4
	ldr r3, [r4, #4]
	asrs r3, r3, #4
	adds r3, #6
	bl MapUnitC_SetPosition
	adds r0, r6, #0
	bl sub_80BD740
	b _080BD9C4
	.align 2, 0
_080BD8C4: .4byte gKeyStatusPtr
_080BD8C8: .4byte gUnknown_0201B3A4
_080BD8CC:
	adds r0, r6, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #5
	ldr r2, _080BD9D0  @ gUnknown_082060B0
	adds r0, r0, r2
	ldrb r1, [r0, #0x1e]
	movs r3, #1
	adds r0, r3, #0
	ands r0, r1
	adds r4, r6, #0
	adds r4, #0x2b
	adds r5, r6, #0
	adds r5, #0x2e
	cmp r0, #0
	beq _080BD910
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #5
	adds r0, r0, r2
	ldrb r1, [r0, #0x1e]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq _080BD910
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r2, #0
	bl sub_80BB0E0
_080BD910:
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r3, #0
	ldrsb r3, [r5, r3]
	lsls r3, r3, #5
	ldr r2, _080BD9D0  @ gUnknown_082060B0
	adds r3, r3, r2
	movs r7, #0x18
	ldrsh r2, [r3, r7]
	movs r7, #0x1a
	ldrsh r3, [r3, r7]
	adds r3, #6
	bl MapUnitC_SetPosition
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #0x10
	ands r0, r1
	adds r7, r2, #0
	cmp r0, #0
	beq _080BD95C
	adds r2, #9
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	blt _080BD95C
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl MapUnitC_SetTCSAnim
_080BD95C:
	ldr r0, _080BD9D4  @ gUnknown_03005280
	mov r8, r0
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	add r0, r8
	ldrb r1, [r5]
	strb r1, [r0, #0x11]
	ldrb r1, [r7]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080BD9B4
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	mov r4, sp
	adds r4, #2
	mov r2, sp
	adds r3, r4, #0
	bl sub_80BAF44
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r1, #0xe
	add r4, sp, #4
	mov r5, sp
	adds r5, #6
	adds r2, r4, #0
	adds r3, r5, #0
	bl GetWMCenteredCameraPosition
	ldrh r0, [r4]
	mov r4, r8
	strh r0, [r4, #2]
	ldrh r0, [r5]
	strh r0, [r4, #4]
_080BD9B4:
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	ldrb r1, [r7]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r7]
_080BD9C4:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BD9D0: .4byte gUnknown_082060B0
_080BD9D4: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BD9D8
sub_80BD9D8: @ 0x080BD9D8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x50]
	cmp r0, #0
	bge _080BDA2E
	adds r0, r4, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #5
	ldr r3, _080BDA74  @ gUnknown_082060B0
	adds r0, r0, r3
	movs r2, #0x18
	ldrsh r0, [r0, r2]
	adds r1, r4, #0
	adds r1, #0x48
	movs r5, #0
	ldrsh r1, [r1, r5]
	lsls r1, r1, #5
	adds r1, r1, r3
	movs r2, #0x18
	ldrsh r1, [r1, r2]
	subs r0, r0, r1
	adds r1, r4, #0
	adds r1, #0x4e
	movs r5, #0
	ldrsh r1, [r1, r5]
	lsls r1, r1, #5
	adds r1, r1, r3
	movs r2, #0x1a
	ldrsh r1, [r1, r2]
	adds r2, r4, #0
	adds r2, #0x4a
	movs r5, #0
	ldrsh r2, [r2, r5]
	lsls r2, r2, #5
	adds r2, r2, r3
	movs r3, #0x1a
	ldrsh r2, [r2, r3]
	subs r1, r1, r2
	bl sub_80BD41C
	str r0, [r4, #0x50]
_080BDA2E:
	movs r6, #0
	str r6, [r4, #0x54]
	ldr r0, [r4, #0x14]
	ldr r0, [r0, #0x4c]
	adds r5, r4, #0
	adds r5, #0x2b
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r2, r4, #0
	adds r2, #0x44
	adds r3, r4, #0
	adds r3, #0x46
	bl sub_80BAF44
	adds r2, r4, #0
	adds r2, #0x31
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	blt _080BDA68
	ldr r0, [r4, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r5, r1]
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl MapUnitC_SetTCSAnim
_080BDA68:
	adds r0, r4, #0
	adds r0, #0x40
	strh r6, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BDA74: .4byte gUnknown_082060B0

	THUMB_FUNC_START sub_80BDA78
sub_80BDA78: @ 0x080BDA78
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	adds r0, #0x29
	ldrb r3, [r0]
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _080BDA8C
	b _080BDBF4
_080BDA8C:
	adds r1, r7, #0
	adds r1, #0x42
	ldrh r2, [r1]
	movs r4, #0
	ldrsh r0, [r1, r4]
	cmp r0, #0
	ble _080BDAA0
	subs r0, r2, #1
	strh r0, [r1]
	b _080BDBF4
_080BDAA0:
	movs r0, #4
	ands r0, r3
	cmp r0, #0
	beq _080BDABC
	ldr r0, _080BDB50  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080BDABC
	ldr r0, [r7, #0x54]
	adds r0, #2
	str r0, [r7, #0x54]
_080BDABC:
	ldr r0, [r7, #0x54]
	adds r0, #1
	str r0, [r7, #0x54]
	ldr r1, [r7, #0x50]
	cmp r0, r1
	bge _080BDB54
	adds r2, r7, #0
	adds r2, #0x2f
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl sub_800B84C
	adds r5, r0, #0
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r7, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r4, r7, #0
	adds r4, #0x48
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r0, r0, r1
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	ldrh r1, [r4]
	adds r1, r1, r0
	mov r0, sp
	strh r1, [r0]
	adds r0, r7, #0
	adds r0, #0x4e
	movs r3, #0
	ldrsh r0, [r0, r3]
	adds r4, #2
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r0, r0, r1
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	ldrh r3, [r4]
	adds r3, r3, r0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r0, sp
	adds r0, #2
	strh r3, [r0]
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, r7, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	mov r2, sp
	movs r4, #0
	ldrsh r2, [r2, r4]
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	adds r3, #6
	bl MapUnitC_SetPosition
	adds r0, r7, #0
	bl sub_80BD740
	b _080BDBF4
	.align 2, 0
_080BDB50: .4byte gKeyStatusPtr
_080BDB54:
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	adds r4, r7, #0
	adds r4, #0x2b
	movs r1, #0
	ldrsb r1, [r4, r1]
	adds r2, r7, #0
	adds r2, #0x4c
	movs r5, #0
	ldrsh r2, [r2, r5]
	adds r3, r7, #0
	adds r3, #0x4e
	movs r5, #0
	ldrsh r3, [r3, r5]
	adds r3, #6
	bl MapUnitC_SetPosition
	adds r2, r7, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #0x10
	ands r0, r1
	adds r6, r2, #0
	cmp r0, #0
	beq _080BDBA2
	adds r2, #9
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	blt _080BDBA2
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl MapUnitC_SetTCSAnim
_080BDBA2:
	ldrb r1, [r6]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080BDBE4
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	mov r4, sp
	adds r4, #2
	mov r2, sp
	adds r3, r4, #0
	bl sub_80BAF44
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r1, #0xe
	add r4, sp, #4
	mov r5, sp
	adds r5, #6
	adds r2, r4, #0
	adds r3, r5, #0
	bl GetWMCenteredCameraPosition
	ldr r1, _080BDBFC  @ gUnknown_03005280
	ldrh r0, [r4]
	strh r0, [r1, #2]
	ldrh r0, [r5]
	strh r0, [r1, #4]
_080BDBE4:
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	ldrb r1, [r6]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r6]
_080BDBF4:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BDBFC: .4byte gUnknown_03005280

	THUMB_FUNC_START nullsub_49
nullsub_49: @ 0x080BDC00
	bx lr

	THUMB_FUNC_START MapMU_FillPrim
MapMU_FillPrim: @ 0x080BDC04
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x2c
	movs r5, #6
_080BDC0E:
	ldr r1, [r4, #0x14]
	ldr r0, _080BDC24  @ gUnknown_08A3E248
	bl Proc_Create
	stm r6!, {r0}
	subs r5, #1
	cmp r5, #0
	bge _080BDC0E
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BDC24: .4byte gUnknown_08A3E248

	THUMB_FUNC_START NewMapMU
NewMapMU: @ 0x080BDC28
	push {lr}
	adds r1, r0, #0
	ldr r0, _080BDC38  @ gUnknown_08A3E2C0
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080BDC38: .4byte gUnknown_08A3E2C0

	THUMB_FUNC_START MapMU_SetUnit
MapMU_SetUnit: @ 0x080BDC3C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov sl, r0
	adds r5, r1, #0
	adds r6, r3, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov r9, r2
	lsls r7, r5, #2
	adds r0, #0x2c
	adds r0, r0, r7
	ldr r4, [r0]
	movs r0, #0x2a
	adds r0, r0, r4
	mov r8, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	blt _080BDC70
	mov r0, sl
	bl MapMU_RemoveUnit
_080BDC70:
	mov r1, r8
	strb r5, [r1]
	mov r2, r9
	cmp r2, #0
	beq _080BDC98
	adds r0, r4, #0
	adds r1, r6, #0
	ldr r2, [sp, #0x24]
	bl MapMUPrim_MakeUnitForClass
	ldr r0, _080BDC94  @ gUnknown_03005280
	adds r0, r7, r0
	strh r6, [r0, #0x12]
	ldrb r1, [r0, #0x10]
	movs r2, #2
	orrs r1, r2
	b _080BDCAE
	.align 2, 0
_080BDC94: .4byte gUnknown_03005280
_080BDC98:
	adds r0, r4, #0
	adds r1, r6, #0
	ldr r2, [sp, #0x24]
	bl MapMUPrim_MakeUnitForChar
	ldr r0, _080BDD24  @ gUnknown_03005280
	adds r0, r7, r0
	strh r6, [r0, #0x12]
	ldrb r2, [r0, #0x10]
	movs r1, #0xfd
	ands r1, r2
_080BDCAE:
	strb r1, [r0, #0x10]
	ldr r1, _080BDD24  @ gUnknown_03005280
	lsls r0, r5, #2
	adds r0, r0, r1
	add r1, sp, #0x24
	ldrb r1, [r1]
	strb r1, [r0, #0x11]
	ldr r2, [sp, #0x20]
	cmp r2, #0
	bge _080BDCCA
	adds r0, r5, #0
	bl sub_80BD20C
	str r0, [sp, #0x20]
_080BDCCA:
	ldr r0, [r4, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, r4, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldr r2, [sp, #0x20]
	bl MapUnitC_SetAllegienceColorIndex
	adds r1, r4, #0
	adds r1, #0x40
	movs r2, #0
	movs r0, #0
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2c
	strb r2, [r0]
	adds r2, r4, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	strb r0, [r2]
	ldr r0, _080BDD28  @ gUnknown_08A3E2F0
	adds r0, r5, r0
	ldrb r2, [r0]
	mov r0, sl
	adds r1, r5, #0
	bl MapMU_SetUnitTCSOAMIndex
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BDD24: .4byte gUnknown_03005280
_080BDD28: .4byte gUnknown_08A3E2F0

	THUMB_FUNC_START MapMU_RemoveUnit
MapMU_RemoveUnit: @ 0x080BDD2C
	push {r4, r5, lr}
	adds r5, r1, #0
	lsls r4, r5, #2
	adds r0, #0x2c
	adds r0, r0, r4
	ldr r1, [r0]
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	blt _080BDD8A
	adds r2, r1, #0
	adds r2, #0x2a
	movs r0, #0xff
	strb r0, [r2]
	adds r0, r1, #0
	bl MapMUPrim_RemoveLinkedMapUnit
	ldr r0, _080BDD70  @ gUnknown_03005280
	adds r1, r4, r0
	ldrb r2, [r1, #0x10]
	movs r0, #2
	ands r0, r2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	beq _080BDD74
	movs r0, #0
	strh r0, [r1, #0x12]
	movs r0, #2
	orrs r0, r2
	b _080BDD7A
	.align 2, 0
_080BDD70: .4byte gUnknown_03005280
_080BDD74:
	strh r0, [r1, #0x12]
	movs r0, #0xfd
	ands r0, r2
_080BDD7A:
	strb r0, [r1, #0x10]
	ldr r0, _080BDD90  @ gUnknown_03005280
	lsls r1, r5, #2
	adds r1, r1, r0
	ldrb r2, [r1, #0x10]
	movs r0, #0xfe
	ands r0, r2
	strb r0, [r1, #0x10]
_080BDD8A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BDD90: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BDD94
sub_80BDD94: @ 0x080BDD94
	push {r4, r5, lr}
	adds r2, r0, #0
	cmp r1, #0
	blt _080BDDAC
	lsls r0, r1, #2
	adds r1, r2, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r0, [r1]
	bl MapMUPrim_RemoveLinkedMapUnit
	b _080BDDBE
_080BDDAC:
	adds r5, r2, #0
	adds r5, #0x2c
	movs r4, #6
_080BDDB2:
	ldm r5!, {r0}
	bl MapMUPrim_RemoveLinkedMapUnit
	subs r4, #1
	cmp r4, #0
	bge _080BDDB2
_080BDDBE:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BDDC4
sub_80BDDC4: @ 0x080BDDC4
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	cmp r1, #0
	blt _080BDDF8
	lsls r4, r1, #2
	adds r0, #0x2c
	adds r0, r0, r4
	ldr r1, [r0]
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r2, #1
	bl sub_80BAFA4
	ldr r0, _080BDDF4  @ gUnknown_03005280
	adds r4, r4, r0
	ldrb r1, [r4, #0x10]
	movs r0, #1
	orrs r0, r1
	strb r0, [r4, #0x10]
	b _080BDE30
	.align 2, 0
_080BDDF4: .4byte gUnknown_03005280
_080BDDF8:
	movs r6, #0
	adds r4, r7, #0
	adds r4, #0x2c
_080BDDFE:
	lsls r5, r6, #2
	ldr r1, [r4]
	adds r1, #0x2b
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt _080BDE28
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r2, #1
	bl sub_80BAFA4
	ldr r1, _080BDE38  @ gUnknown_03005280
	adds r1, r5, r1
	ldrb r2, [r1, #0x10]
	movs r0, #1
	orrs r0, r2
	strb r0, [r1, #0x10]
_080BDE28:
	adds r4, #4
	adds r6, #1
	cmp r6, #6
	ble _080BDDFE
_080BDE30:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BDE38: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BDE3C
sub_80BDE3C: @ 0x080BDE3C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	cmp r1, #0
	blt _080BDE70
	lsls r4, r1, #2
	adds r0, #0x2c
	adds r0, r0, r4
	ldr r1, [r0]
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r2, #0
	bl sub_80BAFA4
	ldr r0, _080BDE6C  @ gUnknown_03005280
	adds r4, r4, r0
	ldrb r1, [r4, #0x10]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r4, #0x10]
	b _080BDEA8
	.align 2, 0
_080BDE6C: .4byte gUnknown_03005280
_080BDE70:
	movs r5, #0
	adds r4, r7, #0
	adds r4, #0x2c
_080BDE76:
	lsls r6, r5, #2
	ldr r1, [r4]
	adds r1, #0x2b
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt _080BDEA0
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r2, #0
	bl sub_80BAFA4
	ldr r1, _080BDEB0  @ gUnknown_03005280
	adds r1, r6, r1
	ldrb r2, [r1, #0x10]
	movs r0, #0xfe
	ands r0, r2
	strb r0, [r1, #0x10]
_080BDEA0:
	adds r4, #4
	adds r5, #1
	cmp r5, #6
	ble _080BDE76
_080BDEA8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BDEB0: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BDEB4
sub_80BDEB4: @ 0x080BDEB4
	push {r4, r5, r6, lr}
	adds r6, r1, #0
	ldrb r1, [r6]
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r5, [r0]
	ldrh r0, [r6, #6]
	adds r2, r5, #0
	adds r2, #0x2d
	strb r0, [r2]
	ldrh r0, [r6, #8]
	adds r1, r5, #0
	adds r1, #0x2e
	strb r0, [r1]
	ldr r0, [r6, #0xc]
	cmp r0, #0
	bge _080BDF1A
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsls r0, r0, #5
	ldr r1, _080BDFA0  @ gUnknown_082060B0
	adds r4, r0, r1
	movs r0, #0x18
	ldrsh r3, [r4, r0]
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsls r0, r0, #5
	adds r2, r0, r1
	movs r0, #0x18
	ldrsh r1, [r2, r0]
	subs r0, r3, r1
	cmp r0, #0
	bge _080BDEFA
	subs r0, r1, r3
_080BDEFA:
	movs r1, #0x1a
	ldrsh r3, [r4, r1]
	movs r1, #0x1a
	ldrsh r2, [r2, r1]
	subs r1, r3, r2
	cmp r1, #0
	bge _080BDF0A
	subs r1, r2, r3
_080BDF0A:
	bl sub_80BD41C
	adds r1, r0, #0
	ldr r0, [r6, #0xc]
	cmp r0, #0
	bge _080BDF18
	negs r0, r0
_080BDF18:
	muls r0, r1, r0
_080BDF1A:
	str r0, [r5, #0x50]
	ldrb r0, [r6, #1]
	movs r1, #0x29
	adds r1, r1, r5
	mov ip, r1
	movs r4, #1
	movs r2, #1
	adds r1, r2, #0
	ands r1, r0
	lsls r1, r1, #2
	mov r0, ip
	ldrb r3, [r0]
	movs r0, #5
	negs r0, r0
	ands r0, r3
	orrs r0, r1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r6, #0xa]
	adds r1, r5, #0
	adds r1, #0x42
	movs r3, #0
	strh r0, [r1]
	mov r1, ip
	ldrb r0, [r1]
	orrs r0, r4
	movs r1, #3
	negs r1, r1
	ands r0, r1
	mov r1, ip
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2c
	strb r2, [r0]
	ldrb r0, [r1]
	movs r1, #0x10
	orrs r0, r1
	mov r1, ip
	strb r0, [r1]
	ldrb r1, [r6, #2]
	ands r2, r1
	lsls r2, r2, #5
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	orrs r0, r2
	mov r1, ip
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x30
	strb r3, [r0]
	ldrb r0, [r6, #3]
	adds r1, r5, #0
	adds r1, #0x31
	strb r0, [r1]
	ldrb r0, [r6, #4]
	adds r2, r5, #0
	adds r2, #0x32
	strb r0, [r2]
	adds r0, r5, #0
	movs r1, #1
	bl Proc_GotoLabel
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BDFA0: .4byte gUnknown_082060B0

	THUMB_FUNC_START sub_80BDFA4
sub_80BDFA4: @ 0x080BDFA4
	push {r4, r5, r6, r7, lr}
	ldrb r2, [r1]
	lsls r2, r2, #2
	adds r0, #0x2c
	adds r0, r0, r2
	ldr r0, [r0]
	mov ip, r0
	ldrh r2, [r1, #6]
	adds r0, #0x48
	movs r6, #0
	strh r2, [r0]
	ldrh r0, [r1, #8]
	mov r2, ip
	adds r2, #0x4a
	strh r0, [r2]
	ldrh r2, [r1, #0xa]
	mov r0, ip
	adds r0, #0x4c
	strh r2, [r0]
	ldrh r0, [r1, #0xc]
	mov r2, ip
	adds r2, #0x4e
	strh r0, [r2]
	ldr r0, [r1, #0x10]
	mov r2, ip
	str r0, [r2, #0x50]
	ldrb r0, [r1, #2]
	mov r7, ip
	adds r7, #0x29
	movs r5, #1
	movs r4, #1
	adds r2, r4, #0
	ands r2, r0
	lsls r2, r2, #2
	ldrb r3, [r7]
	movs r0, #5
	negs r0, r0
	ands r0, r3
	orrs r0, r2
	strb r0, [r7]
	ldrb r0, [r1, #1]
	mov r2, ip
	adds r2, #0x2f
	strb r0, [r2]
	ldrh r0, [r1, #0xe]
	adds r2, #0x13
	strh r0, [r2]
	ldrb r0, [r7]
	orrs r0, r5
	movs r2, #3
	negs r2, r2
	ands r0, r2
	strb r0, [r7]
	mov r2, ip
	adds r2, #0x2c
	movs r0, #2
	strb r0, [r2]
	ldrb r0, [r7]
	movs r2, #0x10
	orrs r0, r2
	strb r0, [r7]
	ldrb r2, [r1, #3]
	ands r4, r2
	lsls r4, r4, #5
	movs r2, #0x21
	negs r2, r2
	ands r0, r2
	orrs r0, r4
	strb r0, [r7]
	mov r0, ip
	adds r0, #0x30
	strb r6, [r0]
	ldrb r0, [r1, #4]
	mov r2, ip
	adds r2, #0x31
	strb r0, [r2]
	ldrb r0, [r1, #5]
	mov r1, ip
	adds r1, #0x32
	strb r0, [r1]
	mov r0, ip
	movs r1, #2
	bl Proc_GotoLabel
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE054
sub_80BE054: @ 0x080BE054
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r1, [r0]
	adds r1, #0x29
	ldrb r0, [r1]
	movs r2, #2
	orrs r0, r2
	strb r0, [r1]
	bx lr

	THUMB_FUNC_START sub_80BE068
sub_80BE068: @ 0x080BE068
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r1, [r0]
	adds r1, #0x29
	ldrb r2, [r1]
	movs r0, #3
	negs r0, r0
	ands r0, r2
	strb r0, [r1]
	bx lr

	THUMB_FUNC_START sub_80BE080
sub_80BE080: @ 0x080BE080
	push {lr}
	lsls r1, r1, #2
	adds r3, r0, #0
	adds r3, #0x2c
	adds r3, r3, r1
	ldr r1, [r3]
	ldr r0, [r0, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl sub_80BAFE0
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE0A4
sub_80BE0A4: @ 0x080BE0A4
	push {r4, lr}
	lsls r1, r1, #2
	adds r4, r0, #0
	adds r4, #0x2c
	adds r4, r4, r1
	ldr r1, [r4]
	ldr r0, [r0, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_80BAF44
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE0C8
sub_80BE0C8: @ 0x080BE0C8
	push {lr}
	lsls r1, r1, #2
	adds r2, r0, #0
	adds r2, #0x2c
	adds r2, r2, r1
	ldr r1, [r2]
	ldr r0, [r0, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_80BB008
	pop {r1}
	bx r1

	THUMB_FUNC_START MapMU_SetUnitTCSOAMIndex
MapMU_SetUnitTCSOAMIndex: @ 0x080BE0E8
	push {lr}
	lsls r1, r1, #2
	adds r3, r0, #0
	adds r3, #0x2c
	adds r3, r3, r1
	ldr r1, [r3]
	ldr r0, [r0, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl MapUnitC_SetTCSOAMIndex
	pop {r0}
	bx r0

	THUMB_FUNC_START MapMU_80BE108
MapMU_80BE108: @ 0x080BE108
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r1, [r0]
	adds r1, #0x29
	movs r0, #1
	ands r2, r0
	lsls r2, r2, #3
	ldrb r3, [r1]
	movs r0, #9
	negs r0, r0
	ands r0, r3
	orrs r0, r2
	strb r0, [r1]
	bx lr

	THUMB_FUNC_START sub_80BE12C
sub_80BE12C: @ 0x080BE12C
	push {r4, lr}
	adds r2, r0, #0
	cmp r1, #0
	bge _080BE162
	movs r3, #0
	movs r4, #1
	adds r2, #0x2c
_080BE13A:
	ldr r1, [r2]
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	blt _080BE158
	adds r0, r1, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	bne _080BE186
_080BE158:
	adds r2, #4
	adds r3, #1
	cmp r3, #6
	ble _080BE13A
	b _080BE18A
_080BE162:
	lsls r0, r1, #2
	adds r1, r2, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r1, [r1]
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	blt _080BE18A
	adds r0, r1, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	b _080BE18C
_080BE186:
	movs r0, #1
	b _080BE18C
_080BE18A:
	movs r0, #0
_080BE18C:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BE194
sub_80BE194: @ 0x080BE194
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x29
	ldrb r1, [r5]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080BE1AE
	b _080BE31E
_080BE1AE:
	adds r0, r6, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	cmp r2, #1
	beq _080BE1C0
	cmp r2, #2
	beq _080BE298
	adds r7, r5, #0
	b _080BE30C
_080BE1C0:
	adds r0, r6, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #5
	ldr r3, _080BE290  @ gUnknown_082060B0
	adds r0, r0, r3
	ldrb r1, [r0, #0x1e]
	adds r0, r2, #0
	ands r0, r1
	adds r5, r6, #0
	adds r5, #0x2e
	adds r4, r6, #0
	adds r4, #0x2b
	cmp r0, #0
	beq _080BE200
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #5
	adds r0, r0, r3
	ldrb r0, [r0, #0x1e]
	ands r2, r0
	cmp r2, #0
	beq _080BE200
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r2, #0
	bl sub_80BB0E0
_080BE200:
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r3, #0
	ldrsb r3, [r5, r3]
	lsls r3, r3, #5
	ldr r2, _080BE290  @ gUnknown_082060B0
	adds r3, r3, r2
	movs r7, #0x18
	ldrsh r2, [r3, r7]
	movs r7, #0x1a
	ldrsh r3, [r3, r7]
	adds r3, #6
	bl MapUnitC_SetPosition
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r2, #4
	bl MapUnitC_SetTCSAnim
	ldr r0, _080BE294  @ gUnknown_03005280
	mov r8, r0
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	add r0, r8
	ldrb r1, [r5]
	strb r1, [r0, #0x11]
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #8
	ands r0, r1
	adds r7, r2, #0
	cmp r0, #0
	beq _080BE30C
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	mov r4, sp
	adds r4, #2
	mov r2, sp
	adds r3, r4, #0
	bl sub_80BAF44
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r1, #0xe
	add r4, sp, #4
	mov r5, sp
	adds r5, #6
	adds r2, r4, #0
	adds r3, r5, #0
	bl GetWMCenteredCameraPosition
	ldrh r0, [r4]
	mov r3, r8
	strh r0, [r3, #2]
	ldrh r0, [r5]
	strh r0, [r3, #4]
	b _080BE30C
	.align 2, 0
_080BE290: .4byte gUnknown_082060B0
_080BE294: .4byte gUnknown_03005280
_080BE298:
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	adds r4, r6, #0
	adds r4, #0x2b
	movs r1, #0
	ldrsb r1, [r4, r1]
	adds r2, r6, #0
	adds r2, #0x4c
	movs r7, #0
	ldrsh r2, [r2, r7]
	adds r3, r6, #0
	adds r3, #0x4e
	movs r7, #0
	ldrsh r3, [r3, r7]
	adds r3, #6
	bl MapUnitC_SetPosition
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r2, #4
	bl MapUnitC_SetTCSAnim
	ldrb r1, [r5]
	movs r0, #8
	ands r0, r1
	adds r7, r5, #0
	cmp r0, #0
	beq _080BE30C
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	mov r4, sp
	adds r4, #2
	mov r2, sp
	adds r3, r4, #0
	bl sub_80BAF44
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r1, #0xe
	add r4, sp, #4
	mov r5, sp
	adds r5, #6
	adds r2, r4, #0
	adds r3, r5, #0
	bl GetWMCenteredCameraPosition
	ldr r1, _080BE32C  @ gUnknown_03005280
	ldrh r0, [r4]
	strh r0, [r1, #2]
	ldrh r0, [r5]
	strh r0, [r1, #4]
_080BE30C:
	ldrb r1, [r7]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r7]
	adds r0, r6, #0
	movs r1, #0
	bl Proc_GotoLabel
_080BE31E:
	movs r0, #0
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080BE32C: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BE330
sub_80BE330: @ 0x080BE330
	push {r4, r5, lr}
	cmp r1, #0
	bge _080BE34A
	adds r5, r0, #0
	adds r5, #0x2c
	movs r4, #6
_080BE33C:
	ldm r5!, {r0}
	bl sub_80BE194
	subs r4, #1
	cmp r4, #0
	bge _080BE33C
	b _080BE356
_080BE34A:
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	bl sub_80BE194
_080BE356:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE35C
sub_80BE35C: @ 0x080BE35C
	push {r4, r5, r6, lr}
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r6, [r0]
	lsls r2, r2, #0x10
	lsls r3, r3, #0x10
	movs r0, #0xc0
	lsls r0, r0, #0xb
	adds r3, r3, r0
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, r6, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsrs r4, r2, #0x10
	asrs r2, r2, #0x10
	lsrs r5, r3, #0x10
	asrs r3, r3, #0x10
	bl MapUnitC_SetPosition
	adds r0, r6, #0
	adds r0, #0x44
	movs r1, #0
	strh r4, [r0]
	adds r0, #2
	strh r5, [r0]
	subs r0, #6
	strh r1, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE3A0
sub_80BE3A0: @ 0x080BE3A0
	push {r4, lr}
	adds r4, r3, #0
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_80BAF44
	ldrh r0, [r4]
	subs r0, #6
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE3C8
sub_80BE3C8: @ 0x080BE3C8
	push {r4, lr}
	lsls r3, r2, #5
	ldr r2, _080BE3E4  @ gUnknown_082060B0
	adds r3, r3, r2
	movs r4, #0x18
	ldrsh r2, [r3, r4]
	movs r4, #0x1a
	ldrsh r3, [r3, r4]
	bl sub_80BE35C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BE3E4: .4byte gUnknown_082060B0

	THUMB_FUNC_START sub_80BE3E8
sub_80BE3E8: @ 0x080BE3E8
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r1, [r0]
	adds r1, #0x29
	movs r0, #1
	ands r2, r0
	lsls r2, r2, #2
	ldrb r3, [r1]
	movs r0, #5
	negs r0, r0
	ands r0, r3
	orrs r0, r2
	strb r0, [r1]
	bx lr

	THUMB_FUNC_START sub_80BE40C
sub_80BE40C: @ 0x080BE40C
	push {lr}
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r2, #0
	movs r2, #0
	bl sub_80BB4C0
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE42C
sub_80BE42C: @ 0x080BE42C
	push {lr}
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r2, #0
	movs r2, #0
	bl sub_80BB538
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE44C
sub_80BE44C: @ 0x080BE44C
	push {lr}
	bl sub_80BB48C
	cmp r0, #0
	beq _080BE458
	movs r0, #1
_080BE458:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BE45C
sub_80BE45C: @ 0x080BE45C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, r6, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_80BB194
	adds r4, r0, #0
	bl GetClassData
	ldr r0, [r0, #0x28]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080BE4AC
	cmp r4, #0x1f
	blt _080BE4A4
	cmp r4, #0x24
	ble _080BE49C
	cmp r4, #0x49
	bgt _080BE4A4
	cmp r4, #0x48
	blt _080BE4A4
	ldr r4, _080BE498  @ gUnknown_08A3E3BA
	b _080BE4E6
	.align 2, 0
_080BE498: .4byte gUnknown_08A3E3BA
_080BE49C:
	ldr r4, _080BE4A0  @ gUnknown_08A3E38E
	b _080BE4E6
	.align 2, 0
_080BE4A0: .4byte gUnknown_08A3E38E
_080BE4A4:
	ldr r4, _080BE4A8  @ gUnknown_08A3E360
	b _080BE4E6
	.align 2, 0
_080BE4A8: .4byte gUnknown_08A3E360
_080BE4AC:
	cmp r4, #0x65
	beq _080BE4D4
	cmp r4, #0x65
	bgt _080BE4CC
	cmp r4, #0x3c
	bgt _080BE4C6
	cmp r4, #0x3b
	bge _080BE4D4
	cmp r4, #0xc
	bgt _080BE4E4
	cmp r4, #9
	blt _080BE4E4
	b _080BE4D4
_080BE4C6:
	cmp r4, #0x50
	beq _080BE4DC
	b _080BE4E4
_080BE4CC:
	cmp r4, #0x69
	bgt _080BE4E4
	cmp r4, #0x67
	blt _080BE4E4
_080BE4D4:
	ldr r4, _080BE4D8  @ gUnknown_08A3E31C
	b _080BE4E6
	.align 2, 0
_080BE4D8: .4byte gUnknown_08A3E31C
_080BE4DC:
	ldr r4, _080BE4E0  @ gUnknown_08A3E412
	b _080BE4E6
	.align 2, 0
_080BE4E0: .4byte gUnknown_08A3E412
_080BE4E4:
	ldr r4, _080BE528  @ gUnknown_08A3E2F8
_080BE4E6:
	adds r2, r6, #0
	adds r2, #0x30
	ldrb r0, [r2]
	adds r1, r0, #1
	strb r1, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrh r1, [r4]
	bl DivRem
	ldr r1, _080BE52C  @ 0xFFFF0000
	ands r5, r1
	movs r1, #0x78
	orrs r5, r1
	ldr r1, _080BE530  @ 0x0000FFFF
	ands r5, r1
	movs r1, #0xa0
	lsls r1, r1, #0xf
	orrs r5, r1
	lsls r0, r0, #1
	adds r1, r0, r4
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq _080BE520
	ldrh r1, [r4, #2]
	lsls r2, r5, #0x10
	asrs r2, r2, #0x10
	bl MU_StartStepSfx
_080BE520:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BE528: .4byte gUnknown_08A3E2F8
_080BE52C: .4byte 0xFFFF0000
_080BE530: .4byte 0x0000FFFF

	THUMB_FUNC_START MapMU_SetUnitClass
MapMU_SetUnitClass: @ 0x080BE534
	push {r4, lr}
	sub sp, #8
	adds r4, r2, #0
	ldr r2, [sp, #0x10]
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #1
	adds r3, r4, #0
	bl MapMU_SetUnit
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START MapMU_SetUnitChar
MapMU_SetUnitChar: @ 0x080BE550
	push {r4, lr}
	sub sp, #8
	adds r4, r2, #0
	ldr r2, [sp, #0x10]
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #0
	adds r3, r4, #0
	bl MapMU_SetUnit
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE56C
sub_80BE56C: @ 0x080BE56C
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2c
	movs r1, #6
	bl Text_Allocate
	movs r1, #0
	str r1, [r4, #0x58]
	adds r0, r4, #0
	adds r0, #0x56
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE594
sub_80BE594: @ 0x080BE594
	push {lr}
	cmp r0, #0
	bge _080BE5A6
	cmp r1, #0
	bge _080BE5A2
	movs r0, #0
	b _080BE5B0
_080BE5A2:
	movs r0, #1
	b _080BE5B0
_080BE5A6:
	cmp r1, #0
	blt _080BE5AE
	movs r0, #3
	b _080BE5B0
_080BE5AE:
	movs r0, #2
_080BE5B0:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BE5B4
sub_80BE5B4: @ 0x080BE5B4
	push {lr}
	cmp r0, #0x40
	beq _080BE5DC
	cmp r0, #0x40
	bgt _080BE5C4
	cmp r0, #0
	beq _080BE5CA
	b _080BE5E4
_080BE5C4:
	cmp r0, #0x80
	beq _080BE5D4
	b _080BE5E4
_080BE5CA:
	ldr r0, _080BE5D0  @ gUnknown_08A98E2C
	b _080BE5E6
	.align 2, 0
_080BE5D0: .4byte gUnknown_08A98E2C
_080BE5D4:
	ldr r0, _080BE5D8  @ gUnknown_08A98E4C
	b _080BE5E6
	.align 2, 0
_080BE5D8: .4byte gUnknown_08A98E4C
_080BE5DC:
	ldr r0, _080BE5E0  @ gUnknown_08A98E6C
	b _080BE5E6
	.align 2, 0
_080BE5E0: .4byte gUnknown_08A98E6C
_080BE5E4:
	ldr r0, _080BE5F4  @ gUnknown_08A98E8C
_080BE5E6:
	lsls r1, r1, #5
	movs r2, #0x20
	bl CopyToPaletteBuffer
	pop {r0}
	bx r0
	.align 2, 0
_080BE5F4: .4byte gUnknown_08A98E8C

	THUMB_FUNC_START sub_80BE5F8
sub_80BE5F8: @ 0x080BE5F8
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r2, #0xc0
	lsls r2, r2, #1
	adds r0, r2, #0
	strh r0, [r5]
	adds r2, #1
	adds r0, r2, #0
	strh r0, [r5, #2]
	movs r4, #8
	ldrsb r4, [r1, r4]
	cmp r4, #9
	ble _080BE622
	adds r0, r4, #0
	movs r1, #0xa
	bl __divsi3
	movs r1, #0xc4
	lsls r1, r1, #1
	adds r0, r0, r1
	strh r0, [r5, #4]
_080BE622:
	adds r0, r4, #0
	movs r1, #0xa
	bl __modsi3
	movs r2, #0xc4
	lsls r2, r2, #1
	adds r0, r0, r2
	strh r0, [r5, #6]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE638
sub_80BE638: @ 0x080BE638
	push {lr}
	adds r2, r0, #0
	adds r3, r1, #0
	adds r0, #0x44
	ldrh r1, [r0]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _080BE658
	ldr r0, [r2, #0x40]
	adds r1, r3, #0
	bl sub_80BE5F8
	movs r0, #1
	bl BG_EnableSyncByMask
_080BE658:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE65C
sub_80BE65C: @ 0x080BE65C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r1, #0
	ldr r1, _080BE688  @ gUnknown_08A3E448
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r1, #2
	ldrsb r1, [r0, r1]
	mov sl, r1
	ldrb r0, [r0, #3]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp]
	cmp r2, #0
	beq _080BE68C
	cmp r2, #1
	beq _080BE694
	b _080BE69C
	.align 2, 0
_080BE688: .4byte gUnknown_08A3E448
_080BE68C:
	movs r0, #0xd
	mov r9, r0
	movs r1, #4
	b _080BE69A
_080BE694:
	movs r0, #0xd
	mov r9, r0
	movs r1, #9
_080BE69A:
	mov r8, r1
_080BE69C:
	mov r0, sl
	cmp r0, #0
	bge _080BE6EC
	ldr r1, [sp]
	cmp r1, #0
	bge _080BE6EC
	ldr r5, _080BE800  @ gBG1TilemapBuffer
	adds r0, r5, #0
	mov r1, r9
	mov r2, r8
	movs r3, #0
	bl TileMap_FillRect
	ldr r6, _080BE804  @ gBG0TilemapBuffer
	adds r0, r6, #0
	mov r1, r9
	mov r2, r8
	movs r3, #0
	bl TileMap_FillRect
	adds r4, r7, #0
	subs r4, #0xa
	mov r0, r8
	subs r4, r0, r4
	lsls r4, r4, #6
	ldr r0, _080BE808  @ gUnknown_0201B958
	adds r0, r4, r0
	adds r1, r5, #0
	mov r2, r9
	adds r3, r7, #0
	bl TileMap_CopyRect
	ldr r0, _080BE80C  @ gUnknown_0201B458
	adds r4, r4, r0
	adds r0, r4, #0
	adds r1, r6, #0
	mov r2, r9
	adds r3, r7, #0
	bl TileMap_CopyRect
_080BE6EC:
	mov r1, sl
	cmp r1, #0
	ble _080BE746
	ldr r0, [sp]
	cmp r0, #0
	bge _080BE746
	movs r5, #0x1e
	mov r1, r9
	subs r5, r5, r1
	lsls r5, r5, #1
	ldr r6, _080BE800  @ gBG1TilemapBuffer
	adds r6, r5, r6
	adds r0, r6, #0
	mov r2, r8
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _080BE804  @ gBG0TilemapBuffer
	adds r5, r5, r0
	adds r0, r5, #0
	mov r1, r9
	mov r2, r8
	movs r3, #0
	bl TileMap_FillRect
	adds r4, r7, #0
	subs r4, #0xa
	mov r0, r8
	subs r4, r0, r4
	lsls r4, r4, #6
	ldr r0, _080BE808  @ gUnknown_0201B958
	adds r0, r4, r0
	adds r1, r6, #0
	mov r2, r9
	adds r3, r7, #0
	bl TileMap_CopyRect
	ldr r0, _080BE80C  @ gUnknown_0201B458
	adds r4, r4, r0
	adds r0, r4, #0
	adds r1, r5, #0
	mov r2, r9
	adds r3, r7, #0
	bl TileMap_CopyRect
_080BE746:
	mov r1, sl
	cmp r1, #0
	bge _080BE798
	ldr r0, [sp]
	cmp r0, #0
	ble _080BE798
	ldr r5, _080BE810  @ gUnknown_020238A8
	adds r0, r5, #0
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TileMap_FillRect
	ldr r6, _080BE814  @ gUnknown_020230A8
	adds r0, r6, #0
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _080BE818  @ gUnknown_0201BBD8
	movs r4, #0x16
	subs r4, r4, r7
	lsls r4, r4, #6
	ldr r1, _080BE81C  @ 0xFFFFFC00
	adds r5, r5, r1
	adds r5, r4, r5
	adds r1, r5, #0
	movs r2, #0xd
	adds r3, r7, #0
	bl TileMap_CopyRect
	ldr r0, _080BE820  @ gUnknown_0201B758
	ldr r1, _080BE81C  @ 0xFFFFFC00
	adds r6, r6, r1
	adds r4, r4, r6
	adds r1, r4, #0
	movs r2, #0xd
	adds r3, r7, #0
	bl TileMap_CopyRect
_080BE798:
	mov r0, sl
	cmp r0, #0
	ble _080BE7EA
	ldr r1, [sp]
	cmp r1, #0
	ble _080BE7EA
	ldr r5, _080BE824  @ gUnknown_020238CA
	adds r0, r5, #0
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TileMap_FillRect
	ldr r6, _080BE828  @ gUnknown_020230CA
	adds r0, r6, #0
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _080BE818  @ gUnknown_0201BBD8
	movs r4, #0x16
	subs r4, r4, r7
	lsls r4, r4, #6
	ldr r1, _080BE81C  @ 0xFFFFFC00
	adds r5, r5, r1
	adds r5, r4, r5
	adds r1, r5, #0
	movs r2, #0xd
	adds r3, r7, #0
	bl TileMap_CopyRect
	ldr r0, _080BE820  @ gUnknown_0201B758
	ldr r1, _080BE81C  @ 0xFFFFFC00
	adds r6, r6, r1
	adds r4, r4, r6
	adds r1, r4, #0
	movs r2, #0xd
	adds r3, r7, #0
	bl TileMap_CopyRect
_080BE7EA:
	movs r0, #3
	bl BG_EnableSyncByMask
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BE800: .4byte gBG1TilemapBuffer
_080BE804: .4byte gBG0TilemapBuffer
_080BE808: .4byte gUnknown_0201B958
_080BE80C: .4byte gUnknown_0201B458
_080BE810: .4byte gUnknown_020238A8
_080BE814: .4byte gUnknown_020230A8
_080BE818: .4byte gUnknown_0201BBD8
_080BE81C: .4byte 0xFFFFFC00
_080BE820: .4byte gUnknown_0201B758
_080BE824: .4byte gUnknown_020238CA
_080BE828: .4byte gUnknown_020230CA

	THUMB_FUNC_START sub_80BE82C
sub_80BE82C: @ 0x080BE82C
	push {r4, r5, lr}
	ldr r1, _080BE8C4  @ gUnknown_08A3E448
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r4, #2
	ldrsb r4, [r0, r4]
	movs r5, #3
	ldrsb r5, [r0, r5]
	cmp r4, #0
	bge _080BE85C
	cmp r5, #0
	bge _080BE85C
	ldr r0, _080BE8C8  @ gBG1TilemapBuffer
	movs r1, #0xd
	movs r2, #9
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _080BE8CC  @ gBG0TilemapBuffer
	movs r1, #0xd
	movs r2, #9
	movs r3, #0
	bl TileMap_FillRect
_080BE85C:
	cmp r4, #0
	ble _080BE87C
	cmp r5, #0
	bge _080BE87C
	ldr r0, _080BE8D0  @ gUnknown_020234CA
	movs r1, #0xd
	movs r2, #9
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _080BE8D4  @ gUnknown_02022CCA
	movs r1, #0xd
	movs r2, #9
	movs r3, #0
	bl TileMap_FillRect
_080BE87C:
	cmp r4, #0
	bge _080BE89C
	cmp r5, #0
	ble _080BE89C
	ldr r0, _080BE8D8  @ gUnknown_020238A8
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _080BE8DC  @ gUnknown_020230A8
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TileMap_FillRect
_080BE89C:
	cmp r4, #0
	ble _080BE8BC
	cmp r5, #0
	ble _080BE8BC
	ldr r0, _080BE8E0  @ gUnknown_020238CA
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _080BE8E4  @ gUnknown_020230CA
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TileMap_FillRect
_080BE8BC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BE8C4: .4byte gUnknown_08A3E448
_080BE8C8: .4byte gBG1TilemapBuffer
_080BE8CC: .4byte gBG0TilemapBuffer
_080BE8D0: .4byte gUnknown_020234CA
_080BE8D4: .4byte gUnknown_02022CCA
_080BE8D8: .4byte gUnknown_020238A8
_080BE8DC: .4byte gUnknown_020230A8
_080BE8E0: .4byte gUnknown_020238CA
_080BE8E4: .4byte gUnknown_020230CA

	THUMB_FUNC_START sub_80BE8E8
sub_80BE8E8: @ 0x080BE8E8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r4, #0x2c
	adds r0, r4, #0
	bl Text_Clear
	adds r0, r5, #0
	bl sub_80BBA28
	adds r5, r0, #0
	movs r0, #0x40
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertString
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE918
sub_80BE918: @ 0x080BE918
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r5, #0x34
	adds r0, r5, #0
	bl Text_Clear
	ldr r1, _080BE954  @ gCharacterData
	subs r4, #1
	movs r0, #0x34
	muls r0, r4, r0
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r4, r0, #0
	movs r0, #0x44
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #5
	adds r3, r4, #0
	bl Text_InsertString
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BE954: .4byte gCharacterData

	THUMB_FUNC_START sub_80BE958
sub_80BE958: @ 0x080BE958
	push {lr}
	sub sp, #4
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	cmp r0, #0
	beq _080BE974
	bl GetUnitFromCharId
	bl GetUnitMiniPortraitId
	adds r3, r0, #0
	b _080BE980
_080BE974:
	adds r0, r2, #0
	adds r0, #0x60
	ldrb r0, [r0]
	cmp r0, #0
	beq _080BE980
	ldr r3, _080BE998  @ 0x00007F04
_080BE980:
	ldr r1, _080BE99C  @ gUnknown_0201B7DA
	movs r2, #0x88
	lsls r2, r2, #2
	movs r0, #0
	str r0, [sp]
	adds r0, r3, #0
	movs r3, #4
	bl sub_8005988
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080BE998: .4byte 0x00007F04
_080BE99C: .4byte gUnknown_0201B7DA

	THUMB_FUNC_START sub_80BE9A0
sub_80BE9A0: @ 0x080BE9A0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r4, #0x34
	adds r0, r4, #0
	bl Text_Clear
	adds r0, r5, #0
	bl GetClassData
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r5, r0, #0
	movs r0, #0x44
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #5
	adds r3, r5, #0
	bl Text_InsertString
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BE9D8
sub_80BE9D8: @ 0x080BE9D8
	push {r4, r5, lr}
	adds r2, r1, #0
	ldr r1, _080BEA0C  @ gUnknown_03005280
	lsls r0, r2, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080BEA56
	lsls r1, r2, #5
	ldr r2, _080BEA10  @ gUnknown_082060B0
	adds r0, r1, r2
	ldr r0, [r0, #0xc]
	ldrh r3, [r0]
	adds r4, r1, #0
	adds r5, r2, #0
	cmp r3, #0
	beq _080BEA20
	ldr r2, _080BEA14  @ gUnknown_0201B430
	ldr r0, _080BEA18  @ 0x000002BA
	adds r1, r2, r0
	ldr r0, _080BEA1C  @ 0x00003231
	strh r0, [r1]
	b _080BEA2A
	.align 2, 0
_080BEA0C: .4byte gUnknown_03005280
_080BEA10: .4byte gUnknown_082060B0
_080BEA14: .4byte gUnknown_0201B430
_080BEA18: .4byte 0x000002BA
_080BEA1C: .4byte 0x00003231
_080BEA20:
	ldr r1, _080BEA40  @ gUnknown_0201B430
	ldr r2, _080BEA44  @ 0x000002BA
	adds r0, r1, r2
	strh r3, [r0]
	adds r2, r1, #0
_080BEA2A:
	adds r0, r4, r5
	ldr r0, [r0, #0x10]
	ldrh r1, [r0]
	cmp r1, #0
	beq _080BEA4C
	movs r3, #0xaf
	lsls r3, r3, #2
	adds r1, r2, r3
	ldr r0, _080BEA48  @ 0x00003232
	strh r0, [r1]
	b _080BEA68
	.align 2, 0
_080BEA40: .4byte gUnknown_0201B430
_080BEA44: .4byte 0x000002BA
_080BEA48: .4byte 0x00003232
_080BEA4C:
	movs r3, #0xaf
	lsls r3, r3, #2
	adds r0, r2, r3
	strh r1, [r0]
	b _080BEA68
_080BEA56:
	ldr r0, _080BEA70  @ gUnknown_0201B430
	ldr r2, _080BEA74  @ 0x000002BA
	adds r1, r0, r2
	movs r2, #0
	strh r2, [r1]
	movs r3, #0xaf
	lsls r3, r3, #2
	adds r0, r0, r3
	strh r2, [r0]
_080BEA68:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BEA70: .4byte gUnknown_0201B430
_080BEA74: .4byte 0x000002BA

	THUMB_FUNC_START sub_80BEA78
sub_80BEA78: @ 0x080BEA78
	push {r4, r5, lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	cmp r0, #0
	beq _080BEA90
	bl GetUnitFromCharId
	movs r5, #8
	ldrsb r5, [r0, r5]
	b _080BEA9C
_080BEA90:
	adds r0, r2, #0
	adds r0, #0x60
	ldrb r0, [r0]
	cmp r0, #0
	beq _080BEA9C
	movs r5, #0
_080BEA9C:
	ldr r4, _080BEAD8  @ gUnknown_0201B864
	ldr r1, _080BEADC  @ 0x00005233
	adds r0, r1, #0
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x40
	ldr r2, _080BEAE0  @ 0x00005253
	adds r0, r2, #0
	strh r0, [r1]
	ldr r3, _080BEAE4  @ 0x00005234
	adds r0, r3, #0
	strh r0, [r4, #2]
	adds r1, #2
	adds r2, #1
	adds r0, r2, #0
	strh r0, [r1]
	cmp r5, #0
	bne _080BEAE8
	adds r3, #0xb
	adds r2, r3, #0
	strh r2, [r4, #4]
	adds r0, r4, #0
	adds r0, #0x44
	adds r3, #0x20
	adds r1, r3, #0
	strh r1, [r0]
	strh r2, [r4, #6]
	adds r0, #2
	strh r1, [r0]
	b _080BEB1C
	.align 2, 0
_080BEAD8: .4byte gUnknown_0201B864
_080BEADC: .4byte 0x00005233
_080BEAE0: .4byte 0x00005253
_080BEAE4: .4byte 0x00005234
_080BEAE8:
	cmp r5, #9
	ble _080BEB04
	adds r0, r5, #0
	movs r1, #0xa
	bl __divsi3
	ldr r2, _080BEB24  @ 0x00005235
	adds r1, r0, r2
	strh r1, [r4, #4]
	adds r1, r4, #0
	adds r1, #0x44
	ldr r3, _080BEB28  @ 0x00005255
	adds r0, r0, r3
	strh r0, [r1]
_080BEB04:
	adds r0, r5, #0
	movs r1, #0xa
	bl __modsi3
	ldr r2, _080BEB24  @ 0x00005235
	adds r1, r0, r2
	strh r1, [r4, #6]
	adds r1, r4, #0
	adds r1, #0x46
	ldr r3, _080BEB28  @ 0x00005255
	adds r0, r0, r3
	strh r0, [r1]
_080BEB1C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BEB24: .4byte 0x00005235
_080BEB28: .4byte 0x00005255

	THUMB_FUNC_START sub_80BEB2C
sub_80BEB2C: @ 0x080BEB2C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r0, #0x5e
	ldrb r0, [r0]
	cmp r0, #0
	beq _080BEB3E
	cmp r0, #1
	beq _080BEB74
	b _080BEBB4
_080BEB3E:
	ldr r4, _080BEB68  @ gUnknown_0201BBD8
	adds r0, r4, #0
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _080BEB6C  @ gUnknown_0201B718
	movs r1, #0xd
	movs r2, #2
	movs r3, #0
	bl TileMap_FillRect
	ldr r1, _080BEB70  @ gUnknown_08A98EAC
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r4, #0
	bl CallARM_FillTileRect
	b _080BEBB4
	.align 2, 0
_080BEB68: .4byte gUnknown_0201BBD8
_080BEB6C: .4byte gUnknown_0201B718
_080BEB70: .4byte gUnknown_08A98EAC
_080BEB74:
	ldr r5, _080BEBC4  @ gUnknown_0201BBD8
	adds r0, r5, #0
	movs r1, #0xd
	movs r2, #9
	movs r3, #0
	bl TileMap_FillRect
	ldr r4, _080BEBC8  @ gUnknown_0201B718
	adds r0, r4, #0
	movs r1, #0xd
	movs r2, #7
	movs r3, #0
	bl TileMap_FillRect
	ldr r1, _080BEBCC  @ gUnknown_08A98F30
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r5, #0
	bl CallARM_FillTileRect
	adds r0, r6, #0
	adds r0, #0x34
	adds r4, #0xc8
	adds r1, r4, #0
	bl Text_Draw
	adds r0, r6, #0
	bl sub_80BEA78
	adds r0, r6, #0
	bl sub_80BE958
_080BEBB4:
	adds r0, r6, #0
	adds r0, #0x2c
	ldr r1, _080BEBD0  @ gUnknown_0201B71C
	bl Text_Draw
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BEBC4: .4byte gUnknown_0201BBD8
_080BEBC8: .4byte gUnknown_0201B718
_080BEBCC: .4byte gUnknown_08A98F30
_080BEBD0: .4byte gUnknown_0201B71C

	THUMB_FUNC_START sub_80BEBD4
sub_80BEBD4: @ 0x080BEBD4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	str r0, [r4, #0x58]
	adds r1, r4, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_80C089C
	adds r1, r4, #0
	adds r1, #0x50
	strb r0, [r1]
	ldr r0, _080BEC50  @ gUnknown_08A3E448
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #2
	adds r1, r1, r0
	movs r0, #2
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #3]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_80BE594
	adds r1, r4, #0
	adds r1, #0x57
	strb r0, [r1]
	adds r0, r4, #0
	bl sub_80BEB2C
	adds r3, r4, #0
	adds r3, #0x4e
	ldr r1, _080BEC54  @ gUnknown_03005280
	ldr r0, [r1, #8]
	asrs r0, r0, #8
	strb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4f
	ldr r0, [r1, #0xc]
	asrs r0, r0, #8
	strb r0, [r2]
	ldrb r1, [r3]
	adds r0, r4, #0
	adds r0, #0x4c
	strb r1, [r0]
	ldrb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BEC50: .4byte gUnknown_08A3E448
_080BEC54: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BEC58
sub_80BEC58: @ 0x080BEC58
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x5e
	ldrb r0, [r0]
	cmp r0, #0
	beq _080BEC6A
	cmp r0, #1
	beq _080BEC74
	b _080BEC80
_080BEC6A:
	ldr r1, _080BEC70  @ gUnknown_08A3E458
	b _080BEC76
	.align 2, 0
_080BEC70: .4byte gUnknown_08A3E458
_080BEC74:
	ldr r1, _080BECB4  @ gUnknown_08A3E45E
_080BEC76:
	ldr r0, [r4, #0x58]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r5, #3
_080BEC80:
	adds r0, r4, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r4, #0
	adds r2, #0x5e
	ldrb r2, [r2]
	bl sub_80BE65C
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	cmp r0, r5
	bne _080BECAE
	movs r0, #0
	str r0, [r4, #0x58]
	adds r1, r4, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080BECAE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BECB4: .4byte gUnknown_08A3E45E

	THUMB_FUNC_START sub_80BECB8
sub_80BECB8: @ 0x080BECB8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	adds r3, r4, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4c
	strb r0, [r2]
	movs r0, #0x4f
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	ldr r1, _080BED18  @ gUnknown_03005280
	ldr r0, [r1, #8]
	asrs r5, r0, #8
	strb r5, [r3]
	ldr r0, [r1, #0xc]
	asrs r1, r0, #8
	mov r0, ip
	strb r1, [r0]
	ldrh r0, [r3]
	ldrh r2, [r2]
	cmp r0, r2
	beq _080BEDB6
	adds r7, r1, #0
	ldr r0, [r4, #0x14]
	ldr r0, [r0, #0x48]
	movs r1, #0
	str r1, [sp]
	adds r1, r5, #0
	adds r2, r7, #0
	movs r3, #0
	bl sub_80BB628
	adds r5, r0, #0
	cmp r5, #0
	bge _080BED1C
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080BEDB6
	.align 2, 0
_080BED18: .4byte gUnknown_03005280
_080BED1C:
	adds r0, r4, #0
	adds r0, #0x5c
	ldrh r1, [r0]
	mov r8, r0
	adds r6, r4, #0
	adds r6, #0x50
	cmp r1, r5
	beq _080BED7A
	movs r0, #0
	ldrsb r0, [r6, r0]
	bl sub_80BE82C
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80BEF20
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_80C089C
	strb r0, [r6]
	adds r0, r4, #0
	adds r0, #0x5e
	ldrb r1, [r0]
	adds r2, r0, #0
	cmp r1, #0
	beq _080BED5C
	cmp r1, #1
	beq _080BED64
	b _080BED6A
_080BED5C:
	ldr r0, _080BED60  @ gUnknown_08A3E458
	b _080BED66
	.align 2, 0
_080BED60: .4byte gUnknown_08A3E458
_080BED64:
	ldr r0, _080BEDC4  @ gUnknown_08A3E45E
_080BED66:
	movs r7, #2
	ldrsb r7, [r0, r7]
_080BED6A:
	movs r0, #0
	ldrsb r0, [r6, r0]
	ldrb r2, [r2]
	adds r1, r7, #0
	bl sub_80BE65C
	mov r1, r8
	strh r5, [r1]
_080BED7A:
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_80C089C
	movs r2, #0
	ldrsb r2, [r6, r2]
	cmp r0, r2
	beq _080BEDB6
	ldr r1, _080BEDC8  @ gUnknown_08A3E448
	lsls r0, r0, #2
	adds r3, r0, r1
	lsls r0, r2, #2
	adds r2, r0, r1
	movs r1, #2
	ldrsb r1, [r3, r1]
	movs r0, #2
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne _080BEDB0
	movs r1, #3
	ldrsb r1, [r3, r1]
	movs r0, #3
	ldrsb r0, [r2, r0]
	cmp r1, r0
	beq _080BEDB6
_080BEDB0:
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080BEDB6:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BEDC4: .4byte gUnknown_08A3E45E
_080BEDC8: .4byte gUnknown_08A3E448

	THUMB_FUNC_START sub_80BEDCC
sub_80BEDCC: @ 0x080BEDCC
	adds r0, #0x56
	movs r1, #1
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80BEDD4
sub_80BEDD4: @ 0x080BEDD4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x55
	movs r0, #1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x5e
	ldrb r0, [r0]
	cmp r0, #0
	beq _080BEDF0
	cmp r0, #1
	beq _080BEDF8
	b _080BEE04
_080BEDF0:
	ldr r1, _080BEDF4  @ gUnknown_08A3E45B
	b _080BEDFA
	.align 2, 0
_080BEDF4: .4byte gUnknown_08A3E45B
_080BEDF8:
	ldr r1, _080BEE44  @ gUnknown_08A3E461
_080BEDFA:
	ldr r0, [r4, #0x58]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r5, #3
_080BEE04:
	adds r0, r4, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r4, #0
	adds r2, #0x5e
	ldrb r2, [r2]
	bl sub_80BE65C
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	cmp r0, r5
	bne _080BEE3C
	movs r0, #0
	str r0, [r4, #0x58]
	adds r1, r4, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080BEE3C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BEE44: .4byte gUnknown_08A3E461

	THUMB_FUNC_START sub_80BEE48
sub_80BEE48: @ 0x080BEE48
	push {r4, r5, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	movs r5, #0
	ldr r1, _080BEE78  @ gUnknown_03005280
_080BEE52:
	movs r3, #0x12
	ldrsh r0, [r1, r3]
	cmp r0, #0
	beq _080BEE88
	ldrb r0, [r1, #0x11]
	cmp r0, r2
	bne _080BEE88
	adds r0, r5, #0
	bl sub_80BD20C
	cmp r0, #1
	beq _080BEE7C
	cmp r0, #1
	ble _080BEE72
	cmp r0, #2
	beq _080BEE80
_080BEE72:
	movs r0, #0
	b _080BEE82
	.align 2, 0
_080BEE78: .4byte gUnknown_03005280
_080BEE7C:
	movs r0, #0x80
	b _080BEE82
_080BEE80:
	movs r0, #0x40
_080BEE82:
	str r0, [r4]
	adds r0, r5, #0
	b _080BEE96
_080BEE88:
	adds r1, #4
	adds r5, #1
	cmp r5, #6
	ble _080BEE52
	movs r0, #1
	negs r0, r0
	str r0, [r4]
_080BEE96:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BEE9C
sub_80BEE9C: @ 0x080BEE9C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, r1, #0
	mov r1, sp
	bl sub_80BEE48
	cmp r0, #0
	blt _080BEF00
	ldr r1, _080BEEDC  @ gUnknown_03005280
	lsls r0, r0, #2
	adds r2, r0, r1
	ldrb r1, [r2, #0x10]
	movs r5, #2
	adds r0, r5, #0
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	beq _080BEEEA
	adds r1, r4, #0
	adds r1, #0x5f
	movs r0, #0
	strb r0, [r1]
	ldrb r1, [r2, #0x10]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _080BEEE0
	ldrb r1, [r2, #0x12]
	b _080BEEE2
	.align 2, 0
_080BEEDC: .4byte gUnknown_03005280
_080BEEE0:
	movs r1, #0
_080BEEE2:
	adds r0, r4, #0
	adds r0, #0x60
	strb r1, [r0]
	b _080BEEF8
_080BEEEA:
	ldrh r0, [r2, #0x12]
	adds r1, r4, #0
	adds r1, #0x5f
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x60
	strb r3, [r0]
_080BEEF8:
	adds r1, r4, #0
	adds r1, #0x5e
	movs r0, #1
	b _080BEF0E
_080BEF00:
	adds r1, r4, #0
	adds r1, #0x5f
	movs r0, #0
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	subs r1, #2
_080BEF0E:
	strb r0, [r1]
	ldr r0, [sp]
	movs r1, #8
	bl sub_80BE5B4
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BEF20
sub_80BEF20: @ 0x080BEF20
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	bl sub_80BEE9C
	adds r0, r4, #0
	bl sub_80BEB2C
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80BE8E8
	adds r1, r4, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	cmp r0, #0
	beq _080BEF4C
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_80BE918
	b _080BEF5E
_080BEF4C:
	adds r1, r4, #0
	adds r1, #0x60
	ldrb r0, [r1]
	cmp r0, #0
	beq _080BEF5E
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_80BE9A0
_080BEF5E:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80BE9D8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BEF6C
sub_80BEF6C: @ 0x080BEF6C
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	add r2, sp, #4
	ldr r1, _080BEFB4  @ gUnknown_03005280
	ldr r0, [r1, #8]
	asrs r0, r0, #8
	strh r0, [r2]
	adds r2, #2
	ldr r0, [r1, #0xc]
	asrs r0, r0, #8
	strh r0, [r2]
	ldr r0, [r4, #0x14]
	ldr r0, [r0, #0x48]
	add r1, sp, #4
	movs r3, #0
	ldrsh r1, [r1, r3]
	movs r3, #0
	ldrsh r2, [r2, r3]
	movs r3, #0
	str r3, [sp]
	bl sub_80BB628
	adds r1, r0, #0
	cmp r1, #0
	blt _080BEFAC
	adds r0, r4, #0
	bl sub_80BEF20
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080BEFAC:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BEFB4: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BEFB8
sub_80BEFB8: @ 0x080BEFB8
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	movs r0, #0
	str r0, [r7, #0x58]
	adds r0, r7, #0
	adds r0, #0x56
	movs r1, #0
	strb r1, [r0]
	subs r0, #6
	strb r1, [r0]
	adds r1, r7, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	adds r6, r7, #0
	adds r6, #0x5c
	ldr r0, _080BF040  @ 0x0000FFFF
	strh r0, [r6]
	adds r5, r7, #0
	adds r5, #0x2c
	adds r0, r5, #0
	movs r1, #8
	bl Text_Init
	adds r4, r7, #0
	adds r4, #0x34
	adds r0, r4, #0
	movs r1, #8
	bl Text_Init
	adds r0, r5, #0
	bl Text_Clear
	adds r0, r4, #0
	bl Text_Clear
	add r2, sp, #4
	ldr r1, _080BF044  @ gUnknown_03005280
	ldr r0, [r1, #8]
	asrs r0, r0, #8
	strh r0, [r2]
	adds r2, #2
	ldr r0, [r1, #0xc]
	asrs r0, r0, #8
	strh r0, [r2]
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x48]
	add r1, sp, #4
	movs r3, #0
	ldrsh r1, [r1, r3]
	movs r3, #0
	ldrsh r2, [r2, r3]
	movs r3, #0
	str r3, [sp]
	bl sub_80BB628
	adds r1, r0, #0
	cmp r1, #0
	blt _080BF038
	strh r1, [r6]
	adds r0, r7, #0
	bl sub_80BEF20
_080BF038:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BF040: .4byte 0x0000FFFF
_080BF044: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BF048
sub_80BF048: @ 0x080BF048
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r2, _080BF118  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r2, #0x36
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0xe
	movs r2, #3
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #0
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	ldr r0, _080BF11C  @ gUnknown_08A9901C
	ldr r4, _080BF120  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r1, _080BF124  @ 0x06004660
	adds r0, r4, #0
	movs r2, #0xd
	movs r3, #2
	bl CopyTileGfxForObj
	ldr r0, _080BF128  @ gUnknown_08A99120
	movs r1, #0xa0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080BF12C  @ gUnknown_08A97A80
	ldr r1, _080BF130  @ 0x06004620
	bl CopyDataWithPossibleUncomp
	ldr r0, _080BF134  @ gUnknown_08A97A60
	movs r1, #0x60
	movs r2, #0x20
	bl CopyToPaletteBuffer
	bl sub_8003D20
	ldr r0, _080BF138  @ gUnknown_08A3E464
	ldr r1, [r5, #0x14]
	bl Proc_Create
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BF118: .4byte gLCDControlBuffer
_080BF11C: .4byte gUnknown_08A9901C
_080BF120: .4byte gUnknown_02020188
_080BF124: .4byte 0x06004660
_080BF128: .4byte gUnknown_08A99120
_080BF12C: .4byte gUnknown_08A97A80
_080BF130: .4byte 0x06004620
_080BF134: .4byte gUnknown_08A97A60
_080BF138: .4byte gUnknown_08A3E464

	THUMB_FUNC_START sub_80BF13C
sub_80BF13C: @ 0x080BF13C
	push {r4, lr}
	adds r4, r0, #0
	bl Font_InitForUIDefault
	bl sub_80C09B8
	ldr r0, _080BF158  @ gUnknown_08A3E4D4
	adds r1, r4, #0
	bl Proc_Create
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080BF158: .4byte gUnknown_08A3E4D4

	THUMB_FUNC_START sub_80BF15C
sub_80BF15C: @ 0x080BF15C
	push {lr}
	ldr r0, _080BF178  @ gUnknown_08A3E464
	bl Proc_DeleteAllWithScript
	ldr r0, _080BF17C  @ gUnknown_08A3E4D4
	bl Proc_DeleteAllWithScript
	bl SetDefaultColorEffects
	bl ClearBg0Bg1
	pop {r0}
	bx r0
	.align 2, 0
_080BF178: .4byte gUnknown_08A3E464
_080BF17C: .4byte gUnknown_08A3E4D4

	THUMB_FUNC_START sub_80BF180
sub_80BF180: @ 0x080BF180
	ldr r2, _080BF18C  @ gUnknown_03005280
	ldr r1, [r0, #0x38]
	str r1, [r2, #8]
	ldr r0, [r0, #0x3c]
	str r0, [r2, #0xc]
	bx lr
	.align 2, 0
_080BF18C: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BF190
sub_80BF190: @ 0x080BF190
	movs r1, #0
	strh r1, [r0, #0x2c]
	bx lr

	THUMB_FUNC_START sub_80BF198
sub_80BF198: @ 0x080BF198
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x2a
	ldrsh r1, [r7, r2]
	cmp r0, r1
	bge _080BF1F4
	movs r1, #0x2c
	ldrsh r0, [r7, r1]
	movs r2, #0x2a
	ldrsh r1, [r7, r2]
	adds r2, r7, #0
	adds r2, #0x40
	ldrb r2, [r2]
	bl sub_800B7E0
	adds r5, r0, #0
	movs r6, #0x80
	lsls r6, r6, #5
	ldr r0, [r7, #0x44]
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	ldr r4, [r7, #0x30]
	adds r4, r4, r0
	ldr r0, [r7, #0x48]
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	ldr r1, [r7, #0x34]
	adds r1, r1, r0
	ldr r0, _080BF1F0  @ gUnknown_03005280
	str r4, [r0, #8]
	str r1, [r0, #0xc]
	b _080BF204
	.align 2, 0
_080BF1F0: .4byte gUnknown_03005280
_080BF1F4:
	ldr r0, _080BF20C  @ gUnknown_03005280
	ldr r1, [r7, #0x38]
	str r1, [r0, #8]
	ldr r1, [r7, #0x3c]
	str r1, [r0, #0xc]
	adds r0, r7, #0
	bl Proc_Delete
_080BF204:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BF20C: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BF210
sub_80BF210: @ 0x080BF210
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r1, [sp, #0x14]
	cmp r1, #0
	beq _080BF228
	ldr r0, _080BF224  @ gUnknown_08A3E4F4
	b _080BF22C
	.align 2, 0
_080BF224: .4byte gUnknown_08A3E4F4
_080BF228:
	ldr r0, _080BF240  @ gUnknown_08A3E4F4
	movs r1, #3
_080BF22C:
	bl Proc_Create
	adds r2, r0, #0
	cmp r4, #0
	bne _080BF248
	ldr r0, _080BF244  @ gUnknown_03005280
	ldr r1, [r0, #8]
	str r1, [r2, #0x30]
	ldr r0, [r0, #0xc]
	b _080BF256
	.align 2, 0
_080BF240: .4byte gUnknown_08A3E4F4
_080BF244: .4byte gUnknown_03005280
_080BF248:
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #8
	str r0, [r2, #0x30]
	movs r1, #2
	ldrsh r0, [r4, r1]
	lsls r0, r0, #8
_080BF256:
	str r0, [r2, #0x34]
	cmp r5, #0
	bne _080BF262
	str r5, [r2, #0x38]
	str r5, [r2, #0x3c]
	b _080BF272
_080BF262:
	movs r1, #0
	ldrsh r0, [r5, r1]
	lsls r0, r0, #8
	str r0, [r2, #0x38]
	movs r1, #2
	ldrsh r0, [r5, r1]
	lsls r0, r0, #8
	str r0, [r2, #0x3c]
_080BF272:
	ldr r0, [r2, #0x38]
	ldr r1, [r2, #0x30]
	subs r0, r0, r1
	str r0, [r2, #0x44]
	ldr r0, [r2, #0x3c]
	ldr r1, [r2, #0x34]
	subs r0, r0, r1
	str r0, [r2, #0x48]
	strh r6, [r2, #0x2a]
	adds r0, r2, #0
	adds r0, #0x40
	strb r7, [r0]
	adds r0, r2, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BF294
sub_80BF294: @ 0x080BF294
	push {lr}
	ldr r0, _080BF2A8  @ gUnknown_08A3E4F4
	bl Proc_Find
	cmp r0, #0
	beq _080BF2A2
	movs r0, #1
_080BF2A2:
	pop {r1}
	bx r1
	.align 2, 0
_080BF2A8: .4byte gUnknown_08A3E4F4

	THUMB_FUNC_START sub_80BF2AC
sub_80BF2AC: @ 0x080BF2AC
	push {lr}
	adds r3, r0, #0
	ldr r0, _080BF2CC  @ gUnknown_03005280
	ldrh r1, [r3, #0x3a]
	strh r1, [r0, #2]
	ldrh r1, [r3, #0x3c]
	strh r1, [r0, #4]
	ldr r2, [r3, #0x2c]
	cmp r2, #0
	beq _080BF2C8
	ldr r0, [r2]
	ldr r1, [r3, #0x30]
	orrs r0, r1
	str r0, [r2]
_080BF2C8:
	pop {r0}
	bx r0
	.align 2, 0
_080BF2CC: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BF2D0
sub_80BF2D0: @ 0x080BF2D0
	movs r1, #0
	str r1, [r0, #0x44]
	bx lr

	THUMB_FUNC_START sub_80BF2D8
sub_80BF2D8: @ 0x080BF2D8
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r1, r7, #0
	adds r1, #0x48
	ldrh r2, [r1]
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0
	ble _080BF2F0
	subs r0, r2, #1
	strh r0, [r1]
	b _080BF36A
_080BF2F0:
	ldr r0, [r7, #0x2c]
	ldr r0, [r0]
	ldr r1, [r7, #0x30]
	ands r0, r1
	cmp r0, #0
	beq _080BF304
	ldr r0, [r7, #0x40]
	str r0, [r7, #0x44]
	adds r1, r0, #0
	b _080BF310
_080BF304:
	ldr r0, [r7, #0x44]
	movs r1, #0x80
	lsls r1, r1, #5
	adds r0, r0, r1
	str r0, [r7, #0x44]
	ldr r1, [r7, #0x40]
_080BF310:
	ldr r0, [r7, #0x44]
	cmp r0, r1
	bge _080BF364
	movs r3, #0x34
	ldrsh r2, [r7, r3]
	bl sub_800B84C
	adds r5, r0, #0
	movs r6, #0x80
	lsls r6, r6, #5
	movs r1, #0x3a
	ldrsh r0, [r7, r1]
	movs r2, #0x36
	ldrsh r1, [r7, r2]
	subs r0, r0, r1
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	movs r3, #0x36
	ldrsh r4, [r7, r3]
	adds r4, r4, r0
	movs r1, #0x3c
	ldrsh r0, [r7, r1]
	movs r2, #0x38
	ldrsh r1, [r7, r2]
	subs r0, r0, r1
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	movs r3, #0x38
	ldrsh r1, [r7, r3]
	adds r1, r1, r0
	ldr r0, _080BF360  @ gUnknown_03005280
	strh r4, [r0, #2]
	strh r1, [r0, #4]
	b _080BF36A
	.align 2, 0
_080BF360: .4byte gUnknown_03005280
_080BF364:
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
_080BF36A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BF370
sub_80BF370: @ 0x080BF370
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080BF3B8  @ gUnknown_08A3E52C
	bl Proc_Create
	adds r3, r0, #0
	movs r1, #0xa
	ldrsh r0, [r4, r1]
	cmp r0, #0
	blt _080BF38E
	movs r5, #0xc
	ldrsh r0, [r4, r5]
	ldr r2, _080BF3BC  @ gUnknown_03005280
	cmp r0, #0
	bge _080BF39A
_080BF38E:
	ldr r0, _080BF3BC  @ gUnknown_03005280
	ldrh r1, [r0, #2]
	strh r1, [r4, #0xa]
	ldrh r1, [r0, #4]
	strh r1, [r4, #0xc]
	adds r2, r0, #0
_080BF39A:
	ldrh r1, [r4, #0xa]
	strh r1, [r3, #0x36]
	ldrh r0, [r4, #0xc]
	strh r0, [r3, #0x38]
	strh r1, [r2, #2]
	ldrh r0, [r3, #0x38]
	strh r0, [r2, #4]
	ldrh r2, [r4, #0xe]
	movs r5, #0xe
	ldrsh r0, [r4, r5]
	cmp r0, #0
	bge _080BF3C0
	strh r1, [r3, #0x3a]
	b _080BF3C2
	.align 2, 0
_080BF3B8: .4byte gUnknown_08A3E52C
_080BF3BC: .4byte gUnknown_03005280
_080BF3C0:
	strh r2, [r3, #0x3a]
_080BF3C2:
	ldrh r0, [r4, #0x10]
	strh r0, [r3, #0x3c]
	ldrh r0, [r4, #8]
	strh r0, [r3, #0x34]
	ldr r0, [r4, #0x14]
	lsls r0, r0, #0xc
	str r0, [r3, #0x40]
	ldrh r1, [r4, #0x18]
	adds r0, r3, #0
	adds r0, #0x48
	strh r1, [r0]
	ldr r2, [r4]
	str r2, [r3, #0x2c]
	cmp r2, #0
	beq _080BF3EC
	ldr r0, [r4, #4]
	ldr r1, [r2]
	bics r1, r0
	str r1, [r2]
	ldr r0, [r4, #4]
	str r0, [r3, #0x30]
_080BF3EC:
	adds r0, r3, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80BF3F4
sub_80BF3F4: @ 0x080BF3F4
	push {lr}
	ldr r0, _080BF400  @ gUnknown_08A3E52C
	bl Proc_Find
	pop {r1}
	bx r1
	.align 2, 0
_080BF400: .4byte gUnknown_08A3E52C

	THUMB_FUNC_START sub_80BF404
sub_80BF404: @ 0x080BF404
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, r9
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #0x20
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	ldr r4, [sp, #0x3c]
	ldr r0, [sp, #0x40]
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r8, r2
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r9, r0
	ldr r2, _080BF48C  @ gUnknown_08A3D748
	mov sl, r2
	mov r0, sl
	str r3, [sp, #0x1c]
	bl Proc_Find
	adds r1, r0, #0
	adds r0, #0x30
	str r0, [sp]
	movs r2, #1
	str r2, [sp, #4]
	mov r0, sp
	strh r2, [r0, #8]
	strh r5, [r0, #0xa]
	strh r6, [r0, #0xc]
	mov r2, r8
	strh r2, [r0, #0xe]
	ldr r3, [sp, #0x1c]
	strh r3, [r0, #0x10]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	str r4, [sp, #0x14]
	mov r2, r9
	strh r2, [r0, #0x18]
	bl sub_80BF370
	mov r0, sl
	bl Proc_Find
	ldr r1, [r0, #0x50]
	adds r1, #0x32
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BF48C: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BF490
sub_80BF490: @ 0x080BF490
	push {lr}
	ldr r0, _080BF4A4  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r1, [r0, #0x30]
	movs r0, #1
	bics r0, r1
	pop {r1}
	bx r1
	.align 2, 0
_080BF4A4: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BF4A8
sub_80BF4A8: @ 0x080BF4A8
	push {r4, lr}
	ldr r0, _080BF4C8  @ gUnknown_08A3D748
	bl Proc_Find
	adds r4, r0, #0
	ldr r0, _080BF4CC  @ gUnknown_08A3E52C
	bl Proc_DeleteAllWithScript
	ldr r0, [r4, #0x30]
	movs r1, #1
	orrs r0, r1
	str r0, [r4, #0x30]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BF4C8: .4byte gUnknown_08A3D748
_080BF4CC: .4byte gUnknown_08A3E52C

	THUMB_FUNC_START WM_PutClassSprite
WM_PutClassSprite: @ 0x080BF4D0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r0, _080BF500  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	str r4, [sp]
	adds r1, r5, #0
	adds r2, r6, #0
	mov r3, r8
	bl MapMU_SetUnitClass
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BF500: .4byte gUnknown_08A3D748

	THUMB_FUNC_START WM_PutCharSprite
WM_PutCharSprite: @ 0x080BF504
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r0, _080BF534  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	str r4, [sp]
	adds r1, r5, #0
	adds r2, r6, #0
	mov r3, r8
	bl MapMU_SetUnitChar
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BF534: .4byte gUnknown_08A3D748

	THUMB_FUNC_START WM_RemoveUnit
WM_RemoveUnit: @ 0x080BF538
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080BF550  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	adds r1, r4, #0
	bl MapMU_RemoveUnit
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BF550: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BF554
sub_80BF554: @ 0x080BF554
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080BF56C  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	adds r1, r4, #0
	bl sub_80BDDC4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BF56C: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BF570
sub_80BF570: @ 0x080BF570
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080BF588  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	adds r1, r4, #0
	bl sub_80BDE3C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BF588: .4byte gUnknown_08A3D748

	THUMB_FUNC_START WM_DrawPath
WM_DrawPath: @ 0x080BF58C
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, _080BF5B8  @ gUnknown_03005280
	adds r1, r0, #0
	adds r1, #0xa4
	bl SetupNewWMRoute
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080BF5B2
	ldr r0, _080BF5BC  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x44]
	ldr r0, [r0, #0x4c]
	adds r1, r4, #0
	bl MapRoute_BeginRouteTransition
_080BF5B2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BF5B8: .4byte gUnknown_03005280
_080BF5BC: .4byte gUnknown_08A3D748

	THUMB_FUNC_START nullsub_50
nullsub_50: @ 0x080BF5C0
	bx lr

	THUMB_FUNC_START sub_80BF5C4
sub_80BF5C4: @ 0x080BF5C4
	movs r1, #0
	str r1, [r0, #0x30]
	adds r1, r0, #0
	adds r1, #0x35
	ldrb r1, [r1]
	lsls r1, r1, #1
	ldr r2, _080BF5D8  @ gPaletteBuffer
	adds r1, r1, r2
	str r1, [r0, #0x40]
	bx lr
	.align 2, 0
_080BF5D8: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80BF5DC
sub_80BF5DC: @ 0x080BF5DC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	ldr r0, [r5, #0x30]
	adds r0, #1
	str r0, [r5, #0x30]
	ldr r1, [r5, #0x2c]
	cmp r0, r1
	bge _080BF69A
	lsls r0, r0, #6
	bl __divsi3
	mov r9, r0
	movs r7, #0
	adds r0, r5, #0
	adds r0, #0x34
	mov sl, r0
	ldrb r0, [r0]
	cmp r7, r0
	bge _080BF6AE
	movs r1, #0x1f
	mov ip, r1
_080BF60E:
	ldr r0, [r5, #0x38]
	lsls r6, r7, #1
	adds r0, r6, r0
	ldrh r3, [r0]
	movs r2, #0x1f
	ands r2, r3
	ldr r0, [r5, #0x3c]
	adds r0, r6, r0
	ldrh r1, [r0]
	movs r0, #0x1f
	ands r0, r1
	subs r0, r0, r2
	mov r4, r9
	muls r4, r0, r4
	adds r0, r4, #0
	cmp r0, #0
	bge _080BF632
	adds r0, #0x3f
_080BF632:
	asrs r0, r0, #6
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	lsls r4, r3, #0x10
	lsrs r2, r4, #0x15
	mov r0, ip
	ands r2, r0
	lsls r3, r1, #0x10
	lsrs r0, r3, #0x15
	mov r1, ip
	ands r0, r1
	subs r0, r0, r2
	mov r1, r9
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge _080BF65A
	adds r0, #0x3f
_080BF65A:
	asrs r0, r0, #6
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	lsrs r2, r4, #0x1a
	mov r4, ip
	ands r2, r4
	lsrs r0, r3, #0x1a
	ands r0, r4
	subs r0, r0, r2
	mov r3, r9
	muls r3, r0, r3
	adds r0, r3, #0
	cmp r0, #0
	bge _080BF67A
	adds r0, #0x3f
_080BF67A:
	asrs r0, r0, #6
	adds r0, r2, r0
	lsls r0, r0, #0x10
	ldr r2, [r5, #0x40]
	adds r2, r6, r2
	lsrs r0, r0, #6
	lsls r1, r1, #5
	adds r0, r0, r1
	add r0, r8
	strh r0, [r2]
	adds r7, #1
	mov r4, sl
	ldrb r4, [r4]
	cmp r7, r4
	blt _080BF60E
	b _080BF6AE
_080BF69A:
	ldr r0, [r5, #0x3c]
	ldr r1, [r5, #0x40]
	adds r2, r5, #0
	adds r2, #0x34
	ldrb r2, [r2]
	bl CpuSet
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080BF6AE:
	bl EnablePaletteSync
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BF6C0
sub_80BF6C0: @ 0x080BF6C0
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, [r4, #0xc]
	cmp r0, #0
	ble _080BF710
	cmp r2, #0
	beq _080BF6E0
	ldr r0, _080BF6DC  @ gUnknown_08A3E55C
	adds r1, r2, #0
	bl Proc_CreateBlockingChild
	b _080BF6E8
	.align 2, 0
_080BF6DC: .4byte gUnknown_08A3E55C
_080BF6E0:
	ldr r0, _080BF70C  @ gUnknown_08A3E55C
	movs r1, #3
	bl Proc_Create
_080BF6E8:
	adds r2, r0, #0
	ldr r0, [r4, #0xc]
	str r0, [r2, #0x2c]
	ldrb r1, [r4, #8]
	adds r0, r2, #0
	adds r0, #0x34
	strb r1, [r0]
	ldrb r0, [r4, #9]
	adds r1, r2, #0
	adds r1, #0x35
	strb r0, [r1]
	ldr r0, [r4]
	str r0, [r2, #0x38]
	ldr r0, [r4, #4]
	str r0, [r2, #0x3c]
	adds r0, r2, #0
	b _080BF726
	.align 2, 0
_080BF70C: .4byte gUnknown_08A3E55C
_080BF710:
	ldr r0, [r4, #4]
	ldrb r1, [r4, #9]
	lsls r1, r1, #1
	ldr r2, _080BF72C  @ gPaletteBuffer
	adds r1, r1, r2
	ldrb r2, [r4, #8]
	bl CpuSet
	bl EnablePaletteSync
	movs r0, #0
_080BF726:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080BF72C: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80BF730
sub_80BF730: @ 0x080BF730
	push {lr}
	ldr r0, _080BF744  @ gUnknown_08A3E55C
	bl Proc_Find
	cmp r0, #0
	beq _080BF73E
	movs r0, #1
_080BF73E:
	pop {r1}
	bx r1
	.align 2, 0
_080BF744: .4byte gUnknown_08A3E55C

	THUMB_FUNC_START sub_80BF748
sub_80BF748: @ 0x080BF748
	push {r4, lr}
	ldr r4, _080BF780  @ gUnknown_08A3E55C
	adds r0, r4, #0
	bl Proc_Find
	adds r3, r0, #0
	cmp r3, #0
	beq _080BF77A
	ldr r0, [r3, #0x3c]
	adds r1, r3, #0
	adds r1, #0x35
	ldrb r1, [r1]
	lsls r1, r1, #1
	ldr r2, _080BF784  @ gPaletteBuffer
	adds r1, r1, r2
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r2, [r2]
	bl CpuSet
	bl EnablePaletteSync
	adds r0, r4, #0
	bl Proc_DeleteAllWithScript
_080BF77A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BF780: .4byte gUnknown_08A3E55C
_080BF784: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80BF788
sub_80BF788: @ 0x080BF788
	push {lr}
	sub sp, #0x10
	ldr r2, _080BF7AC  @ gUnknown_08A95FE4
	str r2, [sp]
	ldr r2, _080BF7B0  @ gUnknown_08A95F64
	str r2, [sp, #4]
	mov r3, sp
	movs r2, #0x90
	strb r2, [r3, #9]
	movs r2, #0x40
	strb r2, [r3, #8]
	str r1, [sp, #0xc]
	mov r1, sp
	bl sub_80BF6C0
	add sp, #0x10
	pop {r1}
	bx r1
	.align 2, 0
_080BF7AC: .4byte gUnknown_08A95FE4
_080BF7B0: .4byte gUnknown_08A95F64

	THUMB_FUNC_START sub_80BF7B4
sub_80BF7B4: @ 0x080BF7B4
	ldr r3, _080BF7D8  @ gLCDControlBuffer
	ldr r1, [r3, #0x3c]
	ldr r2, [r3, #0x40]
	str r1, [r0]
	str r2, [r0, #4]
	adds r1, r3, #0
	adds r1, #0x44
	ldrb r1, [r1]
	strb r1, [r0, #8]
	adds r1, r3, #0
	adds r1, #0x45
	ldrb r1, [r1]
	strb r1, [r0, #9]
	adds r1, r3, #0
	adds r1, #0x46
	ldrb r1, [r1]
	strb r1, [r0, #0xa]
	bx lr
	.align 2, 0
_080BF7D8: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80BF7DC
sub_80BF7DC: @ 0x080BF7DC
	ldr r3, _080BF800  @ gLCDControlBuffer
	ldr r1, [r0]
	ldr r2, [r0, #4]
	str r1, [r3, #0x3c]
	str r2, [r3, #0x40]
	ldrb r2, [r0, #8]
	adds r1, r3, #0
	adds r1, #0x44
	strb r2, [r1]
	ldrb r1, [r0, #9]
	adds r2, r3, #0
	adds r2, #0x45
	strb r1, [r2]
	ldrb r1, [r0, #0xa]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	bx lr
	.align 2, 0
_080BF800: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80BF804
sub_80BF804: @ 0x080BF804
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r5, _080BF888  @ gUnknown_08A3D748
	adds r0, r5, #0
	bl Proc_Find
	ldr r3, [r0, #0x48]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r2, [r4]
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r3, #0x34
	adds r3, r3, r0
	movs r0, #0x1f
	ands r2, r0
	movs r1, #1
	lsls r1, r2
	ldr r0, [r3]
	bics r0, r1
	str r0, [r3]
	bl EnablePaletteSync
	ldr r3, _080BF88C  @ gUnknown_03005280
	ldrb r1, [r4]
	lsls r1, r1, #2
	adds r1, r1, r3
	adds r1, #0x30
	ldrb r2, [r1]
	movs r0, #1
	orrs r0, r2
	strb r0, [r1]
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r3
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080BF876
	adds r0, r5, #0
	bl Proc_Find
	ldr r0, [r0, #0x48]
	ldrb r1, [r4]
	adds r0, #0x33
	strb r1, [r0]
	adds r0, r5, #0
	bl Proc_Find
	ldr r1, [r0, #0x48]
	adds r1, #0x32
	ldrb r0, [r1]
	movs r2, #2
	orrs r0, r2
	strb r0, [r1]
_080BF876:
	bl sub_80C13D8
	adds r0, r6, #0
	adds r0, #0x30
	bl sub_80BF7DC
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BF888: .4byte gUnknown_08A3D748
_080BF88C: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BF890
sub_80BF890: @ 0x080BF890
	push {r4, lr}
	sub sp, #4
	adds r0, #0x30
	bl sub_80BF7B4
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BF8CC
sub_80BF8CC: @ 0x080BF8CC
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r4, _080BF95C  @ gUnknown_03005280
	adds r6, r5, #0
	adds r6, #0x29
	ldrb r1, [r6]
	lsls r1, r1, #2
	adds r1, r1, r4
	adds r1, #0x30
	ldrb r2, [r1]
	movs r0, #1
	orrs r0, r2
	strb r0, [r1]
	ldr r7, _080BF960  @ gUnknown_08A3D748
	adds r0, r7, #0
	bl Proc_Find
	ldr r3, [r0, #0x48]
	ldrb r2, [r6]
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r3, #0x34
	adds r3, r3, r0
	movs r0, #0x1f
	ands r2, r0
	movs r1, #1
	lsls r1, r2
	ldr r0, [r3]
	orrs r0, r1
	str r0, [r3]
	ldrb r0, [r6]
	lsls r0, r0, #2
	adds r0, r0, r4
	adds r0, #0x30
	ldrb r1, [r0]
	movs r4, #2
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _080BF93C
	adds r0, r7, #0
	bl Proc_Find
	ldr r0, [r0, #0x48]
	ldrb r1, [r6]
	adds r0, #0x33
	strb r1, [r0]
	adds r0, r7, #0
	bl Proc_Find
	ldr r1, [r0, #0x48]
	adds r1, #0x32
	ldrb r0, [r1]
	movs r2, #2
	orrs r0, r2
	strb r0, [r1]
_080BF93C:
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r0, r5, #0
	adds r0, #0x2a
	ldrb r2, [r0]
	cmp r2, #0
	beq _080BF964
	cmp r2, #1
	beq _080BF96C
	adds r0, #1
	b _080BF972
	.align 2, 0
_080BF95C: .4byte gUnknown_03005280
_080BF960: .4byte gUnknown_08A3D748
_080BF964:
	adds r0, r5, #0
	adds r0, #0x2b
	strb r4, [r0]
	b _080BF972
_080BF96C:
	adds r0, r5, #0
	adds r0, #0x2b
	strb r2, [r0]
_080BF972:
	ldrb r1, [r0]
	adds r0, r5, #0
	adds r0, #0x2c
	movs r2, #0
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BF988
sub_80BF988: @ 0x080BF988
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bgt _080BFA10
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq _080BF9AE
	cmp r0, #1
	beq _080BF9B8
	adds r1, #1
	b _080BF9C2
_080BF9AE:
	adds r1, r4, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	adds r0, #1
	b _080BF9C0
_080BF9B8:
	adds r1, r4, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	adds r0, #2
_080BF9C0:
	strb r0, [r1]
_080BF9C2:
	ldrb r0, [r1]
	cmp r0, #0xf
	bhi _080BF9E6
	adds r1, r0, #0
	movs r2, #0x10
	subs r2, r2, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	b _080BFA10
_080BF9E6:
	ldr r0, _080BFA18  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r3, [r0, #0x48]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r2, [r0]
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r3, #0x34
	adds r3, r3, r0
	movs r0, #0x1f
	ands r2, r0
	movs r1, #1
	lsls r1, r2
	ldr r0, [r3]
	bics r0, r1
	str r0, [r3]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080BFA10:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BFA18: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BFA1C
sub_80BFA1C: @ 0x080BFA1C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r1, _080BFA40  @ gUnknown_03005280
	adds r0, #0x29
	ldrb r2, [r0]
	lsls r0, r2, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080BFA48
	lsls r0, r2, #5
	ldr r1, _080BFA44  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	b _080BFA50
	.align 2, 0
_080BFA40: .4byte gUnknown_03005280
_080BFA44: .4byte gUnknown_082060B0
_080BFA48:
	lsls r0, r2, #5
	ldr r1, _080BFA6C  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0, #3]
_080BFA50:
	lsls r0, r0, #4
	ldr r1, _080BFA70  @ gUnknown_08205FA0
	adds r6, r0, r1
	movs r0, #0xa
	ldrsb r0, [r6, r0]
	cmp r0, #0x10
	beq _080BFA74
	cmp r0, #0x10
	ble _080BFA66
	cmp r0, #0x20
	beq _080BFA78
_080BFA66:
	movs r1, #0
	b _080BFA7A
	.align 2, 0
_080BFA6C: .4byte gUnknown_082060B0
_080BFA70: .4byte gUnknown_08205FA0
_080BFA74:
	movs r1, #1
	b _080BFA7A
_080BFA78:
	movs r1, #2
_080BFA7A:
	adds r0, r5, #0
	bl sub_80C1370
	adds r3, r0, #0
	adds r3, #0x29
	ldrb r1, [r3]
	movs r2, #1
	orrs r1, r2
	strb r1, [r3]
	adds r5, #0x29
	ldrb r3, [r5]
	lsls r3, r3, #5
	ldr r4, _080BFAE0  @ gUnknown_082060B0
	adds r3, r3, r4
	movs r1, #0xa
	ldrsb r1, [r6, r1]
	lsrs r2, r1, #0x1f
	adds r1, r1, r2
	asrs r1, r1, #1
	movs r2, #8
	ldrsb r2, [r6, r2]
	subs r1, r1, r2
	ldrh r3, [r3, #0x18]
	adds r1, r1, r3
	strh r1, [r0, #0x2c]
	ldrb r3, [r5]
	lsls r3, r3, #5
	adds r3, r3, r4
	movs r1, #0xb
	ldrsb r1, [r6, r1]
	lsrs r2, r1, #0x1f
	adds r1, r1, r2
	asrs r1, r1, #1
	movs r2, #9
	ldrsb r2, [r6, r2]
	subs r1, r1, r2
	ldrh r3, [r3, #0x1a]
	adds r1, r1, r3
	strh r1, [r0, #0x2e]
	ldr r0, _080BFAE4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080BFADA
	ldr r0, _080BFAE8  @ 0x00000311
	bl m4aSongNumStart
_080BFADA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080BFAE0: .4byte gUnknown_082060B0
_080BFAE4: .4byte gUnknown_0202BCF0
_080BFAE8: .4byte 0x00000311

	THUMB_FUNC_START sub_80BFAEC
sub_80BFAEC: @ 0x080BFAEC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	cmp r1, #0
	beq _080BFB04
	ldr r0, _080BFB00  @ gUnknown_08A3E594
	bl Proc_CreateBlockingChild
	b _080BFB0C
	.align 2, 0
_080BFB00: .4byte gUnknown_08A3E594
_080BFB04:
	ldr r0, _080BFB20  @ gUnknown_08A3E594
	movs r1, #3
	bl Proc_Create
_080BFB0C:
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x29
	strb r4, [r2]
	adds r1, #0x2a
	strb r5, [r1]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080BFB20: .4byte gUnknown_08A3E594

	THUMB_FUNC_START sub_80BFB24
sub_80BFB24: @ 0x080BFB24
	push {lr}
	ldr r0, _080BFB30  @ gUnknown_08A3E594
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080BFB30: .4byte gUnknown_08A3E594

	THUMB_FUNC_START sub_80BFB34
sub_80BFB34: @ 0x080BFB34
	push {lr}
	ldr r0, _080BFB48  @ gUnknown_08A3E594
	bl Proc_Find
	cmp r0, #0
	beq _080BFB42
	movs r0, #1
_080BFB42:
	pop {r1}
	bx r1
	.align 2, 0
_080BFB48: .4byte gUnknown_08A3E594

	THUMB_FUNC_START sub_80BFB4C
sub_80BFB4C: @ 0x080BFB4C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080BFB88  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	adds r5, r4, #0
	adds r5, #0x29
	ldrb r1, [r5]
	movs r2, #0
	bl sub_80BE080
	ldr r0, _080BFB8C  @ gUnknown_03005280
	ldrb r1, [r5]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrb r2, [r1, #0x10]
	movs r0, #1
	orrs r0, r2
	strb r0, [r1, #0x10]
	bl sub_80C13D8
	adds r4, #0x30
	adds r0, r4, #0
	bl sub_80BF7DC
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BFB88: .4byte gUnknown_08A3D748
_080BFB8C: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80BFB90
sub_80BFB90: @ 0x080BFB90
	push {r4, lr}
	sub sp, #4
	adds r0, #0x30
	bl sub_80BF7B4
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BFBCC
sub_80BFBCC: @ 0x080BFBCC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080BFC14  @ gUnknown_03005280
	adds r5, r4, #0
	adds r5, #0x29
	ldrb r1, [r5]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrb r2, [r1, #0x10]
	movs r0, #1
	orrs r0, r2
	strb r0, [r1, #0x10]
	ldr r0, _080BFC18  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	ldrb r1, [r5]
	movs r2, #1
	bl sub_80BE080
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r2, [r0]
	cmp r2, #0
	beq _080BFC1C
	cmp r2, #1
	beq _080BFC28
	adds r0, #1
	b _080BFC2E
	.align 2, 0
_080BFC14: .4byte gUnknown_03005280
_080BFC18: .4byte gUnknown_08A3D748
_080BFC1C:
	adds r1, r4, #0
	adds r1, #0x2b
	movs r0, #2
	strb r0, [r1]
	adds r0, r1, #0
	b _080BFC2E
_080BFC28:
	adds r0, r4, #0
	adds r0, #0x2b
	strb r2, [r0]
_080BFC2E:
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x2c
	movs r2, #0
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80BFC44
sub_80BFC44: @ 0x080BFC44
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bgt _080BFCBC
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq _080BFC6A
	cmp r0, #1
	beq _080BFC74
	adds r1, #1
	b _080BFC7E
_080BFC6A:
	adds r1, r4, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	adds r0, #1
	b _080BFC7C
_080BFC74:
	adds r1, r4, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	adds r0, #2
_080BFC7C:
	strb r0, [r1]
_080BFC7E:
	ldrb r0, [r1]
	cmp r0, #0xf
	bhi _080BFCA2
	adds r1, r0, #0
	movs r2, #0x10
	subs r2, r2, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	b _080BFCBC
_080BFCA2:
	ldr r0, _080BFCC4  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	adds r1, r4, #0
	adds r1, #0x29
	ldrb r1, [r1]
	movs r2, #0
	bl sub_80BE080
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080BFCBC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BFCC4: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80BFCC8
sub_80BFCC8: @ 0x080BFCC8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	cmp r1, #0
	beq _080BFCE0
	ldr r0, _080BFCDC  @ gUnknown_08A3E5E4
	bl Proc_CreateBlockingChild
	b _080BFCE8
	.align 2, 0
_080BFCDC: .4byte gUnknown_08A3E5E4
_080BFCE0:
	ldr r0, _080BFCFC  @ gUnknown_08A3E5E4
	movs r1, #3
	bl Proc_Create
_080BFCE8:
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x29
	strb r4, [r2]
	adds r1, #0x2a
	strb r5, [r1]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080BFCFC: .4byte gUnknown_08A3E5E4

	THUMB_FUNC_START sub_80BFD00
sub_80BFD00: @ 0x080BFD00
	push {lr}
	ldr r0, _080BFD0C  @ gUnknown_08A3E5E4
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080BFD0C: .4byte gUnknown_08A3E5E4

	THUMB_FUNC_START sub_80BFD10
sub_80BFD10: @ 0x080BFD10
	push {lr}
	ldr r0, _080BFD24  @ gUnknown_08A3E5E4
	bl Proc_Find
	cmp r0, #0
	beq _080BFD1E
	movs r0, #1
_080BFD1E:
	pop {r1}
	bx r1
	.align 2, 0
_080BFD24: .4byte gUnknown_08A3E5E4

	THUMB_FUNC_START sub_80BFD28
sub_80BFD28: @ 0x080BFD28
	push {r4, lr}
	ldr r0, _080BFD60  @ gUnknown_08A9E5BC
	movs r1, #0x40
	movs r2, #0x20
	bl CopyToPaletteBuffer
	bl EnablePaletteSync
	ldr r0, _080BFD64  @ gUnknown_08A9E544
	ldr r1, _080BFD68  @ 0x06004C00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080BFD6C  @ gUnknown_08A9E5DC
	ldr r4, _080BFD70  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080BFD74  @ gBG0TilemapBuffer
	ldr r2, _080BFD78  @ 0x00002260
	adds r1, r4, #0
	bl CallARM_FillTileRect
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080BFD60: .4byte gUnknown_08A9E5BC
_080BFD64: .4byte gUnknown_08A9E544
_080BFD68: .4byte 0x06004C00
_080BFD6C: .4byte gUnknown_08A9E5DC
_080BFD70: .4byte gUnknown_02020188
_080BFD74: .4byte gBG0TilemapBuffer
_080BFD78: .4byte 0x00002260

	THUMB_FUNC_START nullsub_48
nullsub_48: @ 0x080BFD7C
	bx lr

	THUMB_FUNC_START sub_80BFD80
sub_80BFD80: @ 0x080BFD80
	adds r2, r0, #0
	adds r3, r2, #0
	adds r3, #0x29
	ldrb r1, [r3]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x2b
	movs r1, #0
	strb r1, [r0]
	subs r0, #1
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80BFDA0
sub_80BFDA0: @ 0x080BFDA0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r6, r0, #0
	movs r0, #0
	movs r1, #1
	bl sub_80C1DA0
	str r0, [sp]
	movs r0, #1
	movs r1, #1
	bl sub_80C1DA0
	str r0, [sp, #4]
	movs r3, #0
	movs r7, #0x40
	ldr r0, _080BFEF4  @ 0x000001FF
	adds r5, r0, #0
	movs r4, #0
	ldr r2, [sp, #4]
	ldr r1, [sp]
_080BFDD0:
	subs r0, r7, r3
	ands r0, r5
	strh r0, [r1]
	strh r4, [r2]
	adds r2, #2
	adds r1, #2
	adds r3, #1
	cmp r3, #0x9f
	ble _080BFDD0
	movs r3, #0
	movs r1, #0x2a
	adds r1, r1, r6
	mov r8, r1
	adds r6, #0x2b
	str r6, [sp, #0xc]
	ldrb r2, [r1]
	cmp r3, r2
	bge _080BFE60
	ldr r0, [sp, #4]
	mov sl, r0
	ldr r1, [sp]
	mov r9, r1
_080BFDFC:
	mov r2, r8
	str r2, [sp, #8]
	ldrb r1, [r2]
	movs r0, #0x10
	subs r0, r0, r1
	mov r1, r9
	strh r0, [r1]
	ldrb r5, [r2]
	subs r4, r5, r3
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #1
	negs r0, r0
	adds r1, r5, #0
	str r3, [sp, #0x18]
	bl __divsi3
	adds r6, r0, #0
	adds r6, #0xd
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #1
	negs r0, r0
	adds r1, r5, #0
	bl __divsi3
	adds r7, r0, #0
	adds r7, #0x11
	lsls r0, r4, #3
	subs r4, r4, r0
	adds r0, r4, #0
	adds r1, r5, #0
	bl __divsi3
	adds r0, #0x17
	lsls r0, r0, #0xa
	lsls r1, r7, #5
	adds r0, r0, r1
	adds r0, r0, r6
	mov r2, sl
	strh r0, [r2]
	movs r0, #2
	add sl, r0
	add r9, r0
	ldr r3, [sp, #0x18]
	adds r3, #1
	ldr r1, [sp, #8]
	ldrb r1, [r1]
	cmp r3, r1
	blt _080BFDFC
_080BFE60:
	movs r3, #0
	ldr r2, [sp, #0xc]
	mov r8, r2
	ldrb r0, [r2]
	cmp r3, r0
	bge _080BFEE0
	movs r1, #0
	str r1, [sp, #0x10]
	movs r2, #0
	str r2, [sp, #0x14]
	mov sl, r2
_080BFE76:
	mov r9, r8
	mov r1, r8
	ldrb r0, [r1]
	subs r1, r0, r3
	movs r4, #0xa0
	subs r4, r4, r1
	lsls r4, r4, #1
	ldr r2, [sp]
	adds r1, r4, r2
	adds r0, #0xc8
	strh r0, [r1]
	mov r0, r8
	ldrb r5, [r0]
	mov r0, sl
	adds r1, r5, #0
	str r3, [sp, #0x18]
	bl __divsi3
	adds r6, r0, #0
	adds r6, #0xd
	ldr r0, [sp, #0x14]
	adds r1, r5, #0
	bl __divsi3
	adds r7, r0, #0
	adds r7, #0x11
	ldr r0, [sp, #0x10]
	adds r1, r5, #0
	bl __divsi3
	adds r0, #0x17
	ldr r1, [sp, #4]
	adds r4, r4, r1
	lsls r0, r0, #0xa
	lsls r1, r7, #5
	adds r0, r0, r1
	adds r0, r0, r6
	strh r0, [r4]
	ldr r2, [sp, #0x10]
	subs r2, #7
	str r2, [sp, #0x10]
	ldr r0, [sp, #0x14]
	subs r0, #0xa
	str r0, [sp, #0x14]
	movs r1, #6
	negs r1, r1
	add sl, r1
	ldr r3, [sp, #0x18]
	adds r3, #1
	mov r2, r9
	ldrb r2, [r2]
	cmp r3, r2
	blt _080BFE76
_080BFEE0:
	bl sub_80C1DC8
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080BFEF4: .4byte 0x000001FF

	THUMB_FUNC_START sub_80BFEF8
sub_80BFEF8: @ 0x080BFEF8
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	bl sub_80BFD28
	movs r5, #0
	str r5, [r4, #0x38]
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x2a
	strb r0, [r2]
	adds r3, r4, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r2, #1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	ldrb r1, [r1]
	subs r0, r0, r1
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	ldrb r1, [r3]
	subs r0, r0, r1
	str r0, [r4, #0x40]
	movs r0, #0
	movs r1, #1
	bl sub_80C1DA0
	adds r2, r0, #0
	add r1, sp, #4
	movs r0, #0x10
	strh r0, [r1]
	ldr r4, _080BFFC0  @ 0x010000A0
	adds r0, r1, #0
	adds r1, r2, #0
	adds r2, r4, #0
	bl CpuSet
	ldr r1, _080BFFC4  @ 0x04000012
	movs r0, #0
	bl sub_80C1DD8
	movs r0, #0
	bl sub_80C1DE8
	movs r0, #1
	movs r1, #1
	bl sub_80C1DA0
	adds r2, r0, #0
	mov r0, sp
	adds r0, #6
	strh r5, [r0]
	adds r1, r2, #0
	adds r2, r4, #0
	bl CpuSet
	ldr r1, _080BFFC8  @ 0x05000054
	movs r0, #1
	bl sub_80C1DD8
	movs r0, #1
	bl sub_80C1DE8
	ldr r2, _080BFFCC  @ gUnknown_0201BE30
	ldrb r0, [r2]
	movs r1, #4
	orrs r0, r1
	strb r0, [r2]
	str r5, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080BFFC0: .4byte 0x010000A0
_080BFFC4: .4byte 0x04000012
_080BFFC8: .4byte 0x05000054
_080BFFCC: .4byte gUnknown_0201BE30

	THUMB_FUNC_START sub_80BFFD0
sub_80BFFD0: @ 0x080BFFD0
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	bl sub_80BFD28
	movs r5, #0
	str r5, [r4, #0x38]
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x2a
	strb r0, [r2]
	adds r3, r4, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r2, #1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	ldrb r1, [r1]
	subs r0, r0, r1
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	ldrb r1, [r3]
	subs r0, r0, r1
	str r0, [r4, #0x40]
	movs r0, #0
	movs r1, #1
	bl sub_80C1DA0
	adds r2, r0, #0
	mov r1, sp
	movs r0, #0x10
	strh r0, [r1]
	ldr r4, _080C0070  @ 0x010000A0
	mov r0, sp
	adds r1, r2, #0
	adds r2, r4, #0
	bl CpuSet
	ldr r1, _080C0074  @ 0x04000012
	movs r0, #0
	bl sub_80C1DD8
	movs r0, #0
	bl sub_80C1DE8
	movs r0, #1
	movs r1, #1
	bl sub_80C1DA0
	adds r2, r0, #0
	mov r0, sp
	adds r0, #2
	strh r5, [r0]
	adds r1, r2, #0
	adds r2, r4, #0
	bl CpuSet
	ldr r1, _080C0078  @ 0x05000054
	movs r0, #1
	bl sub_80C1DD8
	movs r0, #1
	bl sub_80C1DE8
	ldr r2, _080C007C  @ gUnknown_0201BE30
	ldrb r0, [r2]
	movs r1, #4
	orrs r0, r1
	strb r0, [r2]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C0070: .4byte 0x010000A0
_080C0074: .4byte 0x04000012
_080C0078: .4byte 0x05000054
_080C007C: .4byte gUnknown_0201BE30

	THUMB_FUNC_START sub_80C0080
sub_80C0080: @ 0x080C0080
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r0, r6
	str r0, [r4, #0x38]
	ldr r1, [r4, #0x34]
	cmp r0, r1
	bge _080C00F2
	movs r3, #0x30
	ldrsh r2, [r4, r3]
	bl sub_800B7E0
	adds r5, r0, #0
	ldr r0, [r4, #0x3c]
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	adds r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x2a
	strb r1, [r0]
	ldr r0, [r4, #0x40]
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	adds r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x2b
	strb r1, [r0]
	adds r0, r5, #0
	cmp r5, #0
	bge _080C00DA
	adds r0, #0xff
_080C00DA:
	asrs r0, r0, #8
	lsls r1, r0, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	b _080C0134
_080C00F2:
	movs r0, #0
	movs r1, #0
	bl sub_80C1DD8
	adds r5, r6, #0
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x2a
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	adds r1, #1
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	movs r1, #0
	bl Proc_GotoLabel
_080C0134:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80BFDA0
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C0144
sub_80C0144: @ 0x080C0144
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r0, r6
	str r0, [r4, #0x38]
	ldr r1, [r4, #0x34]
	cmp r0, r1
	bge _080C0198
	movs r3, #0x30
	ldrsh r2, [r4, r3]
	bl sub_800B7E0
	adds r5, r0, #0
	ldr r0, [r4, #0x3c]
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	adds r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x2a
	strb r1, [r0]
	ldr r0, [r4, #0x40]
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	adds r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x2b
	strb r1, [r0]
	b _080C01CE
_080C0198:
	movs r0, #0
	movs r1, #0
	bl sub_80C1DD8
	adds r5, r6, #0
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x2a
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	adds r1, #1
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	movs r1, #0
	bl Proc_GotoLabel
_080C01CE:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80BFDA0
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START NewMapMuEntry
NewMapMuEntry: @ 0x080C01DC
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	beq _080C01F0
	ldr r0, _080C01EC  @ gUnknown_08A3E624
	bl Proc_CreateBlockingChild
	b _080C01F8
	.align 2, 0
_080C01EC: .4byte gUnknown_08A3E624
_080C01F0:
	ldr r0, _080C01FC  @ gUnknown_08A3E624
	movs r1, #3
	bl Proc_Create
_080C01F8:
	pop {r1}
	bx r1
	.align 2, 0
_080C01FC: .4byte gUnknown_08A3E624

	THUMB_FUNC_START sub_80C0200
sub_80C0200: @ 0x080C0200
	push {lr}
	ldr r0, _080C020C  @ gUnknown_08A3E624
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080C020C: .4byte gUnknown_08A3E624

	THUMB_FUNC_START sub_80C0210
sub_80C0210: @ 0x080C0210
	push {lr}
	ldr r0, _080C0224  @ gUnknown_08A3E624
	bl Proc_Find
	cmp r0, #0
	beq _080C021E
	movs r0, #1
_080C021E:
	pop {r1}
	bx r1
	.align 2, 0
_080C0224: .4byte gUnknown_08A3E624

	THUMB_FUNC_START sub_80C0228
sub_80C0228: @ 0x080C0228
	push {lr}
	ldr r0, _080C023C  @ gUnknown_08A3E624
	bl Proc_Find
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	pop {r1}
	bx r1
	.align 2, 0
_080C023C: .4byte gUnknown_08A3E624

	THUMB_FUNC_START sub_80C0240
sub_80C0240: @ 0x080C0240
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _080C0298  @ gUnknown_08A3E624
	bl Proc_Find
	adds r2, r0, #0
	movs r0, #0x29
	adds r0, r0, r2
	mov ip, r0
	ldrb r0, [r0]
	movs r3, #1
	ands r3, r0
	cmp r3, #0
	bne _080C029C
	adds r0, r2, #0
	adds r0, #0x2c
	strb r3, [r0]
	adds r1, r2, #0
	adds r1, #0x2d
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2e
	strb r3, [r0]
	adds r1, #2
	movs r0, #0x38
	strb r0, [r1]
	strh r4, [r2, #0x30]
	lsls r0, r5, #0xc
	str r0, [r2, #0x34]
	mov r1, ip
	ldrb r0, [r1]
	movs r1, #1
	orrs r0, r1
	mov r1, ip
	strb r0, [r1]
	adds r0, r2, #0
	movs r1, #1
	bl Proc_GotoLabel
	movs r0, #0
	b _080C029E
	.align 2, 0
_080C0298: .4byte gUnknown_08A3E624
_080C029C:
	movs r0, #1
_080C029E:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C02A4
sub_80C02A4: @ 0x080C02A4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _080C02FC  @ gUnknown_08A3E624
	bl Proc_Find
	adds r2, r0, #0
	movs r0, #0x29
	adds r0, r0, r2
	mov ip, r0
	ldrb r0, [r0]
	movs r3, #1
	ands r3, r0
	cmp r3, #0
	bne _080C0300
	adds r1, r2, #0
	adds r1, #0x2c
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2d
	strb r3, [r0]
	adds r1, #2
	movs r0, #0x38
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2f
	strb r3, [r0]
	strh r4, [r2, #0x30]
	lsls r0, r5, #0xc
	str r0, [r2, #0x34]
	mov r1, ip
	ldrb r0, [r1]
	movs r1, #1
	orrs r0, r1
	mov r1, ip
	strb r0, [r1]
	adds r0, r2, #0
	movs r1, #2
	bl Proc_GotoLabel
	movs r0, #0
	b _080C0302
	.align 2, 0
_080C02FC: .4byte gUnknown_08A3E624
_080C0300:
	movs r0, #1
_080C0302:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C0308
sub_80C0308: @ 0x080C0308
	push {r4, lr}
	sub sp, #4
	ldr r2, _080C0354  @ gUnknown_0201BE30
	ldrb r1, [r2]
	movs r0, #0xfb
	ands r0, r1
	strb r0, [r2]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C0354: .4byte gUnknown_0201BE30

	THUMB_FUNC_START sub_80C0358
sub_80C0358: @ 0x080C0358
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	movs r0, #0
	movs r1, #1
	bl sub_80C1DA0
	mov r9, r0
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	movs r2, #0
	bl sub_800B84C
	movs r6, #0x80
	lsls r6, r6, #5
	lsls r5, r0, #7
	negs r5, r5
	adds r0, r6, #0
	adds r1, r5, #0
	bl DivArm
	adds r4, r0, #0
	adds r4, #0x80
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r0, r6, #0
	adds r1, r5, #0
	bl DivArm
	adds r0, #0x50
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	movs r7, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r5, r9
_080C03AA:
	cmp r7, r4
	blt _080C03B2
	movs r0, #0
	b _080C03D8
_080C03B2:
	mov r1, r8
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	cmp r7, r0
	blt _080C03D6
	subs r0, r7, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #0x30
	movs r2, #0
	bl sub_800B84C
	subs r0, r6, r0
	lsls r1, r0, #4
	adds r0, r6, #0
	bl DivArm
	b _080C03D8
_080C03D6:
	movs r0, #0x10
_080C03D8:
	strh r0, [r5]
	adds r5, #2
	adds r7, #1
	cmp r7, #0x4f
	ble _080C03AA
	mov r1, r9
	movs r0, #0x9f
	lsls r0, r0, #1
	adds r2, r1, r0
	movs r7, #0x4f
_080C03EC:
	ldrh r0, [r1]
	strh r0, [r2]
	adds r1, #2
	subs r2, #2
	subs r7, #1
	cmp r7, #0
	bge _080C03EC
	bl sub_80C1DC8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C040C
sub_80C040C: @ 0x080C040C
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #2
	bne _080C0426
	movs r0, #1
	movs r1, #0
	bl NewFadeIn
	movs r0, #0x64
	b _080C0430
_080C0426:
	movs r0, #2
	movs r1, #0
	bl NewFadeIn
	movs r0, #0x32
_080C0430:
	strh r0, [r4, #0x2c]
	movs r5, #0
	strh r5, [r4, #0x2a]
	add r1, sp, #4
	movs r0, #0x10
	strh r0, [r1]
	movs r0, #0
	movs r1, #0
	bl sub_80C1DA0
	adds r1, r0, #0
	add r0, sp, #4
	ldr r2, _080C04BC  @ 0x010000A0
	bl CpuSet
	ldr r1, _080C04C0  @ 0x04000054
	movs r0, #0
	bl sub_80C1DD8
	movs r0, #0
	bl sub_80C1DE8
	movs r0, #3
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	ldr r2, _080C04C4  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r4, #4
	orrs r0, r4
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	ldr r1, _080C04C8  @ gUnknown_0201BE30
	ldrb r0, [r1]
	orrs r0, r4
	strb r0, [r1]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C04BC: .4byte 0x010000A0
_080C04C0: .4byte 0x04000054
_080C04C4: .4byte gLCDControlBuffer
_080C04C8: .4byte gUnknown_0201BE30

	THUMB_FUNC_START sub_80C04CC
sub_80C04CC: @ 0x080C04CC
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2a]
	adds r0, #1
	strh r0, [r2, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r3, #0x2c
	ldrsh r1, [r2, r3]
	cmp r0, r1
	bge _080C04EA
	adds r0, r2, #0
	bl sub_80C0358
	b _080C04F0
_080C04EA:
	adds r0, r2, #0
	bl Proc_ClearNativeCallback
_080C04F0:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C04F4
sub_80C04F4: @ 0x080C04F4
	push {r4, lr}
	adds r4, r0, #0
	cmp r1, #0
	beq _080C0508
	ldr r0, _080C0504  @ gUnknown_08A3E6AC
	bl Proc_CreateBlockingChild
	b _080C0510
	.align 2, 0
_080C0504: .4byte gUnknown_08A3E6AC
_080C0508:
	ldr r0, _080C051C  @ gUnknown_08A3E6AC
	movs r1, #3
	bl Proc_Create
_080C0510:
	adds r1, r0, #0
	adds r1, #0x29
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080C051C: .4byte gUnknown_08A3E6AC

	THUMB_FUNC_START sub_80C0520
sub_80C0520: @ 0x080C0520
	push {lr}
	ldr r0, _080C052C  @ gUnknown_08A3E6AC
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080C052C: .4byte gUnknown_08A3E6AC

	THUMB_FUNC_START sub_80C0530
sub_80C0530: @ 0x080C0530
	push {lr}
	ldr r0, _080C0544  @ gUnknown_08A3E6AC
	bl Proc_Find
	cmp r0, #0
	beq _080C053E
	movs r0, #1
_080C053E:
	pop {r1}
	bx r1
	.align 2, 0
_080C0544: .4byte gUnknown_08A3E6AC

	THUMB_FUNC_START nullsub_47
nullsub_47: @ 0x080C0548
	bx lr

	THUMB_FUNC_START sub_80C054C
sub_80C054C: @ 0x080C054C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	movs r7, #0
	adds r5, r1, #0
	mov r6, r8
	adds r6, #0x32
	mov r4, r8
	adds r4, #0x30
_080C0560:
	ldr r0, _080C05A8  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	mov r1, r8
	adds r1, #0x2e
	adds r1, r1, r7
	ldrb r1, [r1]
	adds r2, r4, #0
	adds r3, r6, #0
	bl sub_80BE3A0
	ldrh r0, [r5]
	strh r0, [r4, #0x10]
	ldrh r1, [r5, #2]
	strh r1, [r4, #0x12]
	ldrh r2, [r4]
	adds r0, r0, r2
	strh r0, [r4, #8]
	ldrh r0, [r4, #2]
	adds r1, r1, r0
	strh r1, [r4, #0xa]
	adds r5, #4
	adds r6, #4
	adds r4, #4
	adds r7, #1
	cmp r7, #1
	ble _080C0560
	movs r0, #0
	mov r1, r8
	strh r0, [r1, #0x2a]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C05A8: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80C05AC
sub_80C05AC: @ 0x080C05AC
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080C05C0  @ gUnknown_082068F4
	bl sub_80C054C
	movs r0, #0x10
	strh r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C05C0: .4byte gUnknown_082068F4

	THUMB_FUNC_START sub_80C05C4
sub_80C05C4: @ 0x080C05C4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080C05EC  @ gUnknown_082068FC
	bl sub_80C054C
	movs r0, #5
	strh r0, [r4, #0x2c]
	ldr r0, _080C05F0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080C05E4
	ldr r0, _080C05F4  @ 0x00000313
	bl m4aSongNumStart
_080C05E4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C05EC: .4byte gUnknown_082068FC
_080C05F0: .4byte gUnknown_0202BCF0
_080C05F4: .4byte 0x00000313

	THUMB_FUNC_START sub_80C05F8
sub_80C05F8: @ 0x080C05F8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080C060C  @ gUnknown_08206904
	bl sub_80C054C
	movs r0, #5
	strh r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C060C: .4byte gUnknown_08206904

	THUMB_FUNC_START sub_80C0610
sub_80C0610: @ 0x080C0610
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r5, #0x2c]
	cmp r0, r1
	bcs _080C06A4
	ldrh r0, [r5, #0x2a]
	ldrh r1, [r5, #0x2c]
	movs r2, #1
	bl sub_800B7E0
	mov r8, r0
	movs r7, #0
	movs r2, #0x2e
	adds r2, r2, r5
	mov r9, r2
	movs r3, #0x80
	lsls r3, r3, #5
	mov sl, r3
	adds r6, r5, #0
	adds r6, #0x30
_080C064A:
	movs r1, #0x10
	ldrsh r0, [r6, r1]
	mov r1, r8
	muls r1, r0, r1
	mov r0, sl
	bl DivArm
	ldrh r5, [r6]
	adds r5, r5, r0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	movs r2, #0x12
	ldrsh r0, [r6, r2]
	mov r1, r8
	muls r1, r0, r1
	mov r0, sl
	bl DivArm
	ldrh r4, [r6, #2]
	adds r4, r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, _080C06A0  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	mov r3, r9
	adds r1, r3, r7
	ldrb r1, [r1]
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r2, r5, #0
	adds r3, r4, #0
	bl sub_80BE35C
	adds r6, #4
	adds r7, #1
	cmp r7, #1
	ble _080C064A
	b _080C06DC
	.align 2, 0
_080C06A0: .4byte gUnknown_08A3D748
_080C06A4:
	movs r7, #0
	movs r6, #0x2e
	adds r6, r6, r5
	mov r9, r6
	adds r4, r5, #0
	adds r4, #0x38
_080C06B0:
	ldr r0, _080C06EC  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	mov r2, r9
	adds r1, r2, r7
	ldrb r1, [r1]
	movs r3, #0
	ldrsh r2, [r4, r3]
	movs r6, #2
	ldrsh r3, [r4, r6]
	bl sub_80BE35C
	adds r4, #4
	adds r7, #1
	cmp r7, #1
	ble _080C06B0
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080C06DC:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C06EC: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80C06F0
sub_80C06F0: @ 0x080C06F0
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	adds r7, r0, #0
	ldr r0, _080C07A0  @ gUnknown_08AA1970
	ldr r1, _080C07A4  @ 0x06013000
	bl CopyDataWithPossibleUncomp
	movs r5, #0
	movs r4, #0
	mov r6, sp
	adds r6, #0xa
_080C0706:
	ldr r0, _080C07A8  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	adds r1, r7, #0
	adds r1, #0x2e
	adds r1, r1, r4
	ldrb r1, [r1]
	add r2, sp, #8
	adds r3, r6, #0
	bl sub_80BE3A0
	add r1, sp, #8
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	ldrh r1, [r1]
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	adds r4, #1
	cmp r4, #1
	ble _080C0706
	lsls r0, r5, #0x10
	asrs r1, r0, #0x10
	lsrs r0, r0, #0x1f
	adds r1, r1, r0
	add r2, sp, #8
	ldr r3, _080C07AC  @ gUnknown_03005280
	ldrh r0, [r3, #2]
	asrs r1, r1, #1
	subs r1, r1, r0
	strh r1, [r2]
	adds r0, r2, #0
	subs r1, #0x14
	strh r1, [r0]
	ldrh r0, [r6]
	subs r0, #0xc
	ldrh r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x9f
	bhi _080C0784
	adds r0, r2, #0
	ldrh r0, [r0]
	cmp r0, #0xef
	bhi _080C0784
	ldr r0, _080C07B0  @ gUnknown_08AA1C70
	adds r1, r2, #0
	movs r2, #0
	ldrsh r1, [r1, r2]
	movs r3, #0
	ldrsh r2, [r6, r3]
	movs r3, #0xe6
	lsls r3, r3, #6
	movs r4, #0
	str r4, [sp]
	movs r4, #7
	str r4, [sp, #4]
	bl APProc_Create
	str r0, [r7, #0x48]
_080C0784:
	ldr r0, _080C07B4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080C0798
	movs r0, #0xc5
	lsls r0, r0, #2
	bl m4aSongNumStart
_080C0798:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C07A0: .4byte gUnknown_08AA1970
_080C07A4: .4byte 0x06013000
_080C07A8: .4byte gUnknown_08A3D748
_080C07AC: .4byte gUnknown_03005280
_080C07B0: .4byte gUnknown_08AA1C70
_080C07B4: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80C07B8
sub_80C07B8: @ 0x080C07B8
	push {r4, lr}
	adds r4, r0, #0
	bl APProc_Exists
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080C07CC
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C07CC:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C07D4
sub_80C07D4: @ 0x080C07D4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	cmp r1, #0
	beq _080C07EC
	ldr r0, _080C07E8  @ gUnknown_08A3E6E4
	bl Proc_CreateBlockingChild
	b _080C07F4
	.align 2, 0
_080C07E8: .4byte gUnknown_08A3E6E4
_080C07EC:
	ldr r0, _080C0808  @ gUnknown_08A3E6E4
	movs r1, #3
	bl Proc_Create
_080C07F4:
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x2f
	strb r4, [r2]
	adds r1, #0x2e
	strb r5, [r1]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080C0808: .4byte gUnknown_08A3E6E4

	THUMB_FUNC_START sub_80C080C
sub_80C080C: @ 0x080C080C
	push {lr}
	ldr r0, _080C0818  @ gUnknown_08A3E6E4
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080C0818: .4byte gUnknown_08A3E6E4

	THUMB_FUNC_START sub_80C081C
sub_80C081C: @ 0x080C081C
	push {lr}
	ldr r0, _080C0830  @ gUnknown_08A3E6E4
	bl Proc_Find
	cmp r0, #0
	beq _080C082A
	movs r0, #1
_080C082A:
	pop {r1}
	bx r1
	.align 2, 0
_080C0830: .4byte gUnknown_08A3E6E4

	THUMB_FUNC_START sub_80C0834
sub_80C0834: @ 0x080C0834
	push {r4, lr}
	ldr r4, [sp, #8]
	subs r2, r2, r0
	subs r3, r3, r1
	adds r0, r2, #0
	muls r0, r2, r0
	adds r1, r3, #0
	muls r1, r3, r1
	adds r0, r0, r1
	lsls r0, r4
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START GetWMCenteredCameraPosition
GetWMCenteredCameraPosition: @ 0x080C0858
	push {lr}
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	subs r0, #0x78
	strh r0, [r2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _080C0872
	movs r0, #0
	b _080C0878
_080C0872:
	cmp r0, #0xf0
	ble _080C087A
	movs r0, #0xf0
_080C0878:
	strh r0, [r2]
_080C087A:
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	subs r0, #0x50
	strh r0, [r3]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _080C088E
	movs r0, #0
	b _080C0894
_080C088E:
	cmp r0, #0xa0
	ble _080C0896
	movs r0, #0xa0
_080C0894:
	strh r0, [r3]
_080C0896:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C089C
sub_80C089C: @ 0x080C089C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	mov ip, r0
	mov r8, r1
	adds r6, r2, #0
	adds r7, r3, #0
	mov r2, sp
	ldr r1, _080C0928  @ gUnknown_03005280
	ldr r0, [r1, #8]
	asrs r0, r0, #8
	strh r0, [r2]
	adds r2, #2
	ldr r0, [r1, #0xc]
	asrs r0, r0, #8
	strh r0, [r2]
	add r3, sp, #4
	ldrh r0, [r1, #2]
	strh r0, [r3]
	mov r5, sp
	adds r5, #6
	ldrh r0, [r1, #4]
	strh r0, [r5]
	mov r4, sp
	mov r0, sp
	ldrh r1, [r3]
	subs r1, #8
	ldrh r0, [r0]
	subs r0, r0, r1
	strh r0, [r4]
	ldrh r1, [r5]
	subs r1, #8
	ldrh r0, [r2]
	subs r0, r0, r1
	strh r0, [r2]
	mov r0, ip
	cmp r0, #0
	bne _080C08F0
	mov r1, r8
	cmp r1, #0
	beq _080C0906
_080C08F0:
	mov r0, sp
	movs r3, #0
	ldrsh r1, [r0, r3]
	movs r0, #0x78
	subs r0, r0, r7
	cmp r1, r0
	blt _080C0906
	adds r0, r6, #0
	adds r0, #0x78
	cmp r1, r0
	blt _080C0924
_080C0906:
	cmp r6, #0
	bne _080C090E
	cmp r7, #0
	beq _080C092C
_080C090E:
	movs r0, #0
	ldrsh r1, [r2, r0]
	movs r0, #0x50
	mov r3, ip
	subs r0, r0, r3
	cmp r1, r0
	blt _080C092C
	mov r0, r8
	adds r0, #0x50
	cmp r1, r0
	bge _080C092C
_080C0924:
	movs r0, #4
	b _080C0954
	.align 2, 0
_080C0928: .4byte gUnknown_03005280
_080C092C:
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0x78
	bgt _080C0942
	movs r3, #0
	ldrsh r0, [r2, r3]
	cmp r0, #0x50
	bgt _080C094E
	movs r0, #0
	b _080C0954
_080C0942:
	movs r1, #0
	ldrsh r0, [r2, r1]
	cmp r0, #0x50
	bgt _080C0952
	movs r0, #1
	b _080C0954
_080C094E:
	movs r0, #2
	b _080C0954
_080C0952:
	movs r0, #3
_080C0954:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C0960
sub_80C0960: @ 0x080C0960
	push {r4, lr}
	bl sub_80BCFDC
	adds r4, r0, #0
	ldr r0, _080C0998  @ gUnknown_0202BCF0
	ldrb r1, [r0, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _080C097E
	ldr r0, _080C099C  @ gUnknown_03005280
	bl sub_80BD014
	cmp r0, r4
	beq _080C09AE
_080C097E:
	movs r1, #0
	ldr r0, _080C09A0  @ gUnknown_08206951
	ldrb r0, [r0]
	cmp r1, r0
	bge _080C09AE
	ldr r3, _080C09A4  @ gUnknown_08206948
	adds r2, r0, #0
_080C098C:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r4, r0
	bne _080C09A8
	movs r0, #1
	b _080C09B0
	.align 2, 0
_080C0998: .4byte gUnknown_0202BCF0
_080C099C: .4byte gUnknown_03005280
_080C09A0: .4byte gUnknown_08206951
_080C09A4: .4byte gUnknown_08206948
_080C09A8:
	adds r1, #1
	cmp r1, r2
	blt _080C098C
_080C09AE:
	movs r0, #0
_080C09B0:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C09B8
sub_80C09B8: @ 0x080C09B8
	push {r4, r5, lr}
	sub sp, #8
	movs r4, #0
	str r4, [sp]
	ldr r1, _080C09E0  @ gUnknown_0201B430
	ldr r5, _080C09E4  @ 0x01000140
	mov r0, sp
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _080C09E8  @ gUnknown_0201B930
	adds r2, r5, #0
	bl CpuFastSet
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C09E0: .4byte gUnknown_0201B430
_080C09E4: .4byte 0x01000140
_080C09E8: .4byte gUnknown_0201B930

	THUMB_FUNC_START sub_80C09EC
sub_80C09EC: @ 0x080C09EC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C0A08  @ 0x06013000
	movs r1, #9
	bl LoadDialogueBoxGfx
	ldr r0, _080C0A0C  @ gUnknown_08A3E78C
	adds r1, r4, #0
	bl StartMovingHelpBox
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C0A08: .4byte 0x06013000
_080C0A0C: .4byte gUnknown_08A3E78C

	THUMB_FUNC_START sub_80C0A10
sub_80C0A10: @ 0x080C0A10
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C0A2C  @ gUnknown_08A3E8B8
	bl Proc_Find
	ldr r0, [r0, #0x2c]
	ldr r0, [r0]
	ldrh r1, [r0, #2]
	cmp r1, #0
	beq _080C0A30
	adds r0, r4, #0
	adds r0, #0x4c
	strh r1, [r0]
	b _080C0A38
	.align 2, 0
_080C0A2C: .4byte gUnknown_08A3E8B8
_080C0A30:
	adds r1, r4, #0
	adds r1, #0x4c
	ldr r0, _080C0A40  @ 0x000006BE
	strh r0, [r1]
_080C0A38:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C0A40: .4byte 0x000006BE

	THUMB_FUNC_START sub_80C0A44
sub_80C0A44: @ 0x080C0A44
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C0A60  @ gUnknown_08A3E8B8
	bl Proc_Find
	ldr r0, [r0, #0x2c]
	ldr r0, [r0, #4]
	ldrh r0, [r0, #2]
	adds r4, #0x4c
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C0A60: .4byte gUnknown_08A3E8B8

	THUMB_FUNC_START sub_80C0A64
sub_80C0A64: @ 0x080C0A64
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_080C0A6A:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _080C0A88
	ldr r0, [r1]
	cmp r0, #0
	beq _080C0A88
	ldr r0, [r1, #0xc]
	ldr r1, _080C0A98  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne _080C0A88
	adds r5, #1
_080C0A88:
	adds r4, #1
	cmp r4, #0x3f
	ble _080C0A6A
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080C0A98: .4byte 0x00010004

	THUMB_FUNC_START sub_80C0A9C
sub_80C0A9C: @ 0x080C0A9C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r7, r0, #0
	ldr r0, [r7, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r5, r0, #0
	movs r0, #0x40
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	mov r8, r0
	ldr r4, [r7, #0x2c]
	adds r0, r4, #0
	bl GetUnitEquippedWeaponSlot
	adds r1, r0, #0
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r4, #0
	bl BattleGenerateUiStats
	adds r0, r7, #0
	adds r0, #0x34
	ldr r4, _080C0B80  @ gUnknown_02022F4E
	movs r1, #0
	str r1, [sp]
	str r5, [sp, #4]
	adds r1, r4, #0
	movs r2, #0
	mov r3, r8
	bl DrawTextInline
	ldr r0, [r7, #0x2c]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r1, r4, #0
	adds r1, #0xbc
	movs r2, #7
	str r2, [sp]
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	movs r1, #0x9e
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #3
	movs r2, #0x24
	movs r3, #0x25
	bl sub_8004D5C
	movs r1, #0xa2
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #3
	movs r2, #0x35
	bl sub_8004B0C
	movs r1, #0xde
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #3
	movs r2, #0x22
	movs r3, #0x23
	bl sub_8004D5C
	movs r1, #0xe2
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #3
	movs r2, #0x16
	bl sub_8004B0C
	movs r1, #0xa1
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r1, [r7, #0x2c]
	movs r2, #8
	ldrsb r2, [r1, r2]
	movs r1, #2
	bl DrawDecNumber
	movs r1, #0xa4
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r1, [r7, #0x2c]
	ldrb r2, [r1, #9]
	movs r1, #2
	bl DrawDecNumber
	ldr r0, [r7, #0x2c]
	bl GetUnitCurrentHp
	cmp r0, #0x63
	ble _080C0B84
	movs r1, #0xe0
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #2
	movs r2, #0x14
	movs r3, #0x14
	bl sub_8004D5C
	b _080C0B9A
	.align 2, 0
_080C0B80: .4byte gUnknown_02022F4E
_080C0B84:
	movs r0, #0xe1
	lsls r0, r0, #1
	adds r4, r4, r0
	ldr r0, [r7, #0x2c]
	bl GetUnitCurrentHp
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl DrawDecNumber
_080C0B9A:
	ldr r0, [r7, #0x2c]
	bl GetUnitMaxHp
	cmp r0, #0x63
	ble _080C0BB8
	ldr r0, _080C0BB4  @ gUnknown_02023114
	movs r1, #2
	movs r2, #0x14
	movs r3, #0x14
	bl sub_8004D5C
	b _080C0BCA
	.align 2, 0
_080C0BB4: .4byte gUnknown_02023114
_080C0BB8:
	ldr r4, _080C0C1C  @ gUnknown_02023116
	ldr r0, [r7, #0x2c]
	bl GetUnitMaxHp
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl DrawDecNumber
_080C0BCA:
	ldr r0, _080C0C20  @ gUnknown_03005280
	bl sub_80BD014
	bl sub_80BBA28
	adds r6, r0, #0
	movs r0, #0x48
	adds r1, r6, #0
	bl GetStringTextCenteredPos
	mov r8, r0
	adds r5, r7, #0
	adds r5, #0x3c
	adds r0, r5, #0
	movs r1, #5
	bl Text_Advance
	ldr r4, _080C0C24  @ gUnknown_02022E2E
	movs r0, #0
	str r0, [sp]
	str r6, [sp, #4]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0
	mov r3, r8
	bl DrawTextInline
	adds r4, #0xd2
	bl sub_80C0A64
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl sub_8004B88
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C0C1C: .4byte gUnknown_02023116
_080C0C20: .4byte gUnknown_03005280
_080C0C24: .4byte gUnknown_02022E2E

	THUMB_FUNC_START sub_80C0C28
sub_80C0C28: @ 0x080C0C28
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x34
	movs r1, #8
	bl Text_Init
	adds r4, #0x3c
	adds r0, r4, #0
	movs r1, #9
	bl Text_Init
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C0C44
sub_80C0C44: @ 0x080C0C44
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r2, _080C0CB4  @ gUnknown_03005280
	ldrb r1, [r2, #0x10]
	movs r0, #2
	ands r0, r1
	movs r1, #0
	cmp r0, #0
	bne _080C0C5C
	movs r0, #0x12
	ldrsh r1, [r2, r0]
_080C0C5C:
	adds r0, r1, #0
	bl GetUnitFromCharId
	str r0, [r5, #0x2c]
	bl GetUnitPortraitId
	adds r4, r0, #0
	ldr r0, [r5, #0x2c]
	ldr r0, [r0, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080C0C7A
	adds r4, #1
_080C0C7A:
	bl Font_InitForUIDefault
	bl ResetIconGraphics_
	adds r0, r5, #0
	bl sub_80C0C28
	ldr r1, _080C0CB8  @ gUnknown_02023D0C
	movs r3, #0x80
	lsls r3, r3, #2
	movs r0, #0xd
	str r0, [sp]
	adds r0, r5, #0
	adds r2, r4, #0
	bl sub_8005E98
	adds r0, r4, #0
	bl GetPortraitStructPointer
	ldr r0, [r0]
	cmp r0, #0
	beq _080C0CC0
	ldr r0, _080C0CBC  @ gUnknown_08A01EE4
	movs r1, #0x40
	movs r2, #0x20
	bl CopyToPaletteBuffer
	b _080C0CCA
	.align 2, 0
_080C0CB4: .4byte gUnknown_03005280
_080C0CB8: .4byte gUnknown_02023D0C
_080C0CBC: .4byte gUnknown_08A01EE4
_080C0CC0:
	ldr r0, _080C0CF0  @ gUnknown_08A01F04
	movs r1, #0x40
	movs r2, #0x20
	bl CopyToPaletteBuffer
_080C0CCA:
	bl MU_EndAll
	ldr r0, [r5, #0x2c]
	movs r1, #0xd8
	movs r2, #0x87
	bl MU_CreateForUI
	str r0, [r5, #0x30]
	adds r0, r5, #0
	bl sub_80C0A9C
	movs r0, #7
	bl BG_EnableSyncByMask
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C0CF0: .4byte gUnknown_08A01F04

	THUMB_FUNC_START sub_80C0CF4
sub_80C0CF4: @ 0x080C0CF4
	push {r4, r5, r6, r7, lr}
	ldr r0, _080C0DB0  @ gUnknown_08A3E888
	bl SetupBackgrounds
	ldr r7, _080C0DB4  @ gBG0TilemapBuffer
	adds r0, r7, #0
	movs r1, #0
	bl BG_Fill
	ldr r5, _080C0DB8  @ gBG1TilemapBuffer
	adds r0, r5, #0
	movs r1, #0
	bl BG_Fill
	ldr r6, _080C0DBC  @ gBG2TilemapBuffer
	adds r0, r6, #0
	movs r1, #0
	bl BG_Fill
	movs r0, #7
	bl BG_EnableSyncByMask
	bl LoadGameCoreGfx
	bl SetupMapSpritesPalettes
	ldr r1, _080C0DC0  @ 0x0600B000
	movs r2, #1
	negs r2, r2
	movs r0, #0
	bl sub_8086BB8
	ldr r0, _080C0DC4  @ gUnknown_08A986C0
	ldr r1, _080C0DC8  @ 0x06003000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C0DCC  @ gUnknown_08A98DCC
	movs r1, #0xc0
	movs r2, #0x60
	bl CopyToPaletteBuffer
	bl EnablePaletteSync
	ldr r0, _080C0DD0  @ gUnknown_08A98BF8
	ldr r4, _080C0DD4  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r5, #0
	adds r1, r4, #0
	bl CallARM_FillTileRect
	movs r0, #0xe1
	lsls r0, r0, #2
	adds r5, r5, r0
	ldr r1, _080C0DD8  @ gUnknown_08A98CFC
	movs r4, #0xc3
	lsls r4, r4, #7
	adds r0, r5, #0
	adds r2, r4, #0
	bl CallARM_FillTileRect
	adds r0, r7, #0
	adds r0, #0xc4
	ldr r1, _080C0DDC  @ gUnknown_08A98D58
	adds r2, r4, #0
	bl CallARM_FillTileRect
	movs r1, #0x91
	lsls r1, r1, #2
	adds r0, r7, r1
	ldr r1, _080C0DE0  @ gUnknown_08A98D88
	adds r2, r4, #0
	bl CallARM_FillTileRect
	movs r1, #0xb1
	lsls r1, r1, #2
	adds r0, r7, r1
	ldr r1, _080C0DE4  @ gUnknown_08A98DA0
	adds r2, r4, #0
	bl CallARM_FillTileRect
	ldr r0, _080C0DE8  @ 0x00000432
	adds r6, r6, r0
	ldr r1, _080C0DEC  @ gUnknown_08A98DB8
	adds r0, r6, #0
	adds r2, r4, #0
	bl CallARM_FillTileRect
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C0DB0: .4byte gUnknown_08A3E888
_080C0DB4: .4byte gBG0TilemapBuffer
_080C0DB8: .4byte gBG1TilemapBuffer
_080C0DBC: .4byte gBG2TilemapBuffer
_080C0DC0: .4byte 0x0600B000
_080C0DC4: .4byte gUnknown_08A986C0
_080C0DC8: .4byte 0x06003000
_080C0DCC: .4byte gUnknown_08A98DCC
_080C0DD0: .4byte gUnknown_08A98BF8
_080C0DD4: .4byte gUnknown_02020188
_080C0DD8: .4byte gUnknown_08A98CFC
_080C0DDC: .4byte gUnknown_08A98D58
_080C0DE0: .4byte gUnknown_08A98D88
_080C0DE4: .4byte gUnknown_08A98DA0
_080C0DE8: .4byte 0x00000432
_080C0DEC: .4byte gUnknown_08A98DB8

	THUMB_FUNC_START sub_80C0DF0
sub_80C0DF0: @ 0x080C0DF0
	push {r4, lr}
	sub sp, #4
	ldr r2, _080C0E44  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	bl sub_8001F48
	ldr r0, _080C0E48  @ gPaletteBuffer
	strh r4, [r0]
	bl EnablePaletteSync
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C0E44: .4byte gLCDControlBuffer
_080C0E48: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80C0E4C
sub_80C0E4C: @ 0x080C0E4C
	push {lr}
	bl EndBG3Slider
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C0E58
sub_80C0E58: @ 0x080C0E58
	push {r4, lr}
	sub sp, #4
	ldr r3, _080C0EB8  @ gLCDControlBuffer
	ldrb r1, [r3, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r3, #0xc]
	ldrb r0, [r3, #0x10]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r2, r0
	movs r0, #2
	orrs r2, r0
	strb r2, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	movs r0, #1
	movs r1, #0xd
	movs r2, #3
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C0EB8: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C0EBC
sub_80C0EBC: @ 0x080C0EBC
	push {r4, r5, lr}
	ldr r4, _080C0EFC  @ gUnknown_0202306E
	bl GetGameClock
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	movs r3, #0
	bl sub_8004C68
	adds r5, r4, #0
	subs r5, #0xf0
	bl GetPartyGoldAmount
	adds r2, r0, #0
	adds r0, r5, #0
	movs r1, #2
	bl sub_8004B88
	subs r4, #0xee
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x1e
	bl sub_8004B0C
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C0EFC: .4byte gUnknown_0202306E

	THUMB_FUNC_START sub_80C0F00
sub_80C0F00: @ 0x080C0F00
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _080C0F24  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _080C0F28
	adds r0, r5, #0
	bl sub_80C09EC
	b _080C0F8E
	.align 2, 0
_080C0F24: .4byte gKeyStatusPtr
_080C0F28:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080C0F8E
	ldr r2, _080C0F98  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	bl sub_8001F48
	ldr r0, _080C0F9C  @ gPaletteBuffer
	strh r4, [r0]
	bl EnablePaletteSync
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	ldr r0, _080C0FA0  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080C0F8E
	movs r0, #0x6b
	bl m4aSongNumStart
_080C0F8E:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C0F98: .4byte gLCDControlBuffer
_080C0F9C: .4byte gPaletteBuffer
_080C0FA0: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80C0FA4
sub_80C0FA4: @ 0x080C0FA4
	push {lr}
	movs r0, #0
	bl SetInterrupt_LCDVCountMatch
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C0FB0
sub_80C0FB0: @ 0x080C0FB0
	adds r2, r0, #0
	ldr r3, _080C0FE4  @ gLCDControlBuffer
	ldr r0, [r2, #0x34]
	ldr r1, [r2, #0x38]
	str r0, [r3, #0x3c]
	str r1, [r3, #0x40]
	adds r0, r2, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	adds r0, r3, #0
	adds r0, #0x44
	strb r1, [r0]
	adds r0, r2, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x3e
	ldrb r1, [r0]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	bx lr
	.align 2, 0
_080C0FE4: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C0FE8
sub_80C0FE8: @ 0x080C0FE8
	push {r4, lr}
	sub sp, #4
	adds r3, r0, #0
	movs r0, #0
	strh r0, [r3, #0x30]
	movs r0, #4
	strh r0, [r3, #0x2e]
	strh r0, [r3, #0x2c]
	adds r2, r3, #0
	adds r2, #0x29
	ldrb r0, [r2]
	movs r4, #2
	negs r4, r4
	ands r4, r0
	strb r4, [r2]
	ldr r0, _080C1024  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080C1028
	movs r0, #2
	adds r1, r4, #0
	orrs r1, r0
	strb r1, [r2]
	adds r1, r3, #0
	adds r1, #0x2a
	movs r0, #0xff
	b _080C1036
	.align 2, 0
_080C1024: .4byte gUnknown_03005280
_080C1028:
	movs r0, #3
	negs r0, r0
	ands r0, r4
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x2a
	movs r0, #0
_080C1036:
	strb r0, [r1]
	adds r2, r3, #0
	adds r2, #0x2b
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	ldr r2, _080C10B4  @ gLCDControlBuffer
	ldr r0, [r2, #0x3c]
	ldr r1, [r2, #0x40]
	str r0, [r3, #0x34]
	str r1, [r3, #0x38]
	adds r0, r2, #0
	adds r0, #0x44
	ldrb r1, [r0]
	adds r0, r3, #0
	adds r0, #0x3c
	movs r4, #0
	strb r1, [r0]
	adds r0, r2, #0
	adds r0, #0x45
	ldrb r0, [r0]
	adds r1, r3, #0
	adds r1, #0x3d
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x46
	ldrb r1, [r0]
	adds r0, r3, #0
	adds r0, #0x3e
	strb r1, [r0]
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C10B4: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C10B8
sub_80C10B8: @ 0x080C10B8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	subs r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt _080C1190
	movs r5, #0
	adds r7, r4, #0
	adds r7, #0x29
	movs r0, #0x1f
	mov r8, r0
	ldr r6, _080C10F0  @ gUnknown_02022B68
_080C10D8:
	ldrb r1, [r7]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080C10F4
	movs r1, #0x30
	ldrsh r0, [r4, r1]
	adds r0, r0, r5
	mov r2, r8
	ands r0, r2
	b _080C1102
	.align 2, 0
_080C10F0: .4byte gUnknown_02022B68
_080C10F4:
	adds r1, r5, #0
	adds r1, #0x20
	movs r2, #0x30
	ldrsh r0, [r4, r2]
	subs r0, r1, r0
	mov r1, r8
	ands r0, r1
_080C1102:
	lsls r0, r0, #1
	ldr r1, _080C1160  @ gUnknown_08A97E48
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r6]
	ldrh r0, [r4, #0x30]
	movs r1, #0xf
	subs r1, r1, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r6, #2
	adds r5, #1
	cmp r5, #0xf
	ble _080C10D8
	ldrh r0, [r4, #0x2e]
	movs r5, #0
	strh r0, [r4, #0x2c]
	bl EnablePaletteSync
	ldrh r0, [r4, #0x30]
	adds r0, #1
	strh r0, [r4, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	ble _080C1190
	ldrb r1, [r7]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080C1164
	adds r2, r4, #0
	adds r2, #0x2b
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C1190
	.align 2, 0
_080C1160: .4byte gUnknown_08A97E48
_080C1164:
	adds r1, r4, #0
	adds r1, #0x2a
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _080C1174
	strh r5, [r4, #0x30]
	b _080C1190
_080C1174:
	cmp r0, #0
	ble _080C1190
	strh r5, [r4, #0x30]
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080C1190
	ldrb r1, [r7]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r7]
_080C1190:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C119C
sub_80C119C: @ 0x080C119C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r8, r0
	ldr r2, _080C11C8  @ gUnknown_03005280
	ldrb r1, [r2]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080C11CC
	mov r4, sp
	adds r4, #6
	add r0, sp, #4
	adds r1, r4, #0
	bl GetWMDisplayPosition
	mov sl, r4
	b _080C11DA
	.align 2, 0
_080C11C8: .4byte gUnknown_03005280
_080C11CC:
	add r1, sp, #4
	ldrh r0, [r2, #2]
	strh r0, [r1]
	adds r1, #2
	ldrh r0, [r2, #4]
	strh r0, [r1]
	mov sl, r1
_080C11DA:
	movs r7, #0
	movs r0, #0x2a
	add r0, r8
	mov r9, r0
_080C11E2:
	mov r1, r9
	ldrb r2, [r1]
	lsls r2, r2, #5
	lsls r0, r7, #3
	ldr r1, _080C124C  @ gUnknown_08A3E9A0
	adds r0, r0, r1
	adds r5, r2, r0
	movs r2, #5
	ldrsb r2, [r5, r2]
	mov r3, r8
	ldrh r3, [r3, #0x2c]
	adds r2, r2, r3
	add r0, sp, #4
	ldrh r0, [r0]
	subs r2, r2, r0
	lsls r2, r2, #0x10
	movs r0, #6
	ldrsb r0, [r5, r0]
	mov r1, r8
	ldrh r1, [r1, #0x2e]
	adds r0, r0, r1
	mov r3, sl
	ldrh r1, [r3]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsrs r3, r2, #0x10
	movs r1, #0x80
	lsls r1, r1, #0xe
	adds r2, r2, r1
	lsrs r2, r2, #0x10
	movs r1, #0x88
	lsls r1, r1, #1
	cmp r2, r1
	bhi _080C1274
	lsls r1, r0, #0x10
	movs r2, #0x80
	lsls r2, r2, #0xe
	adds r0, r1, r2
	lsrs r0, r0, #0x10
	adds r2, r1, #0
	cmp r0, #0xc0
	bhi _080C1274
	ldr r0, _080C1250  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080C1254
	movs r6, #0xc
	movs r4, #0xc0
	lsls r4, r4, #4
	b _080C125A
	.align 2, 0
_080C124C: .4byte gUnknown_08A3E9A0
_080C1250: .4byte gUnknown_03005280
_080C1254:
	movs r6, #0xd
	movs r4, #0x80
	lsls r4, r4, #4
_080C125A:
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	asrs r2, r2, #0x10
	ldr r3, [r5]
	ldrb r0, [r5, #4]
	movs r5, #0xc3
	lsls r5, r5, #7
	adds r4, r4, r5
	adds r0, r0, r4
	str r0, [sp]
	adds r0, r6, #0
	bl RegisterObjectAttributes_SafeMaybe
_080C1274:
	adds r7, #1
	cmp r7, #3
	ble _080C11E2
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C128C
sub_80C128C: @ 0x080C128C
	push {lr}
	ldr r0, _080C12A4  @ gUnknown_08A3EA38
	bl sub_80034FC
	cmp r0, #1
	bgt _080C129E
	ldr r0, _080C12A8  @ gUnknown_08A3EA00
	bl Proc_DeleteAllWithScript
_080C129E:
	pop {r0}
	bx r0
	.align 2, 0
_080C12A4: .4byte gUnknown_08A3EA38
_080C12A8: .4byte gUnknown_08A3EA00

	THUMB_FUNC_START sub_80C12AC
sub_80C12AC: @ 0x080C12AC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _080C130C  @ gUnknown_08A3EA38
	bl sub_80034FC
	cmp r0, #1
	bgt _080C12E0
	ldr r0, _080C1310  @ gUnknown_08A97E28
	movs r1, #0xb0
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	bl EnablePaletteSync
	ldr r0, _080C1314  @ gUnknown_08A97C98
	ldr r4, _080C1318  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r1, _080C131C  @ 0x06013000
	adds r0, r4, #0
	movs r2, #6
	movs r3, #4
	bl CopyTileGfxForObj
_080C12E0:
	ldr r4, _080C1320  @ gUnknown_08A3EA00
	adds r0, r4, #0
	bl Proc_Find
	cmp r0, #0
	bne _080C12F4
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_Create
_080C12F4:
	movs r0, #0
	strh r0, [r5, #0x2e]
	strh r0, [r5, #0x2c]
	adds r2, r5, #0
	adds r2, #0x29
	ldrb r1, [r2]
	subs r0, #2
	ands r0, r1
	strb r0, [r2]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C130C: .4byte gUnknown_08A3EA38
_080C1310: .4byte gUnknown_08A97E28
_080C1314: .4byte gUnknown_08A97C98
_080C1318: .4byte gUnknown_02020188
_080C131C: .4byte 0x06013000
_080C1320: .4byte gUnknown_08A3EA00

	THUMB_FUNC_START sub_80C1324
sub_80C1324: @ 0x080C1324
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _080C136C  @ gUnknown_08A3EA00
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	bne _080C133A
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080C133A:
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	movs r4, #1
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _080C1350
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080C1350:
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _080C1364
	adds r0, r5, #0
	bl sub_80C119C
_080C1364:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C136C: .4byte gUnknown_08A3EA00

	THUMB_FUNC_START sub_80C1370
sub_80C1370: @ 0x080C1370
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	cmp r2, #0
	beq _080C1394
	ldr r0, _080C138C  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	ldr r0, _080C1390  @ gUnknown_08A3EA38
	adds r1, r2, #0
	bl Proc_CreateBlockingChild
	b _080C13BC
	.align 2, 0
_080C138C: .4byte gUnknown_03005280
_080C1390: .4byte gUnknown_08A3EA38
_080C1394:
	ldr r0, _080C13AC  @ gUnknown_03005280
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080C13B4
	ldr r0, _080C13B0  @ gUnknown_08A3EA38
	movs r1, #3
	bl Proc_Create
	b _080C13BC
	.align 2, 0
_080C13AC: .4byte gUnknown_03005280
_080C13B0: .4byte gUnknown_08A3EA38
_080C13B4:
	ldr r0, _080C13C8  @ gUnknown_08A3EA38
	movs r1, #3
	bl Proc_CreateBlockingChild
_080C13BC:
	adds r1, r0, #0
	adds r1, #0x2a
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080C13C8: .4byte gUnknown_08A3EA38

	THUMB_FUNC_START sub_80C13CC
sub_80C13CC: @ 0x080C13CC
	push {lr}
	bl Proc_Delete
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C13D8
sub_80C13D8: @ 0x080C13D8
	push {lr}
	ldr r0, _080C13E4  @ gUnknown_08A3EA38
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080C13E4: .4byte gUnknown_08A3EA38

	THUMB_FUNC_START sub_80C13E8
sub_80C13E8: @ 0x080C13E8
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	adds r7, r2, #0
	mov r9, r3
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	mov r8, sp
	ldr r6, _080C1458  @ gUnknown_08A3D748
	adds r0, r6, #0
	bl Proc_Find
	ldr r0, [r0, #0x44]
	ldrh r0, [r0, #0x34]
	mov r1, r8
	strh r0, [r1]
	movs r0, #2
	add r0, sp
	mov r8, r0
	adds r0, r6, #0
	bl Proc_Find
	ldr r0, [r0, #0x44]
	ldrh r1, [r0, #0x36]
	mov r0, r8
	strh r1, [r0]
	mov r0, sp
	ldrh r0, [r0]
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	subs r5, r5, r0
	strh r5, [r7]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	subs r4, r4, r1
	mov r1, r9
	strh r4, [r1]
	adds r4, #0x20
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	cmp r4, #0xdf
	bhi _080C1460
	ldrh r0, [r7]
	adds r0, #0x20
	lsls r0, r0, #0x10
	ldr r1, _080C145C  @ 0x012F0000
	cmp r0, r1
	bhi _080C1460
	movs r0, #1
	b _080C1462
	.align 2, 0
_080C1458: .4byte gUnknown_08A3D748
_080C145C: .4byte 0x012F0000
_080C1460:
	movs r0, #0
_080C1462:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C1470
sub_80C1470: @ 0x080C1470
	push {lr}
	ldr r0, [r0, #0x50]
	cmp r0, #0
	beq _080C147C
	bl AP_Delete
_080C147C:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C1480
sub_80C1480: @ 0x080C1480
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080C151C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080C149E
	movs r0, #0x77
	bl m4aSongNumStart
_080C149E:
	movs r1, #0
	str r1, [r4, #0x50]
	adds r0, r4, #0
	adds r0, #0x64
	strh r1, [r0]
	ldr r4, _080C1520  @ gSinLookup
	movs r0, #0x80
	adds r0, r0, r4
	mov r9, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #2
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl WriteOAMRotScaleData
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C151C: .4byte gUnknown_0202BCF0
_080C1520: .4byte gSinLookup

	THUMB_FUNC_START sub_80C1524
sub_80C1524: @ 0x080C1524
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r4, r7, #0
	adds r4, #0x64
	ldrh r0, [r4]
	adds r1, r0, #1
	strh r1, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #7
	ble _080C154A
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
_080C154A:
	movs r1, #0x80
	lsls r1, r1, #2
	movs r0, #0x80
	lsls r0, r0, #1
	mov sl, r0
	movs r2, #0
	ldrsh r3, [r4, r2]
	movs r0, #8
	str r0, [sp]
	movs r0, #5
	mov r2, sl
	bl sub_8012DCC
	mov r8, r0
	ldr r4, _080C1604  @ gSinLookup
	movs r0, #0x80
	adds r0, r0, r4
	mov r9, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	negs r0, r0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, r9
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl WriteOAMRotScaleData
	ldr r0, [r7, #0x2c]
	subs r0, #8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r7, #0x30]
	subs r1, #8
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	mov r4, sp
	adds r4, #6
	add r2, sp, #4
	adds r3, r4, #0
	bl sub_80C13E8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080C1608
	ldr r0, [r7, #0x50]
	add r1, sp, #4
	movs r2, #0
	ldrsh r1, [r1, r2]
	ldrh r2, [r4]
	movs r4, #0xc0
	lsls r4, r4, #2
	adds r3, r4, #0
	orrs r2, r3
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	bl AP_Update
	b _080C1614
	.align 2, 0
_080C1604: .4byte gSinLookup
_080C1608:
	ldr r0, [r7, #0x50]
	movs r2, #0xec
	lsls r2, r2, #2
	mov r1, sl
	bl AP_Update
_080C1614:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C1624
sub_80C1624: @ 0x080C1624
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r2, r1, #1
	strh r2, [r0]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #0x27
	ble _080C1640
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C1640:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r2, #0x30
	ldrsh r1, [r4, r2]
	mov r5, sp
	adds r5, #2
	mov r2, sp
	adds r3, r5, #0
	bl sub_80C13E8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080C1676
	ldr r0, [r4, #0x50]
	mov r1, sp
	movs r4, #0
	ldrsh r1, [r1, r4]
	ldrh r2, [r5]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r3, r4, #0
	orrs r2, r3
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	bl AP_Update
	b _080C1684
_080C1676:
	ldr r0, [r4, #0x50]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0xec
	lsls r2, r2, #2
	bl AP_Update
_080C1684:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C168C
sub_80C168C: @ 0x080C168C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r0, _080C16CC  @ gUnknown_089ADD4C
	ldr r1, _080C16D0  @ 0x06013000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C16D4  @ gUnknown_089A8EF8
	movs r1, #7
	bl AP_Create
	adds r4, r0, #0
	movs r0, #0x8c
	lsls r0, r0, #5
	strh r0, [r4, #0x22]
	adds r0, r4, #0
	movs r1, #0
	bl AP_SwitchAnimation
	ldr r0, _080C16D8  @ gUnknown_08A3EA70
	movs r1, #3
	bl Proc_Create
	str r4, [r0, #0x50]
	adds r5, #8
	str r5, [r0, #0x2c]
	subs r6, #8
	str r6, [r0, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C16CC: .4byte gUnknown_089ADD4C
_080C16D0: .4byte 0x06013000
_080C16D4: .4byte gUnknown_089A8EF8
_080C16D8: .4byte gUnknown_08A3EA70

	THUMB_FUNC_START sub_80C16DC
sub_80C16DC: @ 0x080C16DC
	push {lr}
	ldr r0, _080C16F0  @ gUnknown_08A3EA70
	bl Proc_Find
	cmp r0, #0
	beq _080C16EA
	movs r0, #1
_080C16EA:
	pop {r1}
	bx r1
	.align 2, 0
_080C16F0: .4byte gUnknown_08A3EA70

	THUMB_FUNC_START sub_80C16F4
sub_80C16F4: @ 0x080C16F4
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r2, _080C1720  @ gUnknown_08206954
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r4, r1, r2
	movs r5, #2
_080C1704:
	bl NextRN_100
	ldr r1, [r4]
	cmp r0, r1
	bge _080C1710
	adds r6, #1
_080C1710:
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge _080C1704
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080C1720: .4byte gUnknown_08206954

	THUMB_FUNC_START sub_80C1724
sub_80C1724: @ 0x080C1724
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	movs r2, #0
	movs r1, #0
	cmp r1, r4
	bge _080C173E
_080C1732:
	adds r0, r5, r1
	ldrb r0, [r0]
	adds r2, r2, r0
	adds r1, #1
	cmp r1, r4
	blt _080C1732
_080C173E:
	cmp r2, #0
	bne _080C1748
	movs r0, #1
	negs r0, r0
	b _080C176E
_080C1748:
	adds r0, r2, #0
	bl NextRN_N
	adds r3, r0, #0
	movs r1, #0
	cmp r1, r4
	bge _080C176C
	ldrb r2, [r5]
	cmp r3, r2
	blt _080C176C
_080C175C:
	adds r1, #1
	cmp r1, r4
	bge _080C176C
	adds r0, r5, r1
	ldrb r0, [r0]
	adds r2, r2, r0
	cmp r3, r2
	bge _080C175C
_080C176C:
	adds r0, r1, #0
_080C176E:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C1774
sub_80C1774: @ 0x080C1774
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r3, r0, #0
	str r1, [sp, #0x18]
	cmp r3, #0
	blt _080C1800
	cmp r3, #9
	ble _080C17F4
	cmp r3, #0x38
	beq _080C17F4
	cmp r3, #0
	blt _080C1800
	ldr r0, _080C17BC  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq _080C17A0
	cmp r0, #3
	beq _080C17C8
_080C17A0:
	movs r2, #0
	ldr r4, _080C17C0  @ gUnknown_082069D8
	ldrb r0, [r4]
	ldr r1, _080C17C4  @ gUnknown_082069EE
	cmp r0, r3
	beq _080C17E2
_080C17AC:
	adds r2, #1
	cmp r2, #0xa
	bhi _080C17E2
	adds r0, r2, r4
	ldrb r0, [r0]
	cmp r0, r3
	bne _080C17AC
	b _080C17E2
	.align 2, 0
_080C17BC: .4byte gUnknown_0202BCF0
_080C17C0: .4byte gUnknown_082069D8
_080C17C4: .4byte gUnknown_082069EE
_080C17C8:
	movs r2, #0
	ldr r4, _080C17F8  @ gUnknown_082069E3
	ldrb r0, [r4]
	ldr r1, _080C17FC  @ gUnknown_08206A51
	cmp r0, r3
	beq _080C17E2
_080C17D4:
	adds r2, #1
	cmp r2, #0xa
	bhi _080C17E2
	adds r0, r2, r4
	ldrb r0, [r0]
	cmp r0, r3
	bne _080C17D4
_080C17E2:
	lsls r0, r2, #3
	adds r0, r0, r2
	adds r4, r0, r1
	adds r0, r2, #0
	bl sub_80C16F4
	mov r8, r0
	cmp r0, #0
	bgt _080C1822
_080C17F4:
	movs r0, #0
	b _080C18C2
	.align 2, 0
_080C17F8: .4byte gUnknown_082069E3
_080C17FC: .4byte gUnknown_08206A51
_080C1800:
	ldr r0, _080C1810  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq _080C180C
	cmp r0, #3
	beq _080C181C
_080C180C:
	ldr r4, _080C1814  @ gUnknown_08206A48
	b _080C181E
	.align 2, 0
_080C1810: .4byte gUnknown_0202BCF0
_080C1814: .4byte gUnknown_08206A48
_080C1818:
	adds r0, r6, #0
	b _080C18C2
_080C181C:
	ldr r4, _080C18D4  @ gUnknown_08206AAB
_080C181E:
	movs r0, #3
	mov r8, r0
_080C1822:
	mov r0, sp
	adds r1, r4, #0
	movs r2, #9
	bl memcpy
	movs r6, #0
	add r1, sp, #0x10
	mov sl, r1
	ldr r3, _080C18D8  @ gUnknown_08206948
	ldr r0, _080C18DC  @ gUnknown_03005280
	ldrb r1, [r0, #0x11]
	movs r2, #0
_080C183A:
	adds r0, r6, r3
	ldrb r0, [r0]
	cmp r0, r1
	bne _080C1848
	mov r4, sp
	adds r0, r4, r6
	strb r2, [r0]
_080C1848:
	adds r6, #1
	cmp r6, #8
	bls _080C183A
	mov r0, sl
	bl StoreRNState
	ldr r5, _080C18E0  @ gUnknown_0300534E
	adds r0, r5, #0
	bl LoadRNState
	movs r6, #0
	cmp r6, r8
	bge _080C18B4
	mov r9, r6
	add r7, sp, #0xc
	ldr r4, [sp, #0x18]
_080C1868:
	mov r0, sp
	movs r1, #9
	bl sub_80C1724
	adds r5, r0, #0
	cmp r5, #0
	blt _080C1818
	ldr r0, _080C18D8  @ gUnknown_08206948
	adds r0, r5, r0
	ldrb r0, [r0]
	strb r0, [r4]
	ldrb r0, [r4]
	bl WMLoc_GetChapterId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r7, #0
	bl sub_8083400
	movs r0, #3
	bl NextRN_N
	adds r1, r7, r0
	ldrb r1, [r1]
	strb r1, [r4, #1]
	mov r1, r9
	strb r1, [r4, #2]
	ldr r2, _080C18E4  @ gUnknown_03005349
	adds r1, r6, r2
	strb r0, [r1]
	mov r1, sp
	adds r0, r1, r5
	mov r2, r9
	strb r2, [r0]
	adds r4, #4
	adds r6, #1
	cmp r6, r8
	blt _080C1868
_080C18B4:
	ldr r0, _080C18E0  @ gUnknown_0300534E
	bl StoreRNState
	mov r0, sl
	bl LoadRNState
	mov r0, r8
_080C18C2:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080C18D4: .4byte gUnknown_08206AAB
_080C18D8: .4byte gUnknown_08206948
_080C18DC: .4byte gUnknown_03005280
_080C18E0: .4byte gUnknown_0300534E
_080C18E4: .4byte gUnknown_03005349

	THUMB_FUNC_START nullsub_72
nullsub_72: @ 0x080C18E8
	bx lr

	THUMB_FUNC_START sub_80C18EC
sub_80C18EC: @ 0x080C18EC
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	bl sub_80BD048
	adds r1, r4, #0
	adds r1, #0x2c
	bl sub_80C1774
	adds r1, r4, #0
	adds r1, #0x38
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080C1918
	adds r0, r4, #0
	movs r1, #0
	bl Proc_GotoLabel
_080C1918:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C1920
sub_80C1920: @ 0x080C1920
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r7, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080C1A30
	ldr r0, _080C1A40  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080C194C
	ldr r0, _080C1A44  @ 0x00000312
	bl m4aSongNumStart
_080C194C:
	movs r6, #0
	adds r0, r7, #0
	adds r0, #0x38
	str r0, [sp, #0x10]
	ldrb r0, [r0]
	cmp r6, r0
	bge _080C1A2A
	add r1, sp, #8
	mov sl, r1
	movs r2, #0xa
	add r2, sp
	mov r9, r2
	add r3, sp, #0xc
	mov r8, r3
	adds r5, r7, #0
	adds r5, #0x2c
	movs r0, #0
	str r0, [sp, #0x14]
_080C1970:
	ldrb r0, [r5]
	lsls r0, r0, #5
	ldr r1, _080C1A48  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrh r0, [r0, #0x18]
	mov r2, sl
	strh r0, [r2]
	ldrb r0, [r5]
	lsls r0, r0, #5
	adds r0, r0, r1
	ldrh r0, [r0, #0x1a]
	mov r3, r9
	strh r0, [r3]
	ldr r0, _080C1A4C  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x44]
	ldrh r0, [r0, #0x34]
	mov r1, r8
	strh r0, [r1]
	mov r4, sp
	adds r4, #0xe
	ldr r0, _080C1A4C  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x44]
	ldrh r2, [r0, #0x36]
	strh r2, [r4]
	mov r3, sl
	ldrh r0, [r3]
	mov r3, r8
	ldrh r1, [r3]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	mov r3, r9
	ldrh r0, [r3]
	subs r0, r0, r2
	adds r0, #8
	lsls r2, r0, #0x10
	lsrs r0, r2, #0x10
	cmp r0, #0xaf
	bhi _080C19EE
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0xef
	bhi _080C19EE
	asrs r1, r1, #0x10
	asrs r2, r2, #0x10
	movs r0, #0
	str r0, [sp]
	movs r0, #7
	str r0, [sp, #4]
	ldr r0, _080C1A50  @ gUnknown_08A97AEC
	movs r3, #0xe2
	lsls r3, r3, #6
	bl APProc_Create
	adds r1, r7, #0
	adds r1, #0x3c
	ldr r2, [sp, #0x14]
	adds r1, r1, r2
	str r0, [r1]
_080C19EE:
	adds r4, r6, #4
	ldrb r1, [r5, #1]
	ldrb r3, [r5]
	adds r0, r4, #0
	movs r2, #1
	bl WM_PutClassSprite
	ldr r0, _080C1A54  @ gUnknown_03005280
	lsls r1, r4, #2
	adds r1, r1, r0
	ldrb r2, [r1, #0x10]
	movs r0, #1
	orrs r0, r2
	strb r0, [r1, #0x10]
	ldr r0, _080C1A4C  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	adds r1, r4, #0
	bl sub_80BDDC4
	adds r5, #4
	ldr r3, [sp, #0x14]
	adds r3, #4
	str r3, [sp, #0x14]
	adds r6, #1
	ldr r0, [sp, #0x10]
	ldrb r0, [r0]
	cmp r6, r0
	blt _080C1970
_080C1A2A:
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
_080C1A30:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C1A40: .4byte gUnknown_0202BCF0
_080C1A44: .4byte 0x00000312
_080C1A48: .4byte gUnknown_082060B0
_080C1A4C: .4byte gUnknown_08A3D748
_080C1A50: .4byte gUnknown_08A97AEC
_080C1A54: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80C1A58
sub_80C1A58: @ 0x080C1A58
	push {r4, lr}
	adds r4, r0, #0
	bl APProc_Exists
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080C1A6C
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C1A6C:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C1A74
sub_80C1A74: @ 0x080C1A74
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	cmp r2, #0
	bne _080C1A8C
	ldr r0, _080C1A88  @ gUnknown_08A3EAA8
	movs r1, #3
	bl Proc_Create
	b _080C1A94
	.align 2, 0
_080C1A88: .4byte gUnknown_08A3EAA8
_080C1A8C:
	ldr r0, _080C1AAC  @ gUnknown_08A3EAA8
	adds r1, r2, #0
	bl Proc_CreateBlockingChild
_080C1A94:
	adds r1, r0, #0
	cmp r4, #0
	beq _080C1AA2
	adds r0, r1, #0
	adds r0, #0x38
	ldrb r0, [r0]
	str r0, [r4]
_080C1AA2:
	adds r0, r1, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080C1AAC: .4byte gUnknown_08A3EAA8

	THUMB_FUNC_START sub_80C1AB0
sub_80C1AB0: @ 0x080C1AB0
	push {r4, lr}
	ldr r0, _080C1AD4  @ gUnknown_08A3EAA8
	bl Proc_DeleteAllWithScript
	movs r4, #0
_080C1ABA:
	ldr r0, _080C1AD8  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	adds r1, r4, #4
	bl MapMU_RemoveUnit
	adds r4, #1
	cmp r4, #2
	ble _080C1ABA
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C1AD4: .4byte gUnknown_08A3EAA8
_080C1AD8: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80C1ADC
sub_80C1ADC: @ 0x080C1ADC
	push {lr}
	ldr r0, _080C1AF4  @ gUnknown_08A3EAA8
	bl Proc_Find
	cmp r0, #0
	beq _080C1AF0
	adds r1, r0, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
_080C1AF0:
	pop {r0}
	bx r0
	.align 2, 0
_080C1AF4: .4byte gUnknown_08A3EAA8

	THUMB_FUNC_START sub_80C1AF8
sub_80C1AF8: @ 0x080C1AF8
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	movs r6, #4
	ldr r0, _080C1B54  @ gUnknown_03005280
	add r1, sp, #4
	mov r8, r1
	adds r5, r0, #0
	adds r5, #0x10
	ldr r3, _080C1B58  @ gUnknown_082060B0
	mov r9, r3
	mov r7, sp
	adds r7, #6
_080C1B16:
	movs r1, #0x12
	ldrsh r0, [r5, r1]
	cmp r0, #0
	beq _080C1BC6
	ldrb r1, [r5, #0x10]
	movs r4, #2
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _080C1B60
	ldr r0, _080C1B5C  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r3, [r0, #0x54]
	ldrb r1, [r5, #0x10]
	adds r0, r4, #0
	ands r0, r1
	movs r2, #0
	cmp r0, #0
	beq _080C1B42
	movs r0, #0x12
	ldrsh r2, [r5, r0]
_080C1B42:
	ldrb r0, [r5, #0x11]
	str r0, [sp]
	adds r0, r3, #0
	adds r1, r6, #0
	movs r3, #1
	negs r3, r3
	bl MapMU_SetUnitClass
	b _080C1B88
	.align 2, 0
_080C1B54: .4byte gUnknown_03005280
_080C1B58: .4byte gUnknown_082060B0
_080C1B5C: .4byte gUnknown_08A3D748
_080C1B60:
	ldr r0, _080C1BDC  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r3, [r0, #0x54]
	ldrb r1, [r5, #0x10]
	adds r0, r4, #0
	ands r0, r1
	movs r2, #0
	cmp r0, #0
	bne _080C1B78
	movs r1, #0x12
	ldrsh r2, [r5, r1]
_080C1B78:
	ldrb r0, [r5, #0x11]
	str r0, [sp]
	adds r0, r3, #0
	adds r1, r6, #0
	movs r3, #1
	negs r3, r3
	bl MapMU_SetUnitChar
_080C1B88:
	ldrb r0, [r5, #0x11]
	lsls r0, r0, #5
	add r0, r9
	ldrh r0, [r0, #0x18]
	mov r3, r8
	strh r0, [r3]
	ldrb r0, [r5, #0x11]
	lsls r0, r0, #5
	add r0, r9
	ldrh r0, [r0, #0x1a]
	strh r0, [r7]
	ldr r4, _080C1BDC  @ gUnknown_08A3D748
	adds r0, r4, #0
	bl Proc_Find
	ldr r0, [r0, #0x54]
	mov r1, r8
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #0
	ldrsh r3, [r7, r1]
	adds r1, r6, #0
	bl sub_80BE35C
	adds r0, r4, #0
	bl Proc_Find
	ldr r0, [r0, #0x54]
	adds r1, r6, #0
	bl sub_80BDDC4
_080C1BC6:
	adds r5, #4
	adds r6, #1
	cmp r6, #6
	ble _080C1B16
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C1BDC: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80C1BE0
sub_80C1BE0: @ 0x080C1BE0
	push {lr}
	ldr r0, _080C1BF4  @ gUnknown_08A3EAA8
	bl Proc_Find
	cmp r0, #0
	beq _080C1BEE
	movs r0, #1
_080C1BEE:
	pop {r1}
	bx r1
	.align 2, 0
_080C1BF4: .4byte gUnknown_08A3EAA8

	THUMB_FUNC_START sub_80C1BF8
sub_80C1BF8: @ 0x080C1BF8
	push {r4, r5, r6, lr}
	ldr r0, _080C1C4C  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	adds r6, r3, #0
	cmp r3, #0xe4
	bne _080C1C0C
	movs r3, #0
_080C1C0C:
	cmp r3, #0x9f
	bhi _080C1C60
	ldr r0, _080C1C50  @ gUnknown_0201C5D1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080C1CB0
	ldr r0, _080C1C54  @ gUnknown_0201C5D0
	ldrb r1, [r0]
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #6
	ldr r1, _080C1C58  @ gUnknown_0201BE32
	adds r0, r0, r1
	lsls r1, r3, #1
	adds r1, r0, r1
	ldr r4, _080C1C5C  @ gUnknown_0201C5C0
	movs r5, #0xa0
	lsls r5, r5, #1
	movs r3, #2
_080C1C36:
	ldr r2, [r4]
	cmp r2, #0
	beq _080C1C40
	ldrh r0, [r1]
	strh r0, [r2]
_080C1C40:
	adds r1, r1, r5
	adds r4, #4
	subs r3, #1
	cmp r3, #0
	bge _080C1C36
	b _080C1CB0
	.align 2, 0
_080C1C4C: .4byte 0x04000006
_080C1C50: .4byte gUnknown_0201C5D1
_080C1C54: .4byte gUnknown_0201C5D0
_080C1C58: .4byte gUnknown_0201BE32
_080C1C5C: .4byte gUnknown_0201C5C0
_080C1C60:
	cmp r3, #0xa0
	bne _080C1CB0
	ldr r0, _080C1C94  @ gUnknown_0201BE30
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _080C1CAC
	ldr r1, _080C1C98  @ gUnknown_0201C5D1
	movs r0, #1
	strb r0, [r1]
	ldr r1, _080C1C9C  @ gUnknown_0201C5D0
	ldr r0, _080C1CA0  @ gUnknown_0201C5CF
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r2, _080C1CA4  @ gUnknown_0201C5B4
	ldr r1, _080C1CA8  @ gUnknown_0201C5C0
	movs r3, #2
_080C1C88:
	ldm r2!, {r0}
	stm r1!, {r0}
	subs r3, #1
	cmp r3, #0
	bge _080C1C88
	b _080C1CB0
	.align 2, 0
_080C1C94: .4byte gUnknown_0201BE30
_080C1C98: .4byte gUnknown_0201C5D1
_080C1C9C: .4byte gUnknown_0201C5D0
_080C1CA0: .4byte gUnknown_0201C5CF
_080C1CA4: .4byte gUnknown_0201C5B4
_080C1CA8: .4byte gUnknown_0201C5C0
_080C1CAC:
	ldr r0, _080C1CEC  @ gUnknown_0201C5D1
	strb r1, [r0]
_080C1CB0:
	movs r3, #0
	cmp r6, #0x9f
	bhi _080C1CB8
	adds r3, r6, #0
_080C1CB8:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	bne _080C1CE4
	ldr r0, _080C1CF0  @ gUnknown_0201BE30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080C1CE4
	ldr r1, _080C1CF4  @ gUnknown_0203E75C
	cmp r3, #0
	bne _080C1CD8
	ldr r0, _080C1CF8  @ gUnknown_0203E754
	ldr r0, [r0]
	str r0, [r1]
_080C1CD8:
	ldr r2, _080C1CFC  @ 0x04000040
	ldr r1, [r1]
	lsls r0, r3, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
_080C1CE4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C1CEC: .4byte gUnknown_0201C5D1
_080C1CF0: .4byte gUnknown_0201BE30
_080C1CF4: .4byte gUnknown_0203E75C
_080C1CF8: .4byte gUnknown_0203E754
_080C1CFC: .4byte 0x04000040

	THUMB_FUNC_START sub_80C1D00
sub_80C1D00: @ 0x080C1D00
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	movs r1, #0
	ldr r0, _080C1D50  @ gUnknown_0201C5D0
	mov r8, r0
	ldr r6, _080C1D54  @ gUnknown_0201C5CF
	ldr r7, _080C1D58  @ gUnknown_0201C5D1
	ldr r0, _080C1D5C  @ gUnknown_0201BE30
	mov ip, r0
	ldr r5, _080C1D60  @ gUnknown_0201C5CC
	movs r2, #0
	ldr r4, _080C1D64  @ gUnknown_0201C5B4
	ldr r3, _080C1D68  @ gUnknown_0201C5C0
_080C1D1C:
	adds r0, r1, r5
	strb r2, [r0]
	stm r4!, {r2}
	stm r3!, {r2}
	adds r1, #1
	cmp r1, #2
	ble _080C1D1C
	movs r0, #0
	strb r0, [r6]
	mov r1, r8
	strb r0, [r1]
	strb r0, [r7]
	mov r1, ip
	strb r0, [r1]
	movs r0, #0
	bl SetPrimaryHBlankHandler
	ldr r0, _080C1D6C  @ sub_80C1BF8
	bl SetPrimaryHBlankHandler
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C1D50: .4byte gUnknown_0201C5D0
_080C1D54: .4byte gUnknown_0201C5CF
_080C1D58: .4byte gUnknown_0201C5D1
_080C1D5C: .4byte gUnknown_0201BE30
_080C1D60: .4byte gUnknown_0201C5CC
_080C1D64: .4byte gUnknown_0201C5B4
_080C1D68: .4byte gUnknown_0201C5C0
_080C1D6C: .4byte sub_80C1BF8

	THUMB_FUNC_START sub_80C1D70
sub_80C1D70: @ 0x080C1D70
	push {r4, lr}
	sub sp, #4
	movs r0, #0
	bl SetPrimaryHBlankHandler
	mov r0, sp
	movs r4, #0
	strh r4, [r0]
	ldr r1, _080C1D94  @ gUnknown_0201BE32
	ldr r2, _080C1D98  @ 0x010003C0
	bl CpuSet
	ldr r0, _080C1D9C  @ gUnknown_0201BE30
	strb r4, [r0]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C1D94: .4byte gUnknown_0201BE32
_080C1D98: .4byte 0x010003C0
_080C1D9C: .4byte gUnknown_0201BE30

	THUMB_FUNC_START sub_80C1DA0
sub_80C1DA0: @ 0x080C1DA0
	adds r3, r0, #0
	ldr r0, _080C1DC0  @ gUnknown_0201C5CF
	ldrb r2, [r0]
	adds r2, r2, r1
	movs r0, #1
	ands r2, r0
	lsls r0, r2, #4
	subs r0, r0, r2
	lsls r0, r0, #6
	lsls r1, r3, #2
	adds r1, r1, r3
	lsls r1, r1, #6
	ldr r2, _080C1DC4  @ gUnknown_0201BE32
	adds r1, r1, r2
	adds r0, r0, r1
	bx lr
	.align 2, 0
_080C1DC0: .4byte gUnknown_0201C5CF
_080C1DC4: .4byte gUnknown_0201BE32

	THUMB_FUNC_START sub_80C1DC8
sub_80C1DC8: @ 0x080C1DC8
	ldr r0, _080C1DD4  @ gUnknown_0201C5CF
	ldrb r1, [r0]
	movs r2, #1
	eors r1, r2
	strb r1, [r0]
	bx lr
	.align 2, 0
_080C1DD4: .4byte gUnknown_0201C5CF

	THUMB_FUNC_START sub_80C1DD8
sub_80C1DD8: @ 0x080C1DD8
	ldr r2, _080C1DE4  @ gUnknown_0201C5B4
	lsls r0, r0, #2
	adds r0, r0, r2
	str r1, [r0]
	bx lr
	.align 2, 0
_080C1DE4: .4byte gUnknown_0201C5B4

	THUMB_FUNC_START sub_80C1DE8
sub_80C1DE8: @ 0x080C1DE8
	ldr r1, _080C1DF8  @ gUnknown_0201C5CC
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r1, #3
	ands r1, r2
	strb r1, [r0]
	bx lr
	.align 2, 0
_080C1DF8: .4byte gUnknown_0201C5CC

	THUMB_FUNC_START sub_80C1DFC
sub_80C1DFC: @ 0x080C1DFC
	ldr r1, _080C1E10  @ gUnknown_0201C5CC
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r1, #3
	ands r1, r2
	movs r2, #1
	orrs r1, r2
	strb r1, [r0]
	bx lr
	.align 2, 0
_080C1E10: .4byte gUnknown_0201C5CC

	THUMB_FUNC_START sub_80C1E14
sub_80C1E14: @ 0x080C1E14
	ldr r1, _080C1E28  @ gUnknown_0201C5CC
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r1, #3
	ands r1, r2
	movs r2, #2
	orrs r1, r2
	strb r1, [r0]
	bx lr
	.align 2, 0
_080C1E28: .4byte gUnknown_0201C5CC

	THUMB_FUNC_START sub_80C1E2C
sub_80C1E2C: @ 0x080C1E2C
	push {lr}
	ldr r0, [r0, #0x14]
	ldrh r1, [r0, #0x2e]
	ldrh r2, [r0, #0x30]
	movs r0, #1
	bl BG_SetPosition
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C1E40
sub_80C1E40: @ 0x080C1E40
	push {lr}
	movs r1, #0x2e
	ldrsh r2, [r0, r1]
	movs r3, #0x30
	ldrsh r1, [r0, r3]
	adds r0, r2, #0
	bl sub_80C2488
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C1E54
sub_80C1E54: @ 0x080C1E54
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x32]
	subs r0, #1
	strh r0, [r1, #0x32]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt _080C1E6A
	adds r0, r1, #0
	bl Proc_ClearNativeCallback
_080C1E6A:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C1E70
sub_80C1E70: @ 0x080C1E70
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	bl sub_80C2488
	movs r0, #0
	strh r0, [r4, #0x34]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C1E8C
sub_80C1E8C: @ 0x080C1E8C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldrh r0, [r7, #0x34]
	adds r0, #1
	strh r0, [r7, #0x34]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x36
	ldrsh r1, [r7, r2]
	cmp r0, r1
	bge _080C1EFE
	movs r1, #0x34
	ldrsh r0, [r7, r1]
	movs r2, #0x36
	ldrsh r1, [r7, r2]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r2, r3, #0
	bl sub_8014CA4
	adds r5, r0, #0
	movs r6, #0x80
	lsls r6, r6, #5
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	movs r2, #0x2a
	ldrsh r1, [r7, r2]
	subs r0, r0, r1
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	ldrh r4, [r7, #0x2a]
	adds r4, r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r1, #0x30
	ldrsh r0, [r7, r1]
	movs r2, #0x2c
	ldrsh r1, [r7, r2]
	subs r0, r0, r1
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	ldrh r1, [r7, #0x2c]
	adds r1, r1, r0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	bl sub_80C2488
	b _080C1F10
_080C1EFE:
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	movs r2, #0x30
	ldrsh r1, [r7, r2]
	bl sub_80C2488
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
_080C1F10:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C1F18
sub_80C1F18: @ 0x080C1F18
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r1, [sp, #0x1c]
	cmp r1, #0
	beq _080C1F34
	ldr r0, _080C1F30  @ gUnknown_08A3EB10
	bl Proc_CreateBlockingChild
	b _080C1F3C
	.align 2, 0
_080C1F30: .4byte gUnknown_08A3EB10
_080C1F34:
	ldr r0, _080C1F58  @ gUnknown_08A3EB10
	movs r1, #3
	bl Proc_Create
_080C1F3C:
	adds r1, r0, #0
	strh r4, [r1, #0x2a]
	strh r5, [r1, #0x2c]
	strh r6, [r1, #0x2e]
	strh r7, [r1, #0x30]
	ldr r0, [sp, #0x14]
	strh r0, [r1, #0x36]
	ldr r0, [sp, #0x18]
	strh r0, [r1, #0x32]
	adds r0, r1, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080C1F58: .4byte gUnknown_08A3EB10

	THUMB_FUNC_START sub_80C1F5C
sub_80C1F5C: @ 0x080C1F5C
	push {lr}
	ldr r0, _080C1F68  @ gUnknown_08A3EB10
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080C1F68: .4byte gUnknown_08A3EB10

	THUMB_FUNC_START sub_80C1F6C
sub_80C1F6C: @ 0x080C1F6C
	push {r4, lr}
	ldr r4, _080C1FD0  @ gUnknown_08A3D748
	adds r0, r4, #0
	bl Proc_Find
	ldr r0, [r0, #0x44]
	ldr r1, [r0, #0x4c]
	adds r1, #0x31
	ldrb r2, [r1]
	movs r0, #4
	orrs r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Find
	ldr r0, [r0, #0x44]
	ldr r1, [r0, #0x4c]
	adds r1, #0x31
	ldrb r2, [r1]
	movs r0, #3
	orrs r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Find
	ldr r0, [r0, #0x48]
	bl sub_80BB6FC
	bl sub_80B8E14
	bl LoadObjUIGfx
	ldr r0, _080C1FD4  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #2
	bl BG_EnableSyncByMask
	bl LoadLegacyUiFrameGraphics
	ldr r2, _080C1FD8  @ gUnknown_03005280
	ldrb r1, [r2]
	movs r0, #9
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C1FD0: .4byte gUnknown_08A3D748
_080C1FD4: .4byte gBG1TilemapBuffer
_080C1FD8: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80C1FDC
sub_80C1FDC: @ 0x080C1FDC
	bx lr

	THUMB_FUNC_START sub_80C1FE0
sub_80C1FE0: @ 0x080C1FE0
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _080C2040  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x44]
	ldr r1, [r0, #0x4c]
	adds r1, #0x31
	ldrb r2, [r1]
	movs r0, #0xfb
	ands r0, r2
	strb r0, [r1]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r0, _080C2044  @ gUnknown_08A99140
	movs r1, #0xc0
	lsls r1, r1, #0x13
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C2048  @ gUnknown_08A9E4C4
	movs r1, #0xa0
	movs r2, #0x80
	bl CopyToPaletteBuffer
	ldr r0, _080C204C  @ gUnknown_08A9DF74
	ldr r4, _080C2050  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C2054  @ gBG1TilemapBuffer
	movs r2, #0xa0
	lsls r2, r2, #7
	adds r1, r4, #0
	bl CallARM_FillTileRect
	movs r0, #2
	bl BG_EnableSyncByMask
	ldr r0, _080C2058  @ gUnknown_08A3EAF0
	adds r1, r5, #0
	bl Proc_Create
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C2040: .4byte gUnknown_08A3D748
_080C2044: .4byte gUnknown_08A99140
_080C2048: .4byte gUnknown_08A9E4C4
_080C204C: .4byte gUnknown_08A9DF74
_080C2050: .4byte gUnknown_02020188
_080C2054: .4byte gBG1TilemapBuffer
_080C2058: .4byte gUnknown_08A3EAF0

	THUMB_FUNC_START sub_80C205C
sub_80C205C: @ 0x080C205C
	push {lr}
	adds r2, r0, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080C2074
	adds r0, r2, #0
	movs r1, #0
	bl Proc_GotoLabel
_080C2074:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C2078
sub_80C2078: @ 0x080C2078
	push {lr}
	adds r2, r0, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _080C2090
	adds r0, r2, #0
	movs r1, #1
	bl Proc_GotoLabel
_080C2090:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C2094
sub_80C2094: @ 0x080C2094
	push {lr}
	adds r2, r0, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080C20AA
	adds r0, r2, #0
	bl Proc_ClearNativeCallback
_080C20AA:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C20B0
sub_80C20B0: @ 0x080C20B0
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	ldr r2, _080C2108  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	strh r4, [r5, #0x2a]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C2108: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C210C
sub_80C210C: @ 0x080C210C
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2a]
	adds r0, #1
	strh r0, [r1, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x4a
	bhi _080C2142
	ldrh r0, [r1, #0x2a]
	lsls r0, r0, #4
	movs r1, #0x4b
	bl __divsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r0, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	b _080C2148
_080C2142:
	adds r0, r1, #0
	bl Proc_ClearNativeCallback
_080C2148:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C214C
sub_80C214C: @ 0x080C214C
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, r9
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	mov sl, r0
	ldr r0, _080C2238  @ gUnknown_08A97ED8
	ldr r1, _080C223C  @ 0x06005000
	bl CopyDataWithPossibleUncomp
	ldr r4, _080C2240  @ gUnknown_08A3D748
	adds r0, r4, #0
	bl Proc_Find
	ldr r0, [r0, #0x44]
	ldr r1, [r0, #0x4c]
	adds r1, #0x31
	ldrb r0, [r1]
	movs r2, #4
	mov r8, r2
	movs r2, #0
	mov r9, r2
	mov r2, r8
	orrs r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Find
	ldr r0, [r0, #0x44]
	ldr r0, [r0, #0x4c]
	adds r0, #0x31
	ldrb r1, [r0]
	movs r5, #3
	orrs r1, r5
	strb r1, [r0]
	adds r0, r4, #0
	bl Proc_Find
	ldr r0, [r0, #0x48]
	bl sub_80BB6FC
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	mov r0, sl
	bl sub_80C22FC
	ldr r4, _080C2244  @ gLCDControlBuffer
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r0, [r4, #0x10]
	ands r1, r0
	movs r6, #1
	orrs r1, r6
	strb r1, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	orrs r0, r5
	strb r0, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	orrs r0, r5
	strb r0, [r4, #0x18]
	mov r0, r9
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	ldrb r0, [r4, #1]
	orrs r0, r6
	movs r1, #2
	orrs r0, r1
	mov r1, r8
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	ldr r2, _080C2248  @ gUnknown_03005280
	ldrb r1, [r2]
	movs r0, #9
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	bl sub_80B8E14
	bl LoadObjUIGfx
	mov r0, r9
	mov r2, sl
	strh r0, [r2, #0x2a]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C2238: .4byte gUnknown_08A97ED8
_080C223C: .4byte 0x06005000
_080C2240: .4byte gUnknown_08A3D748
_080C2244: .4byte gLCDControlBuffer
_080C2248: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80C224C
sub_80C224C: @ 0x080C224C
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2a]
	adds r0, #1
	strh r0, [r1, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x4a
	bhi _080C2284
	ldrh r0, [r1, #0x2a]
	lsls r0, r0, #4
	movs r1, #0x4b
	bl __divsi3
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r1, #0x10
	subs r1, r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	b _080C228A
_080C2284:
	adds r0, r1, #0
	bl Proc_ClearNativeCallback
_080C228A:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C2290
sub_80C2290: @ 0x080C2290
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r5, #2
	ldr r7, _080C22D4  @ gUnknown_03005280
	adds r4, r7, #0
	adds r4, #8
_080C229C:
	movs r1, #0x12
	ldrsh r0, [r4, r1]
	cmp r0, #0
	beq _080C22B4
	ldrb r0, [r7, #0x11]
	ldrb r1, [r4, #0x11]
	cmp r0, r1
	bne _080C22B4
	ldr r0, [r6, #0x54]
	adds r1, r5, #0
	bl MapMU_RemoveUnit
_080C22B4:
	adds r4, #4
	adds r5, #1
	cmp r5, #6
	ble _080C229C
	ldr r0, _080C22D4  @ gUnknown_03005280
	ldrb r1, [r0, #0x10]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080C22D8
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #8
	orrs r0, r1
	b _080C22E2
	.align 2, 0
_080C22D4: .4byte gUnknown_03005280
_080C22D8:
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #0xf7
	ands r0, r1
_080C22E2:
	strb r0, [r2]
	ldr r0, _080C22F8  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	movs r1, #0
	bl sub_80BDE3C
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C22F8: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80C22FC
sub_80C22FC: @ 0x080C22FC
	push {lr}
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080C2318
	ldr r0, _080C231C  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	movs r1, #0
	bl sub_80BDDC4
_080C2318:
	pop {r0}
	bx r0
	.align 2, 0
_080C231C: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80C2320
sub_80C2320: @ 0x080C2320
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C238C  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x48]
	bl sub_80BB708
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r0, r4, #0
	bl sub_80C2290
	ldr r2, _080C2390  @ gLCDControlBuffer
	ldrb r3, [r2, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	strb r0, [r2, #0xc]
	ldrb r0, [r2, #0x10]
	movs r3, #3
	orrs r0, r3
	strb r0, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	orrs r0, r3
	strb r0, [r2, #0x18]
	movs r0, #2
	bl BG_GetMapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #4
	bl BG_EnableSyncByMask
	ldr r2, _080C2394  @ gUnknown_03005280
	ldrb r0, [r2]
	movs r1, #8
	orrs r0, r1
	strb r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C238C: .4byte gUnknown_08A3D748
_080C2390: .4byte gLCDControlBuffer
_080C2394: .4byte gUnknown_03005280

	THUMB_FUNC_START sub_80C2398
sub_80C2398: @ 0x080C2398
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C2410  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x48]
	bl sub_80BB6FC
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r0, r4, #0
	bl sub_80C22FC
	ldr r2, _080C2414  @ gLCDControlBuffer
	ldrb r3, [r2, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	strb r0, [r2, #0xc]
	ldrb r0, [r2, #0x10]
	ands r1, r0
	movs r3, #1
	orrs r1, r3
	strb r1, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	orrs r0, r1
	strb r0, [r2, #0x18]
	ldrb r0, [r2, #1]
	orrs r0, r3
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r2, _080C2418  @ gUnknown_03005280
	ldrb r1, [r2]
	movs r0, #9
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	ldr r0, _080C241C  @ gUnknown_08A3EAF0
	bl Proc_DeleteAllWithScript
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C2410: .4byte gUnknown_08A3D748
_080C2414: .4byte gLCDControlBuffer
_080C2418: .4byte gUnknown_03005280
_080C241C: .4byte gUnknown_08A3EAF0

	THUMB_FUNC_START Make6C_Gmap_RM
Make6C_Gmap_RM: @ 0x080C2420
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	adds r1, r3, #0
	cmp r1, #0
	beq _080C243C
	ldr r0, _080C2438  @ gUnknown_08A3EB50
	bl Proc_CreateBlockingChild
	b _080C2444
	.align 2, 0
_080C2438: .4byte gUnknown_08A3EB50
_080C243C:
	ldr r0, _080C245C  @ gUnknown_08A3EB50
	movs r1, #3
	bl Proc_Create
_080C2444:
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x29
	movs r0, #0xfb
	ands r0, r4
	strb r0, [r2]
	strh r5, [r1, #0x2e]
	strh r6, [r1, #0x30]
	adds r0, r1, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080C245C: .4byte gUnknown_08A3EB50

	THUMB_FUNC_START sub_80C2460
sub_80C2460: @ 0x080C2460
	push {lr}
	ldr r0, _080C246C  @ gUnknown_08A3EB50
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080C246C: .4byte gUnknown_08A3EB50

	THUMB_FUNC_START sub_80C2470
sub_80C2470: @ 0x080C2470
	push {lr}
	ldr r0, _080C2484  @ gUnknown_08A3EB50
	bl Proc_Find
	cmp r0, #0
	beq _080C247E
	movs r0, #1
_080C247E:
	pop {r1}
	bx r1
	.align 2, 0
_080C2484: .4byte gUnknown_08A3EB50

	THUMB_FUNC_START sub_80C2488
sub_80C2488: @ 0x080C2488
	push {r4, r5, lr}
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	ldr r0, _080C24A8  @ gUnknown_08A3EB50
	bl Proc_Find
	cmp r0, #0
	beq _080C24A0
	strh r5, [r0, #0x2e]
	strh r4, [r0, #0x30]
_080C24A0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C24A8: .4byte gUnknown_08A3EB50

	THUMB_FUNC_START GetWMDisplayPosition
GetWMDisplayPosition: @ 0x080C24AC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080C24C4  @ gUnknown_08A3EB50
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	bne _080C24C8
	movs r0, #0
	b _080C24D2
	.align 2, 0
_080C24C4: .4byte gUnknown_08A3EB50
_080C24C8:
	ldrh r0, [r1, #0x2e]
	strh r0, [r4]
	ldrh r0, [r1, #0x30]
	strh r0, [r5]
	movs r0, #1
_080C24D2:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C24D8
sub_80C24D8: @ 0x080C24D8
	push {lr}
	ldr r0, _080C24F4  @ gUnknown_08A3EB50
	bl Proc_Find
	cmp r0, #0
	beq _080C24F0
	adds r2, r0, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
_080C24F0:
	pop {r0}
	bx r0
	.align 2, 0
_080C24F4: .4byte gUnknown_08A3EB50

	THUMB_FUNC_START sub_80C24F8
sub_80C24F8: @ 0x080C24F8
	push {r4, r5, lr}
	ldr r0, _080C2584  @ gUnknown_08A3EB50
	bl Proc_Find
	adds r5, r0, #0
	cmp r5, #0
	beq _080C257E
	ldr r0, _080C2588  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x48]
	bl sub_80BB6FC
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r0, r5, #0
	bl sub_80C22FC
	ldr r2, _080C258C  @ gLCDControlBuffer
	ldrb r3, [r2, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	strb r0, [r2, #0xc]
	ldrb r0, [r2, #0x10]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	orrs r0, r1
	strb r0, [r2, #0x18]
	ldr r3, _080C2590  @ gUnknown_03005280
	ldrb r1, [r3]
	movs r4, #9
	negs r4, r4
	adds r0, r4, #0
	ands r0, r1
	strb r0, [r3]
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	ands r0, r4
	subs r1, #0xc
	ands r0, r1
	strb r0, [r2, #1]
	ldr r0, _080C2594  @ gUnknown_08A3EAF0
	bl Proc_DeleteAllWithScript
	adds r0, r5, #0
	bl Proc_Delete
_080C257E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C2584: .4byte gUnknown_08A3EB50
_080C2588: .4byte gUnknown_08A3D748
_080C258C: .4byte gLCDControlBuffer
_080C2590: .4byte gUnknown_03005280
_080C2594: .4byte gUnknown_08A3EAF0

	THUMB_FUNC_START sub_80C2598
sub_80C2598: @ 0x080C2598
	push {lr}
	bl sub_80B86A4
	lsls r1, r0, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C25B8
sub_80C25B8: @ 0x080C25B8
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r5, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	strh r5, [r4, #0x2a]
	adds r4, #0x29
	movs r0, #1
	strb r0, [r4]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C25F8
sub_80C25F8: @ 0x080C25F8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x2c
	bgt _080C263C
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	movs r1, #0x2d
	movs r2, #0
	bl sub_800B84C
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #5
	lsls r1, r1, #4
	bl DivArm
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	b _080C2652
_080C263C:
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C2652:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C2658
sub_80C2658: @ 0x080C2658
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x2c
	bgt _080C2696
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	movs r1, #0x2d
	movs r2, #0
	bl sub_800B84C
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #5
	lsls r1, r1, #4
	bl DivArm
	movs r1, #0x10
	subs r1, r1, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	b _080C26B4
_080C2696:
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C26B4:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C26BC
sub_80C26BC: @ 0x080C26BC
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	beq _080C26D0
	ldr r0, _080C26CC  @ gUnknown_08A3EBE8
	bl Proc_CreateBlockingChild
	b _080C26D8
	.align 2, 0
_080C26CC: .4byte gUnknown_08A3EBE8
_080C26D0:
	ldr r0, _080C26DC  @ gUnknown_08A3EBE8
	movs r1, #3
	bl Proc_Create
_080C26D8:
	pop {r1}
	bx r1
	.align 2, 0
_080C26DC: .4byte gUnknown_08A3EBE8

	THUMB_FUNC_START sub_80C26E0
sub_80C26E0: @ 0x080C26E0
	push {lr}
	ldr r0, _080C26EC  @ gUnknown_08A3EBE8
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080C26EC: .4byte gUnknown_08A3EBE8

	THUMB_FUNC_START sub_80C26F0
sub_80C26F0: @ 0x080C26F0
	push {lr}
	ldr r0, _080C2704  @ gUnknown_08A3EBE8
	bl Proc_Find
	cmp r0, #0
	beq _080C26FE
	movs r0, #1
_080C26FE:
	pop {r1}
	bx r1
	.align 2, 0
_080C2704: .4byte gUnknown_08A3EBE8

	THUMB_FUNC_START sub_80C2708
sub_80C2708: @ 0x080C2708
	push {lr}
	ldr r0, _080C2718  @ gUnknown_08A3EBE8
	bl Proc_Find
	cmp r0, #0
	bne _080C271C
	movs r0, #0
	b _080C2724
	.align 2, 0
_080C2718: .4byte gUnknown_08A3EBE8
_080C271C:
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
_080C2724:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C2728
sub_80C2728: @ 0x080C2728
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x34]
	bl AP_Delete
	ldr r0, [r4, #0x2c]
	bl AP_Delete
	ldr r0, _080C274C  @ gUnknown_08A3EC48
	bl sub_80034FC
	cmp r0, #1
	bne _080C2746
	bl sub_80C26E0
_080C2746:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C274C: .4byte gUnknown_08A3EC48

	THUMB_FUNC_START sub_80C2750
sub_80C2750: @ 0x080C2750
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	strh r4, [r5, #0x30]
	ldr r0, _080C27A0  @ gUnknown_08A3EC48
	bl sub_80034FC
	cmp r0, #1
	bgt _080C2798
	ldr r0, _080C27A4  @ gUnknown_08A9E688
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
_080C2798:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C27A0: .4byte gUnknown_08A3EC48
_080C27A4: .4byte gUnknown_08A9E688

	THUMB_FUNC_START sub_80C27A8
sub_80C27A8: @ 0x080C27A8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	adds r7, r1, #0
	adds r6, r2, #0
	lsls r4, r3, #0x18
	lsrs r4, r4, #0x18
	mov r5, sp
	adds r5, #2
	mov r0, sp
	adds r1, r5, #0
	bl GetWMDisplayPosition
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r7, r7, r0
	movs r1, #0
	ldrsh r0, [r5, r1]
	subs r6, r6, r0
	cmp r4, #0
	beq _080C27EA
	mov r1, r8
	ldr r0, [r1, #0x34]
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r6
	adds r1, r7, #0
	bl AP_Update
	b _080C27F6
_080C27EA:
	mov r1, r8
	ldr r0, [r1, #0x34]
	adds r1, r7, #0
	adds r2, r6, #0
	bl AP_Update
_080C27F6:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C2804
sub_80C2804: @ 0x080C2804
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldrh r0, [r6, #0x30]
	adds r0, #1
	strh r0, [r6, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x15
	bgt _080C2880
	movs r1, #0x30
	ldrsh r0, [r6, r1]
	movs r1, #0x16
	movs r2, #2
	bl sub_800B7E0
	adds r4, r0, #0
	movs r5, #0x80
	lsls r5, r5, #5
	lsls r1, r4, #4
	adds r0, r5, #0
	bl DivArm
	lsls r1, r0, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	subs r4, r5, r4
	lsls r1, r4, #3
	adds r1, r1, r4
	lsls r1, r1, #1
	adds r0, r5, #0
	bl DivArm
	ldr r3, _080C287C  @ gUnknown_08206AF0
	adds r1, r6, #0
	adds r1, #0x2a
	ldrb r2, [r1]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r3
	movs r3, #8
	ldrsh r2, [r1, r3]
	adds r2, r2, r0
	movs r0, #0xa
	ldrsh r3, [r1, r0]
	adds r0, r6, #0
	adds r1, r2, #0
	adds r2, r3, #0
	movs r3, #1
	bl sub_80C27A8
	b _080C28BA
	.align 2, 0
_080C287C: .4byte gUnknown_08206AF0
_080C2880:
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #0
	strh r0, [r6, #0x30]
	ldr r2, _080C28C0  @ gUnknown_08206AF0
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	movs r1, #8
	ldrsh r2, [r0, r1]
	movs r1, #0xa
	ldrsh r3, [r0, r1]
	adds r0, r6, #0
	adds r1, r2, #0
	adds r2, r3, #0
	movs r3, #0
	bl sub_80C27A8
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
_080C28BA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C28C0: .4byte gUnknown_08206AF0

	THUMB_FUNC_START sub_80C28C4
sub_80C28C4: @ 0x080C28C4
	push {lr}
	ldr r0, _080C28D8  @ gUnknown_08A3EC48
	bl sub_80034FC
	cmp r0, #1
	bne _080C28D4
	bl sub_80C26E0
_080C28D4:
	pop {r0}
	bx r0
	.align 2, 0
_080C28D8: .4byte gUnknown_08A3EC48

	THUMB_FUNC_START sub_80C28DC
sub_80C28DC: @ 0x080C28DC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldrh r0, [r6, #0x30]
	adds r0, #1
	strh r0, [r6, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x15
	bgt _080C2954
	movs r1, #0x30
	ldrsh r0, [r6, r1]
	movs r1, #0x16
	movs r2, #2
	bl sub_800B7E0
	adds r4, r0, #0
	movs r5, #0x80
	lsls r5, r5, #5
	lsls r1, r4, #4
	adds r0, r5, #0
	bl DivArm
	adds r2, r0, #0
	movs r1, #0x10
	subs r1, r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	lsls r1, r4, #3
	adds r1, r1, r4
	lsls r1, r1, #1
	adds r0, r5, #0
	bl DivArm
	ldr r3, _080C2950  @ gUnknown_08206AF0
	adds r1, r6, #0
	adds r1, #0x2a
	ldrb r1, [r1]
	lsls r2, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #2
	adds r2, r2, r3
	movs r3, #8
	ldrsh r1, [r2, r3]
	subs r1, r1, r0
	movs r0, #0xa
	ldrsh r2, [r2, r0]
	adds r0, r6, #0
	movs r3, #1
	bl sub_80C27A8
	b _080C295E
	.align 2, 0
_080C2950: .4byte gUnknown_08206AF0
_080C2954:
	bl SetDefaultColorEffects
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
_080C295E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C2964
sub_80C2964: @ 0x080C2964
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C2988  @ gUnknown_08A3EC48
	bl sub_80034FC
	cmp r0, #1
	bgt _080C2980
	movs r0, #0
	bl sub_80C26BC
	adds r0, r4, #0
	movs r1, #1
	bl Proc_GotoLabel
_080C2980:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C2988: .4byte gUnknown_08A3EC48

	THUMB_FUNC_START sub_80C298C
sub_80C298C: @ 0x080C298C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	mov r5, sp
	adds r5, #2
	mov r0, sp
	adds r1, r5, #0
	bl GetWMDisplayPosition
	ldr r6, _080C29F4  @ gUnknown_08206AF0
	adds r7, r4, #0
	adds r7, #0x2a
	ldrb r1, [r7]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r6
	mov r2, sp
	ldrh r1, [r0, #8]
	ldrh r2, [r2]
	subs r1, r1, r2
	ldrh r2, [r0, #0xa]
	ldrh r0, [r5]
	subs r2, r2, r0
	ldr r0, [r4, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r5, #0x80
	lsls r5, r5, #3
	adds r3, r5, #0
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	orrs r2, r3
	bl AP_Update
	ldrb r1, [r7]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r6
	movs r2, #8
	ldrsh r1, [r0, r2]
	movs r3, #0xa
	ldrsh r2, [r0, r3]
	adds r0, r4, #0
	movs r3, #0
	bl sub_80C27A8
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C29F4: .4byte gUnknown_08206AF0

	THUMB_FUNC_START sub_80C29F8
sub_80C29F8: @ 0x080C29F8
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C298C
	bl sub_80C2708
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080C2A14
	movs r0, #0
	strh r0, [r4, #0x30]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C2A14:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C2A1C
sub_80C2A1C: @ 0x080C2A1C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C298C
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080C2A38
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C2A38:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C2A40
sub_80C2A40: @ 0x080C2A40
	push {r4, r5, lr}
	sub sp, #0x18
	movs r4, #0
	ldr r1, _080C2A68  @ gUnknown_08A3EC48
	mov r0, sp
	bl sub_8003530
	add r5, sp, #0xc
_080C2A50:
	mov r0, sp
	bl sub_8003540
	cmp r0, #0
	beq _080C2A6C
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	stm r5!, {r0}
	adds r4, #1
	b _080C2A50
	.align 2, 0
_080C2A68: .4byte gUnknown_08A3EC48
_080C2A6C:
	cmp r4, #0
	bne _080C2A78
	movs r0, #0
	b _080C2AA4
_080C2A74:
	adds r0, r3, #0
	b _080C2AA4
_080C2A78:
	movs r3, #0
	ldr r5, [sp, #0xc]
_080C2A7C:
	movs r2, #0
	cmp r2, r4
	bge _080C2A96
	cmp r3, r5
	beq _080C2A96
	add r1, sp, #0xc
_080C2A88:
	adds r1, #4
	adds r2, #1
	cmp r2, r4
	bge _080C2A96
	ldr r0, [r1]
	cmp r3, r0
	bne _080C2A88
_080C2A96:
	cmp r2, r4
	beq _080C2A74
	adds r3, #1
	cmp r3, #2
	ble _080C2A7C
	movs r0, #1
	negs r0, r0
_080C2AA4:
	add sp, #0x18
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C2AAC
sub_80C2AAC: @ 0x080C2AAC
	push {lr}
	adds r2, r0, #0
	lsls r2, r2, #0xc
	ldr r0, _080C2ACC  @ 0x06010000
	adds r2, r2, r0
	ldr r3, _080C2AD0  @ gUnknown_08206AF0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r0, [r0]
	adds r1, r2, #0
	bl CopyDataWithPossibleUncomp
	pop {r0}
	bx r0
	.align 2, 0
_080C2ACC: .4byte 0x06010000
_080C2AD0: .4byte gUnknown_08206AF0

	THUMB_FUNC_START sub_80C2AD4
sub_80C2AD4: @ 0x080C2AD4
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	adds r4, r1, #0
	bl sub_80C2A40
	mov r8, r0
	cmp r4, #0
	beq _080C2AF8
	ldr r0, _080C2AF4  @ gUnknown_08A3EC48
	adds r1, r4, #0
	bl Proc_CreateBlockingChild
	b _080C2B00
	.align 2, 0
_080C2AF4: .4byte gUnknown_08A3EC48
_080C2AF8:
	ldr r0, _080C2B70  @ gUnknown_08A3EC48
	movs r1, #3
	bl Proc_Create
_080C2B00:
	adds r7, r0, #0
	mov r0, r8
	adds r1, r6, #0
	bl sub_80C2AAC
	ldr r1, _080C2B74  @ gUnknown_08206AF0
	lsls r0, r6, #1
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r1, #4
	adds r0, r0, r1
	ldr r5, [r0]
	adds r0, r5, #0
	movs r1, #0xd
	bl AP_Create
	str r0, [r7, #0x2c]
	mov r1, r8
	lsls r4, r1, #0xc
	asrs r4, r4, #5
	ldr r2, _080C2B78  @ 0xFFFF9C00
	adds r1, r2, #0
	movs r2, #0
	mov r9, r2
	orrs r4, r1
	strh r4, [r0, #0x22]
	ldr r0, [r7, #0x2c]
	movs r1, #0
	bl AP_SwitchAnimation
	adds r0, r5, #0
	movs r1, #0xd
	bl AP_Create
	str r0, [r7, #0x34]
	strh r4, [r0, #0x22]
	ldr r0, [r7, #0x34]
	movs r1, #1
	bl AP_SwitchAnimation
	adds r0, r7, #0
	adds r0, #0x2a
	strb r6, [r0]
	adds r0, #1
	mov r1, r8
	strb r1, [r0]
	subs r0, #2
	mov r2, r9
	strb r2, [r0]
	adds r0, r7, #0
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080C2B70: .4byte gUnknown_08A3EC48
_080C2B74: .4byte gUnknown_08206AF0
_080C2B78: .4byte 0xFFFF9C00

	THUMB_FUNC_START sub_80C2B7C
sub_80C2B7C: @ 0x080C2B7C
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	cmp r4, #0
	bge _080C2B9C
	ldr r0, _080C2B90  @ gUnknown_08A3EC48
	bl Proc_DeleteAllWithScript
	b _080C2BB8
	.align 2, 0
_080C2B90: .4byte gUnknown_08A3EC48
_080C2B94:
	adds r0, r1, #0
	bl Proc_Delete
	b _080C2BB8
_080C2B9C:
	ldr r1, _080C2BC0  @ gUnknown_08A3EC48
	mov r0, sp
	bl sub_8003530
_080C2BA4:
	mov r0, sp
	bl sub_8003540
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, r4
	beq _080C2B94
	cmp r1, #0
	bne _080C2BA4
_080C2BB8:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C2BC0: .4byte gUnknown_08A3EC48

	THUMB_FUNC_START sub_80C2BC4
sub_80C2BC4: @ 0x080C2BC4
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	cmp r4, #0
	bge _080C2BE0
	ldr r0, _080C2BDC  @ gUnknown_08A3EC48
	bl Proc_Find
	cmp r0, #0
	beq _080C2C06
	movs r0, #1
	b _080C2C06
	.align 2, 0
_080C2BDC: .4byte gUnknown_08A3EC48
_080C2BE0:
	ldr r1, _080C2C00  @ gUnknown_08A3EC48
	mov r0, sp
	bl sub_8003530
_080C2BE8:
	mov r0, sp
	bl sub_8003540
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, r4
	beq _080C2C04
	cmp r1, #0
	bne _080C2BE8
	movs r0, #0
	b _080C2C06
	.align 2, 0
_080C2C00: .4byte gUnknown_08A3EC48
_080C2C04:
	movs r0, #1
_080C2C06:
	add sp, #0xc
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C2C10
sub_80C2C10: @ 0x080C2C10
	push {r4, r5, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r1, _080C2C3C  @ gUnknown_08A3EC48
	mov r0, sp
	bl sub_8003530
	movs r5, #1
_080C2C20:
	mov r0, sp
	bl sub_8003540
	adds r1, r0, #0
	cmp r4, #0
	blt _080C2C40
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, r4
	bne _080C2C46
	adds r0, r1, #0
	adds r0, #0x29
	strb r5, [r0]
	b _080C2C4A
	.align 2, 0
_080C2C3C: .4byte gUnknown_08A3EC48
_080C2C40:
	adds r0, r1, #0
	adds r0, #0x29
	strb r5, [r0]
_080C2C46:
	cmp r1, #0
	bne _080C2C20
_080C2C4A:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C2C54
sub_80C2C54: @ 0x080C2C54
	bx lr

	THUMB_FUNC_START sub_80C2C58
sub_80C2C58: @ 0x080C2C58
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C2C7C  @ gUnknown_08AA11B0
	movs r1, #0xa8
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	bl EnablePaletteSync
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r4, #0x29
	movs r0, #1
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C2C7C: .4byte gUnknown_08AA11B0

	THUMB_FUNC_START sub_80C2C80
sub_80C2C80: @ 0x080C2C80
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r2, [sp]
	str r3, [sp, #4]
	ldr r4, [sp, #0x2c]
	movs r2, #0
	bl sub_800B7E0
	mov r8, r0
	movs r0, #0
	mov r9, r0
	adds r7, r4, #0
	movs r1, #0x80
	lsls r1, r1, #5
	mov sl, r1
_080C2CA6:
	mov r2, r9
	lsls r1, r2, #1
	ldr r2, [sp]
	adds r0, r1, r2
	ldrh r4, [r0]
	adds r2, r4, #0
	movs r0, #0x1f
	ands r2, r0
	adds r6, r4, #0
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r6, r0
	lsrs r6, r6, #5
	movs r0, #0xf8
	lsls r0, r0, #7
	ands r4, r0
	lsrs r4, r4, #0xa
	ldr r0, [sp, #4]
	adds r1, r1, r0
	ldrh r5, [r1]
	adds r0, r5, #0
	movs r1, #0x1f
	ands r0, r1
	subs r0, r0, r2
	mov r1, r8
	muls r1, r0, r1
	mov r0, sl
	str r2, [sp, #8]
	bl DivArm
	ldr r2, [sp, #8]
	adds r2, r2, r0
	adds r0, r5, #0
	movs r1, #0xf8
	lsls r1, r1, #2
	ands r0, r1
	lsrs r0, r0, #5
	subs r0, r0, r6
	mov r1, r8
	muls r1, r0, r1
	mov r0, sl
	str r2, [sp, #8]
	bl DivArm
	adds r6, r6, r0
	movs r0, #0xf8
	lsls r0, r0, #7
	ands r5, r0
	lsrs r5, r5, #0xa
	subs r5, r5, r4
	mov r1, r8
	muls r1, r5, r1
	mov r0, sl
	bl DivArm
	adds r4, r4, r0
	lsls r4, r4, #0xa
	lsls r6, r6, #5
	adds r4, r4, r6
	ldr r2, [sp, #8]
	adds r4, r4, r2
	strh r4, [r7]
	adds r7, #2
	movs r1, #1
	add r9, r1
	mov r2, r9
	cmp r2, #0xf
	ble _080C2CA6
	bl EnablePaletteSync
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C2D44
sub_80C2D44: @ 0x080C2D44
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1d
	bgt _080C2D80
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	ldr r2, _080C2D78  @ gUnknown_08AA11B0
	adds r3, r2, #0
	subs r3, #0x20
	ldr r1, _080C2D7C  @ gUnknown_02022B48
	str r1, [sp]
	movs r1, #0x1e
	bl sub_80C2C80
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	b _080C2D94
	.align 2, 0
_080C2D78: .4byte gUnknown_08AA11B0
_080C2D7C: .4byte gUnknown_02022B48
_080C2D80:
	ldr r0, _080C2D9C  @ gUnknown_08AA1190
	ldr r1, _080C2DA0  @ gUnknown_02022B48
	movs r2, #0x10
	bl CpuSet
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C2D94:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C2D9C: .4byte gUnknown_08AA1190
_080C2DA0: .4byte gUnknown_02022B48

	THUMB_FUNC_START sub_80C2DA4
sub_80C2DA4: @ 0x080C2DA4
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1d
	bgt _080C2DD8
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	ldr r2, _080C2DD0  @ gUnknown_08AA1190
	adds r3, r2, #0
	adds r3, #0x20
	ldr r1, _080C2DD4  @ gUnknown_02022B48
	str r1, [sp]
	movs r1, #0x1e
	bl sub_80C2C80
	b _080C2DF4
	.align 2, 0
_080C2DD0: .4byte gUnknown_08AA1190
_080C2DD4: .4byte gUnknown_02022B48
_080C2DD8:
	ldr r0, _080C2DFC  @ gUnknown_08AA11B0
	ldr r1, _080C2E00  @ gUnknown_02022B48
	movs r2, #0x10
	bl CpuSet
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C2DF4:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C2DFC: .4byte gUnknown_08AA11B0
_080C2E00: .4byte gUnknown_02022B48

	THUMB_FUNC_START sub_80C2E04
sub_80C2E04: @ 0x080C2E04
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	beq _080C2E18
	ldr r0, _080C2E14  @ gUnknown_08A3ECB0
	bl Proc_CreateBlockingChild
	b _080C2E20
	.align 2, 0
_080C2E14: .4byte gUnknown_08A3ECB0
_080C2E18:
	ldr r0, _080C2E24  @ gUnknown_08A3ECB0
	movs r1, #3
	bl Proc_Create
_080C2E20:
	pop {r1}
	bx r1
	.align 2, 0
_080C2E24: .4byte gUnknown_08A3ECB0

	THUMB_FUNC_START sub_80C2E28
sub_80C2E28: @ 0x080C2E28
	push {lr}
	ldr r0, _080C2E34  @ gUnknown_08A3ECB0
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080C2E34: .4byte gUnknown_08A3ECB0

	THUMB_FUNC_START sub_80C2E38
sub_80C2E38: @ 0x080C2E38
	push {lr}
	ldr r0, _080C2E4C  @ gUnknown_08A3ECB0
	bl Proc_Find
	cmp r0, #0
	beq _080C2E46
	movs r0, #1
_080C2E46:
	pop {r1}
	bx r1
	.align 2, 0
_080C2E4C: .4byte gUnknown_08A3ECB0

	THUMB_FUNC_START sub_80C2E50
sub_80C2E50: @ 0x080C2E50
	push {lr}
	ldr r0, _080C2E60  @ gUnknown_08A3ECB0
	bl Proc_Find
	cmp r0, #0
	bne _080C2E64
	movs r0, #0
	b _080C2E6C
	.align 2, 0
_080C2E60: .4byte gUnknown_08A3ECB0
_080C2E64:
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
_080C2E6C:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C2E70
sub_80C2E70: @ 0x080C2E70
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C2EA0  @ gUnknown_08A3ED18
	bl sub_80034FC
	cmp r0, #1
	bne _080C2E82
	bl sub_80C2E28
_080C2E82:
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080C2E9A
	ldr r0, [r4, #0x34]
	cmp r0, #0
	beq _080C2E9A
	bl sub_80C13CC
_080C2E9A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C2EA0: .4byte gUnknown_08A3ED18

	THUMB_FUNC_START sub_80C2EA4
sub_80C2EA4: @ 0x080C2EA4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C2EE0  @ gUnknown_08A3ED18
	bl sub_80034FC
	cmp r0, #1
	bgt _080C2ED8
	movs r0, #0
	bl sub_80C2E04
	ldr r0, _080C2EE4  @ gUnknown_08AA114C
	ldr r1, _080C2EE8  @ 0x060133C0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C2EEC  @ gUnknown_08AA11B0
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	bl EnablePaletteSync
	adds r0, r4, #0
	movs r1, #1
	bl Proc_GotoLabel
_080C2ED8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C2EE0: .4byte gUnknown_08A3ED18
_080C2EE4: .4byte gUnknown_08AA114C
_080C2EE8: .4byte 0x060133C0
_080C2EEC: .4byte gUnknown_08AA11B0

	THUMB_FUNC_START sub_80C2EF0
sub_80C2EF0: @ 0x080C2EF0
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	mov r4, sp
	adds r4, #6
	add r0, sp, #4
	adds r1, r4, #0
	bl GetWMDisplayPosition
	add r0, sp, #4
	ldrh r0, [r0]
	adds r0, #4
	ldrh r2, [r5, #0x2e]
	subs r2, r2, r0
	ldrh r1, [r4]
	adds r1, #4
	ldrh r0, [r5, #0x30]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	lsls r2, r2, #0x10
	asrs r6, r2, #0x10
	movs r0, #0x80
	lsls r0, r0, #0xe
	adds r2, r2, r0
	movs r0, #0x88
	lsls r0, r0, #0x11
	cmp r2, r0
	bhi _080C2F70
	lsls r0, r1, #0x10
	asrs r4, r0, #0x10
	movs r1, #0x80
	lsls r1, r1, #0xe
	adds r0, r0, r1
	lsrs r0, r0, #0x10
	cmp r0, #0xc0
	bhi _080C2F70
	adds r0, r5, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	movs r1, #4
	cmp r0, #0
	beq _080C2F4C
	movs r1, #5
_080C2F4C:
	ldr r3, _080C2F78  @ gUnknown_08A3ED10
	adds r2, r5, #0
	adds r2, #0x2c
	lsls r0, r1, #0xc
	movs r1, #0xcf
	lsls r1, r1, #1
	orrs r0, r1
	ldrb r2, [r2]
	adds r0, r0, r2
	movs r1, #0xc0
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xb
	adds r1, r6, #0
	adds r2, r4, #0
	bl RegisterObjectAttributes_SafeMaybe
_080C2F70:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C2F78: .4byte gUnknown_08A3ED10

	THUMB_FUNC_START sub_80C2F7C
sub_80C2F7C: @ 0x080C2F7C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C2EF0
	bl sub_80C2E50
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080C2F94
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C2F94:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C2F9C
sub_80C2F9C: @ 0x080C2F9C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C2EF0
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080C2FB8
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C2FB8:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C2FC0
sub_80C2FC0: @ 0x080C2FC0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	mov r8, r3
	ldr r1, [sp, #0x1c]
	cmp r1, #0
	beq _080C2FE0
	ldr r0, _080C2FDC  @ gUnknown_08A3ED18
	bl Proc_CreateBlockingChild
	b _080C2FE8
	.align 2, 0
_080C2FDC: .4byte gUnknown_08A3ED18
_080C2FE0:
	ldr r0, _080C3030  @ gUnknown_08A3ED18
	movs r1, #3
	bl Proc_Create
_080C2FE8:
	adds r4, r0, #0
	adds r0, r4, #0
	adds r0, #0x2b
	strb r5, [r0]
	adds r0, #1
	strb r6, [r0]
	strh r7, [r4, #0x2e]
	mov r0, r8
	strh r0, [r4, #0x30]
	adds r0, r4, #0
	adds r0, #0x2a
	mov r1, sp
	ldrb r1, [r1, #0x18]
	strb r1, [r0]
	movs r0, #2
	ldr r2, [sp, #0x18]
	ands r0, r2
	cmp r0, #0
	beq _080C3034
	movs r0, #0
	movs r1, #1
	bl sub_80C1370
	str r0, [r4, #0x34]
	adds r0, #0x29
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	strb r1, [r0]
	ldr r0, [r4, #0x34]
	strh r7, [r0, #0x2c]
	ldr r0, [r4, #0x34]
	mov r1, r8
	strh r1, [r0, #0x2e]
	b _080C3036
	.align 2, 0
_080C3030: .4byte gUnknown_08A3ED18
_080C3034:
	str r0, [r4, #0x34]
_080C3036:
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	adds r0, r4, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C304C
sub_80C304C: @ 0x080C304C
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	cmp r4, #0
	bge _080C306C
	ldr r0, _080C3060  @ gUnknown_08A3ED18
	bl Proc_DeleteAllWithScript
	b _080C3088
	.align 2, 0
_080C3060: .4byte gUnknown_08A3ED18
_080C3064:
	adds r0, r1, #0
	bl Proc_Delete
	b _080C3088
_080C306C:
	ldr r1, _080C3090  @ gUnknown_08A3ED18
	mov r0, sp
	bl sub_8003530
_080C3074:
	mov r0, sp
	bl sub_8003540
	adds r1, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, r4
	beq _080C3064
	cmp r1, #0
	bne _080C3074
_080C3088:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C3090: .4byte gUnknown_08A3ED18

	THUMB_FUNC_START sub_80C3094
sub_80C3094: @ 0x080C3094
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	cmp r4, #0
	bge _080C30B0
	ldr r0, _080C30AC  @ gUnknown_08A3ED18
	bl Proc_Find
	cmp r0, #0
	beq _080C30D6
	movs r0, #1
	b _080C30D6
	.align 2, 0
_080C30AC: .4byte gUnknown_08A3ED18
_080C30B0:
	ldr r1, _080C30D0  @ gUnknown_08A3ED18
	mov r0, sp
	bl sub_8003530
_080C30B8:
	mov r0, sp
	bl sub_8003540
	adds r1, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, r4
	beq _080C30D4
	cmp r1, #0
	bne _080C30B8
	movs r0, #0
	b _080C30D6
	.align 2, 0
_080C30D0: .4byte gUnknown_08A3ED18
_080C30D4:
	movs r0, #1
_080C30D6:
	add sp, #0xc
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C30E0
sub_80C30E0: @ 0x080C30E0
	push {r4, r5, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r1, _080C310C  @ gUnknown_08A3ED18
	mov r0, sp
	bl sub_8003530
	movs r5, #1
_080C30F0:
	mov r0, sp
	bl sub_8003540
	adds r1, r0, #0
	cmp r4, #0
	blt _080C3110
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, r4
	bne _080C3116
	adds r0, r1, #0
	adds r0, #0x29
	strb r5, [r0]
	b _080C311A
	.align 2, 0
_080C310C: .4byte gUnknown_08A3ED18
_080C3110:
	adds r0, r1, #0
	adds r0, #0x29
	strb r5, [r0]
_080C3116:
	cmp r1, #0
	bne _080C30F0
_080C311A:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C3124
sub_80C3124: @ 0x080C3124
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _080C3170  @ gUnknown_08A3D748
	adds r0, r5, #0
	bl Proc_Find
	ldr r0, [r0, #0x54]
	ldrh r1, [r4, #0x2c]
	bl sub_80BE12C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080C314C
	adds r0, r5, #0
	bl Proc_Find
	ldr r0, [r0, #0x54]
	ldrh r1, [r4, #0x2c]
	bl sub_80BE330
_080C314C:
	bl sub_80BB47C
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	beq _080C315E
	cmp r0, #1
	beq _080C3178
_080C315E:
	ldr r1, _080C3174  @ gUnknown_03005280
	ldrh r0, [r4, #0x2c]
	lsls r0, r0, #2
	adds r0, r0, r1
	adds r1, r4, #0
	adds r1, #0x34
	ldrb r1, [r1]
	strb r1, [r0, #0x11]
	b _080C318E
	.align 2, 0
_080C3170: .4byte gUnknown_08A3D748
_080C3174: .4byte gUnknown_03005280
_080C3178:
	adds r0, r5, #0
	bl Proc_Find
	ldr r0, [r0, #0x54]
	ldrh r1, [r4, #0x2c]
	movs r3, #0x34
	ldrsh r2, [r4, r3]
	movs r5, #0x36
	ldrsh r3, [r4, r5]
	bl sub_80BE35C
_080C318E:
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080C31A2
	ldrh r0, [r4, #0x2c]
	bl sub_80BF570
_080C31A2:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C31A8
sub_80C31A8: @ 0x080C31A8
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x3c]
	subs r0, #1
	strh r0, [r1, #0x3c]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt _080C31BE
	adds r0, r1, #0
	bl Proc_ClearNativeCallback
_080C31BE:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C31C4
sub_80C31C4: @ 0x080C31C4
	push {lr}
	adds r2, r0, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080C31DC
	adds r0, r2, #0
	movs r1, #0
	bl Proc_GotoLabel
_080C31DC:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C31E0
sub_80C31E0: @ 0x080C31E0
	push {lr}
	adds r2, r0, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080C31F8
	adds r0, r2, #0
	movs r1, #4
	bl Proc_GotoLabel
_080C31F8:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C31FC
sub_80C31FC: @ 0x080C31FC
	push {lr}
	adds r1, r0, #0
	adds r1, #0x29
	ldrb r1, [r1]
	cmp r1, #0
	beq _080C320C
	cmp r1, #1
	beq _080C3214
_080C320C:
	movs r1, #1
	bl Proc_GotoLabel
	b _080C321A
_080C3214:
	movs r1, #2
	bl Proc_GotoLabel
_080C321A:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C3220
sub_80C3220: @ 0x080C3220
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C3240  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	ldrh r1, [r4, #0x2c]
	movs r2, #0x1e
	bl sub_80BE40C
	ldrh r0, [r4, #0x2c]
	bl sub_80BF554
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C3240: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80C3244
sub_80C3244: @ 0x080C3244
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C3260  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	ldrh r1, [r4, #0x2c]
	movs r2, #0x1e
	bl sub_80BE42C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C3260: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80C3264
sub_80C3264: @ 0x080C3264
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80BE44C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080C3278
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C3278:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C3280
sub_80C3280: @ 0x080C3280
	push {lr}
	sub sp, #0x10
	adds r3, r0, #0
	mov r1, sp
	ldrh r0, [r3, #0x2c]
	movs r2, #0
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x38
	ldrb r0, [r0]
	strb r0, [r1, #1]
	adds r0, r3, #0
	adds r0, #0x30
	ldrb r0, [r0]
	strh r0, [r1, #6]
	adds r0, r3, #0
	adds r0, #0x34
	ldrb r0, [r0]
	strh r0, [r1, #8]
	movs r1, #0x3a
	ldrsh r0, [r3, r1]
	str r0, [sp, #0xc]
	mov r0, sp
	strh r2, [r0, #0xa]
	mov r2, sp
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsrs r0, r0, #2
	movs r1, #1
	ands r0, r1
	strb r0, [r2, #2]
	mov r1, sp
	movs r0, #0xff
	strb r0, [r1, #3]
	movs r0, #4
	strb r0, [r1, #4]
	ldr r0, _080C32E0  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	mov r1, sp
	bl sub_80BDEB4
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_080C32E0: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80C32E4
sub_80C32E4: @ 0x080C32E4
	push {lr}
	sub sp, #0x14
	adds r3, r0, #0
	mov r1, sp
	ldrh r0, [r3, #0x2c]
	movs r2, #0
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x39
	ldrb r0, [r0]
	strb r0, [r1, #1]
	adds r0, r3, #0
	adds r0, #0x38
	ldrb r0, [r0]
	strb r0, [r1, #2]
	ldrh r0, [r3, #0x30]
	strh r0, [r1, #6]
	ldrh r0, [r3, #0x32]
	strh r0, [r1, #8]
	ldrh r0, [r3, #0x34]
	strh r0, [r1, #0xa]
	ldrh r0, [r3, #0x36]
	strh r0, [r1, #0xc]
	movs r1, #0x3a
	ldrsh r0, [r3, r1]
	str r0, [sp, #0x10]
	mov r0, sp
	strh r2, [r0, #0xe]
	mov r2, sp
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsrs r0, r0, #2
	movs r1, #1
	ands r0, r1
	strb r0, [r2, #3]
	mov r1, sp
	movs r0, #0xff
	strb r0, [r1, #4]
	movs r0, #4
	strb r0, [r1, #5]
	ldr r0, _080C334C  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	mov r1, sp
	bl sub_80BDFA4
	add sp, #0x14
	pop {r0}
	bx r0
	.align 2, 0
_080C334C: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80C3350
sub_80C3350: @ 0x080C3350
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C3374  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	ldrh r1, [r4, #0x2c]
	bl sub_80BE12C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080C336E
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C336E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C3374: .4byte gUnknown_08A3D748

	THUMB_FUNC_START sub_80C3378
sub_80C3378: @ 0x080C3378
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	cmp r1, #0
	beq _080C3390
	ldr r0, _080C338C  @ gUnknown_08A3ED60
	bl Proc_CreateBlockingChild
	b _080C3398
	.align 2, 0
_080C338C: .4byte gUnknown_08A3ED60
_080C3390:
	ldr r0, _080C33D0  @ gUnknown_08A3ED60
	movs r1, #3
	bl Proc_Create
_080C3398:
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2a
	strb r5, [r0]
	ldrb r0, [r4]
	strh r0, [r2, #0x2c]
	ldrb r1, [r4, #1]
	adds r0, r2, #0
	adds r0, #0x38
	strb r1, [r0]
	ldrh r1, [r4, #6]
	subs r0, #8
	strb r1, [r0]
	ldrh r1, [r4, #8]
	adds r0, #4
	strb r1, [r0]
	ldrh r0, [r4, #0xa]
	strh r0, [r2, #0x3c]
	ldr r0, [r4, #0xc]
	strh r0, [r2, #0x3a]
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080C33D0: .4byte gUnknown_08A3ED60

	THUMB_FUNC_START sub_80C33D4
sub_80C33D4: @ 0x080C33D4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	cmp r1, #0
	beq _080C33EC
	ldr r0, _080C33E8  @ gUnknown_08A3ED60
	bl Proc_CreateBlockingChild
	b _080C33F4
	.align 2, 0
_080C33E8: .4byte gUnknown_08A3ED60
_080C33EC:
	ldr r0, _080C3438  @ gUnknown_08A3ED60
	movs r1, #3
	bl Proc_Create
_080C33F4:
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2a
	strb r5, [r0]
	ldrb r0, [r4]
	strh r0, [r2, #0x2c]
	ldrb r0, [r4, #1]
	adds r1, #0x10
	strb r0, [r1]
	ldrb r1, [r4, #2]
	adds r0, r2, #0
	adds r0, #0x38
	strb r1, [r0]
	ldrh r0, [r4, #6]
	strh r0, [r2, #0x30]
	ldrh r0, [r4, #8]
	strh r0, [r2, #0x32]
	ldrh r0, [r4, #0xa]
	strh r0, [r2, #0x34]
	ldrh r0, [r4, #0xc]
	strh r0, [r2, #0x36]
	ldrh r0, [r4, #0xe]
	strh r0, [r2, #0x3c]
	ldr r0, [r4, #0x10]
	strh r0, [r2, #0x3a]
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080C3438: .4byte gUnknown_08A3ED60

	THUMB_FUNC_START sub_80C343C
sub_80C343C: @ 0x080C343C
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	cmp r4, #0
	bge _080C345C
	ldr r0, _080C3450  @ gUnknown_08A3ED60
	bl Proc_DeleteAllWithScript
	b _080C3476
	.align 2, 0
_080C3450: .4byte gUnknown_08A3ED60
_080C3454:
	adds r0, r1, #0
	bl Proc_Delete
	b _080C3476
_080C345C:
	ldr r1, _080C3480  @ gUnknown_08A3ED60
	mov r0, sp
	bl sub_8003530
_080C3464:
	mov r0, sp
	bl sub_8003540
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	cmp r0, r4
	beq _080C3454
	cmp r1, #0
	bne _080C3464
_080C3476:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C3480: .4byte gUnknown_08A3ED60

	THUMB_FUNC_START sub_80C3484
sub_80C3484: @ 0x080C3484
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	cmp r4, #0
	bge _080C34A0
	ldr r0, _080C349C  @ gUnknown_08A3ED60
	bl Proc_Find
	cmp r0, #0
	beq _080C34C6
	movs r0, #1
	b _080C34C6
	.align 2, 0
_080C349C: .4byte gUnknown_08A3ED60
_080C34A0:
	ldr r1, _080C34C0  @ gUnknown_08A3ED60
	mov r0, sp
	bl sub_8003530
_080C34A8:
	mov r0, sp
	bl sub_8003540
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	cmp r0, r4
	beq _080C34C4
	cmp r1, #0
	bne _080C34A8
	movs r0, #0
	b _080C34C6
	.align 2, 0
_080C34C0: .4byte gUnknown_08A3ED60
_080C34C4:
	movs r0, #1
_080C34C6:
	add sp, #0xc
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C34D0
sub_80C34D0: @ 0x080C34D0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r4, r0, #0
	adds r7, r1, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	str r2, [sp]
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov sl, r3
	movs r2, #0
	cmp r2, r7
	bge _080C357E
	movs r0, #0x1f
	mov r1, sl
	ands r1, r0
	str r1, [sp, #4]
	movs r3, #0
	str r3, [sp, #8]
	mov r8, r4
	ldr r1, [sp]
	mov r9, r1
	mov r3, r9
	ands r3, r0
	mov r9, r3
_080C350A:
	subs r6, r7, r2
	mov r0, r9
	muls r0, r6, r0
	ldr r1, [sp, #8]
	adds r0, r0, r1
	adds r1, r7, #0
	str r2, [sp, #0xc]
	bl __divsi3
	adds r4, r0, #0
	movs r3, #0x1f
	ands r4, r3
	ldr r0, [sp]
	movs r1, #0xf8
	lsls r1, r1, #2
	ands r0, r1
	muls r0, r6, r0
	mov r1, sl
	movs r3, #0xf8
	lsls r3, r3, #2
	ands r1, r3
	ldr r2, [sp, #0xc]
	muls r1, r2, r1
	adds r0, r0, r1
	adds r1, r7, #0
	bl __divsi3
	movs r1, #0xf8
	lsls r1, r1, #2
	ands r0, r1
	adds r4, r4, r0
	movs r5, #0xf8
	lsls r5, r5, #7
	ldr r0, [sp]
	ands r0, r5
	muls r0, r6, r0
	mov r1, sl
	ands r1, r5
	ldr r2, [sp, #0xc]
	muls r1, r2, r1
	adds r0, r0, r1
	adds r1, r7, #0
	bl __divsi3
	ands r0, r5
	adds r4, r4, r0
	mov r3, r8
	strh r4, [r3]
	ldr r0, [sp, #8]
	ldr r1, [sp, #4]
	adds r0, r0, r1
	str r0, [sp, #8]
	movs r3, #2
	add r8, r3
	ldr r2, [sp, #0xc]
	adds r2, #1
	cmp r2, r7
	blt _080C350A
_080C357E:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C3590
sub_80C3590: @ 0x080C3590
	push {r4, r5, r6, lr}
	sub sp, #4
	movs r6, #0
	ldr r5, _080C35BC  @ 0x06014000
	movs r4, #3
_080C359A:
	str r6, [sp]
	mov r0, sp
	adds r1, r5, #0
	ldr r2, _080C35C0  @ 0x010000E0
	bl CpuFastSet
	movs r0, #0x80
	lsls r0, r0, #3
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bge _080C359A
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C35BC: .4byte 0x06014000
_080C35C0: .4byte 0x010000E0

	THUMB_FUNC_START sub_80C35C4
sub_80C35C4: @ 0x080C35C4
	push {lr}
	adds r3, r0, #0
	adds r3, #0x29
	movs r2, #0
	movs r1, #1
	strb r1, [r3]
	adds r0, #0x2a
	strb r2, [r0]
	bl sub_80C3590
	ldr r2, _080C35E8  @ gUnknown_0201BE30
	ldrb r1, [r2]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
_080C35E8: .4byte gUnknown_0201BE30

	THUMB_FUNC_START sub_80C35EC
sub_80C35EC: @ 0x080C35EC
	push {lr}
	sub sp, #4
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq _080C3618
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _080C3608
	movs r2, #0x6f
_080C3608:
	ldr r3, _080C3620  @ gUnknown_08A3EE28
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #1
	movs r1, #0
	bl RegisterObjectAttributes
_080C3618:
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080C3620: .4byte gUnknown_08A3EE28

	THUMB_FUNC_START sub_80C3624
sub_80C3624: @ 0x080C3624
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _080C3658  @ gUnknown_08A3EE44
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080C3652
	bl sub_80C3590
	ldr r2, _080C365C  @ gUnknown_0201BE30
	ldrb r1, [r2]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x29
	strb r5, [r0]
	adds r1, r4, #0
	adds r1, #0x2a
	movs r0, #1
	strb r0, [r1]
_080C3652:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C3658: .4byte gUnknown_08A3EE44
_080C365C: .4byte gUnknown_0201BE30

	THUMB_FUNC_START sub_80C3660
sub_80C3660: @ 0x080C3660
	push {lr}
	ldr r0, _080C3684  @ gUnknown_08A3EE44
	bl Proc_Find
	adds r3, r0, #0
	cmp r3, #0
	beq _080C3680
	ldr r2, _080C3688  @ gUnknown_0201BE30
	ldrb r1, [r2]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
_080C3680:
	pop {r0}
	bx r0
	.align 2, 0
_080C3684: .4byte gUnknown_08A3EE44
_080C3688: .4byte gUnknown_0201BE30

	THUMB_FUNC_START sub_80C368C
sub_80C368C: @ 0x080C368C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080C369C  @ gUnknown_08A3EE44
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080C369C: .4byte gUnknown_08A3EE44

	THUMB_FUNC_START sub_80C36A0
sub_80C36A0: @ 0x080C36A0
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8006A7C
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #2
	movs r2, #2
	bl sub_80068AC
	bl EnablePaletteSync
	movs r0, #1
	movs r1, #0xf
	adds r2, r4, #0
	bl sub_8006A30
	movs r0, #4
	bl sub_8006AF0
	movs r0, #0x20
	bl sub_8006AA8
	movs r0, #0x80
	bl sub_8006AA8
	movs r0, #4
	bl sub_8006AA8
	movs r0, #1
	bl sub_8006AA8
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C36E8
sub_80C36E8: @ 0x080C36E8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080C375C  @ gUnknown_03005280
	ldr r1, [r0, #8]
	asrs r1, r1, #8
	ldr r6, [r0, #0xc]
	asrs r6, r6, #8
	adds r0, r4, #0
	adds r0, #0x2f
	movs r5, #0
	ldrsb r5, [r0, r5]
	lsls r5, r5, #3
	lsls r0, r1, #6
	subs r0, r0, r1
	movs r1, #0xf0
	lsls r1, r1, #1
	bl __divsi3
	adds r5, r5, r0
	adds r4, #0x30
	ldrb r4, [r4]
	lsls r4, r4, #0x18
	asrs r4, r4, #0x18
	lsls r4, r4, #3
	movs r0, #0x2b
	muls r0, r6, r0
	movs r1, #0xa0
	lsls r1, r1, #1
	bl __divsi3
	adds r4, r4, r0
	subs r1, r5, #1
	adds r2, r4, #7
	adds r5, #0x1f
	ldr r0, _080C3760  @ 0x0000012F
	cmp r5, r0
	bhi _080C3754
	movs r0, #0x20
	negs r0, r0
	cmp r2, r0
	blt _080C3754
	cmp r2, #0xbf
	bgt _080C3754
	ldr r0, _080C3764  @ 0x000001FF
	ands r1, r0
	movs r0, #0xff
	ands r2, r0
	ldr r3, _080C3768  @ gUnknown_08590F44
	ldr r0, _080C376C  @ 0x000040F6
	str r0, [sp]
	movs r0, #0
	bl RegisterObjectAttributes
_080C3754:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C375C: .4byte gUnknown_03005280
_080C3760: .4byte 0x0000012F
_080C3764: .4byte 0x000001FF
_080C3768: .4byte gUnknown_08590F44
_080C376C: .4byte 0x000040F6

	THUMB_FUNC_START sub_80C3770
sub_80C3770: @ 0x080C3770
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080C37F4  @ gUnknown_03005280
	bl sub_80BD014
	cmp r0, #0
	blt _080C37EA
	lsls r0, r0, #5
	ldr r1, _080C37F8  @ gUnknown_082060B0
	adds r0, r0, r1
	movs r2, #0x18
	ldrsh r1, [r0, r2]
	movs r2, #0x1a
	ldrsh r6, [r0, r2]
	adds r0, r4, #0
	adds r0, #0x2f
	movs r5, #0
	ldrsb r5, [r0, r5]
	lsls r5, r5, #3
	lsls r0, r1, #6
	subs r0, r0, r1
	movs r1, #0xf0
	lsls r1, r1, #1
	bl __divsi3
	adds r5, r5, r0
	adds r0, r4, #0
	adds r0, #0x30
	movs r4, #0
	ldrsb r4, [r0, r4]
	lsls r4, r4, #3
	movs r0, #0x2b
	muls r0, r6, r0
	movs r1, #0xa0
	lsls r1, r1, #1
	bl __divsi3
	adds r4, r4, r0
	subs r1, r5, #1
	adds r2, r4, #7
	adds r5, #0x1f
	ldr r0, _080C37FC  @ 0x0000012F
	cmp r5, r0
	bhi _080C37EA
	movs r0, #0x20
	negs r0, r0
	cmp r2, r0
	blt _080C37EA
	cmp r2, #0xbf
	bgt _080C37EA
	ldr r0, _080C3800  @ 0x000001FF
	ands r1, r0
	movs r0, #0xff
	ands r2, r0
	ldr r3, _080C3804  @ gUnknown_08590F44
	ldr r0, _080C3808  @ 0x000040F7
	str r0, [sp]
	movs r0, #0
	bl RegisterObjectAttributes
_080C37EA:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C37F4: .4byte gUnknown_03005280
_080C37F8: .4byte gUnknown_082060B0
_080C37FC: .4byte 0x0000012F
_080C3800: .4byte 0x000001FF
_080C3804: .4byte gUnknown_08590F44
_080C3808: .4byte 0x000040F7

	THUMB_FUNC_START sub_80C380C
sub_80C380C: @ 0x080C380C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	ldr r0, _080C38A4  @ gUnknown_03005280
	ldrb r1, [r0, #0x10]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080C389A
	ldr r0, _080C38A8  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	mov r4, sp
	adds r4, #6
	movs r1, #0
	add r2, sp, #4
	adds r3, r4, #0
	bl sub_80BE3A0
	add r0, sp, #4
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r0, #0
	ldrsh r6, [r4, r0]
	adds r0, r7, #0
	adds r0, #0x2f
	movs r5, #0
	ldrsb r5, [r0, r5]
	lsls r5, r5, #3
	lsls r0, r1, #6
	subs r0, r0, r1
	movs r1, #0xf0
	lsls r1, r1, #1
	bl __divsi3
	adds r5, r5, r0
	adds r0, r7, #0
	adds r0, #0x30
	movs r4, #0
	ldrsb r4, [r0, r4]
	lsls r4, r4, #3
	movs r0, #0x2b
	muls r0, r6, r0
	movs r1, #0xa0
	lsls r1, r1, #1
	bl __divsi3
	adds r4, r4, r0
	subs r1, r5, #3
	adds r2, r4, #7
	adds r5, #0x1d
	ldr r0, _080C38AC  @ 0x0000012F
	cmp r5, r0
	bhi _080C389A
	movs r0, #0x20
	negs r0, r0
	cmp r2, r0
	blt _080C389A
	cmp r2, #0xbf
	bgt _080C389A
	ldr r0, _080C38B0  @ 0x000001FF
	ands r1, r0
	movs r0, #0xff
	ands r2, r0
	ldr r3, _080C38B4  @ gUnknown_08590F44
	ldr r0, _080C38B8  @ 0x000090F4
	str r0, [sp]
	movs r0, #0
	bl RegisterObjectAttributes
_080C389A:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C38A4: .4byte gUnknown_03005280
_080C38A8: .4byte gUnknown_08A3D748
_080C38AC: .4byte 0x0000012F
_080C38B0: .4byte 0x000001FF
_080C38B4: .4byte gUnknown_08590F44
_080C38B8: .4byte 0x000090F4

	THUMB_FUNC_START sub_80C38BC
sub_80C38BC: @ 0x080C38BC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	str r0, [sp, #0x14]
	movs r0, #0
	str r0, [sp, #0x18]
	movs r1, #4
	mov r9, r1
	mov r2, sp
	adds r2, #0x10
	str r2, [sp, #0x1c]
	movs r3, #0x12
	add r3, sp
	mov sl, r3
	add r0, sp, #4
	mov r8, r0
_080C38E2:
	ldr r1, _080C3A10  @ gUnknown_03005280
	mov r2, r9
	lsls r0, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0x10]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080C3956
	ldr r0, _080C3A14  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x54]
	mov r1, r9
	ldr r2, [sp, #0x1c]
	mov r3, sl
	bl sub_80BE3A0
	ldr r3, [sp, #0x1c]
	movs r0, #0
	ldrsh r1, [r3, r0]
	mov r2, sl
	movs r3, #0
	ldrsh r6, [r2, r3]
	ldr r0, [sp, #0x14]
	adds r0, #0x2f
	movs r5, #0
	ldrsb r5, [r0, r5]
	lsls r5, r5, #3
	lsls r0, r1, #6
	subs r0, r0, r1
	movs r1, #0xf0
	lsls r1, r1, #1
	bl __divsi3
	adds r5, r5, r0
	ldr r0, [sp, #0x14]
	adds r0, #0x30
	movs r4, #0
	ldrsb r4, [r0, r4]
	lsls r4, r4, #3
	movs r0, #0x2b
	muls r0, r6, r0
	movs r1, #0xa0
	lsls r1, r1, #1
	bl __divsi3
	adds r4, r4, r0
	subs r5, #3
	mov r0, r8
	strh r5, [r0]
	adds r4, #7
	strh r4, [r0, #2]
	movs r1, #4
	add r8, r1
	ldr r2, [sp, #0x18]
	adds r2, #1
	str r2, [sp, #0x18]
_080C3956:
	movs r3, #1
	add r9, r3
	mov r0, r9
	cmp r0, #6
	ble _080C38E2
	movs r5, #0
	ldr r1, [sp, #0x18]
	subs r1, #1
	mov r8, r1
	cmp r5, r8
	bge _080C39B6
_080C396C:
	adds r6, r5, #1
	ldr r2, [sp, #0x18]
	cmp r6, r2
	bge _080C39B0
	lsls r0, r5, #2
	mov r4, sp
	adds r4, r4, r0
	adds r4, #4
	lsls r0, r6, #2
	adds r2, r0, #0
	add r2, sp
	adds r2, #4
	ldr r3, [sp, #0x18]
	subs r5, r3, r6
_080C3988:
	ldrh r0, [r4, #2]
	movs r3, #2
	ldrsh r1, [r2, r3]
	lsls r3, r0, #0x10
	asrs r0, r3, #0x10
	cmp r1, r0
	bge _080C39A8
	ldrh r7, [r4]
	orrs r7, r3
	ldrh r0, [r2]
	strh r0, [r4]
	ldrh r0, [r2, #2]
	strh r0, [r4, #2]
	strh r7, [r2]
	asrs r0, r7, #0x10
	strh r0, [r2, #2]
_080C39A8:
	adds r2, #4
	subs r5, #1
	cmp r5, #0
	bne _080C3988
_080C39B0:
	adds r5, r6, #0
	cmp r5, r8
	blt _080C396C
_080C39B6:
	ldr r0, [sp, #0x18]
	cmp r0, #0
	ble _080C3A00
	ldr r7, _080C3A18  @ 0x0000012F
	add r4, sp, #4
	movs r6, #0x20
	negs r6, r6
	adds r5, r0, #0
_080C39C6:
	ldrh r2, [r4]
	adds r0, r2, #0
	adds r0, #0x20
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r7
	bhi _080C39F8
	ldrh r3, [r4, #2]
	movs r1, #2
	ldrsh r0, [r4, r1]
	cmp r0, r6
	blt _080C39F8
	cmp r0, #0xbf
	bgt _080C39F8
	ldr r0, _080C3A1C  @ 0x000001FF
	adds r1, r0, #0
	ands r1, r2
	movs r2, #0xff
	ands r2, r3
	ldr r0, _080C3A20  @ 0x000090F5
	str r0, [sp]
	movs r0, #0
	ldr r3, _080C3A24  @ gUnknown_08590F44
	bl RegisterObjectAttributes
_080C39F8:
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bne _080C39C6
_080C3A00:
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C3A10: .4byte gUnknown_03005280
_080C3A14: .4byte gUnknown_08A3D748
_080C3A18: .4byte 0x0000012F
_080C3A1C: .4byte 0x000001FF
_080C3A20: .4byte 0x000090F5
_080C3A24: .4byte gUnknown_08590F44

	THUMB_FUNC_START sub_80C3A28
sub_80C3A28: @ 0x080C3A28
	push {lr}
	ldr r0, _080C3A54  @ gUnknown_08A3D748
	bl Proc_Find
	ldr r0, [r0, #0x50]
	adds r0, #0x34
	ldrb r1, [r0]
	ldr r2, _080C3A58  @ gUnknown_02022BC8
	lsls r1, r1, #1
	ldr r0, _080C3A5C  @ gUnknown_08AA1930
	adds r0, r1, r0
	ldrh r0, [r0]
	strh r0, [r2, #0x12]
	ldr r0, _080C3A60  @ gUnknown_08AA1950
	adds r1, r1, r0
	ldrh r0, [r1]
	strh r0, [r2, #0xe]
	bl EnablePaletteSync
	pop {r0}
	bx r0
	.align 2, 0
_080C3A54: .4byte gUnknown_08A3D748
_080C3A58: .4byte gUnknown_02022BC8
_080C3A5C: .4byte gUnknown_08AA1930
_080C3A60: .4byte gUnknown_08AA1950

	THUMB_FUNC_START sub_80C3A64
sub_80C3A64: @ 0x080C3A64
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C3770
	adds r0, r4, #0
	bl sub_80C38BC
	adds r0, r4, #0
	bl sub_80C380C
	adds r0, r4, #0
	bl sub_80C36E8
	adds r0, r4, #0
	bl sub_80C3A28
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C3A8C
sub_80C3A8C: @ 0x080C3A8C
	push {r4, lr}
	ldr r4, _080C3AAC  @ gUnknown_0201B458
	adds r0, r4, #0
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl TileMap_FillRect
	ldr r1, _080C3AB0  @ gUnknown_08AA18AC
	ldr r2, _080C3AB4  @ 0x000071E0
	adds r0, r4, #0
	bl CallARM_FillTileRect
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C3AAC: .4byte gUnknown_0201B458
_080C3AB0: .4byte gUnknown_08AA18AC
_080C3AB4: .4byte 0x000071E0

	THUMB_FUNC_START sub_80C3AB8
sub_80C3AB8: @ 0x080C3AB8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r6, _080C3B38  @ gUnknown_03005280
	ldrb r1, [r6]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080C3B32
	movs r0, #0
	str r0, [r5, #0x34]
	movs r0, #0x20
	movs r1, #0x20
	movs r2, #0x30
	movs r3, #0x30
	bl sub_80C089C
	adds r1, r5, #0
	adds r1, #0x2a
	strb r0, [r1]
	ldr r3, _080C3B3C  @ gUnknown_08206B70
	movs r2, #0
	ldrsb r2, [r1, r2]
	ldrb r4, [r6]
	lsls r1, r4, #0x1a
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	adds r2, r2, r0
	adds r2, r2, r3
	ldrb r0, [r2]
	movs r1, #3
	ands r1, r0
	lsls r1, r1, #4
	movs r0, #0x31
	negs r0, r0
	ands r0, r4
	orrs r0, r1
	strb r0, [r6]
	adds r0, r5, #0
	bl sub_80C3A8C
	adds r1, r5, #0
	adds r1, #0x2d
	ldr r0, [r6, #8]
	asrs r0, r0, #8
	strb r0, [r1]
	adds r2, r5, #0
	adds r2, #0x2e
	ldr r0, [r6, #0xc]
	asrs r0, r0, #8
	strb r0, [r2]
	ldrb r0, [r1]
	subs r1, #2
	strb r0, [r1]
	ldrb r1, [r2]
	adds r0, r5, #0
	adds r0, #0x2c
	strb r1, [r0]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080C3B32:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C3B38: .4byte gUnknown_03005280
_080C3B3C: .4byte gUnknown_08206B70

	THUMB_FUNC_START sub_80C3B40
sub_80C3B40: @ 0x080C3B40
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	bl sub_80C3A64
	adds r2, r4, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	adds r5, r4, #0
	adds r5, #0x2b
	strb r0, [r5]
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r7, r4, #0
	adds r7, #0x2c
	strb r0, [r7]
	ldr r6, _080C3BDC  @ gUnknown_03005280
	ldr r0, [r6, #8]
	asrs r0, r0, #8
	strb r0, [r2]
	ldr r0, [r6, #0xc]
	asrs r3, r0, #8
	strb r3, [r1]
	ldrb r1, [r6]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080C3BC6
	movs r0, #1
	ldrsb r0, [r6, r0]
	cmp r0, #0
	ble _080C3BD4
	ldrb r0, [r2]
	ldrb r5, [r5]
	cmp r0, r5
	bne _080C3B92
	lsls r0, r3, #0x18
	lsrs r0, r0, #0x18
	ldrb r7, [r7]
	cmp r0, r7
	beq _080C3BD4
_080C3B92:
	movs r0, #0x20
	movs r1, #0x20
	movs r2, #0x30
	movs r3, #0x30
	bl sub_80C089C
	adds r5, r0, #0
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r5, r0
	beq _080C3BD4
	ldrb r1, [r6]
	lsls r1, r1, #0x1a
	ldr r3, _080C3BE0  @ gUnknown_08206B70
	lsrs r2, r1, #0x1e
	lsls r0, r2, #2
	adds r0, r0, r2
	adds r0, r5, r0
	adds r0, r0, r3
	adds r1, r2, #0
	ldrb r0, [r0]
	cmp r1, r0
	beq _080C3BD4
_080C3BC6:
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C3BD4:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C3BDC: .4byte gUnknown_03005280
_080C3BE0: .4byte gUnknown_08206B70

	THUMB_FUNC_START sub_80C3BE4
sub_80C3BE4: @ 0x080C3BE4
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r6, r1, #0
	ldr r3, _080C3C14  @ gUnknown_08206B70
	adds r0, #0x2a
	movs r2, #0
	ldrsb r2, [r0, r2]
	ldr r0, _080C3C18  @ gUnknown_03005280
	ldrb r1, [r0]
	lsls r1, r1, #0x1a
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	adds r2, r2, r0
	adds r2, r2, r3
	ldrb r5, [r2]
	cmp r5, #1
	beq _080C3C64
	cmp r5, #1
	bgt _080C3C1C
	cmp r5, #0
	beq _080C3C26
	b _080C3D0C
	.align 2, 0
_080C3C14: .4byte gUnknown_08206B70
_080C3C18: .4byte gUnknown_03005280
_080C3C1C:
	cmp r5, #2
	beq _080C3CA4
	cmp r5, #3
	beq _080C3CD4
	b _080C3D0C
_080C3C26:
	ldr r4, _080C3C5C  @ gBG0TilemapBuffer
	adds r0, r4, #0
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #0x1c
	subs r0, r0, r6
	lsls r0, r0, #1
	ldr r1, _080C3C60  @ gUnknown_0201B430
	adds r0, r0, r1
	adds r1, r4, #0
	adds r2, r6, #0
	movs r3, #8
	bl TileMap_CopyRect
	adds r0, r6, #0
	subs r0, #8
	adds r3, r7, #0
	adds r3, #0x2f
	strb r0, [r3]
	adds r0, r7, #0
	adds r0, #0x30
	strb r5, [r0]
	b _080C3D0C
	.align 2, 0
_080C3C5C: .4byte gBG0TilemapBuffer
_080C3C60: .4byte gUnknown_0201B430
_080C3C64:
	ldr r4, _080C3C9C  @ gUnknown_02022CD4
	adds r0, r4, #0
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _080C3CA0  @ gUnknown_0201B458
	movs r1, #0x1e
	subs r1, r1, r6
	lsls r1, r1, #1
	subs r4, #0x2c
	adds r1, r1, r4
	adds r2, r6, #0
	movs r3, #8
	bl TileMap_CopyRect
	movs r0, #0x1e
	subs r0, r0, r6
	adds r3, r7, #0
	adds r3, #0x2f
	movs r1, #0
	strb r0, [r3]
	adds r0, r7, #0
	adds r0, #0x30
	strb r1, [r0]
	b _080C3D0C
	.align 2, 0
_080C3C9C: .4byte gUnknown_02022CD4
_080C3CA0: .4byte gUnknown_0201B458
_080C3CA4:
	ldr r4, _080C3CCC  @ gUnknown_02022FA8
	adds r0, r4, #0
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #0x1c
	subs r0, r0, r6
	lsls r0, r0, #1
	ldr r1, _080C3CD0  @ gUnknown_0201B430
	adds r0, r0, r1
	adds r1, r4, #0
	adds r2, r6, #0
	movs r3, #8
	bl TileMap_CopyRect
	adds r0, r6, #0
	subs r0, #8
	b _080C3CFE
	.align 2, 0
_080C3CCC: .4byte gUnknown_02022FA8
_080C3CD0: .4byte gUnknown_0201B430
_080C3CD4:
	ldr r4, _080C3D18  @ gUnknown_02022FD4
	adds r0, r4, #0
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _080C3D1C  @ gUnknown_0201B458
	movs r1, #0xcf
	lsls r1, r1, #1
	subs r1, r1, r6
	lsls r1, r1, #1
	ldr r2, _080C3D20  @ 0xFFFFFCD4
	adds r4, r4, r2
	adds r1, r1, r4
	adds r2, r6, #0
	movs r3, #0xc
	bl TileMap_CopyRect
	movs r0, #0x1e
	subs r0, r0, r6
_080C3CFE:
	adds r3, r7, #0
	adds r3, #0x2f
	strb r0, [r3]
	adds r1, r7, #0
	adds r1, #0x30
	movs r0, #0xc
	strb r0, [r1]
_080C3D0C:
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C3D18: .4byte gUnknown_02022FD4
_080C3D1C: .4byte gUnknown_0201B458
_080C3D20: .4byte 0xFFFFFCD4

	THUMB_FUNC_START sub_80C3D24
sub_80C3D24: @ 0x080C3D24
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080C3D58  @ gUnknown_08A3EE6C
	ldr r0, [r4, #0x34]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	bl sub_80C3BE4
	adds r0, r4, #0
	bl sub_80C3A64
	ldr r0, [r4, #0x34]
	adds r0, #1
	str r0, [r4, #0x34]
	cmp r0, #4
	bne _080C3D52
	movs r0, #0
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C3D52:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C3D58: .4byte gUnknown_08A3EE6C

	THUMB_FUNC_START sub_80C3D5C
sub_80C3D5C: @ 0x080C3D5C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080C3D98  @ gUnknown_08A3EE70
	ldr r0, [r4, #0x34]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	bl sub_80C3BE4
	adds r0, r4, #0
	bl sub_80C3A64
	ldr r0, [r4, #0x34]
	adds r0, #1
	str r0, [r4, #0x34]
	cmp r0, #4
	bne _080C3D90
	movs r0, #0
	str r0, [r4, #0x34]
	adds r1, r4, #0
	adds r1, #0x29
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C3D90:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C3D98: .4byte gUnknown_08A3EE70

	THUMB_FUNC_START sub_80C3D9C
sub_80C3D9C: @ 0x080C3D9C
	movs r1, #0
	str r1, [r0, #0x34]
	adds r2, r0, #0
	adds r2, #0x29
	strb r1, [r2]
	adds r0, #0x2a
	strb r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80C3DAC
sub_80C3DAC: @ 0x080C3DAC
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r2, _080C3E68  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r2, #0x36
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0xe
	movs r2, #3
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #0
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	ldr r0, _080C3E6C  @ gUnknown_08AA1280
	ldr r1, _080C3E70  @ 0x06003C00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C3E74  @ gUnknown_08AA188C
	movs r1, #0xe0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080C3E78  @ gUnknown_08A97A60
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	bl EnablePaletteSync
	ldr r0, _080C3E7C  @ gUnknown_08A3EE74
	ldr r1, [r4, #0x14]
	bl Proc_Create
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C3E68: .4byte gLCDControlBuffer
_080C3E6C: .4byte gUnknown_08AA1280
_080C3E70: .4byte 0x06003C00
_080C3E74: .4byte gUnknown_08AA188C
_080C3E78: .4byte gUnknown_08A97A60
_080C3E7C: .4byte gUnknown_08A3EE74

	THUMB_FUNC_START sub_80C3E80
sub_80C3E80: @ 0x080C3E80
	push {lr}
	adds r1, r0, #0
	ldr r0, _080C3E90  @ gUnknown_08A3EED4
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080C3E90: .4byte gUnknown_08A3EED4

	THUMB_FUNC_START sub_80C3E94
sub_80C3E94: @ 0x080C3E94
	push {lr}
	ldr r0, _080C3EB8  @ gUnknown_08A3EE74
	bl Proc_DeleteAllWithScript
	ldr r0, _080C3EBC  @ gUnknown_08A3EED4
	bl Proc_DeleteAllWithScript
	bl SetDefaultColorEffects
	ldr r0, _080C3EC0  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #2
	bl BG_EnableSyncByMask
	pop {r0}
	bx r0
	.align 2, 0
_080C3EB8: .4byte gUnknown_08A3EE74
_080C3EBC: .4byte gUnknown_08A3EED4
_080C3EC0: .4byte gBG1TilemapBuffer

	THUMB_FUNC_START nullsub_71
nullsub_71: @ 0x080C3EC4
	bx lr

	THUMB_FUNC_START sub_80C3EC8
sub_80C3EC8: @ 0x080C3EC8
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x2a
	movs r0, #0
	strb r0, [r2]
	adds r2, #1
	strb r0, [r2]
	subs r0, #1
	str r0, [r1, #0x2c]
	bx lr

	THUMB_FUNC_START sub_80C3EDC
sub_80C3EDC: @ 0x080C3EDC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8002264
	adds r1, r4, #0
	adds r1, #0x30
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080C3EF6
	bl Sound_GetCurrentSong
	str r0, [r4, #0x34]
_080C3EF6:
	adds r0, r4, #0
	bl sub_8099F68
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C3F04
sub_80C3F04: @ 0x080C3F04
	push {lr}
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080C3F1E
	ldr r0, [r1, #0x34]
	movs r1, #1
	movs r2, #0
	bl Sound_PlaySong8002574
_080C3F1E:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C3F24
sub_80C3F24: @ 0x080C3F24
	push {lr}
	adds r1, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	beq _080C3F50
	cmp r0, #1
	bgt _080C3F3A
	cmp r0, #0
	beq _080C3F40
	b _080C3F7A
_080C3F3A:
	cmp r0, #2
	beq _080C3F60
	b _080C3F7A
_080C3F40:
	ldr r0, [r1, #0x2c]
	cmp r0, #0
	beq _080C3F70
	adds r0, r1, #0
	movs r1, #1
	bl Proc_GotoLabel
	b _080C3F82
_080C3F50:
	ldr r0, [r1, #0x2c]
	cmp r0, #0
	beq _080C3F70
	adds r0, r1, #0
	movs r1, #2
	bl Proc_GotoLabel
	b _080C3F82
_080C3F60:
	ldr r0, [r1, #0x2c]
	cmp r0, #0
	beq _080C3F70
	adds r0, r1, #0
	movs r1, #3
	bl Proc_GotoLabel
	b _080C3F82
_080C3F70:
	adds r0, r1, #0
	movs r1, #5
	bl Proc_GotoLabel
	b _080C3F82
_080C3F7A:
	adds r0, r1, #0
	movs r1, #5
	bl Proc_GotoLabel
_080C3F82:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C3F88
sub_80C3F88: @ 0x080C3F88
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitFromCharId
	ldr r1, _080C3FAC  @ gUnknown_03005280
	ldrb r1, [r1, #0x11]
	lsls r1, r1, #5
	ldr r2, _080C3FB0  @ gUnknown_082060B0
	adds r1, r1, r2
	ldr r1, [r1, #0xc]
	adds r2, r4, #0
	bl MakeShopArmory
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C3FAC: .4byte gUnknown_03005280
_080C3FB0: .4byte gUnknown_082060B0

	THUMB_FUNC_START sub_80C3FB4
sub_80C3FB4: @ 0x080C3FB4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitFromCharId
	ldr r1, _080C3FD8  @ gUnknown_03005280
	ldrb r1, [r1, #0x11]
	lsls r1, r1, #5
	ldr r2, _080C3FDC  @ gUnknown_082060B0
	adds r1, r1, r2
	ldr r1, [r1, #0x10]
	adds r2, r4, #0
	bl MakeShopVendor
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C3FD8: .4byte gUnknown_03005280
_080C3FDC: .4byte gUnknown_082060B0

	THUMB_FUNC_START sub_80C3FE0
sub_80C3FE0: @ 0x080C3FE0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitFromCharId
	ldr r1, _080C4004  @ gUnknown_03005280
	ldrb r1, [r1, #0x11]
	lsls r1, r1, #5
	ldr r2, _080C4008  @ gUnknown_082060B0
	adds r1, r1, r2
	ldr r1, [r1, #0x14]
	adds r2, r4, #0
	bl sub_80B4220
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C4004: .4byte gUnknown_03005280
_080C4008: .4byte gUnknown_082060B0

	THUMB_FUNC_START sub_80C400C
sub_80C400C: @ 0x080C400C
	push {r4, lr}
	adds r4, r0, #0
	cmp r1, #0
	beq _080C4020
	ldr r0, _080C401C  @ gUnknown_08A3EEEC
	bl Proc_CreateBlockingChild
	b _080C4028
	.align 2, 0
_080C401C: .4byte gUnknown_08A3EEEC
_080C4020:
	ldr r0, _080C4034  @ gUnknown_08A3EEEC
	movs r1, #3
	bl Proc_Create
_080C4028:
	adds r1, r0, #0
	adds r1, #0x29
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080C4034: .4byte gUnknown_08A3EEEC

	THUMB_FUNC_START sub_80C4038
sub_80C4038: @ 0x080C4038
	push {lr}
	ldr r0, _080C4044  @ gUnknown_08A3EEEC
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080C4044: .4byte gUnknown_08A3EEEC

	THUMB_FUNC_START sub_80C4048
sub_80C4048: @ 0x080C4048
	push {lr}
	ldr r0, _080C4054  @ gUnknown_08A3EEEC
	bl Proc_Find
	pop {r1}
	bx r1
	.align 2, 0
_080C4054: .4byte gUnknown_08A3EEEC

	THUMB_FUNC_START sub_80C4058
sub_80C4058: @ 0x080C4058
	push {lr}
	ldr r0, _080C406C  @ gUnknown_08A3EEEC
	bl Proc_Find
	cmp r0, #0
	beq _080C4066
	movs r0, #1
_080C4066:
	pop {r1}
	bx r1
	.align 2, 0
_080C406C: .4byte gUnknown_08A3EEEC

	THUMB_FUNC_START sub_80C4070
sub_80C4070: @ 0x080C4070
	push {lr}
	bl sub_80C4048
	cmp r0, #0
	bne _080C407E
	movs r0, #0
	b _080C4082
_080C407E:
	adds r0, #0x29
	ldrb r0, [r0]
_080C4082:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C4088
sub_80C4088: @ 0x080C4088
	push {lr}
	bl sub_80C4048
	cmp r0, #0
	bne _080C4096
	movs r0, #0
	b _080C4098
_080C4096:
	ldr r0, [r0, #0x2c]
_080C4098:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80C409C
sub_80C409C: @ 0x080C409C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C4048
	cmp r0, #0
	beq _080C40AA
	str r4, [r0, #0x2c]
_080C40AA:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C40B0
sub_80C40B0: @ 0x080C40B0
	movs r1, #0
	strh r1, [r0, #0x30]
	strh r1, [r0, #0x34]
	bx lr

	THUMB_FUNC_START sub_80C40B8
sub_80C40B8: @ 0x080C40B8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x30]
	adds r0, #1
	strh r0, [r4, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x77
	bgt _080C4100
	movs r0, #0x30
	ldrsh r1, [r4, r0]
	movs r0, #0x77
	subs r0, r0, r1
	movs r1, #0x78
	movs r2, #1
	bl sub_800B84C
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #5
	subs r1, r0, r1
	lsls r1, r1, #4
	bl DivArm
	adds r2, r0, #0
	movs r1, #0x10
	subs r1, r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	b _080C4124
_080C4100:
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	ldr r0, [r4, #0x2c]
	ldrh r0, [r0, #0x30]
	strh r0, [r4, #0x34]
	ldr r1, [r4, #0x14]
	adds r1, #0x29
	ldrb r0, [r1]
	movs r2, #1
	orrs r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C4124:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C412C
sub_80C412C: @ 0x080C412C
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x34]
	subs r0, #1
	strh r0, [r2, #0x34]
	ldr r1, [r2, #0x14]
	ldr r0, [r1, #0x30]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r0, r3
	ldr r3, [r1, #0x40]
	cmp r0, r3
	blt _080C4150
	str r3, [r1, #0x30]
	adds r0, r2, #0
	bl Proc_ClearNativeCallback
	b _080C4152
_080C4150:
	str r0, [r1, #0x30]
_080C4152:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C4158
sub_80C4158: @ 0x080C4158
	push {lr}
	adds r3, r0, #0
	ldrh r0, [r3, #0x34]
	subs r0, #1
	strh r0, [r3, #0x34]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt _080C417E
	movs r0, #0
	strh r0, [r3, #0x30]
	ldr r1, [r3, #0x14]
	adds r1, #0x29
	ldrb r2, [r1]
	subs r0, #2
	ands r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	bl Proc_ClearNativeCallback
_080C417E:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C4184
sub_80C4184: @ 0x080C4184
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x30]
	adds r0, #1
	strh r0, [r4, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x77
	bgt _080C41CA
	movs r0, #0x30
	ldrsh r1, [r4, r0]
	movs r0, #0x77
	subs r0, r0, r1
	movs r1, #0x78
	movs r2, #1
	bl sub_800B84C
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #5
	subs r1, r0, r1
	lsls r1, r1, #4
	bl DivArm
	lsls r1, r0, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	b _080C41DC
_080C41CA:
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C41DC:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C41E4
sub_80C41E4: @ 0x080C41E4
	ldr r1, [r0, #0x14]
	adds r1, #0x29
	ldrb r2, [r1]
	movs r0, #5
	negs r0, r0
	ands r0, r2
	strb r0, [r1]
	bx lr

	THUMB_FUNC_START sub_80C41F4
sub_80C41F4: @ 0x080C41F4
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, _080C420C  @ gUnknown_08AA2044
	adds r1, r2, #0
	bl Proc_Create
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C420C: .4byte gUnknown_08AA2044

	THUMB_FUNC_START sub_80C4210
sub_80C4210: @ 0x080C4210
	push {lr}
	ldr r0, _080C4224  @ gUnknown_08AA2044
	bl Proc_Find
	cmp r0, #0
	beq _080C421E
	movs r0, #1
_080C421E:
	pop {r1}
	bx r1
	.align 2, 0
_080C4224: .4byte gUnknown_08AA2044

	THUMB_FUNC_START sub_80C4228
sub_80C4228: @ 0x080C4228
	push {lr}
	ldr r0, _080C4234  @ gUnknown_08AA2044
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080C4234: .4byte gUnknown_08AA2044

	THUMB_FUNC_START sub_80C4238
sub_80C4238: @ 0x080C4238
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r3, r0, #0
	ldr r0, [r3, #0x30]
	asrs r0, r0, #8
	cmp r0, #0
	bge _080C4250
	adds r0, #0xff
_080C4250:
	asrs r4, r0, #8
	adds r1, r3, #0
	adds r1, #0x35
	strb r4, [r1]
	ldr r0, [r3, #0x30]
	asrs r2, r0, #8
	adds r0, r2, #0
	mov r8, r1
	cmp r2, #0
	bge _080C4266
	adds r0, #0xff
_080C4266:
	asrs r0, r0, #8
	lsls r0, r0, #8
	subs r0, r2, r0
	cmp r0, #0xf
	bgt _080C4272
	b _080C4398
_080C4272:
	adds r0, r3, #0
	adds r0, #0x34
	lsls r1, r4, #0x18
	asrs r1, r1, #0x18
	movs r2, #0
	ldrsb r2, [r0, r2]
	str r0, [sp, #4]
	cmp r1, r2
	bne _080C4286
	b _080C4398
_080C4286:
	adds r4, r3, #0
	adds r4, #0x29
	ldrb r1, [r4]
	movs r0, #4
	ands r0, r1
	ldr r1, _080C42D4  @ gUnknown_08206E24
	mov r9, r1
	ldr r2, _080C42D8  @ gUnknown_08206FDC
	mov sl, r2
	cmp r0, #0
	bne _080C4302
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	adds r2, r0, #1
	cmp r2, #0x16
	bhi _080C4302
	adds r6, r3, #0
	adds r6, #0x48
	mov r7, r9
	subs r7, #0x14
	ldr r0, _080C42DC  @ gUnknown_0202BCF0
	mov ip, r0
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r1, r0, #2
_080C42BA:
	adds r5, r1, r7
	ldr r0, [r5, #4]
	cmp r0, #0
	beq _080C42FA
	movs r0, #0
	strb r0, [r6]
	mov r1, ip
	ldrb r0, [r1, #0x1b]
	cmp r0, #2
	bne _080C42E0
	ldr r0, [r5, #4]
	b _080C42E2
	.align 2, 0
_080C42D4: .4byte gUnknown_08206E24
_080C42D8: .4byte gUnknown_08206FDC
_080C42DC: .4byte gUnknown_0202BCF0
_080C42E0:
	ldr r0, [r5, #8]
_080C42E2:
	str r0, [r3, #0x44]
	ldr r0, [r5, #0xc]
	str r0, [r3, #0x3c]
	ldr r0, [r5, #0x10]
	str r0, [r3, #0x40]
	ldrb r1, [r4]
	movs r0, #4
	orrs r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r4]
	b _080C4302
_080C42FA:
	adds r1, #0x14
	adds r2, #1
	cmp r2, #0x16
	bls _080C42BA
_080C4302:
	mov r2, r8
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #2
	mov r2, r9
	adds r5, r1, r2
	adds r2, r0, #1
	movs r0, #1
	ands r2, r0
	ldr r0, [r5]
	cmp r0, #0
	beq _080C435C
	ldr r0, [r0]
	lsls r1, r2, #2
	add r1, sl
	ldr r4, [r1]
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r4, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, [r5]
	ldr r0, [r0, #4]
	ldr r5, _080C4354  @ gUnknown_02020188
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C4358  @ gUnknown_0201C5D4
	lsrs r4, r4, #5
	movs r1, #0xe0
	lsls r1, r1, #7
	adds r4, r4, r1
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r1, r5, #0
	adds r2, r4, #0
	bl CallARM_FillTileRect
	b _080C4390
	.align 2, 0
_080C4354: .4byte gUnknown_02020188
_080C4358: .4byte gUnknown_0201C5D4
_080C435C:
	movs r0, #1
	negs r0, r0
	str r0, [sp]
	ldr r1, _080C43A8  @ gUnknown_08206FDC
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r4, [r0]
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r4, r2
	ldr r2, _080C43AC  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	lsrs r4, r4, #5
	movs r1, #0xe0
	lsls r1, r1, #7
	adds r0, r4, r1
	ldr r3, _080C43B0  @ gUnknown_0201C5D4
	movs r2, #0x80
	lsls r2, r2, #3
_080C4386:
	strh r0, [r3]
	adds r3, #2
	subs r2, #1
	cmp r2, #0
	bne _080C4386
_080C4390:
	mov r2, r8
	ldrb r0, [r2]
	ldr r1, [sp, #4]
	strb r0, [r1]
_080C4398:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C43A8: .4byte gUnknown_08206FDC
_080C43AC: .4byte 0x01000008
_080C43B0: .4byte gUnknown_0201C5D4

	THUMB_FUNC_START sub_80C43B4
sub_80C43B4: @ 0x080C43B4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	asrs r5, r0, #8
	adds r0, r5, #0
	cmp r5, #0
	bge _080C43C4
	adds r0, #0xf
_080C43C4:
	asrs r0, r0, #4
	strh r0, [r4, #0x38]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x36
	ldrsh r1, [r4, r2]
	cmp r0, r1
	beq _080C440C
	adds r1, r5, #0
	adds r1, #0xf0
	adds r0, r1, #0
	cmp r1, #0
	bge _080C43E2
	ldr r2, _080C4454  @ 0x000001EF
	adds r0, r5, r2
_080C43E2:
	asrs r0, r0, #8
	lsls r0, r0, #8
	subs r0, r1, r0
	adds r1, r0, #0
	cmp r0, #0
	bge _080C43F0
	adds r1, r0, #7
_080C43F0:
	asrs r1, r1, #3
	lsls r1, r1, #6
	ldr r0, _080C4458  @ gUnknown_0201C5D4
	adds r0, r1, r0
	ldr r2, _080C445C  @ gBG0TilemapBuffer
	adds r1, r1, r2
	movs r2, #0x20
	bl CpuFastSet
	movs r0, #1
	bl BG_EnableSyncByMask
	ldrh r0, [r4, #0x38]
	strh r0, [r4, #0x36]
_080C440C:
	bl sub_80C4210
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080C443A
	ldr r0, [r4, #0x2c]
	ldr r2, [r4, #0x30]
	cmp r0, r2
	beq _080C443A
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _080C443A
	ldr r0, [r4, #0x3c]
	cmp r2, r0
	blt _080C443A
	ldr r1, [r4, #0x44]
	adds r0, r4, #0
	bl sub_80C41F4
_080C443A:
	movs r0, #0xff
	ands r5, r0
	movs r0, #0
	movs r1, #0
	adds r2, r5, #0
	bl BG_SetPosition
	ldr r0, [r4, #0x30]
	str r0, [r4, #0x2c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C4454: .4byte 0x000001EF
_080C4458: .4byte gUnknown_0201C5D4
_080C445C: .4byte gBG0TilemapBuffer

	THUMB_FUNC_START sub_80C4460
sub_80C4460: @ 0x080C4460
	push {r4, r5, r6, lr}
	sub sp, #0xc
	adds r6, r0, #0
	movs r0, #0
	bl SetPrimaryHBlankHandler
	movs r0, #0
	bl SetupBackgrounds
	ldr r3, _080C45B8  @ gLCDControlBuffer
	ldrb r1, [r3, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r3, #1]
	ldrb r2, [r3, #0xc]
	adds r1, #0xd
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	str r4, [sp, #4]
	ldr r1, _080C45BC  @ gPaletteBuffer
	ldr r2, _080C45C0  @ 0x01000100
	add r0, sp, #4
	bl CpuFastSet
	ldr r0, _080C45C4  @ gUnknown_08A40FC8
	movs r1, #0xe0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r0, #1
	negs r0, r0
	str r0, [sp, #8]
	add r0, sp, #8
	ldr r1, _080C45C8  @ gUnknown_08206FDC
	ldr r4, [r1]
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r4, r2
	ldr r2, _080C45CC  @ 0x01000008
	bl CpuFastSet
	lsrs r4, r4, #5
	movs r0, #0xe0
	lsls r0, r0, #7
	adds r4, r4, r0
	ldr r0, _080C45D0  @ gBG0TilemapBuffer
	movs r5, #0x80
	lsls r5, r5, #3
_080C452A:
	strh r4, [r0]
	adds r0, #2
	subs r5, #1
	cmp r5, #0
	bne _080C452A
	ldr r0, _080C45D4  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C45D8  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C45DC  @ gBG3TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0xf
	bl BG_EnableSyncByMask
	bl EnablePaletteSync
	ldr r2, _080C45B8  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r4, #3
	negs r4, r4
	ands r0, r4
	movs r1, #5
	negs r1, r1
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	negs r1, r1
	ands r0, r1
	strb r0, [r2, #1]
	bl SetDefaultColorEffects
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	ands r0, r4
	strb r0, [r2]
	str r5, [r6, #0x2c]
	str r5, [r6, #0x30]
	adds r1, r6, #0
	adds r1, #0x34
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x35
	strb r5, [r0]
	strh r5, [r6, #0x36]
	strh r5, [r6, #0x38]
	adds r0, #0x15
	strh r5, [r0]
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C45B8: .4byte gLCDControlBuffer
_080C45BC: .4byte gPaletteBuffer
_080C45C0: .4byte 0x01000100
_080C45C4: .4byte gUnknown_08A40FC8
_080C45C8: .4byte gUnknown_08206FDC
_080C45CC: .4byte 0x01000008
_080C45D0: .4byte gBG0TilemapBuffer
_080C45D4: .4byte gBG1TilemapBuffer
_080C45D8: .4byte gBG2TilemapBuffer
_080C45DC: .4byte gBG3TilemapBuffer

	THUMB_FUNC_START sub_80C45E0
sub_80C45E0: @ 0x080C45E0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080C465A
	adds r0, r4, #0
	adds r0, #0x48
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r5, r0, #0
	cmp r1, #9
	bgt _080C461C
	ldr r0, [r4, #0x44]
	movs r1, #0
	ldrsb r1, [r5, r1]
	lsls r2, r1, #2
	adds r0, r0, r2
	ldr r0, [r0]
	lsls r1, r1, #0xb
	ldr r2, _080C4618  @ 0x06008000
	adds r1, r1, r2
	bl CopyDataWithPossibleUncomp
	b _080C463E
	.align 2, 0
_080C4618: .4byte 0x06008000
_080C461C:
	ldr r0, _080C4660  @ gBG3TilemapBuffer
	ldr r1, [r4, #0x44]
	ldr r1, [r1, #0x28]
	movs r2, #0
	bl CallARM_FillTileRect
	movs r0, #8
	bl BG_EnableSyncByMask
	ldr r0, [r4, #0x44]
	ldr r0, [r0, #0x2c]
	movs r1, #0
	movs r2, #0xc0
	bl CopyToPaletteBuffer
	bl EnablePaletteSync
_080C463E:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0xa
	ble _080C465A
	adds r2, r4, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
_080C465A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C4660: .4byte gBG3TilemapBuffer

	THUMB_FUNC_START sub_80C4664
sub_80C4664: @ 0x080C4664
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C4688  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080C468C
	bl sub_80A4CB4
	cmp r0, #0
	beq _080C468C
	adds r0, r4, #0
	movs r1, #0
	bl Proc_GotoLabel
	b _080C46DA
	.align 2, 0
_080C4688: .4byte gKeyStatusPtr
_080C468C:
	ldr r1, [r4, #0x30]
	ldr r0, _080C46E0  @ 0x000037FF
	cmp r1, r0
	bgt _080C469C
	movs r2, #0xf0
	lsls r2, r2, #3
	adds r0, r1, r2
	str r0, [r4, #0x30]
_080C469C:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080C46B0
	ldr r0, [r4, #0x30]
	adds r0, #0x80
	str r0, [r4, #0x30]
_080C46B0:
	adds r0, r4, #0
	bl sub_80C4238
	adds r0, r4, #0
	bl sub_80C43B4
	adds r0, r4, #0
	bl sub_80C45E0
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #0x14
	bls _080C46DA
	adds r1, r4, #0
	adds r1, #0x4a
	movs r0, #0xf0
	strh r0, [r1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C46DA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C46E0: .4byte 0x000037FF

	THUMB_FUNC_START sub_80C46E4
sub_80C46E4: @ 0x080C46E4
	push {lr}
	bl sub_80C4228
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C46F0
sub_80C46F0: @ 0x080C46F0
	push {lr}
	ldr r2, _080C4730  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bl SetDefaultColorEffects
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r0, _080C4734  @ gBG3TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #8
	bl BG_EnableSyncByMask
	pop {r0}
	bx r0
	.align 2, 0
_080C4730: .4byte gLCDControlBuffer
_080C4734: .4byte gBG3TilemapBuffer

	THUMB_FUNC_START sub_80C4738
sub_80C4738: @ 0x080C4738
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _080C4798  @ gUnknown_08206FB4
	ldr r5, [r0]
	ldr r0, [r5]
	ldr r1, _080C479C  @ gUnknown_08206FDC
	ldr r4, [r1]
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r4, r2
	bl CopyDataWithPossibleUncomp
	ldr r0, [r5, #4]
	ldr r5, _080C47A0  @ gUnknown_02020188
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C47A4  @ gBG0TilemapBuffer
	lsrs r4, r4, #5
	movs r1, #0xe0
	lsls r1, r1, #7
	adds r4, r4, r1
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r1, r5, #0
	adds r2, r4, #0
	bl CallARM_FillTileRect
	movs r0, #1
	bl BG_EnableSyncByMask
	ldr r1, _080C47A8  @ gPaletteBuffer
	movs r0, #0
	strh r0, [r1]
	ldr r0, _080C47AC  @ gUnknown_08A40FC8
	movs r1, #0xe0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	bl EnablePaletteSync
	adds r6, #0x4a
	movs r0, #0xf0
	strh r0, [r6]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C4798: .4byte gUnknown_08206FB4
_080C479C: .4byte gUnknown_08206FDC
_080C47A0: .4byte gUnknown_02020188
_080C47A4: .4byte gBG0TilemapBuffer
_080C47A8: .4byte gPaletteBuffer
_080C47AC: .4byte gUnknown_08A40FC8

	THUMB_FUNC_START sub_80C47B0
sub_80C47B0: @ 0x080C47B0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x4a
	ldrh r0, [r4]
	subs r0, #1
	strh r0, [r4]
	ldr r0, _080C47F0  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080C47D8
	bl sub_80A4CB4
	cmp r0, #0
	beq _080C47D8
	movs r0, #0
	strh r0, [r4]
_080C47D8:
	adds r0, r5, #0
	adds r0, #0x4a
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bgt _080C47EA
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080C47EA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C47F0: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_80C47F4
sub_80C47F4: @ 0x080C47F4
	push {lr}
	sub sp, #4
	ldr r0, _080C4860  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C4864  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C4868  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0
	str r0, [sp]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	ldr r2, _080C486C  @ 0x01006000
	mov r0, sp
	bl CpuFastSet
	ldr r2, _080C4870  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	ldr r0, _080C4874  @ gBG3TilemapBuffer
	movs r1, #1
	negs r1, r1
	bl BG_Fill
	movs r0, #8
	bl BG_EnableSyncByMask
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080C4860: .4byte gBG0TilemapBuffer
_080C4864: .4byte gBG1TilemapBuffer
_080C4868: .4byte gBG2TilemapBuffer
_080C486C: .4byte 0x01006000
_080C4870: .4byte gLCDControlBuffer
_080C4874: .4byte gBG3TilemapBuffer

	THUMB_FUNC_START sub_80C4878
sub_80C4878: @ 0x080C4878
	push {lr}
	adds r1, r0, #0
	ldr r0, _080C4888  @ gUnknown_08AA2084
	bl Proc_CreateBlockingChild
	pop {r0}
	bx r0
	.align 2, 0
_080C4888: .4byte gUnknown_08AA2084

	THUMB_FUNC_START sub_80C488C
sub_80C488C: @ 0x080C488C
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	bl GetBackgroundTileDataOffset
	adds r4, r0, #0
	ldr r0, _080C48DC  @ gUnknown_08B12DB4
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r4, r2
	bl CopyDataWithPossibleUncomp
	movs r0, #0
	str r0, [sp]
	ldr r0, _080C48E0  @ 0x06005000
	adds r4, r4, r0
	ldr r5, _080C48E4  @ 0x01000008
	mov r0, sp
	adds r1, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	movs r0, #1
	lsls r0, r6
	bl BG_EnableSyncByMask
	ldr r0, _080C48E8  @ gUnknown_08A708A7
	str r0, [sp, #4]
	add r0, sp, #4
	ldr r1, _080C48EC  @ gUnknown_02022A68
	adds r2, r5, #0
	bl CpuFastSet
	bl EnablePaletteSync
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C48DC: .4byte gUnknown_08B12DB4
_080C48E0: .4byte 0x06005000
_080C48E4: .4byte 0x01000008
_080C48E8: .4byte gUnknown_08A708A7
_080C48EC: .4byte gUnknown_02022A68

	THUMB_FUNC_START sub_80C48F0
sub_80C48F0: @ 0x080C48F0
	push {r4, lr}
	bl BG_GetMapBuffer
	adds r2, r0, #0
	movs r4, #0xf0
	lsls r4, r4, #8
	movs r1, #0
	ldr r3, _080C4914  @ 0x0000027F
_080C4900:
	adds r0, r4, r1
	strh r0, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, r3
	ble _080C4900
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C4914: .4byte 0x0000027F

	THUMB_FUNC_START sub_80C4918
sub_80C4918: @ 0x080C4918
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C4940  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _080C4938
	movs r0, #1
	bl Sound_FadeOut800231C
	adds r0, r4, #0
	movs r1, #6
	bl Proc_GotoLabel
_080C4938:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C4940: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_80C4944
sub_80C4944: @ 0x080C4944
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, _080C4A28  @ gUnknown_08AA213C
	bl SetupBackgrounds
	ldr r3, _080C4A2C  @ gLCDControlBuffer
	ldrb r1, [r3]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	movs r4, #1
	orrs r0, r4
	strb r0, [r3]
	ldrb r0, [r3, #0xc]
	movs r2, #3
	orrs r0, r2
	strb r0, [r3, #0xc]
	ldrb r0, [r3, #0x10]
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r1, [r3, #0x14]
	movs r0, #4
	negs r0, r0
	ands r0, r1
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	orrs r0, r2
	strb r0, [r3, #0x18]
	ldrb r1, [r3, #1]
	orrs r1, r4
	movs r0, #3
	negs r0, r0
	ands r1, r0
	subs r0, #2
	ands r1, r0
	subs r0, #4
	ands r1, r0
	movs r0, #0x10
	orrs r1, r0
	ldrb r2, [r3, #0x15]
	movs r0, #0x3f
	ands r0, r2
	movs r2, #0x40
	orrs r0, r2
	movs r2, #0x21
	negs r2, r2
	ands r0, r2
	strb r0, [r3, #0x15]
	ands r1, r2
	movs r0, #0x41
	negs r0, r0
	ands r1, r0
	movs r0, #0x7f
	ands r1, r0
	strb r1, [r3, #1]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	ldr r4, _080C4A30  @ gUnknown_08B17B64
	movs r0, #2
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C4A34  @ gUnknown_08B18ED4
	movs r1, #0
	movs r2, #0x60
	bl CopyToPaletteBuffer
	ldr r0, _080C4A38  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #4
	bl BG_EnableSyncByMask
	movs r0, #3
	movs r1, #0
	bl Sound_PlaySong80024D4
	adds r0, r6, #0
	adds r0, #0x29
	strb r5, [r0]
	movs r0, #0x3c
	strh r0, [r6, #0x2a]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C4A28: .4byte gUnknown_08AA213C
_080C4A2C: .4byte gLCDControlBuffer
_080C4A30: .4byte gUnknown_08B17B64
_080C4A34: .4byte gUnknown_08B18ED4
_080C4A38: .4byte gBG2TilemapBuffer

	THUMB_FUNC_START sub_80C4A3C
sub_80C4A3C: @ 0x080C4A3C
	push {lr}
	adds r1, r0, #0
	adds r1, #0x4c
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x4e
	strh r2, [r0]
	ldr r0, _080C4A7C  @ gBG2TilemapBuffer
	ldr r1, _080C4A80  @ gUnknown_08B18D68
	movs r3, #5
	bl sub_800154C
	movs r0, #4
	bl BG_EnableSyncByMask
	ldr r2, _080C4A84  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
_080C4A7C: .4byte gBG2TilemapBuffer
_080C4A80: .4byte gUnknown_08B18D68
_080C4A84: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C4A88
sub_80C4A88: @ 0x080C4A88
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r9, r0
	mov r5, r9
	adds r5, #0x4c
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #0x1d
	bgt _080C4AC2
	adds r3, r0, #0
	movs r4, #0x1e
	str r4, [sp]
	movs r0, #5
	movs r1, #4
	movs r2, #0x32
	bl sub_8012DCC
	adds r7, r0, #0
	movs r0, #0
	ldrsh r3, [r5, r0]
	str r4, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x10
	b _080C4AE6
_080C4AC2:
	movs r1, #0
	ldrsh r3, [r5, r1]
	subs r3, #0x1e
	movs r4, #0x1e
	str r4, [sp]
	movs r0, #0
	movs r1, #0x32
	movs r2, #0x64
	bl sub_8012DCC
	adds r7, r0, #0
	movs r2, #0
	ldrsh r3, [r5, r2]
	subs r3, #0x1e
	str r4, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
_080C4AE6:
	bl sub_8012DCC
	mov sl, r0
	cmp r7, #0x31
	ble _080C4AF4
	movs r0, #0x64
	subs r7, r0, r7
_080C4AF4:
	mov r6, r9
	adds r6, #0x4c
	movs r0, #0
	ldrsh r3, [r6, r0]
	movs r4, #0x3c
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0xd6
	bl sub_8012DCC
	adds r5, r0, #0
	movs r1, #0
	ldrsh r3, [r6, r1]
	str r4, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x80
	bl sub_8012DCC
	adds r4, r0, #0
	movs r2, #0x4e
	add r2, r9
	mov r8, r2
	movs r0, #0
	ldrsh r1, [r2, r0]
	lsls r0, r7, #2
	adds r0, r0, r7
	adds r0, #0x80
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	str r0, [sp, #4]
	movs r0, #2
	movs r2, #0
	movs r3, #0
	bl sub_80ADDFC
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #2
	adds r1, r2, #0
	bl sub_80ADE90
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	movs r0, #0x48
	str r0, [sp]
	movs r0, #2
	adds r1, r5, #0
	adds r2, r4, #0
	movs r3, #0x50
	bl sub_80ADEE0
	mov r1, r8
	ldrh r0, [r1]
	subs r0, #0x40
	strh r0, [r1]
	mov r2, sl
	lsls r1, r2, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	ldrh r0, [r6]
	adds r0, #1
	strh r0, [r6]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3b
	ble _080C4B90
	mov r0, r9
	bl Proc_ClearNativeCallback
_080C4B90:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C4BA0
sub_80C4BA0: @ 0x080C4BA0
	ldr r2, _080C4BB0  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #5
	negs r0, r0
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_080C4BB0: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C4BB4
sub_80C4BB4: @ 0x080C4BB4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov sl, r3
	cmp r2, #0
	ble _080C4C2E
	mov r9, r1
	adds r7, r0, #0
	mov r8, r2
_080C4BCA:
	ldrh r6, [r7]
	adds r0, r6, #0
	movs r1, #0x1f
	ands r0, r1
	mov r1, sl
	muls r1, r0, r1
	movs r0, #0x80
	lsls r0, r0, #5
	bl DivArm
	adds r5, r0, #0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	asrs r0, r6, #5
	movs r1, #0x1f
	ands r0, r1
	mov r1, sl
	muls r1, r0, r1
	movs r0, #0x80
	lsls r0, r0, #5
	bl DivArm
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	asrs r6, r6, #0xa
	movs r0, #0x1f
	ands r6, r0
	mov r1, sl
	muls r1, r6, r1
	movs r0, #0x80
	lsls r0, r0, #5
	bl DivArm
	lsls r0, r0, #0x10
	lsls r4, r4, #5
	adds r5, r5, r4
	lsrs r0, r0, #6
	adds r5, r5, r0
	mov r1, r9
	strh r5, [r1]
	movs r0, #2
	add r9, r0
	adds r7, #2
	movs r1, #1
	negs r1, r1
	add r8, r1
	mov r0, r8
	cmp r0, #0
	bne _080C4BCA
_080C4C2E:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C4C3C
sub_80C4C3C: @ 0x080C4C3C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	subs r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt _080C4C52
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C4C52:
	adds r0, r4, #0
	bl sub_80C4918
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C4C60
sub_80C4C60: @ 0x080C4C60
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r4, _080C4CBC  @ gUnknown_08206FE4
	adds r6, r5, #0
	adds r6, #0x29
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r1, _080C4CC0  @ 0x06001000
	bl CopyDataWithPossibleUncomp
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r4, #4
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r4, _080C4CC4  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C4CC8  @ gBG0TilemapBuffer
	movs r2, #0xc2
	lsls r2, r2, #6
	adds r1, r4, #0
	bl CallARM_FillTileRect
	ldr r2, _080C4CCC  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #1
	bl BG_EnableSyncByMask
	movs r0, #0
	strh r0, [r5, #0x2c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C4CBC: .4byte gUnknown_08206FE4
_080C4CC0: .4byte 0x06001000
_080C4CC4: .4byte gUnknown_02020188
_080C4CC8: .4byte gBG0TilemapBuffer
_080C4CCC: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C4CD0
sub_80C4CD0: @ 0x080C4CD0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r4, _080C4D38  @ gUnknown_08206FE4
	adds r6, r5, #0
	adds r6, #0x29
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r1, _080C4D3C  @ 0x06001000
	bl CopyDataWithPossibleUncomp
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r4, #4
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r4, _080C4D40  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C4D44  @ gBG0TilemapBuffer
	movs r2, #0xc2
	lsls r2, r2, #6
	adds r1, r4, #0
	bl CallARM_FillTileRect
	ldr r0, _080C4D48  @ gBG1TilemapBuffer
	ldr r2, _080C4D4C  @ 0x0000E080
	adds r1, r4, #0
	bl CallARM_FillTileRect
	ldr r2, _080C4D50  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #3
	bl BG_EnableSyncByMask
	movs r0, #0
	strh r0, [r5, #0x2c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C4D38: .4byte gUnknown_08206FE4
_080C4D3C: .4byte 0x06001000
_080C4D40: .4byte gUnknown_02020188
_080C4D44: .4byte gBG0TilemapBuffer
_080C4D48: .4byte gBG1TilemapBuffer
_080C4D4C: .4byte 0x0000E080
_080C4D50: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C4D54
sub_80C4D54: @ 0x080C4D54
	push {r4, r5, lr}
	ldr r5, _080C4D90  @ gUnknown_08206FE4
	lsls r4, r0, #1
	adds r4, r4, r0
	lsls r4, r4, #2
	adds r0, r4, r5
	ldr r0, [r0]
	ldr r1, _080C4D94  @ 0x06005000
	bl CopyDataWithPossibleUncomp
	adds r5, #4
	adds r4, r4, r5
	ldr r0, [r4]
	ldr r4, _080C4D98  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C4D9C  @ gBG0TilemapBuffer
	movs r2, #0xca
	lsls r2, r2, #6
	adds r1, r4, #0
	bl CallARM_FillTileRect
	movs r0, #1
	bl BG_EnableSyncByMask
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C4D90: .4byte gUnknown_08206FE4
_080C4D94: .4byte 0x06005000
_080C4D98: .4byte gUnknown_02020188
_080C4D9C: .4byte gBG0TilemapBuffer

	THUMB_FUNC_START sub_80C4DA0
sub_80C4DA0: @ 0x080C4DA0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x4f
	bgt _080C4DD4
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r1, #0x50
	movs r2, #0
	bl sub_800B7E0
	adds r3, r0, #0
	ldr r0, _080C4DCC  @ gUnknown_08AA239C
	ldr r1, _080C4DD0  @ gUnknown_02022908
	movs r2, #0x10
	bl sub_80C4BB4
	b _080C4E00
	.align 2, 0
_080C4DCC: .4byte gUnknown_08AA239C
_080C4DD0: .4byte gUnknown_02022908
_080C4DD4:
	ldr r0, _080C4E10  @ gUnknown_08AA239C
	movs r1, #0x60
	movs r2, #0x20
	bl CopyToPaletteBuffer
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	ldr r2, _080C4E14  @ gUnknown_08206FE4
	adds r0, r4, #0
	adds r0, #0x29
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r2, #8
	adds r0, r0, r2
	ldr r0, [r0]
	strh r0, [r4, #0x2a]
	movs r0, #0
	strh r0, [r4, #0x2c]
_080C4E00:
	bl EnablePaletteSync
	adds r0, r4, #0
	bl sub_80C4918
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C4E10: .4byte gUnknown_08AA239C
_080C4E14: .4byte gUnknown_08206FE4

	THUMB_FUNC_START sub_80C4E18
sub_80C4E18: @ 0x080C4E18
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x4f
	bgt _080C4E54
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r1, #0x50
	movs r2, #0
	bl sub_800B7E0
	movs r3, #0x80
	lsls r3, r3, #5
	subs r3, r3, r0
	ldr r0, _080C4E4C  @ gUnknown_08AA239C
	ldr r1, _080C4E50  @ gUnknown_02022908
	movs r2, #0x10
	bl sub_80C4BB4
	b _080C4EAE
	.align 2, 0
_080C4E4C: .4byte gUnknown_08AA239C
_080C4E50: .4byte gUnknown_02022908
_080C4E54:
	str r5, [sp]
	ldr r1, _080C4E80  @ gUnknown_02022908
	ldr r2, _080C4E84  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	strh r5, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x29
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bgt _080C4E88
	movs r0, #0x50
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C4EAE
	.align 2, 0
_080C4E80: .4byte gUnknown_02022908
_080C4E84: .4byte 0x01000008
_080C4E88:
	ldr r2, _080C4EC0  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	movs r1, #1
	bl Proc_GotoLabel
_080C4EAE:
	bl EnablePaletteSync
	adds r0, r4, #0
	bl sub_80C4918
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C4EC0: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C4EC4
sub_80C4EC4: @ 0x080C4EC4
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x4f
	bgt _080C4F00
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r1, #0x50
	movs r2, #0
	bl sub_800B7E0
	movs r3, #0x80
	lsls r3, r3, #5
	subs r3, r3, r0
	ldr r0, _080C4EF8  @ gUnknown_08AA239C
	ldr r1, _080C4EFC  @ gUnknown_02022908
	movs r2, #0x10
	bl sub_80C4BB4
	b _080C4F40
	.align 2, 0
_080C4EF8: .4byte gUnknown_08AA239C
_080C4EFC: .4byte gUnknown_02022908
_080C4F00:
	str r5, [sp]
	ldr r1, _080C4F54  @ gUnknown_02022908
	ldr r2, _080C4F58  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	strh r5, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x29
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	movs r0, #0x5a
	strh r0, [r4, #0x2a]
	ldr r2, _080C4F5C  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	subs r0, #0x5c
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C4F40:
	bl EnablePaletteSync
	adds r0, r4, #0
	bl sub_80C4918
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C4F54: .4byte gUnknown_02022908
_080C4F58: .4byte 0x01000008
_080C4F5C: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C4F60
sub_80C4F60: @ 0x080C4F60
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x4f
	bgt _080C4FA6
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	movs r1, #0x50
	movs r2, #0
	bl sub_800B7E0
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #5
	lsls r1, r1, #4
	bl DivArm
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r1, #0x10
	subs r1, r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	b _080C5006
_080C4FA6:
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r4, r5, #0
	adds r4, #0x29
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #4
	bgt _080C4FE4
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	ldr r2, _080C4FE0  @ gUnknown_08206FE4
	movs r1, #0
	ldrsb r1, [r4, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r2, #8
	adds r0, r0, r2
	ldr r0, [r0]
	strh r0, [r5, #0x2a]
	movs r0, #0
	strh r0, [r5, #0x2c]
	b _080C5006
	.align 2, 0
_080C4FE0: .4byte gUnknown_08206FE4
_080C4FE4:
	ldr r2, _080C5018  @ gUnknown_08206FE4
	movs r1, #0
	ldrsb r1, [r4, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r2, #8
	adds r0, r0, r2
	ldr r0, [r0]
	strh r0, [r5, #0x2a]
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #4
	bl Proc_GotoLabel
_080C5006:
	bl EnablePaletteSync
	adds r0, r5, #0
	bl sub_80C4918
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C5018: .4byte gUnknown_08206FE4

	THUMB_FUNC_START sub_80C501C
sub_80C501C: @ 0x080C501C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x4f
	bgt _080C5064
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r1, #0x50
	movs r2, #0
	bl sub_800B7E0
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #5
	subs r1, r0, r1
	lsls r1, r1, #4
	bl DivArm
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r1, #0x10
	subs r1, r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	b _080C508E
_080C5064:
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x29
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	movs r0, #0x50
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	adds r0, r4, #0
	bl sub_80C4918
_080C508E:
	bl EnablePaletteSync
	adds r0, r4, #0
	bl sub_80C4918
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C50A0
sub_80C50A0: @ 0x080C50A0
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	movs r0, #1
	bl sub_80C488C
	movs r4, #0
	str r4, [sp]
	ldr r1, _080C50F0  @ gUnknown_02022A88
	ldr r2, _080C50F4  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	movs r0, #1
	bl sub_80C48F0
	movs r0, #2
	bl BG_EnableSyncByMask
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _080C50F8  @ 0x06005000
	ldr r2, _080C50FC  @ 0x01000400
	bl CpuFastSet
	ldr r0, _080C5100  @ gBG0TilemapBuffer
	movs r1, #0xa0
	lsls r1, r1, #2
	bl BG_Fill
	movs r0, #1
	bl BG_EnableSyncByMask
	movs r0, #0x16
	strh r0, [r5, #0x2a]
	strh r4, [r5, #0x2c]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C50F0: .4byte gUnknown_02022A88
_080C50F4: .4byte 0x01000008
_080C50F8: .4byte 0x06005000
_080C50FC: .4byte 0x01000400
_080C5100: .4byte gBG0TilemapBuffer

	THUMB_FUNC_START sub_80C5104
sub_80C5104: @ 0x080C5104
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _080C512C
	ldr r2, _080C5154  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
_080C512C:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x2d
	bgt _080C5160
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r1, #0x2e
	movs r2, #0
	bl sub_800B7E0
	adds r3, r0, #0
	ldr r0, _080C5158  @ gUnknown_08B1756C
	ldr r1, _080C515C  @ gUnknown_02022A88
	movs r2, #0x10
	bl sub_80C4BB4
	b _080C518E
	.align 2, 0
_080C5154: .4byte gLCDControlBuffer
_080C5158: .4byte gUnknown_08B1756C
_080C515C: .4byte gUnknown_02022A88
_080C5160:
	ldr r0, _080C51A0  @ gUnknown_08B1756C
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl CopyToPaletteBuffer
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	ldr r2, _080C51A4  @ gUnknown_08206FE4
	adds r0, r4, #0
	adds r0, #0x29
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r2, #8
	adds r0, r0, r2
	ldr r0, [r0]
	strh r0, [r4, #0x2a]
	movs r0, #0
	strh r0, [r4, #0x2c]
_080C518E:
	bl EnablePaletteSync
	adds r0, r4, #0
	bl sub_80C4918
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C51A0: .4byte gUnknown_08B1756C
_080C51A4: .4byte gUnknown_08206FE4

	THUMB_FUNC_START sub_80C51A8
sub_80C51A8: @ 0x080C51A8
	push {lr}
	movs r0, #2
	bl sub_80C4D54
	ldr r0, _080C51C4  @ gUnknown_08AA239C
	movs r1, #0x60
	movs r2, #0x20
	bl CopyToPaletteBuffer
	bl EnablePaletteSync
	pop {r0}
	bx r0
	.align 2, 0
_080C51C4: .4byte gUnknown_08AA239C

	THUMB_FUNC_START sub_80C51C8
sub_80C51C8: @ 0x080C51C8
	push {r4, r5, lr}
	ldr r1, _080C5210  @ gUnknown_0300308C
	movs r0, #0
	strh r0, [r1]
	strh r0, [r1, #4]
	strh r0, [r1, #8]
	strh r0, [r1, #0xc]
	ldr r4, _080C5214  @ gUnknown_08AA21A4
	movs r5, #0
_080C51DA:
	ldrh r1, [r4]
	adds r4, #2
	adds r0, r5, #0
	bl SetBackgroundTileDataOffset
	ldrh r1, [r4]
	adds r4, #2
	adds r0, r5, #0
	bl SetBackgroundMapDataOffset
	ldrh r1, [r4]
	adds r4, #2
	adds r0, r5, #0
	bl SetBackgroundScreenSize
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	adds r5, #1
	cmp r5, #3
	ble _080C51DA
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C5210: .4byte gUnknown_0300308C
_080C5214: .4byte gUnknown_08AA21A4

	THUMB_FUNC_START sub_80C5218
sub_80C5218: @ 0x080C5218
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	mov r8, r0
	bl sub_80C51C8
	ldr r4, _080C5318  @ gLCDControlBuffer
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	ldrb r1, [r4, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r6, #1
	orrs r0, r6
	strb r0, [r4, #0xc]
	ldrb r1, [r4, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	ands r2, r0
	strb r2, [r4, #0x18]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001ED0
	str r5, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r2, _080C531C  @ 0x0000FFFD
	movs r0, #1
	adds r1, r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #3
	bl sub_80C488C
	movs r0, #3
	bl sub_80C48F0
	ldr r0, _080C5320  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C5324  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0xe
	bl BG_EnableSyncByMask
	movs r0, #2
	bl sub_80C4D54
	ldrb r0, [r4, #1]
	orrs r0, r6
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	negs r1, r1
	ands r0, r1
	strb r0, [r4, #1]
	mov r1, r8
	adds r1, #0x29
	movs r0, #2
	strb r0, [r1]
	movs r0, #0x78
	mov r1, r8
	strh r0, [r1, #0x2a]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C5318: .4byte gLCDControlBuffer
_080C531C: .4byte 0x0000FFFD
_080C5320: .4byte gBG1TilemapBuffer
_080C5324: .4byte gBG2TilemapBuffer

	THUMB_FUNC_START sub_80C5328
sub_80C5328: @ 0x080C5328
	push {lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	ldr r2, _080C5368  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	movs r0, #2
	bl BG_EnableSyncByMask
	ldr r2, _080C536C  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	negs r1, r1
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080C5368: .4byte 0x01000008
_080C536C: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C5370
sub_80C5370: @ 0x080C5370
	push {lr}
	movs r1, #0
	strh r1, [r0, #0x2c]
	ldr r0, _080C5384  @ gPaletteBuffer
	ldr r1, _080C5388  @ gUnknown_0201CDD4
	movs r2, #0x80
	bl CpuFastSet
	pop {r0}
	bx r0
	.align 2, 0
_080C5384: .4byte gPaletteBuffer
_080C5388: .4byte gUnknown_0201CDD4

	THUMB_FUNC_START sub_80C538C
sub_80C538C: @ 0x080C538C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3b
	bgt _080C53CC
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r1, #0x3c
	movs r2, #0
	bl sub_800B7E0
	movs r3, #0x80
	lsls r3, r3, #5
	subs r3, r3, r0
	ldr r0, _080C53C4  @ gUnknown_0201CDD4
	ldr r1, _080C53C8  @ gPaletteBuffer
	movs r2, #0x80
	lsls r2, r2, #2
	bl sub_80C4BB4
	b _080C53E4
	.align 2, 0
_080C53C4: .4byte gUnknown_0201CDD4
_080C53C8: .4byte gPaletteBuffer
_080C53CC:
	str r5, [sp]
	ldr r1, _080C53F8  @ gPaletteBuffer
	ldr r2, _080C53FC  @ 0x01000080
	mov r0, sp
	bl CpuFastSet
	strh r5, [r4, #0x2c]
	movs r0, #0x3c
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C53E4:
	bl EnablePaletteSync
	adds r0, r4, #0
	bl sub_80C4918
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C53F8: .4byte gPaletteBuffer
_080C53FC: .4byte 0x01000080

	THUMB_FUNC_START sub_80C5400
sub_80C5400: @ 0x080C5400
	push {lr}
	movs r0, #4
	bl Sound_FadeOut800231C
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C540C
sub_80C540C: @ 0x080C540C
	push {lr}
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C541C
sub_80C541C: @ 0x080C541C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080C542C  @ gUnknown_08AA21BC
	bl Proc_CreateBlockingChild
	pop {r0}
	bx r0
	.align 2, 0
_080C542C: .4byte gUnknown_08AA21BC

	THUMB_FUNC_START sub_80C5430
sub_80C5430: @ 0x080C5430
	adds r1, r0, #0
	adds r1, #0x4c
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x52
	strh r2, [r0]
	bx lr

	THUMB_FUNC_START sub_80C5440
sub_80C5440: @ 0x080C5440
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, _080C54F4  @ gUnknown_08AA6774
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0
	movs r1, #4
	movs r2, #0x30
	adds r3, r4, #0
	bl RegisterObjectAttributes
	ldr r3, _080C54F8  @ gUnknown_08590F4C
	ldr r0, _080C54FC  @ 0x0000201E
	str r0, [sp]
	movs r0, #0
	movs r1, #0xdc
	movs r2, #0x29
	bl RegisterObjectAttributes
	ldr r2, _080C5500  @ 0x00000435
	movs r0, #0x82
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #2
	movs r1, #4
	adds r3, r4, #0
	bl RegisterObjectAttributes
	ldr r3, _080C5504  @ gUnknown_08AA6794
	ldr r0, _080C5508  @ 0x000031A0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0x55
	bl RegisterObjectAttributes
	ldr r3, _080C550C  @ gUnknown_08AA67E0
	movs r0, #0xdd
	lsls r0, r0, #1
	str r0, [sp]
	movs r0, #1
	movs r1, #0x48
	movs r2, #0x7c
	bl RegisterObjectAttributes
	ldr r3, _080C5510  @ gUnknown_08AA67AE
	movs r0, #0x8c
	lsls r0, r0, #5
	str r0, [sp]
	movs r0, #1
	movs r1, #4
	movs r2, #0x94
	bl RegisterObjectAttributes
	adds r0, r5, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r1, #3
	bl DivRem
	cmp r0, #0
	bne _080C54D0
	adds r2, r5, #0
	adds r2, #0x52
	ldrh r0, [r2]
	adds r0, #1
	movs r1, #0x1f
	ands r0, r1
	strh r0, [r2]
_080C54D0:
	adds r1, r5, #0
	adds r1, #0x52
	ldrh r2, [r1]
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _080C5518
	movs r0, #0xf
	ands r0, r2
	lsls r0, r0, #1
	ldr r1, _080C5514  @ gUnknown_08AADBE8
	adds r0, r0, r1
	movs r1, #0x84
	lsls r1, r1, #2
	movs r2, #2
	bl CopyToPaletteBuffer
	b _080C5532
	.align 2, 0
_080C54F4: .4byte gUnknown_08AA6774
_080C54F8: .4byte gUnknown_08590F4C
_080C54FC: .4byte 0x0000201E
_080C5500: .4byte 0x00000435
_080C5504: .4byte gUnknown_08AA6794
_080C5508: .4byte 0x000031A0
_080C550C: .4byte gUnknown_08AA67E0
_080C5510: .4byte gUnknown_08AA67AE
_080C5514: .4byte gUnknown_08AADBE8
_080C5518:
	ldrh r1, [r1]
	movs r0, #0x1f
	subs r0, r0, r1
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	ldr r1, _080C5544  @ gUnknown_08AADBE8
	adds r0, r0, r1
	movs r1, #0x84
	lsls r1, r1, #2
	movs r2, #2
	bl CopyToPaletteBuffer
_080C5532:
	adds r1, r5, #0
	adds r1, #0x4c
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C5544: .4byte gUnknown_08AADBE8

	THUMB_FUNC_START sub_80C5548
sub_80C5548: @ 0x080C5548
	push {lr}
	sub sp, #0x14
	movs r1, #0xf0
	lsls r1, r1, #7
	str r1, [sp]
	movs r1, #0xa0
	lsls r1, r1, #7
	str r1, [sp, #4]
	mov r2, sp
	movs r3, #0
	movs r1, #0x78
	strh r1, [r2, #8]
	movs r1, #0x50
	strh r1, [r2, #0xa]
	mov r1, sp
	strh r0, [r1, #0xc]
	strh r0, [r1, #0xe]
	mov r0, sp
	strh r3, [r0, #0x10]
	ldr r1, _080C557C  @ gUnknown_030030C8
	movs r2, #1
	bl BgAffineSet
	add sp, #0x14
	pop {r0}
	bx r0
	.align 2, 0
_080C557C: .4byte gUnknown_030030C8

	THUMB_FUNC_START sub_80C5580
sub_80C5580: @ 0x080C5580
	push {lr}
	adds r2, r0, #0
	ldr r0, _080C55A0  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xb
	ands r0, r1
	cmp r0, #0
	beq _080C559A
	ldr r0, [r2, #0x14]
	movs r1, #3
	bl Proc_GotoLabel
_080C559A:
	pop {r0}
	bx r0
	.align 2, 0
_080C55A0: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_80C55A4
sub_80C55A4: @ 0x080C55A4
	push {lr}
	adds r1, r0, #0
	ldr r0, _080C55B4  @ gUnknown_08AA6814
	bl Proc_Create
	pop {r0}
	bx r0
	.align 2, 0
_080C55B4: .4byte gUnknown_08AA6814

	THUMB_FUNC_START sub_80C55B8
sub_80C55B8: @ 0x080C55B8
	push {lr}
	ldr r0, _080C55C8  @ gUnknown_08AA6814
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_080C55C8: .4byte gUnknown_08AA6814

	THUMB_FUNC_START sub_80C55CC
sub_80C55CC: @ 0x080C55CC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080C56E0  @ gLCDControlBuffer
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	strb r0, [r4, #1]
	movs r1, #0
	bl SetBackgroundTileDataOffset
	movs r0, #1
	movs r1, #0
	bl SetBackgroundTileDataOffset
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundTileDataOffset
	movs r1, #0xc0
	lsls r1, r1, #8
	movs r0, #3
	bl SetBackgroundTileDataOffset
	movs r1, #0xd0
	lsls r1, r1, #7
	movs r0, #0
	bl SetBackgroundMapDataOffset
	movs r1, #0xe0
	lsls r1, r1, #7
	movs r0, #1
	bl SetBackgroundMapDataOffset
	movs r1, #0xb0
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundMapDataOffset
	movs r1, #0xf0
	lsls r1, r1, #7
	movs r0, #3
	bl SetBackgroundMapDataOffset
	movs r0, #0
	movs r1, #0
	bl SetBackgroundScreenSize
	movs r0, #1
	movs r1, #0
	bl SetBackgroundScreenSize
	movs r0, #2
	movs r1, #0
	bl SetBackgroundScreenSize
	movs r0, #3
	movs r1, #0
	bl SetBackgroundScreenSize
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r0, _080C56E4  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C56E8  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C56EC  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C56F0  @ gBG3TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	bl SetDefaultColorEffects
	movs r0, #0xf
	bl BG_EnableSyncByMask
	movs r0, #0
	strh r0, [r5, #0x2a]
	str r0, [r5, #0x2c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C56E0: .4byte gLCDControlBuffer
_080C56E4: .4byte gBG0TilemapBuffer
_080C56E8: .4byte gBG1TilemapBuffer
_080C56EC: .4byte gBG2TilemapBuffer
_080C56F0: .4byte gBG3TilemapBuffer

	THUMB_FUNC_START sub_80C56F4
sub_80C56F4: @ 0x080C56F4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2a]
	cmp r0, #4
	bls _080C5700
	b _080C583C
_080C5700:
	lsls r0, r0, #2
	ldr r1, _080C570C  @ _080C5710
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080C570C: .4byte _080C5710
_080C5710: @ jump table
	.4byte _080C5724 @ case 0
	.4byte _080C5734 @ case 1
	.4byte _080C57A8 @ case 2
	.4byte _080C57FC @ case 3
	.4byte _080C5810 @ case 4
_080C5724:
	ldr r0, _080C5730  @ gUnknown_08AA7760
	movs r1, #0xc0
	lsls r1, r1, #0x13
	bl CopyDataWithPossibleUncomp
	b _080C583C
	.align 2, 0
_080C5730: .4byte gUnknown_08AA7760
_080C5734:
	ldr r0, _080C5780  @ gUnknown_08AA9708
	ldr r1, _080C5784  @ 0x06003000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C5788  @ gUnknown_08AAAE90
	ldr r4, _080C578C  @ gBG1TilemapBuffer
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C5790  @ gUnknown_08AAB3F4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl CopyToPaletteBuffer
	adds r2, r5, #0
	adds r2, #0x29
	movs r0, #0xe0
	lsls r0, r0, #8
	adds r3, r0, #0
	movs r1, #0xa0
	lsls r1, r1, #2
_080C5760:
	ldrh r6, [r4]
	adds r0, r3, r6
	strh r0, [r4]
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne _080C5760
	movs r1, #0
	ldrsb r1, [r2, r1]
	cmp r1, #0
	beq _080C579C
	ldr r1, _080C5794  @ gPaletteBuffer
	ldr r0, _080C5798  @ 0x00007FFF
	strh r0, [r1]
	b _080C583C
	.align 2, 0
_080C5780: .4byte gUnknown_08AA9708
_080C5784: .4byte 0x06003000
_080C5788: .4byte gUnknown_08AAAE90
_080C578C: .4byte gBG1TilemapBuffer
_080C5790: .4byte gUnknown_08AAB3F4
_080C5794: .4byte gPaletteBuffer
_080C5798: .4byte 0x00007FFF
_080C579C:
	ldr r0, _080C57A4  @ gPaletteBuffer
	strh r1, [r0]
	b _080C583C
	.align 2, 0
_080C57A4: .4byte gPaletteBuffer
_080C57A8:
	ldr r0, _080C57E4  @ gUnknown_08AAB414
	ldr r1, _080C57E8  @ 0x06005000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C57EC  @ gUnknown_08AAC2A4
	ldr r4, _080C57F0  @ gBG0TilemapBuffer
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C57F4  @ gUnknown_08AAC58C
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080C57F8  @ 0x0000F280
	adds r2, r0, #0
	movs r1, #0xa0
	lsls r1, r1, #2
_080C57CE:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne _080C57CE
	movs r0, #1
	bl BG_EnableSyncByMask
	b _080C583C
	.align 2, 0
_080C57E4: .4byte gUnknown_08AAB414
_080C57E8: .4byte 0x06005000
_080C57EC: .4byte gUnknown_08AAC2A4
_080C57F0: .4byte gBG0TilemapBuffer
_080C57F4: .4byte gUnknown_08AAC58C
_080C57F8: .4byte 0x0000F280
_080C57FC:
	ldr r0, _080C5808  @ gUnknown_08AAC5AC
	ldr r1, _080C580C  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	b _080C583C
	.align 2, 0
_080C5808: .4byte gUnknown_08AAC5AC
_080C580C: .4byte 0x06010000
_080C5810:
	ldr r0, _080C5830  @ gUnknown_08AACEDC
	ldr r1, _080C5834  @ 0x06013000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C5838  @ gUnknown_08AADB68
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x80
	bl CopyToPaletteBuffer
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C5842
	.align 2, 0
_080C5830: .4byte gUnknown_08AACEDC
_080C5834: .4byte 0x06013000
_080C5838: .4byte gUnknown_08AADB68
_080C583C:
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
_080C5842:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C5848
sub_80C5848: @ 0x080C5848
	push {lr}
	adds r1, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080C5862
	adds r0, r1, #0
	movs r1, #0
	bl Proc_GotoLabel
	b _080C5868
_080C5862:
	ldr r0, _080C586C  @ gUnknown_08AA67FC
	bl Proc_Create
_080C5868:
	pop {r0}
	bx r0
	.align 2, 0
_080C586C: .4byte gUnknown_08AA67FC

	THUMB_FUNC_START sub_80C5870
sub_80C5870: @ 0x080C5870
	push {r4, lr}
	sub sp, #4
	movs r0, #0xf
	bl BG_EnableSyncByMask
	ldr r2, _080C58C8  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #1
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C58C8: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C58CC
sub_80C58CC: @ 0x080C58CC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2a]
	cmp r0, #4
	bls _080C58D8
	b _080C5A14
_080C58D8:
	lsls r0, r0, #2
	ldr r1, _080C58E4  @ _080C58E8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080C58E4: .4byte _080C58E8
_080C58E8: @ jump table
	.4byte _080C58FC @ case 0
	.4byte _080C5950 @ case 1
	.4byte _080C59A0 @ case 2
	.4byte _080C59EC @ case 3
	.4byte _080C5A34 @ case 4
_080C58FC:
	movs r1, #0xc0
	lsls r1, r1, #8
	movs r0, #0
	bl SetBackgroundTileDataOffset
	movs r1, #0xf0
	lsls r1, r1, #7
	movs r0, #0
	bl SetBackgroundMapDataOffset
	ldr r0, _080C5934  @ gUnknown_08AAFD14
	ldr r1, _080C5938  @ 0x06008000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C593C  @ gUnknown_08AAFF10
	ldr r1, _080C5940  @ 0x0600B000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C5944  @ gUnknown_08AB0114
	movs r1, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r1, _080C5948  @ gPaletteBuffer
	ldr r0, _080C594C  @ 0x00007FFF
	strh r0, [r1]
	b _080C5A14
	.align 2, 0
_080C5934: .4byte gUnknown_08AAFD14
_080C5938: .4byte 0x06008000
_080C593C: .4byte gUnknown_08AAFF10
_080C5940: .4byte 0x0600B000
_080C5944: .4byte gUnknown_08AB0114
_080C5948: .4byte gPaletteBuffer
_080C594C: .4byte 0x00007FFF
_080C5950:
	ldr r0, _080C598C  @ gUnknown_08AADC08
	ldr r1, _080C5990  @ 0x0600C000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C5994  @ gUnknown_08AAE61C
	ldr r4, _080C5998  @ gBG0TilemapBuffer
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C599C  @ gUnknown_08AAE8CC
	movs r1, #0x20
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r0, #0x80
	lsls r0, r0, #5
	adds r2, r0, #0
	movs r1, #0xa0
	lsls r1, r1, #2
_080C5976:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne _080C5976
	movs r0, #1
	bl BG_EnableSyncByMask
	b _080C5A14
	.align 2, 0
_080C598C: .4byte gUnknown_08AADC08
_080C5990: .4byte 0x0600C000
_080C5994: .4byte gUnknown_08AAE61C
_080C5998: .4byte gBG0TilemapBuffer
_080C599C: .4byte gUnknown_08AAE8CC
_080C59A0:
	ldr r0, _080C59D8  @ gUnknown_08AAE8EC
	ldr r1, _080C59DC  @ 0x0600D000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C59E0  @ gUnknown_08AAF928
	ldr r4, _080C59E4  @ gBG0TilemapBuffer
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C59E8  @ gUnknown_08AAFCF4
	movs r1, #0x40
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r0, #0x82
	lsls r0, r0, #6
	adds r2, r0, #0
	movs r1, #0xa0
	lsls r1, r1, #2
_080C59C6:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne _080C59C6
	b _080C5A14
	.align 2, 0
_080C59D8: .4byte gUnknown_08AAE8EC
_080C59DC: .4byte 0x0600D000
_080C59E0: .4byte gUnknown_08AAF928
_080C59E4: .4byte gBG0TilemapBuffer
_080C59E8: .4byte gUnknown_08AAFCF4
_080C59EC:
	ldr r0, _080C5A1C  @ gUnknown_08AB1C24
	ldr r1, _080C5A20  @ 0x06014400
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C5A24  @ gUnknown_08AB210C
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x60
	bl CopyToPaletteBuffer
	ldr r0, _080C5A28  @ gUnknown_08AB216C
	ldr r1, _080C5A2C  @ 0x06015400
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C5A30  @ gUnknown_08AB21B8
	movs r1, #0xb8
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
_080C5A14:
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
	b _080C5A3E
	.align 2, 0
_080C5A1C: .4byte gUnknown_08AB1C24
_080C5A20: .4byte 0x06014400
_080C5A24: .4byte gUnknown_08AB210C
_080C5A28: .4byte gUnknown_08AB216C
_080C5A2C: .4byte 0x06015400
_080C5A30: .4byte gUnknown_08AB21B8
_080C5A34:
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080C5A3E:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C5A44
sub_80C5A44: @ 0x080C5A44
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r4, _080C5AE8  @ gLCDControlBuffer
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	movs r5, #1
	orrs r0, r5
	strb r0, [r4]
	movs r0, #2
	movs r1, #2
	bl SetBackgroundScreenSize
	movs r0, #8
	movs r1, #0
	bl sub_80C6BF0
	ldrb r1, [r4, #0x15]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	strb r0, [r4, #0x15]
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	ldrb r1, [r4, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	orrs r0, r5
	strb r0, [r4, #0xc]
	ldrb r1, [r4, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r2, r0
	strb r2, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #2
	movs r1, #8
	movs r2, #8
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	ldr r0, _080C5AEC  @ gPaletteBuffer
	movs r4, #0
	strh r4, [r0]
	bl EnablePaletteSync
	strh r4, [r6, #0x2a]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C5AE8: .4byte gLCDControlBuffer
_080C5AEC: .4byte gPaletteBuffer

	THUMB_FUNC_START sub_80C5AF0
sub_80C5AF0: @ 0x080C5AF0
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x2c
	bhi _080C5B0C
	movs r2, #0x80
	lsls r2, r2, #1
	adds r3, r0, #0
	movs r0, #0x2d
	str r0, [sp]
	movs r0, #0
	movs r1, #0x40
	b _080C5B1E
_080C5B0C:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0xe0
	lsls r2, r2, #1
	ldrh r3, [r5, #0x2a]
	subs r3, #0x2d
	movs r0, #0x2d
	str r0, [sp]
	movs r0, #0
_080C5B1E:
	bl sub_8012DCC
	adds r4, r0, #0
	ldrh r3, [r5, #0x2a]
	movs r0, #0x5a
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x40
	bl sub_8012DCC
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_80C6BF0
	cmp r4, #0xff
	ble _080C5B50
	ldr r3, _080C5BBC  @ gUnknown_08590F54
	ldr r0, _080C5BC0  @ 0x00004220
	str r0, [sp]
	movs r0, #0
	movs r1, #0x68
	movs r2, #0x40
	bl RegisterObjectAttributes
_080C5B50:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x16
	bhi _080C5B6C
	adds r3, r0, #0
	movs r0, #0x16
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl sub_8012DCC
	ldr r1, _080C5BC4  @ gLCDControlBuffer
	adds r1, #0x46
	strb r0, [r1]
_080C5B6C:
	ldrh r0, [r5, #0x2a]
	adds r4, r0, #0
	subs r4, #0x44
	cmp r4, #0
	blt _080C5BAA
	cmp r4, #0
	bne _080C5B94
	ldr r0, _080C5BC4  @ gLCDControlBuffer
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xc0
	orrs r1, r2
	strb r1, [r0]
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
_080C5B94:
	movs r0, #0x16
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	adds r3, r4, #0
	bl sub_8012DCC
	ldr r1, _080C5BC4  @ gLCDControlBuffer
	adds r1, #0x46
	strb r0, [r1]
_080C5BAA:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x5a
	bne _080C5BC8
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C5BCC
	.align 2, 0
_080C5BBC: .4byte gUnknown_08590F54
_080C5BC0: .4byte 0x00004220
_080C5BC4: .4byte gLCDControlBuffer
_080C5BC8:
	adds r0, #1
	strh r0, [r5, #0x2a]
_080C5BCC:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C5BD4
sub_80C5BD4: @ 0x080C5BD4
	push {r4, r5, lr}
	sub sp, #8
	ldr r0, _080C5C54  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #6
	bl BG_EnableSyncByMask
	ldr r4, _080C5C58  @ gLCDControlBuffer
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	str r5, [sp, #4]
	ldr r1, _080C5C5C  @ gUnknown_02022A68
	ldr r2, _080C5C60  @ 0x01000008
	add r0, sp, #4
	bl CpuFastSet
	bl EnablePaletteSync
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C5C54: .4byte gBG2TilemapBuffer
_080C5C58: .4byte gLCDControlBuffer
_080C5C5C: .4byte gUnknown_02022A68
_080C5C60: .4byte 0x01000008

	THUMB_FUNC_START sub_80C5C64
sub_80C5C64: @ 0x080C5C64
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, _080C5CC0  @ gUnknown_08AAB3F4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r4, _080C5CC4  @ gUnknown_02022A68
	ldrh r3, [r7, #0x2a]
	movs r0, #0x30
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl sub_8012DCC
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	adds r0, r4, #0
	movs r1, #0
	bl sub_80C69B0
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x14
	bne _080C5CA6
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl Sound_PlaySong80024E4
_080C5CA6:
	ldrh r1, [r7, #0x2a]
	adds r0, r1, #0
	cmp r0, #0x13
	bhi _080C5CD0
	ldr r3, _080C5CC8  @ gUnknown_08590F54
	ldr r0, _080C5CCC  @ 0x00004220
	str r0, [sp]
	movs r0, #0
	movs r1, #0x68
	movs r2, #0x40
	bl RegisterObjectAttributes
	b _080C5DC0
	.align 2, 0
_080C5CC0: .4byte gUnknown_08AAB3F4
_080C5CC4: .4byte gUnknown_02022A68
_080C5CC8: .4byte gUnknown_08590F54
_080C5CCC: .4byte 0x00004220
_080C5CD0:
	cmp r0, #0x17
	bhi _080C5D30
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080C5D00
	ldr r4, _080C5CF4  @ gUnknown_08590F54
	ldr r0, _080C5CF8  @ 0x00006228
	str r0, [sp]
	movs r0, #0
	movs r1, #0x68
	movs r2, #0x40
	adds r3, r4, #0
	bl RegisterObjectAttributes
	ldr r0, _080C5CFC  @ 0x00005224
	b _080C5D14
	.align 2, 0
_080C5CF4: .4byte gUnknown_08590F54
_080C5CF8: .4byte 0x00006228
_080C5CFC: .4byte 0x00005224
_080C5D00:
	ldr r4, _080C5D24  @ gUnknown_08590F54
	ldr r0, _080C5D28  @ 0x00005224
	str r0, [sp]
	movs r0, #0
	movs r1, #0x68
	movs r2, #0x40
	adds r3, r4, #0
	bl RegisterObjectAttributes
	ldr r0, _080C5D2C  @ 0x00006228
_080C5D14:
	str r0, [sp]
	movs r0, #1
	movs r1, #0x68
	movs r2, #0x40
	adds r3, r4, #0
	bl RegisterObjectAttributes
	b _080C5DC0
	.align 2, 0
_080C5D24: .4byte gUnknown_08590F54
_080C5D28: .4byte 0x00005224
_080C5D2C: .4byte 0x00006228
_080C5D30:
	ldrh r0, [r7, #0x2a]
	adds r3, r0, #0
	subs r3, #0x18
	cmp r3, #8
	bgt _080C5DC0
	movs r0, #8
	str r0, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0x80
	bl sub_8012DCC
	adds r6, r0, #0
	ldrh r1, [r7, #0x2a]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080C5D94
	movs r1, #0x68
	subs r1, r1, r6
	ldr r4, _080C5D84  @ 0x000001FF
	ands r1, r4
	ldr r5, _080C5D88  @ gUnknown_08590F54
	ldr r0, _080C5D8C  @ 0x00006228
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r6, #0
	adds r1, #0x68
	ands r1, r4
	ldr r0, _080C5D90  @ 0x00005224
	str r0, [sp]
	movs r0, #1
	movs r2, #0x40
	adds r3, r5, #0
	bl RegisterObjectAttributes
	b _080C5DC0
	.align 2, 0
_080C5D84: .4byte 0x000001FF
_080C5D88: .4byte gUnknown_08590F54
_080C5D8C: .4byte 0x00006228
_080C5D90: .4byte 0x00005224
_080C5D94:
	adds r1, r6, #0
	adds r1, #0x68
	ldr r4, _080C5DD4  @ 0x000001FF
	ands r1, r4
	ldr r5, _080C5DD8  @ gUnknown_08590F54
	ldr r0, _080C5DDC  @ 0x00005224
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r1, #0x68
	subs r1, r1, r6
	ands r1, r4
	ldr r0, _080C5DE0  @ 0x00006228
	str r0, [sp]
	movs r0, #1
	movs r2, #0x40
	adds r3, r5, #0
	bl RegisterObjectAttributes
_080C5DC0:
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x30
	bne _080C5DE4
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	b _080C5DE8
	.align 2, 0
_080C5DD4: .4byte 0x000001FF
_080C5DD8: .4byte gUnknown_08590F54
_080C5DDC: .4byte 0x00005224
_080C5DE0: .4byte 0x00006228
_080C5DE4:
	adds r0, #1
	strh r0, [r7, #0x2a]
_080C5DE8:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C5DF0
sub_80C5DF0: @ 0x080C5DF0
	push {r4, lr}
	sub sp, #4
	ldr r2, _080C5E54  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	ldr r0, _080C5E58  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080C5E4C
	ldr r0, _080C5E5C  @ 0x00000317
	bl m4aSongNumStart
_080C5E4C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C5E54: .4byte gLCDControlBuffer
_080C5E58: .4byte gUnknown_0202BCF0
_080C5E5C: .4byte 0x00000317

	THUMB_FUNC_START sub_80C5E60
sub_80C5E60: @ 0x080C5E60
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r3, [r4, #0x2a]
	movs r0, #0xc
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0xd
	bl sub_8012DCC
	ldr r1, _080C5E90  @ gLCDControlBuffer
	adds r1, #0x44
	strb r0, [r1]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xc
	bne _080C5E94
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C5E98
	.align 2, 0
_080C5E90: .4byte gLCDControlBuffer
_080C5E94:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C5E98:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C5EA0
sub_80C5EA0: @ 0x080C5EA0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r3, [r7, #0x2a]
	movs r0, #0xc
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl sub_8012DCC
	adds r5, r0, #0
	ldrh r0, [r7, #0x2a]
	cmp r0, #0
	bne _080C5EC4
	movs r0, #1
	bl BG_EnableSyncByMask
_080C5EC4:
	ldr r0, _080C5F10  @ gUnknown_08AAFCF4
	movs r1, #0x40
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r4, _080C5F14  @ gUnknown_020228E8
	ldr r6, _080C5F18  @ 0x00007FFF
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	adds r0, r4, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl sub_80C69B0
	ldr r0, _080C5F1C  @ gUnknown_08AAB3F4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r0, #0xc0
	lsls r0, r0, #1
	adds r4, r4, r0
	adds r0, r4, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl sub_80C69B0
	ldrh r0, [r7, #0x2a]
	cmp r0, #0xc
	bne _080C5F20
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	b _080C5F24
	.align 2, 0
_080C5F10: .4byte gUnknown_08AAFCF4
_080C5F14: .4byte gUnknown_020228E8
_080C5F18: .4byte 0x00007FFF
_080C5F1C: .4byte gUnknown_08AAB3F4
_080C5F20:
	adds r0, #1
	strh r0, [r7, #0x2a]
_080C5F24:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C5F2C
sub_80C5F2C: @ 0x080C5F2C
	push {r4, lr}
	ldr r0, _080C5F70  @ gUnknown_08AB0B44
	ldr r1, _080C5F74  @ 0x06008000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C5F78  @ gUnknown_08AB1890
	ldr r4, _080C5F7C  @ gBG2TilemapBuffer
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C5F80  @ gUnknown_08AB1C04
	movs r1, #0x60
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r0, #0xc0
	lsls r0, r0, #6
	adds r2, r0, #0
	movs r1, #0xa0
	lsls r1, r1, #2
_080C5F54:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne _080C5F54
	movs r0, #4
	bl BG_EnableSyncByMask
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C5F70: .4byte gUnknown_08AB0B44
_080C5F74: .4byte 0x06008000
_080C5F78: .4byte gUnknown_08AB1890
_080C5F7C: .4byte gBG2TilemapBuffer
_080C5F80: .4byte gUnknown_08AB1C04

	THUMB_FUNC_START sub_80C5F84
sub_80C5F84: @ 0x080C5F84
	ldr r2, _080C5FB0  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	adds r2, #0x3c
	ldrb r1, [r2]
	movs r0, #0x3f
	ands r0, r1
	strb r0, [r2]
	bx lr
	.align 2, 0
_080C5FB0: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C5FB4
sub_80C5FB4: @ 0x080C5FB4
	ldr r2, _080C5FE4  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	adds r2, #0x3c
	ldrb r1, [r2]
	movs r0, #0x3f
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	bx lr
	.align 2, 0
_080C5FE4: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C5FE8
sub_80C5FE8: @ 0x080C5FE8
	push {r4, r5, lr}
	sub sp, #4
	ldr r4, _080C606C  @ gLCDControlBuffer
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	movs r5, #1
	orrs r0, r5
	strb r0, [r4]
	movs r0, #2
	movs r1, #1
	bl SetBackgroundScreenSize
	movs r0, #0x40
	bl sub_80C5548
	ldr r0, _080C6070  @ gUnknown_08AB0134
	ldr r1, _080C6074  @ 0x06008000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C6078  @ gUnknown_08AB0A20
	ldr r1, _080C607C  @ gBG2TilemapBuffer
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C6080  @ gUnknown_08AB0B24
	movs r1, #0
	movs r2, #0x20
	bl CopyToPaletteBuffer
	movs r0, #4
	bl BG_EnableSyncByMask
	ldr r0, _080C6084  @ 0x7FFF7FFF
	str r0, [sp]
	ldr r1, _080C6088  @ gUnknown_02022A68
	ldr r2, _080C608C  @ 0x01000010
	mov r0, sp
	bl CpuFastSet
	movs r0, #0
	movs r1, #0
	bl SetBackgroundTileDataOffset
	movs r1, #0xd0
	lsls r1, r1, #7
	movs r0, #0
	bl SetBackgroundMapDataOffset
	ldrb r0, [r4, #1]
	orrs r0, r5
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C606C: .4byte gLCDControlBuffer
_080C6070: .4byte gUnknown_08AB0134
_080C6074: .4byte 0x06008000
_080C6078: .4byte gUnknown_08AB0A20
_080C607C: .4byte gBG2TilemapBuffer
_080C6080: .4byte gUnknown_08AB0B24
_080C6084: .4byte 0x7FFF7FFF
_080C6088: .4byte gUnknown_02022A68
_080C608C: .4byte 0x01000010

	THUMB_FUNC_START sub_80C6090
sub_80C6090: @ 0x080C6090
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r2, #0x80
	lsls r2, r2, #1
	ldrh r3, [r4, #0x2a]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #1
	movs r1, #0x20
	bl sub_8012DCC
	bl sub_80C5548
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne _080C60BE
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C60C2
_080C60BE:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C60C2:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C60CC
sub_80C60CC: @ 0x080C60CC
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r5, _080C60F8  @ gUnknown_02020188
	movs r6, #0
	movs r4, #3
_080C60D6:
	str r6, [sp]
	mov r0, sp
	adds r1, r5, #0
	ldr r2, _080C60FC  @ 0x01000080
	bl CpuFastSet
	movs r0, #0x80
	lsls r0, r0, #3
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bge _080C60D6
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C60F8: .4byte gUnknown_02020188
_080C60FC: .4byte 0x01000080

	THUMB_FUNC_START nullsub_23
nullsub_23: @ 0x080C6100
	bx lr

	THUMB_FUNC_START sub_80C6104
sub_80C6104: @ 0x080C6104
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #1
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	str r4, [r5, #0x30]
	bl sub_80C60CC
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C6144
sub_80C6144: @ 0x080C6144
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, _080C61F4  @ gUnknown_08AA6858
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #0
	beq _080C61E6
	ldr r3, _080C61F8  @ gUnknown_08AA682C
	mov r8, r3
	movs r7, #0x18
_080C615E:
	ldrb r0, [r5, #4]
	lsls r0, r0, #1
	add r0, r8
	movs r2, #0
	ldrsb r2, [r0, r2]
	movs r1, #0
	ldrsh r0, [r5, r1]
	adds r1, r2, #0
	muls r1, r0, r1
	asrs r1, r1, #8
	movs r3, #2
	ldrsh r0, [r5, r3]
	muls r2, r0, r2
	asrs r2, r2, #8
	str r7, [sp]
	movs r0, #0
	adds r3, r6, #0
	bl sub_8012DCC
	adds r4, r0, #0
	adds r4, #0x74
	ldrb r0, [r5, #4]
	lsls r0, r0, #1
	adds r0, #1
	add r0, r8
	movs r2, #0
	ldrsb r2, [r0, r2]
	movs r1, #0
	ldrsh r0, [r5, r1]
	adds r1, r2, #0
	muls r1, r0, r1
	asrs r1, r1, #8
	movs r3, #2
	ldrsh r0, [r5, r3]
	muls r2, r0, r2
	asrs r2, r2, #8
	str r7, [sp]
	movs r0, #0
	adds r3, r6, #0
	bl sub_8012DCC
	adds r2, r0, #0
	adds r2, #0x38
	ldr r0, _080C61FC  @ 0x000001FF
	ands r4, r0
	movs r0, #0xff
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r2, r0
	ldrb r0, [r5, #5]
	movs r1, #0xa8
	lsls r1, r1, #2
	adds r0, r0, r1
	movs r1, #0xe8
	lsls r1, r1, #7
	orrs r0, r1
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	ldr r3, _080C6200  @ gUnknown_08590F44
	bl RegisterObjectAttributes
	adds r5, #8
	movs r3, #0
	ldrsh r0, [r5, r3]
	cmp r0, #0
	bne _080C615E
_080C61E6:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C61F4: .4byte gUnknown_08AA6858
_080C61F8: .4byte gUnknown_08AA682C
_080C61FC: .4byte 0x000001FF
_080C6200: .4byte gUnknown_08590F44

	THUMB_FUNC_START sub_80C6204
sub_80C6204: @ 0x080C6204
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	ldrh r3, [r7, #0x2a]
	movs r0, #0x18
	mov r8, r0
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl sub_8012DCC
	ldr r1, _080C62B0  @ gLCDControlBuffer
	adds r1, #0x44
	strb r0, [r1]
	ldrh r3, [r7, #0x2a]
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl sub_8012DCC
	adds r5, r0, #0
	ldr r0, _080C62B4  @ gUnknown_08AAB3F4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r4, _080C62B8  @ gUnknown_02022A68
	ldr r6, _080C62BC  @ 0x00007FFF
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	adds r0, r4, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl sub_80C69B0
	ldr r0, _080C62C0  @ gUnknown_08AAC58C
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl CopyToPaletteBuffer
	adds r4, #0x20
	adds r0, r4, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl sub_80C69B0
	ldrh r3, [r7, #0x2a]
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x3f
	bl sub_8012DCC
	adds r5, r0, #0
	ldr r1, [r7, #0x30]
	bl nullsub_23
	str r5, [r7, #0x30]
	ldr r3, _080C62C4  @ gUnknown_08AA6794
	ldr r0, _080C62C8  @ 0x000031A0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0x55
	bl RegisterObjectAttributes
	ldrh r0, [r7, #0x2a]
	bl sub_80C6144
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x18
	bne _080C62CC
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	b _080C62D0
	.align 2, 0
_080C62B0: .4byte gLCDControlBuffer
_080C62B4: .4byte gUnknown_08AAB3F4
_080C62B8: .4byte gUnknown_02022A68
_080C62BC: .4byte 0x00007FFF
_080C62C0: .4byte gUnknown_08AAC58C
_080C62C4: .4byte gUnknown_08AA6794
_080C62C8: .4byte 0x000031A0
_080C62CC:
	adds r0, #1
	strh r0, [r7, #0x2a]
_080C62D0:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C62DC
sub_80C62DC: @ 0x080C62DC
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, _080C634C  @ gLCDControlBuffer
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #2
	movs r1, #0
	bl SetBackgroundScreenSize
	ldrb r0, [r4, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	ldr r0, _080C6350  @ gUnknown_08AA67FC
	adds r1, r5, #0
	bl Proc_Create
	movs r0, #1
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C634C: .4byte gLCDControlBuffer
_080C6350: .4byte gUnknown_08AA67FC

	THUMB_FUNC_START sub_80C6354
sub_80C6354: @ 0x080C6354
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	adds r2, r0, #1
	str r2, [r4, #0x2c]
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	ldr r3, _080C639C  @ 0x0000FFFF
	adds r1, r3, #0
	ands r0, r1
	movs r1, #0x3f
	ands r0, r1
	strh r0, [r4, #0x2a]
	ldr r0, _080C63A0  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #9
	ands r0, r1
	cmp r0, #0
	beq _080C63A8
	ldr r0, _080C63A4  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080C638E
	movs r0, #0x6d
	bl m4aSongNumStart
_080C638E:
	movs r0, #0
	bl SetNextGameActionId
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C63BA
	.align 2, 0
_080C639C: .4byte 0x0000FFFF
_080C63A0: .4byte gKeyStatusPtr
_080C63A4: .4byte gUnknown_0202BCF0
_080C63A8:
	ldr r0, _080C63C0  @ 0x0000032F
	cmp r2, r0
	bne _080C63BA
	movs r0, #1
	bl SetNextGameActionId
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080C63BA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C63C0: .4byte 0x0000032F

	THUMB_FUNC_START sub_80C63C4
sub_80C63C4: @ 0x080C63C4
	push {lr}
	bl sub_80ADDD4
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C63D0
sub_80C63D0: @ 0x080C63D0
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_80ADDD4
	bl sub_80C55B8
	ldr r1, _080C641C  @ gPaletteBuffer
	movs r5, #0
	movs r0, #0
	strh r0, [r1]
	bl EnablePaletteSync
	adds r4, #0x29
	strb r5, [r4]
	ldr r2, _080C6420  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0x43
	movs r1, #0
	movs r2, #0
	bl Sound_PlaySong80024E4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C641C: .4byte gPaletteBuffer
_080C6420: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C6424
sub_80C6424: @ 0x080C6424
	push {lr}
	adds r1, r0, #0
	ldr r0, _080C6440  @ gUnknown_08AA6A50
	bl Proc_CreateBlockingChild
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	movs r0, #0x43
	movs r2, #0
	bl Sound_PlaySong80024E4
	pop {r0}
	bx r0
	.align 2, 0
_080C6440: .4byte gUnknown_08AA6A50

	THUMB_FUNC_START sub_80C6444
sub_80C6444: @ 0x080C6444
	push {lr}
	adds r1, r0, #0
	ldr r0, _080C6458  @ gUnknown_08AA6A50
	bl Proc_CreateBlockingChild
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080C6458: .4byte gUnknown_08AA6A50

	THUMB_FUNC_START sub_80C645C
sub_80C645C: @ 0x080C645C
	push {lr}
	adds r1, r0, #0
	ldr r0, _080C6470  @ gUnknown_08AA6A50
	bl Proc_CreateBlockingChild
	adds r0, #0x29
	movs r1, #1
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080C6470: .4byte gUnknown_08AA6A50

	THUMB_FUNC_START sub_80C6474
sub_80C6474: @ 0x080C6474
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r1, #0
	lsls r2, r2, #0x18
	lsrs r0, r2, #0x18
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	cmp r0, #4
	bls _080C648A
	b _080C66DE
_080C648A:
	lsls r0, r0, #2
	ldr r1, _080C6494  @ _080C6498
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080C6494: .4byte _080C6498
_080C6498: @ jump table
	.4byte _080C64AC @ case 0
	.4byte _080C64F4 @ case 1
	.4byte _080C653C @ case 2
	.4byte _080C65B0 @ case 3
	.4byte _080C6624 @ case 4
_080C64AC:
	cmp r3, #1
	beq _080C64D0
	cmp r3, #1
	bgt _080C64BA
	cmp r3, #0
	beq _080C64C4
	b _080C66DE
_080C64BA:
	cmp r3, #2
	beq _080C64DC
	cmp r3, #3
	beq _080C64E8
	b _080C66DE
_080C64C4:
	movs r5, #0x8a
	ldr r4, _080C64CC  @ gUnknown_08AA6C22
	b _080C66DE
	.align 2, 0
_080C64CC: .4byte gUnknown_08AA6C22
_080C64D0:
	movs r5, #0x8a
	ldr r4, _080C64D8  @ gUnknown_08AA6C36
	b _080C66DE
	.align 2, 0
_080C64D8: .4byte gUnknown_08AA6C36
_080C64DC:
	movs r5, #0xb2
	ldr r4, _080C64E4  @ gUnknown_08AA6C22
	b _080C66DE
	.align 2, 0
_080C64E4: .4byte gUnknown_08AA6C22
_080C64E8:
	movs r5, #0xb2
	ldr r4, _080C64F0  @ gUnknown_08AA6C36
	b _080C66DE
	.align 2, 0
_080C64F0: .4byte gUnknown_08AA6C36
_080C64F4:
	cmp r3, #1
	beq _080C6518
	cmp r3, #1
	bgt _080C6502
	cmp r3, #0
	beq _080C650C
	b _080C66DE
_080C6502:
	cmp r3, #2
	beq _080C6524
	cmp r3, #3
	beq _080C6530
	b _080C66DE
_080C650C:
	movs r5, #0xda
	ldr r4, _080C6514  @ gUnknown_08AA6C4A
	b _080C66DE
	.align 2, 0
_080C6514: .4byte gUnknown_08AA6C4A
_080C6518:
	movs r5, #0xda
	ldr r4, _080C6520  @ gUnknown_08AA6C58
	b _080C66DE
	.align 2, 0
_080C6520: .4byte gUnknown_08AA6C58
_080C6524:
	movs r5, #0xf2
	ldr r4, _080C652C  @ gUnknown_08AA6C4A
	b _080C66DE
	.align 2, 0
_080C652C: .4byte gUnknown_08AA6C4A
_080C6530:
	movs r5, #0xf2
	ldr r4, _080C6538  @ gUnknown_08AA6C58
	b _080C66DE
	.align 2, 0
_080C6538: .4byte gUnknown_08AA6C58
_080C653C:
	cmp r3, #5
	bls _080C6542
	b _080C66DE
_080C6542:
	lsls r0, r3, #2
	ldr r1, _080C654C  @ _080C6550
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080C654C: .4byte _080C6550
_080C6550: @ jump table
	.4byte _080C6568 @ case 0
	.4byte _080C6574 @ case 1
	.4byte _080C6580 @ case 2
	.4byte _080C658C @ case 3
	.4byte _080C6598 @ case 4
	.4byte _080C65A4 @ case 5
_080C6568:
	movs r5, #0x85
	lsls r5, r5, #1
	ldr r4, _080C6570  @ gUnknown_08AA6C66
	b _080C66DE
	.align 2, 0
_080C6570: .4byte gUnknown_08AA6C66
_080C6574:
	movs r5, #0x85
	lsls r5, r5, #1
	ldr r4, _080C657C  @ gUnknown_08AA6C74
	b _080C66DE
	.align 2, 0
_080C657C: .4byte gUnknown_08AA6C74
_080C6580:
	movs r5, #0x8b
	lsls r5, r5, #1
	ldr r4, _080C6588  @ gUnknown_08AA6C66
	b _080C66DE
	.align 2, 0
_080C6588: .4byte gUnknown_08AA6C66
_080C658C:
	movs r5, #0x8b
	lsls r5, r5, #1
	ldr r4, _080C6594  @ gUnknown_08AA6C74
	b _080C66DE
	.align 2, 0
_080C6594: .4byte gUnknown_08AA6C74
_080C6598:
	movs r5, #0x9d
	lsls r5, r5, #1
	ldr r4, _080C65A0  @ gUnknown_08AA6C66
	b _080C66DE
	.align 2, 0
_080C65A0: .4byte gUnknown_08AA6C66
_080C65A4:
	movs r5, #0x9d
	lsls r5, r5, #1
	ldr r4, _080C65AC  @ gUnknown_08AA6C74
	b _080C66DE
	.align 2, 0
_080C65AC: .4byte gUnknown_08AA6C74
_080C65B0:
	cmp r3, #5
	bls _080C65B6
	b _080C66DE
_080C65B6:
	lsls r0, r3, #2
	ldr r1, _080C65C0  @ _080C65C4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080C65C0: .4byte _080C65C4
_080C65C4: @ jump table
	.4byte _080C65DC @ case 0
	.4byte _080C65E8 @ case 1
	.4byte _080C65F4 @ case 2
	.4byte _080C6600 @ case 3
	.4byte _080C660C @ case 4
	.4byte _080C6618 @ case 5
_080C65DC:
	movs r5, #0x91
	lsls r5, r5, #1
	ldr r4, _080C65E4  @ gUnknown_08AA6C82
	b _080C66DE
	.align 2, 0
_080C65E4: .4byte gUnknown_08AA6C82
_080C65E8:
	movs r5, #0x91
	lsls r5, r5, #1
	ldr r4, _080C65F0  @ gUnknown_08AA6C8A
	b _080C66DE
	.align 2, 0
_080C65F0: .4byte gUnknown_08AA6C8A
_080C65F4:
	movs r5, #0x93
	lsls r5, r5, #1
	ldr r4, _080C65FC  @ gUnknown_08AA6C82
	b _080C66DE
	.align 2, 0
_080C65FC: .4byte gUnknown_08AA6C82
_080C6600:
	movs r5, #0x93
	lsls r5, r5, #1
	ldr r4, _080C6608  @ gUnknown_08AA6C8A
	b _080C66DE
	.align 2, 0
_080C6608: .4byte gUnknown_08AA6C8A
_080C660C:
	movs r5, #0x97
	lsls r5, r5, #1
	ldr r4, _080C6614  @ gUnknown_08AA6C82
	b _080C66DE
	.align 2, 0
_080C6614: .4byte gUnknown_08AA6C82
_080C6618:
	movs r5, #0x97
	lsls r5, r5, #1
	ldr r4, _080C6620  @ gUnknown_08AA6C8A
	b _080C66DE
	.align 2, 0
_080C6620: .4byte gUnknown_08AA6C8A
_080C6624:
	cmp r3, #0xb
	bhi _080C66DE
	lsls r0, r3, #2
	ldr r1, _080C6634  @ _080C6638
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080C6634: .4byte _080C6638
_080C6638: @ jump table
	.4byte _080C6668 @ case 0
	.4byte _080C6674 @ case 1
	.4byte _080C667A @ case 2
	.4byte _080C6688 @ case 3
	.4byte _080C668E @ case 4
	.4byte _080C669C @ case 5
	.4byte _080C66A2 @ case 6
	.4byte _080C66B0 @ case 7
	.4byte _080C66B6 @ case 8
	.4byte _080C66C4 @ case 9
	.4byte _080C66CA @ case 10
	.4byte _080C66D8 @ case 11
_080C6668:
	movs r5, #0x95
	lsls r5, r5, #1
	ldr r4, _080C6670  @ gUnknown_08AA6C92
	b _080C66DE
	.align 2, 0
_080C6670: .4byte gUnknown_08AA6C92
_080C6674:
	movs r5, #0x95
	lsls r5, r5, #1
	b _080C66DC
_080C667A:
	movs r5, #0x96
	lsls r5, r5, #1
	ldr r4, _080C6684  @ gUnknown_08AA6C92
	b _080C66DE
	.align 2, 0
_080C6684: .4byte gUnknown_08AA6C92
_080C6688:
	movs r5, #0x96
	lsls r5, r5, #1
	b _080C66DC
_080C668E:
	movs r5, #0x99
	lsls r5, r5, #1
	ldr r4, _080C6698  @ gUnknown_08AA6C92
	b _080C66DE
	.align 2, 0
_080C6698: .4byte gUnknown_08AA6C92
_080C669C:
	movs r5, #0x99
	lsls r5, r5, #1
	b _080C66DC
_080C66A2:
	movs r5, #0x9a
	lsls r5, r5, #1
	ldr r4, _080C66AC  @ gUnknown_08AA6C92
	b _080C66DE
	.align 2, 0
_080C66AC: .4byte gUnknown_08AA6C92
_080C66B0:
	movs r5, #0x9a
	lsls r5, r5, #1
	b _080C66DC
_080C66B6:
	movs r5, #0x9b
	lsls r5, r5, #1
	ldr r4, _080C66C0  @ gUnknown_08AA6C92
	b _080C66DE
	.align 2, 0
_080C66C0: .4byte gUnknown_08AA6C92
_080C66C4:
	movs r5, #0x9b
	lsls r5, r5, #1
	b _080C66DC
_080C66CA:
	movs r5, #0x9c
	lsls r5, r5, #1
	ldr r4, _080C66D4  @ gUnknown_08AA6C92
	b _080C66DE
	.align 2, 0
_080C66D4: .4byte gUnknown_08AA6C92
_080C66D8:
	movs r5, #0x9c
	lsls r5, r5, #1
_080C66DC:
	ldr r4, _080C6700  @ gUnknown_08AA6C9A
_080C66DE:
	movs r1, #0xc0
	lsls r1, r1, #6
	adds r0, r1, #0
	orrs r5, r0
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r7, #0
	adds r3, r4, #0
	bl RegisterObjectAttributes
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C6700: .4byte gUnknown_08AA6C9A

	THUMB_FUNC_START sub_80C6704
sub_80C6704: @ 0x080C6704
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C6730  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xb
	ands r0, r1
	cmp r0, #0
	beq _080C672A
	movs r0, #2
	bl SetNextGameActionId
	ldr r0, _080C6734  @ gUnknown_02022188
	movs r1, #0
	strh r1, [r0, #0xc]
	ldr r0, [r4, #0x14]
	movs r1, #0x63
	bl Proc_GotoLabel
_080C672A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C6730: .4byte gKeyStatusPtr
_080C6734: .4byte gUnknown_02022188

	THUMB_FUNC_START AddSomeChild6C
AddSomeChild6C: @ 0x080C6738
	push {lr}
	adds r1, r0, #0
	ldr r0, _080C6748  @ gUnknown_08AA6CA4
	bl Proc_Create
	pop {r0}
	bx r0
	.align 2, 0
_080C6748: .4byte gUnknown_08AA6CA4

	THUMB_FUNC_START DeleteSome6C
DeleteSome6C: @ 0x080C674C
	push {lr}
	ldr r0, _080C675C  @ gUnknown_08AA6CA4
	bl Proc_Find
	bl Proc_Delete
	pop {r0}
	bx r0
	.align 2, 0
_080C675C: .4byte gUnknown_08AA6CA4

	THUMB_FUNC_START StorePaletteToBufferMaybe
StorePaletteToBufferMaybe: @ 0x080C6760
	push {lr}
	bl CopyToPaletteBuffer
	ldr r1, _080C6774  @ gPaletteBuffer
	ldr r0, _080C6778  @ gUnknown_02022188
	ldrh r0, [r0, #0xc]
	strh r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_080C6774: .4byte gPaletteBuffer
_080C6778: .4byte gUnknown_02022188

	THUMB_FUNC_START sub_80C677C
sub_80C677C: @ 0x080C677C
	push {lr}
	adds r2, r0, #0
	movs r3, #0x13
_080C6782:
	ldrh r0, [r2]
	strh r0, [r1]
	adds r2, #0x40
	adds r1, #0x40
	subs r3, #1
	cmp r3, #0
	bge _080C6782
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C6794
sub_80C6794: @ 0x080C6794
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	lsls r2, r2, #0x18
	ldr r6, _080C67BC  @ 0x00007FFF
	lsrs r5, r2, #0xc
	movs r2, #0x13
_080C67A2:
	ldrh r1, [r4]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r5
	strh r0, [r3]
	adds r4, #0x40
	adds r3, #0x40
	subs r2, #1
	cmp r2, #0
	bge _080C67A2
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C67BC: .4byte 0x00007FFF

	THUMB_FUNC_START sub_80C67C0
sub_80C67C0: @ 0x080C67C0
	push {lr}
	movs r2, #0
	movs r1, #0x13
_080C67C6:
	strh r2, [r0]
	adds r0, #0x40
	subs r1, #1
	cmp r1, #0
	bge _080C67C6
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C67D4
sub_80C67D4: @ 0x080C67D4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	ldr r2, [sp, #0x24]
	mov r9, r2
	ldr r2, [sp, #0x28]
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov sl, r3
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov r8, r2
	mov r0, sl
	bl BG_GetMapBuffer
	adds r5, r0, #0
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bne _080C680E
	subs r0, #8
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
_080C680E:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x13
	adds r4, r0, #1
	lsls r1, r6, #0x10
	asrs r0, r1, #0x13
	adds r0, #1
	adds r6, r1, #0
	cmp r4, r0
	bge _080C687E
	movs r7, #0x1f
	mov r1, r8
	lsls r0, r1, #0x18
	asrs r0, r0, #0x18
	mov r8, r0
_080C682A:
	cmp r4, #0x3f
	bhi _080C6838
	cmp r4, #0x1f
	ble _080C6846
	mov r2, r9
	cmp r2, #0
	bne _080C6846
_080C6838:
	adds r0, r4, #0
	ands r0, r7
	lsls r0, r0, #1
	adds r0, r5, r0
	bl sub_80C67C0
	b _080C6874
_080C6846:
	mov r0, r9
	cmp r4, #0x1f
	bgt _080C684E
	ldr r0, [sp, #0x20]
_080C684E:
	mov r1, r8
	cmp r1, #0
	bne _080C6864
	adds r1, r4, #0
	ands r1, r7
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r5, r1
	bl sub_80C677C
	b _080C6874
_080C6864:
	adds r1, r4, #0
	ands r1, r7
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r5, r1
	movs r2, #0xf
	bl sub_80C6794
_080C6874:
	adds r4, #1
	asrs r0, r6, #0x13
	adds r0, #1
	cmp r4, r0
	blt _080C682A
_080C687E:
	movs r2, #0x80
	lsls r2, r2, #0xd
	adds r1, r6, r2
	lsrs r1, r1, #0x10
	mov r0, sl
	movs r2, #0
	bl BG_SetPosition
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C689C
sub_80C689C: @ 0x080C689C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r4, [sp, #0x28]
	mov r9, r4
	ldr r4, [sp, #0x2c]
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r8, r2
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	str r3, [sp]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	mov sl, r4
	adds r0, r3, #0
	bl BG_GetMapBuffer
	adds r7, r0, #0
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bne _080C68DE
	subs r0, #8
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
_080C68DE:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	mov r2, r8
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	mov r4, r9
	cmp r4, #0
	beq _080C6906
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	b _080C690C
_080C6906:
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
_080C690C:
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	subs r1, r0, r1
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	lsls r0, r5, #0x10
	asrs r0, r0, #0x13
	subs r4, r0, #1
	lsls r1, r6, #0x10
	asrs r0, r1, #0x13
	subs r0, #1
	adds r5, r1, #0
	cmp r4, r0
	ble _080C6994
	movs r6, #0x1f
	mov r1, sl
	lsls r0, r1, #0x18
	asrs r0, r0, #0x18
	mov r8, r0
_080C693C:
	cmp r4, #0x3f
	bhi _080C694A
	cmp r4, #0x1f
	ble _080C6958
	mov r2, r9
	cmp r2, #0
	bne _080C6958
_080C694A:
	adds r0, r4, #0
	ands r0, r6
	lsls r0, r0, #1
	adds r0, r7, r0
	bl sub_80C67C0
	b _080C698A
_080C6958:
	mov r0, r9
	cmp r4, #0x1f
	bgt _080C6960
	ldr r0, [sp, #0x24]
_080C6960:
	cmp r0, #0
	beq _080C6994
	mov r1, r8
	cmp r1, #0
	bne _080C697A
	adds r1, r4, #0
	ands r1, r6
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r7, r1
	bl sub_80C677C
	b _080C698A
_080C697A:
	adds r1, r4, #0
	ands r1, r6
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r7, r1
	movs r2, #0xf
	bl sub_80C6794
_080C698A:
	subs r4, #1
	asrs r0, r5, #0x13
	subs r0, #1
	cmp r4, r0
	bgt _080C693C
_080C6994:
	lsrs r1, r5, #0x10
	ldr r0, [sp]
	movs r2, #0
	bl BG_SetPosition
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C69B0
sub_80C69B0: @ 0x080C69B0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r8, r1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	str r2, [sp]
	movs r0, #0x1f
	mov ip, r0
	movs r5, #0x1f
	movs r0, #0x10
	subs r6, r0, r2
	movs r1, #0xf
	mov r9, r1
	mov r0, r8
	ands r0, r5
	adds r7, r0, #0
	muls r7, r2, r7
	mov sl, r7
_080C69E2:
	ldrh r1, [r4]
	adds r0, r5, #0
	ands r0, r1
	adds r3, r0, #0
	muls r3, r6, r3
	add r3, sl
	asrs r3, r3, #4
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x15
	mov r2, ip
	ands r0, r2
	adds r2, r0, #0
	muls r2, r6, r2
	mov r7, r8
	lsrs r0, r7, #5
	mov r7, ip
	ands r0, r7
	ldr r7, [sp]
	muls r0, r7, r0
	adds r2, r2, r0
	asrs r2, r2, #4
	lsrs r1, r1, #0x1a
	mov r0, ip
	ands r1, r0
	muls r1, r6, r1
	mov r7, r8
	lsrs r0, r7, #0xa
	mov r7, ip
	ands r0, r7
	ldr r7, [sp]
	muls r0, r7, r0
	adds r1, r1, r0
	asrs r1, r1, #4
	ands r1, r5
	lsls r1, r1, #0xa
	ands r2, r5
	lsls r2, r2, #5
	orrs r1, r2
	ands r3, r5
	orrs r3, r1
	strh r3, [r4]
	adds r4, #2
	movs r0, #1
	negs r0, r0
	add r9, r0
	mov r1, r9
	cmp r1, #0
	bge _080C69E2
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START Initialize6CIntroSequence
Initialize6CIntroSequence: @ 0x080C6A54
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #1
	bl Sound_FadeOut800231C
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl SetPrimaryHBlankHandler
	movs r1, #0
	strh r1, [r4, #0x2a]
	ldr r0, _080C6B10  @ gUnknown_02022188
	strh r1, [r0, #0xc]
	ldr r2, _080C6B14  @ gLCDControlBuffer
	ldrb r0, [r2]
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	ldr r0, _080C6B18  @ gUnknown_08AF1AE8
	ldr r1, _080C6B1C  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C6B20  @ gUnknown_08AF1B38
	ldr r1, _080C6B24  @ 0x06010100
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C6B28  @ gUnknown_08AF1FD0
	ldr r1, _080C6B2C  @ 0x060108C0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C6B30  @ gUnknown_08AF2654
	ldr r1, _080C6B34  @ 0x06011140
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C6B38  @ gUnknown_08AF1B18
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C6B3C  @ gUnknown_08AF1FB0
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C6B40  @ gUnknown_08AF2634
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C6B44  @ gUnknown_08AF310C
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	movs r0, #1
	negs r0, r0
	str r0, [sp]
	ldr r1, _080C6B48  @ 0x06017800
	ldr r2, _080C6B4C  @ 0x01000200
	mov r0, sp
	bl CpuFastSet
	movs r0, #3
	bl SetNextGameActionId
	adds r0, r4, #0
	bl AddSomeChild6C
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C6B10: .4byte gUnknown_02022188
_080C6B14: .4byte gLCDControlBuffer
_080C6B18: .4byte gUnknown_08AF1AE8
_080C6B1C: .4byte 0x06010000
_080C6B20: .4byte gUnknown_08AF1B38
_080C6B24: .4byte 0x06010100
_080C6B28: .4byte gUnknown_08AF1FD0
_080C6B2C: .4byte 0x060108C0
_080C6B30: .4byte gUnknown_08AF2654
_080C6B34: .4byte 0x06011140
_080C6B38: .4byte gUnknown_08AF1B18
_080C6B3C: .4byte gUnknown_08AF1FB0
_080C6B40: .4byte gUnknown_08AF2634
_080C6B44: .4byte gUnknown_08AF310C
_080C6B48: .4byte 0x06017800
_080C6B4C: .4byte 0x01000200

	THUMB_FUNC_START sub_80C6B50
sub_80C6B50: @ 0x080C6B50
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r2, _080C6B88  @ gLCDControlBuffer
	adds r3, r2, #0
	adds r3, #0x3c
	ldrb r1, [r3]
	movs r0, #0x3f
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r3]
	adds r2, #0x46
	movs r5, #0
	strb r5, [r2]
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	adds r4, #0x4c
	strh r5, [r4]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C6B88: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C6B8C
sub_80C6B8C: @ 0x080C6B8C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x4c
	movs r0, #0
	ldrsh r3, [r5, r0]
	adds r4, r6, #0
	adds r4, #0x64
	movs r1, #0
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl sub_8012DCC
	ldr r1, _080C6BD4  @ gLCDControlBuffer
	adds r1, #0x46
	strb r0, [r1]
	movs r2, #0
	ldrsh r1, [r5, r2]
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r1, r0
	bne _080C6BC6
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
_080C6BC6:
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C6BD4: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C6BD8
sub_80C6BD8: @ 0x080C6BD8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080C6BEC  @ gUnknown_08AA6CBC
	bl Proc_Create
	adds r0, #0x64
	strh r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C6BEC: .4byte gUnknown_08AA6CBC

	THUMB_FUNC_START sub_80C6BF0
sub_80C6BF0: @ 0x080C6BF0
	push {lr}
	sub sp, #0x14
	movs r2, #0x80
	lsls r2, r2, #9
	str r2, [sp]
	str r2, [sp, #4]
	mov r3, sp
	movs r2, #0x78
	strh r2, [r3, #8]
	movs r2, #0x50
	strh r2, [r3, #0xa]
	mov r2, sp
	strh r0, [r2, #0xc]
	strh r0, [r2, #0xe]
	mov r0, sp
	lsls r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, _080C6C20  @ gUnknown_030030C8
	movs r2, #1
	bl BgAffineSet
	add sp, #0x14
	pop {r0}
	bx r0
	.align 2, 0
_080C6C20: .4byte gUnknown_030030C8

	THUMB_FUNC_START sub_80C6C24
sub_80C6C24: @ 0x080C6C24
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r4, _080C6DE8  @ gLCDControlBuffer
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	movs r1, #0
	bl SetBackgroundTileDataOffset
	movs r1, #0x80
	lsls r1, r1, #7
	movs r0, #1
	bl SetBackgroundTileDataOffset
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundTileDataOffset
	movs r0, #3
	movs r1, #0
	bl SetBackgroundTileDataOffset
	movs r1, #0xd8
	lsls r1, r1, #8
	movs r0, #0
	bl SetBackgroundMapDataOffset
	movs r1, #0xe8
	lsls r1, r1, #8
	movs r0, #1
	bl SetBackgroundMapDataOffset
	movs r1, #0xf0
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundMapDataOffset
	movs r1, #0xf8
	lsls r1, r1, #8
	movs r0, #3
	bl SetBackgroundMapDataOffset
	movs r0, #0
	movs r1, #0
	bl SetBackgroundScreenSize
	movs r0, #1
	movs r1, #0
	bl SetBackgroundScreenSize
	movs r0, #2
	movs r1, #0
	bl SetBackgroundScreenSize
	movs r0, #3
	movs r1, #0
	bl SetBackgroundScreenSize
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	ldrb r1, [r4, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	ldr r4, _080C6DEC  @ gUnknown_08AB21D8
	movs r0, #2
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r5, #0xc0
	lsls r5, r5, #0x13
	adds r1, r1, r5
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C6DF0  @ gUnknown_08AB5D90
	ldr r1, _080C6DF4  @ 0x0600F000
	bl CopyDataWithPossibleUncomp
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, _080C6DF8  @ gPaletteBuffer
	ldr r2, _080C6DFC  @ 0x01000008
	add r0, sp, #4
	bl CpuFastSet
	ldr r0, _080C6E00  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #1
	bl BG_EnableSyncByMask
	ldr r4, _080C6E04  @ gUnknown_08AB632C
	movs r0, #1
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C6E08  @ gUnknown_08AB7DB0
	movs r1, #0x40
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r4, _080C6E0C  @ 0x0600E800
	ldr r0, _080C6E10  @ gUnknown_08AB7AC0
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	movs r0, #0x80
	lsls r0, r0, #6
	adds r1, r0, #0
	movs r5, #0x80
	lsls r5, r5, #3
_080C6D72:
	ldrh r2, [r4]
	adds r0, r1, r2
	strh r0, [r4]
	subs r5, #1
	adds r4, #2
	cmp r5, #0
	bne _080C6D72
	bl EnablePaletteSync
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r5, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	strh r5, [r6, #0x2a]
	strh r5, [r6, #0x34]
	strh r5, [r6, #0x36]
	ldr r2, _080C6DE8  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl Sound_PlaySong80024E4
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C6DE8: .4byte gLCDControlBuffer
_080C6DEC: .4byte gUnknown_08AB21D8
_080C6DF0: .4byte gUnknown_08AB5D90
_080C6DF4: .4byte 0x0600F000
_080C6DF8: .4byte gPaletteBuffer
_080C6DFC: .4byte 0x01000008
_080C6E00: .4byte gBG0TilemapBuffer
_080C6E04: .4byte gUnknown_08AB632C
_080C6E08: .4byte gUnknown_08AB7DB0
_080C6E0C: .4byte 0x0600E800
_080C6E10: .4byte gUnknown_08AB7AC0

	THUMB_FUNC_START sub_80C6E14
sub_80C6E14: @ 0x080C6E14
	movs r1, #0
	strh r1, [r0, #0x2a]
	bx lr

	THUMB_FUNC_START sub_80C6E1C
sub_80C6E1C: @ 0x080C6E1C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r3, [r4, #0x2a]
	movs r0, #0x3e
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1f
	bl sub_8012DCC
	adds r2, r0, #0
	lsls r0, r2, #0xa
	lsls r1, r2, #5
	orrs r0, r1
	orrs r2, r0
	ldr r1, _080C6E78  @ gPaletteBuffer
	adds r0, r1, #0
	adds r0, #0x1e
_080C6E42:
	strh r2, [r0]
	subs r0, #2
	cmp r0, r1
	bge _080C6E42
	bl EnablePaletteSync
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x3e
	bne _080C6E84
	movs r0, #0
	strh r0, [r4, #0x2a]
	ldr r1, _080C6E7C  @ gUnknown_02022188
	ldr r0, _080C6E80  @ 0x00007FFF
	strh r0, [r1, #0xc]
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C6E88
	.align 2, 0
_080C6E78: .4byte gPaletteBuffer
_080C6E7C: .4byte gUnknown_02022188
_080C6E80: .4byte 0x00007FFF
_080C6E84:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C6E88:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START Until6C2AIs8Callback
Until6C2AIs8Callback: @ 0x080C6E90
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2a]
	cmp r0, #8
	bne _080C6EA6
	movs r0, #0
	strh r0, [r1, #0x2a]
	adds r0, r1, #0
	bl Proc_ClearNativeCallback
	b _080C6EAA
_080C6EA6:
	adds r0, #1
	strh r0, [r1, #0x2a]
_080C6EAA:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C6EB0
sub_80C6EB0: @ 0x080C6EB0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r3, [r4, #0x2a]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl sub_8012DCC
	ldr r2, _080C6EE8  @ gLCDControlBuffer
	adds r1, r2, #0
	adds r1, #0x44
	strb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	adds r2, #0x45
	strb r1, [r2]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne _080C6EEC
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C6EF0
	.align 2, 0
_080C6EE8: .4byte gLCDControlBuffer
_080C6EEC:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C6EF0:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C6EF8
sub_80C6EF8: @ 0x080C6EF8
	push {lr}
	ldr r0, _080C6F0C  @ gUnknown_08AA6CDC
	bl Proc_Find
	cmp r0, #0
	beq _080C6F06
	movs r0, #1
_080C6F06:
	pop {r1}
	bx r1
	.align 2, 0
_080C6F0C: .4byte gUnknown_08AA6CDC

	THUMB_FUNC_START sub_80C6F10
sub_80C6F10: @ 0x080C6F10
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #1
	movs r1, #8
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001F0C
	ldr r2, _080C6F6C  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	strh r4, [r5, #0x2c]
	strh r4, [r5, #0x2e]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C6F6C: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C6F70
sub_80C6F70: @ 0x080C6F70
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldrh r1, [r5, #0x2a]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _080C6F86
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
_080C6F86:
	ldrh r1, [r5, #0x2a]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne _080C6F96
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
_080C6F96:
	ldrh r1, [r5, #0x2c]
	ldrh r2, [r5, #0x2e]
	movs r0, #1
	bl BG_SetPosition
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x60
	bhi _080C6FD0
	adds r3, r0, #0
	movs r0, #0x60
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl sub_8012DCC
	adds r4, r0, #0
	ldr r0, _080C7034  @ gUnknown_08AB630C
	movs r1, #0
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C7038  @ gPaletteBuffer
	ldr r1, _080C703C  @ 0x00007FFF
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r2, r4, #0
	bl sub_80C69B0
_080C6FD0:
	ldrh r0, [r5, #0x2a]
	adds r3, r0, #0
	subs r3, #0x80
	cmp r3, #0x60
	bhi _080C6FEE
	movs r0, #0x60
	str r0, [sp]
	movs r0, #0
	movs r1, #8
	movs r2, #0
	bl sub_8012DCC
	ldr r1, _080C7040  @ gLCDControlBuffer
	adds r1, #0x44
	strb r0, [r1]
_080C6FEE:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0xef
	bne _080C701C
	ldr r2, _080C7040  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #0x20
	adds r1, r5, #0
	bl sub_80C6BD8
_080C701C:
	ldrh r1, [r5, #0x2a]
	movs r0, #0x88
	lsls r0, r0, #1
	cmp r1, r0
	bne _080C7044
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C7048
	.align 2, 0
_080C7034: .4byte gUnknown_08AB630C
_080C7038: .4byte gPaletteBuffer
_080C703C: .4byte 0x00007FFF
_080C7040: .4byte gLCDControlBuffer
_080C7044:
	adds r0, r1, #1
	strh r0, [r5, #0x2a]
_080C7048:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C7050
sub_80C7050: @ 0x080C7050
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, _080C719C  @ gLCDControlBuffer
	ldrb r1, [r5]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r5]
	movs r0, #0
	movs r1, #0
	bl SetBackgroundTileDataOffset
	movs r0, #1
	movs r1, #0
	bl SetBackgroundTileDataOffset
	movs r4, #0x80
	lsls r4, r4, #7
	movs r0, #2
	adds r1, r4, #0
	bl SetBackgroundTileDataOffset
	movs r0, #3
	adds r1, r4, #0
	bl SetBackgroundTileDataOffset
	movs r1, #0xd8
	lsls r1, r1, #8
	movs r0, #0
	bl SetBackgroundMapDataOffset
	movs r1, #0xe0
	lsls r1, r1, #8
	movs r0, #1
	bl SetBackgroundMapDataOffset
	movs r1, #0xe8
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundMapDataOffset
	movs r1, #0xf8
	lsls r1, r1, #8
	movs r0, #3
	bl SetBackgroundMapDataOffset
	movs r0, #0
	movs r1, #0
	bl SetBackgroundScreenSize
	movs r0, #1
	movs r1, #0
	bl SetBackgroundScreenSize
	movs r0, #2
	movs r1, #0
	bl SetBackgroundScreenSize
	movs r0, #3
	movs r1, #0
	bl SetBackgroundScreenSize
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldrb r2, [r5, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r5, #0xc]
	ldrb r2, [r5, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r5, #0x10]
	ldrb r0, [r5, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r5, #0x14]
	ldrb r0, [r5, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r5, #0x18]
	movs r0, #0
	strb r0, [r5, #1]
	ldr r0, _080C71A0  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C71A4  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C71A8  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C71AC  @ gBG3TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0xf
	bl BG_EnableSyncByMask
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	movs r0, #1
	movs r1, #8
	movs r2, #8
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	movs r0, #0
	strh r4, [r6, #0x2a]
	strh r4, [r6, #0x38]
	strh r4, [r6, #0x3a]
	strh r4, [r6, #0x3c]
	adds r1, r6, #0
	adds r1, #0x46
	strb r0, [r1]
	strh r4, [r6, #0x3e]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C719C: .4byte gLCDControlBuffer
_080C71A0: .4byte gBG0TilemapBuffer
_080C71A4: .4byte gBG1TilemapBuffer
_080C71A8: .4byte gBG2TilemapBuffer
_080C71AC: .4byte gBG3TilemapBuffer

	THUMB_FUNC_START sub_80C71B0
sub_80C71B0: @ 0x080C71B0
	ldr r0, _080C71BC  @ gUnknown_02022188
	ldrh r1, [r0, #2]
	strh r1, [r0, #8]
	ldrh r1, [r0, #6]
	strh r1, [r0, #0xa]
	bx lr
	.align 2, 0
_080C71BC: .4byte gUnknown_02022188

	THUMB_FUNC_START sub_80C71C0
sub_80C71C0: @ 0x080C71C0
	push {lr}
	ldr r0, _080C71D0  @ gUnknown_08AA6D04
	movs r1, #0
	bl Proc_Create
	pop {r0}
	bx r0
	.align 2, 0
_080C71D0: .4byte gUnknown_08AA6D04

	THUMB_FUNC_START sub_80C71D4
sub_80C71D4: @ 0x080C71D4
	push {lr}
	ldr r0, _080C71E0  @ gUnknown_08AA6D04
	bl Proc_DeleteAllWithScript
	pop {r0}
	bx r0
	.align 2, 0
_080C71E0: .4byte gUnknown_08AA6D04

	THUMB_FUNC_START sub_80C71E4
sub_80C71E4: @ 0x080C71E4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0x63
	bhi _080C7250
	asrs r1, r1, #0x10
	movs r0, #0x1f
	bics r0, r1
	lsls r0, r0, #6
	ldr r2, _080C725C  @ 0x0600E800
	adds r7, r0, r2
	movs r5, #0x63
	subs r5, r5, r1
	ldr r1, _080C7260  @ gUnknown_08AA6D14
	lsls r5, r5, #0x10
	asrs r0, r5, #0x10
	lsls r4, r0, #2
	adds r1, r4, r1
	ldr r6, [r1]
	movs r1, #0x16
	bl DivRem
	adds r1, r0, #0
	lsls r1, r1, #0xa
	ldr r0, _080C7264  @ 0x06008000
	adds r1, r1, r0
	adds r0, r6, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C7268  @ gUnknown_08AA6EA4
	adds r4, r4, r0
	ldr r4, [r4]
	movs r6, #0
	movs r2, #0xfc
	lsls r2, r2, #8
	mov r8, r2
_080C7230:
	asrs r0, r5, #0x10
	movs r1, #0x16
	bl DivRem
	ldrh r1, [r4]
	mov r2, r8
	ands r1, r2
	lsls r0, r0, #5
	adds r0, r0, r6
	orrs r1, r0
	strh r1, [r7]
	adds r6, #1
	adds r7, #2
	adds r4, #2
	cmp r6, #0x1d
	ble _080C7230
_080C7250:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C725C: .4byte 0x0600E800
_080C7260: .4byte gUnknown_08AA6D14
_080C7264: .4byte 0x06008000
_080C7268: .4byte gUnknown_08AA6EA4

	THUMB_FUNC_START sub_80C726C
sub_80C726C: @ 0x080C726C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	asrs r1, r1, #3
	adds r4, r1, #0
	adds r4, #0x15
	asrs r0, r6, #3
	adds r0, #0x15
	cmp r4, r0
	bge _080C728E
	adds r5, r0, #0
_080C7280:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	bl sub_80C71E4
	adds r4, #1
	cmp r4, r5
	blt _080C7280
_080C728E:
	movs r2, #0x60
	subs r2, r2, r6
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl BG_SetPosition
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C72A4
sub_80C72A4: @ 0x080C72A4
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	bl SetDefaultColorEffects
	cmp r4, #0
	bne _080C72DC
	ldr r2, _080C72D8  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	b _080C737C
	.align 2, 0
_080C72D8: .4byte gLCDControlBuffer
_080C72DC:
	ldr r4, _080C73A4  @ gLCDControlBuffer
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	ldrb r0, [r4, #1]
	orrs r0, r2
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	movs r1, #0x80
	lsls r1, r1, #7
	movs r0, #1
	bl SetBackgroundTileDataOffset
	movs r1, #0xf0
	lsls r1, r1, #8
	movs r0, #1
	bl SetBackgroundMapDataOffset
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001F0C
	ldr r0, _080C73A8  @ gUnknown_08AF47F0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x80
	bl StorePaletteToBufferMaybe
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldrb r1, [r4, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
_080C737C:
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundTileDataOffset
	movs r1, #0xe8
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundMapDataOffset
	ldr r0, _080C73AC  @ gUnknown_08B103D8
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C73A4: .4byte gLCDControlBuffer
_080C73A8: .4byte gUnknown_08AF47F0
_080C73AC: .4byte gUnknown_08B103D8

	THUMB_FUNC_START sub_80C73B0
sub_80C73B0: @ 0x080C73B0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2a]
	cmp r0, #6
	bls _080C73BC
	b _080C7604
_080C73BC:
	lsls r0, r0, #2
	ldr r1, _080C73C8  @ _080C73CC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080C73C8: .4byte _080C73CC
_080C73CC: @ jump table
	.4byte _080C73E8 @ case 0
	.4byte _080C7454 @ case 1
	.4byte _080C7480 @ case 2
	.4byte _080C74B0 @ case 3
	.4byte _080C74EC @ case 4
	.4byte _080C7510 @ case 5
	.4byte _080C754C @ case 6
_080C73E8:
	ldr r4, _080C743C  @ gUnknown_08AB7DD0
	movs r0, #3
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r0, _080C7440  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C7444  @ gUnknown_08AB87E0
	ldr r1, _080C7448  @ gBG3TilemapBuffer
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C744C  @ gPaletteBuffer
	ldr r1, _080C7450  @ 0x00007FFF
	movs r2, #0xe1
	lsls r2, r2, #1
	adds r0, r0, r2
	movs r2, #0xe
_080C7410:
	strh r1, [r0]
	adds r0, #2
	subs r2, #1
	cmp r2, #0
	bge _080C7410
	movs r4, #0xe1
	lsls r4, r4, #8
	adds r3, r4, #0
	ldr r1, _080C7448  @ gBG3TilemapBuffer
	movs r2, #0xa0
	lsls r2, r2, #2
_080C7426:
	ldrh r4, [r1]
	adds r0, r3, r4
	strh r0, [r1]
	adds r1, #2
	subs r2, #1
	cmp r2, #0
	bne _080C7426
	movs r0, #8
	bl BG_EnableSyncByMask
	b _080C7604
	.align 2, 0
_080C743C: .4byte gUnknown_08AB7DD0
_080C7440: .4byte 0x06002000
_080C7444: .4byte gUnknown_08AB87E0
_080C7448: .4byte gBG3TilemapBuffer
_080C744C: .4byte gPaletteBuffer
_080C7450: .4byte 0x00007FFF
_080C7454:
	ldr r4, _080C7474  @ gUnknown_08ABF168
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C7478  @ gUnknown_08AC1878
	ldr r1, _080C747C  @ gUnknown_02020188
	bl CopyDataWithPossibleUncomp
	b _080C7604
	.align 2, 0
_080C7474: .4byte gUnknown_08ABF168
_080C7478: .4byte gUnknown_08AC1878
_080C747C: .4byte gUnknown_02020188
_080C7480:
	ldr r4, _080C74A0  @ gUnknown_08AC0BD8
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r2, _080C74A4  @ 0x06002000
	adds r1, r1, r2
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C74A8  @ gUnknown_08AC1B98
	ldr r1, _080C74AC  @ gUnknown_02020988
	bl CopyDataWithPossibleUncomp
	b _080C7604
	.align 2, 0
_080C74A0: .4byte gUnknown_08AC0BD8
_080C74A4: .4byte 0x06002000
_080C74A8: .4byte gUnknown_08AC1B98
_080C74AC: .4byte gUnknown_02020988
_080C74B0:
	ldr r4, _080C74DC  @ gUnknown_08ABB14C
	movs r0, #2
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r3, #0xc0
	lsls r3, r3, #0x13
	adds r1, r1, r3
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C74E0  @ gUnknown_08ABC074
	ldr r1, _080C74E4  @ gUnknown_02021188
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C74E8  @ gUnknown_08AC1C8C
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	b _080C7604
	.align 2, 0
_080C74DC: .4byte gUnknown_08ABB14C
_080C74E0: .4byte gUnknown_08ABC074
_080C74E4: .4byte gUnknown_02021188
_080C74E8: .4byte gUnknown_08AC1C8C
_080C74EC:
	ldr r0, _080C7500  @ gUnknown_08ABE304
	ldr r1, _080C7504  @ 0x06008000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C7508  @ gUnknown_08ABEF70
	ldr r1, _080C750C  @ 0x0600C000
	bl CopyDataWithPossibleUncomp
	b _080C7604
	.align 2, 0
_080C7500: .4byte gUnknown_08ABE304
_080C7504: .4byte 0x06008000
_080C7508: .4byte gUnknown_08ABEF70
_080C750C: .4byte 0x0600C000
_080C7510:
	ldr r0, _080C753C  @ gUnknown_08ABD348
	ldr r1, _080C7540  @ 0x0600A000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C7544  @ gUnknown_08ABE120
	ldr r4, _080C7548  @ 0x0600C800
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	movs r0, #0x80
	lsls r0, r0, #1
	adds r1, r0, #0
	movs r2, #0xa0
	lsls r2, r2, #2
_080C752C:
	ldrh r3, [r4]
	adds r0, r1, r3
	strh r0, [r4]
	adds r4, #2
	subs r2, #1
	cmp r2, #0
	bne _080C752C
	b _080C7604
	.align 2, 0
_080C753C: .4byte gUnknown_08ABD348
_080C7540: .4byte 0x0600A000
_080C7544: .4byte gUnknown_08ABE120
_080C7548: .4byte 0x0600C800
_080C754C:
	ldr r3, _080C75EC  @ gUnknown_02021188
	ldr r0, _080C75F0  @ gPaletteBuffer
	movs r1, #0
	movs r4, #0xf1
	lsls r4, r4, #1
	adds r0, r0, r4
	movs r2, #0xe
_080C755A:
	strh r1, [r0]
	adds r0, #2
	subs r2, #1
	cmp r2, #0
	bge _080C755A
	movs r0, #0x80
	lsls r0, r0, #4
	adds r4, r3, r0
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r3, #0
	adds r1, r4, #0
	bl CpuFastSet
	adds r7, r4, #0
	ldr r6, _080C75F4  @ 0x00000FFF
	movs r2, #0xf0
	lsls r2, r2, #8
	adds r4, r2, #0
	adds r3, r7, #0
	movs r2, #0xa0
	lsls r2, r2, #2
_080C7586:
	ldrh r1, [r3]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r4
	strh r0, [r3]
	adds r3, #2
	subs r2, #1
	cmp r2, #0
	bne _080C7586
	ldr r1, _080C75F8  @ 0x0600F000
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r7, #0
	bl CpuFastSet
	bl EnablePaletteSync
	ldr r2, _080C75FC  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	strh r0, [r5, #0x2a]
	strh r0, [r5, #0x30]
	strh r0, [r5, #0x32]
	ldr r1, _080C7600  @ gUnknown_02022188
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	movs r2, #0xa0
	strh r2, [r1, #6]
	strh r0, [r1, #0xc]
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundTileDataOffset
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C760A
	.align 2, 0
_080C75EC: .4byte gUnknown_02021188
_080C75F0: .4byte gPaletteBuffer
_080C75F4: .4byte 0x00000FFF
_080C75F8: .4byte 0x0600F000
_080C75FC: .4byte gLCDControlBuffer
_080C7600: .4byte gUnknown_02022188
_080C7604:
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
_080C760A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C7610
sub_80C7610: @ 0x080C7610
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bx lr

	THUMB_FUNC_START sub_80C7618
sub_80C7618: @ 0x080C7618
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x4c
	movs r0, #0
	ldrsh r3, [r5, r0]
	movs r0, #0x20
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl sub_8012DCC
	adds r4, r0, #0
	ldr r0, _080C7668  @ gUnknown_08AB8CAC
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C766C  @ gUnknown_02022A68
	ldr r1, _080C7670  @ 0x00007FFF
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r2, r4, #0
	bl sub_80C69B0
	ldrh r1, [r5]
	movs r2, #0
	ldrsh r0, [r5, r2]
	cmp r0, #0x20
	bne _080C7674
	movs r0, #0
	strh r0, [r5]
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	b _080C7678
	.align 2, 0
_080C7668: .4byte gUnknown_08AB8CAC
_080C766C: .4byte gUnknown_02022A68
_080C7670: .4byte 0x00007FFF
_080C7674:
	adds r0, r1, #1
	strh r0, [r5]
_080C7678:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C7680
sub_80C7680: @ 0x080C7680
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	adds r5, r1, #0
	movs r4, #0
	movs r6, #4
_080C768C:
	lsls r1, r4, #5
	str r6, [sp]
	movs r0, #0
	adds r2, r5, #0
	ldr r3, _080C76C0  @ gUnknown_08590F9C
	bl RegisterObjectAttributes
	adds r4, #1
	cmp r4, #7
	ble _080C768C
	movs r4, #0
	movs r5, #0
_080C76A4:
	lsls r2, r4, #5
	str r5, [sp]
	movs r0, #0
	adds r1, r7, #0
	ldr r3, _080C76C4  @ gUnknown_08590FA4
	bl RegisterObjectAttributes
	adds r4, #1
	cmp r4, #7
	ble _080C76A4
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C76C0: .4byte gUnknown_08590F9C
_080C76C4: .4byte gUnknown_08590FA4

	THUMB_FUNC_START sub_80C76C8
sub_80C76C8: @ 0x080C76C8
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r5, r0, #0
	movs r0, #7
	bl BG_EnableSyncByMask
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x10
	bhi _080C77BA
	adds r3, r0, #0
	movs r0, #0x10
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x80
	bl sub_8012DCC
	adds r6, r0, #0
	ldrh r0, [r5, #0x2a]
	subs r0, #0xc
	cmp r0, #4
	bhi _080C7770
	lsls r0, r0, #2
	ldr r1, _080C7704  @ _080C7708
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080C7704: .4byte _080C7708
_080C7708: @ jump table
	.4byte _080C771C @ case 0
	.4byte _080C7730 @ case 1
	.4byte _080C7750 @ case 2
	.4byte _080C7770 @ case 3
	.4byte _080C7790 @ case 4
_080C771C:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	ldr r1, _080C772C  @ 0x0600C800
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	str r1, [sp, #8]
	b _080C7782
	.align 2, 0
_080C772C: .4byte 0x0600C800
_080C7730:
	ldr r0, _080C7744  @ gUnknown_08ABC22C
	ldr r1, _080C7748  @ 0x06008000
	bl CopyDataWithPossibleUncomp
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	ldr r2, _080C774C  @ 0x0600C800
	b _080C777A
	.align 2, 0
_080C7744: .4byte gUnknown_08ABC22C
_080C7748: .4byte 0x06008000
_080C774C: .4byte 0x0600C800
_080C7750:
	ldr r0, _080C7768  @ gUnknown_08ABD174
	ldr r4, _080C776C  @ 0x0600C000
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	str r4, [sp]
	movs r1, #0
	str r1, [sp, #4]
	str r1, [sp, #8]
	b _080C7782
	.align 2, 0
_080C7768: .4byte gUnknown_08ABD174
_080C776C: .4byte 0x0600C000
_080C7770:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	ldr r2, _080C778C  @ 0x0600C000
_080C777A:
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
_080C7782:
	movs r2, #0x88
	movs r3, #2
	bl sub_80C67D4
	b _080C77B8
	.align 2, 0
_080C778C: .4byte 0x0600C000
_080C7790:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	ldr r1, _080C7824  @ gUnknown_02021188
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	str r1, [sp, #8]
	movs r2, #0x88
	movs r3, #2
	bl sub_80C67D4
	movs r1, #0x80
	lsls r1, r1, #7
	movs r0, #2
	bl SetBackgroundTileDataOffset
	ldr r0, _080C7828  @ gUnknown_08AA7034
	adds r1, r5, #0
	bl Proc_Create
_080C77B8:
	strh r6, [r5, #0x30]
_080C77BA:
	ldrh r0, [r5, #0x2a]
	subs r4, r0, #5
	cmp r4, #0
	blt _080C7830
	movs r0, #0x10
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x90
	adds r3, r4, #0
	bl sub_8012DCC
	adds r6, r0, #0
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r5, r2]
	ldr r7, _080C782C  @ gUnknown_02020188
	str r7, [sp]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r2, r2, r7
	mov r9, r2
	str r2, [sp, #4]
	movs r2, #1
	str r2, [sp, #8]
	movs r2, #0xc8
	movs r3, #1
	bl sub_80C689C
	movs r0, #0
	mov r8, r0
	strh r6, [r5, #0x32]
	cmp r4, #0x10
	bne _080C7830
	movs r1, #0x32
	ldrsh r0, [r5, r1]
	str r7, [sp]
	mov r2, r9
	str r2, [sp, #4]
	mov r1, r8
	str r1, [sp, #8]
	movs r1, #0
	movs r2, #0xc8
	movs r3, #0
	bl sub_80C689C
	mov r2, r8
	strh r2, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C7836
	.align 2, 0
_080C7824: .4byte gUnknown_02021188
_080C7828: .4byte gUnknown_08AA7034
_080C782C: .4byte gUnknown_02020188
_080C7830:
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
_080C7836:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C7844
sub_80C7844: @ 0x080C7844
	push {r4, lr}
	ldr r0, _080C78A0  @ 0x04000006
	ldrh r0, [r0]
	adds r3, r0, #0
	subs r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x9f
	bls _080C7870
	ldr r2, _080C78A4  @ 0x0400000C
	ldrh r1, [r2]
	ldr r0, _080C78A8  @ 0x0000C0FF
	ands r0, r1
	movs r4, #0xf0
	lsls r4, r4, #5
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080C78AC  @ 0x04000050
	ldr r2, _080C78B0  @ 0x00000C46
	adds r0, r2, #0
	strh r0, [r1]
_080C7870:
	ldr r1, _080C78B4  @ gUnknown_02022188
	movs r4, #8
	ldrsh r0, [r1, r4]
	cmp r3, r0
	beq _080C787E
	cmp r0, #0
	bne _080C7898
_080C787E:
	ldr r2, _080C78A4  @ 0x0400000C
	ldrh r1, [r2]
	ldr r0, _080C78A8  @ 0x0000C0FF
	ands r0, r1
	movs r3, #0xe8
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, _080C78AC  @ 0x04000050
	ldr r4, _080C78B8  @ 0x00000C42
	adds r0, r4, #0
	strh r0, [r1]
_080C7898:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C78A0: .4byte 0x04000006
_080C78A4: .4byte 0x0400000C
_080C78A8: .4byte 0x0000C0FF
_080C78AC: .4byte 0x04000050
_080C78B0: .4byte 0x00000C46
_080C78B4: .4byte gUnknown_02022188
_080C78B8: .4byte 0x00000C42

	THUMB_FUNC_START sub_80C78BC
sub_80C78BC: @ 0x080C78BC
	push {lr}
	ldr r0, _080C78EC  @ 0x04000006
	ldrh r0, [r0]
	adds r2, r0, #0
	subs r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x9f
	bls _080C78D6
	ldr r1, _080C78F0  @ 0x04000050
	ldr r3, _080C78F4  @ 0x00000C46
	adds r0, r3, #0
	strh r0, [r1]
_080C78D6:
	ldr r0, _080C78F8  @ gUnknown_02022188
	movs r1, #0xa
	ldrsh r0, [r0, r1]
	cmp r2, r0
	bne _080C78E8
	ldr r1, _080C78F0  @ 0x04000050
	ldr r2, _080C78FC  @ 0x00000CCF
	adds r0, r2, #0
	strh r0, [r1]
_080C78E8:
	pop {r0}
	bx r0
	.align 2, 0
_080C78EC: .4byte 0x04000006
_080C78F0: .4byte 0x04000050
_080C78F4: .4byte 0x00000C46
_080C78F8: .4byte gUnknown_02022188
_080C78FC: .4byte 0x00000CCF

	THUMB_FUNC_START sub_80C7900
sub_80C7900: @ 0x080C7900
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp, #4]
	ldr r0, _080C79E4  @ sub_80C7844
	bl SetPrimaryHBlankHandler
	ldr r7, _080C79E8  @ gLCDControlBuffer
	ldrb r2, [r7, #1]
	movs r0, #0x20
	orrs r2, r0
	subs r0, #0x61
	ands r2, r0
	movs r0, #0x7f
	ands r2, r0
	ldr r1, _080C79EC  @ gUnknown_030030B4
	ldrb r3, [r1]
	movs r0, #1
	mov r9, r0
	mov r1, r9
	orrs r3, r1
	movs r6, #2
	orrs r3, r6
	movs r0, #4
	mov r8, r0
	mov r1, r8
	orrs r3, r1
	movs r5, #8
	orrs r3, r5
	movs r4, #0x10
	orrs r3, r4
	movs r0, #0x35
	adds r0, r0, r7
	mov ip, r0
	ldrb r0, [r0]
	mov r1, r9
	orrs r0, r1
	orrs r0, r6
	movs r1, #5
	negs r1, r1
	ands r0, r1
	orrs r0, r5
	orrs r0, r4
	mov r1, ip
	strb r0, [r1]
	movs r0, #0x36
	adds r0, r0, r7
	mov sl, r0
	ldrb r1, [r0]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	orrs r0, r6
	mov r1, r8
	orrs r0, r1
	orrs r0, r5
	orrs r0, r4
	mov r1, r9
	orrs r2, r1
	orrs r2, r6
	mov r1, r8
	orrs r2, r1
	orrs r2, r5
	orrs r2, r4
	strb r2, [r7, #1]
	movs r1, #0x20
	orrs r3, r1
	ldr r1, _080C79EC  @ gUnknown_030030B4
	strb r3, [r1]
	movs r1, #0x20
	orrs r0, r1
	mov r1, sl
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x2d
	movs r4, #0
	strb r4, [r0]
	adds r0, #4
	strb r4, [r0]
	ldr r0, _080C79F0  @ gUnknown_02022188
	ldrh r1, [r0]
	adds r0, r7, #0
	adds r0, #0x2c
	strb r1, [r0]
	adds r1, r7, #0
	adds r1, #0x30
	movs r0, #0xa0
	strb r0, [r1]
	movs r1, #0xf0
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundMapDataOffset
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	ldr r0, [sp, #4]
	bl Proc_ClearNativeCallback
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080C79E4: .4byte sub_80C7844
_080C79E8: .4byte gLCDControlBuffer
_080C79EC: .4byte gUnknown_030030B4
_080C79F0: .4byte gUnknown_02022188

	THUMB_FUNC_START sub_80C79F4
sub_80C79F4: @ 0x080C79F4
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r3, [r7, #0x2a]
	movs r5, #0x10
	str r5, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0xf0
	bl sub_8012DCC
	ldr r4, _080C7A6C  @ gUnknown_02022188
	movs r6, #0
	strh r0, [r4]
	ldrh r3, [r7, #0x2a]
	str r5, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0xa0
	bl sub_8012DCC
	strh r0, [r4, #2]
	ldr r2, _080C7A70  @ gLCDControlBuffer
	adds r0, r2, #0
	adds r0, #0x2d
	strb r6, [r0]
	adds r0, #4
	strb r6, [r0]
	ldrh r1, [r4]
	subs r0, #5
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x30
	movs r0, #0xa0
	strb r0, [r1]
	movs r1, #0
	ldrsh r0, [r4, r1]
	movs r2, #2
	ldrsh r1, [r4, r2]
	cmp r0, #0xe8
	ble _080C7A48
	movs r0, #0xe8
_080C7A48:
	cmp r1, #0x88
	ble _080C7A4E
	movs r1, #0x88
_080C7A4E:
	bl sub_80C7680
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x10
	bne _080C7A78
	ldr r0, _080C7A74  @ sub_80C78BC
	bl SetPrimaryHBlankHandler
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	b _080C7A7C
	.align 2, 0
_080C7A6C: .4byte gUnknown_02022188
_080C7A70: .4byte gLCDControlBuffer
_080C7A74: .4byte sub_80C78BC
_080C7A78:
	adds r0, #1
	strh r0, [r7, #0x2a]
_080C7A7C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C7A84
sub_80C7A84: @ 0x080C7A84
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r3, [r4, #0x2a]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #4
	movs r1, #0xa0
	movs r2, #0x78
	bl sub_8012DCC
	ldr r1, _080C7AD0  @ gUnknown_02022188
	strh r0, [r1, #6]
	movs r0, #0xe8
	movs r1, #0x88
	bl sub_80C7680
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xe
	bls _080C7ABC
	ldr r3, _080C7AD4  @ gUnknown_08AA6BFA
	ldr r0, _080C7AD8  @ 0x00002046
	str r0, [sp]
	movs r0, #1
	movs r1, #0x98
	movs r2, #0x88
	bl RegisterObjectAttributes
_080C7ABC:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne _080C7ADC
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C7AE0
	.align 2, 0
_080C7AD0: .4byte gUnknown_02022188
_080C7AD4: .4byte gUnknown_08AA6BFA
_080C7AD8: .4byte 0x00002046
_080C7ADC:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C7AE0:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C7AE8
sub_80C7AE8: @ 0x080C7AE8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0xe8
	movs r1, #0x88
	bl sub_80C7680
	ldr r3, _080C7B60  @ gUnknown_08AA6BFA
	ldr r0, _080C7B64  @ 0x0000205A
	str r0, [sp]
	movs r0, #1
	movs r1, #0x98
	movs r2, #0x88
	bl RegisterObjectAttributes
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x38
	bne _080C7B74
	movs r0, #0
	strh r0, [r4, #0x2a]
	ldrh r0, [r4, #0x30]
	strh r0, [r4, #0x34]
	ldrh r0, [r4, #0x32]
	strh r0, [r4, #0x36]
	ldr r2, _080C7B68  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r6, _080C7B6C  @ 0x00007FFF
	movs r0, #0xf0
	lsls r0, r0, #8
	adds r5, r0, #0
	ldr r2, _080C7B70  @ gBG2TilemapBuffer
	movs r7, #0
	movs r3, #0xa0
	lsls r3, r3, #2
_080C7B44:
	ldrh r1, [r2]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r5
	strh r0, [r2]
	adds r2, #2
	subs r3, #1
	cmp r3, #0
	bne _080C7B44
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C7B78
	.align 2, 0
_080C7B60: .4byte gUnknown_08AA6BFA
_080C7B64: .4byte 0x0000205A
_080C7B68: .4byte gLCDControlBuffer
_080C7B6C: .4byte 0x00007FFF
_080C7B70: .4byte gBG2TilemapBuffer
_080C7B74:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C7B78:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C7B80
sub_80C7B80: @ 0x080C7B80
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	movs r0, #5
	bl BG_EnableSyncByMask
	ldrh r0, [r6, #0x2a]
	cmp r0, #1
	bhi _080C7BA8
	ldr r3, _080C7CD0  @ gUnknown_08AA6BFA
	ldr r0, _080C7CD4  @ 0x00002046
	str r0, [sp]
	movs r0, #1
	movs r1, #0x98
	movs r2, #0x88
	bl RegisterObjectAttributes
_080C7BA8:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x10
	bhi _080C7BEC
	adds r3, r0, #0
	movs r5, #0x10
	str r5, [sp]
	movs r0, #1
	movs r1, #0x78
	movs r2, #0xa0
	bl sub_8012DCC
	ldr r4, _080C7CD8  @ gUnknown_02022188
	strh r0, [r4, #6]
	movs r2, #0x80
	lsls r2, r2, #1
	ldrh r3, [r6, #0x2a]
	str r5, [sp]
	movs r0, #1
	movs r1, #0xe8
	bl sub_8012DCC
	adds r5, r0, #0
	movs r0, #6
	ldrsh r1, [r4, r0]
	adds r1, #0x10
	adds r0, r5, #0
	bl sub_80C7680
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x10
	bne _080C7BEC
	movs r0, #0
	bl SetPrimaryHBlankHandler
_080C7BEC:
	ldrh r2, [r6, #0x2a]
	mov r8, r2
	mov r7, r8
	subs r7, #4
	cmp r7, #0
	blt _080C7CE4
	cmp r7, #0x18
	bgt _080C7C2E
	ldrh r1, [r6, #0x34]
	movs r2, #0xb8
	lsls r2, r2, #1
	movs r0, #0x18
	str r0, [sp]
	movs r0, #1
	adds r3, r7, #0
	bl sub_8012DCC
	adds r5, r0, #0
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r3, #0x30
	ldrsh r1, [r6, r3]
	ldr r2, _080C7CDC  @ gUnknown_02021188
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	movs r2, #1
	str r2, [sp, #8]
	movs r2, #0x88
	movs r3, #2
	bl sub_80C67D4
	strh r5, [r6, #0x30]
_080C7C2E:
	movs r0, #0xb
	negs r0, r0
	add r0, r8
	mov r9, r0
	cmp r0, #0
	blt _080C7CE4
	cmp r7, #0x18
	bne _080C7C5C
	movs r4, #0
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
_080C7C5C:
	cmp r7, #0x17
	ble _080C7C88
	mov r3, r8
	subs r3, #0x1b
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl sub_8012DCC
	adds r5, r0, #0
	lsls r1, r5, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r5
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C7C88:
	ldrh r1, [r6, #0x36]
	movs r2, #0xc0
	lsls r2, r2, #1
	movs r0, #0x18
	str r0, [sp]
	movs r0, #1
	mov r3, r9
	bl sub_8012DCC
	adds r5, r0, #0
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r6, r2]
	ldr r2, _080C7CE0  @ gUnknown_02020188
	str r2, [sp]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r2, r2, r3
	str r2, [sp, #4]
	movs r4, #0
	str r4, [sp, #8]
	movs r2, #0xc8
	movs r3, #0
	bl sub_80C689C
	strh r5, [r6, #0x32]
	mov r0, r9
	cmp r0, #0x18
	bne _080C7CE4
	strh r4, [r6, #0x2a]
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	b _080C7CEA
	.align 2, 0
_080C7CD0: .4byte gUnknown_08AA6BFA
_080C7CD4: .4byte 0x00002046
_080C7CD8: .4byte gUnknown_02022188
_080C7CDC: .4byte gUnknown_02021188
_080C7CE0: .4byte gUnknown_02020188
_080C7CE4:
	ldrh r0, [r6, #0x2a]
	adds r0, #1
	strh r0, [r6, #0x2a]
_080C7CEA:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C7CF8
sub_80C7CF8: @ 0x080C7CF8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	ldrh r0, [r6, #0x2a]
	cmp r0, #6
	bls _080C7D06
	b _080C7F80
_080C7D06:
	lsls r0, r0, #2
	ldr r1, _080C7D10  @ _080C7D14
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080C7D10: .4byte _080C7D14
_080C7D14: @ jump table
	.4byte _080C7D30 @ case 0
	.4byte _080C7DEC @ case 1
	.4byte _080C7E18 @ case 2
	.4byte _080C7E48 @ case 3
	.4byte _080C7E84 @ case 4
	.4byte _080C7EA8 @ case 5
	.4byte _080C7EE4 @ case 6
_080C7D30:
	ldr r2, _080C7DDC  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	movs r1, #0xe8
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundMapDataOffset
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r0, _080C7DE0  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C7DE4  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C7DE8  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #7
	bl BG_EnableSyncByMask
	movs r0, #0
	bl sub_8001F48
	movs r0, #0
	bl sub_8001F64
	movs r0, #1
	movs r1, #8
	movs r2, #8
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	b _080C7F80
	.align 2, 0
_080C7DDC: .4byte gLCDControlBuffer
_080C7DE0: .4byte gBG0TilemapBuffer
_080C7DE4: .4byte gBG1TilemapBuffer
_080C7DE8: .4byte gBG2TilemapBuffer
_080C7DEC:
	ldr r4, _080C7E0C  @ gUnknown_08AC5614
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C7E10  @ gUnknown_08AC8DDC
	ldr r1, _080C7E14  @ gUnknown_02020188
	bl CopyDataWithPossibleUncomp
	b _080C7F80
	.align 2, 0
_080C7E0C: .4byte gUnknown_08AC5614
_080C7E10: .4byte gUnknown_08AC8DDC
_080C7E14: .4byte gUnknown_02020188
_080C7E18:
	ldr r4, _080C7E38  @ gUnknown_08AC7374
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r2, _080C7E3C  @ 0x06002000
	adds r1, r1, r2
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C7E40  @ gUnknown_08AC91F8
	ldr r1, _080C7E44  @ gUnknown_02020988
	bl CopyDataWithPossibleUncomp
	b _080C7F80
	.align 2, 0
_080C7E38: .4byte gUnknown_08AC7374
_080C7E3C: .4byte 0x06002000
_080C7E40: .4byte gUnknown_08AC91F8
_080C7E44: .4byte gUnknown_02020988
_080C7E48:
	ldr r4, _080C7E74  @ gUnknown_08AC1DEC
	movs r0, #2
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C7E78  @ gUnknown_08AC2B24
	ldr r1, _080C7E7C  @ gUnknown_02021188
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C7E80  @ gUnknown_08AC933C
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	b _080C7F80
	.align 2, 0
_080C7E74: .4byte gUnknown_08AC1DEC
_080C7E78: .4byte gUnknown_08AC2B24
_080C7E7C: .4byte gUnknown_02021188
_080C7E80: .4byte gUnknown_08AC933C
_080C7E84:
	ldr r0, _080C7E98  @ gUnknown_08AC4928
	ldr r1, _080C7E9C  @ 0x06008000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C7EA0  @ gUnknown_08AC5420
	ldr r1, _080C7EA4  @ 0x0600C000
	bl CopyDataWithPossibleUncomp
	b _080C7F80
	.align 2, 0
_080C7E98: .4byte gUnknown_08AC4928
_080C7E9C: .4byte 0x06008000
_080C7EA0: .4byte gUnknown_08AC5420
_080C7EA4: .4byte 0x0600C000
_080C7EA8:
	ldr r0, _080C7ED4  @ gUnknown_08AC3BC8
	ldr r1, _080C7ED8  @ 0x0600A000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C7EDC  @ gUnknown_08AC4760
	ldr r4, _080C7EE0  @ 0x0600C800
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	movs r3, #0xa0
	lsls r3, r3, #2
_080C7EC4:
	ldrh r2, [r4]
	adds r0, r1, r2
	strh r0, [r4]
	adds r4, #2
	subs r3, #1
	cmp r3, #0
	bne _080C7EC4
	b _080C7F80
	.align 2, 0
_080C7ED4: .4byte gUnknown_08AC3BC8
_080C7ED8: .4byte 0x0600A000
_080C7EDC: .4byte gUnknown_08AC4760
_080C7EE0: .4byte 0x0600C800
_080C7EE4:
	ldr r0, _080C7F6C  @ gUnknown_02021188
	movs r1, #0x80
	lsls r1, r1, #4
	adds r4, r0, r1
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r4, #0
	bl CpuFastSet
	adds r7, r4, #0
	ldr r5, _080C7F70  @ 0x00000FFF
	movs r2, #0xf0
	lsls r2, r2, #8
	adds r4, r2, #0
	adds r2, r7, #0
	movs r3, #0xa0
	lsls r3, r3, #2
_080C7F06:
	ldrh r1, [r2]
	adds r0, r5, #0
	ands r0, r1
	orrs r0, r4
	strh r0, [r2]
	adds r2, #2
	subs r3, #1
	cmp r3, #0
	bne _080C7F06
	ldr r1, _080C7F74  @ 0x0600F000
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r7, #0
	bl CpuFastSet
	bl EnablePaletteSync
	ldr r2, _080C7F78  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r2, #0
	strh r2, [r6, #0x2a]
	strh r2, [r6, #0x30]
	strh r2, [r6, #0x32]
	ldr r1, _080C7F7C  @ gUnknown_02022188
	movs r0, #0xf0
	strh r0, [r1]
	strh r2, [r1, #2]
	strh r2, [r1, #4]
	movs r0, #0xa0
	strh r0, [r1, #6]
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundTileDataOffset
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	b _080C7F86
	.align 2, 0
_080C7F6C: .4byte gUnknown_02021188
_080C7F70: .4byte 0x00000FFF
_080C7F74: .4byte 0x0600F000
_080C7F78: .4byte gLCDControlBuffer
_080C7F7C: .4byte gUnknown_02022188
_080C7F80:
	ldrh r0, [r6, #0x2a]
	adds r0, #1
	strh r0, [r6, #0x2a]
_080C7F86:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C7F90
sub_80C7F90: @ 0x080C7F90
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r5, r0, #0
	movs r0, #7
	bl BG_EnableSyncByMask
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x10
	bhi _080C807A
	adds r3, r0, #0
	movs r0, #0x10
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x68
	bl sub_8012DCC
	adds r6, r0, #0
	ldrh r0, [r5, #0x2a]
	subs r0, #0xc
	cmp r0, #4
	bhi _080C8038
	lsls r0, r0, #2
	ldr r1, _080C7FCC  @ _080C7FD0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080C7FCC: .4byte _080C7FD0
_080C7FD0: @ jump table
	.4byte _080C7FE4 @ case 0
	.4byte _080C7FF8 @ case 1
	.4byte _080C8018 @ case 2
	.4byte _080C8038 @ case 3
	.4byte _080C8058 @ case 4
_080C7FE4:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	ldr r1, _080C7FF4  @ 0x0600C800
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	str r1, [sp, #8]
	b _080C804A
	.align 2, 0
_080C7FF4: .4byte 0x0600C800
_080C7FF8:
	ldr r0, _080C800C  @ gUnknown_08AC2CB4
	ldr r1, _080C8010  @ 0x06008000
	bl CopyDataWithPossibleUncomp
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	ldr r2, _080C8014  @ 0x0600C800
	b _080C8042
	.align 2, 0
_080C800C: .4byte gUnknown_08AC2CB4
_080C8010: .4byte 0x06008000
_080C8014: .4byte 0x0600C800
_080C8018:
	ldr r0, _080C8030  @ gUnknown_08AC3A2C
	ldr r4, _080C8034  @ 0x0600C000
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	str r4, [sp]
	movs r1, #0
	str r1, [sp, #4]
	str r1, [sp, #8]
	b _080C804A
	.align 2, 0
_080C8030: .4byte gUnknown_08AC3A2C
_080C8034: .4byte 0x0600C000
_080C8038:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	ldr r2, _080C8054  @ 0x0600C000
_080C8042:
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
_080C804A:
	movs r2, #0x98
	movs r3, #2
	bl sub_80C689C
	b _080C8078
	.align 2, 0
_080C8054: .4byte 0x0600C000
_080C8058:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	ldr r1, _080C80E4  @ gUnknown_02021188
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	str r1, [sp, #8]
	movs r2, #0x98
	movs r3, #2
	bl sub_80C689C
	movs r1, #0x80
	lsls r1, r1, #7
	movs r0, #2
	bl SetBackgroundTileDataOffset
_080C8078:
	strh r6, [r5, #0x30]
_080C807A:
	ldrh r0, [r5, #0x2a]
	subs r4, r0, #5
	cmp r4, #0
	blt _080C80EC
	movs r0, #0x10
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0xcc
	adds r3, r4, #0
	bl sub_8012DCC
	adds r6, r0, #0
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r5, r2]
	ldr r7, _080C80E8  @ gUnknown_02020188
	str r7, [sp]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r2, r2, r7
	mov r9, r2
	str r2, [sp, #4]
	movs r2, #1
	str r2, [sp, #8]
	movs r2, #0xc0
	movs r3, #1
	bl sub_80C67D4
	movs r0, #0
	mov r8, r0
	strh r6, [r5, #0x32]
	cmp r4, #0x10
	bne _080C80EC
	movs r1, #0x32
	ldrsh r0, [r5, r1]
	str r7, [sp]
	mov r2, r9
	str r2, [sp, #4]
	mov r1, r8
	str r1, [sp, #8]
	movs r1, #0
	movs r2, #0xc0
	movs r3, #0
	bl sub_80C67D4
	mov r2, r8
	strh r2, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C80F2
	.align 2, 0
_080C80E4: .4byte gUnknown_02021188
_080C80E8: .4byte gUnknown_02020188
_080C80EC:
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
_080C80F2:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8100
sub_80C8100: @ 0x080C8100
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _080C8178  @ sub_80C7844
	bl SetPrimaryHBlankHandler
	ldr r2, _080C817C  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r0, _080C8180  @ gUnknown_02022188
	ldrh r0, [r0]
	adds r1, r2, #0
	adds r1, #0x2d
	movs r4, #0
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x31
	strb r4, [r0]
	subs r1, #1
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	movs r1, #0xf0
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundMapDataOffset
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C8178: .4byte sub_80C7844
_080C817C: .4byte gLCDControlBuffer
_080C8180: .4byte gUnknown_02022188

	THUMB_FUNC_START sub_80C8184
sub_80C8184: @ 0x080C8184
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r3, [r7, #0x2a]
	movs r5, #0x10
	str r5, [sp]
	movs r0, #4
	movs r1, #0xf0
	movs r2, #0
	bl sub_8012DCC
	ldr r4, _080C81FC  @ gUnknown_02022188
	movs r6, #0
	strh r0, [r4]
	ldrh r3, [r7, #0x2a]
	str r5, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0xa0
	bl sub_8012DCC
	strh r0, [r4, #2]
	ldr r2, _080C8200  @ gLCDControlBuffer
	ldrh r0, [r4]
	adds r1, r2, #0
	adds r1, #0x2d
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x31
	strb r6, [r0]
	subs r1, #1
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	movs r1, #0
	ldrsh r0, [r4, r1]
	movs r2, #2
	ldrsh r1, [r4, r2]
	cmp r0, #7
	bgt _080C81DA
	movs r0, #8
_080C81DA:
	cmp r1, #0x88
	ble _080C81E0
	movs r1, #0x88
_080C81E0:
	bl sub_80C7680
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x10
	bne _080C8208
	ldr r0, _080C8204  @ sub_80C78BC
	bl SetPrimaryHBlankHandler
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	b _080C820C
	.align 2, 0
_080C81FC: .4byte gUnknown_02022188
_080C8200: .4byte gLCDControlBuffer
_080C8204: .4byte sub_80C78BC
_080C8208:
	adds r0, #1
	strh r0, [r7, #0x2a]
_080C820C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8214
sub_80C8214: @ 0x080C8214
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r3, [r4, #0x2a]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #4
	movs r1, #0xa0
	movs r2, #0x78
	bl sub_8012DCC
	ldr r1, _080C8260  @ gUnknown_02022188
	strh r0, [r1, #6]
	movs r0, #8
	movs r1, #0x88
	bl sub_80C7680
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xe
	bls _080C824C
	ldr r3, _080C8264  @ gUnknown_08AA6C0E
	ldr r0, _080C8268  @ 0x0000206E
	str r0, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0x88
	bl RegisterObjectAttributes
_080C824C:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne _080C826C
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C8270
	.align 2, 0
_080C8260: .4byte gUnknown_02022188
_080C8264: .4byte gUnknown_08AA6C0E
_080C8268: .4byte 0x0000206E
_080C826C:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C8270:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8278
sub_80C8278: @ 0x080C8278
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #8
	movs r1, #0x88
	bl sub_80C7680
	ldr r3, _080C82A8  @ gUnknown_08AA6C0E
	ldr r0, _080C82AC  @ 0x0000207C
	str r0, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0x88
	bl RegisterObjectAttributes
	ldrh r0, [r5, #0x2a]
	cmp r0, #1
	beq _080C82C8
	cmp r0, #1
	bgt _080C82B0
	cmp r0, #0
	beq _080C82B6
	b _080C82EA
	.align 2, 0
_080C82A8: .4byte gUnknown_08AA6C0E
_080C82AC: .4byte 0x0000207C
_080C82B0:
	cmp r0, #2
	beq _080C82DA
	b _080C82EA
_080C82B6:
	movs r4, #0
_080C82B8:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	bl sub_80C71E4
	adds r4, #1
	cmp r4, #7
	ble _080C82B8
	b _080C82EA
_080C82C8:
	movs r4, #8
_080C82CA:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	bl sub_80C71E4
	adds r4, #1
	cmp r4, #0xf
	ble _080C82CA
	b _080C82EA
_080C82DA:
	movs r4, #0x10
_080C82DC:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	bl sub_80C71E4
	adds r4, #1
	cmp r4, #0x15
	ble _080C82DC
_080C82EA:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x38
	bne _080C8350
	movs r0, #0
	strh r0, [r5, #0x2a]
	ldrh r0, [r5, #0x30]
	strh r0, [r5, #0x34]
	ldrh r0, [r5, #0x32]
	strh r0, [r5, #0x36]
	ldr r2, _080C8344  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r6, _080C8348  @ 0x00007FFF
	movs r0, #0xf0
	lsls r0, r0, #8
	adds r3, r0, #0
	ldr r2, _080C834C  @ gBG2TilemapBuffer
	movs r7, #0
	movs r4, #0xa0
	lsls r4, r4, #2
_080C8328:
	ldrh r1, [r2]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r3
	strh r0, [r2]
	adds r2, #2
	subs r4, #1
	cmp r4, #0
	bne _080C8328
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C8354
	.align 2, 0
_080C8344: .4byte gLCDControlBuffer
_080C8348: .4byte 0x00007FFF
_080C834C: .4byte gBG2TilemapBuffer
_080C8350:
	adds r0, #1
	strh r0, [r5, #0x2a]
_080C8354:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C835C
sub_80C835C: @ 0x080C835C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	movs r0, #5
	bl BG_EnableSyncByMask
	ldrh r0, [r6, #0x2a]
	cmp r0, #1
	bhi _080C8384
	ldr r3, _080C84B0  @ gUnknown_08AA6C0E
	ldr r0, _080C84B4  @ 0x0000206E
	str r0, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0x88
	bl RegisterObjectAttributes
_080C8384:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x10
	bhi _080C83C6
	adds r3, r0, #0
	movs r5, #0x10
	str r5, [sp]
	movs r0, #1
	movs r1, #0x78
	movs r2, #0xa0
	bl sub_8012DCC
	ldr r4, _080C84B8  @ gUnknown_02022188
	strh r0, [r4, #6]
	ldrh r3, [r6, #0x2a]
	str r5, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0
	bl sub_8012DCC
	adds r5, r0, #0
	movs r0, #6
	ldrsh r1, [r4, r0]
	adds r1, #0x10
	adds r0, r5, #0
	bl sub_80C7680
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x10
	bne _080C83C6
	movs r0, #0
	bl SetPrimaryHBlankHandler
_080C83C6:
	ldrh r2, [r6, #0x2a]
	mov r8, r2
	mov r7, r8
	subs r7, #4
	cmp r7, #0
	blt _080C84C4
	cmp r7, #0x18
	bgt _080C8408
	ldrh r1, [r6, #0x34]
	movs r2, #0xac
	lsls r2, r2, #1
	movs r0, #0x18
	str r0, [sp]
	movs r0, #1
	adds r3, r7, #0
	bl sub_8012DCC
	adds r5, r0, #0
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r3, #0x30
	ldrsh r1, [r6, r3]
	ldr r2, _080C84BC  @ gUnknown_02021188
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	movs r2, #1
	str r2, [sp, #8]
	movs r2, #0x98
	movs r3, #2
	bl sub_80C689C
	strh r5, [r6, #0x30]
_080C8408:
	movs r0, #0xb
	negs r0, r0
	add r0, r8
	mov r9, r0
	cmp r0, #0
	blt _080C84C4
	cmp r7, #0x18
	bne _080C8436
	movs r4, #0
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
_080C8436:
	cmp r7, #0x17
	ble _080C8462
	mov r3, r8
	subs r3, #0x1b
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl sub_8012DCC
	adds r5, r0, #0
	lsls r1, r5, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r5
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C8462:
	ldrh r1, [r6, #0x36]
	movs r2, #0xde
	lsls r2, r2, #1
	movs r0, #0x18
	str r0, [sp]
	movs r0, #1
	mov r3, r9
	bl sub_8012DCC
	adds r5, r0, #0
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r6, r2]
	ldr r2, _080C84C0  @ gUnknown_02020188
	str r2, [sp]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r2, r2, r3
	str r2, [sp, #4]
	movs r4, #0
	str r4, [sp, #8]
	movs r2, #0xc0
	movs r3, #0
	bl sub_80C67D4
	strh r5, [r6, #0x32]
	mov r0, r9
	cmp r0, #0x18
	bne _080C84C4
	movs r0, #0
	bl SetPrimaryHBlankHandler
	strh r4, [r6, #0x2a]
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	b _080C84CA
	.align 2, 0
_080C84B0: .4byte gUnknown_08AA6C0E
_080C84B4: .4byte 0x0000206E
_080C84B8: .4byte gUnknown_02022188
_080C84BC: .4byte gUnknown_02021188
_080C84C0: .4byte gUnknown_02020188
_080C84C4:
	ldrh r0, [r6, #0x2a]
	adds r0, #1
	strh r0, [r6, #0x2a]
_080C84CA:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C84D8
sub_80C84D8: @ 0x080C84D8
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	cmp r0, #0
	bne _080C851C
	ldr r2, _080C8544  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #3
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
_080C851C:
	ldrh r3, [r4, #0x2a]
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl sub_8012DCC
	ldr r1, _080C8544  @ gLCDControlBuffer
	adds r1, #0x46
	strb r0, [r1]
	ldrh r0, [r4, #0x2a]
	cmp r0, #8
	bne _080C8548
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C854C
	.align 2, 0
_080C8544: .4byte gLCDControlBuffer
_080C8548:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C854C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8554
sub_80C8554: @ 0x080C8554
	ldr r1, _080C8560  @ gLCDControlBuffer
	ldrh r0, [r1, #0x28]
	adds r0, #2
	strh r0, [r1, #0x28]
	bx lr
	.align 2, 0
_080C8560: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C8564
sub_80C8564: @ 0x080C8564
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x46
	ldrb r0, [r0]
	bl sub_80C72A4
	ldrh r0, [r4, #0x38]
	ldrh r1, [r4, #0x3a]
	bl sub_80C726C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8580
sub_80C8580: @ 0x080C8580
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #3
	movs r1, #8
	movs r2, #8
	movs r3, #0xe
	bl SetSpecialColorEffectsParameters
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	adds r4, #0x4c
	strh r5, [r4]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C85B0
sub_80C85B0: @ 0x080C85B0
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x4c
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r0, #0x28
	str r0, [sp]
	movs r0, #0
	movs r1, #0xe
	movs r2, #0
	bl sub_8012DCC
	adds r3, r0, #0
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #3
	movs r1, #8
	movs r2, #8
	bl SetSpecialColorEffectsParameters
	ldrh r1, [r4]
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, #0x28
	bne _080C85EE
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C85F2
_080C85EE:
	adds r0, r1, #1
	strh r0, [r4]
_080C85F2:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C85FC
sub_80C85FC: @ 0x080C85FC
	push {lr}
	bl SetDefaultColorEffects
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8608
sub_80C8608: @ 0x080C8608
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #3
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	adds r4, #0x4c
	strh r5, [r4]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8638
sub_80C8638: @ 0x080C8638
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x4c
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r0, #0x28
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0xc
	bl sub_8012DCC
	adds r3, r0, #0
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #3
	movs r1, #8
	movs r2, #8
	bl SetSpecialColorEffectsParameters
	ldrh r1, [r4]
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, #0x28
	bne _080C8676
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C867A
_080C8676:
	adds r0, r1, #1
	strh r0, [r4]
_080C867A:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8684
sub_80C8684: @ 0x080C8684
	push {lr}
	bl SetDefaultColorEffects
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8690
sub_80C8690: @ 0x080C8690
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl sub_80C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sub_8012DCC
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x2a]
	subs r0, #1
	cmp r0, #5
	bls _080C86C8
	b _080C8802
_080C86C8:
	lsls r0, r0, #2
	ldr r1, _080C86D4  @ _080C86D8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080C86D4: .4byte _080C86D8
_080C86D8: @ jump table
	.4byte _080C86F0 @ case 0
	.4byte _080C8740 @ case 1
	.4byte _080C876C @ case 2
	.4byte _080C879C @ case 3
	.4byte _080C87CC @ case 4
	.4byte _080C87E0 @ case 5
_080C86F0:
	ldr r4, _080C8730  @ gUnknown_08AB8CCC
	movs r0, #3
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r0, _080C8734  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8738  @ gUnknown_08AB942C
	ldr r4, _080C873C  @ gBG3TilemapBuffer
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	movs r3, #0xe1
	lsls r3, r3, #8
	adds r2, r3, #0
	movs r1, #0xa0
	lsls r1, r1, #2
_080C8718:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne _080C8718
	movs r0, #8
	bl BG_EnableSyncByMask
	b _080C8802
	.align 2, 0
_080C8730: .4byte gUnknown_08AB8CCC
_080C8734: .4byte 0x06002000
_080C8738: .4byte gUnknown_08AB942C
_080C873C: .4byte gBG3TilemapBuffer
_080C8740:
	ldr r4, _080C8760  @ gUnknown_08AC949C
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8764  @ gUnknown_08ACBF58
	ldr r1, _080C8768  @ gUnknown_02020188
	bl CopyDataWithPossibleUncomp
	b _080C8802
	.align 2, 0
_080C8760: .4byte gUnknown_08AC949C
_080C8764: .4byte gUnknown_08ACBF58
_080C8768: .4byte gUnknown_02020188
_080C876C:
	ldr r4, _080C878C  @ gUnknown_08ACAF70
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r3, _080C8790  @ 0x06002000
	adds r1, r1, r3
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8794  @ gUnknown_08ACC340
	ldr r1, _080C8798  @ gUnknown_02020988
	bl CopyDataWithPossibleUncomp
	b _080C8802
	.align 2, 0
_080C878C: .4byte gUnknown_08ACAF70
_080C8790: .4byte 0x06002000
_080C8794: .4byte gUnknown_08ACC340
_080C8798: .4byte gUnknown_02020988
_080C879C:
	ldr r0, _080C87BC  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C87C0  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, _080C87C4  @ 0x0600D800
	ldr r2, _080C87C8  @ 0x01000400
	add r0, sp, #4
	bl CpuFastSet
	b _080C8802
	.align 2, 0
_080C87BC: .4byte gBG0TilemapBuffer
_080C87C0: .4byte gBG1TilemapBuffer
_080C87C4: .4byte 0x0600D800
_080C87C8: .4byte 0x01000400
_080C87CC:
	ldr r0, _080C87D8  @ gUnknown_08AF312C
	ldr r1, _080C87DC  @ 0x06004000
	bl CopyDataWithPossibleUncomp
	b _080C8802
	.align 2, 0
_080C87D8: .4byte gUnknown_08AF312C
_080C87DC: .4byte 0x06004000
_080C87E0:
	ldr r0, _080C8820  @ gUnknown_08AF404C
	ldr r4, _080C8824  @ 0x0600F000
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	movs r0, #0x80
	lsls r0, r0, #8
	adds r2, r0, #0
	movs r1, #0xa0
	lsls r1, r1, #2
_080C87F4:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	subs r1, #1
	adds r4, #2
	cmp r1, #0
	bne _080C87F4
_080C8802:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x28
	bne _080C8830
	ldr r0, _080C8828  @ gUnknown_08AA705C
	bl Proc_DeleteAllWithScript
	ldr r0, _080C882C  @ gUnknown_08AA707C
	bl Proc_DeleteAllWithScript
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C8834
	.align 2, 0
_080C8820: .4byte gUnknown_08AF404C
_080C8824: .4byte 0x0600F000
_080C8828: .4byte gUnknown_08AA705C
_080C882C: .4byte gUnknown_08AA707C
_080C8830:
	adds r0, #1
	strh r0, [r5, #0x2a]
_080C8834:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C883C
sub_80C883C: @ 0x080C883C
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl sub_80C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sub_8012DCC
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x2a]
	cmp r0, #2
	beq _080C88AC
	cmp r0, #2
	bgt _080C887A
	cmp r0, #1
	beq _080C8880
	b _080C88FA
_080C887A:
	cmp r0, #3
	beq _080C88DC
	b _080C88FA
_080C8880:
	ldr r4, _080C88A0  @ gUnknown_08ACC540
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C88A4  @ gUnknown_08ACEED0
	ldr r1, _080C88A8  @ gUnknown_02020188
	bl CopyDataWithPossibleUncomp
	b _080C88FA
	.align 2, 0
_080C88A0: .4byte gUnknown_08ACC540
_080C88A4: .4byte gUnknown_08ACEED0
_080C88A8: .4byte gUnknown_02020188
_080C88AC:
	ldr r4, _080C88CC  @ gUnknown_08ACE0B8
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r0, _080C88D0  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C88D4  @ gUnknown_08ACF200
	ldr r1, _080C88D8  @ gUnknown_02020988
	bl CopyDataWithPossibleUncomp
	b _080C88FA
	.align 2, 0
_080C88CC: .4byte gUnknown_08ACE0B8
_080C88D0: .4byte 0x06002000
_080C88D4: .4byte gUnknown_08ACF200
_080C88D8: .4byte gUnknown_02020988
_080C88DC:
	ldr r0, _080C8914  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C8918  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, _080C891C  @ 0x0600D800
	ldr r2, _080C8920  @ 0x01000400
	add r0, sp, #4
	bl CpuFastSet
_080C88FA:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x28
	bne _080C8928
	ldr r0, _080C8924  @ gUnknown_08AA705C
	bl Proc_DeleteAllWithScript
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C892C
	.align 2, 0
_080C8914: .4byte gBG0TilemapBuffer
_080C8918: .4byte gBG1TilemapBuffer
_080C891C: .4byte 0x0600D800
_080C8920: .4byte 0x01000400
_080C8924: .4byte gUnknown_08AA705C
_080C8928:
	adds r0, #1
	strh r0, [r5, #0x2a]
_080C892C:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8934
sub_80C8934: @ 0x080C8934
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl sub_80C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sub_8012DCC
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x2a]
	cmp r0, #2
	beq _080C89A4
	cmp r0, #2
	bgt _080C8972
	cmp r0, #1
	beq _080C8978
	b _080C89F2
_080C8972:
	cmp r0, #3
	beq _080C89D4
	b _080C89F2
_080C8978:
	ldr r4, _080C8998  @ gUnknown_08ACF474
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C899C  @ gUnknown_08AD206C
	ldr r1, _080C89A0  @ gUnknown_02020188
	bl CopyDataWithPossibleUncomp
	b _080C89F2
	.align 2, 0
_080C8998: .4byte gUnknown_08ACF474
_080C899C: .4byte gUnknown_08AD206C
_080C89A0: .4byte gUnknown_02020188
_080C89A4:
	ldr r4, _080C89C4  @ gUnknown_08AD1048
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r0, _080C89C8  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C89CC  @ gUnknown_08AD236C
	ldr r1, _080C89D0  @ gUnknown_02020988
	bl CopyDataWithPossibleUncomp
	b _080C89F2
	.align 2, 0
_080C89C4: .4byte gUnknown_08AD1048
_080C89C8: .4byte 0x06002000
_080C89CC: .4byte gUnknown_08AD236C
_080C89D0: .4byte gUnknown_02020988
_080C89D4:
	ldr r0, _080C8A04  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C8A08  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, _080C8A0C  @ 0x0600D800
	ldr r2, _080C8A10  @ 0x01000400
	add r0, sp, #4
	bl CpuFastSet
_080C89F2:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x28
	bne _080C8A14
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C8A18
	.align 2, 0
_080C8A04: .4byte gBG0TilemapBuffer
_080C8A08: .4byte gBG1TilemapBuffer
_080C8A0C: .4byte 0x0600D800
_080C8A10: .4byte 0x01000400
_080C8A14:
	adds r0, #1
	strh r0, [r5, #0x2a]
_080C8A18:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8A20
sub_80C8A20: @ 0x080C8A20
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl sub_80C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sub_8012DCC
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x2a]
	cmp r0, #2
	beq _080C8A90
	cmp r0, #2
	bgt _080C8A5E
	cmp r0, #1
	beq _080C8A64
	b _080C8ADE
_080C8A5E:
	cmp r0, #3
	beq _080C8AC0
	b _080C8ADE
_080C8A64:
	ldr r4, _080C8A84  @ gUnknown_08AD2614
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8A88  @ gUnknown_08AD5094
	ldr r1, _080C8A8C  @ gUnknown_02020188
	bl CopyDataWithPossibleUncomp
	b _080C8ADE
	.align 2, 0
_080C8A84: .4byte gUnknown_08AD2614
_080C8A88: .4byte gUnknown_08AD5094
_080C8A8C: .4byte gUnknown_02020188
_080C8A90:
	ldr r4, _080C8AB0  @ gUnknown_08AD423C
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r0, _080C8AB4  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8AB8  @ gUnknown_08AD543C
	ldr r1, _080C8ABC  @ gUnknown_02020988
	bl CopyDataWithPossibleUncomp
	b _080C8ADE
	.align 2, 0
_080C8AB0: .4byte gUnknown_08AD423C
_080C8AB4: .4byte 0x06002000
_080C8AB8: .4byte gUnknown_08AD543C
_080C8ABC: .4byte gUnknown_02020988
_080C8AC0:
	ldr r0, _080C8AF0  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C8AF4  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, _080C8AF8  @ 0x0600D800
	ldr r2, _080C8AFC  @ 0x01000400
	add r0, sp, #4
	bl CpuFastSet
_080C8ADE:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x28
	bne _080C8B00
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C8B04
	.align 2, 0
_080C8AF0: .4byte gBG0TilemapBuffer
_080C8AF4: .4byte gBG1TilemapBuffer
_080C8AF8: .4byte 0x0600D800
_080C8AFC: .4byte 0x01000400
_080C8B00:
	adds r0, #1
	strh r0, [r5, #0x2a]
_080C8B04:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8B0C
sub_80C8B0C: @ 0x080C8B0C
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl sub_80C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sub_8012DCC
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x2a]
	cmp r0, #2
	beq _080C8B7C
	cmp r0, #2
	bgt _080C8B4A
	cmp r0, #1
	beq _080C8B50
	b _080C8BCA
_080C8B4A:
	cmp r0, #3
	beq _080C8BAC
	b _080C8BCA
_080C8B50:
	ldr r4, _080C8B70  @ gUnknown_08AD563C
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8B74  @ gUnknown_08AD8518
	ldr r1, _080C8B78  @ gUnknown_02020188
	bl CopyDataWithPossibleUncomp
	b _080C8BCA
	.align 2, 0
_080C8B70: .4byte gUnknown_08AD563C
_080C8B74: .4byte gUnknown_08AD8518
_080C8B78: .4byte gUnknown_02020188
_080C8B7C:
	ldr r4, _080C8B9C  @ gUnknown_08AD72FC
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r0, _080C8BA0  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8BA4  @ gUnknown_08AD88D4
	ldr r1, _080C8BA8  @ gUnknown_02020988
	bl CopyDataWithPossibleUncomp
	b _080C8BCA
	.align 2, 0
_080C8B9C: .4byte gUnknown_08AD72FC
_080C8BA0: .4byte 0x06002000
_080C8BA4: .4byte gUnknown_08AD88D4
_080C8BA8: .4byte gUnknown_02020988
_080C8BAC:
	ldr r0, _080C8BDC  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C8BE0  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, _080C8BE4  @ 0x0600D800
	ldr r2, _080C8BE8  @ 0x01000400
	add r0, sp, #4
	bl CpuFastSet
_080C8BCA:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x28
	bne _080C8BEC
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C8BF0
	.align 2, 0
_080C8BDC: .4byte gBG0TilemapBuffer
_080C8BE0: .4byte gBG1TilemapBuffer
_080C8BE4: .4byte 0x0600D800
_080C8BE8: .4byte 0x01000400
_080C8BEC:
	adds r0, #1
	strh r0, [r5, #0x2a]
_080C8BF0:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8BF8
sub_80C8BF8: @ 0x080C8BF8
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl sub_80C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sub_8012DCC
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x2a]
	cmp r0, #2
	beq _080C8C68
	cmp r0, #2
	bgt _080C8C36
	cmp r0, #1
	beq _080C8C3C
	b _080C8CB6
_080C8C36:
	cmp r0, #3
	beq _080C8C98
	b _080C8CB6
_080C8C3C:
	ldr r4, _080C8C5C  @ gUnknown_08AD8B08
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8C60  @ gUnknown_08ADB804
	ldr r1, _080C8C64  @ gUnknown_02020188
	bl CopyDataWithPossibleUncomp
	b _080C8CB6
	.align 2, 0
_080C8C5C: .4byte gUnknown_08AD8B08
_080C8C60: .4byte gUnknown_08ADB804
_080C8C64: .4byte gUnknown_02020188
_080C8C68:
	ldr r4, _080C8C88  @ gUnknown_08ADA31C
	movs r0, #0
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r0, _080C8C8C  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8C90  @ gUnknown_08ADBC0C
	ldr r1, _080C8C94  @ gUnknown_02020988
	bl CopyDataWithPossibleUncomp
	b _080C8CB6
	.align 2, 0
_080C8C88: .4byte gUnknown_08ADA31C
_080C8C8C: .4byte 0x06002000
_080C8C90: .4byte gUnknown_08ADBC0C
_080C8C94: .4byte gUnknown_02020988
_080C8C98:
	ldr r0, _080C8CC8  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080C8CCC  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, _080C8CD0  @ 0x0600D800
	ldr r2, _080C8CD4  @ 0x01000400
	add r0, sp, #4
	bl CpuFastSet
_080C8CB6:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x28
	bne _080C8CD8
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080C8CDC
	.align 2, 0
_080C8CC8: .4byte gBG0TilemapBuffer
_080C8CCC: .4byte gBG1TilemapBuffer
_080C8CD0: .4byte 0x0600D800
_080C8CD4: .4byte 0x01000400
_080C8CD8:
	adds r0, #1
	strh r0, [r5, #0x2a]
_080C8CDC:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8CE4
sub_80C8CE4: @ 0x080C8CE4
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x38]
	ldrh r1, [r4, #0x3a]
	bl sub_80C726C
	ldrh r0, [r4, #0x38]
	strh r0, [r4, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r4, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sub_8012DCC
	strh r0, [r4, #0x38]
	ldrh r0, [r4, #0x3c]
	adds r0, #1
	strh r0, [r4, #0x3c]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x28
	bne _080C8D24
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C8D28
_080C8D24:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C8D28:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8D30
sub_80C8D30: @ 0x080C8D30
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r0, [r7, #0x3e]
	movs r1, #0x4c
	bl DivRem
	adds r4, r0, #0
	movs r0, #0x4c
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	adds r3, r4, #0
	bl sub_8012DCC
	adds r4, r0, #0
	cmp r4, #0xc
	bgt _080C8D66
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	b _080C8D78
_080C8D66:
	movs r1, #0x19
	subs r1, r1, r4
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C8D78:
	ldrh r0, [r7, #0x3e]
	adds r0, #1
	strh r0, [r7, #0x3e]
	ldr r0, _080C8DC4  @ gUnknown_08B103D8
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	ldrh r3, [r7, #0x2a]
	movs r0, #0x26
	str r0, [sp]
	movs r0, #0
	movs r1, #0xc
	movs r2, #0
	bl sub_8012DCC
	ldr r5, _080C8DC8  @ gPaletteBuffer
	lsls r6, r0, #0x10
	movs r4, #7
_080C8DA0:
	adds r0, r5, #0
	movs r1, #0
	lsrs r2, r6, #0x10
	bl sub_80C69B0
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _080C8DA0
	ldrh r0, [r7, #0x2a]
	subs r0, #1
	cmp r0, #4
	bhi _080C8EA0
	lsls r0, r0, #2
	ldr r1, _080C8DCC  @ _080C8DD0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080C8DC4: .4byte gUnknown_08B103D8
_080C8DC8: .4byte gPaletteBuffer
_080C8DCC: .4byte _080C8DD0
_080C8DD0: @ jump table
	.4byte _080C8EA0 @ case 0
	.4byte _080C8DE4 @ case 1
	.4byte _080C8E1C @ case 2
	.4byte _080C8E50 @ case 3
	.4byte _080C8E84 @ case 4
_080C8DE4:
	ldr r4, _080C8E18  @ gUnknown_08ADBE78
	movs r1, #0x88
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	movs r1, #0x98
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	movs r1, #0xa8
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	movs r1, #0xb8
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	b _080C8EA0
	.align 2, 0
_080C8E18: .4byte gUnknown_08ADBE78
_080C8E1C:
	ldr r0, _080C8E3C  @ gUnknown_08ADBE98
	ldr r1, _080C8E40  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8E44  @ gUnknown_08ADC708
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C8E48  @ gUnknown_08ADC3C0
	ldr r1, _080C8E4C  @ 0x06010F00
	bl CopyDataWithPossibleUncomp
	b _080C8EA0
	.align 2, 0
_080C8E3C: .4byte gUnknown_08ADBE98
_080C8E40: .4byte 0x06010000
_080C8E44: .4byte gUnknown_08ADC708
_080C8E48: .4byte gUnknown_08ADC3C0
_080C8E4C: .4byte 0x06010F00
_080C8E50:
	ldr r0, _080C8E70  @ gUnknown_08ADC728
	ldr r1, _080C8E74  @ 0x06011E00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8E78  @ gUnknown_08ADD050
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C8E7C  @ gUnknown_08ADCCB8
	ldr r1, _080C8E80  @ 0x06012D00
	bl CopyDataWithPossibleUncomp
	b _080C8EA0
	.align 2, 0
_080C8E70: .4byte gUnknown_08ADC728
_080C8E74: .4byte 0x06011E00
_080C8E78: .4byte gUnknown_08ADD050
_080C8E7C: .4byte gUnknown_08ADCCB8
_080C8E80: .4byte 0x06012D00
_080C8E84:
	ldr r0, _080C8EB4  @ gUnknown_08ADD070
	ldr r1, _080C8EB8  @ 0x06013C00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8EBC  @ gUnknown_08ADDA54
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C8EC0  @ gUnknown_08ADD6EC
	ldr r1, _080C8EC4  @ 0x06014B00
	bl CopyDataWithPossibleUncomp
_080C8EA0:
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x26
	bne _080C8EC8
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	b _080C8ECC
	.align 2, 0
_080C8EB4: .4byte gUnknown_08ADD070
_080C8EB8: .4byte 0x06013C00
_080C8EBC: .4byte gUnknown_08ADDA54
_080C8EC0: .4byte gUnknown_08ADD6EC
_080C8EC4: .4byte 0x06014B00
_080C8EC8:
	adds r0, #1
	strh r0, [r7, #0x2a]
_080C8ECC:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C8ED4
sub_80C8ED4: @ 0x080C8ED4
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #0x12
	bl DivRem
	adds r3, r0, #0
	movs r0, #0x12
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl sub_8012DCC
	adds r3, r0, #0
	cmp r3, #0xc
	bgt _080C8F08
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	b _080C8F1A
_080C8F08:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C8F1A:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq _080C8F6C
	cmp r0, #2
	bgt _080C8F30
	cmp r0, #1
	beq _080C8F3A
	b _080C8FF0
_080C8F30:
	cmp r0, #3
	beq _080C8FA0
	cmp r0, #4
	beq _080C8FD4
	b _080C8FF0
_080C8F3A:
	ldr r0, _080C8F58  @ gUnknown_08ADDA74
	ldr r1, _080C8F5C  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8F60  @ gUnknown_08ADE47C
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C8F64  @ gUnknown_08ADE080
	ldr r1, _080C8F68  @ 0x06010F00
	bl CopyDataWithPossibleUncomp
	b _080C8FF0
	.align 2, 0
_080C8F58: .4byte gUnknown_08ADDA74
_080C8F5C: .4byte 0x06010000
_080C8F60: .4byte gUnknown_08ADE47C
_080C8F64: .4byte gUnknown_08ADE080
_080C8F68: .4byte 0x06010F00
_080C8F6C:
	ldr r0, _080C8F8C  @ gUnknown_08ADEEF4
	ldr r1, _080C8F90  @ 0x06011E00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8F94  @ gUnknown_08ADFA08
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C8F98  @ gUnknown_08ADF58C
	ldr r1, _080C8F9C  @ 0x06012D00
	bl CopyDataWithPossibleUncomp
	b _080C8FF0
	.align 2, 0
_080C8F8C: .4byte gUnknown_08ADEEF4
_080C8F90: .4byte 0x06011E00
_080C8F94: .4byte gUnknown_08ADFA08
_080C8F98: .4byte gUnknown_08ADF58C
_080C8F9C: .4byte 0x06012D00
_080C8FA0:
	ldr r0, _080C8FC0  @ gUnknown_08ADE49C
	ldr r1, _080C8FC4  @ 0x06013C00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C8FC8  @ gUnknown_08ADEED4
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C8FCC  @ gUnknown_08ADEB1C
	ldr r1, _080C8FD0  @ 0x06014B00
	bl CopyDataWithPossibleUncomp
	b _080C8FF0
	.align 2, 0
_080C8FC0: .4byte gUnknown_08ADE49C
_080C8FC4: .4byte 0x06013C00
_080C8FC8: .4byte gUnknown_08ADEED4
_080C8FCC: .4byte gUnknown_08ADEB1C
_080C8FD0: .4byte 0x06014B00
_080C8FD4:
	ldr r0, _080C9004  @ gUnknown_08ADFA28
	ldr r1, _080C9008  @ 0x06015A00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C900C  @ gUnknown_08AE04D4
	movs r1, #0xb0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C9010  @ gUnknown_08AE00E4
	ldr r1, _080C9014  @ 0x06016900
	bl CopyDataWithPossibleUncomp
_080C8FF0:
	ldrh r0, [r4, #0x2a]
	cmp r0, #7
	bne _080C9018
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C901C
	.align 2, 0
_080C9004: .4byte gUnknown_08ADFA28
_080C9008: .4byte 0x06015A00
_080C900C: .4byte gUnknown_08AE04D4
_080C9010: .4byte gUnknown_08AE00E4
_080C9014: .4byte 0x06016900
_080C9018:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C901C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C9024
sub_80C9024: @ 0x080C9024
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #0xe
	bl DivRem
	adds r3, r0, #0
	movs r0, #0xe
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl sub_8012DCC
	adds r3, r0, #0
	cmp r3, #0xc
	bgt _080C9058
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	b _080C906A
_080C9058:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C906A:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #1
	beq _080C907C
	cmp r0, #2
	beq _080C90B0
	b _080C90CC
_080C907C:
	ldr r0, _080C909C  @ gUnknown_08AE04F4
	ldr r1, _080C90A0  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C90A4  @ gUnknown_08AE0D74
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C90A8  @ gUnknown_08AE0A48
	ldr r1, _080C90AC  @ 0x06010F00
	bl CopyDataWithPossibleUncomp
	b _080C90CC
	.align 2, 0
_080C909C: .4byte gUnknown_08AE04F4
_080C90A0: .4byte 0x06010000
_080C90A4: .4byte gUnknown_08AE0D74
_080C90A8: .4byte gUnknown_08AE0A48
_080C90AC: .4byte 0x06010F00
_080C90B0:
	ldr r0, _080C90E0  @ gUnknown_08AE0D94
	ldr r1, _080C90E4  @ 0x06011E00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C90E8  @ gUnknown_08AE1634
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C90EC  @ gUnknown_08AE12BC
	ldr r1, _080C90F0  @ 0x06012D00
	bl CopyDataWithPossibleUncomp
_080C90CC:
	ldrh r0, [r4, #0x2a]
	cmp r0, #8
	bne _080C90F4
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C90F8
	.align 2, 0
_080C90E0: .4byte gUnknown_08AE0D94
_080C90E4: .4byte 0x06011E00
_080C90E8: .4byte gUnknown_08AE1634
_080C90EC: .4byte gUnknown_08AE12BC
_080C90F0: .4byte 0x06012D00
_080C90F4:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C90F8:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C9100
sub_80C9100: @ 0x080C9100
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #0xc
	bl DivRem
	adds r3, r0, #0
	movs r0, #0xc
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl sub_8012DCC
	adds r3, r0, #0
	cmp r3, #0xc
	bgt _080C9134
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	b _080C9146
_080C9134:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C9146:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq _080C9194
	cmp r0, #2
	bgt _080C915C
	cmp r0, #1
	beq _080C9162
	b _080C91E4
_080C915C:
	cmp r0, #3
	beq _080C91C8
	b _080C91E4
_080C9162:
	ldr r0, _080C9180  @ gUnknown_08AE1654
	ldr r1, _080C9184  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9188  @ gUnknown_08AE20C4
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C918C  @ gUnknown_08AE1D00
	ldr r1, _080C9190  @ 0x06010F00
	bl CopyDataWithPossibleUncomp
	b _080C91E4
	.align 2, 0
_080C9180: .4byte gUnknown_08AE1654
_080C9184: .4byte 0x06010000
_080C9188: .4byte gUnknown_08AE20C4
_080C918C: .4byte gUnknown_08AE1D00
_080C9190: .4byte 0x06010F00
_080C9194:
	ldr r0, _080C91B4  @ gUnknown_08AE20E4
	ldr r1, _080C91B8  @ 0x06011E00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C91BC  @ gUnknown_08AE2BF4
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C91C0  @ gUnknown_08AE281C
	ldr r1, _080C91C4  @ 0x06012D00
	bl CopyDataWithPossibleUncomp
	b _080C91E4
	.align 2, 0
_080C91B4: .4byte gUnknown_08AE20E4
_080C91B8: .4byte 0x06011E00
_080C91BC: .4byte gUnknown_08AE2BF4
_080C91C0: .4byte gUnknown_08AE281C
_080C91C4: .4byte 0x06012D00
_080C91C8:
	ldr r0, _080C91F8  @ gUnknown_08AE2C14
	ldr r1, _080C91FC  @ 0x06013C00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9200  @ gUnknown_08AE3734
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C9204  @ gUnknown_08AE33D4
	ldr r1, _080C9208  @ 0x06014B00
	bl CopyDataWithPossibleUncomp
_080C91E4:
	ldrh r0, [r4, #0x2a]
	cmp r0, #9
	bne _080C920C
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C9210
	.align 2, 0
_080C91F8: .4byte gUnknown_08AE2C14
_080C91FC: .4byte 0x06013C00
_080C9200: .4byte gUnknown_08AE3734
_080C9204: .4byte gUnknown_08AE33D4
_080C9208: .4byte 0x06014B00
_080C920C:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C9210:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C9218
sub_80C9218: @ 0x080C9218
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #0xa
	bl DivRem
	adds r3, r0, #0
	movs r0, #0xa
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl sub_8012DCC
	adds r3, r0, #0
	cmp r3, #0xc
	bgt _080C924C
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	b _080C925E
_080C924C:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C925E:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq _080C92AC
	cmp r0, #2
	bgt _080C9274
	cmp r0, #1
	beq _080C927A
	b _080C92FC
_080C9274:
	cmp r0, #3
	beq _080C92E0
	b _080C92FC
_080C927A:
	ldr r0, _080C9298  @ gUnknown_08AE3754
	ldr r1, _080C929C  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C92A0  @ gUnknown_08AE41E4
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C92A4  @ gUnknown_08AE3E54
	ldr r1, _080C92A8  @ 0x06010F00
	bl CopyDataWithPossibleUncomp
	b _080C92FC
	.align 2, 0
_080C9298: .4byte gUnknown_08AE3754
_080C929C: .4byte 0x06010000
_080C92A0: .4byte gUnknown_08AE41E4
_080C92A4: .4byte gUnknown_08AE3E54
_080C92A8: .4byte 0x06010F00
_080C92AC:
	ldr r0, _080C92CC  @ gUnknown_08AE4204
	ldr r1, _080C92D0  @ 0x06011E00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C92D4  @ gUnknown_08AE4CE8
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C92D8  @ gUnknown_08AE4940
	ldr r1, _080C92DC  @ 0x06012D00
	bl CopyDataWithPossibleUncomp
	b _080C92FC
	.align 2, 0
_080C92CC: .4byte gUnknown_08AE4204
_080C92D0: .4byte 0x06011E00
_080C92D4: .4byte gUnknown_08AE4CE8
_080C92D8: .4byte gUnknown_08AE4940
_080C92DC: .4byte 0x06012D00
_080C92E0:
	ldr r0, _080C9310  @ gUnknown_08AE4D08
	ldr r1, _080C9314  @ 0x06013C00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9318  @ gUnknown_08AE5730
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C931C  @ gUnknown_08AE53C8
	ldr r1, _080C9320  @ 0x06014B00
	bl CopyDataWithPossibleUncomp
_080C92FC:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xa
	bne _080C9324
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C9328
	.align 2, 0
_080C9310: .4byte gUnknown_08AE4D08
_080C9314: .4byte 0x06013C00
_080C9318: .4byte gUnknown_08AE5730
_080C931C: .4byte gUnknown_08AE53C8
_080C9320: .4byte 0x06014B00
_080C9324:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C9328:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C9330
sub_80C9330: @ 0x080C9330
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #9
	bl DivRem
	adds r3, r0, #0
	movs r0, #9
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl sub_8012DCC
	adds r3, r0, #0
	cmp r3, #0xc
	bgt _080C9364
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	b _080C9376
_080C9364:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C9376:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #1
	beq _080C9388
	cmp r0, #2
	beq _080C93BC
	b _080C93D8
_080C9388:
	ldr r0, _080C93A8  @ gUnknown_08AE5750
	ldr r1, _080C93AC  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C93B0  @ gUnknown_08AE60B0
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C93B4  @ gUnknown_08AE5D54
	ldr r1, _080C93B8  @ 0x06010F00
	bl CopyDataWithPossibleUncomp
	b _080C93D8
	.align 2, 0
_080C93A8: .4byte gUnknown_08AE5750
_080C93AC: .4byte 0x06010000
_080C93B0: .4byte gUnknown_08AE60B0
_080C93B4: .4byte gUnknown_08AE5D54
_080C93B8: .4byte 0x06010F00
_080C93BC:
	ldr r0, _080C93EC  @ gUnknown_08AE60D0
	ldr r1, _080C93F0  @ 0x06011E00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C93F4  @ gUnknown_08AE69EC
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C93F8  @ gUnknown_08AE6648
	ldr r1, _080C93FC  @ 0x06012D00
	bl CopyDataWithPossibleUncomp
_080C93D8:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xb
	bne _080C9400
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C9404
	.align 2, 0
_080C93EC: .4byte gUnknown_08AE60D0
_080C93F0: .4byte 0x06011E00
_080C93F4: .4byte gUnknown_08AE69EC
_080C93F8: .4byte gUnknown_08AE6648
_080C93FC: .4byte 0x06012D00
_080C9400:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C9404:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C940C
sub_80C940C: @ 0x080C940C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #8
	bl DivRem
	adds r3, r0, #0
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl sub_8012DCC
	adds r3, r0, #0
	cmp r3, #0xc
	bgt _080C9440
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	b _080C9452
_080C9440:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C9452:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq _080C94A4
	cmp r0, #2
	bgt _080C9468
	cmp r0, #1
	beq _080C9472
	b _080C9528
_080C9468:
	cmp r0, #3
	beq _080C94D8
	cmp r0, #4
	beq _080C950C
	b _080C9528
_080C9472:
	ldr r0, _080C9490  @ gUnknown_08AE6A0C
	ldr r1, _080C9494  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9498  @ gUnknown_08AE72C8
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C949C  @ gUnknown_08AE6FA8
	ldr r1, _080C94A0  @ 0x06010F00
	bl CopyDataWithPossibleUncomp
	b _080C9528
	.align 2, 0
_080C9490: .4byte gUnknown_08AE6A0C
_080C9494: .4byte 0x06010000
_080C9498: .4byte gUnknown_08AE72C8
_080C949C: .4byte gUnknown_08AE6FA8
_080C94A0: .4byte 0x06010F00
_080C94A4:
	ldr r0, _080C94C4  @ gUnknown_08AE84DC
	ldr r1, _080C94C8  @ 0x06011E00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C94CC  @ gUnknown_08AE8D84
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C94D0  @ gUnknown_08AE8AB8
	ldr r1, _080C94D4  @ 0x06012D00
	bl CopyDataWithPossibleUncomp
	b _080C9528
	.align 2, 0
_080C94C4: .4byte gUnknown_08AE84DC
_080C94C8: .4byte 0x06011E00
_080C94CC: .4byte gUnknown_08AE8D84
_080C94D0: .4byte gUnknown_08AE8AB8
_080C94D4: .4byte 0x06012D00
_080C94D8:
	ldr r0, _080C94F8  @ gUnknown_08AE72E8
	ldr r1, _080C94FC  @ 0x06013C00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9500  @ gUnknown_08AE7C2C
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C9504  @ gUnknown_08AE78B0
	ldr r1, _080C9508  @ 0x06014B00
	bl CopyDataWithPossibleUncomp
	b _080C9528
	.align 2, 0
_080C94F8: .4byte gUnknown_08AE72E8
_080C94FC: .4byte 0x06013C00
_080C9500: .4byte gUnknown_08AE7C2C
_080C9504: .4byte gUnknown_08AE78B0
_080C9508: .4byte 0x06014B00
_080C950C:
	ldr r0, _080C953C  @ gUnknown_08AE7C4C
	ldr r1, _080C9540  @ 0x06015A00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9544  @ gUnknown_08AE84BC
	movs r1, #0xb0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C9548  @ gUnknown_08AE819C
	ldr r1, _080C954C  @ 0x06016900
	bl CopyDataWithPossibleUncomp
_080C9528:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xc
	bne _080C9550
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C9554
	.align 2, 0
_080C953C: .4byte gUnknown_08AE7C4C
_080C9540: .4byte 0x06015A00
_080C9544: .4byte gUnknown_08AE84BC
_080C9548: .4byte gUnknown_08AE819C
_080C954C: .4byte 0x06016900
_080C9550:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C9554:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C955C
sub_80C955C: @ 0x080C955C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #7
	bl DivRem
	adds r3, r0, #0
	movs r0, #7
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl sub_8012DCC
	adds r3, r0, #0
	cmp r3, #0xc
	bgt _080C9590
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	b _080C95A2
_080C9590:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C95A2:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #1
	beq _080C95B4
	cmp r0, #2
	beq _080C95E8
	b _080C9604
_080C95B4:
	ldr r0, _080C95D4  @ gUnknown_08AE8DA4
	ldr r1, _080C95D8  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C95DC  @ gUnknown_08AE9720
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C95E0  @ gUnknown_08AE9364
	ldr r1, _080C95E4  @ 0x06010F00
	bl CopyDataWithPossibleUncomp
	b _080C9604
	.align 2, 0
_080C95D4: .4byte gUnknown_08AE8DA4
_080C95D8: .4byte 0x06010000
_080C95DC: .4byte gUnknown_08AE9720
_080C95E0: .4byte gUnknown_08AE9364
_080C95E4: .4byte 0x06010F00
_080C95E8:
	ldr r0, _080C9618  @ gUnknown_08AE9740
	ldr r1, _080C961C  @ 0x06011E00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9620  @ gUnknown_08AEA02C
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C9624  @ gUnknown_08AE9CA4
	ldr r1, _080C9628  @ 0x06012D00
	bl CopyDataWithPossibleUncomp
_080C9604:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xd
	bne _080C962C
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C9630
	.align 2, 0
_080C9618: .4byte gUnknown_08AE9740
_080C961C: .4byte 0x06011E00
_080C9620: .4byte gUnknown_08AEA02C
_080C9624: .4byte gUnknown_08AE9CA4
_080C9628: .4byte 0x06012D00
_080C962C:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C9630:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C9638
sub_80C9638: @ 0x080C9638
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #6
	bl DivRem
	adds r3, r0, #0
	movs r0, #6
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl sub_8012DCC
	adds r3, r0, #0
	cmp r3, #0xc
	bgt _080C966C
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	b _080C967E
_080C966C:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C967E:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq _080C96CC
	cmp r0, #2
	bgt _080C9694
	cmp r0, #1
	beq _080C969A
	b _080C971C
_080C9694:
	cmp r0, #3
	beq _080C9700
	b _080C971C
_080C969A:
	ldr r0, _080C96B8  @ gUnknown_08AECAE0
	ldr r1, _080C96BC  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C96C0  @ gUnknown_08AED3E8
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C96C4  @ gUnknown_08AED0A4
	ldr r1, _080C96C8  @ 0x06010F00
	bl CopyDataWithPossibleUncomp
	b _080C971C
	.align 2, 0
_080C96B8: .4byte gUnknown_08AECAE0
_080C96BC: .4byte 0x06010000
_080C96C0: .4byte gUnknown_08AED3E8
_080C96C4: .4byte gUnknown_08AED0A4
_080C96C8: .4byte 0x06010F00
_080C96CC:
	ldr r0, _080C96EC  @ gUnknown_08AED408
	ldr r1, _080C96F0  @ 0x06011E00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C96F4  @ gUnknown_08AEDC80
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C96F8  @ gUnknown_08AED95C
	ldr r1, _080C96FC  @ 0x06012D00
	bl CopyDataWithPossibleUncomp
	b _080C971C
	.align 2, 0
_080C96EC: .4byte gUnknown_08AED408
_080C96F0: .4byte 0x06011E00
_080C96F4: .4byte gUnknown_08AEDC80
_080C96F8: .4byte gUnknown_08AED95C
_080C96FC: .4byte 0x06012D00
_080C9700:
	ldr r0, _080C9730  @ gUnknown_08AEDCA0
	ldr r1, _080C9734  @ 0x06013C00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9738  @ gUnknown_08AEE564
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C973C  @ gUnknown_08AEE218
	ldr r1, _080C9740  @ 0x06014B00
	bl CopyDataWithPossibleUncomp
_080C971C:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xe
	bne _080C9744
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C9748
	.align 2, 0
_080C9730: .4byte gUnknown_08AEDCA0
_080C9734: .4byte 0x06013C00
_080C9738: .4byte gUnknown_08AEE564
_080C973C: .4byte gUnknown_08AEE218
_080C9740: .4byte 0x06014B00
_080C9744:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C9748:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C9750
sub_80C9750: @ 0x080C9750
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #5
	bl DivRem
	adds r3, r0, #0
	movs r0, #5
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl sub_8012DCC
	adds r3, r0, #0
	cmp r3, #0xc
	bgt _080C9784
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	b _080C9796
_080C9784:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C9796:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq _080C97E8
	cmp r0, #2
	bgt _080C97AC
	cmp r0, #1
	beq _080C97B6
	b _080C986C
_080C97AC:
	cmp r0, #3
	beq _080C981C
	cmp r0, #4
	beq _080C9850
	b _080C986C
_080C97B6:
	ldr r0, _080C97D4  @ gUnknown_08AEA04C
	ldr r1, _080C97D8  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C97DC  @ gUnknown_08AEAB50
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C97E0  @ gUnknown_08AEA7A8
	ldr r1, _080C97E4  @ 0x06010F00
	bl CopyDataWithPossibleUncomp
	b _080C986C
	.align 2, 0
_080C97D4: .4byte gUnknown_08AEA04C
_080C97D8: .4byte 0x06010000
_080C97DC: .4byte gUnknown_08AEAB50
_080C97E0: .4byte gUnknown_08AEA7A8
_080C97E4: .4byte 0x06010F00
_080C97E8:
	ldr r0, _080C9808  @ gUnknown_08AEAB70
	ldr r1, _080C980C  @ 0x06011E00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9810  @ gUnknown_08AEB56C
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C9814  @ gUnknown_08AEB1B8
	ldr r1, _080C9818  @ 0x06012D00
	bl CopyDataWithPossibleUncomp
	b _080C986C
	.align 2, 0
_080C9808: .4byte gUnknown_08AEAB70
_080C980C: .4byte 0x06011E00
_080C9810: .4byte gUnknown_08AEB56C
_080C9814: .4byte gUnknown_08AEB1B8
_080C9818: .4byte 0x06012D00
_080C981C:
	ldr r0, _080C983C  @ gUnknown_08AEB58C
	ldr r1, _080C9840  @ 0x06013C00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9844  @ gUnknown_08AEC048
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C9848  @ gUnknown_08AEBCEC
	ldr r1, _080C984C  @ 0x06014B00
	bl CopyDataWithPossibleUncomp
	b _080C986C
	.align 2, 0
_080C983C: .4byte gUnknown_08AEB58C
_080C9840: .4byte 0x06013C00
_080C9844: .4byte gUnknown_08AEC048
_080C9848: .4byte gUnknown_08AEBCEC
_080C984C: .4byte 0x06014B00
_080C9850:
	ldr r0, _080C9880  @ gUnknown_08AEC068
	ldr r1, _080C9884  @ 0x06015A00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9888  @ gUnknown_08AECAC0
	movs r1, #0xb0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C988C  @ gUnknown_08AEC724
	ldr r1, _080C9890  @ 0x06016900
	bl CopyDataWithPossibleUncomp
_080C986C:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xf
	bne _080C9894
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C9898
	.align 2, 0
_080C9880: .4byte gUnknown_08AEC068
_080C9884: .4byte 0x06015A00
_080C9888: .4byte gUnknown_08AECAC0
_080C988C: .4byte gUnknown_08AEC724
_080C9890: .4byte 0x06016900
_080C9894:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C9898:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C98A0
sub_80C98A0: @ 0x080C98A0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #4
	bl DivRem
	adds r3, r0, #0
	movs r0, #4
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl sub_8012DCC
	adds r3, r0, #0
	cmp r3, #0xc
	bgt _080C98D4
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	b _080C98E6
_080C98D4:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C98E6:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq _080C9934
	cmp r0, #2
	bgt _080C98FC
	cmp r0, #1
	beq _080C9902
	b _080C9984
_080C98FC:
	cmp r0, #3
	beq _080C9968
	b _080C9984
_080C9902:
	ldr r0, _080C9920  @ gUnknown_08AEE584
	ldr r1, _080C9924  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9928  @ gUnknown_08AEEECC
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C992C  @ gUnknown_08AEEBB0
	ldr r1, _080C9930  @ 0x06010F00
	bl CopyDataWithPossibleUncomp
	b _080C9984
	.align 2, 0
_080C9920: .4byte gUnknown_08AEE584
_080C9924: .4byte 0x06010000
_080C9928: .4byte gUnknown_08AEEECC
_080C992C: .4byte gUnknown_08AEEBB0
_080C9930: .4byte 0x06010F00
_080C9934:
	ldr r0, _080C9954  @ gUnknown_08AEEEEC
	ldr r1, _080C9958  @ 0x06011E00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C995C  @ gUnknown_08AEF880
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C9960  @ gUnknown_08AEF580
	ldr r1, _080C9964  @ 0x06012D00
	bl CopyDataWithPossibleUncomp
	b _080C9984
	.align 2, 0
_080C9954: .4byte gUnknown_08AEEEEC
_080C9958: .4byte 0x06011E00
_080C995C: .4byte gUnknown_08AEF880
_080C9960: .4byte gUnknown_08AEF580
_080C9964: .4byte 0x06012D00
_080C9968:
	ldr r0, _080C9998  @ gUnknown_08AEF8A0
	ldr r1, _080C999C  @ 0x06013C00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C99A0  @ gUnknown_08AF0130
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C99A4  @ gUnknown_08AEFDC8
	ldr r1, _080C99A8  @ 0x06014B00
	bl CopyDataWithPossibleUncomp
_080C9984:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne _080C99AC
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C99B0
	.align 2, 0
_080C9998: .4byte gUnknown_08AEF8A0
_080C999C: .4byte 0x06013C00
_080C99A0: .4byte gUnknown_08AF0130
_080C99A4: .4byte gUnknown_08AEFDC8
_080C99A8: .4byte 0x06014B00
_080C99AC:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C99B0:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C99B8
sub_80C99B8: @ 0x080C99B8
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #3
	bl DivRem
	adds r3, r0, #0
	movs r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl sub_8012DCC
	adds r3, r0, #0
	cmp r3, #0xc
	bgt _080C99EC
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	b _080C99FE
_080C99EC:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
_080C99FE:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #1
	beq _080C9A10
	cmp r0, #2
	beq _080C9A44
	b _080C9A60
_080C9A10:
	ldr r0, _080C9A30  @ gUnknown_08AF0150
	ldr r1, _080C9A34  @ 0x06010000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9A38  @ gUnknown_08AF0DE8
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C9A3C  @ gUnknown_08AF09E4
	ldr r1, _080C9A40  @ 0x06010F00
	bl CopyDataWithPossibleUncomp
	b _080C9A60
	.align 2, 0
_080C9A30: .4byte gUnknown_08AF0150
_080C9A34: .4byte 0x06010000
_080C9A38: .4byte gUnknown_08AF0DE8
_080C9A3C: .4byte gUnknown_08AF09E4
_080C9A40: .4byte 0x06010F00
_080C9A44:
	ldr r0, _080C9A74  @ gUnknown_08AF0E08
	ldr r1, _080C9A78  @ 0x06011E00
	bl CopyDataWithPossibleUncomp
	ldr r0, _080C9A7C  @ gUnknown_08AF1AC8
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, _080C9A80  @ gUnknown_08AF16CC
	ldr r1, _080C9A84  @ 0x06012D00
	bl CopyDataWithPossibleUncomp
_080C9A60:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x12
	bne _080C9A88
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C9A8C
	.align 2, 0
_080C9A74: .4byte gUnknown_08AF0E08
_080C9A78: .4byte 0x06011E00
_080C9A7C: .4byte gUnknown_08AF1AC8
_080C9A80: .4byte gUnknown_08AF16CC
_080C9A84: .4byte 0x06012D00
_080C9A88:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C9A8C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C9A94
sub_80C9A94: @ 0x080C9A94
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r2, _080C9AEC  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	ldrh r3, [r4, #0x2a]
	movs r0, #0x30
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0xd
	bl sub_8012DCC
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x30
	bne _080C9AF0
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C9AF4
	.align 2, 0
_080C9AEC: .4byte gLCDControlBuffer
_080C9AF0:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C9AF4:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C9AFC
sub_80C9AFC: @ 0x080C9AFC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r3, [r7, #0x2a]
	movs r0, #0x30
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl sub_8012DCC
	adds r4, r0, #0
	ldr r0, _080C9B50  @ gUnknown_08B103D8
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	ldr r5, _080C9B54  @ gPaletteBuffer
	lsls r6, r4, #0x10
	movs r4, #7
_080C9B26:
	adds r0, r5, #0
	ldr r1, _080C9B58  @ 0x00007FFF
	lsrs r2, r6, #0x10
	bl sub_80C69B0
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _080C9B26
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x30
	bne _080C9B60
	ldr r0, _080C9B5C  @ gUnknown_02022188
	movs r2, #0
	ldr r1, _080C9B58  @ 0x00007FFF
	strh r1, [r0, #0xc]
	strh r2, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	b _080C9B64
	.align 2, 0
_080C9B50: .4byte gUnknown_08B103D8
_080C9B54: .4byte gPaletteBuffer
_080C9B58: .4byte 0x00007FFF
_080C9B5C: .4byte gUnknown_02022188
_080C9B60:
	adds r0, #1
	strh r0, [r7, #0x2a]
_080C9B64:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C9B6C
sub_80C9B6C: @ 0x080C9B6C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	ldr r4, _080C9C04  @ gLCDControlBuffer
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	mov r8, r2
	mov r2, r8
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r6, #2
	orrs r1, r6
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	ldrb r0, [r4, #1]
	mov r1, r8
	orrs r0, r1
	orrs r0, r6
	movs r1, #5
	negs r1, r1
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	movs r0, #1
	movs r1, #0
	bl SetBackgroundTileDataOffset
	movs r1, #0xe0
	lsls r1, r1, #8
	movs r0, #1
	bl SetBackgroundMapDataOffset
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080C9C04: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C9C08
sub_80C9C08: @ 0x080C9C08
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C9B6C
	ldr r0, _080C9C54  @ gUnknown_08ACC3E0
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	adds r1, r4, #0
	adds r1, #0x47
	movs r2, #0
	movs r0, #1
	strb r0, [r1]
	ldr r0, _080C9C58  @ gUnknown_02020188
	str r0, [r4, #0x48]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r4, #0x4c]
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0x8c
	lsls r0, r0, #1
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x42
	movs r1, #0xe8
	strh r1, [r0]
	subs r0, #2
	strh r1, [r0]
	strh r2, [r4, #0x30]
	strh r2, [r4, #0x32]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C9C54: .4byte gUnknown_08ACC3E0
_080C9C58: .4byte gUnknown_02020188

	THUMB_FUNC_START sub_80C9C5C
sub_80C9C5C: @ 0x080C9C5C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C9B6C
	ldr r0, _080C9CA4  @ gUnknown_08ACF314
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	adds r0, r4, #0
	adds r0, #0x47
	movs r2, #0
	strb r2, [r0]
	ldr r0, _080C9CA8  @ gUnknown_02020188
	str r0, [r4, #0x48]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r4, #0x4c]
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0xc0
	strh r0, [r1]
	subs r1, #2
	adds r0, #0x80
	strh r0, [r1]
	subs r1, #2
	subs r0, #0x38
	strh r0, [r1]
	strh r2, [r4, #0x30]
	strh r2, [r4, #0x32]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C9CA4: .4byte gUnknown_08ACF314
_080C9CA8: .4byte gUnknown_02020188

	THUMB_FUNC_START sub_80C9CAC
sub_80C9CAC: @ 0x080C9CAC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C9B6C
	ldr r0, _080C9CF4  @ gUnknown_08AD24B4
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	adds r1, r4, #0
	adds r1, #0x47
	movs r2, #0
	movs r0, #1
	strb r0, [r1]
	ldr r0, _080C9CF8  @ gUnknown_02020188
	str r0, [r4, #0x48]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r4, #0x4c]
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0xc0
	strh r0, [r1]
	subs r1, #2
	adds r0, #0x80
	strh r0, [r1]
	subs r1, #2
	subs r0, #0x28
	strh r0, [r1]
	strh r2, [r4, #0x30]
	strh r2, [r4, #0x32]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C9CF4: .4byte gUnknown_08AD24B4
_080C9CF8: .4byte gUnknown_02020188

	THUMB_FUNC_START sub_80C9CFC
sub_80C9CFC: @ 0x080C9CFC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C9B6C
	ldr r0, _080C9D44  @ gUnknown_08AD54DC
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	adds r0, r4, #0
	adds r0, #0x47
	movs r2, #0
	strb r2, [r0]
	ldr r0, _080C9D48  @ gUnknown_02020188
	str r0, [r4, #0x48]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r4, #0x4c]
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0x88
	lsls r0, r0, #1
	strh r0, [r1]
	subs r1, #2
	movs r0, #0xf0
	strh r0, [r1]
	subs r1, #2
	adds r0, #0x18
	strh r0, [r1]
	strh r2, [r4, #0x30]
	strh r2, [r4, #0x32]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C9D44: .4byte gUnknown_08AD54DC
_080C9D48: .4byte gUnknown_02020188

	THUMB_FUNC_START sub_80C9D4C
sub_80C9D4C: @ 0x080C9D4C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C9B6C
	ldr r0, _080C9D98  @ gUnknown_08AD89A8
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	adds r1, r4, #0
	adds r1, #0x47
	movs r2, #0
	movs r0, #1
	strb r0, [r1]
	ldr r0, _080C9D9C  @ gUnknown_02020188
	str r0, [r4, #0x48]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r4, #0x4c]
	adds r0, r4, #0
	adds r0, #0x44
	movs r1, #0xe8
	strh r1, [r0]
	adds r3, r4, #0
	adds r3, #0x42
	movs r0, #0x8c
	lsls r0, r0, #1
	strh r0, [r3]
	adds r0, r4, #0
	adds r0, #0x40
	strh r1, [r0]
	strh r2, [r4, #0x30]
	strh r2, [r4, #0x32]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C9D98: .4byte gUnknown_08AD89A8
_080C9D9C: .4byte gUnknown_02020188

	THUMB_FUNC_START sub_80C9DA0
sub_80C9DA0: @ 0x080C9DA0
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80C9B6C
	ldr r0, _080C9DE8  @ gUnknown_08ADBD18
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	adds r0, r4, #0
	adds r0, #0x47
	movs r2, #0
	strb r2, [r0]
	ldr r0, _080C9DEC  @ gUnknown_02020188
	str r0, [r4, #0x48]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r4, #0x4c]
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0xc8
	strh r0, [r1]
	subs r1, #2
	adds r0, #0x70
	strh r0, [r1]
	subs r1, #2
	subs r0, #0x10
	strh r0, [r1]
	strh r2, [r4, #0x30]
	strh r2, [r4, #0x32]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C9DE8: .4byte gUnknown_08ADBD18
_080C9DEC: .4byte gUnknown_02020188

	THUMB_FUNC_START sub_80C9DF0
sub_80C9DF0: @ 0x080C9DF0
	push {r4, r5, lr}
	sub sp, #4
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	ldr r2, _080C9E68  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r4, #1
	orrs r0, r4
	movs r5, #2
	orrs r0, r5
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldrb r3, [r2, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	orrs r0, r4
	strb r0, [r2, #0xc]
	ldrb r3, [r2, #0x10]
	adds r0, r1, #0
	ands r0, r3
	orrs r0, r5
	strb r0, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	ands r1, r0
	strb r1, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x18]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080C9E68: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C9E6C
sub_80C9E6C: @ 0x080C9E6C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x38]
	ldrh r1, [r4, #0x3a]
	bl sub_80C726C
	ldrh r0, [r4, #0x38]
	strh r0, [r4, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r4, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sub_8012DCC
	strh r0, [r4, #0x38]
	ldrh r0, [r4, #0x3c]
	adds r0, #1
	strh r0, [r4, #0x3c]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bhi _080C9ED8
	adds r3, r0, #0
	movs r0, #0x10
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl sub_8012DCC
	ldr r2, _080C9ED4  @ gLCDControlBuffer
	adds r1, r2, #0
	adds r1, #0x44
	strb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	adds r2, #0x45
	strb r1, [r2]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne _080C9ED8
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C9EDE
	.align 2, 0
_080C9ED4: .4byte gLCDControlBuffer
_080C9ED8:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C9EDE:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C9EE8
sub_80C9EE8: @ 0x080C9EE8
	push {r4, lr}
	sub sp, #4
	ldr r0, _080C9F74  @ gUnknown_08B103D8
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	ldr r3, _080C9F78  @ gLCDControlBuffer
	ldrb r1, [r3, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3, #1]
	ldrb r1, [r3, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r3, #0xc]
	ldrb r1, [r3, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r2, r0
	strb r2, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080C9F74: .4byte gUnknown_08B103D8
_080C9F78: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80C9F7C
sub_80C9F7C: @ 0x080C9F7C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x38]
	ldrh r1, [r4, #0x3a]
	bl sub_80C726C
	ldrh r0, [r4, #0x38]
	strh r0, [r4, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r4, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sub_8012DCC
	strh r0, [r4, #0x38]
	ldrh r0, [r4, #0x3c]
	adds r0, #1
	strh r0, [r4, #0x3c]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bhi _080C9FE8
	adds r3, r0, #0
	movs r0, #0x10
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl sub_8012DCC
	ldr r2, _080C9FE4  @ gLCDControlBuffer
	adds r1, r2, #0
	adds r1, #0x44
	strb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	adds r2, #0x45
	strb r1, [r2]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne _080C9FE8
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080C9FEE
	.align 2, 0
_080C9FE4: .4byte gLCDControlBuffer
_080C9FE8:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
_080C9FEE:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80C9FF8
sub_80C9FF8: @ 0x080C9FF8
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl sub_80C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sub_8012DCC
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	movs r0, #1
	bl BG_EnableSyncByMask
	adds r0, r5, #0
	adds r0, #0x40
	ldrh r2, [r0]
	ldrh r3, [r5, #0x2a]
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	bl sub_8012DCC
	adds r7, r0, #0
	adds r0, r5, #0
	adds r0, #0x47
	ldrb r6, [r0]
	cmp r6, #0
	beq _080CA06E
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	adds r4, r5, #0
	adds r4, #0x44
	movs r3, #0
	ldrsh r2, [r4, r3]
	ldr r3, [r5, #0x48]
	str r3, [sp]
	ldr r3, [r5, #0x4c]
	str r3, [sp, #4]
	movs r3, #0
	str r3, [sp, #8]
	bl sub_80C67D4
	b _080CA08E
_080CA06E:
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	adds r4, r5, #0
	adds r4, #0x44
	movs r3, #0
	ldrsh r2, [r4, r3]
	ldr r3, [r5, #0x48]
	str r3, [sp]
	ldr r3, [r5, #0x4c]
	str r3, [sp, #4]
	str r6, [sp, #8]
	movs r3, #0
	bl sub_80C689C
_080CA08E:
	strh r7, [r5, #0x30]
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x1e
	bne _080CA0FE
	movs r0, #2
	bl BG_EnableSyncByMask
	adds r0, r5, #0
	adds r0, #0x42
	ldrh r0, [r0]
	adds r0, #0xf0
	adds r1, r5, #0
	adds r1, #0x40
	ldrh r1, [r1]
	subs r0, r0, r1
	strh r0, [r5, #0x32]
	adds r0, r5, #0
	adds r0, #0x47
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CA0D6
	movs r1, #0x32
	ldrsh r0, [r5, r1]
	movs r3, #0
	ldrsh r2, [r4, r3]
	ldr r1, [r5, #0x48]
	str r1, [sp]
	ldr r1, [r5, #0x4c]
	str r1, [sp, #4]
	movs r1, #1
	str r1, [sp, #8]
	movs r1, #0
	movs r3, #1
	bl sub_80C689C
	b _080CA0F2
_080CA0D6:
	movs r1, #0x32
	ldrsh r0, [r5, r1]
	movs r3, #0
	ldrsh r2, [r4, r3]
	ldr r1, [r5, #0x48]
	str r1, [sp]
	ldr r1, [r5, #0x4c]
	str r1, [sp, #4]
	movs r1, #1
	str r1, [sp, #8]
	movs r1, #0
	movs r3, #1
	bl sub_80C67D4
_080CA0F2:
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080CA102
_080CA0FE:
	adds r0, #1
	strh r0, [r5, #0x2a]
_080CA102:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CA10C
sub_80CA10C: @ 0x080CA10C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	adds r6, r0, #0
	ldrh r0, [r6, #0x38]
	ldrh r1, [r6, #0x3a]
	bl sub_80C726C
	ldrh r0, [r6, #0x38]
	strh r0, [r6, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r6, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sub_8012DCC
	strh r0, [r6, #0x38]
	ldrh r0, [r6, #0x3c]
	adds r0, #1
	strh r0, [r6, #0x3c]
	ldrh r3, [r6, #0x2a]
	movs r0, #0x28
	str r0, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0
	bl sub_8012DCC
	adds r5, r0, #0
	lsls r1, r5, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r5
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	bl BG_EnableSyncByMask
	adds r0, r6, #0
	adds r0, #0x40
	ldrh r1, [r0]
	adds r2, r1, #0
	adds r2, #0x10
	ldrh r3, [r6, #0x2a]
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #0
	bl sub_8012DCC
	adds r5, r0, #0
	adds r0, r6, #0
	adds r0, #0x47
	ldrb r7, [r0]
	cmp r7, #0
	beq _080CA1AA
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r6, r2]
	adds r4, r6, #0
	adds r4, #0x44
	movs r3, #0
	ldrsh r2, [r4, r3]
	ldr r3, [r6, #0x48]
	str r3, [sp]
	ldr r3, [r6, #0x4c]
	str r3, [sp, #4]
	movs r3, #0
	str r3, [sp, #8]
	bl sub_80C67D4
	b _080CA1CA
_080CA1AA:
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r6, r2]
	adds r4, r6, #0
	adds r4, #0x44
	movs r3, #0
	ldrsh r2, [r4, r3]
	ldr r3, [r6, #0x48]
	str r3, [sp]
	ldr r3, [r6, #0x4c]
	str r3, [sp, #4]
	str r7, [sp, #8]
	movs r3, #0
	bl sub_80C689C
_080CA1CA:
	adds r7, r4, #0
	strh r5, [r6, #0x30]
	movs r0, #2
	bl BG_EnableSyncByMask
	ldrh r3, [r6, #0x2a]
	movs r4, #0x3c
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x60
	bl sub_8012DCC
	adds r5, r0, #0
	ldrh r3, [r6, #0x2a]
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0x60
	bl sub_8012DCC
	adds r1, r6, #0
	adds r1, #0x42
	ldrh r1, [r1]
	adds r1, #0xf0
	adds r2, r6, #0
	adds r2, #0x40
	ldrh r2, [r2]
	subs r1, r1, r2
	adds r1, r1, r5
	adds r5, r1, r0
	adds r0, r6, #0
	adds r0, #0x47
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CA230
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r6, r2]
	movs r3, #0
	ldrsh r2, [r7, r3]
	ldr r3, [r6, #0x48]
	str r3, [sp]
	ldr r3, [r6, #0x4c]
	str r3, [sp, #4]
	movs r3, #1
	str r3, [sp, #8]
	bl sub_80C689C
	b _080CA24C
_080CA230:
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r6, r2]
	movs r3, #0
	ldrsh r2, [r7, r3]
	ldr r3, [r6, #0x48]
	str r3, [sp]
	ldr r3, [r6, #0x4c]
	str r3, [sp, #4]
	movs r3, #1
	str r3, [sp, #8]
	bl sub_80C67D4
_080CA24C:
	strh r5, [r6, #0x32]
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x1e
	bne _080CA260
	movs r0, #0
	strh r0, [r6, #0x2a]
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	b _080CA264
_080CA260:
	adds r0, #1
	strh r0, [r6, #0x2a]
_080CA264:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CA26C
sub_80CA26C: @ 0x080CA26C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	ldrh r0, [r7, #0x2a]
	cmp r0, #0xb
	bne _080CA2E6
	ldr r5, _080CA380  @ gLCDControlBuffer
	ldrb r0, [r5, #1]
	movs r1, #1
	orrs r0, r1
	movs r2, #3
	negs r2, r2
	mov sl, r2
	ands r0, r2
	movs r3, #5
	negs r3, r3
	mov r9, r3
	ands r0, r3
	movs r1, #8
	mov r8, r1
	mov r2, r8
	orrs r0, r2
	movs r6, #0x10
	orrs r0, r6
	strb r0, [r5, #1]
	movs r4, #0
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	ldrb r0, [r5, #1]
	movs r3, #1
	orrs r0, r3
	mov r1, sl
	ands r0, r1
	mov r2, r9
	ands r0, r2
	mov r3, r8
	orrs r0, r3
	orrs r0, r6
	strb r0, [r5, #1]
_080CA2E6:
	ldrh r0, [r7, #0x2a]
	cmp r0, #0xa
	bhi _080CA3A6
	adds r3, r0, #0
	adds r3, #0x1e
	movs r0, #0x28
	str r0, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0
	bl sub_8012DCC
	adds r4, r0, #0
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r4
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	movs r0, #2
	bl BG_EnableSyncByMask
	ldrh r3, [r7, #0x2a]
	adds r3, #0x1e
	movs r4, #0x3c
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x60
	bl sub_8012DCC
	adds r5, r0, #0
	ldrh r3, [r7, #0x2a]
	adds r3, #0x1e
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0x60
	bl sub_8012DCC
	adds r1, r7, #0
	adds r1, #0x42
	ldrh r1, [r1]
	adds r1, #0xf0
	adds r2, r7, #0
	adds r2, #0x40
	ldrh r2, [r2]
	subs r1, r1, r2
	adds r1, r1, r5
	adds r4, r1, r0
	adds r0, r7, #0
	adds r0, #0x47
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CA384
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r7, r2]
	adds r2, r7, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	ldr r3, [r7, #0x48]
	str r3, [sp]
	ldr r3, [r7, #0x4c]
	str r3, [sp, #4]
	movs r3, #1
	str r3, [sp, #8]
	bl sub_80C689C
	b _080CA3A4
	.align 2, 0
_080CA380: .4byte gLCDControlBuffer
_080CA384:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r7, r2]
	adds r2, r7, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	ldr r3, [r7, #0x48]
	str r3, [sp]
	ldr r3, [r7, #0x4c]
	str r3, [sp, #4]
	movs r3, #1
	str r3, [sp, #8]
	bl sub_80C67D4
_080CA3A4:
	strh r4, [r7, #0x32]
_080CA3A6:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CA3B8
sub_80CA3B8: @ 0x080CA3B8
	push {r4, r5, r6, lr}
	sub sp, #0xc
	adds r4, r0, #0
	bl sub_80CA26C
	ldrh r0, [r4, #0x38]
	ldrh r1, [r4, #0x3a]
	bl sub_80C726C
	ldrh r0, [r4, #0x38]
	strh r0, [r4, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r4, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl sub_8012DCC
	strh r0, [r4, #0x38]
	ldrh r0, [r4, #0x3c]
	adds r0, #1
	strh r0, [r4, #0x3c]
	ldrh r0, [r4, #0x2a]
	adds r3, r0, #0
	subs r3, #0xf
	cmp r3, #0
	blt _080CA412
	movs r0, #0xf
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl sub_8012DCC
	ldr r2, _080CA460  @ gLCDControlBuffer
	adds r1, r2, #0
	adds r1, #0x44
	strb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	adds r2, #0x45
	strb r1, [r2]
_080CA412:
	movs r0, #1
	bl BG_EnableSyncByMask
	adds r0, r4, #0
	adds r0, #0x40
	ldrh r2, [r0]
	adds r1, r2, #0
	adds r1, #0x10
	lsls r2, r2, #1
	adds r2, #0x10
	ldrh r3, [r4, #0x2a]
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #1
	bl sub_8012DCC
	adds r6, r0, #0
	adds r0, r4, #0
	adds r0, #0x47
	ldrb r5, [r0]
	cmp r5, #0
	beq _080CA464
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r4, r2]
	adds r2, r4, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	ldr r3, [r4, #0x48]
	str r3, [sp]
	ldr r3, [r4, #0x4c]
	str r3, [sp, #4]
	movs r3, #0
	str r3, [sp, #8]
	bl sub_80C67D4
	b _080CA484
	.align 2, 0
_080CA460: .4byte gLCDControlBuffer
_080CA464:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r4, r2]
	adds r2, r4, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	ldr r3, [r4, #0x48]
	str r3, [sp]
	ldr r3, [r4, #0x4c]
	str r3, [sp, #4]
	str r5, [sp, #8]
	movs r3, #0
	bl sub_80C689C
_080CA484:
	strh r6, [r4, #0x30]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x1e
	bne _080CA498
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
	b _080CA49C
_080CA498:
	adds r0, #1
	strh r0, [r4, #0x2a]
_080CA49C:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CA4A4
sub_80CA4A4: @ 0x080CA4A4
	push {lr}
	ldr r0, _080CA4D4  @ gUnknown_08AA707C
	bl Proc_DeleteAllWithScript
	ldr r2, _080CA4D8  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bl SetDefaultColorEffects
	pop {r0}
	bx r0
	.align 2, 0
_080CA4D4: .4byte gUnknown_08AA707C
_080CA4D8: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80CA4DC
sub_80CA4DC: @ 0x080CA4DC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	ldrh r0, [r6, #0x2a]
	cmp r0, #4
	bhi _080CA53E
	lsls r0, r0, #2
	ldr r1, _080CA4F4  @ _080CA4F8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080CA4F4: .4byte _080CA4F8
_080CA4F8: @ jump table
	.4byte _080CA53E @ case 0
	.4byte _080CA50C @ case 1
	.4byte _080CA51A @ case 2
	.4byte _080CA528 @ case 3
	.4byte _080CA536 @ case 4
_080CA50C:
	movs r0, #0xd8
	lsls r0, r0, #1
	movs r1, #0xc4
	lsls r1, r1, #1
	bl sub_80C726C
	b _080CA53E
_080CA51A:
	movs r0, #0xf8
	lsls r0, r0, #1
	movs r1, #0xd8
	lsls r1, r1, #1
	bl sub_80C726C
	b _080CA53E
_080CA528:
	movs r0, #0x8c
	lsls r0, r0, #2
	movs r1, #0xf8
	lsls r1, r1, #1
	bl sub_80C726C
	b _080CA53E
_080CA536:
	movs r0, #0x8c
	lsls r0, r0, #2
	strh r0, [r6, #0x3a]
	strh r0, [r6, #0x38]
_080CA53E:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x8e
	bls _080CA550
	movs r0, #0xae
	movs r1, #0xa
	movs r2, #4
	movs r3, #9
	bl sub_80C6474
_080CA550:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x8d
	bls _080CA562
	movs r0, #0x38
	movs r1, #0x28
	movs r2, #4
	movs r3, #7
	bl sub_80C6474
_080CA562:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x8c
	bls _080CA574
	movs r0, #0x9c
	movs r1, #0x3a
	movs r2, #3
	movs r3, #3
	bl sub_80C6474
_080CA574:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x8b
	bls _080CA586
	movs r0, #0x22
	movs r1, #0
	movs r2, #4
	movs r3, #1
	bl sub_80C6474
_080CA586:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x8a
	bls _080CA598
	movs r0, #0xd2
	movs r1, #0x10
	movs r2, #4
	movs r3, #5
	bl sub_80C6474
_080CA598:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x89
	bls _080CA5AA
	movs r0, #0xc
	movs r1, #0x1a
	movs r2, #3
	movs r3, #1
	bl sub_80C6474
_080CA5AA:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x88
	bls _080CA5BC
	movs r0, #0xcc
	movs r1, #0x2a
	movs r2, #3
	movs r3, #4
	bl sub_80C6474
_080CA5BC:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x87
	bls _080CA5CE
	movs r0, #0x60
	movs r1, #0
	movs r2, #4
	movs r3, #0
	bl sub_80C6474
_080CA5CE:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x86
	bls _080CA5E0
	movs r0, #0xe4
	movs r1, #0x10
	movs r2, #4
	movs r3, #0xb
	bl sub_80C6474
_080CA5E0:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x85
	bls _080CA5F2
	movs r0, #0x58
	movs r1, #0x1e
	movs r2, #3
	movs r3, #3
	bl sub_80C6474
_080CA5F2:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x84
	bls _080CA604
	movs r0, #0x54
	movs r1, #0x2e
	movs r2, #2
	movs r3, #1
	bl sub_80C6474
_080CA604:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x83
	bls _080CA616
	movs r0, #0
	movs r1, #2
	movs r2, #4
	movs r3, #2
	bl sub_80C6474
_080CA616:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x82
	bls _080CA628
	movs r0, #0xc6
	movs r1, #0x18
	movs r2, #4
	movs r3, #9
	bl sub_80C6474
_080CA628:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x81
	bls _080CA63A
	movs r0, #0x90
	movs r1, #0x22
	movs r2, #3
	movs r3, #5
	bl sub_80C6474
_080CA63A:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x80
	bls _080CA64C
	movs r0, #0xa8
	movs r1, #0x44
	movs r2, #2
	movs r3, #0
	bl sub_80C6474
_080CA64C:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x7f
	bls _080CA65E
	movs r0, #0xca
	movs r1, #2
	movs r2, #4
	movs r3, #7
	bl sub_80C6474
_080CA65E:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x7e
	bls _080CA670
	movs r0, #0x26
	movs r1, #0x18
	movs r2, #4
	movs r3, #2
	bl sub_80C6474
_080CA670:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x7d
	bls _080CA682
	movs r0, #0x80
	movs r1, #0x26
	movs r2, #3
	movs r3, #0
	bl sub_80C6474
_080CA682:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x7b
	bls _080CA694
	movs r0, #0x80
	movs r1, #0x32
	movs r2, #2
	movs r3, #5
	bl sub_80C6474
_080CA694:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x79
	bls _080CA6A6
	movs r0, #0x86
	movs r1, #6
	movs r2, #4
	movs r3, #0
	bl sub_80C6474
_080CA6A6:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x77
	bls _080CA6B8
	movs r0, #0x98
	movs r1, #0x16
	movs r2, #4
	movs r3, #1
	bl sub_80C6474
_080CA6B8:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x75
	bls _080CA6CA
	movs r0, #0xe8
	movs r1, #0x16
	movs r2, #3
	movs r3, #3
	bl sub_80C6474
_080CA6CA:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x73
	bls _080CA6DC
	movs r0, #0x64
	movs r1, #0x48
	movs r2, #2
	movs r3, #1
	bl sub_80C6474
_080CA6DC:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x71
	bls _080CA6EE
	movs r0, #0x70
	movs r1, #6
	movs r2, #4
	movs r3, #0xa
	bl sub_80C6474
_080CA6EE:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x6f
	bls _080CA700
	movs r0, #0x40
	movs r1, #0x14
	movs r2, #4
	movs r3, #8
	bl sub_80C6474
_080CA700:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x6d
	bls _080CA712
	movs r0, #0
	movs r1, #0x2e
	movs r2, #3
	movs r3, #4
	bl sub_80C6474
_080CA712:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x6b
	bls _080CA724
	movs r0, #0x2c
	movs r1, #0x4a
	movs r2, #2
	movs r3, #4
	bl sub_80C6474
_080CA724:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x69
	bls _080CA736
	movs r0, #0x40
	movs r1, #8
	movs r2, #4
	movs r3, #6
	bl sub_80C6474
_080CA736:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x67
	bls _080CA748
	movs r0, #0x78
	movs r1, #0x1a
	movs r2, #4
	movs r3, #2
	bl sub_80C6474
_080CA748:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x65
	bls _080CA75A
	movs r0, #0x24
	movs r1, #0x32
	movs r2, #3
	movs r3, #2
	bl sub_80C6474
_080CA75A:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x62
	bls _080CA76C
	movs r0, #0xe
	movs r1, #0x4e
	movs r2, #2
	movs r3, #0
	bl sub_80C6474
_080CA76C:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x5f
	bls _080CA77E
	movs r0, #0x16
	movs r1, #0xa
	movs r2, #4
	movs r3, #4
	bl sub_80C6474
_080CA77E:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x5c
	bls _080CA790
	movs r0, #0xb4
	movs r1, #0x28
	movs r2, #4
	movs r3, #1
	bl sub_80C6474
_080CA790:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x59
	bls _080CA7A2
	movs r0, #0x42
	movs r1, #0x36
	movs r2, #3
	movs r3, #1
	bl sub_80C6474
_080CA7A2:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x55
	bls _080CA7B4
	movs r0, #0xdc
	movs r1, #0x32
	movs r2, #2
	movs r3, #2
	bl sub_80C6474
_080CA7B4:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x51
	bls _080CA7C6
	movs r0, #0xc8
	movs r1, #0x48
	movs r2, #1
	movs r3, #0
	bl sub_80C6474
_080CA7C6:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x4c
	bls _080CA7D8
	movs r0, #0x38
	movs r1, #0x28
	movs r2, #4
	movs r3, #0
	bl sub_80C6474
_080CA7D8:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x47
	bls _080CA7EA
	movs r0, #0x8c
	movs r1, #0x54
	movs r2, #1
	movs r3, #2
	bl sub_80C6474
_080CA7EA:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x41
	bls _080CA7FC
	movs r0, #0x10
	movs r1, #0x64
	movs r2, #1
	movs r3, #1
	bl sub_80C6474
_080CA7FC:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x37
	bls _080CA80E
	movs r0, #0
	movs r1, #0x7e
	movs r2, #0
	movs r3, #1
	bl sub_80C6474
_080CA80E:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x31
	bls _080CA820
	movs r0, #0xa0
	movs r1, #0x78
	movs r2, #0
	movs r3, #2
	bl sub_80C6474
_080CA820:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x1d
	bls _080CA832
	movs r0, #0x58
	movs r1, #0x70
	movs r2, #0
	movs r3, #0
	bl sub_80C6474
_080CA832:
	ldrh r0, [r6, #0x2a]
	adds r4, r0, #0
	subs r4, #0x52
	cmp r4, #0
	bne _080CA870
	ldr r2, _080CA914  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundTileDataOffset
	movs r1, #0xe8
	lsls r1, r1, #8
	movs r0, #2
	bl SetBackgroundMapDataOffset
_080CA870:
	cmp r4, #0x5f
	bhi _080CA8A8
	ldr r0, _080CA918  @ gUnknown_08B103D8
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	movs r0, #0x5f
	str r0, [sp]
	movs r0, #4
	movs r1, #0x10
	movs r2, #0xc
	adds r3, r4, #0
	bl sub_8012DCC
	ldr r5, _080CA91C  @ gPaletteBuffer
	lsls r7, r0, #0x10
	movs r4, #7
_080CA896:
	adds r0, r5, #0
	movs r1, #0
	lsrs r2, r7, #0x10
	bl sub_80C69B0
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge _080CA896
_080CA8A8:
	ldrh r0, [r6, #0x2a]
	adds r4, r0, #0
	subs r4, #0xb1
	cmp r4, #0
	bne _080CA8DC
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001F0C
_080CA8DC:
	cmp r4, #0x20
	bhi _080CA900
	movs r0, #0x20
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	adds r3, r4, #0
	bl sub_8012DCC
	ldr r2, _080CA914  @ gLCDControlBuffer
	adds r1, r2, #0
	adds r1, #0x44
	strb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	adds r2, #0x45
	strb r1, [r2]
_080CA900:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0xd1
	bne _080CA920
	movs r0, #0
	strh r0, [r6, #0x2a]
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	b _080CA924
	.align 2, 0
_080CA914: .4byte gLCDControlBuffer
_080CA918: .4byte gUnknown_08B103D8
_080CA91C: .4byte gPaletteBuffer
_080CA920:
	adds r0, #1
	strh r0, [r6, #0x2a]
_080CA924:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CA92C
sub_80CA92C: @ 0x080CA92C
	push {r4, lr}
	adds r4, r0, #0
	bl SetDefaultColorEffects
	adds r4, #0x46
	movs r0, #1
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CA940
sub_80CA940: @ 0x080CA940
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #4
	ldr r0, _080CA9F0  @ gUnknown_08AA707C
	bl Proc_DeleteAllWithScript
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r3, _080CA9F4  @ gLCDControlBuffer
	ldrb r1, [r3, #1]
	movs r2, #2
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r5, #3
	negs r5, r5
	ands r0, r5
	movs r1, #4
	mov r8, r1
	mov r1, r8
	orrs r0, r1
	movs r4, #9
	negs r4, r4
	ands r0, r4
	movs r6, #0x10
	orrs r0, r6
	movs r1, #0x21
	negs r1, r1
	mov r9, r1
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r3, #1]
	movs r0, #0x37
	adds r0, r0, r3
	mov ip, r0
	ldrb r1, [r0]
	adds r0, r2, #0
	ands r0, r1
	ands r0, r5
	mov r1, r8
	orrs r0, r1
	ands r0, r4
	orrs r0, r6
	adds r3, #0x36
	ldrb r1, [r3]
	ands r2, r1
	ands r2, r5
	movs r1, #5
	negs r1, r1
	ands r2, r1
	ands r2, r4
	subs r1, #0xc
	ands r2, r1
	movs r1, #0x20
	orrs r0, r1
	mov r1, ip
	strb r0, [r1]
	mov r0, r9
	ands r2, r0
	strb r2, [r3]
	movs r0, #1
	movs r1, #4
	movs r2, #8
	movs r3, #8
	bl SetSpecialColorEffectsParameters
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080CA9F0: .4byte gUnknown_08AA707C
_080CA9F4: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80CA9F8
sub_80CA9F8: @ 0x080CA9F8
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, r1, #0
	subs r2, r3, r2
	movs r5, #0x10
	subs r3, r5, r2
	cmp r3, #0
	bge _080CAA14
	ldr r0, _080CAA10  @ 0x0000FFFF
	b _080CAA2E
	.align 2, 0
_080CAA10: .4byte 0x0000FFFF
_080CAA14:
	cmp r3, #0xf
	bgt _080CAA2C
	lsls r1, r0, #4
	subs r1, r1, r0
	lsls r1, r1, #4
	adds r1, r4, r1
	str r5, [sp]
	movs r0, #4
	adds r2, r4, #0
	bl sub_8012DCC
	b _080CAA2E
_080CAA2C:
	adds r0, r4, #0
_080CAA2E:
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CAA38
sub_80CAA38: @ 0x080CAA38
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r9, r0
	ldrh r0, [r0, #0x2a]
	adds r2, r0, #0
	adds r2, #0xa
	movs r0, #0x78
	movs r1, #1
	negs r1, r1
	movs r3, #0x14
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CAB60  @ 0x0000FFFF
	mov sl, r0
	cmp r7, sl
	beq _080CAAA2
	adds r4, r7, #0
	subs r4, #0x30
	ldr r5, _080CAB64  @ 0x000001FF
	ands r4, r5
	ldr r6, _080CAB68  @ gUnknown_08AA709C
	movs r1, #0
	mov r8, r1
	str r1, [sp]
	movs r0, #1
	adds r1, r4, #0
	movs r2, #0xec
	adds r3, r6, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x2c
	ands r1, r5
	ldr r2, _080CAB6C  @ 0x000004EC
	ldr r0, _080CAB70  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r3, r6, #0
	bl RegisterObjectAttributes
	ldr r2, _080CAB74  @ 0x00000804
	ldr r3, _080CAB78  @ gUnknown_08AA70BC
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	bl RegisterObjectAttributes
_080CAAA2:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	adds r2, r0, #6
	movs r0, #0x78
	movs r1, #1
	negs r1, r1
	movs r3, #0x14
	bl sub_80CA9F8
	adds r7, r0, #0
	cmp r7, sl
	beq _080CAAF8
	adds r4, r7, #0
	subs r4, #0x30
	ldr r5, _080CAB64  @ 0x000001FF
	ands r4, r5
	ldr r6, _080CAB68  @ gUnknown_08AA709C
	ldr r0, _080CAB7C  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	adds r1, r4, #0
	movs r2, #0x20
	adds r3, r6, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x2c
	ands r1, r5
	movs r2, #0x84
	lsls r2, r2, #3
	ldr r0, _080CAB80  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r3, r6, #0
	bl RegisterObjectAttributes
	ldr r2, _080CAB84  @ 0x00000838
	ldr r3, _080CAB78  @ gUnknown_08AA70BC
	movs r0, #0
	str r0, [sp]
	adds r1, r4, #0
	bl RegisterObjectAttributes
_080CAAF8:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	adds r2, r0, #2
	movs r0, #0x78
	movs r1, #1
	negs r1, r1
	movs r3, #0x14
	bl sub_80CA9F8
	adds r7, r0, #0
	cmp r7, sl
	beq _080CAB4C
	adds r4, r7, #0
	subs r4, #0x30
	ldr r5, _080CAB64  @ 0x000001FF
	ands r4, r5
	ldr r6, _080CAB68  @ gUnknown_08AA709C
	ldr r0, _080CAB88  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	adds r1, r4, #0
	movs r2, #0x54
	adds r3, r6, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x2c
	ands r1, r5
	ldr r2, _080CAB8C  @ 0x00000454
	ldr r0, _080CAB90  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	adds r3, r6, #0
	bl RegisterObjectAttributes
	ldr r2, _080CAB94  @ 0x0000086C
	ldr r3, _080CAB78  @ gUnknown_08AA70BC
	movs r0, #0
	str r0, [sp]
	adds r1, r4, #0
	bl RegisterObjectAttributes
_080CAB4C:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	cmp r0, #0x14
	bne _080CAB98
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, r9
	bl Proc_ClearNativeCallback
	b _080CAB9E
	.align 2, 0
_080CAB60: .4byte 0x0000FFFF
_080CAB64: .4byte 0x000001FF
_080CAB68: .4byte gUnknown_08AA709C
_080CAB6C: .4byte 0x000004EC
_080CAB70: .4byte 0x00001078
_080CAB74: .4byte 0x00000804
_080CAB78: .4byte gUnknown_08AA70BC
_080CAB7C: .4byte 0x000020F0
_080CAB80: .4byte 0x00003168
_080CAB84: .4byte 0x00000838
_080CAB88: .4byte 0x000041E0
_080CAB8C: .4byte 0x00000454
_080CAB90: .4byte 0x00005258
_080CAB94: .4byte 0x0000086C
_080CAB98:
	adds r0, #1
	mov r1, r9
	strh r0, [r1, #0x2a]
_080CAB9E:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CABB0
sub_80CABB0: @ 0x080CABB0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	str r0, [sp, #4]
	ldrh r4, [r0, #0x2a]
	adds r4, #2
	movs r5, #1
	negs r5, r5
	movs r0, #0x42
	adds r1, r5, #0
	adds r2, r4, #0
	movs r3, #0x12
	bl sub_80CA9F8
	mov sl, r0
	movs r0, #0x2a
	adds r1, r5, #0
	adds r2, r4, #0
	movs r3, #0x12
	bl sub_80CA9F8
	adds r7, r0, #0
	movs r0, #0xae
	movs r1, #1
	adds r2, r4, #0
	movs r3, #0x12
	bl sub_80CA9F8
	str r0, [sp, #8]
	movs r0, #0x76
	movs r1, #1
	adds r2, r4, #0
	movs r3, #0x12
	bl sub_80CA9F8
	str r0, [sp, #0xc]
	ldr r0, _080CADDC  @ 0x0000FFFF
	cmp sl, r0
	beq _080CACE0
	cmp r7, r0
	beq _080CAC6E
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CAC6E
	cmp r7, #0xc8
	bgt _080CAC6E
	mov r5, sl
	subs r5, #0x30
	ldr r6, _080CADE0  @ 0x000001FF
	ands r5, r6
	adds r4, r7, #0
	subs r4, #0x28
	movs r0, #0xff
	mov r9, r0
	ands r4, r0
	ldr r1, _080CADE4  @ gUnknown_08AA709C
	mov r8, r1
	movs r0, #0
	str r0, [sp]
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	mov r3, r8
	bl RegisterObjectAttributes
	mov r1, sl
	subs r1, #0x2c
	ands r1, r6
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, _080CADE8  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	mov r3, r8
	bl RegisterObjectAttributes
	adds r2, r7, #0
	subs r2, #0x20
	mov r1, r9
	ands r2, r1
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, _080CADEC  @ gUnknown_08AA70DC
	movs r0, #0
	str r0, [sp]
	adds r1, r5, #0
	bl RegisterObjectAttributes
_080CAC6E:
	ldr r0, _080CADDC  @ 0x0000FFFF
	cmp sl, r0
	beq _080CACE0
	ldr r1, [sp, #0xc]
	cmp r1, r0
	beq _080CACE0
	movs r0, #0x28
	negs r0, r0
	cmp r1, r0
	blt _080CACE0
	cmp r1, #0xc8
	bgt _080CACE0
	mov r5, sl
	subs r5, #0x30
	ldr r6, _080CADE0  @ 0x000001FF
	ands r5, r6
	adds r4, r1, #0
	subs r4, #0x28
	movs r0, #0xff
	mov r9, r0
	ands r4, r0
	ldr r1, _080CADE4  @ gUnknown_08AA709C
	mov r8, r1
	ldr r0, _080CADF0  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	mov r3, r8
	bl RegisterObjectAttributes
	mov r1, sl
	subs r1, #0x2c
	ands r1, r6
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, _080CADF4  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	mov r3, r8
	bl RegisterObjectAttributes
	ldr r2, [sp, #0xc]
	subs r2, #0x20
	mov r0, r9
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, _080CADEC  @ gUnknown_08AA70DC
	movs r0, #0
	str r0, [sp]
	adds r1, r5, #0
	bl RegisterObjectAttributes
_080CACE0:
	ldr r0, _080CADDC  @ 0x0000FFFF
	ldr r1, [sp, #8]
	cmp r1, r0
	beq _080CADC6
	cmp r7, r0
	beq _080CAD52
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CAD52
	cmp r7, #0xc8
	bgt _080CAD52
	adds r5, r1, #0
	subs r5, #0x30
	ldr r6, _080CADE0  @ 0x000001FF
	ands r5, r6
	adds r4, r7, #0
	subs r4, #0x28
	movs r0, #0xff
	mov r9, r0
	ands r4, r0
	ldr r1, _080CADE4  @ gUnknown_08AA709C
	mov r8, r1
	ldr r0, _080CADF8  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	mov r3, r8
	bl RegisterObjectAttributes
	ldr r1, [sp, #8]
	subs r1, #0x2c
	ands r1, r6
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, _080CADFC  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	mov r3, r8
	bl RegisterObjectAttributes
	adds r2, r7, #0
	subs r2, #0x20
	mov r0, r9
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, _080CADEC  @ gUnknown_08AA70DC
	movs r0, #0
	str r0, [sp]
	adds r1, r5, #0
	bl RegisterObjectAttributes
_080CAD52:
	ldr r0, _080CADDC  @ 0x0000FFFF
	ldr r1, [sp, #8]
	cmp r1, r0
	beq _080CADC6
	ldr r1, [sp, #0xc]
	cmp r1, r0
	beq _080CADC6
	movs r0, #0x28
	negs r0, r0
	cmp r1, r0
	blt _080CADC6
	cmp r1, #0xc8
	bgt _080CADC6
	ldr r5, [sp, #8]
	subs r5, #0x30
	ldr r6, _080CADE0  @ 0x000001FF
	ands r5, r6
	adds r4, r1, #0
	subs r4, #0x28
	movs r0, #0xff
	mov r9, r0
	ands r4, r0
	ldr r1, _080CADE4  @ gUnknown_08AA709C
	mov r8, r1
	ldr r0, _080CAE00  @ 0x000062D0
	str r0, [sp]
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	mov r3, r8
	bl RegisterObjectAttributes
	ldr r1, [sp, #8]
	subs r1, #0x2c
	ands r1, r6
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, _080CAE04  @ 0x00007348
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	mov r3, r8
	bl RegisterObjectAttributes
	ldr r2, [sp, #0xc]
	subs r2, #0x20
	mov r0, r9
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, _080CADEC  @ gUnknown_08AA70DC
	movs r0, #0
	str r0, [sp]
	adds r1, r5, #0
	bl RegisterObjectAttributes
_080CADC6:
	ldr r1, [sp, #4]
	ldrh r0, [r1, #0x2a]
	cmp r0, #0x12
	bne _080CAE08
	movs r0, #0
	strh r0, [r1, #0x2a]
	ldr r0, [sp, #4]
	bl Proc_ClearNativeCallback
	b _080CAE0E
	.align 2, 0
_080CADDC: .4byte 0x0000FFFF
_080CADE0: .4byte 0x000001FF
_080CADE4: .4byte gUnknown_08AA709C
_080CADE8: .4byte 0x00001078
_080CADEC: .4byte gUnknown_08AA70DC
_080CADF0: .4byte 0x000020F0
_080CADF4: .4byte 0x00003168
_080CADF8: .4byte 0x000041E0
_080CADFC: .4byte 0x00005258
_080CAE00: .4byte 0x000062D0
_080CAE04: .4byte 0x00007348
_080CAE08:
	adds r0, #1
	ldr r1, [sp, #4]
	strh r0, [r1, #0x2a]
_080CAE0E:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CAE20
sub_80CAE20: @ 0x080CAE20
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	ldrh r0, [r0, #0x2a]
	adds r0, #2
	mov r9, r0
	movs r1, #1
	negs r1, r1
	movs r0, #0x3e
	mov r2, r9
	movs r3, #0x10
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CAEF4  @ 0x0000FFFF
	mov sl, r0
	cmp r7, sl
	beq _080CAE8C
	adds r1, r7, #0
	subs r1, #0x20
	ldr r4, _080CAEF8  @ 0x000001FF
	ands r1, r4
	ldr r5, _080CAEFC  @ gUnknown_08AA709C
	movs r6, #0
	str r6, [sp]
	movs r0, #1
	movs r2, #0x20
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x1c
	ands r1, r4
	movs r2, #0x84
	lsls r2, r2, #3
	ldr r0, _080CAF00  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, _080CAF04  @ 0x00000838
	ldr r3, _080CAF08  @ gUnknown_08AA70EA
	str r6, [sp]
	movs r0, #0
	bl RegisterObjectAttributes
_080CAE8C:
	movs r0, #0xb2
	movs r1, #1
	mov r2, r9
	movs r3, #0x10
	bl sub_80CA9F8
	adds r7, r0, #0
	cmp r7, sl
	beq _080CAEDE
	adds r1, r7, #0
	subs r1, #0x40
	ldr r4, _080CAEF8  @ 0x000001FF
	ands r1, r4
	ldr r5, _080CAEFC  @ gUnknown_08AA709C
	ldr r0, _080CAF0C  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r2, #0x20
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x3c
	ands r1, r4
	movs r2, #0x84
	lsls r2, r2, #3
	ldr r0, _080CAF10  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, _080CAF04  @ 0x00000838
	ldr r3, _080CAF08  @ gUnknown_08AA70EA
	movs r0, #0
	str r0, [sp]
	bl RegisterObjectAttributes
_080CAEDE:
	mov r1, r8
	ldrh r0, [r1, #0x2a]
	cmp r0, #0x10
	bne _080CAF14
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, r8
	bl Proc_ClearNativeCallback
	b _080CAF1A
	.align 2, 0
_080CAEF4: .4byte 0x0000FFFF
_080CAEF8: .4byte 0x000001FF
_080CAEFC: .4byte gUnknown_08AA709C
_080CAF00: .4byte 0x00001078
_080CAF04: .4byte 0x00000838
_080CAF08: .4byte gUnknown_08AA70EA
_080CAF0C: .4byte 0x000020F0
_080CAF10: .4byte 0x00003168
_080CAF14:
	adds r0, #1
	mov r1, r8
	strh r0, [r1, #0x2a]
_080CAF1A:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CAF2C
sub_80CAF2C: @ 0x080CAF2C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r0, [r7, #0x2a]
	adds r2, r0, #0
	adds r2, #0xa
	movs r1, #1
	negs r1, r1
	movs r0, #0x50
	movs r3, #0xf
	bl sub_80CA9F8
	adds r4, r0, #0
	ldr r0, _080CB074  @ 0x0000FFFF
	cmp r4, r0
	beq _080CAF98
	movs r0, #0x28
	negs r0, r0
	cmp r4, r0
	blt _080CAF98
	cmp r4, #0xc8
	bgt _080CAF98
	movs r6, #0
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, _080CB078  @ gUnknown_08AA709C
	str r6, [sp]
	movs r0, #1
	movs r1, #0
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, _080CB07C  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	movs r1, #4
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, _080CB080  @ gUnknown_08AA7116
	str r6, [sp]
	movs r0, #0
	movs r1, #0x10
	adds r2, r4, #0
	bl RegisterObjectAttributes
_080CAF98:
	ldrh r0, [r7, #0x2a]
	adds r2, r0, #6
	movs r1, #1
	negs r1, r1
	movs r0, #0x50
	movs r3, #0xf
	bl sub_80CA9F8
	adds r4, r0, #0
	ldr r0, _080CB074  @ 0x0000FFFF
	cmp r4, r0
	beq _080CAFFC
	movs r0, #0x28
	negs r0, r0
	cmp r4, r0
	blt _080CAFFC
	cmp r4, #0xc8
	bgt _080CAFFC
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, _080CB078  @ gUnknown_08AA709C
	ldr r0, _080CB084  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x48
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, _080CB088  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	movs r1, #0x4c
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, _080CB080  @ gUnknown_08AA7116
	movs r0, #0
	str r0, [sp]
	movs r1, #0x58
	adds r2, r4, #0
	bl RegisterObjectAttributes
_080CAFFC:
	ldrh r0, [r7, #0x2a]
	adds r2, r0, #2
	movs r1, #1
	negs r1, r1
	movs r0, #0x50
	movs r3, #0xf
	bl sub_80CA9F8
	adds r4, r0, #0
	ldr r0, _080CB074  @ 0x0000FFFF
	cmp r4, r0
	beq _080CB060
	movs r0, #0x28
	negs r0, r0
	cmp r4, r0
	blt _080CB060
	cmp r4, #0xc8
	bgt _080CB060
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, _080CB078  @ gUnknown_08AA709C
	ldr r0, _080CB08C  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x90
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, _080CB090  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	movs r1, #0x94
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, _080CB080  @ gUnknown_08AA7116
	movs r0, #0
	str r0, [sp]
	movs r1, #0xa0
	adds r2, r4, #0
	bl RegisterObjectAttributes
_080CB060:
	ldrh r0, [r7, #0x2a]
	cmp r0, #0xf
	bne _080CB094
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	b _080CB098
	.align 2, 0
_080CB074: .4byte 0x0000FFFF
_080CB078: .4byte gUnknown_08AA709C
_080CB07C: .4byte 0x00001078
_080CB080: .4byte gUnknown_08AA7116
_080CB084: .4byte 0x000020F0
_080CB088: .4byte 0x00003168
_080CB08C: .4byte 0x000041E0
_080CB090: .4byte 0x00005258
_080CB094:
	adds r0, #1
	strh r0, [r7, #0x2a]
_080CB098:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CB0A0
sub_80CB0A0: @ 0x080CB0A0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r0, [r7, #0x2a]
	adds r2, r0, #0
	adds r2, #0xa
	movs r0, #0x50
	movs r1, #1
	movs r3, #0xd
	bl sub_80CA9F8
	adds r4, r0, #0
	ldr r0, _080CB1E0  @ 0x0000FFFF
	cmp r4, r0
	beq _080CB10A
	movs r0, #0x28
	negs r0, r0
	cmp r4, r0
	blt _080CB10A
	cmp r4, #0xc8
	bgt _080CB10A
	movs r6, #0
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, _080CB1E4  @ gUnknown_08AA709C
	str r6, [sp]
	movs r0, #1
	movs r1, #0
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, _080CB1E8  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	movs r1, #4
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, _080CB1EC  @ gUnknown_08AA7116
	str r6, [sp]
	movs r0, #0
	movs r1, #0x10
	adds r2, r4, #0
	bl RegisterObjectAttributes
_080CB10A:
	ldrh r0, [r7, #0x2a]
	adds r2, r0, #6
	movs r0, #0x50
	movs r1, #1
	movs r3, #0xd
	bl sub_80CA9F8
	adds r4, r0, #0
	ldr r0, _080CB1E0  @ 0x0000FFFF
	cmp r4, r0
	beq _080CB16C
	movs r0, #0x28
	negs r0, r0
	cmp r4, r0
	blt _080CB16C
	cmp r4, #0xc8
	bgt _080CB16C
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, _080CB1E4  @ gUnknown_08AA709C
	ldr r0, _080CB1F0  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x48
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, _080CB1F4  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	movs r1, #0x4c
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, _080CB1EC  @ gUnknown_08AA7116
	movs r0, #0
	str r0, [sp]
	movs r1, #0x58
	adds r2, r4, #0
	bl RegisterObjectAttributes
_080CB16C:
	ldrh r0, [r7, #0x2a]
	adds r2, r0, #2
	movs r0, #0x50
	movs r1, #1
	movs r3, #0xd
	bl sub_80CA9F8
	adds r4, r0, #0
	ldr r0, _080CB1E0  @ 0x0000FFFF
	cmp r4, r0
	beq _080CB1CE
	movs r0, #0x28
	negs r0, r0
	cmp r4, r0
	blt _080CB1CE
	cmp r4, #0xc8
	bgt _080CB1CE
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, _080CB1E4  @ gUnknown_08AA709C
	ldr r0, _080CB1F8  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x90
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, _080CB1FC  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	movs r1, #0x94
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, _080CB1EC  @ gUnknown_08AA7116
	movs r0, #0
	str r0, [sp]
	movs r1, #0xa0
	adds r2, r4, #0
	bl RegisterObjectAttributes
_080CB1CE:
	ldrh r0, [r7, #0x2a]
	cmp r0, #0xd
	bne _080CB200
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
	b _080CB204
	.align 2, 0
_080CB1E0: .4byte 0x0000FFFF
_080CB1E4: .4byte gUnknown_08AA709C
_080CB1E8: .4byte 0x00001078
_080CB1EC: .4byte gUnknown_08AA7116
_080CB1F0: .4byte 0x000020F0
_080CB1F4: .4byte 0x00003168
_080CB1F8: .4byte 0x000041E0
_080CB1FC: .4byte 0x00005258
_080CB200:
	adds r0, #1
	strh r0, [r7, #0x2a]
_080CB204:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CB20C
sub_80CB20C: @ 0x080CB20C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldrh r0, [r6, #0x2a]
	adds r2, r0, #6
	movs r0, #1
	negs r0, r0
	mov sl, r0
	movs r0, #0x3c
	mov r1, sl
	movs r3, #0xb
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CB2E0  @ 0x0000FFFF
	mov r9, r0
	cmp r7, r9
	beq _080CB27A
	adds r1, r7, #0
	subs r1, #0x20
	ldr r4, _080CB2E4  @ 0x000001FF
	ands r1, r4
	ldr r5, _080CB2E8  @ gUnknown_08AA709C
	movs r0, #0
	mov r8, r0
	str r0, [sp]
	movs r0, #1
	movs r2, #6
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x1c
	ands r1, r4
	ldr r2, _080CB2EC  @ 0x00000406
	ldr r0, _080CB2F0  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, _080CB2F4  @ 0x0000081E
	ldr r3, _080CB2F8  @ gUnknown_08AA70EA
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	bl RegisterObjectAttributes
_080CB27A:
	ldrh r0, [r6, #0x2a]
	adds r2, r0, #2
	movs r0, #0x3c
	mov r1, sl
	movs r3, #0xb
	bl sub_80CA9F8
	adds r7, r0, #0
	cmp r7, r9
	beq _080CB2CC
	adds r1, r7, #0
	subs r1, #0x40
	ldr r4, _080CB2E4  @ 0x000001FF
	ands r1, r4
	ldr r5, _080CB2E8  @ gUnknown_08AA709C
	ldr r0, _080CB2FC  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r2, #0x3a
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x3c
	ands r1, r4
	ldr r2, _080CB300  @ 0x0000043A
	ldr r0, _080CB304  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, _080CB308  @ 0x00000852
	ldr r3, _080CB2F8  @ gUnknown_08AA70EA
	movs r0, #0
	str r0, [sp]
	bl RegisterObjectAttributes
_080CB2CC:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0xb
	bne _080CB30C
	movs r0, #0
	strh r0, [r6, #0x2a]
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	b _080CB310
	.align 2, 0
_080CB2E0: .4byte 0x0000FFFF
_080CB2E4: .4byte 0x000001FF
_080CB2E8: .4byte gUnknown_08AA709C
_080CB2EC: .4byte 0x00000406
_080CB2F0: .4byte 0x00001078
_080CB2F4: .4byte 0x0000081E
_080CB2F8: .4byte gUnknown_08AA70EA
_080CB2FC: .4byte 0x000020F0
_080CB300: .4byte 0x0000043A
_080CB304: .4byte 0x00003168
_080CB308: .4byte 0x00000852
_080CB30C:
	adds r0, #1
	strh r0, [r6, #0x2a]
_080CB310:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CB320
sub_80CB320: @ 0x080CB320
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	ldrh r7, [r0, #0x2a]
	cmp r7, #0
	bne _080CB3A6
	ldr r0, _080CB54C  @ gLCDControlBuffer
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r2, #0x20
	orrs r0, r2
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x80
	orrs r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r5, ip
	adds r5, #0x34
	ldrb r0, [r5]
	orrs r0, r2
	movs r1, #2
	negs r1, r1
	mov r8, r1
	ands r0, r1
	movs r6, #3
	negs r6, r6
	ands r0, r6
	movs r4, #4
	orrs r0, r4
	movs r3, #9
	negs r3, r3
	ands r0, r3
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r5]
	adds r5, #1
	ldrb r0, [r5]
	orrs r0, r2
	mov r2, r8
	ands r0, r2
	ands r0, r6
	orrs r0, r4
	ands r0, r3
	orrs r0, r1
	strb r0, [r5]
	mov r0, ip
	adds r0, #0x2d
	strb r7, [r0]
	adds r0, #4
	strb r7, [r0]
	subs r0, #5
	strb r7, [r0]
	adds r0, #4
	strb r7, [r0]
	subs r0, #1
	strb r7, [r0]
	adds r0, #4
	strb r7, [r0]
	subs r0, #5
	strb r7, [r0]
	adds r0, #4
	strb r7, [r0]
_080CB3A6:
	mov r1, sl
	ldrh r0, [r1, #0x2a]
	adds r0, #2
	mov r9, r0
	movs r1, #1
	negs r1, r1
	movs r0, #0x1c
	mov r2, r9
	movs r3, #0xa
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CB550  @ 0x0000FFFF
	cmp r7, r0
	beq _080CB41C
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CB41C
	cmp r7, #0xc8
	bgt _080CB41C
	adds r4, r7, #0
	subs r4, #0x30
	movs r6, #0xff
	ands r4, r6
	ldr r5, _080CB554  @ gUnknown_08AA709C
	movs r2, #0
	mov r8, r2
	str r2, [sp]
	movs r0, #1
	movs r1, #0x48
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, _080CB558  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	movs r1, #0x4c
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r2, r7, #0
	subs r2, #0x18
	ands r2, r6
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, _080CB55C  @ gUnknown_08AA70EA
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x40
	bl RegisterObjectAttributes
_080CB41C:
	movs r0, #0x84
	movs r1, #1
	mov r2, r9
	movs r3, #0xa
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CB550  @ 0x0000FFFF
	movs r1, #0x78
	cmp r1, r0
	beq _080CB49A
	cmp r7, r0
	beq _080CB49A
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CB49A
	cmp r7, #0xc8
	bgt _080CB49A
	subs r1, #0x30
	ldr r5, _080CB560  @ 0x000001FF
	ands r1, r5
	adds r4, r7, #0
	subs r4, #0x30
	movs r2, #0xff
	mov r8, r2
	ands r4, r2
	ldr r6, _080CB554  @ gUnknown_08AA709C
	ldr r0, _080CB564  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes
	movs r1, #0x78
	subs r1, #0x2c
	ands r1, r5
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, _080CB568  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes
	movs r1, #0x78
	subs r1, #0x38
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x18
	mov r0, r8
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, _080CB55C  @ gUnknown_08AA70EA
	movs r0, #0
	str r0, [sp]
	bl RegisterObjectAttributes
_080CB49A:
	mov r3, r9
	subs r3, #2
	cmp r3, #7
	bhi _080CB4F2
	movs r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x18
	bl sub_8012DCC
	adds r7, r0, #0
	ldr r3, _080CB54C  @ gLCDControlBuffer
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #6
	strb r0, [r1]
	movs r2, #0x50
	subs r2, r2, r7
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r1, #1
	movs r0, #0x76
	strb r0, [r1]
	adds r1, r7, #0
	adds r1, #0x50
	adds r0, r3, #0
	adds r0, #0x30
	strb r1, [r0]
	adds r5, r3, #0
	adds r5, #0x2f
	movs r0, #0x7a
	strb r0, [r5]
	adds r0, r3, #0
	adds r0, #0x33
	strb r2, [r0]
	adds r2, r3, #0
	adds r2, #0x2e
	movs r0, #0xea
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x32
	strb r1, [r0]
_080CB4F2:
	ldr r4, _080CB554  @ gUnknown_08AA709C
	ldr r0, _080CB56C  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	movs r1, #0xe
	movs r2, #0x20
	adds r3, r4, #0
	bl RegisterObjectAttributes
	movs r5, #0x84
	lsls r5, r5, #3
	ldr r0, _080CB570  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	movs r1, #0x12
	adds r2, r5, #0
	adds r3, r4, #0
	bl RegisterObjectAttributes
	ldr r0, _080CB574  @ 0x000062D0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x82
	movs r2, #0x20
	adds r3, r4, #0
	bl RegisterObjectAttributes
	ldr r0, _080CB578  @ 0x00007348
	str r0, [sp]
	movs r0, #2
	movs r1, #0x86
	adds r2, r5, #0
	adds r3, r4, #0
	bl RegisterObjectAttributes
	mov r1, sl
	ldrh r0, [r1, #0x2a]
	cmp r0, #0xa
	bne _080CB57C
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, sl
	bl Proc_ClearNativeCallback
	b _080CB582
	.align 2, 0
_080CB54C: .4byte gLCDControlBuffer
_080CB550: .4byte 0x0000FFFF
_080CB554: .4byte gUnknown_08AA709C
_080CB558: .4byte 0x00001078
_080CB55C: .4byte gUnknown_08AA70EA
_080CB560: .4byte 0x000001FF
_080CB564: .4byte 0x000020F0
_080CB568: .4byte 0x00003168
_080CB56C: .4byte 0x000041E0
_080CB570: .4byte 0x00005258
_080CB574: .4byte 0x000062D0
_080CB578: .4byte 0x00007348
_080CB57C:
	adds r0, #1
	mov r2, sl
	strh r0, [r2, #0x2a]
_080CB582:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CB594
sub_80CB594: @ 0x080CB594
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldrh r0, [r6, #0x2a]
	adds r2, r0, #6
	movs r0, #0xb4
	movs r1, #1
	movs r3, #9
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CB660  @ 0x0000FFFF
	mov r9, r0
	cmp r7, r9
	beq _080CB5FA
	adds r1, r7, #0
	subs r1, #0x20
	ldr r4, _080CB664  @ 0x000001FF
	ands r1, r4
	ldr r5, _080CB668  @ gUnknown_08AA709C
	movs r0, #0
	mov r8, r0
	str r0, [sp]
	movs r0, #1
	movs r2, #6
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x1c
	ands r1, r4
	ldr r2, _080CB66C  @ 0x00000406
	ldr r0, _080CB670  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, _080CB674  @ 0x0000081E
	ldr r3, _080CB678  @ gUnknown_08AA70EA
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	bl RegisterObjectAttributes
_080CB5FA:
	ldrh r0, [r6, #0x2a]
	adds r2, r0, #2
	movs r0, #0xb4
	movs r1, #1
	movs r3, #9
	bl sub_80CA9F8
	adds r7, r0, #0
	cmp r7, r9
	beq _080CB64C
	adds r1, r7, #0
	subs r1, #0x40
	ldr r4, _080CB664  @ 0x000001FF
	ands r1, r4
	ldr r5, _080CB668  @ gUnknown_08AA709C
	ldr r0, _080CB67C  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r2, #0x3a
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x3c
	ands r1, r4
	ldr r2, _080CB680  @ 0x0000043A
	ldr r0, _080CB684  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, _080CB688  @ 0x00000852
	ldr r3, _080CB678  @ gUnknown_08AA70EA
	movs r0, #0
	str r0, [sp]
	bl RegisterObjectAttributes
_080CB64C:
	ldrh r0, [r6, #0x2a]
	cmp r0, #9
	bne _080CB68C
	movs r0, #0
	strh r0, [r6, #0x2a]
	adds r0, r6, #0
	bl Proc_ClearNativeCallback
	b _080CB690
	.align 2, 0
_080CB660: .4byte 0x0000FFFF
_080CB664: .4byte 0x000001FF
_080CB668: .4byte gUnknown_08AA709C
_080CB66C: .4byte 0x00000406
_080CB670: .4byte 0x00001078
_080CB674: .4byte 0x0000081E
_080CB678: .4byte gUnknown_08AA70EA
_080CB67C: .4byte 0x000020F0
_080CB680: .4byte 0x0000043A
_080CB684: .4byte 0x00003168
_080CB688: .4byte 0x00000852
_080CB68C:
	adds r0, #1
	strh r0, [r6, #0x2a]
_080CB690:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CB6A0
sub_80CB6A0: @ 0x080CB6A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r9, r0
	ldrh r0, [r0, #0x2a]
	adds r2, r0, #0
	adds r2, #0xa
	movs r0, #0x78
	mov sl, r0
	movs r0, #0x1c
	movs r1, #1
	movs r3, #8
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CB83C  @ 0x0000FFFF
	cmp r7, r0
	beq _080CB722
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CB722
	cmp r7, #0xc8
	bgt _080CB722
	adds r4, r7, #0
	subs r4, #0x30
	movs r6, #0xff
	ands r4, r6
	ldr r5, _080CB840  @ gUnknown_08AA709C
	movs r1, #0
	mov r8, r1
	str r1, [sp]
	movs r0, #1
	movs r1, #0x48
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, _080CB844  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	movs r1, #0x4c
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r2, r7, #0
	subs r2, #0x18
	ands r2, r6
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, _080CB848  @ gUnknown_08AA715C
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x18
	bl RegisterObjectAttributes
_080CB722:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	adds r2, r0, #6
	movs r0, #0x50
	movs r1, #1
	movs r3, #8
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CB83C  @ 0x0000FFFF
	cmp sl, r0
	beq _080CB7A4
	cmp r7, r0
	beq _080CB7A4
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CB7A4
	cmp r7, #0xc8
	bgt _080CB7A4
	mov r1, sl
	subs r1, #0x30
	ldr r5, _080CB84C  @ 0x000001FF
	ands r1, r5
	adds r4, r7, #0
	subs r4, #0x30
	movs r0, #0xff
	mov r8, r0
	ands r4, r0
	ldr r6, _080CB840  @ gUnknown_08AA709C
	ldr r0, _080CB850  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes
	mov r1, sl
	subs r1, #0x2c
	ands r1, r5
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, _080CB854  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes
	mov r1, sl
	subs r1, #0x60
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x18
	mov r0, r8
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, _080CB848  @ gUnknown_08AA715C
	movs r0, #0
	str r0, [sp]
	bl RegisterObjectAttributes
_080CB7A4:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	adds r2, r0, #2
	movs r0, #0x84
	movs r1, #1
	movs r3, #8
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CB83C  @ 0x0000FFFF
	cmp sl, r0
	beq _080CB826
	cmp r7, r0
	beq _080CB826
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CB826
	cmp r7, #0xc8
	bgt _080CB826
	mov r1, sl
	subs r1, #0x30
	ldr r5, _080CB84C  @ 0x000001FF
	ands r1, r5
	adds r4, r7, #0
	subs r4, #0x30
	movs r0, #0xff
	mov r8, r0
	ands r4, r0
	ldr r6, _080CB840  @ gUnknown_08AA709C
	ldr r0, _080CB858  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes
	mov r1, sl
	subs r1, #0x2c
	ands r1, r5
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, _080CB85C  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes
	mov r1, sl
	subs r1, #0x60
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x18
	mov r0, r8
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, _080CB848  @ gUnknown_08AA715C
	movs r0, #0
	str r0, [sp]
	bl RegisterObjectAttributes
_080CB826:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	cmp r0, #8
	bne _080CB860
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, r9
	bl Proc_ClearNativeCallback
	b _080CB866
	.align 2, 0
_080CB83C: .4byte 0x0000FFFF
_080CB840: .4byte gUnknown_08AA709C
_080CB844: .4byte 0x00001078
_080CB848: .4byte gUnknown_08AA715C
_080CB84C: .4byte 0x000001FF
_080CB850: .4byte 0x000020F0
_080CB854: .4byte 0x00003168
_080CB858: .4byte 0x000041E0
_080CB85C: .4byte 0x00005258
_080CB860:
	adds r0, #1
	mov r1, r9
	strh r0, [r1, #0x2a]
_080CB866:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CB878
sub_80CB878: @ 0x080CB878
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r9, r0
	ldrh r0, [r0, #0x2a]
	adds r0, #2
	str r0, [sp, #4]
	movs r0, #0x1e
	mov sl, r0
	movs r1, #1
	negs r1, r1
	movs r0, #0x50
	ldr r2, [sp, #4]
	movs r3, #7
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CBA20  @ 0x0000FFFF
	cmp r7, r0
	beq _080CB902
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CB902
	cmp r7, #0xc8
	bgt _080CB902
	mov r1, sl
	subs r1, #0x30
	ldr r5, _080CBA24  @ 0x000001FF
	ands r1, r5
	adds r4, r7, #0
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r6, _080CBA28  @ gUnknown_08AA709C
	movs r0, #0
	mov r8, r0
	str r0, [sp]
	movs r0, #1
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes
	mov r1, sl
	subs r1, #0x2c
	ands r1, r5
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, _080CBA2C  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r3, r6, #0
	bl RegisterObjectAttributes
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, _080CBA30  @ gUnknown_08AA712A
	mov r1, r8
	str r1, [sp]
	movs r0, #0
	movs r1, #2
	adds r2, r4, #0
	bl RegisterObjectAttributes
_080CB902:
	ldr r0, _080CBA20  @ 0x0000FFFF
	cmp r7, r0
	beq _080CB956
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CB956
	cmp r7, #0xc8
	bgt _080CB956
	adds r4, r7, #0
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, _080CBA28  @ gUnknown_08AA709C
	ldr r0, _080CBA34  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x66
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, _080CBA38  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	movs r1, #0x6a
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, _080CBA30  @ gUnknown_08AA712A
	movs r0, #0
	str r0, [sp]
	movs r1, #0x7a
	adds r2, r4, #0
	bl RegisterObjectAttributes
_080CB956:
	movs r0, #0x50
	movs r1, #1
	ldr r2, [sp, #4]
	movs r3, #7
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CBA20  @ 0x0000FFFF
	cmp r7, r0
	beq _080CB9B8
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CB9B8
	cmp r7, #0xc8
	bgt _080CB9B8
	adds r4, r7, #0
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, _080CBA28  @ gUnknown_08AA709C
	ldr r0, _080CBA3C  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x2a
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, _080CBA40  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	movs r1, #0x2e
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, _080CBA30  @ gUnknown_08AA712A
	movs r0, #0
	str r0, [sp]
	movs r1, #0x3e
	adds r2, r4, #0
	bl RegisterObjectAttributes
_080CB9B8:
	ldr r0, _080CBA20  @ 0x0000FFFF
	cmp r7, r0
	beq _080CBA0C
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CBA0C
	cmp r7, #0xc8
	bgt _080CBA0C
	adds r4, r7, #0
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, _080CBA28  @ gUnknown_08AA709C
	ldr r0, _080CBA44  @ 0x000062D0
	str r0, [sp]
	movs r0, #1
	movs r1, #0xa2
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, _080CBA48  @ 0x00007348
	str r0, [sp]
	movs r0, #2
	movs r1, #0xa6
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, _080CBA30  @ gUnknown_08AA712A
	movs r0, #0
	str r0, [sp]
	movs r1, #0xb6
	adds r2, r4, #0
	bl RegisterObjectAttributes
_080CBA0C:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	cmp r0, #7
	bne _080CBA4C
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, r9
	bl Proc_ClearNativeCallback
	b _080CBA52
	.align 2, 0
_080CBA20: .4byte 0x0000FFFF
_080CBA24: .4byte 0x000001FF
_080CBA28: .4byte gUnknown_08AA709C
_080CBA2C: .4byte 0x00001078
_080CBA30: .4byte gUnknown_08AA712A
_080CBA34: .4byte 0x000041E0
_080CBA38: .4byte 0x00005258
_080CBA3C: .4byte 0x000020F0
_080CBA40: .4byte 0x00003168
_080CBA44: .4byte 0x000062D0
_080CBA48: .4byte 0x00007348
_080CBA4C:
	adds r0, #1
	mov r1, r9
	strh r0, [r1, #0x2a]
_080CBA52:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CBA64
sub_80CBA64: @ 0x080CBA64
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r9, r0
	ldrh r0, [r0, #0x2a]
	adds r2, r0, #2
	movs r0, #0x78
	mov sl, r0
	movs r1, #1
	negs r1, r1
	movs r0, #0x1c
	movs r3, #6
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CBC04  @ 0x0000FFFF
	cmp r7, r0
	beq _080CBAE6
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CBAE6
	cmp r7, #0xc8
	bgt _080CBAE6
	adds r4, r7, #0
	subs r4, #0x30
	movs r6, #0xff
	ands r4, r6
	ldr r5, _080CBC08  @ gUnknown_08AA709C
	movs r1, #0
	mov r8, r1
	str r1, [sp]
	movs r0, #1
	movs r1, #0x48
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, _080CBC0C  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	movs r1, #0x4c
	adds r2, r4, #0
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r2, r7, #0
	subs r2, #0x18
	ands r2, r6
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, _080CBC10  @ gUnknown_08AA715C
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x18
	bl RegisterObjectAttributes
_080CBAE6:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	adds r2, r0, #6
	movs r1, #1
	negs r1, r1
	movs r0, #0x50
	movs r3, #6
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CBC04  @ 0x0000FFFF
	cmp sl, r0
	beq _080CBB6A
	cmp r7, r0
	beq _080CBB6A
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CBB6A
	cmp r7, #0xc8
	bgt _080CBB6A
	mov r1, sl
	subs r1, #0x30
	ldr r5, _080CBC14  @ 0x000001FF
	ands r1, r5
	adds r4, r7, #0
	subs r4, #0x30
	movs r0, #0xff
	mov r8, r0
	ands r4, r0
	ldr r6, _080CBC08  @ gUnknown_08AA709C
	ldr r0, _080CBC18  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes
	mov r1, sl
	subs r1, #0x2c
	ands r1, r5
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, _080CBC1C  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes
	mov r1, sl
	subs r1, #0x60
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x18
	mov r0, r8
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, _080CBC10  @ gUnknown_08AA715C
	movs r0, #0
	str r0, [sp]
	bl RegisterObjectAttributes
_080CBB6A:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	adds r2, r0, #0
	adds r2, #0xa
	movs r1, #1
	negs r1, r1
	movs r0, #0x84
	movs r3, #6
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CBC04  @ 0x0000FFFF
	cmp sl, r0
	beq _080CBBF0
	cmp r7, r0
	beq _080CBBF0
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt _080CBBF0
	cmp r7, #0xc8
	bgt _080CBBF0
	mov r1, sl
	subs r1, #0x30
	ldr r5, _080CBC14  @ 0x000001FF
	ands r1, r5
	adds r4, r7, #0
	subs r4, #0x30
	movs r0, #0xff
	mov r8, r0
	ands r4, r0
	ldr r6, _080CBC08  @ gUnknown_08AA709C
	ldr r0, _080CBC20  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes
	mov r1, sl
	subs r1, #0x2c
	ands r1, r5
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, _080CBC24  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	adds r3, r6, #0
	bl RegisterObjectAttributes
	mov r1, sl
	subs r1, #0x60
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x18
	mov r0, r8
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, _080CBC10  @ gUnknown_08AA715C
	movs r0, #0
	str r0, [sp]
	bl RegisterObjectAttributes
_080CBBF0:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	cmp r0, #6
	bne _080CBC28
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, r9
	bl Proc_ClearNativeCallback
	b _080CBC2E
	.align 2, 0
_080CBC04: .4byte 0x0000FFFF
_080CBC08: .4byte gUnknown_08AA709C
_080CBC0C: .4byte 0x00001078
_080CBC10: .4byte gUnknown_08AA715C
_080CBC14: .4byte 0x000001FF
_080CBC18: .4byte 0x000020F0
_080CBC1C: .4byte 0x00003168
_080CBC20: .4byte 0x000041E0
_080CBC24: .4byte 0x00005258
_080CBC28:
	adds r0, #1
	mov r1, r9
	strh r0, [r1, #0x2a]
_080CBC2E:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CBC40
sub_80CBC40: @ 0x080CBC40
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	ldrh r0, [r0, #0x2a]
	adds r0, #2
	mov r9, r0
	movs r1, #1
	negs r1, r1
	movs r0, #0x3e
	mov r2, r9
	movs r3, #5
	bl sub_80CA9F8
	adds r7, r0, #0
	ldr r0, _080CBD3C  @ 0x0000FFFF
	mov sl, r0
	cmp r7, sl
	beq _080CBCAC
	adds r1, r7, #0
	subs r1, #0x30
	ldr r4, _080CBD40  @ 0x000001FF
	ands r1, r4
	ldr r5, _080CBD44  @ gUnknown_08AA709C
	movs r6, #0
	str r6, [sp]
	movs r0, #1
	movs r2, #0x28
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x2c
	ands r1, r4
	movs r2, #0x85
	lsls r2, r2, #3
	ldr r0, _080CBD48  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, _080CBD4C  @ 0x00000828
	ldr r3, _080CBD50  @ gUnknown_08AA7194
	str r6, [sp]
	movs r0, #0
	bl RegisterObjectAttributes
_080CBCAC:
	movs r0, #0xb2
	movs r1, #1
	mov r2, r9
	movs r3, #5
	bl sub_80CA9F8
	adds r7, r0, #0
	cmp r7, sl
	beq _080CBCFE
	adds r1, r7, #0
	subs r1, #0x30
	ldr r4, _080CBD40  @ 0x000001FF
	ands r1, r4
	ldr r5, _080CBD44  @ gUnknown_08AA709C
	ldr r0, _080CBD54  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r2, #0x28
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x2c
	ands r1, r4
	movs r2, #0x85
	lsls r2, r2, #3
	ldr r0, _080CBD58  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl RegisterObjectAttributes
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, _080CBD4C  @ 0x00000828
	ldr r3, _080CBD50  @ gUnknown_08AA7194
	movs r0, #0
	str r0, [sp]
	bl RegisterObjectAttributes
_080CBCFE:
	mov r1, r8
	ldrh r0, [r1, #0x2a]
	cmp r0, #1
	bne _080CBD28
	ldr r0, _080CBD5C  @ gUnknown_08AF4330
	ldr r4, _080CBD60  @ 0x0600F000
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	movs r3, #0x80
	lsls r3, r3, #8
	adds r2, r3, #0
	movs r1, #0xa0
	lsls r1, r1, #2
_080CBD1A:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	subs r1, #1
	adds r4, #2
	cmp r1, #0
	bne _080CBD1A
_080CBD28:
	mov r1, r8
	ldrh r0, [r1, #0x2a]
	cmp r0, #5
	bne _080CBD64
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, r8
	bl Proc_ClearNativeCallback
	b _080CBD6A
	.align 2, 0
_080CBD3C: .4byte 0x0000FFFF
_080CBD40: .4byte 0x000001FF
_080CBD44: .4byte gUnknown_08AA709C
_080CBD48: .4byte 0x00001078
_080CBD4C: .4byte 0x00000828
_080CBD50: .4byte gUnknown_08AA7194
_080CBD54: .4byte 0x000020F0
_080CBD58: .4byte 0x00003168
_080CBD5C: .4byte gUnknown_08AF4330
_080CBD60: .4byte 0x0600F000
_080CBD64:
	adds r0, #1
	mov r3, r8
	strh r0, [r3, #0x2a]
_080CBD6A:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CBD7C
sub_80CBD7C: @ 0x080CBD7C
	push {r4, lr}
	bl sub_80ADDD4
	bl sub_80C71D4
	movs r0, #0
	bl SetPrimaryHBlankHandler
	bl DeleteSome6C
	ldr r4, _080CBDCC  @ gLCDControlBuffer
	ldrb r1, [r4]
	movs r0, #0x41
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	ldr r1, _080CBDD0  @ gPaletteBuffer
	ldr r0, _080CBDD4  @ gUnknown_02022188
	ldrh r0, [r0, #0xc]
	strh r0, [r1]
	bl EnablePaletteSync
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080CBDCC: .4byte gLCDControlBuffer
_080CBDD0: .4byte gPaletteBuffer
_080CBDD4: .4byte gUnknown_02022188

	THUMB_FUNC_START sub_80CBDD8
sub_80CBDD8: @ 0x080CBDD8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	cmp r0, #2
	beq _080CBDEA
	bl ShouldSkipHSScreen
	cmp r0, #0
	beq _080CBE00
_080CBDEA:
	ldr r0, _080CBE08  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xa
	ands r0, r1
	cmp r0, #0
	beq _080CBE00
	adds r0, r4, #0
	movs r1, #0
	bl Proc_GotoLabel
_080CBE00:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080CBE08: .4byte gKeyStatusPtr

	THUMB_FUNC_START sub_80CBE0C
sub_80CBE0C: @ 0x080CBE0C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #1
	bl Sound_FadeOut800231C
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl SetPrimaryHBlankHandler
	ldr r5, _080CBECC  @ gLCDControlBuffer
	ldrb r1, [r5, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	mov sl, r1
	ands r0, r1
	subs r1, #2
	mov r9, r1
	ands r0, r1
	subs r1, #4
	mov r8, r1
	ands r0, r1
	movs r6, #0x11
	negs r6, r6
	ands r0, r6
	strb r0, [r5, #1]
	ldr r0, _080CBED0  @ gUnknown_08B10630
	movs r1, #0xc0
	lsls r1, r1, #0x13
	bl CopyDataWithPossibleUncomp
	ldr r0, _080CBED4  @ gUnknown_08B104D8
	ldr r4, _080CBED8  @ gUnknown_02020188
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080CBEDC  @ gBG0TilemapBuffer
	adds r1, r4, #0
	movs r2, #0
	bl CallARM_FillTileRect
	ldr r0, _080CBEE0  @ gUnknown_08B10CA4
	ldr r1, _080CBEE4  @ 0x06002000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080CBEE8  @ gUnknown_08B10ADC
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080CBEEC  @ gBG1TilemapBuffer
	movs r2, #0x88
	lsls r2, r2, #5
	adds r1, r4, #0
	bl CallARM_FillTileRect
	movs r4, #0
	str r4, [sp]
	ldr r1, _080CBEF0  @ gPaletteBuffer
	ldr r2, _080CBEF4  @ 0x01000100
	mov r0, sp
	bl CpuFastSet
	bl EnablePaletteSync
	movs r0, #3
	bl BG_EnableSyncByMask
	ldrb r0, [r5, #1]
	movs r1, #1
	orrs r0, r1
	mov r1, sl
	ands r0, r1
	mov r1, r9
	ands r0, r1
	mov r1, r8
	ands r0, r1
	ands r0, r6
	strb r0, [r5, #1]
	str r4, [r7, #0x30]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CBECC: .4byte gLCDControlBuffer
_080CBED0: .4byte gUnknown_08B10630
_080CBED4: .4byte gUnknown_08B104D8
_080CBED8: .4byte gUnknown_02020188
_080CBEDC: .4byte gBG0TilemapBuffer
_080CBEE0: .4byte gUnknown_08B10CA4
_080CBEE4: .4byte 0x06002000
_080CBEE8: .4byte gUnknown_08B10ADC
_080CBEEC: .4byte gBG1TilemapBuffer
_080CBEF0: .4byte gPaletteBuffer
_080CBEF4: .4byte 0x01000100

	THUMB_FUNC_START sub_80CBEF8
sub_80CBEF8: @ 0x080CBEF8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	adds r7, r3, #0
	lsls r2, r2, #4
	lsls r1, r1, #5
	ldr r0, _080CBF74  @ gPaletteBuffer
	adds r1, r1, r0
	mov r8, r1
	ldr r0, [sp, #0x20]
	cmp r7, r0
	bge _080CBF78
	cmp r2, #0
	ble _080CBF86
	mov r9, r4
	mov sl, r2
_080CBF1E:
	mov r1, r9
	ldrh r4, [r1]
	adds r0, r4, #0
	movs r1, #0x1f
	ands r0, r1
	muls r0, r7, r0
	ldr r1, [sp, #0x20]
	bl __divsi3
	adds r6, r0, #0
	asrs r0, r4, #5
	movs r1, #0x1f
	ands r0, r1
	muls r0, r7, r0
	ldr r1, [sp, #0x20]
	bl __divsi3
	adds r5, r0, #0
	asrs r4, r4, #0xa
	movs r0, #0x1f
	ands r4, r0
	adds r0, r4, #0
	muls r0, r7, r0
	ldr r1, [sp, #0x20]
	bl __divsi3
	lsls r5, r5, #5
	orrs r5, r6
	lsls r0, r0, #0xa
	orrs r0, r5
	mov r1, r8
	strh r0, [r1]
	movs r0, #2
	add r8, r0
	add r9, r0
	movs r1, #1
	negs r1, r1
	add sl, r1
	mov r0, sl
	cmp r0, #0
	bne _080CBF1E
	b _080CBF86
	.align 2, 0
_080CBF74: .4byte gPaletteBuffer
_080CBF78:
	asrs r2, r2, #1
	ldr r0, _080CBF98  @ 0x001FFFFF
	ands r2, r0
	adds r0, r4, #0
	mov r1, r8
	bl CpuFastSet
_080CBF86:
	bl EnablePaletteSync
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CBF98: .4byte 0x001FFFFF

	THUMB_FUNC_START sub_80CBF9C
sub_80CBF9C: @ 0x080CBF9C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080CBFB8  @ gPaletteBuffer
	ldr r1, _080CBFBC  @ gUnknown_02000000
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	movs r0, #4
	str r0, [r4, #0x38]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080CBFB8: .4byte gPaletteBuffer
_080CBFBC: .4byte gUnknown_02000000

	THUMB_FUNC_START sub_80CBFC0
sub_80CBFC0: @ 0x080CBFC0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, [r7, #0x38]
	subs r0, #1
	str r0, [r7, #0x38]
	cmp r0, #0
	ble _080CC044
	movs r6, #0
	ldr r0, _080CC038  @ gPaletteBuffer
	mov r9, r0
	movs r3, #0x1f
	mov r8, r3
	ldr r4, _080CC03C  @ gUnknown_02000000
	mov ip, r4
_080CBFE4:
	lsls r2, r6, #1
	mov r0, ip
	ldrh r3, [r0]
	movs r0, #0x1f
	ands r0, r3
	ldr r1, [r7, #0x38]
	muls r0, r1, r0
	cmp r0, #0
	bge _080CBFF8
	adds r0, #3
_080CBFF8:
	asrs r5, r0, #2
	lsls r3, r3, #0x10
	lsrs r0, r3, #0x15
	mov r4, r8
	ands r0, r4
	muls r0, r1, r0
	cmp r0, #0
	bge _080CC00A
	adds r0, #3
_080CC00A:
	asrs r4, r0, #2
	lsrs r0, r3, #0x1a
	mov r3, r8
	ands r0, r3
	muls r0, r1, r0
	cmp r0, #0
	bge _080CC01A
	adds r0, #3
_080CC01A:
	asrs r1, r0, #2
	add r2, r9
	lsls r0, r4, #5
	orrs r0, r5
	lsls r1, r1, #0xa
	orrs r0, r1
	strh r0, [r2]
	movs r4, #2
	add ip, r4
	adds r6, #1
	ldr r0, _080CC040  @ 0x000001FF
	cmp r6, r0
	ble _080CBFE4
	b _080CC058
	.align 2, 0
_080CC038: .4byte gPaletteBuffer
_080CC03C: .4byte gUnknown_02000000
_080CC040: .4byte 0x000001FF
_080CC044:
	movs r0, #0
	str r0, [sp]
	ldr r1, _080CC06C  @ gPaletteBuffer
	ldr r2, _080CC070  @ 0x01000100
	mov r0, sp
	bl CpuFastSet
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
_080CC058:
	bl EnablePaletteSync
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CC06C: .4byte gPaletteBuffer
_080CC070: .4byte 0x01000100

	THUMB_FUNC_START sub_80CC074
sub_80CC074: @ 0x080CC074
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x34]
	subs r0, #1
	str r0, [r4, #0x34]
	cmp r0, #0
	bgt _080CC08C
	movs r0, #0
	str r0, [r4, #0x30]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080CC08C:
	adds r0, r4, #0
	bl sub_80CBDD8
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CC098
sub_80CC098: @ 0x080CC098
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bne _080CC0C0
	ldr r2, _080CC0F4  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
_080CC0C0:
	ldr r3, [r4, #0x30]
	adds r3, #1
	str r3, [r4, #0x30]
	ldr r0, _080CC0F8  @ gUnknown_08B10ABC
	movs r1, #0x1e
	str r1, [sp]
	movs r1, #0
	movs r2, #1
	bl sub_80CBEF8
	ldr r0, [r4, #0x30]
	cmp r0, #0x1d
	ble _080CC0E4
	movs r0, #0x3c
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080CC0E4:
	adds r0, r4, #0
	bl sub_80CBDD8
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080CC0F4: .4byte gLCDControlBuffer
_080CC0F8: .4byte gUnknown_08B10ABC

	THUMB_FUNC_START sub_80CC0FC
sub_80CC0FC: @ 0x080CC0FC
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r3, [r4, #0x30]
	adds r3, #1
	str r3, [r4, #0x30]
	ldr r0, _080CC138  @ gUnknown_08B10ABC
	movs r1, #0x1e
	subs r3, r1, r3
	str r1, [sp]
	movs r1, #0
	movs r2, #1
	bl sub_80CBEF8
	ldr r0, [r4, #0x30]
	cmp r0, #0x1d
	ble _080CC128
	movs r0, #0x28
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080CC128:
	adds r0, r4, #0
	bl sub_80CBDD8
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080CC138: .4byte gUnknown_08B10ABC

	THUMB_FUNC_START sub_80CC13C
sub_80CC13C: @ 0x080CC13C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bne _080CC166
	ldr r2, _080CC198  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
_080CC166:
	ldr r3, [r4, #0x30]
	adds r3, #1
	str r3, [r4, #0x30]
	ldr r0, _080CC19C  @ gUnknown_08B11864
	movs r1, #0x1e
	str r1, [sp]
	movs r1, #1
	movs r2, #3
	bl sub_80CBEF8
	ldr r0, [r4, #0x30]
	cmp r0, #0x1d
	ble _080CC18A
	movs r0, #0x3c
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080CC18A:
	adds r0, r4, #0
	bl sub_80CBDD8
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080CC198: .4byte gLCDControlBuffer
_080CC19C: .4byte gUnknown_08B11864

	THUMB_FUNC_START sub_80CC1A0
sub_80CC1A0: @ 0x080CC1A0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r3, [r4, #0x30]
	adds r3, #1
	str r3, [r4, #0x30]
	ldr r0, _080CC1DC  @ gUnknown_08B11864
	movs r1, #0x28
	subs r3, r1, r3
	str r1, [sp]
	movs r1, #1
	movs r2, #3
	bl sub_80CBEF8
	ldr r0, [r4, #0x30]
	cmp r0, #0x27
	ble _080CC1CC
	movs r0, #0x3c
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080CC1CC:
	adds r0, r4, #0
	bl sub_80CBDD8
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080CC1DC: .4byte gUnknown_08B11864

	THUMB_FUNC_START sub_80CC1E0
sub_80CC1E0: @ 0x080CC1E0
	movs r1, #0
	str r1, [r0, #0x2c]
	bx lr

	THUMB_FUNC_START sub_80CC1E8
sub_80CC1E8: @ 0x080CC1E8
	movs r1, #1
	str r1, [r0, #0x2c]
	bx lr

	THUMB_FUNC_START sub_80CC1F0
sub_80CC1F0: @ 0x080CC1F0
	movs r1, #2
	str r1, [r0, #0x2c]
	bx lr

	THUMB_FUNC_START PrepareHealthAndSafetyScreen
PrepareHealthAndSafetyScreen: @ 0x080CC1F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	bl ShouldSkipHSScreen
	cmp r0, #1
	bne _080CC21C
	ldr r1, _080CC218  @ 0x000003E7
	adds r0, r7, #0
	bl Proc_GotoLabel
	b _080CC2BA
	.align 2, 0
_080CC218: .4byte 0x000003E7
_080CC21C:
	movs r0, #1
	bl Sound_FadeOut800231C
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl SetPrimaryHBlankHandler
	ldr r6, _080CC2CC  @ gLCDControlBuffer
	ldrb r1, [r6, #1]
	movs r4, #2
	negs r4, r4
	adds r0, r4, #0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	mov sl, r1
	ands r0, r1
	subs r1, #4
	mov r9, r1
	ands r0, r1
	subs r1, #8
	mov r8, r1
	ands r0, r1
	strb r0, [r6, #1]
	ldr r0, _080CC2D0  @ gUnknown_08B11D0C
	movs r1, #0xc0
	lsls r1, r1, #0x13
	bl CopyDataWithPossibleUncomp
	ldr r0, _080CC2D4  @ gUnknown_08B118C4
	ldr r5, _080CC2D8  @ gUnknown_02020188
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080CC2DC  @ gBG1TilemapBuffer
	adds r1, r5, #0
	movs r2, #0
	bl CallARM_FillTileRect
	ldr r0, _080CC2E0  @ gUnknown_08B11C0C
	adds r1, r5, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080CC2E4  @ gBG0TilemapBuffer
	adds r1, r5, #0
	movs r2, #0
	bl CallARM_FillTileRect
	movs r5, #0
	str r5, [sp]
	ldr r1, _080CC2E8  @ gPaletteBuffer
	ldr r2, _080CC2EC  @ 0x01000100
	mov r0, sp
	bl CpuFastSet
	bl EnablePaletteSync
	movs r0, #3
	bl BG_EnableSyncByMask
	ldrb r0, [r6, #1]
	ands r4, r0
	movs r0, #2
	orrs r4, r0
	mov r0, sl
	ands r4, r0
	mov r1, r9
	ands r4, r1
	mov r0, r8
	ands r4, r0
	strb r4, [r6, #1]
	str r5, [r7, #0x30]
	ldr r0, _080CC2F0  @ 0x000003FF
	bl SetKeyStatus_IgnoreMask
_080CC2BA:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CC2CC: .4byte gLCDControlBuffer
_080CC2D0: .4byte gUnknown_08B11D0C
_080CC2D4: .4byte gUnknown_08B118C4
_080CC2D8: .4byte gUnknown_02020188
_080CC2DC: .4byte gBG1TilemapBuffer
_080CC2E0: .4byte gUnknown_08B11C0C
_080CC2E4: .4byte gBG0TilemapBuffer
_080CC2E8: .4byte gPaletteBuffer
_080CC2EC: .4byte 0x01000100
_080CC2F0: .4byte 0x000003FF

	THUMB_FUNC_START sub_80CC2F4
sub_80CC2F4: @ 0x080CC2F4
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r3, [r4, #0x30]
	adds r3, #1
	str r3, [r4, #0x30]
	ldr r0, _080CC328  @ gUnknown_08B125F4
	movs r1, #0x1e
	str r1, [sp]
	movs r1, #0
	movs r2, #1
	bl sub_80CBEF8
	ldr r0, [r4, #0x30]
	cmp r0, #0x1d
	ble _080CC31E
	movs r0, #0x5a
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080CC31E:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080CC328: .4byte gUnknown_08B125F4

	THUMB_FUNC_START sub_80CC32C
sub_80CC32C: @ 0x080CC32C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r3, [r5, #0x30]
	cmp r3, #0
	bne _080CC368
	ldr r2, _080CC39C  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	str r3, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #0
	bl SetKeyStatus_IgnoreMask
_080CC368:
	ldr r2, [r5, #0x30]
	adds r1, r2, #1
	str r1, [r5, #0x30]
	adds r0, r1, #0
	cmp r1, #0
	bge _080CC378
	adds r0, r2, #0
	adds r0, #0x40
_080CC378:
	asrs r0, r0, #6
	lsls r0, r0, #6
	subs r0, r1, r0
	asrs r0, r0, #1
	movs r1, #0x10
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	cmp r1, #0
	blt _080CC3A0
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetSpecialColorEffectsParameters
	b _080CC3B0
	.align 2, 0
_080CC39C: .4byte gLCDControlBuffer
_080CC3A0:
	negs r3, r3
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetSpecialColorEffectsParameters
_080CC3B0:
	ldr r1, [r5, #0x30]
	ldr r0, _080CC420  @ 0x00000E0F
	cmp r1, r0
	bgt _080CC3C6
	ldr r0, _080CC424  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	ldr r0, _080CC428  @ 0x000003FF
	ands r0, r1
	cmp r0, #0
	beq _080CC416
_080CC3C6:
	movs r4, #0
	str r4, [r5, #0x30]
	ldr r2, _080CC42C  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001F0C
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080CC416:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CC420: .4byte 0x00000E0F
_080CC424: .4byte gKeyStatusPtr
_080CC428: .4byte 0x000003FF
_080CC42C: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80CC430
sub_80CC430: @ 0x080CC430
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r3, [r4, #0x30]
	adds r3, #1
	str r3, [r4, #0x30]
	ldr r0, _080CC464  @ gUnknown_08B125F4
	movs r1, #0x1e
	subs r3, r1, r3
	str r1, [sp]
	movs r1, #0
	movs r2, #1
	bl sub_80CBEF8
	ldr r0, [r4, #0x30]
	cmp r0, #0x1d
	ble _080CC45C
	movs r0, #0x28
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_ClearNativeCallback
_080CC45C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080CC464: .4byte gUnknown_08B125F4

	THUMB_FUNC_START MakePromotionScreen
MakePromotionScreen: @ 0x080CC468
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	adds r1, r6, #0
	adds r1, #0x30
	movs r0, #0
	strb r0, [r1]
	adds r0, r6, #0
	bl Make6C_PromotionMain
	str r0, [r6, #0x2c]
	adds r1, r0, #0
	adds r1, #0x38
	strb r4, [r1]
	adds r0, #0x39
	strb r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START Make6C_PromotionMain
Make6C_PromotionMain: @ 0x080CC498
	push {lr}
	adds r1, r0, #0
	ldr r0, _080CC4A8  @ gUnknown_08B12614
	bl Proc_CreateBlockingChild
	pop {r1}
	bx r1
	.align 2, 0
_080CC4A8: .4byte gUnknown_08B12614

	THUMB_FUNC_START sub_80CC4AC
sub_80CC4AC: @ 0x080CC4AC
	push {r4, r5, lr}
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r1, [r0, #0x30]
	str r1, [r0, #0x34]
	ldr r4, [r0, #0x14]
	adds r5, r4, #0
	adds r5, #0x31
	ldrb r0, [r5]
	cmp r0, #0
	bne _080CC502
	bl ResetFaces
	bl Font_InitForUIDefault
	bl LoadUiFrameGraphics
	bl LoadObjUIGfx
	ldr r3, _080CC5B0  @ gLCDControlBuffer
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
_080CC502:
	ldrb r0, [r5]
	cmp r0, #1
	bne _080CC578
	ldr r4, [r4, #0x14]
	movs r0, #0
	bl SetupBackgrounds
	bl EndGreenTextColorManager
	bl GetThread2SkipStack
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [r4, #0x40]
	bl EndHelpPromptSprite
	bl sub_80ADC90
	bl DeleteEach6CDifferedLoop
	movs r0, #0
	bl DeleteFaceByIndex
	movs r0, #0
	bl sub_80ACA84
	bl ResetFaces
	bl Font_InitForUIDefault
	bl LoadUiFrameGraphics
	bl LoadObjUIGfx
	ldr r3, _080CC5B0  @ gLCDControlBuffer
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #2
	bl BG_EnableSyncByMask
_080CC578:
	ldrb r0, [r5]
	cmp r0, #2
	bne _080CC5AA
	ldr r3, _080CC5B0  @ gLCDControlBuffer
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
_080CC5AA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CC5B0: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80CC5B4
sub_80CC5B4: @ 0x080CC5B4
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x14]
	adds r0, r1, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #1
	beq _080CC5DE
	cmp r0, #1
	bgt _080CC5CE
	cmp r0, #0
	beq _080CC5D4
	b _080CC622
_080CC5CE:
	cmp r0, #2
	beq _080CC5F6
	b _080CC622
_080CC5D4:
	adds r0, r2, #0
	movs r1, #2
	bl Proc_GotoLabel
	b _080CC622
_080CC5DE:
	adds r0, r1, #0
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CC600
	cmp r0, #1
	bne _080CC622
	adds r0, r2, #0
	movs r1, #4
	bl Proc_GotoLabel
	b _080CC622
_080CC5F6:
	adds r0, r1, #0
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CC616
_080CC600:
	adds r0, r1, #0
	adds r0, #0x35
	ldrb r0, [r0]
	adds r1, r2, #0
	adds r1, #0x3b
	strb r0, [r1]
	adds r0, r2, #0
	movs r1, #5
	bl Proc_GotoLabel
	b _080CC622
_080CC616:
	cmp r0, #1
	bne _080CC622
	adds r0, r2, #0
	movs r1, #4
	bl Proc_GotoLabel
_080CC622:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CC628
sub_80CC628: @ 0x080CC628
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x14]
	adds r0, r1, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CC664
	adds r5, r1, #0
	adds r5, #0x34
	ldrb r0, [r5]
	cmp r0, #0
	bne _080CC656
	adds r0, r1, #0
	adds r0, #0x35
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x3b
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #5
	bl Proc_GotoLabel
_080CC656:
	ldrb r0, [r5]
	cmp r0, #1
	bne _080CC664
	adds r0, r4, #0
	movs r1, #4
	bl Proc_GotoLabel
_080CC664:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CC66C
sub_80CC66C: @ 0x080CC66C
	push {lr}
	ldr r0, [r0, #0x14]
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	blt _080CC694
	cmp r0, #1
	ble _080CC694
	cmp r0, #2
	bne _080CC694
	bl BMapDispResume
	bl SMS_UpdateFromGameData
	bl SetupMapSpritesPalettes
	bl SMS_FlushIndirect
	bl Font_LoadForUI
_080CC694:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CC698
sub_80CC698: @ 0x080CC698
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, [r4, #0x14]
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CC6BA
	bl sub_8002670
	movs r0, #0x80
	lsls r0, r0, #1
	bl Sound_SetVolume80022EC
	movs r0, #0x34
	bl sub_8002620
_080CC6BA:
	adds r1, r5, #0
	adds r1, #0x30
	movs r0, #2
	strb r0, [r1]
	adds r0, r4, #0
	bl sub_80ADDD4
	adds r0, r4, #0
	bl Proc_Delete
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CC6D4
sub_80CC6D4: @ 0x080CC6D4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r7, r0, #0
	mov r0, sp
	ldr r1, _080CC6FC  @ gUnknown_08207044
	ldm r1!, {r2, r3, r4}
	stm r0!, {r2, r3, r4}
	ldr r0, _080CC700  @ gUnknown_0202BCF0
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq _080CC6F6
	cmp r0, #3
	beq _080CC704
_080CC6F6:
	movs r5, #1
	mov r9, r5
	b _080CC708
	.align 2, 0
_080CC6FC: .4byte gUnknown_08207044
_080CC700: .4byte gUnknown_0202BCF0
_080CC704:
	movs r0, #0xf
	mov r9, r0
_080CC708:
	adds r1, r7, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, #0
	bne _080CC7EE
	strb r0, [r1]
	adds r1, #3
	movs r0, #1
	strb r0, [r1]
	movs r6, #0
	movs r3, #0
	mov r8, r1
	ldr r1, _080CC7C8  @ gUnknown_0895DFA5
	mov sl, r1
_080CC724:
	lsls r4, r3, #2
	mov r2, sp
	adds r5, r2, r4
	ldrb r0, [r5]
	str r3, [sp, #0xc]
	bl GetUnitFromCharId
	adds r2, r0, #0
	ldr r3, [sp, #0xc]
	cmp r2, #0
	bne _080CC73C
	movs r6, #1
_080CC73C:
	ldr r0, [r2, #0xc]
	ldr r1, _080CC7CC  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	beq _080CC748
	movs r6, #1
_080CC748:
	movs r1, #8
	ldrsb r1, [r2, r1]
	ldrb r0, [r5, #1]
	cmp r1, r0
	bge _080CC754
	movs r6, #1
_080CC754:
	ldr r0, [r2, #4]
	ldrb r2, [r0, #4]
	ldrb r0, [r5, #2]
	cmp r2, r0
	beq _080CC760
	movs r6, #1
_080CC760:
	ldr r1, _080CC7D0  @ gUnknown_0895DFA4
	lsls r2, r2, #1
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CC778
	mov r5, sl
	adds r0, r2, r5
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CC778
	movs r6, #1
_080CC778:
	cmp r6, #0
	bne _080CC7E0
	adds r1, r2, r1
	ldrb r3, [r1]
	cmp r3, #0
	beq _080CC79E
	mov r5, sl
	adds r0, r2, r5
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CC798
	adds r0, r7, #0
	adds r0, #0x35
	strb r3, [r0]
	mov r0, r8
	strb r6, [r0]
_080CC798:
	ldrb r0, [r1]
	cmp r0, #0
	bne _080CC7B4
_080CC79E:
	mov r1, sl
	adds r0, r2, r1
	ldrb r1, [r0]
	cmp r1, #0
	beq _080CC7B4
	adds r3, r7, #0
	adds r3, #0x35
	movs r0, #0
	strb r1, [r3]
	mov r2, r8
	strb r0, [r2]
_080CC7B4:
	mov r3, sp
	adds r0, r3, r4
	ldrb r1, [r0]
	cmp r1, r9
	beq _080CC7D4
	mov r4, r9
	lsls r2, r4, #0x18
	adds r0, r7, #0
	lsrs r2, r2, #0x18
	b _080CC8E2
	.align 2, 0
_080CC7C8: .4byte gUnknown_0895DFA5
_080CC7CC: .4byte 0x00010004
_080CC7D0: .4byte gUnknown_0895DFA4
_080CC7D4:
	adds r0, r7, #0
	mov r1, r9
	movs r2, #2
	bl MakePromotionScreen
	b _080CC8E6
_080CC7E0:
	movs r6, #0
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #6
	bls _080CC724
	b _080CC8F0
_080CC7EE:
	cmp r0, #1
	bne _080CC864
	strb r0, [r1]
	adds r5, r7, #0
	adds r5, #0x34
	strb r0, [r5]
	adds r4, r7, #0
	adds r4, #0x33
	ldrb r0, [r4]
	bl GetUnitFromCharId
	adds r2, r0, #0
	ldr r0, [r2, #4]
	ldrb r2, [r0, #4]
	ldr r0, _080CC824  @ gUnknown_0895DFA4
	lsls r1, r2, #1
	adds r6, r1, r0
	ldrb r3, [r6]
	mov r8, r5
	cmp r3, #0
	bne _080CC828
	adds r0, #1
	adds r0, r1, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CC842
	b _080CC8F0
	.align 2, 0
_080CC824: .4byte gUnknown_0895DFA4
_080CC828:
	adds r0, #1
	adds r0, r1, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CC83C
	adds r1, r7, #0
	adds r1, #0x35
	strb r3, [r1]
	mov r5, r8
	strb r0, [r5]
_080CC83C:
	ldrb r0, [r6]
	cmp r0, #0
	bne _080CC8DC
_080CC842:
	ldr r0, _080CC860  @ gUnknown_0895DFA4
	lsls r1, r2, #1
	adds r0, #1
	adds r1, r1, r0
	ldrb r1, [r1]
	cmp r1, #0
	beq _080CC8DC
	adds r3, r7, #0
	adds r3, #0x35
	movs r0, #0
	strb r1, [r3]
	mov r1, r8
	strb r0, [r1]
	b _080CC8DC
	.align 2, 0
_080CC860: .4byte gUnknown_0895DFA4
_080CC864:
	cmp r0, #2
	bne _080CC8F0
	strb r0, [r1]
	adds r5, r7, #0
	adds r5, #0x34
	movs r0, #1
	strb r0, [r5]
	adds r4, r7, #0
	adds r4, #0x33
	ldrb r0, [r4]
	bl GetUnitFromCharId
	adds r2, r0, #0
	ldr r0, [r2, #4]
	ldrb r2, [r0, #4]
	ldr r0, _080CC8A4  @ gUnknown_0895DFA4
	lsls r1, r2, #1
	adds r6, r1, r0
	ldrb r3, [r6]
	mov r8, r5
	cmp r3, #0
	bne _080CC8A8
	adds r0, #1
	adds r0, r1, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CC8C2
	bl BMapDispResume
	bl RefreshBMapGraphics
	b _080CC8F0
	.align 2, 0
_080CC8A4: .4byte gUnknown_0895DFA4
_080CC8A8:
	adds r0, #1
	adds r0, r1, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CC8BC
	adds r1, r7, #0
	adds r1, #0x35
	strb r3, [r1]
	mov r3, r8
	strb r0, [r3]
_080CC8BC:
	ldrb r0, [r6]
	cmp r0, #0
	bne _080CC8DC
_080CC8C2:
	ldr r0, _080CC8EC  @ gUnknown_0895DFA4
	lsls r1, r2, #1
	adds r0, #1
	adds r1, r1, r0
	ldrb r1, [r1]
	cmp r1, #0
	beq _080CC8DC
	adds r3, r7, #0
	adds r3, #0x35
	movs r0, #0
	strb r1, [r3]
	mov r5, r8
	strb r0, [r5]
_080CC8DC:
	ldrb r1, [r4]
	adds r0, r7, #0
	movs r2, #1
_080CC8E2:
	bl MakePromotionScreen
_080CC8E6:
	movs r0, #1
	b _080CC8F2
	.align 2, 0
_080CC8EC: .4byte gUnknown_0895DFA4
_080CC8F0:
	movs r0, #2
_080CC8F2:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START PromotionInit_SetNullState
PromotionInit_SetNullState: @ 0x080CC904
	adds r0, #0x30
	movs r1, #0
	strb r1, [r0]
	movs r0, #0
	bx lr

	THUMB_FUNC_START PromotionInit_Loop
PromotionInit_Loop: @ 0x080CC910
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x30
	ldrb r1, [r4]
	cmp r1, #1
	beq _080CC938
	cmp r1, #1
	bgt _080CC926
	cmp r1, #0
	beq _080CC92C
	b _080CC938
_080CC926:
	cmp r1, #2
	beq _080CC934
	b _080CC938
_080CC92C:
	bl sub_80CC6D4
	strb r0, [r4]
	b _080CC938
_080CC934:
	bl Proc_ClearNativeCallback
_080CC938:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CC940
sub_80CC940: @ 0x080CC940
	push {lr}
	adds r1, r0, #0
	ldr r0, _080CC984  @ gUnknown_08B126CC
	bl Proc_CreateBlockingChild
	adds r2, r0, #0
	adds r0, #0x31
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	str r1, [r2, #0x38]
	movs r0, #1
	negs r0, r0
	str r0, [r2, #0x3c]
	ldr r2, _080CC988  @ gBattleActor
	ldr r3, _080CC98C  @ gBattleTarget
	adds r0, r3, #0
	adds r0, #0x4a
	strh r1, [r0]
	adds r0, r2, #0
	adds r0, #0x4a
	strh r1, [r0]
	adds r0, r3, #0
	adds r0, #0x48
	strh r1, [r0]
	adds r2, #0x48
	strh r1, [r2]
	adds r1, r3, #0
	adds r1, #0x6f
	movs r0, #0xff
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_080CC984: .4byte gUnknown_08B126CC
_080CC988: .4byte gBattleActor
_080CC98C: .4byte gBattleTarget

	THUMB_FUNC_START sub_80CC990
sub_80CC990: @ 0x080CC990
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r2, [r5, #0x30]
	movs r0, #1
	negs r0, r0
	cmp r2, r0
	beq _080CC9B6
	ldr r3, _080CCA08  @ gBattleActor
	ldr r1, _080CCA0C  @ gBattleTarget
	ldr r0, [r5, #0x2c]
	lsls r2, r2, #1
	adds r0, #0x1e
	adds r0, r0, r2
	ldrh r2, [r0]
	adds r1, #0x4a
	strh r2, [r1]
	ldrh r0, [r0]
	adds r3, #0x4a
	strh r0, [r3]
_080CC9B6:
	ldr r0, [r5, #0x2c]
	bl GetUnitEquippedWeapon
	ldr r1, _080CCA08  @ gBattleActor
	ldr r2, _080CCA0C  @ gBattleTarget
	adds r3, r2, #0
	adds r3, #0x48
	movs r4, #0
	strh r0, [r3]
	adds r1, #0x48
	strh r0, [r1]
	adds r2, #0x6f
	movs r0, #0xff
	strb r0, [r2]
	ldr r0, _080CCA10  @ gUnknown_08B126CC
	adds r1, r5, #0
	bl Proc_CreateBlockingChild
	adds r3, r0, #0
	adds r1, r3, #0
	adds r1, #0x31
	movs r0, #1
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x32
	strb r4, [r0]
	ldr r1, [r3, #0x14]
	ldr r0, [r1, #0x2c]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	adds r2, r3, #0
	adds r2, #0x33
	strb r0, [r2]
	ldr r0, [r1, #0x2c]
	str r0, [r3, #0x38]
	ldr r0, [r1, #0x30]
	str r0, [r3, #0x3c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CCA08: .4byte gBattleActor
_080CCA0C: .4byte gBattleTarget
_080CCA10: .4byte gUnknown_08B126CC

	THUMB_FUNC_START sub_80CCA14
sub_80CCA14: @ 0x080CCA14
	push {r4, r5, lr}
	adds r1, r0, #0
	ldr r0, _080CCA5C  @ gUnknown_08B126CC
	bl Proc_CreateBlockingChild
	adds r5, r0, #0
	adds r2, r5, #0
	adds r2, #0x31
	movs r1, #0
	movs r0, #2
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x32
	strb r1, [r0]
	ldr r4, _080CCA60  @ gActionData
	ldrb r0, [r4, #0xc]
	bl GetUnit
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	adds r1, r5, #0
	adds r1, #0x33
	strb r0, [r1]
	ldrb r0, [r4, #0xc]
	bl GetUnit
	str r0, [r5, #0x38]
	ldrb r0, [r4, #0x12]
	str r0, [r5, #0x3c]
	bl BMapDispSuspend
	bl MU_EndAll
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CCA5C: .4byte gUnknown_08B126CC
_080CCA60: .4byte gActionData

	THUMB_FUNC_START sub_80CCA64
sub_80CCA64: @ 0x080CCA64
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8006978
	bl sub_8008250
	movs r0, #2
	movs r1, #0xf
	adds r2, r4, #0
	bl sub_8006A30
	movs r0, #0
	bl sub_8006B10
	movs r0, #1
	bl sub_8006AA8
	movs r0, #2
	bl sub_8006AA8
	movs r0, #4
	bl sub_8006AA8
	movs r0, #8
	bl sub_8006AA8
	movs r0, #0x40
	bl sub_8006AA8
	movs r0, #4
	bl sub_8006AF0
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CCAAC
sub_80CCAAC: @ 0x080CCAAC
	push {r4, r5, lr}
	sub sp, #0x20
	adds r4, r0, #0
	lsls r0, r1, #0x10
	lsrs r0, r0, #0x10
	adds r2, r4, #0
	adds r2, #0x44
	movs r3, #0
	movs r1, #0
	strh r1, [r2]
	adds r5, r4, #0
	adds r5, #0x46
	strb r3, [r5]
	adds r2, #3
	movs r1, #0x78
	strb r1, [r2]
	bl GetClassData
	ldrh r0, [r0]
	mov r1, sp
	bl GetStringFromIndexInBuffer
	mov r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080CCB16
	mov r4, sp
_080CCAE6:
	ldrb r0, [r4]
	bl sub_80B4108
	adds r1, r0, #0
	cmp r1, #0
	beq _080CCAFE
	ldrb r0, [r1, #5]
	ldrb r1, [r1, #4]
	subs r0, r0, r1
	ldrb r1, [r5]
	adds r0, r0, r1
	b _080CCB02
_080CCAFE:
	ldrb r0, [r5]
	adds r0, #4
_080CCB02:
	strb r0, [r5]
	adds r4, #1
	mov r0, sp
	adds r0, #0x13
	cmp r4, r0
	bgt _080CCB16
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _080CCAE6
_080CCB16:
	ldr r0, _080CCB34  @ gUnknown_08A36338
	ldr r1, _080CCB38  @ 0x06011000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080CCB3C  @ gUnknown_08A372C0
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x40
	bl CopyToPaletteBuffer
	add sp, #0x20
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CCB34: .4byte gUnknown_08A36338
_080CCB38: .4byte 0x06011000
_080CCB3C: .4byte gUnknown_08A372C0

	THUMB_FUNC_START sub_80CCB40
sub_80CCB40: @ 0x080CCB40
	push {r4, r5, r6, r7, lr}
	sub sp, #0x24
	adds r7, r0, #0
	adds r0, #0x41
	ldrb r1, [r0]
	lsls r1, r1, #1
	subs r0, #0x15
	adds r0, r0, r1
	ldrh r0, [r0]
	movs r6, #0x74
	bl GetClassData
	ldrh r0, [r0]
	add r1, sp, #4
	bl GetStringFromIndexInBuffer
	add r0, sp, #4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080CCBBC
	add r5, sp, #4
_080CCB6E:
	ldrb r0, [r5]
	bl sub_80B4108
	adds r4, r0, #0
	cmp r4, #0
	beq _080CCBA8
	ldr r3, [r4]
	cmp r3, #0
	beq _080CCBAA
	movs r1, #4
	ldrsb r1, [r4, r1]
	subs r1, r6, r1
	subs r1, #2
	movs r2, #6
	ldrsb r2, [r4, r2]
	adds r2, #6
	movs r0, #0x81
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	bl RegisterObjectAttributes
	movs r0, #5
	ldrsb r0, [r4, r0]
	movs r1, #4
	ldrsb r1, [r4, r1]
	subs r0, r0, r1
	adds r6, r6, r0
	b _080CCBAA
_080CCBA8:
	adds r6, #4
_080CCBAA:
	adds r5, #1
	mov r0, sp
	adds r0, #0x17
	cmp r5, r0
	bgt _080CCBBC
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	bne _080CCB6E
_080CCBBC:
	adds r1, r7, #0
	adds r1, #0x44
	ldrh r0, [r1]
	cmp r0, #0xfe
	bhi _080CCBCA
	adds r0, #1
	strh r0, [r1]
_080CCBCA:
	add sp, #0x24
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CCBD4
sub_80CCBD4: @ 0x080CCBD4
	push {lr}
	bl sub_805A9E0
	ldr r0, _080CCBEC  @ gUnknown_030053A0
	bl sub_805AA28
	ldr r0, _080CCBF0  @ gUnknown_0201FADC
	bl sub_805AE14
	pop {r0}
	bx r0
	.align 2, 0
_080CCBEC: .4byte gUnknown_030053A0
_080CCBF0: .4byte gUnknown_0201FADC

	THUMB_FUNC_START sub_80CCBF4
sub_80CCBF4: @ 0x080CCBF4
	push {r4, lr}
	ldr r4, _080CCC1C  @ gUnknown_08A30800
	movs r0, #2
	bl GetBackgroundTileDataOffset
	adds r1, r0, #0
	ldr r0, _080CCC20  @ 0x06003000
	adds r1, r1, r0
	adds r0, r4, #0
	bl CopyDataWithPossibleUncomp
	ldr r0, _080CCC24  @ gBG2TilemapBuffer
	ldr r1, _080CCC28  @ gUnknown_08A30978
	movs r2, #0x8c
	lsls r2, r2, #5
	bl sub_80CCCE0
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080CCC1C: .4byte gUnknown_08A30800
_080CCC20: .4byte 0x06003000
_080CCC24: .4byte gBG2TilemapBuffer
_080CCC28: .4byte gUnknown_08A30978

	THUMB_FUNC_START sub_80CCC2C
sub_80CCC2C: @ 0x080CCC2C
	push {r4, r5, r6, lr}
	sub sp, #0x24
	adds r6, r0, #0
	ldr r0, _080CCC9C  @ gBG2TilemapBuffer
	movs r1, #6
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	movs r1, #1
	str r1, [sp, #8]
	movs r1, #2
	movs r2, #1
	movs r3, #0xa
	bl DrawUiFrame
	movs r0, #0
	bl SetFontGlyphSet
	movs r0, #0
	bl SetFont
	ldrh r0, [r6, #0x2c]
	bl GetClassData
	ldrh r0, [r0]
	bl GetStringFromIndex
	ldr r4, _080CCCA0  @ gUnknown_02022D2E
	movs r5, #8
	str r5, [sp]
	str r0, [sp, #4]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	ldrh r0, [r6, #0x2e]
	bl GetClassData
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r4, #0x80
	str r5, [sp]
	str r0, [sp, #4]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	add sp, #0x24
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080CCC9C: .4byte gBG2TilemapBuffer
_080CCCA0: .4byte gUnknown_02022D2E

	THUMB_FUNC_START sub_80CCCA4
sub_80CCCA4: @ 0x080CCCA4
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080CCCBE
	bl sub_80A2DE4
	mov r0, sp
	bl LoadSomeUnitStatThingUnlockIdk
_080CCCBE:
	mov r0, sp
	ldrb r1, [r0, #0xe]
	movs r0, #0x1c
	ands r0, r1
	cmp r0, #0
	beq _080CCCD6
	movs r0, #0xe0
	ands r0, r1
	cmp r0, #0
	beq _080CCCD6
	movs r0, #1
	b _080CCCD8
_080CCCD6:
	movs r0, #0
_080CCCD8:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CCCE0
sub_80CCCE0: @ 0x080CCCE0
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	lsls r2, r2, #0x10
	lsrs r5, r2, #0x10
	adds r4, r1, #2
	movs r2, #0xff
	ldr r0, [r1]
	ldrb r6, [r1]
	lsrs r3, r0, #8
	ands r3, r2
	lsls r1, r3, #0x10
	cmp r3, #0xc
	ble _080CCD28
_080CCCFA:
	asrs r0, r1, #0xa
	adds r2, r7, r0
	lsls r1, r6, #0x10
	asrs r0, r1, #0x10
	lsls r3, r3, #0x10
	cmp r0, #0
	blt _080CCD1A
_080CCD08:
	ldrh r0, [r4]
	adds r0, r5, r0
	strh r0, [r2]
	adds r4, #2
	adds r2, #2
	ldr r0, _080CCD30  @ 0xFFFF0000
	adds r1, r1, r0
	cmp r1, #0
	bge _080CCD08
_080CCD1A:
	ldr r1, _080CCD30  @ 0xFFFF0000
	adds r0, r3, r1
	lsrs r3, r0, #0x10
	lsls r1, r3, #0x10
	asrs r0, r1, #0x10
	cmp r0, #0xc
	bgt _080CCCFA
_080CCD28:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CCD30: .4byte 0xFFFF0000

	THUMB_FUNC_START Make6C_PromotionSub
Make6C_PromotionSub: @ 0x080CCD34
	push {lr}
	adds r1, r0, #0
	ldr r0, _080CCD44  @ gUnknown_08B1271C
	bl Proc_CreateBlockingChild
	pop {r1}
	bx r1
	.align 2, 0
_080CCD44: .4byte gUnknown_08B1271C

	THUMB_FUNC_START sub_80CCD48
sub_80CCD48: @ 0x080CCD48
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	adds r5, r0, #0
	ldr r0, [r5, #0x14]
	str r0, [sp, #4]
	adds r1, r0, #0
	adds r1, #0x29
	movs r4, #0
	movs r0, #2
	strb r0, [r1]
	ldr r0, [sp, #4]
	adds r0, #0x38
	ldrb r0, [r0]
	adds r1, r5, #0
	adds r1, #0x42
	strh r0, [r1]
	movs r0, #9
	str r0, [r5, #0x50]
	ldr r0, _080CCE80  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080CCE84  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080CCE88  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	bl LoadUiFrameGraphics
	bl LoadObjUIGfx
	movs r1, #1
	negs r1, r1
	movs r2, #0xfb
	lsls r2, r2, #1
	movs r0, #6
	str r0, [sp]
	movs r0, #0
	movs r3, #0x58
	bl sub_80CD47C
	bl sub_80CCBF4
	ldr r0, [r5, #0x50]
	movs r1, #0x8c
	lsls r1, r1, #1
	movs r2, #0x68
	bl sub_80CD408
	strh r4, [r5, #0x32]
	strh r4, [r5, #0x34]
	strh r4, [r5, #0x36]
	movs r4, #1
_080CCDC0:
	adds r0, r4, #0
	bl GetUnit
	mov sl, r0
	cmp r0, #0
	bne _080CCDCE
	b _080CCEEE
_080CCDCE:
	ldr r0, [r0]
	cmp r0, #0
	bne _080CCDD6
	b _080CCEEE
_080CCDD6:
	adds r1, r5, #0
	adds r1, #0x42
	ldrb r0, [r0, #4]
	ldrh r1, [r1]
	cmp r0, r1
	beq _080CCDE4
	b _080CCEEE
_080CCDE4:
	mov r1, sl
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	str r0, [sp, #8]
	mov r0, sl
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r9, r0
	movs r2, #0
	mov r8, r2
	adds r0, r5, #0
	adds r0, #0x4a
	str r0, [sp, #0x18]
	adds r1, r5, #0
	adds r1, #0x48
	str r1, [sp, #0x14]
	adds r2, r5, #0
	adds r2, #0x40
	str r2, [sp, #0xc]
	subs r0, #9
	str r0, [sp, #0x10]
	adds r3, r5, #0
	adds r3, #0x38
	adds r7, r5, #0
	adds r7, #0x32
	adds r6, r5, #0
	adds r6, #0x2c
_080CCE1E:
	ldr r1, [sp, #8]
	lsls r4, r1, #1
	add r4, r8
	ldr r2, _080CCE8C  @ gUnknown_0895DFA4
	adds r4, r4, r2
	ldrb r0, [r4]
	strh r0, [r6]
	ldrb r1, [r4]
	adds r0, r7, #0
	mov r2, r9
	str r3, [sp, #0x1c]
	bl sub_80CD570
	ldr r1, [sp, #0x18]
	add r1, r8
	strb r0, [r1]
	ldrb r0, [r4]
	bl GetClassData
	ldrh r0, [r0, #2]
	ldr r3, [sp, #0x1c]
	strh r0, [r3]
	adds r3, #2
	adds r7, #2
	adds r6, #2
	movs r0, #1
	add r8, r0
	mov r1, r8
	cmp r1, #1
	ble _080CCE1E
	mov r0, r9
	ldr r2, [sp, #0x14]
	strh r0, [r2]
	bl sub_80CCCA4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080CCF02
	mov r1, sl
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	str r0, [sp, #8]
	cmp r0, #0x3e
	beq _080CCEB2
	cmp r0, #0x3e
	bgt _080CCE90
	cmp r0, #0x3d
	beq _080CCE98
	b _080CCF02
	.align 2, 0
_080CCE80: .4byte gBG0TilemapBuffer
_080CCE84: .4byte gBG1TilemapBuffer
_080CCE88: .4byte gBG2TilemapBuffer
_080CCE8C: .4byte gUnknown_0895DFA4
_080CCE90:
	ldr r2, [sp, #8]
	cmp r2, #0x47
	beq _080CCECC
	b _080CCF02
_080CCE98:
	movs r0, #0x7e
	strh r0, [r5, #0x30]
	adds r0, r5, #0
	adds r0, #0x36
	movs r1, #0x7e
	mov r2, r9
	bl sub_80CD570
	adds r1, r5, #0
	adds r1, #0x4c
	strb r0, [r1]
	movs r0, #0x7e
	b _080CCEE4
_080CCEB2:
	movs r0, #0x7f
	strh r0, [r5, #0x30]
	adds r0, r5, #0
	adds r0, #0x36
	movs r1, #0x7f
	mov r2, r9
	bl sub_80CD570
	adds r1, r5, #0
	adds r1, #0x4c
	strb r0, [r1]
	movs r0, #0x7f
	b _080CCEE4
_080CCECC:
	movs r0, #0x37
	strh r0, [r5, #0x30]
	adds r0, r5, #0
	adds r0, #0x36
	movs r1, #0x37
	mov r2, r9
	bl sub_80CD570
	adds r1, r5, #0
	adds r1, #0x4c
	strb r0, [r1]
	movs r0, #0x37
_080CCEE4:
	bl GetClassData
	ldrh r0, [r0, #2]
	strh r0, [r5, #0x3c]
	b _080CCF02
_080CCEEE:
	adds r4, #1
	adds r0, r5, #0
	adds r0, #0x40
	str r0, [sp, #0xc]
	adds r1, r5, #0
	adds r1, #0x41
	str r1, [sp, #0x10]
	cmp r4, #0x3f
	bgt _080CCF02
	b _080CCDC0
_080CCF02:
	ldrh r0, [r5, #0x32]
	cmp r0, #0
	bne _080CCF12
	ldrh r0, [r5, #0x34]
	cmp r0, #0
	bne _080CCF12
	strh r0, [r5, #0x34]
	strh r0, [r5, #0x32]
_080CCF12:
	movs r1, #0
	movs r0, #1
	ldr r2, [sp, #0xc]
	strb r0, [r2]
	ldr r0, [sp, #0x10]
	strb r1, [r0]
	adds r0, r5, #0
	ldr r1, [sp, #8]
	bl sub_80CCAAC
	adds r0, r5, #0
	bl sub_80CCB40
	bl LoadObjUIGfx
	adds r0, r5, #0
	bl Make6C_PromotionMenuSelect
	str r0, [r5, #0x54]
	ldr r1, [sp, #4]
	ldr r0, [r1, #0x14]
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #1
	bne _080CCF4E
	bl sub_8095A1C
	movs r0, #0xf
	bl BG_EnableSyncByMask
_080CCF4E:
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CCF60
sub_80CCF60: @ 0x080CCF60
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8003D20
	bl Font_InitForUIDefault
	movs r0, #0xf
	bl BG_EnableSyncByMask
	movs r0, #0x80
	lsls r0, r0, #1
	movs r1, #2
	movs r2, #0
	bl sub_800680C
	adds r0, r4, #0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r4, #0x38
	adds r4, r4, r0
	movs r1, #0
	ldrsh r0, [r4, r1]
	bl sub_80CCA64
	movs r0, #1
	negs r0, r0
	bl sub_8006AF0
	ldr r3, _080CD004  @ gLCDControlBuffer
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #0xf
	bl BG_EnableSyncByMask
	ldr r3, _080CD008  @ 0x04000008
	ldrh r2, [r3]
	ldr r1, _080CD00C  @ 0x0000FFFC
	adds r0, r1, #0
	ands r0, r2
	adds r0, #1
	strh r0, [r3]
	adds r3, #2
	ldrh r2, [r3]
	adds r0, r1, #0
	ands r0, r2
	adds r0, #1
	strh r0, [r3]
	adds r3, #2
	ldrh r2, [r3]
	adds r0, r1, #0
	ands r0, r2
	adds r0, #1
	strh r0, [r3]
	ldr r2, _080CD010  @ 0x0400000E
	ldrh r0, [r2]
	ands r1, r0
	adds r1, #1
	strh r1, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080CD004: .4byte gLCDControlBuffer
_080CD008: .4byte 0x04000008
_080CD00C: .4byte 0x0000FFFC
_080CD010: .4byte 0x0400000E

	THUMB_FUNC_START sub_80CD014
sub_80CD014: @ 0x080CD014
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x5c
	mov r9, r0
	ldr r0, _080CD06C  @ gUnknown_030053A0
	ldr r1, [r0, #0x14]
	str r1, [sp, #0x50]
	ldr r2, [r0, #0x18]
	str r2, [sp, #0x54]
	ldr r1, _080CD070  @ gUnknown_0201FADC
	ldr r7, [r1, #0x14]
	ldr r1, [r1, #0x18]
	mov sl, r1
	mov r3, r9
	adds r3, #0x40
	ldrb r1, [r3]
	adds r4, r0, #0
	cmp r1, #1
	beq _080CD042
	b _080CD164
_080CD042:
	ldrh r2, [r7, #0x32]
	movs r0, #0x32
	ldrsh r1, [r7, r0]
	ldr r0, _080CD074  @ 0x00000117
	cmp r1, r0
	bgt _080CD08C
	adds r0, r2, #0
	adds r0, #0xc
	strh r0, [r7, #0x32]
	mov r1, sl
	ldrh r0, [r1, #0x32]
	adds r0, #0xc
	strh r0, [r1, #0x32]
	ldr r2, [sp, #0x50]
	ldrh r0, [r2, #2]
	adds r0, #0xc
	strh r0, [r2, #2]
	ldr r3, [sp, #0x54]
	strh r0, [r3, #2]
	b _080CD090
	.align 2, 0
_080CD06C: .4byte gUnknown_030053A0
_080CD070: .4byte gUnknown_0201FADC
_080CD074: .4byte 0x00000117
_080CD078:
	ldr r0, _080CD088  @ gUnknown_0895EEA4
	adds r0, r2, r0
	ldrb r0, [r0]
	subs r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #0x58]
	b _080CD130
	.align 2, 0
_080CD088: .4byte gUnknown_0895EEA4
_080CD08C:
	movs r0, #2
	strb r0, [r3]
_080CD090:
	mov r0, r9
	adds r0, #0x40
	ldrb r0, [r0]
	cmp r0, #2
	beq _080CD09C
	b _080CD1AC
_080CD09C:
	bl sub_805A9E0
	ldr r0, _080CD198  @ gUnknown_030053A0
	bl sub_805AA28
	mov r1, r9
	adds r1, #0x42
	ldrh r4, [r1]
	subs r4, #1
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r0, #0x41
	add r0, r9
	mov r8, r0
	ldrb r0, [r0]
	lsls r0, r0, #1
	mov r5, r9
	adds r5, #0x2c
	adds r0, r5, r0
	ldrh r6, [r0]
	ldr r2, _080CD19C  @ 0x0000FFFF
	str r2, [sp, #0x58]
	ldrh r0, [r1]
	bl GetUnitFromCharId
	adds r1, r0, #0
	add r0, sp, #4
	movs r2, #0x48
	bl memcpy
	mov r3, r8
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r5, r5, r0
	ldrh r0, [r5]
	bl GetClassData
	str r0, [sp, #8]
	ldr r5, [r0, #0x34]
	add r0, sp, #4
	bl GetUnitEquippedWeapon
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	add r3, sp, #0x4c
	add r0, sp, #4
	adds r1, r5, #0
	bl GetBattleAnimationId
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	movs r1, #0
	ldr r5, _080CD1A0  @ gUnknown_0895E0A4
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	lsls r0, r4, #3
	subs r3, r0, r4
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
_080CD116:
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	adds r2, r1, r3
	adds r0, r2, r5
	ldrb r0, [r0]
	cmp r0, r6
	beq _080CD078
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #6
	ble _080CD116
_080CD130:
	mov r1, r8
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	ldr r2, [sp, #0x58]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	ldrh r2, [r7, #0x32]
	adds r2, #0x28
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r3, #6
	str r3, [sp]
	movs r3, #0x58
	bl sub_80CD47C
	ldr r0, _080CD1A4  @ gUnknown_0201FADC
	bl sub_805AE14
	mov r3, r9
	ldr r0, [r3, #0x50]
	movs r2, #0x32
	ldrsh r1, [r7, r2]
	movs r3, #0x3a
	ldrsh r2, [r7, r3]
	bl sub_80CD408
_080CD164:
	mov r1, r9
	adds r1, #0x40
	ldrb r0, [r1]
	ldr r4, _080CD198  @ gUnknown_030053A0
	cmp r0, #2
	bne _080CD1AC
	ldrh r2, [r7, #0x32]
	movs r3, #0x32
	ldrsh r0, [r7, r3]
	cmp r0, #0x82
	ble _080CD1A8
	movs r1, #0xc
	subs r0, r2, r1
	strh r0, [r7, #0x32]
	mov r2, sl
	ldrh r0, [r2, #0x32]
	subs r0, r0, r1
	strh r0, [r2, #0x32]
	ldr r3, [sp, #0x50]
	ldrh r0, [r3, #2]
	subs r0, r0, r1
	strh r0, [r3, #2]
	ldr r1, [sp, #0x54]
	strh r0, [r1, #2]
	b _080CD1AC
	.align 2, 0
_080CD198: .4byte gUnknown_030053A0
_080CD19C: .4byte 0x0000FFFF
_080CD1A0: .4byte gUnknown_0895E0A4
_080CD1A4: .4byte gUnknown_0201FADC
_080CD1A8:
	movs r0, #0
	strb r0, [r1]
_080CD1AC:
	adds r0, r4, #0
	bl sub_805A96C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080CD1BE
	adds r0, r4, #0
	bl sub_805A990
_080CD1BE:
	mov r0, r9
	bl sub_80CCB40
	add sp, #0x5c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CD1D4
sub_80CD1D4: @ 0x080CD1D4
	push {r4, r5, lr}
	ldr r4, [r0, #0x14]
	ldr r5, [r4, #0x14]
	adds r1, r5, #0
	adds r1, #0x31
	ldrb r1, [r1]
	cmp r1, #0
	beq _080CD208
	cmp r1, #1
	bne _080CD208
	bl Proc_Delete
	adds r0, r4, #0
	bl Proc_Delete
	adds r0, r5, #0
	bl Proc_Delete
	ldr r0, _080CD210  @ gUnknown_030053A0
	bl sub_805AA28
	ldr r0, _080CD214  @ gUnknown_0201FADC
	bl sub_805AE14
	bl sub_805A9E0
_080CD208:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CD210: .4byte gUnknown_030053A0
_080CD214: .4byte gUnknown_0201FADC

	THUMB_FUNC_START sub_80CD218
sub_80CD218: @ 0x080CD218
	push {r4, r5, r6, lr}
	adds r1, r0, #0
	ldr r5, [r1, #0x14]
	ldr r4, [r5, #0x14]
	ldr r6, [r4, #0x14]
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #2
	bne _080CD27C
	adds r0, r1, #0
	bl Proc_Delete
	adds r0, r5, #0
	bl Proc_Delete
	adds r0, r4, #0
	bl Proc_Delete
	ldr r0, _080CD284  @ gUnknown_030053A0
	bl sub_805AA28
	ldr r0, _080CD288  @ gUnknown_0201FADC
	bl sub_805AE14
	bl sub_805A9E0
	ldr r1, _080CD28C  @ gActionData
	movs r0, #0
	strb r0, [r1, #0x11]
	adds r0, r6, #0
	movs r1, #2
	bl Proc_GotoLabel
	bl BMapDispResume
	bl RefreshBMapGraphics
	bl RefreshEntityBmMaps
	bl RenderBmMap
	bl SMS_UpdateFromGameData
	bl MU_EndAll
	ldr r0, _080CD290  @ gActiveUnit
	ldr r0, [r0]
	bl MU_Create
_080CD27C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080CD284: .4byte gUnknown_030053A0
_080CD288: .4byte gUnknown_0201FADC
_080CD28C: .4byte gActionData
_080CD290: .4byte gActiveUnit

	THUMB_FUNC_START sub_80CD294
sub_80CD294: @ 0x080CD294
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x14]
	ldr r0, [r0, #0x14]
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CD2AE
	adds r0, r1, #0
	movs r1, #4
	bl Proc_GotoLabel
	b _080CD2C6
_080CD2AE:
	cmp r0, #1
	bne _080CD2BA
	adds r0, r1, #0
	bl Proc_ClearNativeCallback
	b _080CD2C6
_080CD2BA:
	cmp r0, #2
	bne _080CD2C6
	adds r0, r1, #0
	movs r1, #4
	bl Proc_GotoLabel
_080CD2C6:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CD2CC
sub_80CD2CC: @ 0x080CD2CC
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x14]
	ldr r0, [r0, #0x14]
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CD2E0
	cmp r0, #1
	bne _080CD2EA
_080CD2E0:
	adds r0, r1, #0
	movs r1, #5
	bl Proc_GotoLabel
	b _080CD2F4
_080CD2EA:
	cmp r0, #2
	bne _080CD2F4
	adds r0, r1, #0
	bl Proc_ClearNativeCallback
_080CD2F4:
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CD2F8
sub_80CD2F8: @ 0x080CD2F8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	beq _080CD324
	cmp r0, #1
	bgt _080CD310
	cmp r0, #0
	beq _080CD314
	b _080CD328
_080CD310:
	cmp r0, #0xff
	bne _080CD328
_080CD314:
	adds r0, r5, #0
	bl Make6C_PromotionSub
	str r0, [r5, #0x34]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
_080CD324:
	movs r0, #0
	b _080CD32A
_080CD328:
	movs r0, #1
_080CD32A:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CD330
sub_80CD330: @ 0x080CD330
	push {lr}
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	blt _080CD346
	cmp r0, #1
	ble _080CD346
	cmp r0, #2
	bne _080CD346
	movs r0, #0
	b _080CD348
_080CD346:
	movs r0, #1
_080CD348:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CD34C
sub_80CD34C: @ 0x080CD34C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	movs r0, #1
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl sub_8001F0C
	ldr r0, _080CD404  @ gLCDControlBuffer
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r6, #0x20
	orrs r0, r6
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2d
	strb r4, [r0]
	adds r0, #4
	strb r4, [r0]
	adds r1, #0x2c
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	movs r2, #0x34
	add r2, ip
	mov r8, r2
	ldrb r1, [r2]
	movs r2, #1
	orrs r1, r2
	movs r0, #2
	orrs r1, r0
	movs r5, #4
	orrs r1, r5
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	mov r7, ip
	adds r7, #0x36
	ldrb r0, [r7]
	orrs r0, r2
	movs r2, #3
	negs r2, r2
	ands r0, r2
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	orrs r1, r6
	mov r2, r8
	strb r1, [r2]
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	strb r0, [r7]
	mov r1, ip
	adds r1, #0x3d
	ldrb r0, [r1]
	orrs r0, r6
	strb r0, [r1]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CD404: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80CD408
sub_80CD408: @ 0x080CD408
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r1, #0
	adds r6, r2, #0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	ldr r4, _080CD46C  @ gUnknown_0201FADC
	movs r2, #0
	strh r0, [r4]
	movs r1, #0xe
	strh r1, [r4, #2]
	movs r1, #0xe0
	lsls r1, r1, #2
	strh r1, [r4, #4]
	strh r0, [r4, #6]
	movs r0, #0xf
	strh r0, [r4, #8]
	movs r0, #0xf0
	lsls r0, r0, #2
	strh r0, [r4, #0xa]
	strh r2, [r4, #0xc]
	ldr r0, _080CD470  @ 0x0000FFFF
	strh r0, [r4, #0xe]
	ldr r0, _080CD474  @ 0x06010000
	str r0, [r4, #0x1c]
	ldr r0, _080CD478  @ gUnknown_020145C8
	str r0, [r4, #0x20]
	adds r0, r4, #0
	bl sub_805AA68
	lsls r5, r5, #0x10
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	asrs r1, r5, #0x10
	movs r0, #0xc0
	lsls r0, r0, #0xf
	adds r5, r5, r0
	asrs r5, r5, #0x10
	str r6, [sp]
	adds r0, r4, #0
	adds r2, r6, #0
	adds r3, r5, #0
	bl sub_805AE40
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080CD46C: .4byte gUnknown_0201FADC
_080CD470: .4byte 0x0000FFFF
_080CD474: .4byte 0x06010000
_080CD478: .4byte gUnknown_020145C8

	THUMB_FUNC_START sub_80CD47C
sub_80CD47C: @ 0x080CD47C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	mov r8, r0
	mov r9, r1
	lsls r2, r2, #0x10
	lsrs r7, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r6, r3, #0x10
	ldr r2, _080CD53C  @ gKeyStatusPtr
	ldr r0, [r2]
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	cmp r0, #0
	beq _080CD4A4
	ldr r1, _080CD540  @ gUnknown_03005408
	movs r0, #0
	strh r0, [r1]
_080CD4A4:
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r5, #0x80
	lsls r5, r5, #2
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _080CD4BC
	ldr r1, _080CD540  @ gUnknown_03005408
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
_080CD4BC:
	bl NewEfxAnimeDrvProc
	ldr r4, _080CD544  @ gUnknown_030053A0
	movs r2, #0
	movs r1, #0
	strh r7, [r4, #2]
	strh r6, [r4, #4]
	movs r3, #1
	strh r3, [r4, #0xc]
	mov r0, r8
	strh r0, [r4, #6]
	mov r0, r9
	strh r0, [r4, #8]
	ldr r0, [sp, #0x1c]
	strh r0, [r4, #0xa]
	strb r2, [r4, #1]
	strh r5, [r4, #0xe]
	movs r0, #0xa
	strh r0, [r4, #0x10]
	ldr r0, _080CD548  @ gUnknown_02000088
	str r0, [r4, #0x1c]
	ldr r0, _080CD54C  @ gUnknown_020041C8
	str r0, [r4, #0x24]
	ldr r0, _080CD550  @ gUnknown_02004088
	str r0, [r4, #0x20]
	ldr r0, _080CD554  @ gUnknown_0200F1C8
	str r0, [r4, #0x28]
	ldr r0, _080CD558  @ gUnknown_030053E0
	str r0, [r4, #0x30]
	movs r2, #4
	strh r2, [r0]
	strh r1, [r0, #2]
	strh r1, [r0, #4]
	strh r1, [r0, #6]
	strh r1, [r0, #8]
	movs r1, #0xc0
	lsls r1, r1, #2
	strh r1, [r0, #0xe]
	movs r1, #8
	strh r1, [r0, #0x10]
	strh r5, [r0, #0xa]
	strh r2, [r0, #0xc]
	strh r3, [r0, #0x12]
	ldr r1, _080CD55C  @ gBG1TilemapBuffer
	str r1, [r0, #0x14]
	ldr r1, _080CD560  @ gUnknown_02017790
	str r1, [r0, #0x18]
	ldr r1, _080CD564  @ gUnknown_02019790
	str r1, [r0, #0x1c]
	ldr r1, _080CD568  @ gUnknown_0201A790
	str r1, [r0, #0x20]
	ldr r1, _080CD56C  @ sub_80CD34C
	str r1, [r0, #0x24]
	bl sub_806E8F0
	adds r0, r4, #0
	bl sub_805AA00
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CD53C: .4byte gKeyStatusPtr
_080CD540: .4byte gUnknown_03005408
_080CD544: .4byte gUnknown_030053A0
_080CD548: .4byte gUnknown_02000088
_080CD54C: .4byte gUnknown_020041C8
_080CD550: .4byte gUnknown_02004088
_080CD554: .4byte gUnknown_0200F1C8
_080CD558: .4byte gUnknown_030053E0
_080CD55C: .4byte gBG1TilemapBuffer
_080CD560: .4byte gUnknown_02017790
_080CD564: .4byte gUnknown_02019790
_080CD568: .4byte gUnknown_0201A790
_080CD56C: .4byte sub_80CD34C

	THUMB_FUNC_START sub_80CD570
sub_80CD570: @ 0x080CD570
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r6, r2, #0x10
	adds r0, r7, #0
	bl GetClassData
	ldr r5, [r0, #0x34]
	adds r0, r6, #0
	bl GetItemType
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r0, #0
	strh r0, [r4]
	movs r2, #0
	b _080CD5A2
_080CD59C:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
_080CD5A2:
	lsls r0, r2, #2
	adds r1, r0, r5
	ldrh r0, [r1]
	cmp r0, r3
	bne _080CD5B2
	ldrh r0, [r1, #2]
	subs r0, #1
	strh r0, [r4]
_080CD5B2:
	ldrh r0, [r1, #2]
	cmp r0, #0
	bne _080CD59C
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _080CD5E8
	ldr r3, _080CD5C8  @ 0x00000109
	movs r2, #0
	b _080CD5D2
	.align 2, 0
_080CD5C8: .4byte 0x00000109
_080CD5CC:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
_080CD5D2:
	lsls r0, r2, #2
	adds r1, r0, r5
	ldrh r0, [r1]
	cmp r0, r3
	bne _080CD5E2
	ldrh r0, [r1, #2]
	subs r0, #1
	strh r0, [r4]
_080CD5E2:
	ldrh r0, [r1, #2]
	cmp r0, #0
	bne _080CD5CC
_080CD5E8:
	cmp r6, #0
	beq _080CD60C
	adds r0, r6, #0
	bl GetItemRequiredExp
	adds r4, r0, #0
	adds r0, r7, #0
	bl GetClassData
	adds r5, r0, #0
	adds r0, r6, #0
	bl GetItemType
	adds r5, #0x2c
	adds r5, r5, r0
	ldrb r5, [r5]
	cmp r4, r5
	bge _080CD610
_080CD60C:
	movs r0, #0
	b _080CD612
_080CD610:
	movs r0, #1
_080CD612:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CD618
sub_80CD618: @ 0x080CD618
	push {lr}
	ldr r0, _080CD628  @ gUnknown_08B127EC
	movs r1, #3
	bl Proc_Create
	pop {r0}
	bx r0
	.align 2, 0
_080CD628: .4byte gUnknown_08B127EC

	THUMB_FUNC_START sub_80CD62C
sub_80CD62C: @ 0x080CD62C
	push {lr}
	bl BMapDispResume
	bl RefreshBMapGraphics
	bl RefreshEntityBmMaps
	bl MU_EndAll
	ldr r0, _080CD654  @ gActiveUnit
	ldr r0, [r0]
	bl MU_Create
	bl RenderBmMap
	bl SMS_UpdateFromGameData
	pop {r0}
	bx r0
	.align 2, 0
_080CD654: .4byte gActiveUnit

	THUMB_FUNC_START sub_80CD658
sub_80CD658: @ 0x080CD658
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80CD668
	str r0, [r4, #0x30]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CD668
sub_80CD668: @ 0x080CD668
	push {lr}
	adds r1, r0, #0
	ldr r0, _080CD678  @ gUnknown_08B1280C
	bl Proc_CreateBlockingChild
	pop {r1}
	bx r1
	.align 2, 0
_080CD678: .4byte gUnknown_08B1280C

	THUMB_FUNC_START sub_80CD67C
sub_80CD67C: @ 0x080CD67C
	push {r4, r5, r6, lr}
	ldr r5, _080CD6A4  @ gUnknown_03004980
	ldr r4, [r5]
	ldrh r6, [r4, #0x34]
	movs r0, #0x34
	ldrsh r1, [r4, r0]
	movs r0, #0xa8
	lsls r0, r0, #1
	cmp r1, r0
	bgt _080CD6A8
	ldr r3, [r5, #4]
	ldr r2, [r5, #8]
	ldr r1, [r5, #0xc]
	adds r0, r6, #4
	strh r0, [r4, #0x34]
	strh r0, [r1, #0x34]
	strh r0, [r2, #0x34]
	strh r0, [r3, #0x34]
	movs r0, #1
	b _080CD6AA
	.align 2, 0
_080CD6A4: .4byte gUnknown_03004980
_080CD6A8:
	movs r0, #0
_080CD6AA:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CD6B0
sub_80CD6B0: @ 0x080CD6B0
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x14]
	adds r0, #0x38
	ldrb r0, [r0]
	strh r0, [r4, #0x2a]
	ldrh r0, [r4, #0x2a]
	bl GetUnitFromCharId
	cmp r0, #0
	beq _080CD6D4
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	b _080CD6DC
_080CD6D4:
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0
	strb r0, [r1]
_080CD6DC:
	bl ResetFaces
	bl Font_InitForUIDefault
	bl LoadUiFrameGraphics
	bl LoadObjUIGfx
	ldr r4, _080CD788  @ gLCDControlBuffer
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r5, #1
	orrs r1, r5
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #2
	bl BG_EnableSyncByMask
	bl sub_8095A1C
	ldr r0, _080CD78C  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	movs r0, #0xf
	bl BG_EnableSyncByMask
	ldrb r0, [r4, #1]
	orrs r0, r5
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #3
	movs r2, #1
	bl sub_800680C
	movs r0, #1
	movs r1, #0xe
	movs r2, #8
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CD788: .4byte gLCDControlBuffer
_080CD78C: .4byte gBG2TilemapBuffer

	THUMB_FUNC_START sub_80CD790
sub_80CD790: @ 0x080CD790
	push {lr}
	ldr r0, [r0, #0x14]
	adds r0, #0x29
	movs r1, #0xff
	strb r1, [r0]
	bl sub_8010E50
	bl sub_8096C20
	bl APProc_DeleteAll
	bl EndBG3Slider_
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #4
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #8
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #0xf
	bl BG_EnableSyncByMask
	ldr r2, _080CD7F8  @ gLCDControlBuffer
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
_080CD7F8: .4byte gLCDControlBuffer

	THUMB_FUNC_START sub_80CD7FC
sub_80CD7FC: @ 0x080CD7FC
	push {r4, r5, lr}
	sub sp, #0x1c
	adds r2, r0, #0
	add r1, sp, #0x10
	ldr r0, _080CD81C  @ gUnknown_0820707C
	ldm r0!, {r3, r4, r5}
	stm r1!, {r3, r4, r5}
	ldrh r0, [r2, #0x2a]
	cmp r0, #0x12
	beq _080CD820
	cmp r0, #0x12
	ble _080CD828
	cmp r0, #0x18
	beq _080CD824
	b _080CD828
	.align 2, 0
_080CD81C: .4byte gUnknown_0820707C
_080CD820:
	movs r5, #1
	b _080CD82A
_080CD824:
	movs r5, #2
	b _080CD82A
_080CD828:
	movs r5, #0
_080CD82A:
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	movs r4, #0
	str r4, [sp]
	movs r1, #0xd4
	movs r2, #0x50
	movs r3, #0x82
	bl sub_8007938
	lsls r0, r5, #2
	add r0, sp
	adds r0, #0x10
	ldr r0, [r0]
	str r0, [sp]
	ldr r0, _080CD88C  @ 0x06011800
	str r0, [sp, #4]
	movs r5, #1
	negs r5, r5
	str r5, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #4
	bl sub_808F128
	movs r0, #0xa
	bl sub_808E9D8
	ldr r1, _080CD890  @ gUnknown_03004980
	ldr r2, [r1]
	movs r0, #0x82
	str r0, [r2, #0x30]
	ldr r3, [r1, #4]
	ldr r2, [r1, #8]
	ldr r1, [r1, #0xc]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [r1, #0x30]
	str r0, [r2, #0x30]
	str r0, [r3, #0x30]
	ldr r0, _080CD894  @ gUnknown_03005398
	strb r5, [r0]
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CD88C: .4byte 0x06011800
_080CD890: .4byte gUnknown_03004980
_080CD894: .4byte gUnknown_03005398

	THUMB_FUNC_START sub_80CD898
sub_80CD898: @ 0x080CD898
	push {r4, r5, lr}
	sub sp, #0x1c
	add r2, sp, #0x10
	ldr r1, _080CD8B4  @ gUnknown_08207088
	ldm r1!, {r3, r4, r5}
	stm r2!, {r3, r4, r5}
	ldrh r0, [r0, #0x2a]
	cmp r0, #0x12
	beq _080CD8B8
	cmp r0, #0x12
	ble _080CD8C0
	cmp r0, #0x18
	beq _080CD8BC
	b _080CD8C0
	.align 2, 0
_080CD8B4: .4byte gUnknown_08207088
_080CD8B8:
	movs r0, #1
	b _080CD8C2
_080CD8BC:
	movs r0, #2
	b _080CD8C2
_080CD8C0:
	movs r0, #0
_080CD8C2:
	lsls r0, r0, #2
	add r0, sp
	adds r0, #0x10
	ldr r0, [r0]
	str r0, [sp]
	ldr r0, _080CD8F4  @ 0x06011800
	str r0, [sp, #4]
	movs r0, #1
	negs r0, r0
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #4
	bl sub_808F128
	movs r0, #0xa
	bl sub_808E9D8
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CD8F4: .4byte 0x06011800

	THUMB_FUNC_START sub_80CD8F8
sub_80CD8F8: @ 0x080CD8F8
	push {r4, r5, lr}
	sub sp, #0x1c
	add r2, sp, #0x10
	ldr r1, _080CD914  @ gUnknown_08207094
	ldm r1!, {r3, r4, r5}
	stm r2!, {r3, r4, r5}
	ldrh r0, [r0, #0x2a]
	cmp r0, #0x12
	beq _080CD918
	cmp r0, #0x12
	ble _080CD920
	cmp r0, #0x18
	beq _080CD91C
	b _080CD920
	.align 2, 0
_080CD914: .4byte gUnknown_08207094
_080CD918:
	movs r0, #1
	b _080CD922
_080CD91C:
	movs r0, #2
	b _080CD922
_080CD920:
	movs r0, #0
_080CD922:
	lsls r0, r0, #2
	add r0, sp
	adds r0, #0x10
	ldr r0, [r0]
	str r0, [sp]
	ldr r0, _080CD954  @ 0x06011800
	str r0, [sp, #4]
	movs r0, #1
	negs r0, r0
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #4
	bl sub_808F128
	movs r0, #0xa
	bl sub_808E9D8
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CD954: .4byte 0x06011800

	THUMB_FUNC_START sub_80CD958
sub_80CD958: @ 0x080CD958
	push {r4, r5, lr}
	sub sp, #0x1c
	add r2, sp, #0x10
	ldr r1, _080CD974  @ gUnknown_082070A0
	ldm r1!, {r3, r4, r5}
	stm r2!, {r3, r4, r5}
	ldrh r0, [r0, #0x2a]
	cmp r0, #0x12
	beq _080CD978
	cmp r0, #0x12
	ble _080CD980
	cmp r0, #0x18
	beq _080CD97C
	b _080CD980
	.align 2, 0
_080CD974: .4byte gUnknown_082070A0
_080CD978:
	movs r0, #1
	b _080CD982
_080CD97C:
	movs r0, #2
	b _080CD982
_080CD980:
	movs r0, #0
_080CD982:
	lsls r0, r0, #2
	add r0, sp
	adds r0, #0x10
	ldr r0, [r0]
	str r0, [sp]
	ldr r0, _080CD9B4  @ 0x06011800
	str r0, [sp, #4]
	movs r0, #1
	negs r0, r0
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #4
	bl sub_808F128
	movs r0, #0xa
	bl sub_808E9D8
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CD9B4: .4byte 0x06011800

	THUMB_FUNC_START sub_80CD9B8
sub_80CD9B8: @ 0x080CD9B8
	push {r4, r5, lr}
	sub sp, #0x1c
	adds r2, r0, #0
	add r1, sp, #0x10
	ldr r0, _080CD9D8  @ gUnknown_082070AC
	ldm r0!, {r3, r4, r5}
	stm r1!, {r3, r4, r5}
	ldrh r0, [r2, #0x2a]
	cmp r0, #0x12
	beq _080CD9DC
	cmp r0, #0x12
	ble _080CD9E4
	cmp r0, #0x18
	beq _080CD9E0
	b _080CD9E4
	.align 2, 0
_080CD9D8: .4byte gUnknown_082070AC
_080CD9DC:
	movs r0, #1
	b _080CD9E6
_080CD9E0:
	movs r0, #2
	b _080CD9E6
_080CD9E4:
	movs r0, #0
_080CD9E6:
	lsls r0, r0, #2
	add r0, sp
	adds r0, #0x10
	ldr r0, [r0]
	movs r1, #1
	negs r1, r1
	cmp r0, r1
	bne _080CDA00
	adds r0, r2, #0
	movs r1, #3
	bl Proc_GotoLabel
	b _080CDA1E
_080CDA00:
	str r0, [sp]
	ldr r0, _080CDA28  @ 0x06011800
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #4
	bl sub_808F128
	movs r0, #0xa
	bl sub_808E9D8
_080CDA1E:
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CDA28: .4byte 0x06011800

	THUMB_FUNC_START sub_80CDA2C
sub_80CDA2C: @ 0x080CDA2C
	push {lr}
	bl sub_80CD658
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CDA38
sub_80CDA38: @ 0x080CDA38
	push {lr}
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _080CDA46
	movs r0, #1
	b _080CDA48
_080CDA46:
	movs r0, #0
_080CDA48:
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CDA4C
sub_80CDA4C: @ 0x080CDA4C
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	b _080CDA74
_080CDA54:
	lsls r1, r4, #2
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1, #0x30]
	ldr r0, [r0, #0x10]
	cmp r0, #0
	bne _080CDA70
	adds r0, r1, #0
	adds r0, #0x34
	movs r1, #0
	bl Text_SetXCursor
_080CDA70:
	adds r4, #1
	adds r0, r5, #0
_080CDA74:
	adds r0, #0x60
	ldrb r0, [r0]
	cmp r4, r0
	blt _080CDA54
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CDA84
sub_80CDA84: @ 0x080CDA84
	push {lr}
	bl SyncMenuBgs
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CDA90
sub_80CDA90: @ 0x080CDA90
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080CDACC  @ gUnknown_02022DB8
	movs r1, #0xa
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _080CDAD0  @ gUnknown_02023DB8
	movs r1, #0xa
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	ldr r0, _080CDAD4  @ gUnknown_03005380
	bl SetFont
	ldr r0, [r4, #0x14]
	bl sub_80CDA4C
	ldr r0, [r4, #0x14]
	bl RedrawMenu
	adds r0, r4, #0
	bl SyncMenuBgs
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080CDACC: .4byte gUnknown_02022DB8
_080CDAD0: .4byte gUnknown_02023DB8
_080CDAD4: .4byte gUnknown_03005380

	THUMB_FUNC_START sub_80CDAD8
sub_80CDAD8: @ 0x080CDAD8
	push {r4, lr}
	adds r4, r0, #0
	adds r1, #0x3c
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne _080CDB0A
	adds r0, r4, #0
	bl EndMenu
	ldr r0, [r4, #0x14]
	bl EndMenu
	ldr r0, _080CDB14  @ gUnknown_08B12614
	bl Proc_Find
	adds r4, r0, #0
	bl sub_80ADDD4
	bl sub_80CCBD4
	adds r0, r4, #0
	movs r1, #5
	bl Proc_GotoLabel
_080CDB0A:
	movs r0, #7
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080CDB14: .4byte gUnknown_08B12614

	THUMB_FUNC_START sub_80CDB18
sub_80CDB18: @ 0x080CDB18
	movs r0, #0xb
	bx lr

	THUMB_FUNC_START sub_80CDB1C
sub_80CDB1C: @ 0x080CDB1C
	push {lr}
	bl SyncMenuBgs
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CDB28
sub_80CDB28: @ 0x080CDB28
	push {lr}
	bl SyncMenuBgs
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_START PromotionCommand_OnSelect
PromotionCommand_OnSelect: @ 0x080CDB34
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	adds r6, r1, #0
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x14]
	ldr r4, [r0, #0x14]
	adds r0, #0x40
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CDBFA
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r0, [r0]
	bl GetUnitFromCharId
	adds r5, r0, #0
	ldr r0, [r5, #4]
	ldrb r1, [r0, #4]
	adds r3, r6, #0
	adds r3, #0x3c
	movs r0, #0
	ldrsb r0, [r3, r0]
	cmp r0, #1
	bgt _080CDB78
	ldr r2, _080CDB74  @ gUnknown_0895DFA4
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r1, [r0]
	b _080CDBA6
	.align 2, 0
_080CDB74: .4byte gUnknown_0895DFA4
_080CDB78:
	adds r2, r4, #0
	adds r2, #0x3b
	cmp r0, #2
	bne _080CDBAE
	cmp r1, #0x3e
	beq _080CDB9A
	cmp r1, #0x3e
	bgt _080CDB8E
	cmp r1, #0x3d
	beq _080CDB94
	b _080CDBA6
_080CDB8E:
	cmp r1, #0x47
	beq _080CDBA0
	b _080CDBA6
_080CDB94:
	movs r0, #0x7e
	strb r0, [r2]
	b _080CDBAE
_080CDB9A:
	movs r0, #0x7f
	strb r0, [r2]
	b _080CDBAE
_080CDBA0:
	movs r0, #0x37
	strb r0, [r2]
	b _080CDBAE
_080CDBA6:
	adds r0, r4, #0
	adds r0, #0x3b
	strb r1, [r0]
	adds r2, r0, #0
_080CDBAE:
	ldrb r0, [r2]
	cmp r0, #0x1e
	bgt _080CDBCA
	cmp r0, #0x1d
	blt _080CDBCA
	ldr r0, [r5, #0xc]
	movs r1, #0x80
	lsls r1, r1, #4
	ands r0, r1
	cmp r0, #0
	beq _080CDBCA
	adds r0, r5, #0
	bl TryRemoveUnitFromBallista
_080CDBCA:
	ldr r0, _080CDC04  @ gUnknown_03005360
	ldr r1, _080CDC08  @ 0x06001000
	movs r2, #0x80
	movs r3, #5
	bl Font_InitForUI
	ldr r0, _080CDC0C  @ gUnknown_02022DBA
	movs r1, #0xa
	movs r2, #6
	movs r3, #0
	bl TileMap_FillRect
	movs r0, #1
	bl BG_EnableSyncByMask
	ldr r0, _080CDC10  @ gUnknown_08B12930
	movs r1, #0
	str r1, [sp]
	str r7, [sp, #4]
	movs r1, #2
	movs r2, #0
	movs r3, #0
	bl StartMenuExt
_080CDBFA:
	movs r0, #0
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080CDC04: .4byte gUnknown_03005360
_080CDC08: .4byte 0x06001000
_080CDC0C: .4byte gUnknown_02022DBA
_080CDC10: .4byte gUnknown_08B12930

	THUMB_FUNC_START sub_80CDC14
sub_80CDC14: @ 0x080CDC14
	push {r4, lr}
	ldr r1, [r0, #0x14]
	ldr r4, [r1, #0x14]
	ldr r0, [r4, #0x14]
	ldr r0, [r0, #0x14]
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CDC2E
	cmp r0, #1
	beq _080CDC32
	cmp r0, #2
	beq _080CDC32
_080CDC2E:
	movs r0, #0
	b _080CDC42
_080CDC32:
	adds r0, r1, #0
	bl Proc_Delete
	adds r0, r4, #0
	movs r1, #2
	bl Proc_GotoLabel
	movs r0, #0xb
_080CDC42:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CDC48
sub_80CDC48: @ 0x080CDC48
	push {r4, r5, r6, r7, lr}
	sub sp, #0x20
	adds r7, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r1, [r5, #0x30]
	ldrb r0, [r1, #8]
	cmp r0, #0
	beq _080CDC64
	adds r0, r5, #0
	adds r0, #0x34
	ldrb r1, [r1, #8]
	bl Text_SetColorId
_080CDC64:
	adds r0, r5, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	adds r4, r5, #0
	adds r4, #0x34
	cmp r0, #2
	bne _080CDC7A
	adds r0, r4, #0
	movs r1, #1
	bl Text_SetColorId
_080CDC7A:
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x14
	bl sub_8003E00
	adds r0, r4, #0
	movs r1, #8
	bl Text_SetXCursor
	adds r0, r4, #0
	adds r1, r6, #0
	bl Text_AppendString
	adds r0, r7, #0
	adds r0, #0x64
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1e
	bl BG_GetMapBuffer
	adds r1, r0, #0
	movs r2, #0x2c
	ldrsh r0, [r5, r2]
	lsls r0, r0, #5
	movs r3, #0x2a
	ldrsh r2, [r5, r3]
	adds r0, r0, r2
	lsls r0, r0, #1
	adds r1, r1, r0
	adds r0, r4, #0
	bl Text_Draw
	add sp, #0x20
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START PromotionCommand_OnTextDraw
PromotionCommand_OnTextDraw: @ 0x080CDCC4
	push {r4, r5, lr}
	sub sp, #0x48
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, [r4, #0x14]
	ldr r1, [r0, #0x14]
	adds r0, r5, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #1
	adds r1, #0x2c
	adds r1, r1, r0
	ldrh r0, [r1]
	bl GetClassData
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80CDC48
	add sp, #0x48
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_START PromotionCommand_OnChange
PromotionCommand_OnChange: @ 0x080CDD00
	push {lr}
	ldr r0, [r0, #0x14]
	ldr r3, [r0, #0x14]
	adds r2, r3, #0
	adds r2, #0x40
	movs r0, #1
	strb r0, [r2]
	adds r1, #0x3c
	ldrb r0, [r1]
	adds r1, r3, #0
	adds r1, #0x41
	strb r0, [r1]
	ldrb r1, [r1]
	lsls r1, r1, #1
	adds r0, r3, #0
	adds r0, #0x38
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	bl sub_80CCA64
	movs r0, #1
	negs r0, r0
	bl sub_8006AF0
	pop {r1}
	bx r1

	THUMB_FUNC_START Usability_ThirdPromotionOption
Usability_ThirdPromotionOption: @ 0x080CDD38
	push {r4, lr}
	ldr r0, _080CDD6C  @ gUnknown_08B12A08
	bl Proc_Find
	ldr r0, [r0, #0x14]
	ldr r4, [r0, #0x14]
	bl sub_80CCCA4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080CDD70
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r0, [r0]
	bl GetUnitFromCharId
	ldr r0, [r0, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x3d
	blt _080CDD70
	cmp r0, #0x3e
	ble _080CDD68
	cmp r0, #0x47
	bne _080CDD70
_080CDD68:
	movs r0, #1
	b _080CDD72
	.align 2, 0
_080CDD6C: .4byte gUnknown_08B12A08
_080CDD70:
	movs r0, #3
_080CDD72:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CDD78
sub_80CDD78: @ 0x080CDD78
	push {r4, r5, r6, lr}
	sub sp, #0xc
	adds r6, r0, #0
	adds r0, #0x4c
	movs r5, #0
	strb r5, [r0]
	bl sub_8003D20
	bl Font_InitForUIDefault
	movs r0, #0
	bl SetFontGlyphSet
	ldr r4, _080CDDC4  @ gUnknown_03005380
	ldr r1, _080CDDC8  @ 0x06001400
	adds r0, r4, #0
	movs r2, #0xa0
	movs r3, #5
	bl Font_InitForUI
	adds r0, r4, #0
	bl SetFont
	ldr r0, _080CDDCC  @ gUnknown_08B129E4
	ldr r1, _080CDDD0  @ gUnknown_08B12A60
	ldr r1, [r1]
	str r5, [sp]
	str r5, [sp, #4]
	str r6, [sp, #8]
	movs r2, #2
	movs r3, #0
	bl StartMenuCore
	str r0, [r6, #0x50]
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080CDDC4: .4byte gUnknown_03005380
_080CDDC8: .4byte 0x06001400
_080CDDCC: .4byte gUnknown_08B129E4
_080CDDD0: .4byte gUnknown_08B12A60

	THUMB_FUNC_START sub_80CDDD4
sub_80CDDD4: @ 0x080CDDD4
	bx lr

	THUMB_FUNC_START nullsub_61
nullsub_61: @ 0x080CDDD8
	bx lr

	THUMB_FUNC_START Make6C_PromotionMenuSelect
Make6C_PromotionMenuSelect: @ 0x080CDDDC
	push {lr}
	adds r1, r0, #0
	ldr r0, _080CDDEC  @ gUnknown_08B12A08
	bl Proc_Create
	pop {r1}
	bx r1
	.align 2, 0
_080CDDEC: .4byte gUnknown_08B12A08

	THUMB_FUNC_START sub_80CDDF0
sub_80CDDF0: @ 0x080CDDF0
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r5, [r4, #0x14]
	ldr r7, [r5, #0x14]
	adds r0, r5, #0
	adds r0, #0x38
	ldrb r0, [r0]
	bl GetUnitFromCharId
	adds r6, r0, #0
	cmp r6, #0
	bne _080CDE10
	adds r0, r4, #0
	bl Proc_Delete
	b _080CDE6A
_080CDE10:
	bl GetThread2SkipStack
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x4c
	strh r0, [r1]
	ldr r2, _080CDE58  @ gLCDControlBuffer
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r5, #0
	adds r0, #0x3b
	ldrb r1, [r0]
	movs r2, #1
	negs r2, r2
	adds r0, r6, #0
	movs r3, #0
	bl sub_802F664
	adds r0, r7, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #2
	beq _080CDE60
	ldr r1, _080CDE5C  @ gBattleStats
	movs r0, #0x88
	lsls r0, r0, #1
	b _080CDE64
	.align 2, 0
_080CDE58: .4byte gLCDControlBuffer
_080CDE5C: .4byte gBattleStats
_080CDE60:
	ldr r1, _080CDE70  @ gBattleStats
	movs r0, #0x10
_080CDE64:
	strh r0, [r1]
	bl BeginBattleAnimations
_080CDE6A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CDE70: .4byte gBattleStats

	THUMB_FUNC_START sub_80CDE74
sub_80CDE74: @ 0x080CDE74
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r4, [r0, r1]
	bl GetThread2SkipStack
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r4, r0
	bne _080CDE90
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
_080CDE90:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CDE98
sub_80CDE98: @ 0x080CDE98
	push {lr}
	ldr r0, [r0, #0x14]
	adds r0, #0x38
	ldrb r0, [r0]
	bl GetUnitFromCharId
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CDEA8
sub_80CDEA8: @ 0x080CDEA8
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r5, [r4, #0x14]
	ldr r1, _080CDF40  @ gUnknown_03005398
	movs r2, #1
	negs r2, r2
	adds r0, r2, #0
	strb r0, [r1]
	bl sub_808F270
	bl sub_8010E50
	bl APProc_DeleteAll
	bl EndBG3Slider_
	ldr r3, _080CDF44  @ gLCDControlBuffer
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetSpecialColorEffectsParameters
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl sub_8001ED0
	adds r0, r4, #0
	bl sub_80ADDD4
	ldr r0, _080CDF48  @ gUnknown_08B12A64
	adds r1, r4, #0
	bl Proc_CreateBlockingChild
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CDF38
	ldr r1, [r5, #0x3c]
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	beq _080CDF38
	ldr r0, [r5, #0x38]
	bl UnitUpdateUsedItem
_080CDF38:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CDF40: .4byte gUnknown_03005398
_080CDF44: .4byte gLCDControlBuffer
_080CDF48: .4byte gUnknown_08B12A64

	THUMB_FUNC_START sub_80CDF4C
sub_80CDF4C: @ 0x080CDF4C
	push {r4, lr}
	ldr r4, _080CDF5C  @ gUnknown_08B19E0C
_080CDF50:
	ldrb r0, [r4]
	cmp r0, #0xc
	bne _080CDF60
	movs r0, #1
	b _080CDF72
	.align 2, 0
_080CDF5C: .4byte gUnknown_08B19E0C
_080CDF60:
	ldrh r0, [r4, #6]
	bl CheckEventId
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080CDF70
	adds r4, #0xc
	b _080CDF50
_080CDF70:
	movs r0, #0
_080CDF72:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CDF78
sub_80CDF78: @ 0x080CDF78
	push {lr}
	movs r0, #0xe0
	movs r1, #3
	bl sub_80B53BC
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CDF88
sub_80CDF88: @ 0x080CDF88
	push {r4, r5, lr}
	sub sp, #4
	bl GetGameClock
	ldr r3, _080CE014  @ gUnknown_08B12AA8
	movs r4, #0x80
	lsls r4, r4, #6
	str r4, [sp]
	movs r0, #3
	movs r1, #0x10
	movs r2, #8
	bl RegisterObjectAttributes_SafeMaybe
	ldr r5, _080CE018  @ gUnknown_08B12AA4
	ldr r0, [r5]
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CDFBC
	ldr r3, _080CE01C  @ gUnknown_08B12AC2
	str r4, [sp]
	movs r0, #3
	movs r1, #0xb0
	movs r2, #3
	bl RegisterObjectAttributes_SafeMaybe
_080CDFBC:
	ldr r3, _080CE020  @ gUnknown_08B12AD0
	str r4, [sp]
	movs r0, #3
	movs r1, #0xb0
	movs r2, #0xf
	bl RegisterObjectAttributes_SafeMaybe
	ldr r2, [r5]
	adds r0, r2, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r2, #0
	adds r1, #0x2a
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r3, r0, #5
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r2, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r4, r0, #5
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	beq _080CE0B8
	cmp r0, #1
	bgt _080CE024
	cmp r0, #0
	beq _080CE02A
	b _080CE11A
	.align 2, 0
_080CE014: .4byte gUnknown_08B12AA8
_080CE018: .4byte gUnknown_08B12AA4
_080CE01C: .4byte gUnknown_08B12AC2
_080CE020: .4byte gUnknown_08B12AD0
_080CE024:
	cmp r0, #2
	beq _080CE0CA
	b _080CE11A
_080CE02A:
	lsls r1, r3, #3
	movs r0, #0xc
	bl DisplayUiHand
	ldr r1, [r5]
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CE04A
	adds r0, r1, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r0, #6
	bgt _080CE054
	b _080CE11A
_080CE04A:
	adds r0, r1, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	cmp r0, #6
	ble _080CE11A
_080CE054:
	ldr r4, _080CE090  @ gUnknown_08B12AA4
	ldr r0, [r4]
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080CE070
	ldr r2, _080CE094  @ 0x000030E0
	movs r0, #0x20
	movs r1, #0x20
	movs r3, #1
	bl sub_80B53F8
_080CE070:
	ldr r1, [r4]
	adds r0, r1, #0
	adds r0, #0x2a
	movs r2, #0
	ldrsb r2, [r0, r2]
	adds r0, #6
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CE098
	adds r0, r1, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	subs r0, #6
	cmp r2, r0
	blt _080CE0A4
	b _080CE11A
	.align 2, 0
_080CE090: .4byte gUnknown_08B12AA4
_080CE094: .4byte 0x000030E0
_080CE098:
	adds r0, r1, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	subs r0, #6
	cmp r2, r0
	bge _080CE11A
_080CE0A4:
	ldr r2, _080CE0B4  @ 0x000030E0
	movs r0, #0x20
	movs r1, #0x88
	movs r3, #0
	bl sub_80B53F8
	b _080CE11A
	.align 2, 0
_080CE0B4: .4byte 0x000030E0
_080CE0B8:
	lsls r1, r3, #3
	movs r0, #0xc
	bl DisplayFrozenUiHand
	lsls r1, r4, #3
	movs r0, #0x50
	bl DisplayUiHand
	b _080CE11A
_080CE0CA:
	lsls r1, r3, #3
	movs r0, #0xc
	bl DisplayFrozenUiHand
	ldr r1, [r5]
	adds r0, r1, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #4
	bls _080CE11A
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080CE0F8
	ldr r2, _080CE140  @ 0x000030E0
	movs r0, #0x90
	movs r1, #0x38
	movs r3, #1
	bl sub_80B53F8
_080CE0F8:
	ldr r0, [r5]
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x3f
	ldrb r0, [r0]
	subs r0, #4
	cmp r1, r0
	bge _080CE11A
	ldr r2, _080CE140  @ 0x000030E0
	movs r0, #0x90
	movs r1, #0x80
	movs r3, #0
	bl sub_80B53F8
_080CE11A:
	ldr r0, _080CE144  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r1, r0, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #4
	adds r0, #0x3e
	ldrb r2, [r0]
	movs r0, #0xa
	movs r3, #6
	bl sub_80976CC
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CE140: .4byte 0x000030E0
_080CE144: .4byte gUnknown_08B12AA4

	THUMB_FUNC_START sub_80CE148
sub_80CE148: @ 0x080CE148
	push {r4, lr}
	sub sp, #8
	ldr r4, _080CE1B0  @ gUnknown_08B12AA4
	ldr r1, [r4]
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _080CE1A8
	adds r0, r1, #0
	adds r0, #0xec
	bl Text_Clear
	ldr r0, _080CE1B4  @ 0x000005D4
	bl GetStringFromIndex
	adds r3, r0, #0
	ldr r0, [r4]
	adds r0, #0xec
	ldr r1, _080CE1B8  @ gUnknown_02023130
	movs r2, #0x16
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	ldr r0, [r4]
	adds r4, r0, #0
	adds r4, #0xec
	ldr r2, _080CE1BC  @ gUnknown_08B12B04
	adds r1, r0, #0
	adds r1, #0x29
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x54
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	bl GetStringFromIndex
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_AppendString
_080CE1A8:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080CE1B0: .4byte gUnknown_08B12AA4
_080CE1B4: .4byte 0x000005D4
_080CE1B8: .4byte gUnknown_02023130
_080CE1BC: .4byte gUnknown_08B12B04

	THUMB_FUNC_START sub_80CE1C0
sub_80CE1C0: @ 0x080CE1C0
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	ldr r4, _080CE1F8  @ gUnknown_08B12AA4
	lsls r1, r6, #3
	adds r1, #0x7c
	ldr r0, [r4]
	adds r0, r0, r1
	bl Text_Clear
	ldr r4, [r4]
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CE200
	ldr r1, _080CE1FC  @ gUnknown_08B12AE0
	adds r0, r4, #0
	adds r0, #0x40
	adds r0, r0, r5
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	b _080CE210
	.align 2, 0
_080CE1F8: .4byte gUnknown_08B12AA4
_080CE1FC: .4byte gUnknown_08B12AE0
_080CE200:
	ldr r1, _080CE23C  @ gUnknown_08B12B04
	adds r0, r4, #0
	adds r0, #0x54
	adds r0, r0, r5
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
_080CE210:
	bl GetStringFromIndex
	adds r3, r0, #0
	ldr r0, _080CE240  @ gUnknown_08B12AA4
	lsls r1, r6, #3
	adds r1, #0x7c
	ldr r0, [r0]
	adds r0, r0, r1
	lsls r1, r7, #6
	ldr r2, _080CE244  @ gUnknown_020234AC
	adds r1, r1, r2
	movs r2, #9
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CE23C: .4byte gUnknown_08B12B04
_080CE240: .4byte gUnknown_08B12AA4
_080CE244: .4byte gUnknown_020234AC

	THUMB_FUNC_START sub_80CE248
sub_80CE248: @ 0x080CE248
	push {r4, r5, r6, lr}
	ldr r0, _080CE260  @ gUnknown_08B12AA4
	ldr r1, [r0]
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CE264
	adds r0, r1, #0
	adds r0, #0x3c
	b _080CE268
	.align 2, 0
_080CE260: .4byte gUnknown_08B12AA4
_080CE264:
	adds r0, r1, #0
	adds r0, #0x3d
_080CE268:
	ldrb r6, [r0]
	movs r4, #0
	movs r5, #5
_080CE26E:
	cmp r4, r6
	bge _080CE27C
	adds r0, r4, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_80CE1C0
_080CE27C:
	adds r5, #2
	adds r4, #1
	cmp r4, #5
	ble _080CE26E
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CE28C
sub_80CE28C: @ 0x080CE28C
	push {r4, r5, lr}
	movs r0, #0xa0
	movs r2, #0
	ldr r5, _080CE2D8  @ gBG1TilemapBuffer
	movs r4, #0
_080CE296:
	movs r1, #0
	adds r3, r0, #0
	adds r3, #0x20
	adds r2, #1
	adds r0, #1
	lsls r0, r0, #1
	adds r0, r0, r5
_080CE2A4:
	strh r4, [r0]
	adds r0, #2
	adds r1, #1
	cmp r1, #0x1b
	ble _080CE2A4
	adds r0, r3, #0
	cmp r2, #0xb
	ble _080CE296
	ldr r0, _080CE2DC  @ gBG0TilemapBuffer
	movs r3, #0
	ldr r1, _080CE2E0  @ 0x000004C2
	adds r2, r0, r1
	subs r1, #0x40
	adds r0, r0, r1
	movs r1, #0x1b
_080CE2C2:
	strh r3, [r0]
	strh r3, [r2]
	adds r2, #2
	adds r0, #2
	subs r1, #1
	cmp r1, #0
	bge _080CE2C2
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CE2D8: .4byte gBG1TilemapBuffer
_080CE2DC: .4byte gBG0TilemapBuffer
_080CE2E0: .4byte 0x000004C2

	THUMB_FUNC_START sub_80CE2E4
sub_80CE2E4: @ 0x080CE2E4
	push {lr}
	movs r0, #2
	bl BG_EnableSyncByMask
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CE2F0
sub_80CE2F0: @ 0x080CE2F0
	push {lr}
	movs r0, #3
	bl BG_EnableSyncByMask
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CE2FC
sub_80CE2FC: @ 0x080CE2FC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	ldr r4, [r0, #0x34]
	adds r0, r4, #0
	movs r1, #6
	bl __modsi3
	ldr r5, _080CE37C  @ gUnknown_08B12AA4
	lsls r0, r0, #3
	adds r6, r0, #0
	adds r6, #0xb4
	ldr r0, [r5]
	adds r0, r0, r6
	bl Text_Clear
	ldr r0, _080CE380  @ gUnknown_08B19E0C
	mov r8, r0
	ldr r0, [r5]
	adds r0, #0x68
	adds r0, r0, r4
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	add r0, r8
	ldrh r0, [r0, #8]
	bl CheckEventId
	lsls r0, r0, #0x18
	movs r7, #0
	cmp r0, #0
	bne _080CE342
	movs r7, #4
_080CE342:
	ldr r0, [r5]
	adds r0, #0x68
	adds r0, r0, r4
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	add r0, r8
	ldrh r0, [r0, #2]
	bl GetStringFromIndex
	adds r3, r0, #0
	ldr r0, [r5]
	adds r0, r0, r6
	ldr r1, _080CE384  @ gUnknown_020235FE
	movs r2, #0x12
	str r2, [sp]
	str r3, [sp, #4]
	adds r2, r7, #0
	movs r3, #0
	bl DrawTextInline
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CE37C: .4byte gUnknown_08B12AA4
_080CE380: .4byte gUnknown_08B19E0C
_080CE384: .4byte gUnknown_020235FE

	THUMB_FUNC_START sub_80CE388
sub_80CE388: @ 0x080CE388
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	ldr r4, [r0, #0x34]
	adds r0, r4, #0
	movs r1, #6
	bl __modsi3
	ldr r5, _080CE408  @ gUnknown_08B12AA4
	lsls r0, r0, #3
	adds r6, r0, #0
	adds r6, #0xb4
	ldr r0, [r5]
	adds r0, r0, r6
	bl Text_Clear
	ldr r0, _080CE40C  @ gUnknown_08B19E0C
	mov r8, r0
	ldr r0, [r5]
	adds r0, #0x68
	adds r0, r0, r4
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	add r0, r8
	ldrh r0, [r0, #8]
	bl CheckEventId
	lsls r0, r0, #0x18
	movs r7, #0
	cmp r0, #0
	bne _080CE3CE
	movs r7, #4
_080CE3CE:
	ldr r0, [r5]
	adds r0, #0x68
	adds r0, r0, r4
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	add r0, r8
	ldrh r0, [r0, #2]
	bl GetStringFromIndex
	adds r3, r0, #0
	ldr r0, [r5]
	adds r0, r0, r6
	ldr r1, _080CE410  @ gUnknown_0202387E
	movs r2, #0x12
	str r2, [sp]
	str r3, [sp, #4]
	adds r2, r7, #0
	movs r3, #0
	bl DrawTextInline
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CE408: .4byte gUnknown_08B12AA4
_080CE40C: .4byte gUnknown_08B19E0C
_080CE410: .4byte gUnknown_0202387E

	THUMB_FUNC_START sub_80CE414
sub_80CE414: @ 0x080CE414
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	movs r0, #5
	str r0, [sp, #8]
	movs r5, #0
	mov r8, r5
	ldr r0, _080CE47C  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r0, #0x3e
	mov r1, r8
	strb r1, [r0]
	ldr r1, _080CE480  @ gUnknown_08B19E0C
	ldrb r0, [r1]
	cmp r0, #0xc
	beq _080CE4B8
	movs r6, #0
_080CE43C:
	adds r4, r6, r1
	ldrh r0, [r4, #6]
	bl CheckEventId
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080CE4A8
	ldr r0, _080CE47C  @ gUnknown_08B12AA4
	ldr r2, [r0]
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CE484
	adds r0, r2, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r2, #0
	adds r1, #0x40
	adds r1, r1, r0
	ldrb r0, [r4, #1]
	ldrb r1, [r1]
	cmp r0, r1
	bne _080CE4A8
	adds r0, r2, #0
	adds r0, #0x68
	adds r0, r0, r5
	mov r2, r8
	strb r2, [r0]
	b _080CE4A6
	.align 2, 0
_080CE47C: .4byte gUnknown_08B12AA4
_080CE480: .4byte gUnknown_08B19E0C
_080CE484:
	adds r0, r2, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r2, #0
	adds r1, #0x54
	adds r1, r1, r0
	ldrb r0, [r4]
	ldrb r1, [r1]
	cmp r0, r1
	bne _080CE4A8
	adds r0, r2, #0
	adds r0, #0x68
	adds r0, r0, r5
	mov r1, r8
	strb r1, [r0]
_080CE4A6:
	adds r5, #1
_080CE4A8:
	adds r6, #0xc
	movs r2, #1
	add r8, r2
	ldr r1, _080CE57C  @ gUnknown_08B19E0C
	adds r0, r6, r1
	ldrb r0, [r0]
	cmp r0, #0xc
	bne _080CE43C
_080CE4B8:
	ldr r1, _080CE580  @ gUnknown_08B12AA4
	ldr r0, [r1]
	adds r0, #0x3e
	strb r5, [r0]
	lsls r0, r5, #0x18
	lsrs r6, r0, #0x18
	ldr r0, [r1]
	adds r0, #0x2c
	movs r4, #0
	ldrsb r4, [r0, r4]
	adds r5, r4, #0
	movs r0, #0
	mov r8, r0
	cmp r6, #0
	beq _080CE56C
	mov sl, r1
_080CE4D8:
	adds r0, r5, #0
	movs r1, #6
	bl __modsi3
	adds r5, r0, #0
	lsls r0, r5, #3
	adds r7, r0, #0
	adds r7, #0xb4
	mov r1, sl
	ldr r0, [r1]
	adds r0, r0, r7
	bl Text_Clear
	mov r2, sl
	ldr r0, [r2]
	adds r0, #0x68
	adds r0, r0, r4
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _080CE57C  @ gUnknown_08B19E0C
	adds r0, r0, r1
	ldrh r0, [r0, #8]
	bl CheckEventId
	lsls r0, r0, #0x18
	movs r2, #0
	mov r9, r2
	cmp r0, #0
	bne _080CE51A
	movs r0, #4
	mov r9, r0
_080CE51A:
	mov r1, sl
	ldr r0, [r1]
	adds r0, #0x68
	adds r0, r0, r4
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r2, _080CE57C  @ gUnknown_08B19E0C
	adds r0, r0, r2
	ldrh r0, [r0, #2]
	bl GetStringFromIndex
	adds r3, r0, #0
	mov r1, sl
	ldr r0, [r1]
	adds r0, r0, r7
	ldr r2, [sp, #8]
	lsls r1, r2, #6
	ldr r2, _080CE584  @ gUnknown_020234BE
	adds r1, r1, r2
	movs r2, #0x12
	str r2, [sp]
	str r3, [sp, #4]
	mov r2, r9
	movs r3, #0
	bl DrawTextInline
	ldr r0, [sp, #8]
	adds r0, #2
	str r0, [sp, #8]
	adds r5, #1
	subs r6, #1
	adds r4, #1
	movs r1, #1
	add r8, r1
	mov r2, r8
	cmp r2, #5
	bgt _080CE56C
	cmp r6, #0
	bne _080CE4D8
_080CE56C:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CE57C: .4byte gUnknown_08B19E0C
_080CE580: .4byte gUnknown_08B12AA4
_080CE584: .4byte gUnknown_020234BE

	THUMB_FUNC_START sub_80CE588
sub_80CE588: @ 0x080CE588
	push {r4, r5, lr}
	movs r0, #0xa0
	movs r1, #0
	ldr r5, _080CE5B8  @ gBG1TilemapBuffer
	movs r4, #0
_080CE592:
	adds r2, r0, #0
	adds r2, #0x20
	adds r3, r1, #1
	adds r0, #0xa
	movs r1, #0x12
	lsls r0, r0, #1
	adds r0, r0, r5
_080CE5A0:
	strh r4, [r0]
	adds r0, #2
	subs r1, #1
	cmp r1, #0
	bge _080CE5A0
	adds r0, r2, #0
	adds r1, r3, #0
	cmp r1, #0xb
	ble _080CE592
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080CE5B8: .4byte gBG1TilemapBuffer

	THUMB_FUNC_START sub_80CE5BC
sub_80CE5BC: @ 0x080CE5BC
	push {lr}
	sub sp, #4
	adds r1, r0, #0
	cmp r1, #0
	beq _080CE5DA
	ldrb r0, [r1]
	cmp r0, #0
	beq _080CE5DA
_080CE5CC:
	ldrb r0, [r1]
	cmp r0, #0
	beq _080CE5DA
	cmp r0, #1
	bne _080CE5DE
	adds r0, r1, #1
	b _080CE5EA
_080CE5DA:
	movs r0, #0
	b _080CE5EA
_080CE5DE:
	adds r0, r1, #0
	mov r1, sp
	bl GetCharTextWidth
	adds r1, r0, #0
	b _080CE5CC
_080CE5EA:
	add sp, #4
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CE5F0
sub_80CE5F0: @ 0x080CE5F0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	mov r8, r0
	adds r5, r1, #0
	movs r4, #1
	ldr r0, _080CE618  @ gUnknown_08B19E0C
	mov r2, r8
	lsls r1, r2, #1
	add r1, r8
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrh r0, [r1, #4]
	bl GetStringFromIndex
	adds r6, r0, #0
	b _080CE61E
	.align 2, 0
_080CE618: .4byte gUnknown_08B19E0C
_080CE61C:
	adds r4, #1
_080CE61E:
	adds r0, r6, #0
	bl sub_80CE5BC
	adds r6, r0, #0
	cmp r6, #0
	bne _080CE61C
	ldr r0, _080CE654  @ gUnknown_08B12AA4
	ldr r1, [r0]
	adds r1, #0x3f
	strb r4, [r1]
	ldr r1, [r0]
	adds r1, #0x2e
	movs r7, #0
	ldrsb r7, [r1, r7]
	cmp r5, #0
	beq _080CE672
	cmp r4, #4
	ble _080CE660
	cmp r5, #1
	bne _080CE658
	subs r1, r4, #4
	adds r7, #4
	cmp r7, r1
	ble _080CE660
	adds r7, r1, #0
	b _080CE660
	.align 2, 0
_080CE654: .4byte gUnknown_08B12AA4
_080CE658:
	subs r7, #4
	cmp r7, #0
	bge _080CE660
	movs r7, #0
_080CE660:
	cmp r5, #0
	beq _080CE672
	ldr r0, [r0]
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r7
	beq _080CE73A
_080CE672:
	bl sub_80CE588
	ldr r5, _080CE6C0  @ gUnknown_08B12AA4
	ldr r0, [r5]
	adds r0, #0x2e
	strb r7, [r0]
	ldr r0, [r5]
	adds r0, #0xb4
	bl Text_Clear
	ldr r0, _080CE6C4  @ gUnknown_08B19E0C
	mov r1, r8
	lsls r4, r1, #1
	add r4, r8
	lsls r4, r4, #2
	adds r4, r4, r0
	ldrh r0, [r4, #2]
	bl GetStringFromIndex
	adds r3, r0, #0
	ldr r0, [r5]
	adds r0, #0xb4
	ldr r1, _080CE6C8  @ gUnknown_020235FC
	movs r2, #0x12
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #3
	movs r3, #2
	bl DrawTextInline
	ldrh r0, [r4, #4]
	bl GetStringFromIndex
	adds r6, r0, #0
	movs r2, #0
	mov r8, r2
	adds r0, r7, #4
	mov r9, r0
	b _080CE71E
	.align 2, 0
_080CE6C0: .4byte gUnknown_08B12AA4
_080CE6C4: .4byte gUnknown_08B19E0C
_080CE6C8: .4byte gUnknown_020235FC
_080CE6CC:
	cmp r8, r7
	blt _080CE71A
	mov r0, r8
	movs r1, #5
	bl __modsi3
	adds r4, r0, #0
	ldr r5, _080CE748  @ gUnknown_08B12AA4
	lsls r4, r4, #3
	adds r4, #0xbc
	ldr r0, [r5]
	adds r0, r0, r4
	bl Text_Clear
	ldr r0, [r5]
	adds r2, r0, r4
	mov r1, r8
	subs r0, r1, r7
	adds r1, r0, #0
	cmp r0, #0
	bge _080CE6F8
	adds r1, r0, #3
_080CE6F8:
	asrs r1, r1, #2
	lsls r1, r1, #2
	subs r1, r0, r1
	lsls r1, r1, #7
	movs r0, #0x80
	lsls r0, r0, #2
	adds r1, r1, r0
	ldr r0, _080CE74C  @ gUnknown_020234BE
	adds r1, r1, r0
	movs r0, #0x11
	str r0, [sp]
	str r6, [sp, #4]
	adds r0, r2, #0
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
_080CE71A:
	movs r1, #1
	add r8, r1
_080CE71E:
	cmp r8, r9
	bge _080CE734
	mov r2, r8
	cmp r2, #0
	beq _080CE6CC
	adds r0, r6, #0
	bl sub_80CE5BC
	adds r6, r0, #0
	cmp r6, #0
	bne _080CE6CC
_080CE734:
	movs r0, #2
	bl BG_EnableSyncByMask
_080CE73A:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CE748: .4byte gUnknown_08B12AA4
_080CE74C: .4byte gUnknown_020234BE

	THUMB_FUNC_START sub_80CE750
sub_80CE750: @ 0x080CE750
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	mov r9, r1
	movs r4, #0xd0
	lsls r4, r4, #1
	ldr r0, _080CE774  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CE778
	cmp r0, #1
	beq _080CE7DC
	b _080CE83A
	.align 2, 0
_080CE774: .4byte gUnknown_08B12AA4
_080CE778:
	movs r0, #0
	ldr r7, _080CE7D8  @ gBG1TilemapBuffer
_080CE77C:
	movs r1, #0x40
	negs r1, r1
	adds r1, r1, r4
	mov ip, r1
	adds r6, r0, #1
	adds r3, r4, #0
	adds r3, #0x22
	adds r2, r4, #0
	adds r2, #0x62
	adds r1, r4, #2
	adds r0, r4, #0
	adds r0, #0x42
	movs r5, #7
	lsls r0, r0, #1
	adds r4, r0, r7
	lsls r1, r1, #1
	adds r1, r1, r7
	lsls r2, r2, #1
	adds r2, r2, r7
	lsls r3, r3, #1
	adds r3, r3, r7
_080CE7A6:
	ldrh r0, [r1]
	strh r0, [r4]
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	adds r1, #2
	adds r4, #2
	subs r5, #1
	cmp r5, #0
	bge _080CE7A6
	mov r4, ip
	adds r0, r6, #0
	cmp r0, #4
	ble _080CE77C
	mov r0, r9
	movs r1, #6
	bl __modsi3
	adds r1, r0, #0
	mov r0, r9
	movs r2, #5
	bl sub_80CE1C0
	b _080CE83A
	.align 2, 0
_080CE7D8: .4byte gBG1TilemapBuffer
_080CE7DC:
	movs r0, #0
	ldr r1, _080CE850  @ gUnknown_08B12BEC
	mov sl, r1
	ldr r7, _080CE854  @ gBG1TilemapBuffer
_080CE7E4:
	movs r1, #0x40
	negs r1, r1
	adds r1, r1, r4
	mov ip, r1
	adds r6, r0, #1
	adds r3, r4, #0
	adds r3, #0x2a
	adds r2, r4, #0
	adds r2, #0x6a
	adds r1, r4, #0
	adds r1, #0xa
	adds r0, r4, #0
	adds r0, #0x4a
	movs r5, #0x12
	lsls r0, r0, #1
	adds r4, r0, r7
	lsls r1, r1, #1
	adds r1, r1, r7
	lsls r2, r2, #1
	adds r2, r2, r7
	lsls r3, r3, #1
	adds r3, r3, r7
_080CE810:
	ldrh r0, [r1]
	strh r0, [r4]
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	adds r1, #2
	adds r4, #2
	subs r5, #1
	cmp r5, #0
	bge _080CE810
	mov r4, ip
	adds r0, r6, #0
	cmp r0, #4
	ble _080CE7E4
	mov r0, sl
	mov r1, r8
	bl Proc_Create
	mov r1, r9
	str r1, [r0, #0x34]
_080CE83A:
	movs r0, #2
	bl BG_EnableSyncByMask
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CE850: .4byte gUnknown_08B12BEC
_080CE854: .4byte gBG1TilemapBuffer

	THUMB_FUNC_START sub_80CE858
sub_80CE858: @ 0x080CE858
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	mov r9, r1
	movs r4, #0xa0
	ldr r0, _080CE87C  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CE880
	cmp r0, #1
	beq _080CE8E4
	b _080CE940
	.align 2, 0
_080CE87C: .4byte gUnknown_08B12AA4
_080CE880:
	movs r0, #0
	ldr r7, _080CE8E0  @ gBG1TilemapBuffer
_080CE884:
	movs r1, #0x40
	adds r1, r1, r4
	mov ip, r1
	adds r6, r0, #1
	adds r3, r4, #0
	adds r3, #0x62
	adds r2, r4, #0
	adds r2, #0x22
	adds r1, r4, #0
	adds r1, #0x42
	adds r0, r4, #2
	movs r5, #7
	lsls r0, r0, #1
	adds r4, r0, r7
	lsls r1, r1, #1
	adds r1, r1, r7
	lsls r2, r2, #1
	adds r2, r2, r7
	lsls r3, r3, #1
	adds r3, r3, r7
_080CE8AC:
	ldrh r0, [r1]
	strh r0, [r4]
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	adds r1, #2
	adds r4, #2
	subs r5, #1
	cmp r5, #0
	bge _080CE8AC
	mov r4, ip
	adds r0, r6, #0
	cmp r0, #4
	ble _080CE884
	mov r0, r9
	movs r1, #6
	bl __modsi3
	adds r1, r0, #0
	mov r0, r9
	movs r2, #0xf
	bl sub_80CE1C0
	b _080CE940
	.align 2, 0
_080CE8E0: .4byte gBG1TilemapBuffer
_080CE8E4:
	movs r0, #0
	ldr r1, _080CE954  @ gUnknown_08B12C14
	mov sl, r1
	ldr r7, _080CE958  @ gBG1TilemapBuffer
_080CE8EC:
	movs r1, #0x40
	adds r1, r1, r4
	mov ip, r1
	adds r6, r0, #1
	adds r3, r4, #0
	adds r3, #0x6a
	adds r2, r4, #0
	adds r2, #0x2a
	adds r1, r4, #0
	adds r1, #0x4a
	adds r0, r4, #0
	adds r0, #0xa
	movs r5, #0x12
	lsls r0, r0, #1
	adds r4, r0, r7
	lsls r1, r1, #1
	adds r1, r1, r7
	lsls r2, r2, #1
	adds r2, r2, r7
	lsls r3, r3, #1
	adds r3, r3, r7
_080CE916:
	ldrh r0, [r1]
	strh r0, [r4]
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	adds r1, #2
	adds r4, #2
	subs r5, #1
	cmp r5, #0
	bge _080CE916
	mov r4, ip
	adds r0, r6, #0
	cmp r0, #4
	ble _080CE8EC
	mov r0, sl
	mov r1, r8
	bl Proc_Create
	mov r1, r9
	str r1, [r0, #0x34]
_080CE940:
	movs r0, #2
	bl BG_EnableSyncByMask
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CE954: .4byte gUnknown_08B12C14
_080CE958: .4byte gBG1TilemapBuffer

	THUMB_FUNC_START sub_80CE95C
sub_80CE95C: @ 0x080CE95C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	ldr r5, [r7, #0x34]
	adds r0, r5, #0
	movs r1, #5
	bl __modsi3
	adds r4, r0, #0
	ldr r2, _080CE998  @ gUnknown_08B19E0C
	ldr r0, _080CE99C  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r1, r0, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x68
	adds r0, r0, r1
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrh r0, [r0, #4]
	bl GetStringFromIndex
	adds r6, r0, #0
	b _080CE9A2
	.align 2, 0
_080CE998: .4byte gUnknown_08B19E0C
_080CE99C: .4byte gUnknown_08B12AA4
_080CE9A0:
	subs r5, #1
_080CE9A2:
	cmp r5, #0
	beq _080CE9B2
	adds r0, r6, #0
	bl sub_80CE5BC
	adds r6, r0, #0
	cmp r6, #0
	bne _080CE9A0
_080CE9B2:
	ldr r5, _080CE9E0  @ gUnknown_08B12AA4
	lsls r4, r4, #3
	adds r4, #0xbc
	ldr r0, [r5]
	adds r0, r0, r4
	bl Text_Clear
	ldr r0, [r5]
	adds r0, r0, r4
	ldr r1, _080CE9E4  @ gUnknown_0202393E
	movs r2, #0x11
	str r2, [sp]
	str r6, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl DrawTextInline
	movs r0, #0
	str r0, [r7, #0x34]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CE9E0: .4byte gUnknown_08B12AA4
_080CE9E4: .4byte gUnknown_0202393E

	THUMB_FUNC_START sub_80CE9E8
sub_80CE9E8: @ 0x080CE9E8
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r0, [r7, #0x38]
	cmp r0, #0
	bne _080CEA60
	movs r3, #0xe0
	lsls r3, r3, #1
	movs r6, #0x98
	lsls r6, r6, #2
	movs r0, #0
	ldr r5, _080CEA5C  @ gBG1TilemapBuffer
_080CE9FE:
	movs r1, #0x20
	negs r1, r1
	adds r1, r1, r3
	mov ip, r1
	adds r4, r0, #1
	adds r1, r3, #0
	adds r1, #0xa
	adds r0, r3, #0
	adds r0, #0x2a
	movs r3, #0x12
	lsls r0, r0, #1
	adds r2, r0, r5
	lsls r1, r1, #1
	adds r1, r1, r5
_080CEA1A:
	ldrh r0, [r1]
	strh r0, [r2]
	adds r1, #2
	adds r2, #2
	subs r3, #1
	cmp r3, #0
	bge _080CEA1A
	mov r3, ip
	adds r0, r4, #0
	cmp r0, #6
	ble _080CE9FE
	ldr r0, [r7, #0x34]
	cmp r0, #0
	beq _080CEA38
	subs r6, #0x20
_080CEA38:
	ldr r2, _080CEA5C  @ gBG1TilemapBuffer
	adds r1, r6, #0
	adds r1, #0xa
	adds r0, r3, #0
	adds r0, #0x2a
	movs r3, #0x12
	lsls r0, r0, #1
	adds r4, r0, r2
	lsls r1, r1, #1
	adds r1, r1, r2
_080CEA4C:
	ldrh r0, [r1]
	strh r0, [r4]
	adds r1, #2
	adds r4, #2
	subs r3, #1
	cmp r3, #0
	bge _080CEA4C
	b _080CEAC6
	.align 2, 0
_080CEA5C: .4byte gBG1TilemapBuffer
_080CEA60:
	movs r3, #0x80
	lsls r3, r3, #1
	movs r6, #0x88
	lsls r6, r6, #2
	movs r0, #0
	ldr r5, _080CEAD8  @ gBG1TilemapBuffer
_080CEA6C:
	adds r4, r0, #1
	movs r0, #0x20
	adds r0, r0, r3
	mov ip, r0
	adds r1, r3, #0
	adds r1, #0x2a
	adds r0, r3, #0
	adds r0, #0xa
	movs r3, #0x12
	lsls r0, r0, #1
	adds r2, r0, r5
	lsls r1, r1, #1
	adds r1, r1, r5
_080CEA86:
	ldrh r0, [r1]
	strh r0, [r2]
	adds r1, #2
	adds r2, #2
	subs r3, #1
	cmp r3, #0
	bge _080CEA86
	mov r3, ip
	adds r0, r4, #0
	cmp r0, #6
	ble _080CEA6C
	ldr r0, [r7, #0x34]
	cmp r0, #0
	beq _080CEAA4
	adds r6, #0x20
_080CEAA4:
	ldr r2, _080CEAD8  @ gBG1TilemapBuffer
	adds r1, r6, #0
	adds r1, #0x2a
	adds r0, r3, #0
	adds r0, #0xa
	movs r3, #0x12
	lsls r0, r0, #1
	adds r4, r0, r2
	lsls r1, r1, #1
	adds r1, r1, r2
_080CEAB8:
	ldrh r0, [r1]
	strh r0, [r4]
	adds r1, #2
	adds r4, #2
	subs r3, #1
	cmp r3, #0
	bge _080CEAB8
_080CEAC6:
	movs r0, #2
	bl BG_EnableSyncByMask
	ldr r0, [r7, #0x34]
	cmp r0, #0
	bne _080CEADC
	movs r0, #1
	str r0, [r7, #0x34]
	b _080CEAE2
	.align 2, 0
_080CEAD8: .4byte gBG1TilemapBuffer
_080CEADC:
	adds r0, r7, #0
	bl Proc_ClearNativeCallback
_080CEAE2:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CEAE8
sub_80CEAE8: @ 0x080CEAE8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	movs r5, #0
	ldr r3, _080CEB5C  @ gUnknown_08B19E0C
	movs r1, #0
	ldr r2, _080CEB60  @ gUnknown_08B12AA4
_080CEAF4:
	mov r4, sp
	adds r0, r4, r5
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x54
	adds r0, r0, r5
	strb r1, [r0]
	adds r5, #1
	cmp r5, #0x13
	ble _080CEAF4
	ldrb r4, [r3]
	cmp r4, #0xc
	beq _080CEB2A
	adds r5, r3, #0
_080CEB10:
	ldrh r0, [r5, #6]
	bl CheckEventId
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080CEB22
	mov r1, sp
	adds r0, r1, r4
	strb r4, [r0]
_080CEB22:
	adds r5, #0xc
	ldrb r4, [r5]
	cmp r4, #0xc
	bne _080CEB10
_080CEB2A:
	ldr r0, _080CEB60  @ gUnknown_08B12AA4
	ldr r1, [r0]
	adds r1, #0x3d
	movs r2, #0
	strb r2, [r1]
	movs r5, #0
	adds r6, r0, #0
	adds r7, r6, #0
_080CEB3A:
	mov r4, sp
	adds r0, r4, r5
	ldrb r4, [r0]
	cmp r4, #0
	beq _080CEB94
	ldr r1, [r6]
	adds r2, r1, #0
	adds r2, #0x3d
	ldrb r0, [r2]
	cmp r0, #0
	bne _080CEB64
	adds r0, r1, #0
	adds r0, #0x54
	strb r4, [r0]
	ldr r1, [r7]
	b _080CEB8C
	.align 2, 0
_080CEB5C: .4byte gUnknown_08B19E0C
_080CEB60: .4byte gUnknown_08B12AA4
_080CEB64:
	movs r3, #0
	ldrb r2, [r2]
	cmp r3, r2
	bge _080CEB78
	adds r0, r1, #0
	adds r0, #0x54
	ldrb r0, [r0]
	cmp r0, r4
	bne _080CEB78
	movs r3, #1
_080CEB78:
	cmp r3, #0
	bne _080CEB94
	ldr r0, [r6]
	adds r1, r0, #0
	adds r1, #0x3d
	adds r0, #0x54
	ldrb r1, [r1]
	adds r0, r0, r1
	strb r4, [r0]
	ldr r1, [r6]
_080CEB8C:
	adds r1, #0x3d
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_080CEB94:
	adds r5, #1
	cmp r5, #0xb
	ble _080CEB3A
	add sp, #0x14
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CEBA4
sub_80CEBA4: @ 0x080CEBA4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	movs r5, #0
	ldr r6, _080CEC20  @ gUnknown_08B19E0C
	movs r4, #0xff
	ldr r3, _080CEC24  @ gUnknown_08B12AA4
	movs r2, #0
_080CEBB2:
	mov r1, sp
	adds r0, r1, r5
	ldrb r1, [r0]
	orrs r1, r4
	strb r1, [r0]
	ldr r0, [r3]
	adds r0, #0x40
	adds r0, r0, r5
	strb r2, [r0]
	adds r5, #1
	cmp r5, #0x13
	ble _080CEBB2
	ldrb r2, [r6]
	cmp r2, #0xc
	beq _080CEBEE
	adds r4, r6, #0
_080CEBD2:
	ldrh r0, [r4, #6]
	bl CheckEventId
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080CEBE6
	ldrb r2, [r4, #1]
	mov r1, sp
	adds r0, r1, r2
	strb r2, [r0]
_080CEBE6:
	adds r4, #0xc
	ldrb r2, [r4]
	cmp r2, #0xc
	bne _080CEBD2
_080CEBEE:
	ldr r0, _080CEC24  @ gUnknown_08B12AA4
	ldr r1, [r0]
	adds r1, #0x3c
	movs r2, #0
	strb r2, [r1]
	movs r5, #0
	adds r6, r0, #0
	adds r7, r6, #0
_080CEBFE:
	mov r0, sp
	adds r1, r0, r5
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _080CEC58
	adds r2, r0, #0
	ldr r1, [r6]
	adds r3, r1, #0
	adds r3, #0x3c
	ldrb r0, [r3]
	cmp r0, #0
	bne _080CEC28
	adds r0, r1, #0
	adds r0, #0x40
	strb r2, [r0]
	ldr r1, [r7]
	b _080CEC50
	.align 2, 0
_080CEC20: .4byte gUnknown_08B19E0C
_080CEC24: .4byte gUnknown_08B12AA4
_080CEC28:
	movs r4, #0
	ldrb r3, [r3]
	cmp r4, r3
	bge _080CEC3C
	adds r0, r1, #0
	adds r0, #0x40
	ldrb r0, [r0]
	cmp r0, r2
	bne _080CEC3C
	movs r4, #1
_080CEC3C:
	cmp r4, #0
	bne _080CEC58
	ldr r0, [r6]
	adds r1, r0, #0
	adds r1, #0x3c
	adds r0, #0x40
	ldrb r1, [r1]
	adds r0, r0, r1
	strb r2, [r0]
	ldr r1, [r6]
_080CEC50:
	adds r1, #0x3c
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_080CEC58:
	adds r5, #1
	cmp r5, #0xb
	ble _080CEBFE
	add sp, #0x14
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CEC68
sub_80CEC68: @ 0x080CEC68
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0xa0
	movs r1, #0
	ldr r2, _080CECA8  @ gBG2TilemapBuffer
	mov ip, r2
	ldr r7, _080CECAC  @ 0x00000FFF
_080CEC78:
	adds r4, r0, #0
	adds r4, #0x20
	adds r5, r1, #1
	lsls r0, r0, #1
	mov r1, ip
	adds r2, r0, r1
	movs r3, #8
_080CEC86:
	ldrh r1, [r2]
	adds r0, r7, #0
	ands r0, r1
	adds r0, r6, r0
	strh r0, [r2]
	adds r2, #2
	subs r3, #1
	cmp r3, #0
	bge _080CEC86
	adds r0, r4, #0
	adds r1, r5, #0
	cmp r1, #0xb
	ble _080CEC78
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CECA8: .4byte gBG2TilemapBuffer
_080CECAC: .4byte 0x00000FFF

	THUMB_FUNC_START sub_80CECB0
sub_80CECB0: @ 0x080CECB0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp, #4]
	movs r0, #0
	mov sl, r0
	bl SetupBackgrounds
	ldr r5, _080CEED0  @ gUnknown_08B12AA4
	ldr r0, [r5]
	adds r0, #0x2f
	mov r1, sl
	strb r1, [r0]
	movs r0, #0xb3
	bl CheckEventId
	ldr r1, [r5]
	adds r1, #0x30
	strb r0, [r1]
	ldr r0, [r5]
	adds r0, #0x29
	mov r2, sl
	strb r2, [r0]
	ldr r0, [r5]
	adds r0, #0x2a
	strb r2, [r0]
	ldr r0, [r5]
	adds r0, #0x2b
	strb r2, [r0]
	ldr r0, [r5]
	adds r0, #0x2c
	strb r2, [r0]
	bl sub_80CEAE8
	bl sub_80CEBA4
	bl LoadUiFrameGraphics
	ldr r7, _080CEED4  @ gLCDControlBuffer
	ldrb r0, [r7, #1]
	movs r1, #1
	mov r9, r1
	mov r2, r9
	orrs r0, r2
	movs r1, #2
	orrs r0, r1
	movs r2, #4
	mov r8, r2
	mov r1, r8
	orrs r0, r1
	movs r6, #8
	orrs r0, r6
	movs r4, #0x10
	orrs r0, r4
	strb r0, [r7, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl BG_SetPosition
	ldr r0, _080CEED8  @ gBG0TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080CEEDC  @ gBG1TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080CEEE0  @ gBG2TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldr r0, _080CEEE4  @ gBG3TilemapBuffer
	movs r1, #0
	bl BG_Fill
	ldrb r0, [r7, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r0, r7, #0
	adds r0, #0x2d
	mov r2, sl
	strb r2, [r0]
	adds r1, r7, #0
	adds r1, #0x31
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x88
	strb r0, [r1]
	adds r1, #4
	ldrb r0, [r1]
	mov r2, r9
	orrs r0, r2
	movs r2, #2
	orrs r0, r2
	mov r2, r8
	orrs r0, r2
	orrs r0, r6
	orrs r0, r4
	strb r0, [r1]
	adds r2, r7, #0
	adds r2, #0x36
	ldrb r0, [r2]
	mov r1, r9
	orrs r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	mov r1, r8
	orrs r0, r1
	orrs r0, r6
	orrs r0, r4
	strb r0, [r2]
	ldr r0, _080CEEE8  @ gUnknown_08B17B44
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl CopyToPaletteBuffer
	ldr r0, _080CEEEC  @ gUnknown_08B17864
	ldr r1, _080CEEF0  @ 0x06011000
	bl CopyDataWithPossibleUncomp
	ldr r0, _080CEEF4  @ gUnknown_08B177C0
	ldr r1, _080CEEF8  @ 0x06011800
	bl CopyDataWithPossibleUncomp
	ldr r0, _080CEEFC  @ gUnknown_08B176CC
	ldr r4, _080CEF00  @ gUnknown_02020288
	adds r1, r4, #0
	bl CopyDataWithPossibleUncomp
	movs r2, #0x80
	lsls r2, r2, #5
	ldr r0, _080CEEE0  @ gBG2TilemapBuffer
	adds r1, r4, #0
	bl CallARM_FillTileRect
	ldr r0, _080CEF04  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1e
	adds r0, #4
	lsls r0, r0, #5
	ldr r1, _080CEF08  @ gUiFramePaletteA
	adds r0, r0, r1
	movs r1, #0x40
	movs r2, #0x20
	bl CopyToPaletteBuffer
	bl sub_8003D20
	ldr r0, [r5]
	adds r0, #0xec
	movs r1, #0x16
	bl Text_Init
	bl sub_80CE148
	ldr r0, [r5]
	adds r0, #0xac
	movs r1, #9
	bl Text_Init
	ldr r0, [r5]
	adds r0, #0xe4
	movs r1, #0x12
	bl Text_Init
	movs r6, #0xb4
	movs r4, #0x7c
	movs r2, #5
	mov sl, r2
_080CEE44:
	ldr r0, [r5]
	adds r0, r0, r4
	movs r1, #9
	bl Text_Init
	ldr r0, [r5]
	adds r0, r0, r6
	movs r1, #0x12
	bl Text_Init
	adds r6, #8
	adds r4, #8
	movs r0, #1
	negs r0, r0
	add sl, r0
	mov r1, sl
	cmp r1, #0
	bge _080CEE44
	bl sub_80CE248
	bl sub_80CE414
	movs r0, #0
	str r0, [sp]
	ldr r0, [sp, #4]
	movs r1, #0
	movs r2, #0x12
	movs r3, #2
	bl sub_8086CE8
	ldr r0, _080CEF0C  @ gUnknown_08B12B1C
	ldr r1, [sp, #4]
	bl Proc_Create
	movs r0, #0xf
	bl BG_EnableSyncByMask
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #4
	str r0, [sp]
	ldr r0, [sp, #4]
	movs r1, #0xe0
	movs r2, #0x2f
	bl sub_8097748
	ldr r0, _080CEED0  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r1, r0, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #4
	adds r0, #0x3e
	ldrb r2, [r0]
	movs r0, #0xa
	movs r3, #6
	bl sub_80976CC
	bl sub_8097668
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CEED0: .4byte gUnknown_08B12AA4
_080CEED4: .4byte gLCDControlBuffer
_080CEED8: .4byte gBG0TilemapBuffer
_080CEEDC: .4byte gBG1TilemapBuffer
_080CEEE0: .4byte gBG2TilemapBuffer
_080CEEE4: .4byte gBG3TilemapBuffer
_080CEEE8: .4byte gUnknown_08B17B44
_080CEEEC: .4byte gUnknown_08B17864
_080CEEF0: .4byte 0x06011000
_080CEEF4: .4byte gUnknown_08B177C0
_080CEEF8: .4byte 0x06011800
_080CEEFC: .4byte gUnknown_08B176CC
_080CEF00: .4byte gUnknown_02020288
_080CEF04: .4byte gUnknown_0202BCF0
_080CEF08: .4byte gUiFramePaletteA
_080CEF0C: .4byte gUnknown_08B12B1C

	THUMB_FUNC_START sub_80CEF10
sub_80CEF10: @ 0x080CEF10
	push {r4, lr}
	sub sp, #4
	movs r0, #1
	movs r1, #0xf
	movs r2, #4
	movs r3, #0
	bl SetSpecialColorEffectsParameters
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_8001ED0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl sub_8001F0C
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CEF48
sub_80CEF48: @ 0x080CEF48
	push {r4, lr}
	ldr r1, _080CEF64  @ gUnknown_08B12AA4
	ldr r1, [r1]
	adds r1, #0x2f
	ldrb r2, [r1]
	ldr r4, _080CEF68  @ gKeyStatusPtr
	cmp r2, #1
	beq _080CEF82
	cmp r2, #1
	bgt _080CEF6C
	cmp r2, #0
	beq _080CEF72
	b _080CEFC0
	.align 2, 0
_080CEF64: .4byte gUnknown_08B12AA4
_080CEF68: .4byte gKeyStatusPtr
_080CEF6C:
	cmp r2, #2
	beq _080CEF9E
	b _080CEFC0
_080CEF72:
	ldr r1, [r4]
	ldrh r2, [r1, #8]
	movs r1, #4
	ands r1, r2
	cmp r1, #0
	beq _080CEF82
	movs r0, #4
	b _080CEFCE
_080CEF82:
	ldr r1, [r4]
	ldrh r2, [r1, #8]
	movs r1, #1
	ands r1, r2
	cmp r1, #0
	beq _080CEF92
	movs r0, #2
	b _080CEFCE
_080CEF92:
	movs r1, #2
	ands r1, r2
	cmp r1, #0
	beq _080CEFC0
_080CEF9A:
	movs r0, #3
	b _080CEFCE
_080CEF9E:
	ldr r1, [r4]
	ldrh r3, [r1, #8]
	ands r2, r3
	cmp r2, #0
	bne _080CEF9A
	movs r1, #0x11
	ands r1, r3
	cmp r1, #0
	beq _080CEFB4
	movs r0, #5
	b _080CEFCE
_080CEFB4:
	movs r1, #0x20
	ands r1, r3
	cmp r1, #0
	beq _080CEFC0
	movs r0, #6
	b _080CEFCE
_080CEFC0:
	ldr r1, [r4]
	ldrh r2, [r1, #6]
	movs r1, #0xc0
	ands r1, r2
	cmp r1, #0
	beq _080CEFCE
	movs r0, #1
_080CEFCE:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_START sub_80CEFD4
sub_80CEFD4: @ 0x080CEFD4
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r4, #0
	bl sub_80CEF48
	subs r0, #1
	cmp r0, #5
	bls _080CEFE6
	b _080CF43A
_080CEFE6:
	lsls r0, r0, #2
	ldr r1, _080CEFF0  @ _080CEFF4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080CEFF0: .4byte _080CEFF4
_080CEFF4: @ jump table
	.4byte _080CF1AC @ case 0
	.4byte _080CF00C @ case 1
	.4byte _080CF0D4 @ case 2
	.4byte _080CF13C @ case 3
	.4byte _080CF094 @ case 4
	.4byte _080CF0B4 @ case 5
_080CF00C:
	ldr r0, _080CF03C  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080CF01E
	movs r0, #0x6a
	bl m4aSongNumStart
_080CF01E:
	ldr r4, _080CF040  @ gUnknown_08B12AA4
	ldr r1, [r4]
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r1, [r4]
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	beq _080CF044
	cmp r0, #2
	beq _080CF04A
	b _080CF43A
	.align 2, 0
_080CF03C: .4byte gUnknown_0202BCF0
_080CF040: .4byte gUnknown_08B12AA4
_080CF044:
	movs r0, #0x80
	lsls r0, r0, #6
	b _080CF114
_080CF04A:
	adds r1, #0x2e
	movs r0, #0
	strb r0, [r1]
	ldr r2, _080CF090  @ gUnknown_08B19E0C
	ldr r0, [r4]
	adds r1, r0, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x68
	adds r0, r0, r1
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrh r0, [r0, #8]
	bl SetEventId
	ldr r0, [r4]
	adds r1, r0, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x68
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r1, #0
	bl sub_80CE5F0
	bl sub_809764C
	b _080CF43A
	.align 2, 0
_080CF090: .4byte gUnknown_08B19E0C
_080CF094:
	ldr r0, _080CF0B0  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r1, r0, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x68
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r1, #1
	bl sub_80CE5F0
	b _080CF43A
	.align 2, 0
_080CF0B0: .4byte gUnknown_08B12AA4
_080CF0B4:
	ldr r0, _080CF0D0  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r1, r0, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x68
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r1, #2
	bl sub_80CE5F0
	b _080CF43A
	.align 2, 0
_080CF0D0: .4byte gUnknown_08B12AA4
_080CF0D4:
	ldr r0, _080CF108  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080CF0E6
	movs r0, #0x6b
	bl m4aSongNumStart
_080CF0E6:
	ldr r2, _080CF10C  @ gUnknown_08B12AA4
	ldr r0, [r2]
	adds r1, r0, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #0
	beq _080CF134
	subs r0, #1
	strb r0, [r1]
	ldr r0, [r2]
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CF110
	cmp r0, #1
	beq _080CF120
	b _080CF43A
	.align 2, 0
_080CF108: .4byte gUnknown_0202BCF0
_080CF10C: .4byte gUnknown_08B12AA4
_080CF110:
	movs r0, #0x80
	lsls r0, r0, #5
_080CF114:
	bl sub_80CEC68
	movs r0, #4
	bl BG_EnableSyncByMask
	b _080CF43A
_080CF120:
	ldr r0, _080CF130  @ gUnknown_08B12B9C
	adds r1, r5, #0
	bl Proc_CreateBlockingChild
	bl sub_8097668
	b _080CF43A
	.align 2, 0
_080CF130: .4byte gUnknown_08B12B9C
_080CF134:
	adds r0, r5, #0
	bl Proc_ClearNativeCallback
	b _080CF43A
_080CF13C:
	ldr r0, _080CF170  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080CF14E
	movs r0, #0x6a
	bl m4aSongNumStart
_080CF14E:
	ldr r3, _080CF174  @ gUnknown_08B12AA4
	ldr r2, [r3]
	adds r2, #0x30
	ldrb r0, [r2]
	adds r0, #1
	movs r1, #1
	ands r0, r1
	strb r0, [r2]
	ldr r0, [r3]
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CF178
	movs r0, #0xb3
	bl SetEventId
	b _080CF17E
	.align 2, 0
_080CF170: .4byte gUnknown_0202BCF0
_080CF174: .4byte gUnknown_08B12AA4
_080CF178:
	movs r0, #0xb3
	bl UnsetEventId
_080CF17E:
	ldr r2, _080CF1A4  @ gUnknown_08B12AA4
	ldr r0, [r2]
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x2a
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x2b
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x2c
	strb r1, [r0]
	ldr r0, _080CF1A8  @ gUnknown_08B12B3C
	adds r1, r5, #0
	bl Proc_CreateBlockingChild
	b _080CF43A
	.align 2, 0
_080CF1A4: .4byte gUnknown_08B12AA4
_080CF1A8: .4byte gUnknown_08B12B3C
_080CF1AC:
	ldr r6, _080CF1C8  @ gUnknown_08B12AA4
	ldr r3, [r6]
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	adds r7, r6, #0
	cmp r0, #1
	bne _080CF1BE
	b _080CF2E8
_080CF1BE:
	cmp r0, #1
	bgt _080CF1CC
	cmp r0, #0
	beq _080CF1D4
	b _080CF424
	.align 2, 0
_080CF1C8: .4byte gUnknown_08B12AA4
_080CF1CC:
	cmp r0, #2
	bne _080CF1D2
	b _080CF3A4
_080CF1D2:
	b _080CF424
_080CF1D4:
	ldr r0, _080CF230  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080CF234
	adds r1, r3, #0
	adds r1, #0x29
	ldrb r2, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _080CF2C0
	subs r0, r2, #1
	strb r0, [r1]
	ldr r1, [r6]
	adds r0, r1, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r1, #0
	adds r2, #0x2a
	movs r1, #0
	ldrsb r1, [r2, r1]
	subs r0, r0, r1
	cmp r0, #0
	bgt _080CF22C
	ldrb r1, [r2]
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	beq _080CF22C
	subs r0, r1, #1
	strb r0, [r2]
	ldr r0, [r6]
	adds r0, #0x29
	movs r1, #0
	ldrsb r1, [r0, r1]
	subs r1, #1
	adds r0, r5, #0
	bl sub_80CE750
_080CF22C:
	movs r4, #1
	b _080CF2C6
	.align 2, 0
_080CF230: .4byte gKeyStatusPtr
_080CF234:
	adds r0, r3, #0
	adds r0, #0x29
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, #7
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CF252
	adds r0, r3, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	blt _080CF25E
	b _080CF2C0
_080CF252:
	adds r0, r3, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _080CF2C0
_080CF25E:
	ldr r0, [r7]
	adds r0, #0x29
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r0, #0x29
	movs r2, #0
	ldrsb r2, [r0, r2]
	adds r0, #1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r2, r0
	cmp r0, #4
	ble _080CF2BE
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq _080CF298
	adds r0, r1, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt _080CF2A4
	b _080CF2BE
_080CF298:
	adds r0, r1, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	bge _080CF2BE
_080CF2A4:
	ldr r1, [r7]
	adds r1, #0x2a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r0, [r7]
	adds r0, #0x29
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r1, #1
	adds r0, r5, #0
	bl sub_80CE858
_080CF2BE:
	movs r4, #1
_080CF2C0:
	cmp r4, #0
	bne _080CF2C6
	b _080CF43A
_080CF2C6:
	ldr r0, _080CF2E0  @ gUnknown_08B12B9C
	adds r1, r5, #0
	bl Proc_Create
	ldr r2, _080CF2E4  @ gUnknown_08B12AA4
	ldr r0, [r2]
	adds r0, #0x2b
	movs r1, #0
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x2c
	strb r1, [r0]
	b _080CF424
	.align 2, 0
_080CF2E0: .4byte gUnknown_08B12B9C
_080CF2E4: .4byte gUnknown_08B12AA4
_080CF2E8:
	ldr r0, _080CF348  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080CF34C
	adds r1, r3, #0
	adds r1, #0x2b
	ldrb r2, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne _080CF306
	b _080CF424
_080CF306:
	subs r0, r2, #1
	strb r0, [r1]
	ldr r1, [r6]
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r1, #0
	adds r2, #0x2c
	movs r1, #0
	ldrsb r1, [r2, r1]
	subs r0, r0, r1
	cmp r0, #0
	bgt _080CF342
	ldrb r1, [r2]
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	beq _080CF342
	subs r0, r1, #1
	strb r0, [r2]
	ldr r0, [r6]
	adds r0, #0x2b
	movs r1, #0
	ldrsb r1, [r0, r1]
	subs r1, #1
	adds r0, r5, #0
	bl sub_80CE750
_080CF342:
	movs r4, #1
	b _080CF428
	.align 2, 0
_080CF348: .4byte gKeyStatusPtr
_080CF34C:
	adds r2, r3, #0
	adds r2, #0x2b
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r3, #0
	adds r0, #0x3e
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _080CF424
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r1, [r6]
	adds r0, r1, #0
	adds r0, #0x2b
	movs r3, #0
	ldrsb r3, [r0, r3]
	adds r2, r1, #0
	adds r2, #0x2c
	movs r0, #0
	ldrsb r0, [r2, r0]
	subs r0, r3, r0
	cmp r0, #4
	ble _080CF3A0
	adds r0, r1, #0
	adds r0, #0x3e
	ldrb r0, [r0]
	subs r0, #1
	cmp r3, r0
	bge _080CF3A0
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r0, [r6]
	adds r0, #0x2b
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r1, #1
	adds r0, r5, #0
	bl sub_80CE858
_080CF3A0:
	movs r4, #1
	b _080CF428
_080CF3A4:
	ldr r0, _080CF3E4  @ gKeyStatusPtr
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080CF3EC
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r2, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _080CF424
	subs r0, r2, #1
	movs r4, #0
	strb r0, [r1]
	ldr r0, _080CF3E8  @ gUnknown_08B12C3C
	adds r1, r5, #0
	bl Proc_CreateBlockingChild
	adds r5, r0, #0
	ldr r0, [r6]
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [r5, #0x34]
	str r4, [r5, #0x38]
	movs r4, #1
	b _080CF428
	.align 2, 0
_080CF3E4: .4byte gKeyStatusPtr
_080CF3E8: .4byte gUnknown_08B12C3C
_080CF3EC:
	adds r2, r3, #0
	adds r2, #0x2e
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r3, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	subs r0, #4
	cmp r1, r0
	bge _080CF424
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r0, _080CF440  @ gUnknown_08B12C3C
	adds r1, r5, #0
	bl Proc_CreateBlockingChild
	adds r5, r0, #0
	ldr r0, [r6]
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, #3
	str r0, [r5, #0x34]
	movs r0, #1
	str r0, [r5, #0x38]
	movs r4, #1
_080CF424:
	cmp r4, #0
	beq _080CF43A
_080CF428:
	ldr r0, _080CF444  @ gUnknown_0202BCF0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080CF43A
	movs r0, #0x66
	bl m4aSongNumStart
_080CF43A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080CF440: .4byte gUnknown_08B12C3C
_080CF444: .4byte gUnknown_0202BCF0

	THUMB_FUNC_START sub_80CF448
sub_80CF448: @ 0x080CF448
	push {lr}
	bl EndBG3Slider
	ldr r0, _080CF45C  @ gUnknown_08B12B1C
	bl Proc_DeleteAllWithScript
	bl Delete6CMenuScroll
	pop {r0}
	bx r0
	.align 2, 0
_080CF45C: .4byte gUnknown_08B12B1C

	THUMB_FUNC_START sub_80CF460
sub_80CF460: @ 0x080CF460
	push {r4, lr}
	ldr r4, _080CF468  @ gUnknown_08B19E0C
	b _080CF474
	.align 2, 0
_080CF468: .4byte gUnknown_08B19E0C
_080CF46C:
	ldrh r0, [r4, #6]
	bl SetEventId
	adds r4, #0xc
_080CF474:
	ldrb r0, [r4]
	cmp r0, #0xc
	bne _080CF46C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_START sub_80CF480
sub_80CF480: @ 0x080CF480
	push {r4, lr}
	ldr r4, _080CF488  @ gUnknown_08B19E0C
	b _080CF4AA
	.align 2, 0
_080CF488: .4byte gUnknown_08B19E0C
_080CF48C:
	ldrh r0, [r4, #6]
	bl CheckEventId
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080CF4A8
	ldrh r0, [r4, #8]
	bl CheckEventId
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080CF4A8
	movs r0, #0
	b _080CF4B2
_080CF4A8:
	adds r4, #0xc
_080CF4AA:
	ldrb r0, [r4]
	cmp r0, #0xc
	bne _080CF48C
	movs r0, #1
_080CF4B2:
	pop {r4}
	pop {r1}
	bx r1
